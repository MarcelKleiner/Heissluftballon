
STM32F303_GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bd0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002d58  08002d58  00012d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d90  08002d90  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d90  08002d90  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d90  08002d90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002d90  08002d90  00012d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d98  08002d98  00012d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  08002da8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08002da8  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000088ab  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019f0  00000000  00000000  000288e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000750  00000000  00000000  0002a2d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000668  00000000  00000000  0002aa28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000184d4  00000000  00000000  0002b090  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000077a1  00000000  00000000  00043564  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007e618  00000000  00000000  0004ad05  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c931d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b98  00000000  00000000  000c9398  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002d40 	.word	0x08002d40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002d40 	.word	0x08002d40

080001c8 <_ZN3GPSC1Ev>:
//*************************************************************




GPS::GPS() {
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub

}
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4618      	mov	r0, r3
 80001d4:	370c      	adds	r7, #12
 80001d6:	46bd      	mov	sp, r7
 80001d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001dc:	4770      	bx	lr
	...

080001e0 <_ZN3GPS4initEv>:
 *
 * @param none
 * @return none
 *
 */
void GPS::init(){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b084      	sub	sp, #16
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 80; i++) {
 80001e8:	2300      	movs	r3, #0
 80001ea:	60fb      	str	r3, [r7, #12]
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	2b4f      	cmp	r3, #79	; 0x4f
 80001f0:	dc0d      	bgt.n	800020e <_ZN3GPS4initEv+0x2e>
		data[i] = '0';
 80001f2:	4a0b      	ldr	r2, [pc, #44]	; (8000220 <_ZN3GPS4initEv+0x40>)
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	4413      	add	r3, r2
 80001f8:	2230      	movs	r2, #48	; 0x30
 80001fa:	701a      	strb	r2, [r3, #0]
		GPS_Data[i] = '0';
 80001fc:	4a09      	ldr	r2, [pc, #36]	; (8000224 <_ZN3GPS4initEv+0x44>)
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	4413      	add	r3, r2
 8000202:	2230      	movs	r2, #48	; 0x30
 8000204:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 80; i++) {
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	3301      	adds	r3, #1
 800020a:	60fb      	str	r3, [r7, #12]
 800020c:	e7ee      	b.n	80001ec <_ZN3GPS4initEv+0xc>
	}
	HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 800020e:	2201      	movs	r2, #1
 8000210:	4905      	ldr	r1, [pc, #20]	; (8000228 <_ZN3GPS4initEv+0x48>)
 8000212:	4806      	ldr	r0, [pc, #24]	; (800022c <_ZN3GPS4initEv+0x4c>)
 8000214:	f001 ff88 	bl	8002128 <HAL_UART_Receive_IT>
}
 8000218:	bf00      	nop
 800021a:	3710      	adds	r7, #16
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}
 8000220:	2000007c 	.word	0x2000007c
 8000224:	2000002c 	.word	0x2000002c
 8000228:	20000029 	.word	0x20000029
 800022c:	200000d4 	.word	0x200000d4

08000230 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef>:
*
*
* @param huart UART handle.
* @return None
 */
void GPS::gpsInterrupt(UART_HandleTypeDef *UartHandle) {
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	6039      	str	r1, [r7, #0]

	static uint8_t i = 0;


		/* Receive one byte in interrupt mode */
		HAL_UART_Receive_IT(UartHandle, &rxByte, 1);
 800023a:	2201      	movs	r2, #1
 800023c:	4948      	ldr	r1, [pc, #288]	; (8000360 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x130>)
 800023e:	6838      	ldr	r0, [r7, #0]
 8000240:	f001 ff72 	bl	8002128 <HAL_UART_Receive_IT>

		/*Check if received byte is a '$' (begin of record) */
		if ((char) rxByte == '$') {
 8000244:	4b46      	ldr	r3, [pc, #280]	; (8000360 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x130>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	2b24      	cmp	r3, #36	; 0x24
 800024a:	d105      	bne.n	8000258 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x28>
			recordStart = true;
 800024c:	4b45      	ldr	r3, [pc, #276]	; (8000364 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x134>)
 800024e:	2201      	movs	r2, #1
 8000250:	701a      	strb	r2, [r3, #0]
			i = 0;
 8000252:	4b45      	ldr	r3, [pc, #276]	; (8000368 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x138>)
 8000254:	2200      	movs	r2, #0
 8000256:	701a      	strb	r2, [r3, #0]
		}
		/*Check if received byte is a '\n' (end of record)*/
		if ((char) rxByte == '\n') {
 8000258:	4b41      	ldr	r3, [pc, #260]	; (8000360 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x130>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2b0a      	cmp	r3, #10
 800025e:	d16a      	bne.n	8000336 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x106>
			recordStart = false;
 8000260:	4b40      	ldr	r3, [pc, #256]	; (8000364 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x134>)
 8000262:	2200      	movs	r2, #0
 8000264:	701a      	strb	r2, [r3, #0]

			if (i > 70) {
 8000266:	4b40      	ldr	r3, [pc, #256]	; (8000368 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x138>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	2b46      	cmp	r3, #70	; 0x46
 800026c:	d91f      	bls.n	80002ae <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x7e>
				copyCounter = 0;
 800026e:	4b3f      	ldr	r3, [pc, #252]	; (800036c <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x13c>)
 8000270:	2200      	movs	r2, #0
 8000272:	701a      	strb	r2, [r3, #0]
				while (data[copyCounter] != '\r') {
 8000274:	4b3d      	ldr	r3, [pc, #244]	; (800036c <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x13c>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	461a      	mov	r2, r3
 800027a:	4b3d      	ldr	r3, [pc, #244]	; (8000370 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x140>)
 800027c:	5c9b      	ldrb	r3, [r3, r2]
 800027e:	2b0d      	cmp	r3, #13
 8000280:	d010      	beq.n	80002a4 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x74>
					GPS_Data[copyCounter] = data[copyCounter];
 8000282:	4b3a      	ldr	r3, [pc, #232]	; (800036c <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x13c>)
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	4619      	mov	r1, r3
 8000288:	4b38      	ldr	r3, [pc, #224]	; (800036c <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x13c>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	461a      	mov	r2, r3
 800028e:	4b38      	ldr	r3, [pc, #224]	; (8000370 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x140>)
 8000290:	5c59      	ldrb	r1, [r3, r1]
 8000292:	4b38      	ldr	r3, [pc, #224]	; (8000374 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x144>)
 8000294:	5499      	strb	r1, [r3, r2]
					copyCounter++;
 8000296:	4b35      	ldr	r3, [pc, #212]	; (800036c <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x13c>)
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	3301      	adds	r3, #1
 800029c:	b2da      	uxtb	r2, r3
 800029e:	4b33      	ldr	r3, [pc, #204]	; (800036c <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x13c>)
 80002a0:	701a      	strb	r2, [r3, #0]
				while (data[copyCounter] != '\r') {
 80002a2:	e7e7      	b.n	8000274 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x44>
				}
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80002a4:	2108      	movs	r1, #8
 80002a6:	4834      	ldr	r0, [pc, #208]	; (8000378 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x148>)
 80002a8:	f000 fd98 	bl	8000ddc <HAL_GPIO_TogglePin>
 80002ac:	e032      	b.n	8000314 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0xe4>
			}else{
				GPS_Data[0] = 'T';
 80002ae:	4b31      	ldr	r3, [pc, #196]	; (8000374 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x144>)
 80002b0:	2254      	movs	r2, #84	; 0x54
 80002b2:	701a      	strb	r2, [r3, #0]
				GPS_Data[1] = 'X';
 80002b4:	4b2f      	ldr	r3, [pc, #188]	; (8000374 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x144>)
 80002b6:	2258      	movs	r2, #88	; 0x58
 80002b8:	705a      	strb	r2, [r3, #1]
				GPS_Data[2] = ' ';
 80002ba:	4b2e      	ldr	r3, [pc, #184]	; (8000374 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x144>)
 80002bc:	2220      	movs	r2, #32
 80002be:	709a      	strb	r2, [r3, #2]
				GPS_Data[3] = 'N';
 80002c0:	4b2c      	ldr	r3, [pc, #176]	; (8000374 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x144>)
 80002c2:	224e      	movs	r2, #78	; 0x4e
 80002c4:	70da      	strb	r2, [r3, #3]
				GPS_Data[4] = 'o';
 80002c6:	4b2b      	ldr	r3, [pc, #172]	; (8000374 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x144>)
 80002c8:	226f      	movs	r2, #111	; 0x6f
 80002ca:	711a      	strb	r2, [r3, #4]
				GPS_Data[5] = ' ';
 80002cc:	4b29      	ldr	r3, [pc, #164]	; (8000374 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x144>)
 80002ce:	2220      	movs	r2, #32
 80002d0:	715a      	strb	r2, [r3, #5]
				GPS_Data[6] = 'G';
 80002d2:	4b28      	ldr	r3, [pc, #160]	; (8000374 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x144>)
 80002d4:	2247      	movs	r2, #71	; 0x47
 80002d6:	719a      	strb	r2, [r3, #6]
				GPS_Data[7] = 'P';
 80002d8:	4b26      	ldr	r3, [pc, #152]	; (8000374 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x144>)
 80002da:	2250      	movs	r2, #80	; 0x50
 80002dc:	71da      	strb	r2, [r3, #7]
				GPS_Data[8] = 'S';
 80002de:	4b25      	ldr	r3, [pc, #148]	; (8000374 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x144>)
 80002e0:	2253      	movs	r2, #83	; 0x53
 80002e2:	721a      	strb	r2, [r3, #8]
				GPS_Data[9] = ' ';
 80002e4:	4b23      	ldr	r3, [pc, #140]	; (8000374 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x144>)
 80002e6:	2220      	movs	r2, #32
 80002e8:	725a      	strb	r2, [r3, #9]
				GPS_Data[10] = 'S';
 80002ea:	4b22      	ldr	r3, [pc, #136]	; (8000374 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x144>)
 80002ec:	2253      	movs	r2, #83	; 0x53
 80002ee:	729a      	strb	r2, [r3, #10]
				GPS_Data[11] = 'i';
 80002f0:	4b20      	ldr	r3, [pc, #128]	; (8000374 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x144>)
 80002f2:	2269      	movs	r2, #105	; 0x69
 80002f4:	72da      	strb	r2, [r3, #11]
				GPS_Data[12]= 'g';
 80002f6:	4b1f      	ldr	r3, [pc, #124]	; (8000374 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x144>)
 80002f8:	2267      	movs	r2, #103	; 0x67
 80002fa:	731a      	strb	r2, [r3, #12]
				GPS_Data[13] = 'n';
 80002fc:	4b1d      	ldr	r3, [pc, #116]	; (8000374 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x144>)
 80002fe:	226e      	movs	r2, #110	; 0x6e
 8000300:	735a      	strb	r2, [r3, #13]
				GPS_Data[14] = 'a';
 8000302:	4b1c      	ldr	r3, [pc, #112]	; (8000374 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x144>)
 8000304:	2261      	movs	r2, #97	; 0x61
 8000306:	739a      	strb	r2, [r3, #14]
				GPS_Data[15] = 'l';
 8000308:	4b1a      	ldr	r3, [pc, #104]	; (8000374 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x144>)
 800030a:	226c      	movs	r2, #108	; 0x6c
 800030c:	73da      	strb	r2, [r3, #15]
				copyCounter =  16;
 800030e:	4b17      	ldr	r3, [pc, #92]	; (800036c <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x13c>)
 8000310:	2210      	movs	r2, #16
 8000312:	701a      	strb	r2, [r3, #0]
			}
			for (int count = 0; count < 80; count++) {
 8000314:	2300      	movs	r3, #0
 8000316:	60fb      	str	r3, [r7, #12]
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	2b4f      	cmp	r3, #79	; 0x4f
 800031c:	dc08      	bgt.n	8000330 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x100>
				data[count] = '0';
 800031e:	4a14      	ldr	r2, [pc, #80]	; (8000370 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x140>)
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	4413      	add	r3, r2
 8000324:	2230      	movs	r2, #48	; 0x30
 8000326:	701a      	strb	r2, [r3, #0]
			for (int count = 0; count < 80; count++) {
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	3301      	adds	r3, #1
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	e7f3      	b.n	8000318 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0xe8>
			}
			i = 0;
 8000330:	4b0d      	ldr	r3, [pc, #52]	; (8000368 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x138>)
 8000332:	2200      	movs	r2, #0
 8000334:	701a      	strb	r2, [r3, #0]
		}

		if (recordStart) {
 8000336:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x134>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d00c      	beq.n	8000358 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x128>
			data[i] = rxByte;
 800033e:	4b0a      	ldr	r3, [pc, #40]	; (8000368 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x138>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	461a      	mov	r2, r3
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x130>)
 8000346:	7819      	ldrb	r1, [r3, #0]
 8000348:	4b09      	ldr	r3, [pc, #36]	; (8000370 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x140>)
 800034a:	5499      	strb	r1, [r3, r2]
			i++;
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x138>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	3301      	adds	r3, #1
 8000352:	b2da      	uxtb	r2, r3
 8000354:	4b04      	ldr	r3, [pc, #16]	; (8000368 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef+0x138>)
 8000356:	701a      	strb	r2, [r3, #0]
		}

	}
 8000358:	bf00      	nop
 800035a:	3710      	adds	r7, #16
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	20000029 	.word	0x20000029
 8000364:	20000028 	.word	0x20000028
 8000368:	200000cd 	.word	0x200000cd
 800036c:	200000cc 	.word	0x200000cc
 8000370:	2000007c 	.word	0x2000007c
 8000374:	2000002c 	.word	0x2000002c
 8000378:	48000400 	.word	0x48000400

0800037c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b088      	sub	sp, #32
 8000380:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000382:	f107 030c 	add.w	r3, r7, #12
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
 8000390:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000392:	4b1d      	ldr	r3, [pc, #116]	; (8000408 <MX_GPIO_Init+0x8c>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a1c      	ldr	r2, [pc, #112]	; (8000408 <MX_GPIO_Init+0x8c>)
 8000398:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800039c:	6153      	str	r3, [r2, #20]
 800039e:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <MX_GPIO_Init+0x8c>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003a6:	60bb      	str	r3, [r7, #8]
 80003a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003aa:	4b17      	ldr	r3, [pc, #92]	; (8000408 <MX_GPIO_Init+0x8c>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	4a16      	ldr	r2, [pc, #88]	; (8000408 <MX_GPIO_Init+0x8c>)
 80003b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003b4:	6153      	str	r3, [r2, #20]
 80003b6:	4b14      	ldr	r3, [pc, #80]	; (8000408 <MX_GPIO_Init+0x8c>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <MX_GPIO_Init+0x8c>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a10      	ldr	r2, [pc, #64]	; (8000408 <MX_GPIO_Init+0x8c>)
 80003c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003cc:	6153      	str	r3, [r2, #20]
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <MX_GPIO_Init+0x8c>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003d6:	603b      	str	r3, [r7, #0]
 80003d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	2108      	movs	r1, #8
 80003de:	480b      	ldr	r0, [pc, #44]	; (800040c <MX_GPIO_Init+0x90>)
 80003e0:	f000 fce4 	bl	8000dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003e4:	2308      	movs	r3, #8
 80003e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e8:	2301      	movs	r3, #1
 80003ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ec:	2300      	movs	r3, #0
 80003ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f0:	2300      	movs	r3, #0
 80003f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003f4:	f107 030c 	add.w	r3, r7, #12
 80003f8:	4619      	mov	r1, r3
 80003fa:	4804      	ldr	r0, [pc, #16]	; (800040c <MX_GPIO_Init+0x90>)
 80003fc:	f000 fb64 	bl	8000ac8 <HAL_GPIO_Init>

}
 8000400:	bf00      	nop
 8000402:	3720      	adds	r7, #32
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	40021000 	.word	0x40021000
 800040c:	48000400 	.word	0x48000400

08000410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000414:	f000 f9a2 	bl	800075c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000418:	f000 f810 	bl	800043c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800041c:	f7ff ffae 	bl	800037c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000420:	f000 f8f8 	bl	8000614 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_MspInit(&huart2);
 8000424:	4803      	ldr	r0, [pc, #12]	; (8000434 <main+0x24>)
 8000426:	f000 f925 	bl	8000674 <HAL_UART_MspInit>
  gps.init();
 800042a:	4803      	ldr	r0, [pc, #12]	; (8000438 <main+0x28>)
 800042c:	f7ff fed8 	bl	80001e0 <_ZN3GPS4initEv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000430:	e7fe      	b.n	8000430 <main+0x20>
 8000432:	bf00      	nop
 8000434:	200000d4 	.word	0x200000d4
 8000438:	200000d0 	.word	0x200000d0

0800043c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b090      	sub	sp, #64	; 0x40
 8000440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000442:	f107 0318 	add.w	r3, r7, #24
 8000446:	2228      	movs	r2, #40	; 0x28
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f002 fc70 	bl	8002d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]
 800045c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800045e:	2302      	movs	r3, #2
 8000460:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000462:	2301      	movs	r3, #1
 8000464:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000466:	2310      	movs	r3, #16
 8000468:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800046a:	2300      	movs	r3, #0
 800046c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046e:	f107 0318 	add.w	r3, r7, #24
 8000472:	4618      	mov	r0, r3
 8000474:	f000 fccc 	bl	8000e10 <HAL_RCC_OscConfig>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	bf14      	ite	ne
 800047e:	2301      	movne	r3, #1
 8000480:	2300      	moveq	r3, #0
 8000482:	b2db      	uxtb	r3, r3
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <_Z18SystemClock_Configv+0x50>
  {
    Error_Handler();
 8000488:	f000 f82c 	bl	80004e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048c:	230f      	movs	r3, #15
 800048e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000490:	2300      	movs	r3, #0
 8000492:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000494:	2300      	movs	r3, #0
 8000496:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000498:	2300      	movs	r3, #0
 800049a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	2100      	movs	r1, #0
 80004a4:	4618      	mov	r0, r3
 80004a6:	f001 fbbb 	bl	8001c20 <HAL_RCC_ClockConfig>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	bf14      	ite	ne
 80004b0:	2301      	movne	r3, #1
 80004b2:	2300      	moveq	r3, #0
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 80004ba:	f000 f813 	bl	80004e4 <Error_Handler>
  }
}
 80004be:	bf00      	nop
 80004c0:	3740      	adds	r7, #64	; 0x40
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
	...

080004c8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

/*Interrupt Handler*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]

	gps.gpsInterrupt(UartHandle);
 80004d0:	6879      	ldr	r1, [r7, #4]
 80004d2:	4803      	ldr	r0, [pc, #12]	; (80004e0 <HAL_UART_RxCpltCallback+0x18>)
 80004d4:	f7ff feac 	bl	8000230 <_ZN3GPS12gpsInterruptEP20__UART_HandleTypeDef>
}
 80004d8:	bf00      	nop
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	200000d0 	.word	0x200000d0

080004e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
	...

080004f4 <_Z41__static_initialization_and_destruction_0ii>:
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2b01      	cmp	r3, #1
 8000502:	d107      	bne.n	8000514 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800050a:	4293      	cmp	r3, r2
 800050c:	d102      	bne.n	8000514 <_Z41__static_initialization_and_destruction_0ii+0x20>
GPS gps;
 800050e:	4803      	ldr	r0, [pc, #12]	; (800051c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000510:	f7ff fe5a 	bl	80001c8 <_ZN3GPSC1Ev>
}
 8000514:	bf00      	nop
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	200000d0 	.word	0x200000d0

08000520 <_GLOBAL__sub_I_gps>:
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
 8000524:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000528:	2001      	movs	r0, #1
 800052a:	f7ff ffe3 	bl	80004f4 <_Z41__static_initialization_and_destruction_0ii>
 800052e:	bd80      	pop	{r7, pc}

08000530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000536:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <HAL_MspInit+0x44>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	4a0e      	ldr	r2, [pc, #56]	; (8000574 <HAL_MspInit+0x44>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6193      	str	r3, [r2, #24]
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <HAL_MspInit+0x44>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <HAL_MspInit+0x44>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	4a08      	ldr	r2, [pc, #32]	; (8000574 <HAL_MspInit+0x44>)
 8000554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000558:	61d3      	str	r3, [r2, #28]
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <HAL_MspInit+0x44>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000566:	bf00      	nop
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	40021000 	.word	0x40021000

08000578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800058a:	e7fe      	b.n	800058a <HardFault_Handler+0x4>

0800058c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <MemManage_Handler+0x4>

08000592 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000596:	e7fe      	b.n	8000596 <BusFault_Handler+0x4>

08000598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800059c:	e7fe      	b.n	800059c <UsageFault_Handler+0x4>

0800059e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005cc:	f000 f90c 	bl	80007e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80005d8:	4802      	ldr	r0, [pc, #8]	; (80005e4 <USART2_IRQHandler+0x10>)
 80005da:	f001 fe47 	bl	800226c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200000d4 	.word	0x200000d4

080005e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <SystemInit+0x28>)
 80005ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <SystemInit+0x28>)
 80005f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <SystemInit+0x28>)
 80005fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000602:	609a      	str	r2, [r3, #8]
#endif
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000618:	4b14      	ldr	r3, [pc, #80]	; (800066c <MX_USART2_UART_Init+0x58>)
 800061a:	4a15      	ldr	r2, [pc, #84]	; (8000670 <MX_USART2_UART_Init+0x5c>)
 800061c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800061e:	4b13      	ldr	r3, [pc, #76]	; (800066c <MX_USART2_UART_Init+0x58>)
 8000620:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_USART2_UART_Init+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_USART2_UART_Init+0x58>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_USART2_UART_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_USART2_UART_Init+0x58>)
 800063a:	2204      	movs	r2, #4
 800063c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <MX_USART2_UART_Init+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_USART2_UART_Init+0x58>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <MX_USART2_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_USART2_UART_Init+0x58>)
 8000652:	2200      	movs	r2, #0
 8000654:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_USART2_UART_Init+0x58>)
 8000658:	f001 fd18 	bl	800208c <HAL_UART_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000662:	f7ff ff3f 	bl	80004e4 <Error_Handler>
  }

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	200000d4 	.word	0x200000d4
 8000670:	40004400 	.word	0x40004400

08000674 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	; 0x28
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a1b      	ldr	r2, [pc, #108]	; (8000700 <HAL_UART_MspInit+0x8c>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d130      	bne.n	80006f8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000696:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <HAL_UART_MspInit+0x90>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	4a1a      	ldr	r2, [pc, #104]	; (8000704 <HAL_UART_MspInit+0x90>)
 800069c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a0:	61d3      	str	r3, [r2, #28]
 80006a2:	4b18      	ldr	r3, [pc, #96]	; (8000704 <HAL_UART_MspInit+0x90>)
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	4b15      	ldr	r3, [pc, #84]	; (8000704 <HAL_UART_MspInit+0x90>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	4a14      	ldr	r2, [pc, #80]	; (8000704 <HAL_UART_MspInit+0x90>)
 80006b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b8:	6153      	str	r3, [r2, #20]
 80006ba:	4b12      	ldr	r3, [pc, #72]	; (8000704 <HAL_UART_MspInit+0x90>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80006c6:	230c      	movs	r3, #12
 80006c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ca:	2302      	movs	r3, #2
 80006cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d2:	2303      	movs	r3, #3
 80006d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006d6:	2307      	movs	r3, #7
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e4:	f000 f9f0 	bl	8000ac8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2100      	movs	r1, #0
 80006ec:	2026      	movs	r0, #38	; 0x26
 80006ee:	f000 f976 	bl	80009de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006f2:	2026      	movs	r0, #38	; 0x26
 80006f4:	f000 f98f 	bl	8000a16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80006f8:	bf00      	nop
 80006fa:	3728      	adds	r7, #40	; 0x28
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40004400 	.word	0x40004400
 8000704:	40021000 	.word	0x40021000

08000708 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000740 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800070c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800070e:	e003      	b.n	8000718 <LoopCopyDataInit>

08000710 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000712:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000714:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000716:	3104      	adds	r1, #4

08000718 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000718:	480b      	ldr	r0, [pc, #44]	; (8000748 <LoopForever+0xa>)
	ldr	r3, =_edata
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <LoopForever+0xe>)
	adds	r2, r0, r1
 800071c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800071e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000720:	d3f6      	bcc.n	8000710 <CopyDataInit>
	ldr	r2, =_sbss
 8000722:	4a0b      	ldr	r2, [pc, #44]	; (8000750 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000724:	e002      	b.n	800072c <LoopFillZerobss>

08000726 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000726:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000728:	f842 3b04 	str.w	r3, [r2], #4

0800072c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <LoopForever+0x16>)
	cmp	r2, r3
 800072e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000730:	d3f9      	bcc.n	8000726 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000732:	f7ff ff59 	bl	80005e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000736:	f002 fad7 	bl	8002ce8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800073a:	f7ff fe69 	bl	8000410 <main>

0800073e <LoopForever>:

LoopForever:
    b LoopForever
 800073e:	e7fe      	b.n	800073e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000740:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000744:	08002d9c 	.word	0x08002d9c
	ldr	r0, =_sdata
 8000748:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800074c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000750:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000754:	20000158 	.word	0x20000158

08000758 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000758:	e7fe      	b.n	8000758 <ADC1_2_IRQHandler>
	...

0800075c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <HAL_Init+0x28>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a07      	ldr	r2, [pc, #28]	; (8000784 <HAL_Init+0x28>)
 8000766:	f043 0310 	orr.w	r3, r3, #16
 800076a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800076c:	2003      	movs	r0, #3
 800076e:	f000 f92b 	bl	80009c8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000772:	2000      	movs	r0, #0
 8000774:	f000 f808 	bl	8000788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000778:	f7ff feda 	bl	8000530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40022000 	.word	0x40022000

08000788 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <HAL_InitTick+0x54>)
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <HAL_InitTick+0x58>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4619      	mov	r1, r3
 800079a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079e:	fbb3 f3f1 	udiv	r3, r3, r1
 80007a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 f943 	bl	8000a32 <HAL_SYSTICK_Config>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
 80007b4:	e00e      	b.n	80007d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2b0f      	cmp	r3, #15
 80007ba:	d80a      	bhi.n	80007d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007bc:	2200      	movs	r2, #0
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	f04f 30ff 	mov.w	r0, #4294967295
 80007c4:	f000 f90b 	bl	80009de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007c8:	4a06      	ldr	r2, [pc, #24]	; (80007e4 <HAL_InitTick+0x5c>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007ce:	2300      	movs	r3, #0
 80007d0:	e000      	b.n	80007d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000000 	.word	0x20000000
 80007e0:	20000008 	.word	0x20000008
 80007e4:	20000004 	.word	0x20000004

080007e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_IncTick+0x20>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_IncTick+0x24>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4413      	add	r3, r2
 80007f8:	4a04      	ldr	r2, [pc, #16]	; (800080c <HAL_IncTick+0x24>)
 80007fa:	6013      	str	r3, [r2, #0]
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	20000008 	.word	0x20000008
 800080c:	20000154 	.word	0x20000154

08000810 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  return uwTick;  
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <HAL_GetTick+0x14>)
 8000816:	681b      	ldr	r3, [r3, #0]
}
 8000818:	4618      	mov	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	20000154 	.word	0x20000154

08000828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000844:	4013      	ands	r3, r2
 8000846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800085a:	4a04      	ldr	r2, [pc, #16]	; (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	60d3      	str	r3, [r2, #12]
}
 8000860:	bf00      	nop
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <__NVIC_GetPriorityGrouping+0x18>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	0a1b      	lsrs	r3, r3, #8
 800087a:	f003 0307 	and.w	r3, r3, #7
}
 800087e:	4618      	mov	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089a:	2b00      	cmp	r3, #0
 800089c:	db0b      	blt.n	80008b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	f003 021f 	and.w	r2, r3, #31
 80008a4:	4907      	ldr	r1, [pc, #28]	; (80008c4 <__NVIC_EnableIRQ+0x38>)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	095b      	lsrs	r3, r3, #5
 80008ac:	2001      	movs	r0, #1
 80008ae:	fa00 f202 	lsl.w	r2, r0, r2
 80008b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000e100 	.word	0xe000e100

080008c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	db0a      	blt.n	80008f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	490c      	ldr	r1, [pc, #48]	; (8000914 <__NVIC_SetPriority+0x4c>)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	0112      	lsls	r2, r2, #4
 80008e8:	b2d2      	uxtb	r2, r2
 80008ea:	440b      	add	r3, r1
 80008ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f0:	e00a      	b.n	8000908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4908      	ldr	r1, [pc, #32]	; (8000918 <__NVIC_SetPriority+0x50>)
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	f003 030f 	and.w	r3, r3, #15
 80008fe:	3b04      	subs	r3, #4
 8000900:	0112      	lsls	r2, r2, #4
 8000902:	b2d2      	uxtb	r2, r2
 8000904:	440b      	add	r3, r1
 8000906:	761a      	strb	r2, [r3, #24]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000e100 	.word	0xe000e100
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800091c:	b480      	push	{r7}
 800091e:	b089      	sub	sp, #36	; 0x24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	f1c3 0307 	rsb	r3, r3, #7
 8000936:	2b04      	cmp	r3, #4
 8000938:	bf28      	it	cs
 800093a:	2304      	movcs	r3, #4
 800093c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3304      	adds	r3, #4
 8000942:	2b06      	cmp	r3, #6
 8000944:	d902      	bls.n	800094c <NVIC_EncodePriority+0x30>
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	3b03      	subs	r3, #3
 800094a:	e000      	b.n	800094e <NVIC_EncodePriority+0x32>
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000950:	f04f 32ff 	mov.w	r2, #4294967295
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43da      	mvns	r2, r3
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	401a      	ands	r2, r3
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000964:	f04f 31ff 	mov.w	r1, #4294967295
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	fa01 f303 	lsl.w	r3, r1, r3
 800096e:	43d9      	mvns	r1, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000974:	4313      	orrs	r3, r2
         );
}
 8000976:	4618      	mov	r0, r3
 8000978:	3724      	adds	r7, #36	; 0x24
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
	...

08000984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3b01      	subs	r3, #1
 8000990:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000994:	d301      	bcc.n	800099a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000996:	2301      	movs	r3, #1
 8000998:	e00f      	b.n	80009ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800099a:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <SysTick_Config+0x40>)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3b01      	subs	r3, #1
 80009a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009a2:	210f      	movs	r1, #15
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	f7ff ff8e 	bl	80008c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <SysTick_Config+0x40>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009b2:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <SysTick_Config+0x40>)
 80009b4:	2207      	movs	r2, #7
 80009b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	e000e010 	.word	0xe000e010

080009c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff ff29 	bl	8000828 <__NVIC_SetPriorityGrouping>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b086      	sub	sp, #24
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	60b9      	str	r1, [r7, #8]
 80009e8:	607a      	str	r2, [r7, #4]
 80009ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009f0:	f7ff ff3e 	bl	8000870 <__NVIC_GetPriorityGrouping>
 80009f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	68b9      	ldr	r1, [r7, #8]
 80009fa:	6978      	ldr	r0, [r7, #20]
 80009fc:	f7ff ff8e 	bl	800091c <NVIC_EncodePriority>
 8000a00:	4602      	mov	r2, r0
 8000a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a06:	4611      	mov	r1, r2
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff5d 	bl	80008c8 <__NVIC_SetPriority>
}
 8000a0e:	bf00      	nop
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b082      	sub	sp, #8
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ff31 	bl	800088c <__NVIC_EnableIRQ>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff ffa2 	bl	8000984 <SysTick_Config>
 8000a40:	4603      	mov	r3, r0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b084      	sub	sp, #16
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d005      	beq.n	8000a6c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2204      	movs	r2, #4
 8000a64:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	73fb      	strb	r3, [r7, #15]
 8000a6a:	e027      	b.n	8000abc <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f022 020e 	bic.w	r2, r2, #14
 8000a7a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f022 0201 	bic.w	r2, r2, #1
 8000a8a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a94:	2101      	movs	r1, #1
 8000a96:	fa01 f202 	lsl.w	r2, r1, r2
 8000a9a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d003      	beq.n	8000abc <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	4798      	blx	r3
    } 
  }
  return status;
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b087      	sub	sp, #28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ad6:	e14e      	b.n	8000d76 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	2101      	movs	r1, #1
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	f000 8140 	beq.w	8000d70 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d003      	beq.n	8000b00 <HAL_GPIO_Init+0x38>
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	2b12      	cmp	r3, #18
 8000afe:	d123      	bne.n	8000b48 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	08da      	lsrs	r2, r3, #3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3208      	adds	r2, #8
 8000b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	f003 0307 	and.w	r3, r3, #7
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	220f      	movs	r2, #15
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4013      	ands	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	691a      	ldr	r2, [r3, #16]
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	08da      	lsrs	r2, r3, #3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	3208      	adds	r2, #8
 8000b42:	6939      	ldr	r1, [r7, #16]
 8000b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	2203      	movs	r2, #3
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f003 0203 	and.w	r2, r3, #3
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d00b      	beq.n	8000b9c <HAL_GPIO_Init+0xd4>
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d007      	beq.n	8000b9c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b90:	2b11      	cmp	r3, #17
 8000b92:	d003      	beq.n	8000b9c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	2b12      	cmp	r3, #18
 8000b9a:	d130      	bne.n	8000bfe <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	43db      	mvns	r3, r3
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	68da      	ldr	r2, [r3, #12]
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	4013      	ands	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	091b      	lsrs	r3, r3, #4
 8000be8:	f003 0201 	and.w	r2, r3, #1
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	2203      	movs	r2, #3
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	4013      	ands	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	689a      	ldr	r2, [r3, #8]
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f000 809a 	beq.w	8000d70 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3c:	4b55      	ldr	r3, [pc, #340]	; (8000d94 <HAL_GPIO_Init+0x2cc>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a54      	ldr	r2, [pc, #336]	; (8000d94 <HAL_GPIO_Init+0x2cc>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b52      	ldr	r3, [pc, #328]	; (8000d94 <HAL_GPIO_Init+0x2cc>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c54:	4a50      	ldr	r2, [pc, #320]	; (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	089b      	lsrs	r3, r3, #2
 8000c5a:	3302      	adds	r3, #2
 8000c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	f003 0303 	and.w	r3, r3, #3
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	220f      	movs	r2, #15
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c7e:	d013      	beq.n	8000ca8 <HAL_GPIO_Init+0x1e0>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a46      	ldr	r2, [pc, #280]	; (8000d9c <HAL_GPIO_Init+0x2d4>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d00d      	beq.n	8000ca4 <HAL_GPIO_Init+0x1dc>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a45      	ldr	r2, [pc, #276]	; (8000da0 <HAL_GPIO_Init+0x2d8>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d007      	beq.n	8000ca0 <HAL_GPIO_Init+0x1d8>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a44      	ldr	r2, [pc, #272]	; (8000da4 <HAL_GPIO_Init+0x2dc>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d101      	bne.n	8000c9c <HAL_GPIO_Init+0x1d4>
 8000c98:	2303      	movs	r3, #3
 8000c9a:	e006      	b.n	8000caa <HAL_GPIO_Init+0x1e2>
 8000c9c:	2305      	movs	r3, #5
 8000c9e:	e004      	b.n	8000caa <HAL_GPIO_Init+0x1e2>
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	e002      	b.n	8000caa <HAL_GPIO_Init+0x1e2>
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e000      	b.n	8000caa <HAL_GPIO_Init+0x1e2>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	697a      	ldr	r2, [r7, #20]
 8000cac:	f002 0203 	and.w	r2, r2, #3
 8000cb0:	0092      	lsls	r2, r2, #2
 8000cb2:	4093      	lsls	r3, r2
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cba:	4937      	ldr	r1, [pc, #220]	; (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	089b      	lsrs	r3, r3, #2
 8000cc0:	3302      	adds	r3, #2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cc8:	4b37      	ldr	r3, [pc, #220]	; (8000da8 <HAL_GPIO_Init+0x2e0>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d003      	beq.n	8000cec <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cec:	4a2e      	ldr	r2, [pc, #184]	; (8000da8 <HAL_GPIO_Init+0x2e0>)
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000cf2:	4b2d      	ldr	r3, [pc, #180]	; (8000da8 <HAL_GPIO_Init+0x2e0>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d003      	beq.n	8000d16 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d16:	4a24      	ldr	r2, [pc, #144]	; (8000da8 <HAL_GPIO_Init+0x2e0>)
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d1c:	4b22      	ldr	r3, [pc, #136]	; (8000da8 <HAL_GPIO_Init+0x2e0>)
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d003      	beq.n	8000d40 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d40:	4a19      	ldr	r2, [pc, #100]	; (8000da8 <HAL_GPIO_Init+0x2e0>)
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <HAL_GPIO_Init+0x2e0>)
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d003      	beq.n	8000d6a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d6a:	4a0f      	ldr	r2, [pc, #60]	; (8000da8 <HAL_GPIO_Init+0x2e0>)
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	3301      	adds	r3, #1
 8000d74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	f47f aea9 	bne.w	8000ad8 <HAL_GPIO_Init+0x10>
  }
}
 8000d86:	bf00      	nop
 8000d88:	371c      	adds	r7, #28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40010000 	.word	0x40010000
 8000d9c:	48000400 	.word	0x48000400
 8000da0:	48000800 	.word	0x48000800
 8000da4:	48000c00 	.word	0x48000c00
 8000da8:	40010400 	.word	0x40010400

08000dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	807b      	strh	r3, [r7, #2]
 8000db8:	4613      	mov	r3, r2
 8000dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dbc:	787b      	ldrb	r3, [r7, #1]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dc2:	887a      	ldrh	r2, [r7, #2]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dc8:	e002      	b.n	8000dd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dca:	887a      	ldrh	r2, [r7, #2]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	695a      	ldr	r2, [r3, #20]
 8000dec:	887b      	ldrh	r3, [r7, #2]
 8000dee:	4013      	ands	r3, r2
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d004      	beq.n	8000dfe <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000df4:	887b      	ldrh	r3, [r7, #2]
 8000df6:	041a      	lsls	r2, r3, #16
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000dfc:	e002      	b.n	8000e04 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dfe:	887a      	ldrh	r2, [r7, #2]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	619a      	str	r2, [r3, #24]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d102      	bne.n	8000e2a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	f000 bef4 	b.w	8001c12 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	f000 816a 	beq.w	800110e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e3a:	4bb3      	ldr	r3, [pc, #716]	; (8001108 <HAL_RCC_OscConfig+0x2f8>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 030c 	and.w	r3, r3, #12
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	d00c      	beq.n	8000e60 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e46:	4bb0      	ldr	r3, [pc, #704]	; (8001108 <HAL_RCC_OscConfig+0x2f8>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 030c 	and.w	r3, r3, #12
 8000e4e:	2b08      	cmp	r3, #8
 8000e50:	d159      	bne.n	8000f06 <HAL_RCC_OscConfig+0xf6>
 8000e52:	4bad      	ldr	r3, [pc, #692]	; (8001108 <HAL_RCC_OscConfig+0x2f8>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e5e:	d152      	bne.n	8000f06 <HAL_RCC_OscConfig+0xf6>
 8000e60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e64:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e68:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000e6c:	fa93 f3a3 	rbit	r3, r3
 8000e70:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e74:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e78:	fab3 f383 	clz	r3, r3
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	095b      	lsrs	r3, r3, #5
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d102      	bne.n	8000e92 <HAL_RCC_OscConfig+0x82>
 8000e8c:	4b9e      	ldr	r3, [pc, #632]	; (8001108 <HAL_RCC_OscConfig+0x2f8>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	e015      	b.n	8000ebe <HAL_RCC_OscConfig+0xae>
 8000e92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e96:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000e9e:	fa93 f3a3 	rbit	r3, r3
 8000ea2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000ea6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eaa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000eae:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000eb2:	fa93 f3a3 	rbit	r3, r3
 8000eb6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000eba:	4b93      	ldr	r3, [pc, #588]	; (8001108 <HAL_RCC_OscConfig+0x2f8>)
 8000ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ebe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ec2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000ec6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000eca:	fa92 f2a2 	rbit	r2, r2
 8000ece:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000ed2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000ed6:	fab2 f282 	clz	r2, r2
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	f042 0220 	orr.w	r2, r2, #32
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	f002 021f 	and.w	r2, r2, #31
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8000eec:	4013      	ands	r3, r2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f000 810c 	beq.w	800110c <HAL_RCC_OscConfig+0x2fc>
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f040 8106 	bne.w	800110c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	f000 be86 	b.w	8001c12 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f10:	d106      	bne.n	8000f20 <HAL_RCC_OscConfig+0x110>
 8000f12:	4b7d      	ldr	r3, [pc, #500]	; (8001108 <HAL_RCC_OscConfig+0x2f8>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a7c      	ldr	r2, [pc, #496]	; (8001108 <HAL_RCC_OscConfig+0x2f8>)
 8000f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	e030      	b.n	8000f82 <HAL_RCC_OscConfig+0x172>
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d10c      	bne.n	8000f44 <HAL_RCC_OscConfig+0x134>
 8000f2a:	4b77      	ldr	r3, [pc, #476]	; (8001108 <HAL_RCC_OscConfig+0x2f8>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a76      	ldr	r2, [pc, #472]	; (8001108 <HAL_RCC_OscConfig+0x2f8>)
 8000f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	4b74      	ldr	r3, [pc, #464]	; (8001108 <HAL_RCC_OscConfig+0x2f8>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a73      	ldr	r2, [pc, #460]	; (8001108 <HAL_RCC_OscConfig+0x2f8>)
 8000f3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	e01e      	b.n	8000f82 <HAL_RCC_OscConfig+0x172>
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f4e:	d10c      	bne.n	8000f6a <HAL_RCC_OscConfig+0x15a>
 8000f50:	4b6d      	ldr	r3, [pc, #436]	; (8001108 <HAL_RCC_OscConfig+0x2f8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a6c      	ldr	r2, [pc, #432]	; (8001108 <HAL_RCC_OscConfig+0x2f8>)
 8000f56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	4b6a      	ldr	r3, [pc, #424]	; (8001108 <HAL_RCC_OscConfig+0x2f8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a69      	ldr	r2, [pc, #420]	; (8001108 <HAL_RCC_OscConfig+0x2f8>)
 8000f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	e00b      	b.n	8000f82 <HAL_RCC_OscConfig+0x172>
 8000f6a:	4b67      	ldr	r3, [pc, #412]	; (8001108 <HAL_RCC_OscConfig+0x2f8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a66      	ldr	r2, [pc, #408]	; (8001108 <HAL_RCC_OscConfig+0x2f8>)
 8000f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	4b64      	ldr	r3, [pc, #400]	; (8001108 <HAL_RCC_OscConfig+0x2f8>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a63      	ldr	r2, [pc, #396]	; (8001108 <HAL_RCC_OscConfig+0x2f8>)
 8000f7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f80:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f82:	4b61      	ldr	r3, [pc, #388]	; (8001108 <HAL_RCC_OscConfig+0x2f8>)
 8000f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f86:	f023 020f 	bic.w	r2, r3, #15
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	495d      	ldr	r1, [pc, #372]	; (8001108 <HAL_RCC_OscConfig+0x2f8>)
 8000f92:	4313      	orrs	r3, r2
 8000f94:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d059      	beq.n	8001054 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa0:	f7ff fc36 	bl	8000810 <HAL_GetTick>
 8000fa4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa8:	e00a      	b.n	8000fc0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000faa:	f7ff fc31 	bl	8000810 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b64      	cmp	r3, #100	; 0x64
 8000fb8:	d902      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	f000 be29 	b.w	8001c12 <HAL_RCC_OscConfig+0xe02>
 8000fc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fc4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000fcc:	fa93 f3a3 	rbit	r3, r3
 8000fd0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000fd4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd8:	fab3 f383 	clz	r3, r3
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	095b      	lsrs	r3, r3, #5
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d102      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x1e2>
 8000fec:	4b46      	ldr	r3, [pc, #280]	; (8001108 <HAL_RCC_OscConfig+0x2f8>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	e015      	b.n	800101e <HAL_RCC_OscConfig+0x20e>
 8000ff2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffa:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000ffe:	fa93 f3a3 	rbit	r3, r3
 8001002:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001006:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800100a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800100e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001012:	fa93 f3a3 	rbit	r3, r3
 8001016:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800101a:	4b3b      	ldr	r3, [pc, #236]	; (8001108 <HAL_RCC_OscConfig+0x2f8>)
 800101c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001022:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001026:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800102a:	fa92 f2a2 	rbit	r2, r2
 800102e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001032:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001036:	fab2 f282 	clz	r2, r2
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	f042 0220 	orr.w	r2, r2, #32
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	f002 021f 	and.w	r2, r2, #31
 8001046:	2101      	movs	r1, #1
 8001048:	fa01 f202 	lsl.w	r2, r1, r2
 800104c:	4013      	ands	r3, r2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0ab      	beq.n	8000faa <HAL_RCC_OscConfig+0x19a>
 8001052:	e05c      	b.n	800110e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001054:	f7ff fbdc 	bl	8000810 <HAL_GetTick>
 8001058:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800105c:	e00a      	b.n	8001074 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800105e:	f7ff fbd7 	bl	8000810 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b64      	cmp	r3, #100	; 0x64
 800106c:	d902      	bls.n	8001074 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	f000 bdcf 	b.w	8001c12 <HAL_RCC_OscConfig+0xe02>
 8001074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001078:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001080:	fa93 f3a3 	rbit	r3, r3
 8001084:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001088:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800108c:	fab3 f383 	clz	r3, r3
 8001090:	b2db      	uxtb	r3, r3
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	b2db      	uxtb	r3, r3
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b01      	cmp	r3, #1
 800109e:	d102      	bne.n	80010a6 <HAL_RCC_OscConfig+0x296>
 80010a0:	4b19      	ldr	r3, [pc, #100]	; (8001108 <HAL_RCC_OscConfig+0x2f8>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	e015      	b.n	80010d2 <HAL_RCC_OscConfig+0x2c2>
 80010a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010aa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ae:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80010b2:	fa93 f3a3 	rbit	r3, r3
 80010b6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80010ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010be:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80010c2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80010c6:	fa93 f3a3 	rbit	r3, r3
 80010ca:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <HAL_RCC_OscConfig+0x2f8>)
 80010d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010d6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80010da:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80010de:	fa92 f2a2 	rbit	r2, r2
 80010e2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80010e6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80010ea:	fab2 f282 	clz	r2, r2
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	f042 0220 	orr.w	r2, r2, #32
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	f002 021f 	and.w	r2, r2, #31
 80010fa:	2101      	movs	r1, #1
 80010fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001100:	4013      	ands	r3, r2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1ab      	bne.n	800105e <HAL_RCC_OscConfig+0x24e>
 8001106:	e002      	b.n	800110e <HAL_RCC_OscConfig+0x2fe>
 8001108:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800110c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 816f 	beq.w	80013fc <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800111e:	4bd0      	ldr	r3, [pc, #832]	; (8001460 <HAL_RCC_OscConfig+0x650>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 030c 	and.w	r3, r3, #12
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00b      	beq.n	8001142 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800112a:	4bcd      	ldr	r3, [pc, #820]	; (8001460 <HAL_RCC_OscConfig+0x650>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 030c 	and.w	r3, r3, #12
 8001132:	2b08      	cmp	r3, #8
 8001134:	d16c      	bne.n	8001210 <HAL_RCC_OscConfig+0x400>
 8001136:	4bca      	ldr	r3, [pc, #808]	; (8001460 <HAL_RCC_OscConfig+0x650>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d166      	bne.n	8001210 <HAL_RCC_OscConfig+0x400>
 8001142:	2302      	movs	r3, #2
 8001144:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001148:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800114c:	fa93 f3a3 	rbit	r3, r3
 8001150:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001154:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001158:	fab3 f383 	clz	r3, r3
 800115c:	b2db      	uxtb	r3, r3
 800115e:	095b      	lsrs	r3, r3, #5
 8001160:	b2db      	uxtb	r3, r3
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b01      	cmp	r3, #1
 800116a:	d102      	bne.n	8001172 <HAL_RCC_OscConfig+0x362>
 800116c:	4bbc      	ldr	r3, [pc, #752]	; (8001460 <HAL_RCC_OscConfig+0x650>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	e013      	b.n	800119a <HAL_RCC_OscConfig+0x38a>
 8001172:	2302      	movs	r3, #2
 8001174:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001178:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800117c:	fa93 f3a3 	rbit	r3, r3
 8001180:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001184:	2302      	movs	r3, #2
 8001186:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800118a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800118e:	fa93 f3a3 	rbit	r3, r3
 8001192:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001196:	4bb2      	ldr	r3, [pc, #712]	; (8001460 <HAL_RCC_OscConfig+0x650>)
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	2202      	movs	r2, #2
 800119c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80011a0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80011a4:	fa92 f2a2 	rbit	r2, r2
 80011a8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80011ac:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80011b0:	fab2 f282 	clz	r2, r2
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	f042 0220 	orr.w	r2, r2, #32
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	f002 021f 	and.w	r2, r2, #31
 80011c0:	2101      	movs	r1, #1
 80011c2:	fa01 f202 	lsl.w	r2, r1, r2
 80011c6:	4013      	ands	r3, r2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d007      	beq.n	80011dc <HAL_RCC_OscConfig+0x3cc>
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d002      	beq.n	80011dc <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	f000 bd1b 	b.w	8001c12 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011dc:	4ba0      	ldr	r3, [pc, #640]	; (8001460 <HAL_RCC_OscConfig+0x650>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	21f8      	movs	r1, #248	; 0xf8
 80011ec:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80011f4:	fa91 f1a1 	rbit	r1, r1
 80011f8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80011fc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001200:	fab1 f181 	clz	r1, r1
 8001204:	b2c9      	uxtb	r1, r1
 8001206:	408b      	lsls	r3, r1
 8001208:	4995      	ldr	r1, [pc, #596]	; (8001460 <HAL_RCC_OscConfig+0x650>)
 800120a:	4313      	orrs	r3, r2
 800120c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120e:	e0f5      	b.n	80013fc <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 8085 	beq.w	8001326 <HAL_RCC_OscConfig+0x516>
 800121c:	2301      	movs	r3, #1
 800121e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001222:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001226:	fa93 f3a3 	rbit	r3, r3
 800122a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800122e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001232:	fab3 f383 	clz	r3, r3
 8001236:	b2db      	uxtb	r3, r3
 8001238:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800123c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	461a      	mov	r2, r3
 8001244:	2301      	movs	r3, #1
 8001246:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001248:	f7ff fae2 	bl	8000810 <HAL_GetTick>
 800124c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001250:	e00a      	b.n	8001268 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001252:	f7ff fadd 	bl	8000810 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d902      	bls.n	8001268 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	f000 bcd5 	b.w	8001c12 <HAL_RCC_OscConfig+0xe02>
 8001268:	2302      	movs	r3, #2
 800126a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001272:	fa93 f3a3 	rbit	r3, r3
 8001276:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800127a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127e:	fab3 f383 	clz	r3, r3
 8001282:	b2db      	uxtb	r3, r3
 8001284:	095b      	lsrs	r3, r3, #5
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b01      	cmp	r3, #1
 8001290:	d102      	bne.n	8001298 <HAL_RCC_OscConfig+0x488>
 8001292:	4b73      	ldr	r3, [pc, #460]	; (8001460 <HAL_RCC_OscConfig+0x650>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	e013      	b.n	80012c0 <HAL_RCC_OscConfig+0x4b0>
 8001298:	2302      	movs	r3, #2
 800129a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80012a2:	fa93 f3a3 	rbit	r3, r3
 80012a6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80012aa:	2302      	movs	r3, #2
 80012ac:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80012b0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80012b4:	fa93 f3a3 	rbit	r3, r3
 80012b8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80012bc:	4b68      	ldr	r3, [pc, #416]	; (8001460 <HAL_RCC_OscConfig+0x650>)
 80012be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c0:	2202      	movs	r2, #2
 80012c2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80012c6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80012ca:	fa92 f2a2 	rbit	r2, r2
 80012ce:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80012d2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80012d6:	fab2 f282 	clz	r2, r2
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	f042 0220 	orr.w	r2, r2, #32
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	f002 021f 	and.w	r2, r2, #31
 80012e6:	2101      	movs	r1, #1
 80012e8:	fa01 f202 	lsl.w	r2, r1, r2
 80012ec:	4013      	ands	r3, r2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0af      	beq.n	8001252 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f2:	4b5b      	ldr	r3, [pc, #364]	; (8001460 <HAL_RCC_OscConfig+0x650>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	21f8      	movs	r1, #248	; 0xf8
 8001302:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001306:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800130a:	fa91 f1a1 	rbit	r1, r1
 800130e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001312:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001316:	fab1 f181 	clz	r1, r1
 800131a:	b2c9      	uxtb	r1, r1
 800131c:	408b      	lsls	r3, r1
 800131e:	4950      	ldr	r1, [pc, #320]	; (8001460 <HAL_RCC_OscConfig+0x650>)
 8001320:	4313      	orrs	r3, r2
 8001322:	600b      	str	r3, [r1, #0]
 8001324:	e06a      	b.n	80013fc <HAL_RCC_OscConfig+0x5ec>
 8001326:	2301      	movs	r3, #1
 8001328:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001330:	fa93 f3a3 	rbit	r3, r3
 8001334:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001338:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800133c:	fab3 f383 	clz	r3, r3
 8001340:	b2db      	uxtb	r3, r3
 8001342:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001346:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	461a      	mov	r2, r3
 800134e:	2300      	movs	r3, #0
 8001350:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001352:	f7ff fa5d 	bl	8000810 <HAL_GetTick>
 8001356:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135a:	e00a      	b.n	8001372 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800135c:	f7ff fa58 	bl	8000810 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d902      	bls.n	8001372 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	f000 bc50 	b.w	8001c12 <HAL_RCC_OscConfig+0xe02>
 8001372:	2302      	movs	r3, #2
 8001374:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001378:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800137c:	fa93 f3a3 	rbit	r3, r3
 8001380:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001384:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001388:	fab3 f383 	clz	r3, r3
 800138c:	b2db      	uxtb	r3, r3
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b01      	cmp	r3, #1
 800139a:	d102      	bne.n	80013a2 <HAL_RCC_OscConfig+0x592>
 800139c:	4b30      	ldr	r3, [pc, #192]	; (8001460 <HAL_RCC_OscConfig+0x650>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	e013      	b.n	80013ca <HAL_RCC_OscConfig+0x5ba>
 80013a2:	2302      	movs	r3, #2
 80013a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80013ac:	fa93 f3a3 	rbit	r3, r3
 80013b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80013b4:	2302      	movs	r3, #2
 80013b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80013ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013be:	fa93 f3a3 	rbit	r3, r3
 80013c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80013c6:	4b26      	ldr	r3, [pc, #152]	; (8001460 <HAL_RCC_OscConfig+0x650>)
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	2202      	movs	r2, #2
 80013cc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80013d0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80013d4:	fa92 f2a2 	rbit	r2, r2
 80013d8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80013dc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80013e0:	fab2 f282 	clz	r2, r2
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	f042 0220 	orr.w	r2, r2, #32
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	f002 021f 	and.w	r2, r2, #31
 80013f0:	2101      	movs	r1, #1
 80013f2:	fa01 f202 	lsl.w	r2, r1, r2
 80013f6:	4013      	ands	r3, r2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1af      	bne.n	800135c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 80da 	beq.w	80015c0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d069      	beq.n	80014ea <HAL_RCC_OscConfig+0x6da>
 8001416:	2301      	movs	r3, #1
 8001418:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001420:	fa93 f3a3 	rbit	r3, r3
 8001424:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001428:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142c:	fab3 f383 	clz	r3, r3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	461a      	mov	r2, r3
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <HAL_RCC_OscConfig+0x654>)
 8001436:	4413      	add	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	461a      	mov	r2, r3
 800143c:	2301      	movs	r3, #1
 800143e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001440:	f7ff f9e6 	bl	8000810 <HAL_GetTick>
 8001444:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001448:	e00e      	b.n	8001468 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800144a:	f7ff f9e1 	bl	8000810 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d906      	bls.n	8001468 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e3d9      	b.n	8001c12 <HAL_RCC_OscConfig+0xe02>
 800145e:	bf00      	nop
 8001460:	40021000 	.word	0x40021000
 8001464:	10908120 	.word	0x10908120
 8001468:	2302      	movs	r3, #2
 800146a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001472:	fa93 f3a3 	rbit	r3, r3
 8001476:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800147a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800147e:	2202      	movs	r2, #2
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	fa93 f2a3 	rbit	r2, r3
 800148c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001496:	2202      	movs	r2, #2
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	fa93 f2a3 	rbit	r2, r3
 80014a4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80014a8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014aa:	4ba5      	ldr	r3, [pc, #660]	; (8001740 <HAL_RCC_OscConfig+0x930>)
 80014ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014ae:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80014b2:	2102      	movs	r1, #2
 80014b4:	6019      	str	r1, [r3, #0]
 80014b6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	fa93 f1a3 	rbit	r1, r3
 80014c0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80014c4:	6019      	str	r1, [r3, #0]
  return result;
 80014c6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	fab3 f383 	clz	r3, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	f003 031f 	and.w	r3, r3, #31
 80014dc:	2101      	movs	r1, #1
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	4013      	ands	r3, r2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0b0      	beq.n	800144a <HAL_RCC_OscConfig+0x63a>
 80014e8:	e06a      	b.n	80015c0 <HAL_RCC_OscConfig+0x7b0>
 80014ea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80014ee:	2201      	movs	r2, #1
 80014f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	fa93 f2a3 	rbit	r2, r3
 80014fc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001500:	601a      	str	r2, [r3, #0]
  return result;
 8001502:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001506:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001508:	fab3 f383 	clz	r3, r3
 800150c:	b2db      	uxtb	r3, r3
 800150e:	461a      	mov	r2, r3
 8001510:	4b8c      	ldr	r3, [pc, #560]	; (8001744 <HAL_RCC_OscConfig+0x934>)
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	461a      	mov	r2, r3
 8001518:	2300      	movs	r3, #0
 800151a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151c:	f7ff f978 	bl	8000810 <HAL_GetTick>
 8001520:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001524:	e009      	b.n	800153a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001526:	f7ff f973 	bl	8000810 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e36b      	b.n	8001c12 <HAL_RCC_OscConfig+0xe02>
 800153a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800153e:	2202      	movs	r2, #2
 8001540:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001542:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	fa93 f2a3 	rbit	r2, r3
 800154c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001556:	2202      	movs	r2, #2
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	fa93 f2a3 	rbit	r2, r3
 8001564:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800156e:	2202      	movs	r2, #2
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	fa93 f2a3 	rbit	r2, r3
 800157c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001580:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001582:	4b6f      	ldr	r3, [pc, #444]	; (8001740 <HAL_RCC_OscConfig+0x930>)
 8001584:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001586:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800158a:	2102      	movs	r1, #2
 800158c:	6019      	str	r1, [r3, #0]
 800158e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	fa93 f1a3 	rbit	r1, r3
 8001598:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800159c:	6019      	str	r1, [r3, #0]
  return result;
 800159e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	fab3 f383 	clz	r3, r3
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	f003 031f 	and.w	r3, r3, #31
 80015b4:	2101      	movs	r1, #1
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1b2      	bne.n	8001526 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 8158 	beq.w	8001880 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015d6:	4b5a      	ldr	r3, [pc, #360]	; (8001740 <HAL_RCC_OscConfig+0x930>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d112      	bne.n	8001608 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	4b57      	ldr	r3, [pc, #348]	; (8001740 <HAL_RCC_OscConfig+0x930>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	4a56      	ldr	r2, [pc, #344]	; (8001740 <HAL_RCC_OscConfig+0x930>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ec:	61d3      	str	r3, [r2, #28]
 80015ee:	4b54      	ldr	r3, [pc, #336]	; (8001740 <HAL_RCC_OscConfig+0x930>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80015f6:	f107 0308 	add.w	r3, r7, #8
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	f107 0308 	add.w	r3, r7, #8
 8001600:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001602:	2301      	movs	r3, #1
 8001604:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001608:	4b4f      	ldr	r3, [pc, #316]	; (8001748 <HAL_RCC_OscConfig+0x938>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001610:	2b00      	cmp	r3, #0
 8001612:	d11a      	bne.n	800164a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001614:	4b4c      	ldr	r3, [pc, #304]	; (8001748 <HAL_RCC_OscConfig+0x938>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a4b      	ldr	r2, [pc, #300]	; (8001748 <HAL_RCC_OscConfig+0x938>)
 800161a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800161e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001620:	f7ff f8f6 	bl	8000810 <HAL_GetTick>
 8001624:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001628:	e009      	b.n	800163e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800162a:	f7ff f8f1 	bl	8000810 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b64      	cmp	r3, #100	; 0x64
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e2e9      	b.n	8001c12 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163e:	4b42      	ldr	r3, [pc, #264]	; (8001748 <HAL_RCC_OscConfig+0x938>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0ef      	beq.n	800162a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d106      	bne.n	8001662 <HAL_RCC_OscConfig+0x852>
 8001654:	4b3a      	ldr	r3, [pc, #232]	; (8001740 <HAL_RCC_OscConfig+0x930>)
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	4a39      	ldr	r2, [pc, #228]	; (8001740 <HAL_RCC_OscConfig+0x930>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6213      	str	r3, [r2, #32]
 8001660:	e02f      	b.n	80016c2 <HAL_RCC_OscConfig+0x8b2>
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10c      	bne.n	8001686 <HAL_RCC_OscConfig+0x876>
 800166c:	4b34      	ldr	r3, [pc, #208]	; (8001740 <HAL_RCC_OscConfig+0x930>)
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	4a33      	ldr	r2, [pc, #204]	; (8001740 <HAL_RCC_OscConfig+0x930>)
 8001672:	f023 0301 	bic.w	r3, r3, #1
 8001676:	6213      	str	r3, [r2, #32]
 8001678:	4b31      	ldr	r3, [pc, #196]	; (8001740 <HAL_RCC_OscConfig+0x930>)
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	4a30      	ldr	r2, [pc, #192]	; (8001740 <HAL_RCC_OscConfig+0x930>)
 800167e:	f023 0304 	bic.w	r3, r3, #4
 8001682:	6213      	str	r3, [r2, #32]
 8001684:	e01d      	b.n	80016c2 <HAL_RCC_OscConfig+0x8b2>
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	2b05      	cmp	r3, #5
 800168e:	d10c      	bne.n	80016aa <HAL_RCC_OscConfig+0x89a>
 8001690:	4b2b      	ldr	r3, [pc, #172]	; (8001740 <HAL_RCC_OscConfig+0x930>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	4a2a      	ldr	r2, [pc, #168]	; (8001740 <HAL_RCC_OscConfig+0x930>)
 8001696:	f043 0304 	orr.w	r3, r3, #4
 800169a:	6213      	str	r3, [r2, #32]
 800169c:	4b28      	ldr	r3, [pc, #160]	; (8001740 <HAL_RCC_OscConfig+0x930>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	4a27      	ldr	r2, [pc, #156]	; (8001740 <HAL_RCC_OscConfig+0x930>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6213      	str	r3, [r2, #32]
 80016a8:	e00b      	b.n	80016c2 <HAL_RCC_OscConfig+0x8b2>
 80016aa:	4b25      	ldr	r3, [pc, #148]	; (8001740 <HAL_RCC_OscConfig+0x930>)
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	4a24      	ldr	r2, [pc, #144]	; (8001740 <HAL_RCC_OscConfig+0x930>)
 80016b0:	f023 0301 	bic.w	r3, r3, #1
 80016b4:	6213      	str	r3, [r2, #32]
 80016b6:	4b22      	ldr	r3, [pc, #136]	; (8001740 <HAL_RCC_OscConfig+0x930>)
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	4a21      	ldr	r2, [pc, #132]	; (8001740 <HAL_RCC_OscConfig+0x930>)
 80016bc:	f023 0304 	bic.w	r3, r3, #4
 80016c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d06b      	beq.n	80017a4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016cc:	f7ff f8a0 	bl	8000810 <HAL_GetTick>
 80016d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d4:	e00b      	b.n	80016ee <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d6:	f7ff f89b 	bl	8000810 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e291      	b.n	8001c12 <HAL_RCC_OscConfig+0xe02>
 80016ee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80016f2:	2202      	movs	r2, #2
 80016f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	fa93 f2a3 	rbit	r2, r3
 8001700:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800170a:	2202      	movs	r2, #2
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	fa93 f2a3 	rbit	r2, r3
 8001718:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800171c:	601a      	str	r2, [r3, #0]
  return result;
 800171e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001722:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001724:	fab3 f383 	clz	r3, r3
 8001728:	b2db      	uxtb	r3, r3
 800172a:	095b      	lsrs	r3, r3, #5
 800172c:	b2db      	uxtb	r3, r3
 800172e:	f043 0302 	orr.w	r3, r3, #2
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d109      	bne.n	800174c <HAL_RCC_OscConfig+0x93c>
 8001738:	4b01      	ldr	r3, [pc, #4]	; (8001740 <HAL_RCC_OscConfig+0x930>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	e014      	b.n	8001768 <HAL_RCC_OscConfig+0x958>
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000
 8001744:	10908120 	.word	0x10908120
 8001748:	40007000 	.word	0x40007000
 800174c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001750:	2202      	movs	r2, #2
 8001752:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001754:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	fa93 f2a3 	rbit	r2, r3
 800175e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	4bbb      	ldr	r3, [pc, #748]	; (8001a54 <HAL_RCC_OscConfig+0xc44>)
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800176c:	2102      	movs	r1, #2
 800176e:	6011      	str	r1, [r2, #0]
 8001770:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001774:	6812      	ldr	r2, [r2, #0]
 8001776:	fa92 f1a2 	rbit	r1, r2
 800177a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800177e:	6011      	str	r1, [r2, #0]
  return result;
 8001780:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	fab2 f282 	clz	r2, r2
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	f002 021f 	and.w	r2, r2, #31
 8001796:	2101      	movs	r1, #1
 8001798:	fa01 f202 	lsl.w	r2, r1, r2
 800179c:	4013      	ands	r3, r2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d099      	beq.n	80016d6 <HAL_RCC_OscConfig+0x8c6>
 80017a2:	e063      	b.n	800186c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a4:	f7ff f834 	bl	8000810 <HAL_GetTick>
 80017a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ac:	e00b      	b.n	80017c6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ae:	f7ff f82f 	bl	8000810 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80017be:	4293      	cmp	r3, r2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e225      	b.n	8001c12 <HAL_RCC_OscConfig+0xe02>
 80017c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80017ca:	2202      	movs	r2, #2
 80017cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	fa93 f2a3 	rbit	r2, r3
 80017d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80017e2:	2202      	movs	r2, #2
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	fa93 f2a3 	rbit	r2, r3
 80017f0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017f4:	601a      	str	r2, [r3, #0]
  return result;
 80017f6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017fa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017fc:	fab3 f383 	clz	r3, r3
 8001800:	b2db      	uxtb	r3, r3
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	b2db      	uxtb	r3, r3
 8001806:	f043 0302 	orr.w	r3, r3, #2
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d102      	bne.n	8001816 <HAL_RCC_OscConfig+0xa06>
 8001810:	4b90      	ldr	r3, [pc, #576]	; (8001a54 <HAL_RCC_OscConfig+0xc44>)
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	e00d      	b.n	8001832 <HAL_RCC_OscConfig+0xa22>
 8001816:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800181a:	2202      	movs	r2, #2
 800181c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	fa93 f2a3 	rbit	r2, r3
 8001828:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	4b89      	ldr	r3, [pc, #548]	; (8001a54 <HAL_RCC_OscConfig+0xc44>)
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001836:	2102      	movs	r1, #2
 8001838:	6011      	str	r1, [r2, #0]
 800183a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	fa92 f1a2 	rbit	r1, r2
 8001844:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001848:	6011      	str	r1, [r2, #0]
  return result;
 800184a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	fab2 f282 	clz	r2, r2
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	f002 021f 	and.w	r2, r2, #31
 8001860:	2101      	movs	r1, #1
 8001862:	fa01 f202 	lsl.w	r2, r1, r2
 8001866:	4013      	ands	r3, r2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1a0      	bne.n	80017ae <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800186c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001870:	2b01      	cmp	r3, #1
 8001872:	d105      	bne.n	8001880 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001874:	4b77      	ldr	r3, [pc, #476]	; (8001a54 <HAL_RCC_OscConfig+0xc44>)
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	4a76      	ldr	r2, [pc, #472]	; (8001a54 <HAL_RCC_OscConfig+0xc44>)
 800187a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800187e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 81c2 	beq.w	8001c10 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800188c:	4b71      	ldr	r3, [pc, #452]	; (8001a54 <HAL_RCC_OscConfig+0xc44>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b08      	cmp	r3, #8
 8001896:	f000 819c 	beq.w	8001bd2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	f040 8114 	bne.w	8001ace <HAL_RCC_OscConfig+0xcbe>
 80018a6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	fa93 f2a3 	rbit	r2, r3
 80018ba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80018be:	601a      	str	r2, [r3, #0]
  return result;
 80018c0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80018c4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c6:	fab3 f383 	clz	r3, r3
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	461a      	mov	r2, r3
 80018d8:	2300      	movs	r3, #0
 80018da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7fe ff98 	bl	8000810 <HAL_GetTick>
 80018e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e4:	e009      	b.n	80018fa <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e6:	f7fe ff93 	bl	8000810 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e18b      	b.n	8001c12 <HAL_RCC_OscConfig+0xe02>
 80018fa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001902:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001904:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	fa93 f2a3 	rbit	r2, r3
 800190e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001912:	601a      	str	r2, [r3, #0]
  return result;
 8001914:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001918:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800191a:	fab3 f383 	clz	r3, r3
 800191e:	b2db      	uxtb	r3, r3
 8001920:	095b      	lsrs	r3, r3, #5
 8001922:	b2db      	uxtb	r3, r3
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b01      	cmp	r3, #1
 800192c:	d102      	bne.n	8001934 <HAL_RCC_OscConfig+0xb24>
 800192e:	4b49      	ldr	r3, [pc, #292]	; (8001a54 <HAL_RCC_OscConfig+0xc44>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	e01b      	b.n	800196c <HAL_RCC_OscConfig+0xb5c>
 8001934:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001938:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800193c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	fa93 f2a3 	rbit	r2, r3
 8001948:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001952:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	fa93 f2a3 	rbit	r2, r3
 8001962:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	4b3a      	ldr	r3, [pc, #232]	; (8001a54 <HAL_RCC_OscConfig+0xc44>)
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001970:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001974:	6011      	str	r1, [r2, #0]
 8001976:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	fa92 f1a2 	rbit	r1, r2
 8001980:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001984:	6011      	str	r1, [r2, #0]
  return result;
 8001986:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	fab2 f282 	clz	r2, r2
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	f042 0220 	orr.w	r2, r2, #32
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	f002 021f 	and.w	r2, r2, #31
 800199c:	2101      	movs	r1, #1
 800199e:	fa01 f202 	lsl.w	r2, r1, r2
 80019a2:	4013      	ands	r3, r2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d19e      	bne.n	80018e6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019a8:	4b2a      	ldr	r3, [pc, #168]	; (8001a54 <HAL_RCC_OscConfig+0xc44>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	430b      	orrs	r3, r1
 80019be:	4925      	ldr	r1, [pc, #148]	; (8001a54 <HAL_RCC_OscConfig+0xc44>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	604b      	str	r3, [r1, #4]
 80019c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	fa93 f2a3 	rbit	r2, r3
 80019d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019dc:	601a      	str	r2, [r3, #0]
  return result;
 80019de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019e2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e4:	fab3 f383 	clz	r3, r3
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	461a      	mov	r2, r3
 80019f6:	2301      	movs	r3, #1
 80019f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fa:	f7fe ff09 	bl	8000810 <HAL_GetTick>
 80019fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a02:	e009      	b.n	8001a18 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a04:	f7fe ff04 	bl	8000810 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e0fc      	b.n	8001c12 <HAL_RCC_OscConfig+0xe02>
 8001a18:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a22:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	fa93 f2a3 	rbit	r2, r3
 8001a2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a30:	601a      	str	r2, [r3, #0]
  return result;
 8001a32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a36:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a38:	fab3 f383 	clz	r3, r3
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	095b      	lsrs	r3, r3, #5
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d105      	bne.n	8001a58 <HAL_RCC_OscConfig+0xc48>
 8001a4c:	4b01      	ldr	r3, [pc, #4]	; (8001a54 <HAL_RCC_OscConfig+0xc44>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	e01e      	b.n	8001a90 <HAL_RCC_OscConfig+0xc80>
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000
 8001a58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	fa93 f2a3 	rbit	r2, r3
 8001a6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	fa93 f2a3 	rbit	r2, r3
 8001a86:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	4b63      	ldr	r3, [pc, #396]	; (8001c1c <HAL_RCC_OscConfig+0xe0c>)
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a94:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a98:	6011      	str	r1, [r2, #0]
 8001a9a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	fa92 f1a2 	rbit	r1, r2
 8001aa4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001aa8:	6011      	str	r1, [r2, #0]
  return result;
 8001aaa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	fab2 f282 	clz	r2, r2
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	f042 0220 	orr.w	r2, r2, #32
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	f002 021f 	and.w	r2, r2, #31
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d09b      	beq.n	8001a04 <HAL_RCC_OscConfig+0xbf4>
 8001acc:	e0a0      	b.n	8001c10 <HAL_RCC_OscConfig+0xe00>
 8001ace:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ad2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ad6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	fa93 f2a3 	rbit	r2, r3
 8001ae2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ae6:	601a      	str	r2, [r3, #0]
  return result;
 8001ae8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aee:	fab3 f383 	clz	r3, r3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001af8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	461a      	mov	r2, r3
 8001b00:	2300      	movs	r3, #0
 8001b02:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7fe fe84 	bl	8000810 <HAL_GetTick>
 8001b08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b0c:	e009      	b.n	8001b22 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b0e:	f7fe fe7f 	bl	8000810 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e077      	b.n	8001c12 <HAL_RCC_OscConfig+0xe02>
 8001b22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	fa93 f2a3 	rbit	r2, r3
 8001b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b3a:	601a      	str	r2, [r3, #0]
  return result;
 8001b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b40:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b42:	fab3 f383 	clz	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	095b      	lsrs	r3, r3, #5
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d102      	bne.n	8001b5c <HAL_RCC_OscConfig+0xd4c>
 8001b56:	4b31      	ldr	r3, [pc, #196]	; (8001c1c <HAL_RCC_OscConfig+0xe0c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	e01b      	b.n	8001b94 <HAL_RCC_OscConfig+0xd84>
 8001b5c:	f107 0320 	add.w	r3, r7, #32
 8001b60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b66:	f107 0320 	add.w	r3, r7, #32
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	fa93 f2a3 	rbit	r2, r3
 8001b70:	f107 031c 	add.w	r3, r7, #28
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	f107 0318 	add.w	r3, r7, #24
 8001b7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	f107 0318 	add.w	r3, r7, #24
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	fa93 f2a3 	rbit	r2, r3
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	4b22      	ldr	r3, [pc, #136]	; (8001c1c <HAL_RCC_OscConfig+0xe0c>)
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	f107 0210 	add.w	r2, r7, #16
 8001b98:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b9c:	6011      	str	r1, [r2, #0]
 8001b9e:	f107 0210 	add.w	r2, r7, #16
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	fa92 f1a2 	rbit	r1, r2
 8001ba8:	f107 020c 	add.w	r2, r7, #12
 8001bac:	6011      	str	r1, [r2, #0]
  return result;
 8001bae:	f107 020c 	add.w	r2, r7, #12
 8001bb2:	6812      	ldr	r2, [r2, #0]
 8001bb4:	fab2 f282 	clz	r2, r2
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	f042 0220 	orr.w	r2, r2, #32
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	f002 021f 	and.w	r2, r2, #31
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d19e      	bne.n	8001b0e <HAL_RCC_OscConfig+0xcfe>
 8001bd0:	e01e      	b.n	8001c10 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d101      	bne.n	8001be0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e018      	b.n	8001c12 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001be0:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <HAL_RCC_OscConfig+0xe0c>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001be8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001bec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d108      	bne.n	8001c0c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001bfa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001bfe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40021000 	.word	0x40021000

08001c20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b09e      	sub	sp, #120	; 0x78
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e162      	b.n	8001efe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c38:	4b90      	ldr	r3, [pc, #576]	; (8001e7c <HAL_RCC_ClockConfig+0x25c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d910      	bls.n	8001c68 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c46:	4b8d      	ldr	r3, [pc, #564]	; (8001e7c <HAL_RCC_ClockConfig+0x25c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 0207 	bic.w	r2, r3, #7
 8001c4e:	498b      	ldr	r1, [pc, #556]	; (8001e7c <HAL_RCC_ClockConfig+0x25c>)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c56:	4b89      	ldr	r3, [pc, #548]	; (8001e7c <HAL_RCC_ClockConfig+0x25c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d001      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e14a      	b.n	8001efe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d008      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c74:	4b82      	ldr	r3, [pc, #520]	; (8001e80 <HAL_RCC_ClockConfig+0x260>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	497f      	ldr	r1, [pc, #508]	; (8001e80 <HAL_RCC_ClockConfig+0x260>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 80dc 	beq.w	8001e4c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d13c      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xf6>
 8001c9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ca0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ca4:	fa93 f3a3 	rbit	r3, r3
 8001ca8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cac:	fab3 f383 	clz	r3, r3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	095b      	lsrs	r3, r3, #5
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d102      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xa6>
 8001cc0:	4b6f      	ldr	r3, [pc, #444]	; (8001e80 <HAL_RCC_ClockConfig+0x260>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	e00f      	b.n	8001ce6 <HAL_RCC_ClockConfig+0xc6>
 8001cc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ccc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cce:	fa93 f3a3 	rbit	r3, r3
 8001cd2:	667b      	str	r3, [r7, #100]	; 0x64
 8001cd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cd8:	663b      	str	r3, [r7, #96]	; 0x60
 8001cda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ce2:	4b67      	ldr	r3, [pc, #412]	; (8001e80 <HAL_RCC_ClockConfig+0x260>)
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cea:	65ba      	str	r2, [r7, #88]	; 0x58
 8001cec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001cee:	fa92 f2a2 	rbit	r2, r2
 8001cf2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001cf4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001cf6:	fab2 f282 	clz	r2, r2
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	f042 0220 	orr.w	r2, r2, #32
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	f002 021f 	and.w	r2, r2, #31
 8001d06:	2101      	movs	r1, #1
 8001d08:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d17b      	bne.n	8001e0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e0f3      	b.n	8001efe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d13c      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x178>
 8001d1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d22:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d26:	fa93 f3a3 	rbit	r3, r3
 8001d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2e:	fab3 f383 	clz	r3, r3
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	095b      	lsrs	r3, r3, #5
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d102      	bne.n	8001d48 <HAL_RCC_ClockConfig+0x128>
 8001d42:	4b4f      	ldr	r3, [pc, #316]	; (8001e80 <HAL_RCC_ClockConfig+0x260>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	e00f      	b.n	8001d68 <HAL_RCC_ClockConfig+0x148>
 8001d48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d4c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d50:	fa93 f3a3 	rbit	r3, r3
 8001d54:	647b      	str	r3, [r7, #68]	; 0x44
 8001d56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d5a:	643b      	str	r3, [r7, #64]	; 0x40
 8001d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d5e:	fa93 f3a3 	rbit	r3, r3
 8001d62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d64:	4b46      	ldr	r3, [pc, #280]	; (8001e80 <HAL_RCC_ClockConfig+0x260>)
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d6c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d70:	fa92 f2a2 	rbit	r2, r2
 8001d74:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001d76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d78:	fab2 f282 	clz	r2, r2
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	f042 0220 	orr.w	r2, r2, #32
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	f002 021f 	and.w	r2, r2, #31
 8001d88:	2101      	movs	r1, #1
 8001d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8e:	4013      	ands	r3, r2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d13a      	bne.n	8001e0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0b2      	b.n	8001efe <HAL_RCC_ClockConfig+0x2de>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9e:	fa93 f3a3 	rbit	r3, r3
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da6:	fab3 f383 	clz	r3, r3
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	095b      	lsrs	r3, r3, #5
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d102      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0x1a0>
 8001dba:	4b31      	ldr	r3, [pc, #196]	; (8001e80 <HAL_RCC_ClockConfig+0x260>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	e00d      	b.n	8001ddc <HAL_RCC_ClockConfig+0x1bc>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
 8001dcc:	2302      	movs	r3, #2
 8001dce:	623b      	str	r3, [r7, #32]
 8001dd0:	6a3b      	ldr	r3, [r7, #32]
 8001dd2:	fa93 f3a3 	rbit	r3, r3
 8001dd6:	61fb      	str	r3, [r7, #28]
 8001dd8:	4b29      	ldr	r3, [pc, #164]	; (8001e80 <HAL_RCC_ClockConfig+0x260>)
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	2202      	movs	r2, #2
 8001dde:	61ba      	str	r2, [r7, #24]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	fa92 f2a2 	rbit	r2, r2
 8001de6:	617a      	str	r2, [r7, #20]
  return result;
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	fab2 f282 	clz	r2, r2
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	f042 0220 	orr.w	r2, r2, #32
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	f002 021f 	and.w	r2, r2, #31
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e079      	b.n	8001efe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e0a:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <HAL_RCC_ClockConfig+0x260>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f023 0203 	bic.w	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	491a      	ldr	r1, [pc, #104]	; (8001e80 <HAL_RCC_ClockConfig+0x260>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e1c:	f7fe fcf8 	bl	8000810 <HAL_GetTick>
 8001e20:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e22:	e00a      	b.n	8001e3a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e24:	f7fe fcf4 	bl	8000810 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e061      	b.n	8001efe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3a:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_RCC_ClockConfig+0x260>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 020c 	and.w	r2, r3, #12
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d1eb      	bne.n	8001e24 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_RCC_ClockConfig+0x25c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d214      	bcs.n	8001e84 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <HAL_RCC_ClockConfig+0x25c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 0207 	bic.w	r2, r3, #7
 8001e62:	4906      	ldr	r1, [pc, #24]	; (8001e7c <HAL_RCC_ClockConfig+0x25c>)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6a:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <HAL_RCC_ClockConfig+0x25c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e040      	b.n	8001efe <HAL_RCC_ClockConfig+0x2de>
 8001e7c:	40022000 	.word	0x40022000
 8001e80:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d008      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e90:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <HAL_RCC_ClockConfig+0x2e8>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	491a      	ldr	r1, [pc, #104]	; (8001f08 <HAL_RCC_ClockConfig+0x2e8>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d009      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eae:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <HAL_RCC_ClockConfig+0x2e8>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4912      	ldr	r1, [pc, #72]	; (8001f08 <HAL_RCC_ClockConfig+0x2e8>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ec2:	f000 f829 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 8001ec6:	4601      	mov	r1, r0
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <HAL_RCC_ClockConfig+0x2e8>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ed0:	22f0      	movs	r2, #240	; 0xf0
 8001ed2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	fa92 f2a2 	rbit	r2, r2
 8001eda:	60fa      	str	r2, [r7, #12]
  return result;
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	fab2 f282 	clz	r2, r2
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	40d3      	lsrs	r3, r2
 8001ee6:	4a09      	ldr	r2, [pc, #36]	; (8001f0c <HAL_RCC_ClockConfig+0x2ec>)
 8001ee8:	5cd3      	ldrb	r3, [r2, r3]
 8001eea:	fa21 f303 	lsr.w	r3, r1, r3
 8001eee:	4a08      	ldr	r2, [pc, #32]	; (8001f10 <HAL_RCC_ClockConfig+0x2f0>)
 8001ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001ef2:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <HAL_RCC_ClockConfig+0x2f4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe fc46 	bl	8000788 <HAL_InitTick>
  
  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3778      	adds	r7, #120	; 0x78
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	08002d58 	.word	0x08002d58
 8001f10:	20000000 	.word	0x20000000
 8001f14:	20000004 	.word	0x20000004

08001f18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b08b      	sub	sp, #44	; 0x2c
 8001f1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
 8001f26:	2300      	movs	r3, #0
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001f32:	4b29      	ldr	r3, [pc, #164]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d002      	beq.n	8001f48 <HAL_RCC_GetSysClockFreq+0x30>
 8001f42:	2b08      	cmp	r3, #8
 8001f44:	d003      	beq.n	8001f4e <HAL_RCC_GetSysClockFreq+0x36>
 8001f46:	e03c      	b.n	8001fc2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f48:	4b24      	ldr	r3, [pc, #144]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f4a:	623b      	str	r3, [r7, #32]
      break;
 8001f4c:	e03c      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f54:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001f58:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	fa92 f2a2 	rbit	r2, r2
 8001f60:	607a      	str	r2, [r7, #4]
  return result;
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	fab2 f282 	clz	r2, r2
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	40d3      	lsrs	r3, r2
 8001f6c:	4a1c      	ldr	r2, [pc, #112]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f6e:	5cd3      	ldrb	r3, [r2, r3]
 8001f70:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001f72:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	220f      	movs	r2, #15
 8001f7c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	fa92 f2a2 	rbit	r2, r2
 8001f84:	60fa      	str	r2, [r7, #12]
  return result;
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	fab2 f282 	clz	r2, r2
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	40d3      	lsrs	r3, r2
 8001f90:	4a14      	ldr	r2, [pc, #80]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001f92:	5cd3      	ldrb	r3, [r2, r3]
 8001f94:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001fa0:	4a0e      	ldr	r2, [pc, #56]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	fb02 f303 	mul.w	r3, r2, r3
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb0:	e004      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	4a0c      	ldr	r2, [pc, #48]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001fb6:	fb02 f303 	mul.w	r3, r2, r3
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	623b      	str	r3, [r7, #32]
      break;
 8001fc0:	e002      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fc4:	623b      	str	r3, [r7, #32]
      break;
 8001fc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	372c      	adds	r7, #44	; 0x2c
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	007a1200 	.word	0x007a1200
 8001fe0:	08002d70 	.word	0x08002d70
 8001fe4:	08002d80 	.word	0x08002d80
 8001fe8:	003d0900 	.word	0x003d0900

08001fec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ff0:	4b03      	ldr	r3, [pc, #12]	; (8002000 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000000 	.word	0x20000000

08002004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800200a:	f7ff ffef 	bl	8001fec <HAL_RCC_GetHCLKFreq>
 800200e:	4601      	mov	r1, r0
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002018:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800201c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	fa92 f2a2 	rbit	r2, r2
 8002024:	603a      	str	r2, [r7, #0]
  return result;
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	fab2 f282 	clz	r2, r2
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	40d3      	lsrs	r3, r2
 8002030:	4a04      	ldr	r2, [pc, #16]	; (8002044 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002032:	5cd3      	ldrb	r3, [r2, r3]
 8002034:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40021000 	.word	0x40021000
 8002044:	08002d68 	.word	0x08002d68

08002048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800204e:	f7ff ffcd 	bl	8001fec <HAL_RCC_GetHCLKFreq>
 8002052:	4601      	mov	r1, r0
 8002054:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800205c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002060:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	fa92 f2a2 	rbit	r2, r2
 8002068:	603a      	str	r2, [r7, #0]
  return result;
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	fab2 f282 	clz	r2, r2
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	40d3      	lsrs	r3, r2
 8002074:	4a04      	ldr	r2, [pc, #16]	; (8002088 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002076:	5cd3      	ldrb	r3, [r2, r3]
 8002078:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40021000 	.word	0x40021000
 8002088:	08002d68 	.word	0x08002d68

0800208c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e040      	b.n	8002120 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d106      	bne.n	80020b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7fe fae0 	bl	8000674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2224      	movs	r2, #36	; 0x24
 80020b8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0201 	bic.w	r2, r2, #1
 80020c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 fa28 	bl	8002520 <UART_SetConfig>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e022      	b.n	8002120 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fb9e 	bl	8002824 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002106:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0201 	orr.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 fc25 	bl	8002968 <UART_CheckIdleState>
 800211e:	4603      	mov	r3, r0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	4613      	mov	r3, r2
 8002134:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800213a:	2b20      	cmp	r3, #32
 800213c:	f040 808a 	bne.w	8002254 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d002      	beq.n	800214c <HAL_UART_Receive_IT+0x24>
 8002146:	88fb      	ldrh	r3, [r7, #6]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e082      	b.n	8002256 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002156:	2b01      	cmp	r3, #1
 8002158:	d101      	bne.n	800215e <HAL_UART_Receive_IT+0x36>
 800215a:	2302      	movs	r3, #2
 800215c:	e07b      	b.n	8002256 <HAL_UART_Receive_IT+0x12e>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	88fa      	ldrh	r2, [r7, #6]
 8002170:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	88fa      	ldrh	r2, [r7, #6]
 8002178:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800218a:	d10e      	bne.n	80021aa <HAL_UART_Receive_IT+0x82>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d105      	bne.n	80021a0 <HAL_UART_Receive_IT+0x78>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f240 12ff 	movw	r2, #511	; 0x1ff
 800219a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800219e:	e02d      	b.n	80021fc <HAL_UART_Receive_IT+0xd4>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	22ff      	movs	r2, #255	; 0xff
 80021a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80021a8:	e028      	b.n	80021fc <HAL_UART_Receive_IT+0xd4>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10d      	bne.n	80021ce <HAL_UART_Receive_IT+0xa6>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d104      	bne.n	80021c4 <HAL_UART_Receive_IT+0x9c>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	22ff      	movs	r2, #255	; 0xff
 80021be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80021c2:	e01b      	b.n	80021fc <HAL_UART_Receive_IT+0xd4>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	227f      	movs	r2, #127	; 0x7f
 80021c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80021cc:	e016      	b.n	80021fc <HAL_UART_Receive_IT+0xd4>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021d6:	d10d      	bne.n	80021f4 <HAL_UART_Receive_IT+0xcc>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d104      	bne.n	80021ea <HAL_UART_Receive_IT+0xc2>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	227f      	movs	r2, #127	; 0x7f
 80021e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80021e8:	e008      	b.n	80021fc <HAL_UART_Receive_IT+0xd4>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	223f      	movs	r2, #63	; 0x3f
 80021ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80021f2:	e003      	b.n	80021fc <HAL_UART_Receive_IT+0xd4>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2222      	movs	r2, #34	; 0x22
 8002206:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002220:	d107      	bne.n	8002232 <HAL_UART_Receive_IT+0x10a>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d103      	bne.n	8002232 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4a0d      	ldr	r2, [pc, #52]	; (8002264 <HAL_UART_Receive_IT+0x13c>)
 800222e:	661a      	str	r2, [r3, #96]	; 0x60
 8002230:	e002      	b.n	8002238 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4a0c      	ldr	r2, [pc, #48]	; (8002268 <HAL_UART_Receive_IT+0x140>)
 8002236:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800224e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	e000      	b.n	8002256 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8002254:	2302      	movs	r3, #2
  }
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	08002c2d 	.word	0x08002c2d
 8002268:	08002b87 	.word	0x08002b87

0800226c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800228c:	69fa      	ldr	r2, [r7, #28]
 800228e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002292:	4013      	ands	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d113      	bne.n	80022c4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 0320 	and.w	r3, r3, #32
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00e      	beq.n	80022c4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d009      	beq.n	80022c4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 8114 	beq.w	80024e2 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	4798      	blx	r3
      }
      return;
 80022c2:	e10e      	b.n	80024e2 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 80d6 	beq.w	8002478 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d105      	bne.n	80022e2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 80cb 	beq.w	8002478 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00e      	beq.n	800230a <HAL_UART_IRQHandler+0x9e>
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d009      	beq.n	800230a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2201      	movs	r2, #1
 80022fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002302:	f043 0201 	orr.w	r2, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00e      	beq.n	8002332 <HAL_UART_IRQHandler+0xc6>
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d009      	beq.n	8002332 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2202      	movs	r2, #2
 8002324:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800232a:	f043 0204 	orr.w	r2, r3, #4
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00e      	beq.n	800235a <HAL_UART_IRQHandler+0xee>
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d009      	beq.n	800235a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2204      	movs	r2, #4
 800234c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002352:	f043 0202 	orr.w	r2, r3, #2
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	2b00      	cmp	r3, #0
 8002362:	d013      	beq.n	800238c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	f003 0320 	and.w	r3, r3, #32
 800236a:	2b00      	cmp	r3, #0
 800236c:	d104      	bne.n	8002378 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002374:	2b00      	cmp	r3, #0
 8002376:	d009      	beq.n	800238c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2208      	movs	r2, #8
 800237e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002384:	f043 0208 	orr.w	r2, r3, #8
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00f      	beq.n	80023b6 <HAL_UART_IRQHandler+0x14a>
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023ae:	f043 0220 	orr.w	r2, r3, #32
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 8093 	beq.w	80024e6 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f003 0320 	and.w	r3, r3, #32
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00c      	beq.n	80023e4 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	f003 0320 	and.w	r3, r3, #32
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d007      	beq.n	80023e4 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023e8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f4:	2b40      	cmp	r3, #64	; 0x40
 80023f6:	d004      	beq.n	8002402 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d031      	beq.n	8002466 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 fb70 	bl	8002ae8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002412:	2b40      	cmp	r3, #64	; 0x40
 8002414:	d123      	bne.n	800245e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002424:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800242a:	2b00      	cmp	r3, #0
 800242c:	d013      	beq.n	8002456 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002432:	4a30      	ldr	r2, [pc, #192]	; (80024f4 <HAL_UART_IRQHandler+0x288>)
 8002434:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe fb05 	bl	8000a4a <HAL_DMA_Abort_IT>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d016      	beq.n	8002474 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800244a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002450:	4610      	mov	r0, r2
 8002452:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002454:	e00e      	b.n	8002474 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f858 	bl	800250c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800245c:	e00a      	b.n	8002474 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f854 	bl	800250c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002464:	e006      	b.n	8002474 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f850 	bl	800250c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002472:	e038      	b.n	80024e6 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002474:	bf00      	nop
    return;
 8002476:	e036      	b.n	80024e6 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00d      	beq.n	800249e <HAL_UART_IRQHandler+0x232>
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002494:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fc1b 	bl	8002cd2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800249c:	e026      	b.n	80024ec <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00d      	beq.n	80024c4 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d008      	beq.n	80024c4 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d017      	beq.n	80024ea <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	4798      	blx	r3
    }
    return;
 80024c2:	e012      	b.n	80024ea <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00e      	beq.n	80024ec <HAL_UART_IRQHandler+0x280>
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d009      	beq.n	80024ec <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 fb3b 	bl	8002b54 <UART_EndTransmit_IT>
    return;
 80024de:	bf00      	nop
 80024e0:	e004      	b.n	80024ec <HAL_UART_IRQHandler+0x280>
      return;
 80024e2:	bf00      	nop
 80024e4:	e002      	b.n	80024ec <HAL_UART_IRQHandler+0x280>
    return;
 80024e6:	bf00      	nop
 80024e8:	e000      	b.n	80024ec <HAL_UART_IRQHandler+0x280>
    return;
 80024ea:	bf00      	nop
  }

}
 80024ec:	3720      	adds	r7, #32
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	08002b29 	.word	0x08002b29

080024f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002528:	2300      	movs	r3, #0
 800252a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	4ba2      	ldr	r3, [pc, #648]	; (80027d8 <UART_SetConfig+0x2b8>)
 8002550:	4013      	ands	r3, r2
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	6939      	ldr	r1, [r7, #16]
 8002558:	430b      	orrs	r3, r1
 800255a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	430a      	orrs	r2, r1
 8002594:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a90      	ldr	r2, [pc, #576]	; (80027dc <UART_SetConfig+0x2bc>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d121      	bne.n	80025e4 <UART_SetConfig+0xc4>
 80025a0:	4b8f      	ldr	r3, [pc, #572]	; (80027e0 <UART_SetConfig+0x2c0>)
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d817      	bhi.n	80025dc <UART_SetConfig+0xbc>
 80025ac:	a201      	add	r2, pc, #4	; (adr r2, 80025b4 <UART_SetConfig+0x94>)
 80025ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b2:	bf00      	nop
 80025b4:	080025c5 	.word	0x080025c5
 80025b8:	080025d1 	.word	0x080025d1
 80025bc:	080025d7 	.word	0x080025d7
 80025c0:	080025cb 	.word	0x080025cb
 80025c4:	2300      	movs	r3, #0
 80025c6:	77fb      	strb	r3, [r7, #31]
 80025c8:	e01e      	b.n	8002608 <UART_SetConfig+0xe8>
 80025ca:	2302      	movs	r3, #2
 80025cc:	77fb      	strb	r3, [r7, #31]
 80025ce:	e01b      	b.n	8002608 <UART_SetConfig+0xe8>
 80025d0:	2304      	movs	r3, #4
 80025d2:	77fb      	strb	r3, [r7, #31]
 80025d4:	e018      	b.n	8002608 <UART_SetConfig+0xe8>
 80025d6:	2308      	movs	r3, #8
 80025d8:	77fb      	strb	r3, [r7, #31]
 80025da:	e015      	b.n	8002608 <UART_SetConfig+0xe8>
 80025dc:	2310      	movs	r3, #16
 80025de:	77fb      	strb	r3, [r7, #31]
 80025e0:	bf00      	nop
 80025e2:	e011      	b.n	8002608 <UART_SetConfig+0xe8>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a7e      	ldr	r2, [pc, #504]	; (80027e4 <UART_SetConfig+0x2c4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d102      	bne.n	80025f4 <UART_SetConfig+0xd4>
 80025ee:	2300      	movs	r3, #0
 80025f0:	77fb      	strb	r3, [r7, #31]
 80025f2:	e009      	b.n	8002608 <UART_SetConfig+0xe8>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a7b      	ldr	r2, [pc, #492]	; (80027e8 <UART_SetConfig+0x2c8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d102      	bne.n	8002604 <UART_SetConfig+0xe4>
 80025fe:	2300      	movs	r3, #0
 8002600:	77fb      	strb	r3, [r7, #31]
 8002602:	e001      	b.n	8002608 <UART_SetConfig+0xe8>
 8002604:	2310      	movs	r3, #16
 8002606:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002610:	f040 8082 	bne.w	8002718 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002614:	7ffb      	ldrb	r3, [r7, #31]
 8002616:	2b08      	cmp	r3, #8
 8002618:	d85e      	bhi.n	80026d8 <UART_SetConfig+0x1b8>
 800261a:	a201      	add	r2, pc, #4	; (adr r2, 8002620 <UART_SetConfig+0x100>)
 800261c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002620:	08002645 	.word	0x08002645
 8002624:	08002665 	.word	0x08002665
 8002628:	08002685 	.word	0x08002685
 800262c:	080026d9 	.word	0x080026d9
 8002630:	080026a1 	.word	0x080026a1
 8002634:	080026d9 	.word	0x080026d9
 8002638:	080026d9 	.word	0x080026d9
 800263c:	080026d9 	.word	0x080026d9
 8002640:	080026c1 	.word	0x080026c1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002644:	f7ff fcde 	bl	8002004 <HAL_RCC_GetPCLK1Freq>
 8002648:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	005a      	lsls	r2, r3, #1
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	085b      	lsrs	r3, r3, #1
 8002654:	441a      	add	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	fbb2 f3f3 	udiv	r3, r2, r3
 800265e:	b29b      	uxth	r3, r3
 8002660:	61bb      	str	r3, [r7, #24]
        break;
 8002662:	e03c      	b.n	80026de <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002664:	f7ff fcf0 	bl	8002048 <HAL_RCC_GetPCLK2Freq>
 8002668:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	005a      	lsls	r2, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	085b      	lsrs	r3, r3, #1
 8002674:	441a      	add	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	fbb2 f3f3 	udiv	r3, r2, r3
 800267e:	b29b      	uxth	r3, r3
 8002680:	61bb      	str	r3, [r7, #24]
        break;
 8002682:	e02c      	b.n	80026de <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	085b      	lsrs	r3, r3, #1
 800268a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800268e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6852      	ldr	r2, [r2, #4]
 8002696:	fbb3 f3f2 	udiv	r3, r3, r2
 800269a:	b29b      	uxth	r3, r3
 800269c:	61bb      	str	r3, [r7, #24]
        break;
 800269e:	e01e      	b.n	80026de <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026a0:	f7ff fc3a 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 80026a4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	005a      	lsls	r2, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	085b      	lsrs	r3, r3, #1
 80026b0:	441a      	add	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	61bb      	str	r3, [r7, #24]
        break;
 80026be:	e00e      	b.n	80026de <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	085b      	lsrs	r3, r3, #1
 80026c6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	61bb      	str	r3, [r7, #24]
        break;
 80026d6:	e002      	b.n	80026de <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	75fb      	strb	r3, [r7, #23]
        break;
 80026dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	2b0f      	cmp	r3, #15
 80026e2:	d916      	bls.n	8002712 <UART_SetConfig+0x1f2>
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ea:	d212      	bcs.n	8002712 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	f023 030f 	bic.w	r3, r3, #15
 80026f4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	085b      	lsrs	r3, r3, #1
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	b29a      	uxth	r2, r3
 8002702:	897b      	ldrh	r3, [r7, #10]
 8002704:	4313      	orrs	r3, r2
 8002706:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	897a      	ldrh	r2, [r7, #10]
 800270e:	60da      	str	r2, [r3, #12]
 8002710:	e07d      	b.n	800280e <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	75fb      	strb	r3, [r7, #23]
 8002716:	e07a      	b.n	800280e <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 8002718:	7ffb      	ldrb	r3, [r7, #31]
 800271a:	2b08      	cmp	r3, #8
 800271c:	d866      	bhi.n	80027ec <UART_SetConfig+0x2cc>
 800271e:	a201      	add	r2, pc, #4	; (adr r2, 8002724 <UART_SetConfig+0x204>)
 8002720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002724:	08002749 	.word	0x08002749
 8002728:	08002767 	.word	0x08002767
 800272c:	08002785 	.word	0x08002785
 8002730:	080027ed 	.word	0x080027ed
 8002734:	080027a1 	.word	0x080027a1
 8002738:	080027ed 	.word	0x080027ed
 800273c:	080027ed 	.word	0x080027ed
 8002740:	080027ed 	.word	0x080027ed
 8002744:	080027bf 	.word	0x080027bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002748:	f7ff fc5c 	bl	8002004 <HAL_RCC_GetPCLK1Freq>
 800274c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	085a      	lsrs	r2, r3, #1
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	441a      	add	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002760:	b29b      	uxth	r3, r3
 8002762:	61bb      	str	r3, [r7, #24]
        break;
 8002764:	e045      	b.n	80027f2 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002766:	f7ff fc6f 	bl	8002048 <HAL_RCC_GetPCLK2Freq>
 800276a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	085a      	lsrs	r2, r3, #1
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	441a      	add	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	fbb2 f3f3 	udiv	r3, r2, r3
 800277e:	b29b      	uxth	r3, r3
 8002780:	61bb      	str	r3, [r7, #24]
        break;
 8002782:	e036      	b.n	80027f2 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	085b      	lsrs	r3, r3, #1
 800278a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800278e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6852      	ldr	r2, [r2, #4]
 8002796:	fbb3 f3f2 	udiv	r3, r3, r2
 800279a:	b29b      	uxth	r3, r3
 800279c:	61bb      	str	r3, [r7, #24]
        break;
 800279e:	e028      	b.n	80027f2 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027a0:	f7ff fbba 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 80027a4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	085a      	lsrs	r2, r3, #1
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	441a      	add	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	61bb      	str	r3, [r7, #24]
        break;
 80027bc:	e019      	b.n	80027f2 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	085b      	lsrs	r3, r3, #1
 80027c4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	61bb      	str	r3, [r7, #24]
        break;
 80027d4:	e00d      	b.n	80027f2 <UART_SetConfig+0x2d2>
 80027d6:	bf00      	nop
 80027d8:	efff69f3 	.word	0xefff69f3
 80027dc:	40013800 	.word	0x40013800
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40004400 	.word	0x40004400
 80027e8:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	75fb      	strb	r3, [r7, #23]
        break;
 80027f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	2b0f      	cmp	r3, #15
 80027f6:	d908      	bls.n	800280a <UART_SetConfig+0x2ea>
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027fe:	d204      	bcs.n	800280a <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	60da      	str	r2, [r3, #12]
 8002808:	e001      	b.n	800280e <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800281a:	7dfb      	ldrb	r3, [r7, #23]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3720      	adds	r7, #32
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00a      	beq.n	800284e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00a      	beq.n	8002892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00a      	beq.n	80028b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	f003 0310 	and.w	r3, r3, #16
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00a      	beq.n	80028d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	f003 0320 	and.w	r3, r3, #32
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00a      	beq.n	80028f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002900:	2b00      	cmp	r3, #0
 8002902:	d01a      	beq.n	800293a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002922:	d10a      	bne.n	800293a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	605a      	str	r2, [r3, #4]
  }
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af02      	add	r7, sp, #8
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002976:	f7fd ff4b 	bl	8000810 <HAL_GetTick>
 800297a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b08      	cmp	r3, #8
 8002988:	d10e      	bne.n	80029a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800298a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f82a 	bl	80029f2 <UART_WaitOnFlagUntilTimeout>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e020      	b.n	80029ea <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d10e      	bne.n	80029d4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f814 	bl	80029f2 <UART_WaitOnFlagUntilTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e00a      	b.n	80029ea <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2220      	movs	r2, #32
 80029d8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2220      	movs	r2, #32
 80029de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	603b      	str	r3, [r7, #0]
 80029fe:	4613      	mov	r3, r2
 8002a00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a02:	e05d      	b.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0a:	d059      	beq.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a0c:	f7fd ff00 	bl	8000810 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d302      	bcc.n	8002a22 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d11b      	bne.n	8002a5a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a30:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0201 	bic.w	r2, r2, #1
 8002a40:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2220      	movs	r2, #32
 8002a46:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e042      	b.n	8002ae0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d02b      	beq.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a76:	d123      	bne.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a80:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a90:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0201 	bic.w	r2, r2, #1
 8002aa0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e00f      	b.n	8002ae0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	69da      	ldr	r2, [r3, #28]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	bf0c      	ite	eq
 8002ad0:	2301      	moveq	r3, #1
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d092      	beq.n	8002a04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002afe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0201 	bic.w	r2, r2, #1
 8002b0e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2220      	movs	r2, #32
 8002b14:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f7ff fce0 	bl	800250c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b4c:	bf00      	nop
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b6a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff fcbd 	bl	80024f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b084      	sub	sp, #16
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b94:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b9a:	2b22      	cmp	r3, #34	; 0x22
 8002b9c:	d13a      	bne.n	8002c14 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002ba4:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002ba6:	89bb      	ldrh	r3, [r7, #12]
 8002ba8:	b2d9      	uxtb	r1, r3
 8002baa:	89fb      	ldrh	r3, [r7, #14]
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb2:	400a      	ands	r2, r1
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d121      	bne.n	8002c24 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002bee:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0201 	bic.w	r2, r2, #1
 8002bfe:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2220      	movs	r2, #32
 8002c04:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7fd fc5b 	bl	80004c8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002c12:	e007      	b.n	8002c24 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699a      	ldr	r2, [r3, #24]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0208 	orr.w	r2, r2, #8
 8002c22:	619a      	str	r2, [r3, #24]
}
 8002c24:	bf00      	nop
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002c3a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c40:	2b22      	cmp	r3, #34	; 0x22
 8002c42:	d13a      	bne.n	8002cba <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002c4a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c50:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8002c52:	89ba      	ldrh	r2, [r7, #12]
 8002c54:	89fb      	ldrh	r3, [r7, #14]
 8002c56:	4013      	ands	r3, r2
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c62:	1c9a      	adds	r2, r3, #2
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d121      	bne.n	8002cca <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c94:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0201 	bic.w	r2, r2, #1
 8002ca4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7fd fc08 	bl	80004c8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002cb8:	e007      	b.n	8002cca <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699a      	ldr	r2, [r3, #24]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f042 0208 	orr.w	r2, r2, #8
 8002cc8:	619a      	str	r2, [r3, #24]
}
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
	...

08002ce8 <__libc_init_array>:
 8002ce8:	b570      	push	{r4, r5, r6, lr}
 8002cea:	4e0d      	ldr	r6, [pc, #52]	; (8002d20 <__libc_init_array+0x38>)
 8002cec:	4c0d      	ldr	r4, [pc, #52]	; (8002d24 <__libc_init_array+0x3c>)
 8002cee:	1ba4      	subs	r4, r4, r6
 8002cf0:	10a4      	asrs	r4, r4, #2
 8002cf2:	2500      	movs	r5, #0
 8002cf4:	42a5      	cmp	r5, r4
 8002cf6:	d109      	bne.n	8002d0c <__libc_init_array+0x24>
 8002cf8:	4e0b      	ldr	r6, [pc, #44]	; (8002d28 <__libc_init_array+0x40>)
 8002cfa:	4c0c      	ldr	r4, [pc, #48]	; (8002d2c <__libc_init_array+0x44>)
 8002cfc:	f000 f820 	bl	8002d40 <_init>
 8002d00:	1ba4      	subs	r4, r4, r6
 8002d02:	10a4      	asrs	r4, r4, #2
 8002d04:	2500      	movs	r5, #0
 8002d06:	42a5      	cmp	r5, r4
 8002d08:	d105      	bne.n	8002d16 <__libc_init_array+0x2e>
 8002d0a:	bd70      	pop	{r4, r5, r6, pc}
 8002d0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d10:	4798      	blx	r3
 8002d12:	3501      	adds	r5, #1
 8002d14:	e7ee      	b.n	8002cf4 <__libc_init_array+0xc>
 8002d16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d1a:	4798      	blx	r3
 8002d1c:	3501      	adds	r5, #1
 8002d1e:	e7f2      	b.n	8002d06 <__libc_init_array+0x1e>
 8002d20:	08002d90 	.word	0x08002d90
 8002d24:	08002d90 	.word	0x08002d90
 8002d28:	08002d90 	.word	0x08002d90
 8002d2c:	08002d98 	.word	0x08002d98

08002d30 <memset>:
 8002d30:	4402      	add	r2, r0
 8002d32:	4603      	mov	r3, r0
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d100      	bne.n	8002d3a <memset+0xa>
 8002d38:	4770      	bx	lr
 8002d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d3e:	e7f9      	b.n	8002d34 <memset+0x4>

08002d40 <_init>:
 8002d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d42:	bf00      	nop
 8002d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d46:	bc08      	pop	{r3}
 8002d48:	469e      	mov	lr, r3
 8002d4a:	4770      	bx	lr

08002d4c <_fini>:
 8002d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4e:	bf00      	nop
 8002d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d52:	bc08      	pop	{r3}
 8002d54:	469e      	mov	lr, r3
 8002d56:	4770      	bx	lr
