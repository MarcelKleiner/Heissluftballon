
GCS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009238  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080093c4  080093c4  000193c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009454  08009454  0002018c  2**0
                  CONTENTS
  4 .ARM          00000008  08009454  08009454  00019454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800945c  0800945c  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800945c  0800945c  0001945c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009464  08009464  00019464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08009468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001524  2000018c  080095f4  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016b0  080095f4  000216b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000288b7  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005313  00000000  00000000  00048a73  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001728  00000000  00000000  0004dd88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014d0  00000000  00000000  0004f4b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022dd1  00000000  00000000  00050980  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a576  00000000  00000000  00073751  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000adc40  00000000  00000000  0008dcc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013b907  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005db4  00000000  00000000  0013b984  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000018c 	.word	0x2000018c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080093ac 	.word	0x080093ac

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000190 	.word	0x20000190
 80001c8:	080093ac 	.word	0x080093ac

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <_ZN7AppMainC1Ev>:
#include "AppMain.h"


//extern SPI_HandleTypeDef hspi1;

AppMain::AppMain() {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4618      	mov	r0, r3
 80004d8:	f000 f9e8 	bl	80008ac <_ZN5ModelC1Ev>
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	33ac      	adds	r3, #172	; 0xac
 80004e0:	4618      	mov	r0, r3
 80004e2:	f000 fa30 	bl	8000946 <_ZN5RFM95C1Ev>
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	4611      	mov	r1, r2
 80004f0:	4618      	mov	r0, r3
 80004f2:	f000 f913 	bl	800071c <_ZN3GPSC1EP5Model>
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 80004fc:	4618      	mov	r0, r3
 80004fe:	f000 fda4 	bl	800104a <_ZN7USB_ComC1Ev>
}
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4618      	mov	r0, r3
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <_ZN7AppMain7initRFMEv>:


void AppMain::initRFM(){
 800050c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050e:	b0a5      	sub	sp, #148	; 0x94
 8000510:	af10      	add	r7, sp, #64	; 0x40
 8000512:	6078      	str	r0, [r7, #4]
	RFM95::GPIO_HW_SETTINGS gpioHwSettings;
	RFM95::SPI_HW_SETTINGS spiHwSettings;

	gpioHwSettings.gpioPin0 = RFM_DIO0_Pin;
 8000514:	2380      	movs	r3, #128	; 0x80
 8000516:	83bb      	strh	r3, [r7, #28]
	gpioHwSettings.gpioPin1 = RFM_DIO1_Pin;
 8000518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800051c:	84bb      	strh	r3, [r7, #36]	; 0x24
	gpioHwSettings.gpioPin2 = RFM_DIO2_Pin;
 800051e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000522:	85bb      	strh	r3, [r7, #44]	; 0x2c
	gpioHwSettings.gpioPin3 = RFM_DIO3_Pin;
 8000524:	2320      	movs	r3, #32
 8000526:	86bb      	strh	r3, [r7, #52]	; 0x34
	gpioHwSettings.gpioPin4 = RFM_DIO4_Pin;
 8000528:	2340      	movs	r3, #64	; 0x40
 800052a:	87bb      	strh	r3, [r7, #60]	; 0x3c
	gpioHwSettings.gpioPin5 = RFM_DIO5_Pin;
 800052c:	2310      	movs	r3, #16
 800052e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	gpioHwSettings.gpioPort0 = RFM_DIO0_GPIO_Port;
 8000532:	4b1c      	ldr	r3, [pc, #112]	; (80005a4 <_ZN7AppMain7initRFMEv+0x98>)
 8000534:	61bb      	str	r3, [r7, #24]
	gpioHwSettings.gpioPort1 = RFM_DIO1_GPIO_Port;
 8000536:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <_ZN7AppMain7initRFMEv+0x9c>)
 8000538:	623b      	str	r3, [r7, #32]
	gpioHwSettings.gpioPort2 = RFM_DIO2_GPIO_Port;
 800053a:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <_ZN7AppMain7initRFMEv+0x9c>)
 800053c:	62bb      	str	r3, [r7, #40]	; 0x28
	gpioHwSettings.gpioPort3 = RFM_DIO3_GPIO_Port;
 800053e:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <_ZN7AppMain7initRFMEv+0x98>)
 8000540:	633b      	str	r3, [r7, #48]	; 0x30
	gpioHwSettings.gpioPort4 = RFM_DIO4_GPIO_Port;
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <_ZN7AppMain7initRFMEv+0x98>)
 8000544:	63bb      	str	r3, [r7, #56]	; 0x38
	gpioHwSettings.gpioPort5 = RFM_DIO5_GPIO_Port;
 8000546:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <_ZN7AppMain7initRFMEv+0x98>)
 8000548:	643b      	str	r3, [r7, #64]	; 0x40

	gpioHwSettings.gpioPortRST = RFM_NSS_GPIO_Port;
 800054a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800054e:	64bb      	str	r3, [r7, #72]	; 0x48
	gpioHwSettings.gpioPinRST = RFM_NSS_Pin;
 8000550:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000554:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	spiHwSettings.gpioPin = RFM_NSS_Pin;
 8000558:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800055c:	82bb      	strh	r3, [r7, #20]
	spiHwSettings.gpioPort = RFM_NSS_GPIO_Port;
 800055e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000562:	613b      	str	r3, [r7, #16]
	spiHwSettings.hspi = &hspi1;
 8000564:	4b11      	ldr	r3, [pc, #68]	; (80005ac <_ZN7AppMain7initRFMEv+0xa0>)
 8000566:	60fb      	str	r3, [r7, #12]

	rfm95.initRFM(100, spiHwSettings, gpioHwSettings);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f103 06ac 	add.w	r6, r3, #172	; 0xac
 800056e:	ad01      	add	r5, sp, #4
 8000570:	f107 0418 	add.w	r4, r7, #24
 8000574:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000576:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800057a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800057c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800057e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000580:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000584:	e885 0003 	stmia.w	r5, {r0, r1}
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	cb0c      	ldmia	r3, {r2, r3}
 8000592:	2164      	movs	r1, #100	; 0x64
 8000594:	4630      	mov	r0, r6
 8000596:	f000 f9ec 	bl	8000972 <_ZN5RFM957initRFMEtNS_15SPI_HW_SETTINGSENS_16GPIO_HW_SETTINGSE>
}
 800059a:	bf00      	nop
 800059c:	3754      	adds	r7, #84	; 0x54
 800059e:	46bd      	mov	sp, r7
 80005a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a2:	bf00      	nop
 80005a4:	48000400 	.word	0x48000400
 80005a8:	48000800 	.word	0x48000800
 80005ac:	200006c0 	.word	0x200006c0

080005b0 <_ZN7AppMain8mainProgEv>:





void AppMain::mainProg(){
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b0b5      	sub	sp, #212	; 0xd4
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]


	uint8_t transmitData[TRANSMIT_DATA_LENGTH];
	uint16_t transmitBuffer = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6

	for(int counter = 0; counter < TRANSMIT_DATA_LENGTH; counter++){
 80005be:	2300      	movs	r3, #0
 80005c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80005c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80005c8:	2bb3      	cmp	r3, #179	; 0xb3
 80005ca:	dc0c      	bgt.n	80005e6 <_ZN7AppMain8mainProgEv+0x36>
			transmitData[counter] = 0;
 80005cc:	f107 0208 	add.w	r2, r7, #8
 80005d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80005d4:	4413      	add	r3, r2
 80005d6:	2200      	movs	r2, #0
 80005d8:	701a      	strb	r2, [r3, #0]
	for(int counter = 0; counter < TRANSMIT_DATA_LENGTH; counter++){
 80005da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80005de:	3301      	adds	r3, #1
 80005e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80005e4:	e7ee      	b.n	80005c4 <_ZN7AppMain8mainProgEv+0x14>
	}

	HAL_Delay(100);
 80005e6:	2064      	movs	r0, #100	; 0x64
 80005e8:	f001 f998 	bl	800191c <HAL_Delay>
	gps.init();
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f8b4 	bl	8000760 <_ZN3GPS4initEv>
	initRFM();
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f7ff ff87 	bl	800050c <_ZN7AppMain7initRFMEv>
	rfm95.rfmReceive();
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	33ac      	adds	r3, #172	; 0xac
 8000602:	4618      	mov	r0, r3
 8000604:	f000 fae6 	bl	8000bd4 <_ZN5RFM9510rfmReceiveEv>
	Stack *rfmStack = rfm95.rfmStack();
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	33ac      	adds	r3, #172	; 0xac
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fcaa 	bl	8000f66 <_ZN5RFM958rfmStackEv>
 8000612:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

	while(1){
		/*Prepare for Transmit*/

		uint16_t stackCounter = 1;
 8000616:	2301      	movs	r3, #1
 8000618:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
		transmitData[0] = '%';
 800061c:	2325      	movs	r3, #37	; 0x25
 800061e:	723b      	strb	r3, [r7, #8]

		if(rfm95.isDataReady()){
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	33ac      	adds	r3, #172	; 0xac
 8000624:	4618      	mov	r0, r3
 8000626:	f000 faaa 	bl	8000b7e <_ZN5RFM9511isDataReadyEv>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d01c      	beq.n	800066a <_ZN7AppMain8mainProgEv+0xba>
			while(!rfmStack->isEmpty()){
 8000630:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8000634:	f000 fce7 	bl	8001006 <_ZN5Stack7isEmptyEv>
 8000638:	4603      	mov	r3, r0
 800063a:	f083 0301 	eor.w	r3, r3, #1
 800063e:	b2db      	uxtb	r3, r3
 8000640:	2b00      	cmp	r3, #0
 8000642:	d012      	beq.n	800066a <_ZN7AppMain8mainProgEv+0xba>
				transmitData[stackCounter] = rfmStack->pop();
 8000644:	f8b7 40ca 	ldrh.w	r4, [r7, #202]	; 0xca
 8000648:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800064c:	f000 fcbf 	bl	8000fce <_ZN5Stack3popEv>
 8000650:	4603      	mov	r3, r0
 8000652:	461a      	mov	r2, r3
 8000654:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000658:	4423      	add	r3, r4
 800065a:	f803 2cc8 	strb.w	r2, [r3, #-200]
				stackCounter++;
 800065e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8000662:	3301      	adds	r3, #1
 8000664:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
			while(!rfmStack->isEmpty()){
 8000668:	e7e2      	b.n	8000630 <_ZN7AppMain8mainProgEv+0x80>
			}
		}
		uint8_t offset = stackCounter;	//Fortlaufend zu vorheriger index
 800066a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800066e:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
		uint8_t counter = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
		char *gpsGCSTemp = model.getGPS_GCS();
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4618      	mov	r0, r3
 800067c:	f000 f948 	bl	8000910 <_ZN5Model10getGPS_GCSEv>
 8000680:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
		for(counter = 0; counter < GPS_DATA_SIZE; counter++){
 8000684:	2300      	movs	r3, #0
 8000686:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
 800068a:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 800068e:	2b4f      	cmp	r3, #79	; 0x4f
 8000690:	d817      	bhi.n	80006c2 <_ZN7AppMain8mainProgEv+0x112>
			transmitData[offset] = gpsGCSTemp[counter];
 8000692:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8000696:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800069a:	441a      	add	r2, r3
 800069c:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 80006a0:	7812      	ldrb	r2, [r2, #0]
 80006a2:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80006a6:	440b      	add	r3, r1
 80006a8:	f803 2cc8 	strb.w	r2, [r3, #-200]
			offset++;
 80006ac:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 80006b0:	3301      	adds	r3, #1
 80006b2:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
		for(counter = 0; counter < GPS_DATA_SIZE; counter++){
 80006b6:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 80006ba:	3301      	adds	r3, #1
 80006bc:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
 80006c0:	e7e3      	b.n	800068a <_ZN7AppMain8mainProgEv+0xda>

		}
		transmitData[offset] = '*';
 80006c2:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 80006c6:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80006ca:	4413      	add	r3, r2
 80006cc:	222a      	movs	r2, #42	; 0x2a
 80006ce:	f803 2cc8 	strb.w	r2, [r3, #-200]
		transmitData[offset+1] = '!';
 80006d2:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 80006d6:	3301      	adds	r3, #1
 80006d8:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80006dc:	4413      	add	r3, r2
 80006de:	2221      	movs	r2, #33	; 0x21
 80006e0:	f803 2cc8 	strb.w	r2, [r3, #-200]

		/*Transmit over USB - use only in GCS*/

		usbCom.usbTransmit(transmitData, TRANSMIT_DATA_LENGTH);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 80006ea:	f107 0108 	add.w	r1, r7, #8
 80006ee:	22b4      	movs	r2, #180	; 0xb4
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fcb5 	bl	8001060 <_ZN7USB_Com11usbTransmitEPhh>





		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80006f6:	2102      	movs	r1, #2
 80006f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fc:	f001 fc24 	bl	8001f48 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000700:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000704:	f001 f90a 	bl	800191c <HAL_Delay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000708:	2102      	movs	r1, #2
 800070a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070e:	f001 fc1b 	bl	8001f48 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000712:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000716:	f001 f901 	bl	800191c <HAL_Delay>

	}
 800071a:	e77c      	b.n	8000616 <_ZN7AppMain8mainProgEv+0x66>

0800071c <_ZN3GPSC1EP5Model>:


	//extern UART_HandleTypeDef huart2;


GPS::GPS(Model* model) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2200      	movs	r2, #0
 800072a:	711a      	strb	r2, [r3, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2200      	movs	r2, #0
 8000730:	715a      	strb	r2, [r3, #5]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2200      	movs	r2, #0
 8000736:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2200      	movs	r2, #0
 800073e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2200      	movs	r2, #0
 8000746:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	this->model = model;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	683a      	ldr	r2, [r7, #0]
 800074e:	601a      	str	r2, [r3, #0]
	init();
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f000 f805 	bl	8000760 <_ZN3GPS4initEv>
}
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4618      	mov	r0, r3
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <_ZN3GPS4initEv>:
 *
 * @param none
 * @return none
 *
 */
void GPS::init(){
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < GPS_DATA_SIZE; i++) {
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	2b4f      	cmp	r3, #79	; 0x4f
 8000770:	dc0f      	bgt.n	8000792 <_ZN3GPS4initEv+0x32>
		data[i] = '0';
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	4413      	add	r3, r2
 8000778:	3356      	adds	r3, #86	; 0x56
 800077a:	2230      	movs	r2, #48	; 0x30
 800077c:	701a      	strb	r2, [r3, #0]
		GPS_Data[i] = '0';
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	4413      	add	r3, r2
 8000784:	3306      	adds	r3, #6
 8000786:	2230      	movs	r2, #48	; 0x30
 8000788:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < GPS_DATA_SIZE; i++) {
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	3301      	adds	r3, #1
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	e7ec      	b.n	800076c <_ZN3GPS4initEv+0xc>
	}
}
 8000792:	bf00      	nop
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
	...

080007a0 <_ZN3GPS12gpsInterruptEh>:
*
*
* @param huart UART handle.
* @return None
 */
void GPS::gpsInterrupt(uint8_t rxData) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
	static uint8_t i = 0;
		/* Receive one byte in interrupt mode */


		/*Check if received byte is a '$' (begin of record) */
		if ((char) rxData == '$') {
 80007ac:	78fb      	ldrb	r3, [r7, #3]
 80007ae:	2b24      	cmp	r3, #36	; 0x24
 80007b0:	d105      	bne.n	80007be <_ZN3GPS12gpsInterruptEh+0x1e>
			recordStart = true;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2201      	movs	r2, #1
 80007b6:	711a      	strb	r2, [r3, #4]
			i = 0;
 80007b8:	4b3b      	ldr	r3, [pc, #236]	; (80008a8 <_ZN3GPS12gpsInterruptEh+0x108>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]
		}
		/*Check if received byte is a '\n' (end of record)*/
		if ((char) rxData == '\n') {
 80007be:	78fb      	ldrb	r3, [r7, #3]
 80007c0:	2b0a      	cmp	r3, #10
 80007c2:	d15a      	bne.n	800087a <_ZN3GPS12gpsInterruptEh+0xda>
			recordStart = false;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2200      	movs	r2, #0
 80007c8:	711a      	strb	r2, [r3, #4]

			if (i > GPS_DATA_SIZE-10) {
 80007ca:	4b37      	ldr	r3, [pc, #220]	; (80008a8 <_ZN3GPS12gpsInterruptEh+0x108>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b46      	cmp	r3, #70	; 0x46
 80007d0:	d939      	bls.n	8000846 <_ZN3GPS12gpsInterruptEh+0xa6>
				copyCounter = 0;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
				for (int i = 0; i < GPS_DATA_SIZE; i++) {
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	2b4f      	cmp	r3, #79	; 0x4f
 80007e2:	dc09      	bgt.n	80007f8 <_ZN3GPS12gpsInterruptEh+0x58>
					GPS_Data[i] = '0';
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	4413      	add	r3, r2
 80007ea:	3306      	adds	r3, #6
 80007ec:	2230      	movs	r2, #48	; 0x30
 80007ee:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < GPS_DATA_SIZE; i++) {
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	3301      	adds	r3, #1
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	e7f2      	b.n	80007de <_ZN3GPS12gpsInterruptEh+0x3e>
				}
				while (data[copyCounter] != '\r' && copyCounter <= 80) {
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 80007fe:	461a      	mov	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4413      	add	r3, r2
 8000804:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8000808:	2b0d      	cmp	r3, #13
 800080a:	d01c      	beq.n	8000846 <_ZN3GPS12gpsInterruptEh+0xa6>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8000812:	2b50      	cmp	r3, #80	; 0x50
 8000814:	d817      	bhi.n	8000846 <_ZN3GPS12gpsInterruptEh+0xa6>
					GPS_Data[copyCounter] = data[copyCounter];
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800081c:	461a      	mov	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8000824:	4619      	mov	r1, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4413      	add	r3, r2
 800082a:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	440b      	add	r3, r1
 8000832:	719a      	strb	r2, [r3, #6]
					copyCounter++;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800083a:	3301      	adds	r3, #1
 800083c:	b2da      	uxtb	r2, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
				while (data[copyCounter] != '\r' && copyCounter <= 80) {
 8000844:	e7d8      	b.n	80007f8 <_ZN3GPS12gpsInterruptEh+0x58>
				}
			}
			model->setGPS_Device(GPS_Data);	//set GPS data in Model
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	3306      	adds	r3, #6
 800084e:	4619      	mov	r1, r3
 8000850:	4610      	mov	r0, r2
 8000852:	f000 f868 	bl	8000926 <_ZN5Model13setGPS_DeviceEPc>
			for (int count = 0; count < GPS_DATA_SIZE; count++) {
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	2b4f      	cmp	r3, #79	; 0x4f
 800085e:	dc09      	bgt.n	8000874 <_ZN3GPS12gpsInterruptEh+0xd4>
				data[count] = '0';
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	4413      	add	r3, r2
 8000866:	3356      	adds	r3, #86	; 0x56
 8000868:	2230      	movs	r2, #48	; 0x30
 800086a:	701a      	strb	r2, [r3, #0]
			for (int count = 0; count < GPS_DATA_SIZE; count++) {
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	3301      	adds	r3, #1
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	e7f2      	b.n	800085a <_ZN3GPS12gpsInterruptEh+0xba>
			}
			i = 0;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <_ZN3GPS12gpsInterruptEh+0x108>)
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
		}

		if (recordStart) {
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	791b      	ldrb	r3, [r3, #4]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d00d      	beq.n	800089e <_ZN3GPS12gpsInterruptEh+0xfe>
			data[i] = rxData;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <_ZN3GPS12gpsInterruptEh+0x108>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	461a      	mov	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4413      	add	r3, r2
 800088c:	78fa      	ldrb	r2, [r7, #3]
 800088e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
			i++;
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <_ZN3GPS12gpsInterruptEh+0x108>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	3301      	adds	r3, #1
 8000898:	b2da      	uxtb	r2, r3
 800089a:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <_ZN3GPS12gpsInterruptEh+0x108>)
 800089c:	701a      	strb	r2, [r3, #0]
		}



	}
 800089e:	bf00      	nop
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200001a8 	.word	0x200001a8

080008ac <_ZN5ModelC1Ev>:
 *      Author: marce
 */

#include "Model.h"

Model::Model() {
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

	for(uint8_t counter = 0; counter<GPS_DATA_SIZE; counter++){
 80008b4:	2300      	movs	r3, #0
 80008b6:	73fb      	strb	r3, [r7, #15]
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	2b4f      	cmp	r3, #79	; 0x4f
 80008bc:	d80d      	bhi.n	80008da <_ZN5ModelC1Ev+0x2e>
		 gpsGCS[counter] = 11;
 80008be:	7bfb      	ldrb	r3, [r7, #15]
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	210b      	movs	r1, #11
 80008c4:	54d1      	strb	r1, [r2, r3]
		 gpsDevice[counter] = 22;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	4413      	add	r3, r2
 80008cc:	2216      	movs	r2, #22
 80008ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	for(uint8_t counter = 0; counter<GPS_DATA_SIZE; counter++){
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
 80008d4:	3301      	adds	r3, #1
 80008d6:	73fb      	strb	r3, [r7, #15]
 80008d8:	e7ee      	b.n	80008b8 <_ZN5ModelC1Ev+0xc>
	}
	 humidity = 0;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2200      	movs	r2, #0
 80008de:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	 pressure = 0;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2200      	movs	r2, #0
 80008e6:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	 tempOutisde = 0;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2200      	movs	r2, #0
 80008ee:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	 tempOutisde8Bit = 0;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2200      	movs	r2, #0
 80008f6:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
	 tempInside = 0;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2200      	movs	r2, #0
 80008fe:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4618      	mov	r0, r3
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <_ZN5Model10getGPS_GCSEv>:
//get/set GPS_GCS Data
void Model::Model::setGPS_GCS(char* data){
	//not implemented in Device
	//strncpy(gpsGCS, data, GPS_DATA_SIZE);
}
char* Model::getGPS_GCS(void){
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	//not implemented in Device
	return gpsGCS;
 8000918:	687b      	ldr	r3, [r7, #4]
}
 800091a:	4618      	mov	r0, r3
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <_ZN5Model13setGPS_DeviceEPc>:

//get/set GPS_Device Data
void Model::setGPS_Device(char* data){
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
 800092e:	6039      	str	r1, [r7, #0]
	strncpy(gpsDevice, data, GPS_DATA_SIZE);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3350      	adds	r3, #80	; 0x50
 8000934:	2250      	movs	r2, #80	; 0x50
 8000936:	6839      	ldr	r1, [r7, #0]
 8000938:	4618      	mov	r0, r3
 800093a:	f008 fd21 	bl	8009380 <strncpy>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <_ZN5RFM95C1Ev>:
 */

#include "RFM95.h"
#include "../AppMain/AppMain.h"

RFM95::RFM95() {
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3346      	adds	r3, #70	; 0x46
 8000952:	4618      	mov	r0, r3
 8000954:	f000 fb13 	bl	8000f7e <_ZN5StackC1Ev>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2201      	movs	r2, #1
 800095c:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	// TODO Auto-generated constructor stub
	userOutputPower = 0;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
}
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <_ZN5RFM957initRFMEtNS_15SPI_HW_SETTINGSENS_16GPIO_HW_SETTINGSE>:



RFM95::RFM_INIT_Typedef RFM95::initRFM(uint16_t maxPayloadLength, SPI_HW_SETTINGS spiHwSettings, GPIO_HW_SETTINGS gpioHwSettings){
 8000972:	b082      	sub	sp, #8
 8000974:	b5b0      	push	{r4, r5, r7, lr}
 8000976:	b090      	sub	sp, #64	; 0x40
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000980:	e880 000c 	stmia.w	r0, {r2, r3}
 8000984:	460b      	mov	r3, r1
 8000986:	807b      	strh	r3, [r7, #2]

		this->spiHwSettings = spiHwSettings;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800098e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000990:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		this->gpioHwSettings = gpioHwSettings;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f103 040c 	add.w	r4, r3, #12
 800099a:	f107 055c 	add.w	r5, r7, #92	; 0x5c
 800099e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009ae:	e884 0003 	stmia.w	r4, {r0, r1}
		this->payloadLength = maxPayloadLength;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	887a      	ldrh	r2, [r7, #2]
 80009b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

		if(payloadLength > 1024){
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009c4:	d901      	bls.n	80009ca <_ZN5RFM957initRFMEtNS_15SPI_HW_SETTINGSENS_16GPIO_HW_SETTINGSE+0x58>
			return RFM_PAYLOAD_ERROR;	//payload length size too big
 80009c6:	2301      	movs	r3, #1
 80009c8:	e0d2      	b.n	8000b70 <_ZN5RFM957initRFMEtNS_15SPI_HW_SETTINGSENS_16GPIO_HW_SETTINGSE+0x1fe>
		}

	const uint8_t CONFIG[][2] ={
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	2234      	movs	r2, #52	; 0x34
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f008 fccc 	bl	8009370 <memset>
 80009d8:	2301      	movs	r3, #1
 80009da:	723b      	strb	r3, [r7, #8]
 80009dc:	2309      	movs	r3, #9
 80009de:	727b      	strb	r3, [r7, #9]
 80009e0:	2302      	movs	r3, #2
 80009e2:	72bb      	strb	r3, [r7, #10]
 80009e4:	231a      	movs	r3, #26
 80009e6:	72fb      	strb	r3, [r7, #11]
 80009e8:	2303      	movs	r3, #3
 80009ea:	733b      	strb	r3, [r7, #12]
 80009ec:	230b      	movs	r3, #11
 80009ee:	737b      	strb	r3, [r7, #13]
 80009f0:	2304      	movs	r3, #4
 80009f2:	73bb      	strb	r3, [r7, #14]
 80009f4:	2303      	movs	r3, #3
 80009f6:	73fb      	strb	r3, [r7, #15]
 80009f8:	2305      	movs	r3, #5
 80009fa:	743b      	strb	r3, [r7, #16]
 80009fc:	2333      	movs	r3, #51	; 0x33
 80009fe:	747b      	strb	r3, [r7, #17]
 8000a00:	2306      	movs	r3, #6
 8000a02:	74bb      	strb	r3, [r7, #18]
 8000a04:	23d9      	movs	r3, #217	; 0xd9
 8000a06:	74fb      	strb	r3, [r7, #19]
 8000a08:	2307      	movs	r3, #7
 8000a0a:	753b      	strb	r3, [r7, #20]
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	75bb      	strb	r3, [r7, #22]
 8000a10:	2324      	movs	r3, #36	; 0x24
 8000a12:	75fb      	strb	r3, [r7, #23]
 8000a14:	2309      	movs	r3, #9
 8000a16:	763b      	strb	r3, [r7, #24]
 8000a18:	2375      	movs	r3, #117	; 0x75
 8000a1a:	767b      	strb	r3, [r7, #25]
 8000a1c:	2312      	movs	r3, #18
 8000a1e:	76bb      	strb	r3, [r7, #26]
 8000a20:	2302      	movs	r3, #2
 8000a22:	76fb      	strb	r3, [r7, #27]
 8000a24:	2310      	movs	r3, #16
 8000a26:	773b      	strb	r3, [r7, #28]
 8000a28:	23dc      	movs	r3, #220	; 0xdc
 8000a2a:	777b      	strb	r3, [r7, #29]
 8000a2c:	2325      	movs	r3, #37	; 0x25
 8000a2e:	77bb      	strb	r3, [r7, #30]
 8000a30:	2326      	movs	r3, #38	; 0x26
 8000a32:	f887 3020 	strb.w	r3, [r7, #32]
 8000a36:	2303      	movs	r3, #3
 8000a38:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000a3c:	233e      	movs	r3, #62	; 0x3e
 8000a3e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000a42:	230a      	movs	r3, #10
 8000a44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000a48:	233f      	movs	r3, #63	; 0x3f
 8000a4a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000a4e:	2311      	movs	r3, #17
 8000a50:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000a54:	2340      	movs	r3, #64	; 0x40
 8000a56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000a5a:	2314      	movs	r3, #20
 8000a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a60:	2341      	movs	r3, #65	; 0x41
 8000a62:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000a66:	23f0      	movs	r3, #240	; 0xf0
 8000a68:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000a6c:	2327      	movs	r3, #39	; 0x27
 8000a6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000a72:	2383      	movs	r3, #131	; 0x83
 8000a74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000a78:	2328      	movs	r3, #40	; 0x28
 8000a7a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000a7e:	232d      	movs	r3, #45	; 0x2d
 8000a80:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000a84:	2329      	movs	r3, #41	; 0x29
 8000a86:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000a8a:	232d      	movs	r3, #45	; 0x2d
 8000a8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000a90:	232a      	movs	r3, #42	; 0x2a
 8000a92:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8000a96:	232d      	movs	r3, #45	; 0x2d
 8000a98:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8000a9c:	2330      	movs	r3, #48	; 0x30
 8000a9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8000aa2:	2390      	movs	r3, #144	; 0x90
 8000aa4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000aa8:	2331      	movs	r3, #49	; 0x31
 8000aaa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000aae:	2332      	movs	r3, #50	; 0x32
 8000ab0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000ab4:	2335      	movs	r3, #53	; 0x35
 8000ab6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8000aba:	239f      	movs	r3, #159	; 0x9f
 8000abc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8000ac0:	23ff      	movs	r3, #255	; 0xff
 8000ac2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

		/*0x30*/  	{REG_PACKET_CONFIG_1, RF_PACKET1_FORMAT_VAR | RF_PACKET1_DC_OFF | RF_PACKET1_CRC_ON | RF_PACKET1_CRC_AUTOCLEAR_ON | RF_PACKET1_ADDR_FILT_OFF | RF_PACKET1_CRC_CCITT},



		/*0x31*/  	{REG_PACKET_CONFIG_2, RF_PACKET2_DATA_MODE_PACKET | RF_PACKET2_IHOME_OFF | RF_PACKET2_BACON_OFF | (uint8_t)((payloadLength>>8) & 0x03)},
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000acc:	121b      	asrs	r3, r3, #8
 8000ace:	b25b      	sxtb	r3, r3
 8000ad0:	f003 0303 	and.w	r3, r3, #3
 8000ad4:	b25b      	sxtb	r3, r3
 8000ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ada:	b25b      	sxtb	r3, r3
 8000adc:	b2db      	uxtb	r3, r3

		/*0x36*/	{REG_FIFO_THRESH, RF_FIFOTHRESH_TXSTART_FIFOEMPTY | 0x1F},


		{255,0}
	};
 8000ade:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		/*0x32*/	{REG_PAYLOAD_LENGTH, (uint8_t)(payloadLength)},
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
	};
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	deselectRFM();
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 f88c 	bl	8000c0c <_ZN5RFM9511deselectRFMEv>

	HAL_Delay(100);
 8000af4:	2064      	movs	r0, #100	; 0x64
 8000af6:	f000 ff11 	bl	800191c <HAL_Delay>

	selectRFM();
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f000 f876 	bl	8000bec <_ZN5RFM959selectRFMEv>
	//write config array
	  for (uint8_t i = 0; CONFIG[i][0] != 255; i++){
 8000b00:	2300      	movs	r3, #0
 8000b02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000b06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000b10:	4413      	add	r3, r2
 8000b12:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000b16:	2bff      	cmp	r3, #255	; 0xff
 8000b18:	d023      	beq.n	8000b62 <_ZN5RFM957initRFMEtNS_15SPI_HW_SETTINGSENS_16GPIO_HW_SETTINGSE+0x1f0>
		  if(writeReg(CONFIG[i][0], CONFIG[i][1]) == HAL_ERROR){
 8000b1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000b24:	4413      	add	r3, r2
 8000b26:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 8000b2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000b34:	4413      	add	r3, r2
 8000b36:	f813 3c37 	ldrb.w	r3, [r3, #-55]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f000 f875 	bl	8000c2c <_ZN5RFM958writeRegEhh>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	bf0c      	ite	eq
 8000b48:	2301      	moveq	r3, #1
 8000b4a:	2300      	movne	r3, #0
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <_ZN5RFM957initRFMEtNS_15SPI_HW_SETTINGSENS_16GPIO_HW_SETTINGSE+0x1e4>
			return RFM_INIT_FAIL;
 8000b52:	2302      	movs	r3, #2
 8000b54:	e00c      	b.n	8000b70 <_ZN5RFM957initRFMEtNS_15SPI_HW_SETTINGSENS_16GPIO_HW_SETTINGSE+0x1fe>
	  for (uint8_t i = 0; CONFIG[i][0] != 255; i++){
 8000b56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000b60:	e7d1      	b.n	8000b06 <_ZN5RFM957initRFMEtNS_15SPI_HW_SETTINGSENS_16GPIO_HW_SETTINGSE+0x194>
		  }
	  }
	  deselectRFM();
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 f852 	bl	8000c0c <_ZN5RFM9511deselectRFMEv>
	  rcCalibration();
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f000 f9e8 	bl	8000f3e <_ZN5RFM9513rcCalibrationEv>
	 return RFM_OK;
 8000b6e:	2300      	movs	r3, #0
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3740      	adds	r7, #64	; 0x40
 8000b74:	46bd      	mov	sp, r7
 8000b76:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000b7a:	b002      	add	sp, #8
 8000b7c:	4770      	bx	lr

08000b7e <_ZN5RFM9511isDataReadyEv>:
	setMode(TX);		// set TX Mode
	readGPIO(0);		// wait until packet is sent

}

bool RFM95::isDataReady(void){
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
	if(currentMode != RX){
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f893 3146 	ldrb.w	r3, [r3, #326]	; 0x146
 8000b8c:	2b05      	cmp	r3, #5
 8000b8e:	d003      	beq.n	8000b98 <_ZN5RFM9511isDataReadyEv+0x1a>
		setMode(RX);
 8000b90:	2105      	movs	r1, #5
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f000 f8f3 	bl	8000d7e <_ZN5RFM957setModeENS_4MODEE>
	}
	//check if Data in FIFO
	if(HAL_GPIO_ReadPin(gpioHwSettings.gpioPort0, gpioHwSettings.gpioPin0) == GPIO_PIN_SET){
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	68da      	ldr	r2, [r3, #12]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	8a1b      	ldrh	r3, [r3, #16]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4610      	mov	r0, r2
 8000ba4:	f001 f9a0 	bl	8001ee8 <HAL_GPIO_ReadPin>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	bf0c      	ite	eq
 8000bae:	2301      	moveq	r3, #1
 8000bb0:	2300      	movne	r3, #0
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d008      	beq.n	8000bca <_ZN5RFM9511isDataReadyEv+0x4c>
		setMode(STANDBY);
 8000bb8:	2101      	movs	r1, #1
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f000 f8df 	bl	8000d7e <_ZN5RFM957setModeENS_4MODEE>
		readFIFO();
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f000 f88c 	bl	8000cde <_ZN5RFM958readFIFOEv>
		return true;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e000      	b.n	8000bcc <_ZN5RFM9511isDataReadyEv+0x4e>
	}else{
		return false;
 8000bca:	2300      	movs	r3, #0
	}
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <_ZN5RFM9510rfmReceiveEv>:

void RFM95::rfmReceive(void){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	setMode(RX);
 8000bdc:	2105      	movs	r1, #5
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f000 f8cd 	bl	8000d7e <_ZN5RFM957setModeENS_4MODEE>
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <_ZN5RFM959selectRFMEv>:
 * @brief RFM95 chip select
 *
 * @param none
 * @return none
 */
void RFM95::selectRFM(){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(spiHwSettings.gpioPort, spiHwSettings.gpioPin, GPIO_PIN_RESET);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6858      	ldr	r0, [r3, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	891b      	ldrh	r3, [r3, #8]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f001 f98a 	bl	8001f18 <HAL_GPIO_WritePin>
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <_ZN5RFM9511deselectRFMEv>:
 * @brief RFM95 chip deselect
 *
 * @param none
 * @return none
 */
void RFM95::deselectRFM(){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(spiHwSettings.gpioPort, spiHwSettings.gpioPin, GPIO_PIN_SET);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6858      	ldr	r0, [r3, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	891b      	ldrh	r3, [r3, #8]
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	4619      	mov	r1, r3
 8000c20:	f001 f97a 	bl	8001f18 <HAL_GPIO_WritePin>
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <_ZN5RFM958writeRegEhh>:
 * @param addr specific register address
 * @param data data to be written
 *
 * @return none
 */
HAL_StatusTypeDef RFM95::writeReg(uint8_t addr, uint8_t data){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	460b      	mov	r3, r1
 8000c36:	70fb      	strb	r3, [r7, #3]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2] = {(uint8_t)(addr | 0x80), data};
 8000c3c:	78fb      	ldrb	r3, [r7, #3]
 8000c3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	733b      	strb	r3, [r7, #12]
 8000c46:	78bb      	ldrb	r3, [r7, #2]
 8000c48:	737b      	strb	r3, [r7, #13]
	selectRFM();
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff ffce 	bl	8000bec <_ZN5RFM959selectRFMEv>
	if(HAL_SPI_Transmit(spiHwSettings.hspi, (uint8_t*)buff, 2, SPI_TIMEOUT) != HAL_OK){
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6818      	ldr	r0, [r3, #0]
 8000c54:	f107 010c 	add.w	r1, r7, #12
 8000c58:	2364      	movs	r3, #100	; 0x64
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	f003 fae4 	bl	8004228 <HAL_SPI_Transmit>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	bf14      	ite	ne
 8000c66:	2301      	movne	r3, #1
 8000c68:	2300      	moveq	r3, #0
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d004      	beq.n	8000c7a <_ZN5RFM958writeRegEhh+0x4e>
		deselectRFM();
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff ffcb 	bl	8000c0c <_ZN5RFM9511deselectRFMEv>
		return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e003      	b.n	8000c82 <_ZN5RFM958writeRegEhh+0x56>
	}
	deselectRFM();
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff ffc6 	bl	8000c0c <_ZN5RFM9511deselectRFMEv>
	return HAL_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <_ZN5RFM957readRegEh>:
 * @param addr specific register address
 * @return data from register
 *
 * @return none
 */
uint8_t RFM95::readReg(uint8_t addr){
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af02      	add	r7, sp, #8
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	460b      	mov	r3, r1
 8000c94:	70fb      	strb	r3, [r7, #3]
	uint8_t *buff = {0};
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
	selectRFM();
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ffa6 	bl	8000bec <_ZN5RFM959selectRFMEv>
	if(HAL_SPI_TransmitReceive(spiHwSettings.hspi, &addr, (uint8_t*)buff, 1, SPI_TIMEOUT) != HAL_OK){
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6818      	ldr	r0, [r3, #0]
 8000ca4:	1cf9      	adds	r1, r7, #3
 8000ca6:	2364      	movs	r3, #100	; 0x64
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2301      	movs	r3, #1
 8000cac:	68fa      	ldr	r2, [r7, #12]
 8000cae:	f003 fd49 	bl	8004744 <HAL_SPI_TransmitReceive>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	bf14      	ite	ne
 8000cb8:	2301      	movne	r3, #1
 8000cba:	2300      	moveq	r3, #0
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d004      	beq.n	8000ccc <_ZN5RFM957readRegEh+0x42>
		deselectRFM();
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff ffa2 	bl	8000c0c <_ZN5RFM9511deselectRFMEv>
		return HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e004      	b.n	8000cd6 <_ZN5RFM957readRegEh+0x4c>
	}
	deselectRFM();
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ff9d 	bl	8000c0c <_ZN5RFM9511deselectRFMEv>
	return buff[0];
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	781b      	ldrb	r3, [r3, #0]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <_ZN5RFM958readFIFOEv>:
		deselectRFM();
		return RFM_OK;
	}
}

void RFM95::readFIFO(void){
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b086      	sub	sp, #24
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
	uint8_t *addr = {REG_FIFO};
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
	uint8_t rxData[1] = {0};
 8000cea:	2300      	movs	r3, #0
 8000cec:	733b      	strb	r3, [r7, #12]
	selectRFM();
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff ff7c 	bl	8000bec <_ZN5RFM959selectRFMEv>
	HAL_SPI_Transmit(spiHwSettings.hspi, addr, 1, SPI_TIMEOUT);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6818      	ldr	r0, [r3, #0]
 8000cf8:	2364      	movs	r3, #100	; 0x64
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	6939      	ldr	r1, [r7, #16]
 8000cfe:	f003 fa93 	bl	8004228 <HAL_SPI_Transmit>
	uint16_t payloadCounter = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	82fb      	strh	r3, [r7, #22]
	while(HAL_GPIO_ReadPin(gpioHwSettings.gpioPort1, gpioHwSettings.gpioPin1) != GPIO_PIN_SET && payloadCounter<=(payloadLength+1))
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	695a      	ldr	r2, [r3, #20]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	8b1b      	ldrh	r3, [r3, #24]
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4610      	mov	r0, r2
 8000d12:	f001 f8e9 	bl	8001ee8 <HAL_GPIO_ReadPin>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d008      	beq.n	8000d2e <_ZN5RFM958readFIFOEv+0x50>
 8000d1c:	8afa      	ldrh	r2, [r7, #22]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d24:	3301      	adds	r3, #1
 8000d26:	429a      	cmp	r2, r3
 8000d28:	dc01      	bgt.n	8000d2e <_ZN5RFM958readFIFOEv+0x50>
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e000      	b.n	8000d30 <_ZN5RFM958readFIFOEv+0x52>
 8000d2e:	2300      	movs	r3, #0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d01d      	beq.n	8000d70 <_ZN5RFM958readFIFOEv+0x92>
	{
		HAL_SPI_Receive(spiHwSettings.hspi, rxData, 1,SPI_TIMEOUT);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6818      	ldr	r0, [r3, #0]
 8000d38:	f107 010c 	add.w	r1, r7, #12
 8000d3c:	2364      	movs	r3, #100	; 0x64
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f003 fbd8 	bl	80044f4 <HAL_SPI_Receive>
		if(!stack.isFull()){
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3346      	adds	r3, #70	; 0x46
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 f96d 	bl	8001028 <_ZN5Stack6isFullEv>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	f083 0301 	eor.w	r3, r3, #1
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d006      	beq.n	8000d68 <_ZN5RFM958readFIFOEv+0x8a>
			stack.push(rxData[0]);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	3346      	adds	r3, #70	; 0x46
 8000d5e:	7b3a      	ldrb	r2, [r7, #12]
 8000d60:	4611      	mov	r1, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 f916 	bl	8000f94 <_ZN5Stack4pushEh>
		}
		payloadCounter++;
 8000d68:	8afb      	ldrh	r3, [r7, #22]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	82fb      	strh	r3, [r7, #22]
	while(HAL_GPIO_ReadPin(gpioHwSettings.gpioPort1, gpioHwSettings.gpioPin1) != GPIO_PIN_SET && payloadCounter<=(payloadLength+1))
 8000d6e:	e7ca      	b.n	8000d06 <_ZN5RFM958readFIFOEv+0x28>
	}
	deselectRFM();
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff ff4b 	bl	8000c0c <_ZN5RFM9511deselectRFMEv>
}
 8000d76:	bf00      	nop
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <_ZN5RFM957setModeENS_4MODEE>:


void RFM95::setMode(MODE mode){
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b084      	sub	sp, #16
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
 8000d86:	460b      	mov	r3, r1
 8000d88:	70fb      	strb	r3, [r7, #3]
	if(currentMode != mode){
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f893 3146 	ldrb.w	r3, [r3, #326]	; 0x146
 8000d90:	78fa      	ldrb	r2, [r7, #3]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d039      	beq.n	8000e0a <_ZN5RFM957setModeENS_4MODEE+0x8c>
		switch (mode){
 8000d96:	78fb      	ldrb	r3, [r7, #3]
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d00c      	beq.n	8000db6 <_ZN5RFM957setModeENS_4MODEE+0x38>
 8000d9c:	2b05      	cmp	r3, #5
 8000d9e:	d000      	beq.n	8000da2 <_ZN5RFM957setModeENS_4MODEE+0x24>
		case TX:
			writeReg(REG_DIO_MAPPING_1, RF_DIO_0_TX_PACKETSENT | RF_DIO_1_ALL_FIFOFULL);
			setOutputPower(userOutputPower);
			break;
		default:
			break;
 8000da0:	e016      	b.n	8000dd0 <_ZN5RFM957setModeENS_4MODEE+0x52>
			writeReg(REG_DIO_MAPPING_1, RF_DIO_0_RX_PAYLOADRDY | RF_DIO_1_ALL_FIFOEMPTY);
 8000da2:	2210      	movs	r2, #16
 8000da4:	2140      	movs	r1, #64	; 0x40
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ff40 	bl	8000c2c <_ZN5RFM958writeRegEhh>
			setOutputPower(0);
 8000dac:	2100      	movs	r1, #0
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f000 f89a 	bl	8000ee8 <_ZN5RFM9514setOutputPowerEh>
			break;
 8000db4:	e00c      	b.n	8000dd0 <_ZN5RFM957setModeENS_4MODEE+0x52>
			writeReg(REG_DIO_MAPPING_1, RF_DIO_0_TX_PACKETSENT | RF_DIO_1_ALL_FIFOFULL);
 8000db6:	2220      	movs	r2, #32
 8000db8:	2140      	movs	r1, #64	; 0x40
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff ff36 	bl	8000c2c <_ZN5RFM958writeRegEhh>
			setOutputPower(userOutputPower);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f000 f88d 	bl	8000ee8 <_ZN5RFM9514setOutputPowerEh>
			break;
 8000dce:	bf00      	nop
		}
		uint8_t currentMode = readReg(REG_OP_MOD);
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ff59 	bl	8000c8a <_ZN5RFM957readRegEh>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	73fb      	strb	r3, [r7, #15]
		currentMode &= 0xF8;
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	f023 0307 	bic.w	r3, r3, #7
 8000de2:	73fb      	strb	r3, [r7, #15]
		currentMode |= mode;
 8000de4:	7bfa      	ldrb	r2, [r7, #15]
 8000de6:	78fb      	ldrb	r3, [r7, #3]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	73fb      	strb	r3, [r7, #15]
		writeReg(REG_OP_MOD, currentMode);
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
 8000dee:	461a      	mov	r2, r3
 8000df0:	2101      	movs	r1, #1
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff ff1a 	bl	8000c2c <_ZN5RFM958writeRegEhh>
		HAL_Delay(1);
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f000 fd8f 	bl	800191c <HAL_Delay>
		readGPIO(5);
 8000dfe:	2105      	movs	r1, #5
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f000 f807 	bl	8000e14 <_ZN5RFM958readGPIOEh>
		currentMode = mode;
 8000e06:	78fb      	ldrb	r3, [r7, #3]
 8000e08:	73fb      	strb	r3, [r7, #15]
	}
}
 8000e0a:	bf00      	nop
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <_ZN5RFM958readGPIOEh>:


bool RFM95::readGPIO(uint8_t gpioPin){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	70fb      	strb	r3, [r7, #3]
	uint8_t timeout = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	73fb      	strb	r3, [r7, #15]
	uint16_t tempGpioPin;
	GPIO_TypeDef *tempGpioPort;
	switch (gpioPin) {
 8000e24:	78fb      	ldrb	r3, [r7, #3]
 8000e26:	2b05      	cmp	r3, #5
 8000e28:	d838      	bhi.n	8000e9c <_ZN5RFM958readGPIOEh+0x88>
 8000e2a:	a201      	add	r2, pc, #4	; (adr r2, 8000e30 <_ZN5RFM958readGPIOEh+0x1c>)
 8000e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e30:	08000e49 	.word	0x08000e49
 8000e34:	08000e57 	.word	0x08000e57
 8000e38:	08000e65 	.word	0x08000e65
 8000e3c:	08000e73 	.word	0x08000e73
 8000e40:	08000e81 	.word	0x08000e81
 8000e44:	08000e8f 	.word	0x08000e8f
		case 0:
			tempGpioPin = gpioHwSettings.gpioPin0;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	8a1b      	ldrh	r3, [r3, #16]
 8000e4c:	81bb      	strh	r3, [r7, #12]
			tempGpioPort = gpioHwSettings.gpioPort0;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	60bb      	str	r3, [r7, #8]
			break;
 8000e54:	e023      	b.n	8000e9e <_ZN5RFM958readGPIOEh+0x8a>
		case 1:
			tempGpioPin = gpioHwSettings.gpioPin1;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	8b1b      	ldrh	r3, [r3, #24]
 8000e5a:	81bb      	strh	r3, [r7, #12]
			tempGpioPort = gpioHwSettings.gpioPort1;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	60bb      	str	r3, [r7, #8]
			break;
 8000e62:	e01c      	b.n	8000e9e <_ZN5RFM958readGPIOEh+0x8a>
		case 2:
			tempGpioPin = gpioHwSettings.gpioPin2;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	8c1b      	ldrh	r3, [r3, #32]
 8000e68:	81bb      	strh	r3, [r7, #12]
			tempGpioPort = gpioHwSettings.gpioPort2;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	60bb      	str	r3, [r7, #8]
			break;
 8000e70:	e015      	b.n	8000e9e <_ZN5RFM958readGPIOEh+0x8a>
		case 3:
			tempGpioPin = gpioHwSettings.gpioPin3;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e76:	81bb      	strh	r3, [r7, #12]
			tempGpioPort = gpioHwSettings.gpioPort3;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7c:	60bb      	str	r3, [r7, #8]
			break;
 8000e7e:	e00e      	b.n	8000e9e <_ZN5RFM958readGPIOEh+0x8a>
		case 4:
			tempGpioPin = gpioHwSettings.gpioPin4;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000e84:	81bb      	strh	r3, [r7, #12]
			tempGpioPort = gpioHwSettings.gpioPort4;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e8a:	60bb      	str	r3, [r7, #8]
			break;
 8000e8c:	e007      	b.n	8000e9e <_ZN5RFM958readGPIOEh+0x8a>
		case 5:
			tempGpioPin = gpioHwSettings.gpioPin5;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8000e92:	81bb      	strh	r3, [r7, #12]
			tempGpioPort = gpioHwSettings.gpioPort5;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e98:	60bb      	str	r3, [r7, #8]
			break;
 8000e9a:	e000      	b.n	8000e9e <_ZN5RFM958readGPIOEh+0x8a>
		default:
			break;
 8000e9c:	bf00      	nop
	}
	HAL_Delay(10);
 8000e9e:	200a      	movs	r0, #10
 8000ea0:	f000 fd3c 	bl	800191c <HAL_Delay>
	while(HAL_GPIO_ReadPin(tempGpioPort, tempGpioPin) != GPIO_PIN_SET && timeout<GPIO_TIMEOUT){
 8000ea4:	89bb      	ldrh	r3, [r7, #12]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	68b8      	ldr	r0, [r7, #8]
 8000eaa:	f001 f81d 	bl	8001ee8 <HAL_GPIO_ReadPin>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d004      	beq.n	8000ebe <_ZN5RFM958readGPIOEh+0xaa>
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	2bf9      	cmp	r3, #249	; 0xf9
 8000eb8:	d801      	bhi.n	8000ebe <_ZN5RFM958readGPIOEh+0xaa>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e000      	b.n	8000ec0 <_ZN5RFM958readGPIOEh+0xac>
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d006      	beq.n	8000ed2 <_ZN5RFM958readGPIOEh+0xbe>
		timeout++;
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(1);
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f000 fd26 	bl	800191c <HAL_Delay>
	while(HAL_GPIO_ReadPin(tempGpioPort, tempGpioPin) != GPIO_PIN_SET && timeout<GPIO_TIMEOUT){
 8000ed0:	e7e8      	b.n	8000ea4 <_ZN5RFM958readGPIOEh+0x90>
	}

	if(timeout >= GPIO_TIMEOUT){
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	2bf9      	cmp	r3, #249	; 0xf9
 8000ed6:	d901      	bls.n	8000edc <_ZN5RFM958readGPIOEh+0xc8>
		return false;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	e000      	b.n	8000ede <_ZN5RFM958readGPIOEh+0xca>
	}else{
		return true;
 8000edc:	2301      	movs	r3, #1
	}
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop

08000ee8 <_ZN5RFM9514setOutputPowerEh>:
 * @brief set outputpower
 *
 * @param uint8_t outputpower in dBm (0-20)
 * @return none
 */
void RFM95::setOutputPower(uint8_t outputPower){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	70fb      	strb	r3, [r7, #3]
	userOutputPower = outputPower;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	78fa      	ldrb	r2, [r7, #3]
 8000ef8:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
	if(outputPower <= 15){
 8000efc:	78fb      	ldrb	r3, [r7, #3]
 8000efe:	2b0f      	cmp	r3, #15
 8000f00:	d808      	bhi.n	8000f14 <_ZN5RFM9514setOutputPowerEh+0x2c>
		writeReg(REG_PA_CONFIG, (uint8_t)(RF_PA_00DBM + outputPower));
 8000f02:	78fb      	ldrb	r3, [r7, #3]
 8000f04:	3370      	adds	r3, #112	; 0x70
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	461a      	mov	r2, r3
 8000f0a:	2109      	movs	r1, #9
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff fe8d 	bl	8000c2c <_ZN5RFM958writeRegEhh>
	}else if(outputPower < 20){
		writeReg(REG_PA_CONFIG, (uint8_t)(RF_PA_16DBM - 16 + outputPower));
	}else{
		writeReg(REG_PA_CONFIG, RF_PA_20DBM);
	}
}
 8000f12:	e010      	b.n	8000f36 <_ZN5RFM9514setOutputPowerEh+0x4e>
	}else if(outputPower < 20){
 8000f14:	78fb      	ldrb	r3, [r7, #3]
 8000f16:	2b13      	cmp	r3, #19
 8000f18:	d808      	bhi.n	8000f2c <_ZN5RFM9514setOutputPowerEh+0x44>
		writeReg(REG_PA_CONFIG, (uint8_t)(RF_PA_16DBM - 16 + outputPower));
 8000f1a:	78fb      	ldrb	r3, [r7, #3]
 8000f1c:	3b65      	subs	r3, #101	; 0x65
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	461a      	mov	r2, r3
 8000f22:	2109      	movs	r1, #9
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff fe81 	bl	8000c2c <_ZN5RFM958writeRegEhh>
}
 8000f2a:	e004      	b.n	8000f36 <_ZN5RFM9514setOutputPowerEh+0x4e>
		writeReg(REG_PA_CONFIG, RF_PA_20DBM);
 8000f2c:	22af      	movs	r2, #175	; 0xaf
 8000f2e:	2109      	movs	r1, #9
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff fe7b 	bl	8000c2c <_ZN5RFM958writeRegEhh>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <_ZN5RFM9513rcCalibrationEv>:
	HAL_Delay(10);
	HAL_GPIO_WritePin(gpioHwSettings.gpioPortRST, gpioHwSettings.gpioPinRST, GPIO_PIN_RESET);
	HAL_Delay(10);
}

void RFM95::rcCalibration(){
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
	setMode(STANDBY);
 8000f46:	2101      	movs	r1, #1
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ff18 	bl	8000d7e <_ZN5RFM957setModeENS_4MODEE>
	writeReg(REG_OSC,RF_OSC_CAL_START_TRIGGER);
 8000f4e:	2208      	movs	r2, #8
 8000f50:	2124      	movs	r1, #36	; 0x24
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff fe6a 	bl	8000c2c <_ZN5RFM958writeRegEhh>
	HAL_Delay(100);
 8000f58:	2064      	movs	r0, #100	; 0x64
 8000f5a:	f000 fcdf 	bl	800191c <HAL_Delay>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <_ZN5RFM958rfmStackEv>:

Stack* RFM95::rfmStack(){
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
	return &stack;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3346      	adds	r3, #70	; 0x46
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <_ZN5StackC1Ev>:
 *      Author: marce
 */

#include "Stack.h"

Stack::Stack() {
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub

}
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <_ZN5Stack4pushEh>:
void Stack::initStack(){
	for(int i = 0; i<STACK_SIZE;i++){
		this->data[i] = 0;
	}
}
void Stack::push(uint8_t data){
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	70fb      	strb	r3, [r7, #3]
	if(size < STACK_SIZE){
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2bff      	cmp	r3, #255	; 0xff
 8000fa6:	d00c      	beq.n	8000fc2 <_ZN5Stack4pushEh+0x2e>
		this->data[size] = data;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	78fa      	ldrb	r2, [r7, #3]
 8000fb4:	705a      	strb	r2, [r3, #1]
		size++;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	701a      	strb	r2, [r3, #0]
	}
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <_ZN5Stack3popEv>:

uint8_t Stack::pop(void){
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
	if(size > 0){
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00c      	beq.n	8000ff8 <_ZN5Stack3popEv+0x2a>
		size--;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	701a      	strb	r2, [r3, #0]
		return this->data[size];
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	785b      	ldrb	r3, [r3, #1]
 8000ff6:	e000      	b.n	8000ffa <_ZN5Stack3popEv+0x2c>
	}
	return 0;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <_ZN5Stack7isEmptyEv>:

bool Stack::isEmpty(void){
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
	return (size == 0 ? true : false);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	bf0c      	ite	eq
 8001016:	2301      	moveq	r3, #1
 8001018:	2300      	movne	r3, #0
 800101a:	b2db      	uxtb	r3, r3
}
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <_ZN5Stack6isFullEv>:

bool Stack::isFull(void){
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	return (size == STACK_SIZE ? true : false);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2bff      	cmp	r3, #255	; 0xff
 8001036:	bf0c      	ite	eq
 8001038:	2301      	moveq	r3, #1
 800103a:	2300      	movne	r3, #0
 800103c:	b2db      	uxtb	r3, r3
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <_ZN7USB_ComC1Ev>:
 *      Author: marce
 */

#include "USBCom.h"

USB_Com::USB_Com() {
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub

}
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <_ZN7USB_Com11usbTransmitEPhh>:


bool USB_Com::usbTransmit(uint8_t *data, uint8_t size){
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	4613      	mov	r3, r2
 800106c:	71fb      	strb	r3, [r7, #7]
	uint16_t counter = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	82fb      	strh	r3, [r7, #22]
	while(CDC_Transmit_FS((uint8_t*) data, size) != USBD_OK){
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	b29b      	uxth	r3, r3
 8001076:	4619      	mov	r1, r3
 8001078:	68b8      	ldr	r0, [r7, #8]
 800107a:	f007 fc71 	bl	8008960 <CDC_Transmit_FS>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	bf14      	ite	ne
 8001084:	2301      	movne	r3, #1
 8001086:	2300      	moveq	r3, #0
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d007      	beq.n	800109e <_ZN7USB_Com11usbTransmitEPhh+0x3e>
		counter++;
 800108e:	8afb      	ldrh	r3, [r7, #22]
 8001090:	3301      	adds	r3, #1
 8001092:	82fb      	strh	r3, [r7, #22]
		if(counter >= USB_TIMEOUT){
 8001094:	8afb      	ldrh	r3, [r7, #22]
 8001096:	2b63      	cmp	r3, #99	; 0x63
 8001098:	d9eb      	bls.n	8001072 <_ZN7USB_Com11usbTransmitEPhh+0x12>
			return false;	//Trasmit faild
 800109a:	2300      	movs	r3, #0
 800109c:	e000      	b.n	80010a0 <_ZN7USB_Com11usbTransmitEPhh+0x40>
		}
	}
	return true;	//Transmit successful
 800109e:	2301      	movs	r3, #1
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010be:	4b43      	ldr	r3, [pc, #268]	; (80011cc <MX_GPIO_Init+0x124>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	4a42      	ldr	r2, [pc, #264]	; (80011cc <MX_GPIO_Init+0x124>)
 80010c4:	f043 0304 	orr.w	r3, r3, #4
 80010c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ca:	4b40      	ldr	r3, [pc, #256]	; (80011cc <MX_GPIO_Init+0x124>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	4b3d      	ldr	r3, [pc, #244]	; (80011cc <MX_GPIO_Init+0x124>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	4a3c      	ldr	r2, [pc, #240]	; (80011cc <MX_GPIO_Init+0x124>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e2:	4b3a      	ldr	r3, [pc, #232]	; (80011cc <MX_GPIO_Init+0x124>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	4b37      	ldr	r3, [pc, #220]	; (80011cc <MX_GPIO_Init+0x124>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	4a36      	ldr	r2, [pc, #216]	; (80011cc <MX_GPIO_Init+0x124>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fa:	4b34      	ldr	r3, [pc, #208]	; (80011cc <MX_GPIO_Init+0x124>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|RFM_NSS_Pin, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	f248 0102 	movw	r1, #32770	; 0x8002
 800110c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001110:	f000 ff02 	bl	8001f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAX_CS_Pin|MAX_DRDY_Pin|RFM_RST_Pin, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	210b      	movs	r1, #11
 8001118:	482d      	ldr	r0, [pc, #180]	; (80011d0 <MX_GPIO_Init+0x128>)
 800111a:	f000 fefd 	bl	8001f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RFM_DIO2_Pin|RFM_DIO1_Pin;
 800111e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001122:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	4619      	mov	r1, r3
 8001132:	4828      	ldr	r0, [pc, #160]	; (80011d4 <MX_GPIO_Init+0x12c>)
 8001134:	f000 fd66 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NC_Pin|NCA8_Pin;
 8001138:	f240 1301 	movw	r3, #257	; 0x101
 800113c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113e:	2303      	movs	r3, #3
 8001140:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 030c 	add.w	r3, r7, #12
 800114a:	4619      	mov	r1, r3
 800114c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001150:	f000 fd58 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Pin|RFM_NSS_Pin;
 8001154:	f248 0302 	movw	r3, #32770	; 0x8002
 8001158:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115a:	2301      	movs	r3, #1
 800115c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	4619      	mov	r1, r3
 800116c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001170:	f000 fd48 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PRESSURE_INT_Pin;
 8001174:	2310      	movs	r3, #16
 8001176:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001178:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <MX_GPIO_Init+0x130>)
 800117a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PRESSURE_INT_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	4619      	mov	r1, r3
 8001186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118a:	f000 fd3b 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MAX_CS_Pin|MAX_DRDY_Pin|RFM_RST_Pin;
 800118e:	230b      	movs	r3, #11
 8001190:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001192:	2301      	movs	r3, #1
 8001194:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	4619      	mov	r1, r3
 80011a4:	480a      	ldr	r0, [pc, #40]	; (80011d0 <MX_GPIO_Init+0x128>)
 80011a6:	f000 fd2d 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RFM_DIO5_Pin|RFM_DIO3_Pin|RFM_DIO4_Pin|RFM_DIO0_Pin;
 80011aa:	23f0      	movs	r3, #240	; 0xf0
 80011ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	4619      	mov	r1, r3
 80011bc:	4804      	ldr	r0, [pc, #16]	; (80011d0 <MX_GPIO_Init+0x128>)
 80011be:	f000 fd21 	bl	8001c04 <HAL_GPIO_Init>

}
 80011c2:	bf00      	nop
 80011c4:	3720      	adds	r7, #32
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40021000 	.word	0x40021000
 80011d0:	48000400 	.word	0x48000400
 80011d4:	48000800 	.word	0x48000800
 80011d8:	10110000 	.word	0x10110000

080011dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <MX_I2C1_Init+0x74>)
 80011e2:	4a1c      	ldr	r2, [pc, #112]	; (8001254 <MX_I2C1_Init+0x78>)
 80011e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80011e6:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <MX_I2C1_Init+0x74>)
 80011e8:	4a1b      	ldr	r2, [pc, #108]	; (8001258 <MX_I2C1_Init+0x7c>)
 80011ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011ec:	4b18      	ldr	r3, [pc, #96]	; (8001250 <MX_I2C1_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <MX_I2C1_Init+0x74>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f8:	4b15      	ldr	r3, [pc, #84]	; (8001250 <MX_I2C1_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <MX_I2C1_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <MX_I2C1_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_I2C1_Init+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <MX_I2C1_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001216:	480e      	ldr	r0, [pc, #56]	; (8001250 <MX_I2C1_Init+0x74>)
 8001218:	f000 feaf 	bl	8001f7a <HAL_I2C_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001222:	f000 f925 	bl	8001470 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001226:	2100      	movs	r1, #0
 8001228:	4809      	ldr	r0, [pc, #36]	; (8001250 <MX_I2C1_Init+0x74>)
 800122a:	f000 ff35 	bl	8002098 <HAL_I2CEx_ConfigAnalogFilter>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001234:	f000 f91c 	bl	8001470 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001238:	2100      	movs	r1, #0
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_I2C1_Init+0x74>)
 800123c:	f000 ff77 	bl	800212e <HAL_I2CEx_ConfigDigitalFilter>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001246:	f000 f913 	bl	8001470 <Error_Handler>
  }

}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000674 	.word	0x20000674
 8001254:	40005400 	.word	0x40005400
 8001258:	00707cbb 	.word	0x00707cbb

0800125c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a18      	ldr	r2, [pc, #96]	; (80012dc <HAL_I2C_MspInit+0x80>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d129      	bne.n	80012d2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <HAL_I2C_MspInit+0x84>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <HAL_I2C_MspInit+0x84>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <HAL_I2C_MspInit+0x84>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001296:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800129a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800129c:	2312      	movs	r3, #18
 800129e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a0:	2301      	movs	r3, #1
 80012a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012a8:	2304      	movs	r3, #4
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b6:	f000 fca5 	bl	8001c04 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <HAL_I2C_MspInit+0x84>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012be:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <HAL_I2C_MspInit+0x84>)
 80012c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012c4:	6593      	str	r3, [r2, #88]	; 0x58
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_I2C_MspInit+0x84>)
 80012c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012d2:	bf00      	nop
 80012d4:	3728      	adds	r7, #40	; 0x28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40005400 	.word	0x40005400
 80012e0:	40021000 	.word	0x40021000

080012e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e8:	f000 faa7 	bl	800183a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ec:	f000 f822 	bl	8001334 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012f0:	f7ff feda 	bl	80010a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012f4:	f7ff ff72 	bl	80011dc <MX_I2C1_Init>
  MX_SPI1_Init();
 80012f8:	f000 f8e0 	bl	80014bc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80012fc:	f000 f9fa 	bl	80016f4 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001300:	f007 fa70 	bl	80087e4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_MspInit(&huart2);		//UART init
 8001304:	4807      	ldr	r0, [pc, #28]	; (8001324 <main+0x40>)
 8001306:	f000 fa25 	bl	8001754 <HAL_UART_MspInit>
  HAL_SPI_MspInit(&hspi1);		//SPI init
 800130a:	4807      	ldr	r0, [pc, #28]	; (8001328 <main+0x44>)
 800130c:	f000 f914 	bl	8001538 <HAL_SPI_MspInit>
  HAL_UART_Receive_IT(&huart2, rxData, 1);
 8001310:	2201      	movs	r2, #1
 8001312:	4906      	ldr	r1, [pc, #24]	; (800132c <main+0x48>)
 8001314:	4803      	ldr	r0, [pc, #12]	; (8001324 <main+0x40>)
 8001316:	f003 fdeb 	bl	8004ef0 <HAL_UART_Receive_IT>
  appMain.mainProg();
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <main+0x4c>)
 800131c:	f7ff f948 	bl	80005b0 <_ZN7AppMain8mainProgEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001320:	e7fe      	b.n	8001320 <main+0x3c>
 8001322:	bf00      	nop
 8001324:	20000724 	.word	0x20000724
 8001328:	200006c0 	.word	0x200006c0
 800132c:	20000450 	.word	0x20000450
 8001330:	200001ac 	.word	0x200001ac

08001334 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b0a4      	sub	sp, #144	; 0x90
 8001338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800133e:	2244      	movs	r2, #68	; 0x44
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f008 f814 	bl	8009370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001348:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	2234      	movs	r2, #52	; 0x34
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f008 f806 	bl	8009370 <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001364:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001368:	f001 fe7e 	bl	8003068 <HAL_PWREx_ControlVoltageScaling>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	bf14      	ite	ne
 8001372:	2301      	movne	r3, #1
 8001374:	2300      	moveq	r3, #0
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <_Z18SystemClock_Configv+0x4c>
  {
    Error_Handler();
 800137c:	f000 f878 	bl	8001470 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001380:	2322      	movs	r3, #34	; 0x22
 8001382:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001388:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800138a:	2301      	movs	r3, #1
 800138c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800138e:	2340      	movs	r3, #64	; 0x40
 8001390:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001392:	2302      	movs	r3, #2
 8001394:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001396:	2302      	movs	r3, #2
 8001398:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800139a:	2302      	movs	r3, #2
 800139c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 8;
 80013a0:	2308      	movs	r3, #8
 80013a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013a6:	2302      	movs	r3, #2
 80013a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013ac:	2302      	movs	r3, #2
 80013ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013b6:	4618      	mov	r0, r3
 80013b8:	f001 febc 	bl	8003134 <HAL_RCC_OscConfig>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	bf14      	ite	ne
 80013c2:	2301      	movne	r3, #1
 80013c4:	2300      	moveq	r3, #0
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <_Z18SystemClock_Configv+0x9c>
  {
    Error_Handler();
 80013cc:	f000 f850 	bl	8001470 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d0:	230f      	movs	r3, #15
 80013d2:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d4:	2303      	movs	r3, #3
 80013d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013e8:	2101      	movs	r1, #1
 80013ea:	4618      	mov	r0, r3
 80013ec:	f002 fb08 	bl	8003a00 <HAL_RCC_ClockConfig>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	bf14      	ite	ne
 80013f6:	2301      	movne	r3, #1
 80013f8:	2300      	moveq	r3, #0
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <_Z18SystemClock_Configv+0xd0>
  {
    Error_Handler();
 8001400:	f000 f836 	bl	8001470 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001404:	f242 0342 	movw	r3, #8258	; 0x2042
 8001408:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800140e:	2300      	movs	r3, #0
 8001410:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001412:	2300      	movs	r3, #0
 8001414:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	4618      	mov	r0, r3
 800141a:	f002 fcf5 	bl	8003e08 <HAL_RCCEx_PeriphCLKConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	bf14      	ite	ne
 8001424:	2301      	movne	r3, #1
 8001426:	2300      	moveq	r3, #0
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <_Z18SystemClock_Configv+0xfe>
  {
    Error_Handler();
 800142e:	f000 f81f 	bl	8001470 <Error_Handler>
  }
}
 8001432:	bf00      	nop
 8001434:	3790      	adds	r7, #144	; 0x90
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, rxData, 1);
 8001444:	2201      	movs	r2, #1
 8001446:	4907      	ldr	r1, [pc, #28]	; (8001464 <HAL_UART_RxCpltCallback+0x28>)
 8001448:	4807      	ldr	r0, [pc, #28]	; (8001468 <HAL_UART_RxCpltCallback+0x2c>)
 800144a:	f003 fd51 	bl	8004ef0 <HAL_UART_Receive_IT>
	appMain.gps.gpsInterrupt(rxData[0]);
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_UART_RxCpltCallback+0x28>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <HAL_UART_RxCpltCallback+0x30>)
 8001456:	f7ff f9a3 	bl	80007a0 <_ZN3GPS12gpsInterruptEh>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000450 	.word	0x20000450
 8001468:	20000724 	.word	0x20000724
 800146c:	200003a0 	.word	0x200003a0

08001470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <_Z41__static_initialization_and_destruction_0ii>:
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d107      	bne.n	80014a0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001496:	4293      	cmp	r3, r2
 8001498:	d102      	bne.n	80014a0 <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain;
 800149a:	4803      	ldr	r0, [pc, #12]	; (80014a8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800149c:	f7ff f816 	bl	80004cc <_ZN7AppMainC1Ev>
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200001ac 	.word	0x200001ac

080014ac <_GLOBAL__sub_I_appMain>:
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80014b4:	2001      	movs	r0, #1
 80014b6:	f7ff ffe3 	bl	8001480 <_Z41__static_initialization_and_destruction_0ii>
 80014ba:	bd80      	pop	{r7, pc}

080014bc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <MX_SPI1_Init+0x74>)
 80014c2:	4a1c      	ldr	r2, [pc, #112]	; (8001534 <MX_SPI1_Init+0x78>)
 80014c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014c6:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <MX_SPI1_Init+0x74>)
 80014c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014ce:	4b18      	ldr	r3, [pc, #96]	; (8001530 <MX_SPI1_Init+0x74>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014d4:	4b16      	ldr	r3, [pc, #88]	; (8001530 <MX_SPI1_Init+0x74>)
 80014d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <MX_SPI1_Init+0x74>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014e2:	4b13      	ldr	r3, [pc, #76]	; (8001530 <MX_SPI1_Init+0x74>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <MX_SPI1_Init+0x74>)
 80014ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <MX_SPI1_Init+0x74>)
 80014f2:	2218      	movs	r2, #24
 80014f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_SPI1_Init+0x74>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MX_SPI1_Init+0x74>)
 80014fe:	2200      	movs	r2, #0
 8001500:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <MX_SPI1_Init+0x74>)
 8001504:	2200      	movs	r2, #0
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_SPI1_Init+0x74>)
 800150a:	2207      	movs	r2, #7
 800150c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <MX_SPI1_Init+0x74>)
 8001510:	2200      	movs	r2, #0
 8001512:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_SPI1_Init+0x74>)
 8001516:	2208      	movs	r2, #8
 8001518:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_SPI1_Init+0x74>)
 800151c:	f002 fdfa 	bl	8004114 <HAL_SPI_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001526:	f7ff ffa3 	bl	8001470 <Error_Handler>
  }

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200006c0 	.word	0x200006c0
 8001534:	40013000 	.word	0x40013000

08001538 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	; 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a17      	ldr	r2, [pc, #92]	; (80015b4 <HAL_SPI_MspInit+0x7c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d128      	bne.n	80015ac <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <HAL_SPI_MspInit+0x80>)
 800155c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800155e:	4a16      	ldr	r2, [pc, #88]	; (80015b8 <HAL_SPI_MspInit+0x80>)
 8001560:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001564:	6613      	str	r3, [r2, #96]	; 0x60
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <HAL_SPI_MspInit+0x80>)
 8001568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <HAL_SPI_MspInit+0x80>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001576:	4a10      	ldr	r2, [pc, #64]	; (80015b8 <HAL_SPI_MspInit+0x80>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <HAL_SPI_MspInit+0x80>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800158a:	23e0      	movs	r3, #224	; 0xe0
 800158c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001596:	2303      	movs	r3, #3
 8001598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800159a:	2305      	movs	r3, #5
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a8:	f000 fb2c 	bl	8001c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80015ac:	bf00      	nop
 80015ae:	3728      	adds	r7, #40	; 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40013000 	.word	0x40013000
 80015b8:	40021000 	.word	0x40021000

080015bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <HAL_MspInit+0x44>)
 80015c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c6:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <HAL_MspInit+0x44>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6613      	str	r3, [r2, #96]	; 0x60
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <HAL_MspInit+0x44>)
 80015d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_MspInit+0x44>)
 80015dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015de:	4a08      	ldr	r2, [pc, #32]	; (8001600 <HAL_MspInit+0x44>)
 80015e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e4:	6593      	str	r3, [r2, #88]	; 0x58
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_MspInit+0x44>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000

08001604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001616:	e7fe      	b.n	8001616 <HardFault_Handler+0x4>

08001618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800161c:	e7fe      	b.n	800161c <MemManage_Handler+0x4>

0800161e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001622:	e7fe      	b.n	8001622 <BusFault_Handler+0x4>

08001624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <UsageFault_Handler+0x4>

0800162a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001658:	f000 f942 	bl	80018e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}

08001660 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <USART2_IRQHandler+0x10>)
 8001666:	f003 fce5 	bl	8005034 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000724 	.word	0x20000724

08001674 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <USB_IRQHandler+0x10>)
 800167a:	f000 feae 	bl	80023da <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000143c 	.word	0x2000143c

08001688 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <SystemInit+0x64>)
 800168e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001692:	4a16      	ldr	r2, [pc, #88]	; (80016ec <SystemInit+0x64>)
 8001694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800169c:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <SystemInit+0x68>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a13      	ldr	r2, [pc, #76]	; (80016f0 <SystemInit+0x68>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <SystemInit+0x68>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <SystemInit+0x68>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a0f      	ldr	r2, [pc, #60]	; (80016f0 <SystemInit+0x68>)
 80016b4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80016b8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80016bc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <SystemInit+0x68>)
 80016c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016c4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016c6:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <SystemInit+0x68>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a09      	ldr	r2, [pc, #36]	; (80016f0 <SystemInit+0x68>)
 80016cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80016d2:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <SystemInit+0x68>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <SystemInit+0x64>)
 80016da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016de:	609a      	str	r2, [r3, #8]
#endif
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00
 80016f0:	40021000 	.word	0x40021000

080016f4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80016f8:	4b14      	ldr	r3, [pc, #80]	; (800174c <MX_USART2_UART_Init+0x58>)
 80016fa:	4a15      	ldr	r2, [pc, #84]	; (8001750 <MX_USART2_UART_Init+0x5c>)
 80016fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <MX_USART2_UART_Init+0x58>)
 8001700:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001704:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_USART2_UART_Init+0x58>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <MX_USART2_UART_Init+0x58>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <MX_USART2_UART_Init+0x58>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <MX_USART2_UART_Init+0x58>)
 800171a:	2204      	movs	r2, #4
 800171c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <MX_USART2_UART_Init+0x58>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <MX_USART2_UART_Init+0x58>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <MX_USART2_UART_Init+0x58>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <MX_USART2_UART_Init+0x58>)
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <MX_USART2_UART_Init+0x58>)
 8001738:	f003 fb8c 	bl	8004e54 <HAL_UART_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001742:	f7ff fe95 	bl	8001470 <Error_Handler>
  }

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000724 	.word	0x20000724
 8001750:	40004400 	.word	0x40004400

08001754 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a1b      	ldr	r2, [pc, #108]	; (80017e0 <HAL_UART_MspInit+0x8c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d130      	bne.n	80017d8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001776:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <HAL_UART_MspInit+0x90>)
 8001778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177a:	4a1a      	ldr	r2, [pc, #104]	; (80017e4 <HAL_UART_MspInit+0x90>)
 800177c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001780:	6593      	str	r3, [r2, #88]	; 0x58
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <HAL_UART_MspInit+0x90>)
 8001784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_UART_MspInit+0x90>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001792:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <HAL_UART_MspInit+0x90>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800179a:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_UART_MspInit+0x90>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017a6:	230c      	movs	r3, #12
 80017a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b2:	2303      	movs	r3, #3
 80017b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017b6:	2307      	movs	r3, #7
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c4:	f000 fa1e 	bl	8001c04 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2100      	movs	r1, #0
 80017cc:	2026      	movs	r0, #38	; 0x26
 80017ce:	f000 f9a2 	bl	8001b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017d2:	2026      	movs	r0, #38	; 0x26
 80017d4:	f000 f9bb 	bl	8001b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80017d8:	bf00      	nop
 80017da:	3728      	adds	r7, #40	; 0x28
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40004400 	.word	0x40004400
 80017e4:	40021000 	.word	0x40021000

080017e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001820 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80017ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80017ee:	e003      	b.n	80017f8 <LoopCopyDataInit>

080017f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80017f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80017f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80017f6:	3104      	adds	r1, #4

080017f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80017f8:	480b      	ldr	r0, [pc, #44]	; (8001828 <LoopForever+0xa>)
	ldr	r3, =_edata
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <LoopForever+0xe>)
	adds	r2, r0, r1
 80017fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80017fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001800:	d3f6      	bcc.n	80017f0 <CopyDataInit>
	ldr	r2, =_sbss
 8001802:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001804:	e002      	b.n	800180c <LoopFillZerobss>

08001806 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001806:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001808:	f842 3b04 	str.w	r3, [r2], #4

0800180c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <LoopForever+0x16>)
	cmp	r2, r3
 800180e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001810:	d3f9      	bcc.n	8001806 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001812:	f7ff ff39 	bl	8001688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001816:	f007 fd87 	bl	8009328 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800181a:	f7ff fd63 	bl	80012e4 <main>

0800181e <LoopForever>:

LoopForever:
    b LoopForever
 800181e:	e7fe      	b.n	800181e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001820:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8001824:	08009468 	.word	0x08009468
	ldr	r0, =_sdata
 8001828:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800182c:	2000018c 	.word	0x2000018c
	ldr	r2, =_sbss
 8001830:	2000018c 	.word	0x2000018c
	ldr	r3, = _ebss
 8001834:	200016b0 	.word	0x200016b0

08001838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC1_2_IRQHandler>

0800183a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001844:	2003      	movs	r0, #3
 8001846:	f000 f95b 	bl	8001b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800184a:	2000      	movs	r0, #0
 800184c:	f000 f80e 	bl	800186c <HAL_InitTick>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	71fb      	strb	r3, [r7, #7]
 800185a:	e001      	b.n	8001860 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800185c:	f7ff feae 	bl	80015bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001860:	79fb      	ldrb	r3, [r7, #7]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001878:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <HAL_InitTick+0x68>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d022      	beq.n	80018c6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001880:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_InitTick+0x6c>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <HAL_InitTick+0x68>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800188c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001890:	fbb2 f3f3 	udiv	r3, r2, r3
 8001894:	4618      	mov	r0, r3
 8001896:	f000 f968 	bl	8001b6a <HAL_SYSTICK_Config>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d10f      	bne.n	80018c0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b0f      	cmp	r3, #15
 80018a4:	d809      	bhi.n	80018ba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a6:	2200      	movs	r2, #0
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	f04f 30ff 	mov.w	r0, #4294967295
 80018ae:	f000 f932 	bl	8001b16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018b2:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <HAL_InitTick+0x70>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	e007      	b.n	80018ca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	73fb      	strb	r3, [r7, #15]
 80018be:	e004      	b.n	80018ca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	73fb      	strb	r3, [r7, #15]
 80018c4:	e001      	b.n	80018ca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000008 	.word	0x20000008
 80018d8:	20000000 	.word	0x20000000
 80018dc:	20000004 	.word	0x20000004

080018e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <HAL_IncTick+0x1c>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <HAL_IncTick+0x20>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4413      	add	r3, r2
 80018ee:	4a03      	ldr	r2, [pc, #12]	; (80018fc <HAL_IncTick+0x1c>)
 80018f0:	6013      	str	r3, [r2, #0]
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	200007a4 	.word	0x200007a4
 8001900:	20000008 	.word	0x20000008

08001904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return uwTick;
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <HAL_GetTick+0x14>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	200007a4 	.word	0x200007a4

0800191c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001924:	f7ff ffee 	bl	8001904 <HAL_GetTick>
 8001928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001934:	d004      	beq.n	8001940 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_Delay+0x40>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	4413      	add	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001940:	bf00      	nop
 8001942:	f7ff ffdf 	bl	8001904 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	429a      	cmp	r2, r3
 8001950:	d8f7      	bhi.n	8001942 <HAL_Delay+0x26>
  {
  }
}
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000008 	.word	0x20000008

08001960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800197c:	4013      	ands	r3, r2
 800197e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800198c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001992:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	60d3      	str	r3, [r2, #12]
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ac:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <__NVIC_GetPriorityGrouping+0x18>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	0a1b      	lsrs	r3, r3, #8
 80019b2:	f003 0307 	and.w	r3, r3, #7
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	db0b      	blt.n	80019ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	f003 021f 	and.w	r2, r3, #31
 80019dc:	4907      	ldr	r1, [pc, #28]	; (80019fc <__NVIC_EnableIRQ+0x38>)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	095b      	lsrs	r3, r3, #5
 80019e4:	2001      	movs	r0, #1
 80019e6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000e100 	.word	0xe000e100

08001a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	6039      	str	r1, [r7, #0]
 8001a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	db0a      	blt.n	8001a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	490c      	ldr	r1, [pc, #48]	; (8001a4c <__NVIC_SetPriority+0x4c>)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	0112      	lsls	r2, r2, #4
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	440b      	add	r3, r1
 8001a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a28:	e00a      	b.n	8001a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4908      	ldr	r1, [pc, #32]	; (8001a50 <__NVIC_SetPriority+0x50>)
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	3b04      	subs	r3, #4
 8001a38:	0112      	lsls	r2, r2, #4
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	761a      	strb	r2, [r3, #24]
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000e100 	.word	0xe000e100
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b089      	sub	sp, #36	; 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f1c3 0307 	rsb	r3, r3, #7
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	bf28      	it	cs
 8001a72:	2304      	movcs	r3, #4
 8001a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	2b06      	cmp	r3, #6
 8001a7c:	d902      	bls.n	8001a84 <NVIC_EncodePriority+0x30>
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3b03      	subs	r3, #3
 8001a82:	e000      	b.n	8001a86 <NVIC_EncodePriority+0x32>
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	f04f 32ff 	mov.w	r2, #4294967295
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43da      	mvns	r2, r3
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	401a      	ands	r2, r3
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	43d9      	mvns	r1, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	4313      	orrs	r3, r2
         );
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3724      	adds	r7, #36	; 0x24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001acc:	d301      	bcc.n	8001ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e00f      	b.n	8001af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <SysTick_Config+0x40>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ada:	210f      	movs	r1, #15
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae0:	f7ff ff8e 	bl	8001a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <SysTick_Config+0x40>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aea:	4b04      	ldr	r3, [pc, #16]	; (8001afc <SysTick_Config+0x40>)
 8001aec:	2207      	movs	r2, #7
 8001aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	e000e010 	.word	0xe000e010

08001b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ff29 	bl	8001960 <__NVIC_SetPriorityGrouping>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b086      	sub	sp, #24
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b28:	f7ff ff3e 	bl	80019a8 <__NVIC_GetPriorityGrouping>
 8001b2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	6978      	ldr	r0, [r7, #20]
 8001b34:	f7ff ff8e 	bl	8001a54 <NVIC_EncodePriority>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3e:	4611      	mov	r1, r2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff5d 	bl	8001a00 <__NVIC_SetPriority>
}
 8001b46:	bf00      	nop
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff31 	bl	80019c4 <__NVIC_EnableIRQ>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ffa2 	bl	8001abc <SysTick_Config>
 8001b78:	4603      	mov	r3, r0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b084      	sub	sp, #16
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d005      	beq.n	8001ba6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2204      	movs	r2, #4
 8001b9e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	73fb      	strb	r3, [r7, #15]
 8001ba4:	e029      	b.n	8001bfa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 020e 	bic.w	r2, r2, #14
 8001bb4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0201 	bic.w	r2, r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	f003 021c 	and.w	r2, r3, #28
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	4798      	blx	r3
    }
  }
  return status;
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c12:	e14e      	b.n	8001eb2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	2101      	movs	r1, #1
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c20:	4013      	ands	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 8140 	beq.w	8001eac <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d00b      	beq.n	8001c4c <HAL_GPIO_Init+0x48>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d007      	beq.n	8001c4c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c40:	2b11      	cmp	r3, #17
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b12      	cmp	r3, #18
 8001c4a:	d130      	bne.n	8001cae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c82:	2201      	movs	r2, #1
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	091b      	lsrs	r3, r3, #4
 8001c98:	f003 0201 	and.w	r2, r3, #1
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	2203      	movs	r2, #3
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0xea>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b12      	cmp	r3, #18
 8001cec:	d123      	bne.n	8001d36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	08da      	lsrs	r2, r3, #3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3208      	adds	r2, #8
 8001cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	220f      	movs	r2, #15
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	691a      	ldr	r2, [r3, #16]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	08da      	lsrs	r2, r3, #3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3208      	adds	r2, #8
 8001d30:	6939      	ldr	r1, [r7, #16]
 8001d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	2203      	movs	r2, #3
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 0203 	and.w	r2, r3, #3
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 809a 	beq.w	8001eac <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d78:	4b55      	ldr	r3, [pc, #340]	; (8001ed0 <HAL_GPIO_Init+0x2cc>)
 8001d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7c:	4a54      	ldr	r2, [pc, #336]	; (8001ed0 <HAL_GPIO_Init+0x2cc>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6613      	str	r3, [r2, #96]	; 0x60
 8001d84:	4b52      	ldr	r3, [pc, #328]	; (8001ed0 <HAL_GPIO_Init+0x2cc>)
 8001d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d90:	4a50      	ldr	r2, [pc, #320]	; (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	089b      	lsrs	r3, r3, #2
 8001d96:	3302      	adds	r3, #2
 8001d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	220f      	movs	r2, #15
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4013      	ands	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dba:	d013      	beq.n	8001de4 <HAL_GPIO_Init+0x1e0>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a46      	ldr	r2, [pc, #280]	; (8001ed8 <HAL_GPIO_Init+0x2d4>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d00d      	beq.n	8001de0 <HAL_GPIO_Init+0x1dc>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a45      	ldr	r2, [pc, #276]	; (8001edc <HAL_GPIO_Init+0x2d8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d007      	beq.n	8001ddc <HAL_GPIO_Init+0x1d8>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a44      	ldr	r2, [pc, #272]	; (8001ee0 <HAL_GPIO_Init+0x2dc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d101      	bne.n	8001dd8 <HAL_GPIO_Init+0x1d4>
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e006      	b.n	8001de6 <HAL_GPIO_Init+0x1e2>
 8001dd8:	2307      	movs	r3, #7
 8001dda:	e004      	b.n	8001de6 <HAL_GPIO_Init+0x1e2>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e002      	b.n	8001de6 <HAL_GPIO_Init+0x1e2>
 8001de0:	2301      	movs	r3, #1
 8001de2:	e000      	b.n	8001de6 <HAL_GPIO_Init+0x1e2>
 8001de4:	2300      	movs	r3, #0
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	f002 0203 	and.w	r2, r2, #3
 8001dec:	0092      	lsls	r2, r2, #2
 8001dee:	4093      	lsls	r3, r2
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001df6:	4937      	ldr	r1, [pc, #220]	; (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	3302      	adds	r3, #2
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e04:	4b37      	ldr	r3, [pc, #220]	; (8001ee4 <HAL_GPIO_Init+0x2e0>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	4013      	ands	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e28:	4a2e      	ldr	r2, [pc, #184]	; (8001ee4 <HAL_GPIO_Init+0x2e0>)
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001e2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ee4 <HAL_GPIO_Init+0x2e0>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	43db      	mvns	r3, r3
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e52:	4a24      	ldr	r2, [pc, #144]	; (8001ee4 <HAL_GPIO_Init+0x2e0>)
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e58:	4b22      	ldr	r3, [pc, #136]	; (8001ee4 <HAL_GPIO_Init+0x2e0>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e7c:	4a19      	ldr	r2, [pc, #100]	; (8001ee4 <HAL_GPIO_Init+0x2e0>)
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e82:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <HAL_GPIO_Init+0x2e0>)
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ea6:	4a0f      	ldr	r2, [pc, #60]	; (8001ee4 <HAL_GPIO_Init+0x2e0>)
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f47f aea9 	bne.w	8001c14 <HAL_GPIO_Init+0x10>
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	371c      	adds	r7, #28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40010000 	.word	0x40010000
 8001ed8:	48000400 	.word	0x48000400
 8001edc:	48000800 	.word	0x48000800
 8001ee0:	48000c00 	.word	0x48000c00
 8001ee4:	40010400 	.word	0x40010400

08001ee8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	887b      	ldrh	r3, [r7, #2]
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f00:	2301      	movs	r3, #1
 8001f02:	73fb      	strb	r3, [r7, #15]
 8001f04:	e001      	b.n	8001f0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f06:	2300      	movs	r3, #0
 8001f08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	807b      	strh	r3, [r7, #2]
 8001f24:	4613      	mov	r3, r2
 8001f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f28:	787b      	ldrb	r3, [r7, #1]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f2e:	887a      	ldrh	r2, [r7, #2]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f34:	e002      	b.n	8001f3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f36:	887a      	ldrh	r2, [r7, #2]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	695a      	ldr	r2, [r3, #20]
 8001f58:	887b      	ldrh	r3, [r7, #2]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f60:	887a      	ldrh	r2, [r7, #2]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001f66:	e002      	b.n	8001f6e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f68:	887a      	ldrh	r2, [r7, #2]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	619a      	str	r2, [r3, #24]
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e081      	b.n	8002090 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d106      	bne.n	8001fa6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff f95b 	bl	800125c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2224      	movs	r2, #36	; 0x24
 8001faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0201 	bic.w	r2, r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fda:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d107      	bne.n	8001ff4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	e006      	b.n	8002002 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002000:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d104      	bne.n	8002014 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002012:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002026:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002036:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	ea42 0103 	orr.w	r1, r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	021a      	lsls	r2, r3, #8
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69d9      	ldr	r1, [r3, #28]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1a      	ldr	r2, [r3, #32]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 0201 	orr.w	r2, r2, #1
 8002070:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2220      	movs	r2, #32
 800207c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b20      	cmp	r3, #32
 80020ac:	d138      	bne.n	8002120 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e032      	b.n	8002122 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2224      	movs	r2, #36	; 0x24
 80020c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0201 	bic.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6819      	ldr	r1, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2220      	movs	r2, #32
 8002110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	e000      	b.n	8002122 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002120:	2302      	movs	r3, #2
  }
}
 8002122:	4618      	mov	r0, r3
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800212e:	b480      	push	{r7}
 8002130:	b085      	sub	sp, #20
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b20      	cmp	r3, #32
 8002142:	d139      	bne.n	80021b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800214e:	2302      	movs	r3, #2
 8002150:	e033      	b.n	80021ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2224      	movs	r2, #36	; 0x24
 800215e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0201 	bic.w	r2, r2, #1
 8002170:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002180:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	4313      	orrs	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2220      	movs	r2, #32
 80021a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	e000      	b.n	80021ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021b8:	2302      	movs	r3, #2
  }
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021c8:	b08b      	sub	sp, #44	; 0x2c
 80021ca:	af06      	add	r7, sp, #24
 80021cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e0da      	b.n	800238e <HAL_PCD_Init+0x1c8>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d106      	bne.n	80021f2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f006 fcfd 	bl	8008bec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2203      	movs	r2, #3
 80021f6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f003 fe15 	bl	8005e2e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	603b      	str	r3, [r7, #0]
 800220a:	687e      	ldr	r6, [r7, #4]
 800220c:	466d      	mov	r5, sp
 800220e:	f106 0410 	add.w	r4, r6, #16
 8002212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002214:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002216:	6823      	ldr	r3, [r4, #0]
 8002218:	602b      	str	r3, [r5, #0]
 800221a:	1d33      	adds	r3, r6, #4
 800221c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800221e:	6838      	ldr	r0, [r7, #0]
 8002220:	f003 fddb 	bl	8005dda <USB_CoreInit>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d005      	beq.n	8002236 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2202      	movs	r2, #2
 800222e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e0ab      	b.n	800238e <HAL_PCD_Init+0x1c8>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2100      	movs	r1, #0
 800223c:	4618      	mov	r0, r3
 800223e:	f003 fe11 	bl	8005e64 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002242:	2300      	movs	r3, #0
 8002244:	73fb      	strb	r3, [r7, #15]
 8002246:	e035      	b.n	80022b4 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	015b      	lsls	r3, r3, #5
 800224e:	4413      	add	r3, r2
 8002250:	3329      	adds	r3, #41	; 0x29
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	015b      	lsls	r3, r3, #5
 800225c:	4413      	add	r3, r2
 800225e:	3328      	adds	r3, #40	; 0x28
 8002260:	7bfa      	ldrb	r2, [r7, #15]
 8002262:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	7bfa      	ldrb	r2, [r7, #15]
 8002268:	b291      	uxth	r1, r2
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	015b      	lsls	r3, r3, #5
 800226e:	4413      	add	r3, r2
 8002270:	3336      	adds	r3, #54	; 0x36
 8002272:	460a      	mov	r2, r1
 8002274:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	015b      	lsls	r3, r3, #5
 800227c:	4413      	add	r3, r2
 800227e:	332b      	adds	r3, #43	; 0x2b
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	015b      	lsls	r3, r3, #5
 800228a:	4413      	add	r3, r2
 800228c:	3338      	adds	r3, #56	; 0x38
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	015b      	lsls	r3, r3, #5
 8002298:	4413      	add	r3, r2
 800229a:	333c      	adds	r3, #60	; 0x3c
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	3302      	adds	r3, #2
 80022a6:	015b      	lsls	r3, r3, #5
 80022a8:	4413      	add	r3, r2
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	3301      	adds	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d3c4      	bcc.n	8002248 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022be:	2300      	movs	r3, #0
 80022c0:	73fb      	strb	r3, [r7, #15]
 80022c2:	e031      	b.n	8002328 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	015b      	lsls	r3, r3, #5
 80022ca:	4413      	add	r3, r2
 80022cc:	f203 1329 	addw	r3, r3, #297	; 0x129
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	015b      	lsls	r3, r3, #5
 80022da:	4413      	add	r3, r2
 80022dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	015b      	lsls	r3, r3, #5
 80022ea:	4413      	add	r3, r2
 80022ec:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	015b      	lsls	r3, r3, #5
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	015b      	lsls	r3, r3, #5
 800230a:	4413      	add	r3, r2
 800230c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002314:	7bfb      	ldrb	r3, [r7, #15]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	330a      	adds	r3, #10
 800231a:	015b      	lsls	r3, r3, #5
 800231c:	4413      	add	r3, r2
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	3301      	adds	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	429a      	cmp	r2, r3
 8002330:	d3c8      	bcc.n	80022c4 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	603b      	str	r3, [r7, #0]
 8002338:	687e      	ldr	r6, [r7, #4]
 800233a:	466d      	mov	r5, sp
 800233c:	f106 0410 	add.w	r4, r6, #16
 8002340:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002342:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002344:	6823      	ldr	r3, [r4, #0]
 8002346:	602b      	str	r3, [r5, #0]
 8002348:	1d33      	adds	r3, r6, #4
 800234a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800234c:	6838      	ldr	r0, [r7, #0]
 800234e:	f003 fd96 	bl	8005e7e <USB_DevInit>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2202      	movs	r2, #2
 800235c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e014      	b.n	800238e <HAL_PCD_Init+0x1c8>
  }

  hpcd->USB_Address = 0U;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d102      	bne.n	8002382 <HAL_PCD_Init+0x1bc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 fe3a 	bl	8002ff6 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f004 fddd 	bl	8006f46 <USB_DevDisconnect>

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002396 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <HAL_PCD_Start+0x16>
 80023a8:	2302      	movs	r3, #2
 80023aa:	e012      	b.n	80023d2 <HAL_PCD_Start+0x3c>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f004 fdad 	bl	8006f18 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f003 fd1a 	bl	8005dfc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f004 fdc2 	bl	8006f70 <USB_ReadInterrupts>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023f6:	d102      	bne.n	80023fe <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fb33 	bl	8002a64 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f004 fdb4 	bl	8006f70 <USB_ReadInterrupts>
 8002408:	4603      	mov	r3, r0
 800240a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002412:	d112      	bne.n	800243a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800241c:	b29a      	uxth	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002426:	b292      	uxth	r2, r2
 8002428:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f006 fc78 	bl	8008d22 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002432:	2100      	movs	r1, #0
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f91e 	bl	8002676 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f004 fd96 	bl	8006f70 <USB_ReadInterrupts>
 8002444:	4603      	mov	r3, r0
 8002446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800244a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800244e:	d10b      	bne.n	8002468 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002458:	b29a      	uxth	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002462:	b292      	uxth	r2, r2
 8002464:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f004 fd7f 	bl	8006f70 <USB_ReadInterrupts>
 8002472:	4603      	mov	r3, r0
 8002474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800247c:	d10b      	bne.n	8002496 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002486:	b29a      	uxth	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002490:	b292      	uxth	r2, r2
 8002492:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f004 fd68 	bl	8006f70 <USB_ReadInterrupts>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024aa:	d133      	bne.n	8002514 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0204 	bic.w	r2, r2, #4
 80024be:	b292      	uxth	r2, r2
 80024c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0208 	bic.w	r2, r2, #8
 80024d6:	b292      	uxth	r2, r2
 80024d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d107      	bne.n	80024f6 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80024ee:	2100      	movs	r1, #0
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f006 fec3 	bl	800927c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f006 fc4c 	bl	8008d94 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002504:	b29a      	uxth	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800250e:	b292      	uxth	r2, r2
 8002510:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f004 fd29 	bl	8006f70 <USB_ReadInterrupts>
 800251e:	4603      	mov	r3, r0
 8002520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002528:	d126      	bne.n	8002578 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002532:	b29a      	uxth	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f042 0208 	orr.w	r2, r2, #8
 800253c:	b292      	uxth	r2, r2
 800253e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800254a:	b29a      	uxth	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002554:	b292      	uxth	r2, r2
 8002556:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002562:	b29a      	uxth	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0204 	orr.w	r2, r2, #4
 800256c:	b292      	uxth	r2, r2
 800256e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f006 fbf4 	bl	8008d60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f004 fcf7 	bl	8006f70 <USB_ReadInterrupts>
 8002582:	4603      	mov	r3, r0
 8002584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002588:	2b80      	cmp	r3, #128	; 0x80
 800258a:	d13f      	bne.n	800260c <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002594:	b29a      	uxth	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800259e:	b292      	uxth	r2, r2
 80025a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d12b      	bne.n	8002606 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f042 0204 	orr.w	r2, r2, #4
 80025c0:	b292      	uxth	r2, r2
 80025c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f042 0208 	orr.w	r2, r2, #8
 80025d8:	b292      	uxth	r2, r2
 80025da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	089b      	lsrs	r3, r3, #2
 80025f2:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80025fc:	2101      	movs	r1, #1
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f006 fe3c 	bl	800927c <HAL_PCDEx_LPM_Callback>
 8002604:	e002      	b.n	800260c <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f006 fbaa 	bl	8008d60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f004 fcad 	bl	8006f70 <USB_ReadInterrupts>
 8002616:	4603      	mov	r3, r0
 8002618:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800261c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002620:	d10e      	bne.n	8002640 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800262a:	b29a      	uxth	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002634:	b292      	uxth	r2, r2
 8002636:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f006 fb63 	bl	8008d06 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f004 fc93 	bl	8006f70 <USB_ReadInterrupts>
 800264a:	4603      	mov	r3, r0
 800264c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002654:	d10b      	bne.n	800266e <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800265e:	b29a      	uxth	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002668:	b292      	uxth	r2, r2
 800266a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	460b      	mov	r3, r1
 8002680:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_PCD_SetAddress+0x1a>
 800268c:	2302      	movs	r3, #2
 800268e:	e013      	b.n	80026b8 <HAL_PCD_SetAddress+0x42>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	78fa      	ldrb	r2, [r7, #3]
 80026a6:	4611      	mov	r1, r2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f004 fc21 	bl	8006ef0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	4608      	mov	r0, r1
 80026ca:	4611      	mov	r1, r2
 80026cc:	461a      	mov	r2, r3
 80026ce:	4603      	mov	r3, r0
 80026d0:	70fb      	strb	r3, [r7, #3]
 80026d2:	460b      	mov	r3, r1
 80026d4:	803b      	strh	r3, [r7, #0]
 80026d6:	4613      	mov	r3, r2
 80026d8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	da0b      	bge.n	80026fe <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026e6:	78fb      	ldrb	r3, [r7, #3]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	015b      	lsls	r3, r3, #5
 80026ee:	3328      	adds	r3, #40	; 0x28
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	4413      	add	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2201      	movs	r2, #1
 80026fa:	705a      	strb	r2, [r3, #1]
 80026fc:	e00b      	b.n	8002716 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026fe:	78fb      	ldrb	r3, [r7, #3]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	015b      	lsls	r3, r3, #5
 8002706:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	4413      	add	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002716:	78fb      	ldrb	r3, [r7, #3]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	b2da      	uxtb	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002722:	883a      	ldrh	r2, [r7, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	78ba      	ldrb	r2, [r7, #2]
 800272c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	785b      	ldrb	r3, [r3, #1]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d004      	beq.n	8002740 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002740:	78bb      	ldrb	r3, [r7, #2]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d102      	bne.n	800274c <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_PCD_EP_Open+0x9a>
 8002756:	2302      	movs	r3, #2
 8002758:	e00e      	b.n	8002778 <HAL_PCD_EP_Open+0xb8>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68f9      	ldr	r1, [r7, #12]
 8002768:	4618      	mov	r0, r3
 800276a:	f003 fbad 	bl	8005ec8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8002776:	7afb      	ldrb	r3, [r7, #11]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800278c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002790:	2b00      	cmp	r3, #0
 8002792:	da0b      	bge.n	80027ac <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	015b      	lsls	r3, r3, #5
 800279c:	3328      	adds	r3, #40	; 0x28
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2201      	movs	r2, #1
 80027a8:	705a      	strb	r2, [r3, #1]
 80027aa:	e00b      	b.n	80027c4 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027ac:	78fb      	ldrb	r3, [r7, #3]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	015b      	lsls	r3, r3, #5
 80027b4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	4413      	add	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80027c4:	78fb      	ldrb	r3, [r7, #3]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_PCD_EP_Close+0x5e>
 80027da:	2302      	movs	r3, #2
 80027dc:	e00e      	b.n	80027fc <HAL_PCD_EP_Close+0x7c>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68f9      	ldr	r1, [r7, #12]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f003 fe5b 	bl	80064a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	607a      	str	r2, [r7, #4]
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	460b      	mov	r3, r1
 8002812:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002814:	7afb      	ldrb	r3, [r7, #11]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	015b      	lsls	r3, r3, #5
 800281c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4413      	add	r3, r2
 8002824:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2200      	movs	r2, #0
 8002836:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	2200      	movs	r2, #0
 800283c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800283e:	7afb      	ldrb	r3, [r7, #11]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	b2da      	uxtb	r2, r3
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800284a:	7afb      	ldrb	r3, [r7, #11]
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	2b00      	cmp	r3, #0
 8002852:	d106      	bne.n	8002862 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6979      	ldr	r1, [r7, #20]
 800285a:	4618      	mov	r0, r3
 800285c:	f003 ffba 	bl	80067d4 <USB_EPStartXfer>
 8002860:	e005      	b.n	800286e <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6979      	ldr	r1, [r7, #20]
 8002868:	4618      	mov	r0, r3
 800286a:	f003 ffb3 	bl	80067d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002884:	78fb      	ldrb	r3, [r7, #3]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	330a      	adds	r3, #10
 800288e:	015b      	lsls	r3, r3, #5
 8002890:	4413      	add	r3, r2
 8002892:	3304      	adds	r3, #4
 8002894:	681b      	ldr	r3, [r3, #0]
}
 8002896:	4618      	mov	r0, r3
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b086      	sub	sp, #24
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	603b      	str	r3, [r7, #0]
 80028ae:	460b      	mov	r3, r1
 80028b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028b2:	7afb      	ldrb	r3, [r7, #11]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	015b      	lsls	r3, r3, #5
 80028ba:	3328      	adds	r3, #40	; 0x28
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4413      	add	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2200      	movs	r2, #0
 80028d2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2201      	movs	r2, #1
 80028d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028da:	7afb      	ldrb	r3, [r7, #11]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028e6:	7afb      	ldrb	r3, [r7, #11]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d106      	bne.n	80028fe <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6979      	ldr	r1, [r7, #20]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f003 ff6c 	bl	80067d4 <USB_EPStartXfer>
 80028fc:	e005      	b.n	800290a <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6979      	ldr	r1, [r7, #20]
 8002904:	4618      	mov	r0, r3
 8002906:	f003 ff65 	bl	80067d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002920:	78fb      	ldrb	r3, [r7, #3]
 8002922:	f003 0207 	and.w	r2, r3, #7
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	429a      	cmp	r2, r3
 800292c:	d901      	bls.n	8002932 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e046      	b.n	80029c0 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002932:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002936:	2b00      	cmp	r3, #0
 8002938:	da0b      	bge.n	8002952 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	015b      	lsls	r3, r3, #5
 8002942:	3328      	adds	r3, #40	; 0x28
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	4413      	add	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2201      	movs	r2, #1
 800294e:	705a      	strb	r2, [r3, #1]
 8002950:	e009      	b.n	8002966 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002952:	78fb      	ldrb	r3, [r7, #3]
 8002954:	015b      	lsls	r3, r3, #5
 8002956:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	4413      	add	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2201      	movs	r2, #1
 800296a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	b2da      	uxtb	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_PCD_EP_SetStall+0x72>
 8002982:	2302      	movs	r3, #2
 8002984:	e01c      	b.n	80029c0 <HAL_PCD_EP_SetStall+0xac>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68f9      	ldr	r1, [r7, #12]
 8002994:	4618      	mov	r0, r3
 8002996:	f004 f9d5 	bl	8006d44 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d108      	bne.n	80029b6 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80029ae:	4619      	mov	r1, r3
 80029b0:	4610      	mov	r0, r2
 80029b2:	f004 faed 	bl	8006f90 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	f003 020f 	and.w	r2, r3, #15
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d901      	bls.n	80029e6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e03a      	b.n	8002a5c <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	da0b      	bge.n	8002a06 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ee:	78fb      	ldrb	r3, [r7, #3]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	015b      	lsls	r3, r3, #5
 80029f6:	3328      	adds	r3, #40	; 0x28
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	4413      	add	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2201      	movs	r2, #1
 8002a02:	705a      	strb	r2, [r3, #1]
 8002a04:	e00b      	b.n	8002a1e <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a06:	78fb      	ldrb	r3, [r7, #3]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	015b      	lsls	r3, r3, #5
 8002a0e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	4413      	add	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a24:	78fb      	ldrb	r3, [r7, #3]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_PCD_EP_ClrStall+0x76>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e00e      	b.n	8002a5c <HAL_PCD_EP_ClrStall+0x94>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68f9      	ldr	r1, [r7, #12]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f004 f9bb 	bl	8006dc8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002a64:	b590      	push	{r4, r7, lr}
 8002a66:	b089      	sub	sp, #36	; 0x24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a6c:	e274      	b.n	8002f58 <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a76:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002a78:	8afb      	ldrh	r3, [r7, #22]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	f003 030f 	and.w	r3, r3, #15
 8002a80:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8002a82:	7d7b      	ldrb	r3, [r7, #21]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f040 813c 	bne.w	8002d02 <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002a8a:	8afb      	ldrh	r3, [r7, #22]
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d14f      	bne.n	8002b34 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa4:	b29c      	uxth	r4, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002aae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3328      	adds	r3, #40	; 0x28
 8002aba:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4413      	add	r3, r2
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6812      	ldr	r2, [r2, #0]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	695a      	ldr	r2, [r3, #20]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	441a      	add	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002af2:	2100      	movs	r1, #0
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f006 f8ef 	bl	8008cd8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 8228 	beq.w	8002f58 <PCD_EP_ISR_Handler+0x4f4>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f040 8223 	bne.w	8002f58 <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	b292      	uxth	r2, r2
 8002b26:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b32:	e211      	b.n	8002f58 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002b3a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002b44:	8a7b      	ldrh	r3, [r7, #18]
 8002b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d031      	beq.n	8002bb2 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	461a      	mov	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4413      	add	r3, r2
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	4413      	add	r3, r2
 8002b68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	f004 fa4e 	bl	800702a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	b29c      	uxth	r4, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002ba6:	b292      	uxth	r2, r2
 8002ba8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f006 f86a 	bl	8008c84 <HAL_PCD_SetupStageCallback>
 8002bb0:	e1d2      	b.n	8002f58 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002bb2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f280 81ce 	bge.w	8002f58 <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002bc8:	4013      	ands	r3, r2
 8002bca:	b29c      	uxth	r4, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002bd4:	b292      	uxth	r2, r2
 8002bd6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	4413      	add	r3, r2
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d019      	beq.n	8002c3c <PCD_EP_ISR_Handler+0x1d8>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d015      	beq.n	8002c3c <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6818      	ldr	r0, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6959      	ldr	r1, [r3, #20]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	f004 fa02 	bl	800702a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	695a      	ldr	r2, [r3, #20]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	441a      	add	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002c34:	2100      	movs	r1, #0
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f006 f836 	bl	8008ca8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	461c      	mov	r4, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	441c      	add	r4, r3
 8002c4e:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8002c52:	461c      	mov	r4, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10e      	bne.n	8002c7a <PCD_EP_ISR_Handler+0x216>
 8002c5c:	8823      	ldrh	r3, [r4, #0]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	8023      	strh	r3, [r4, #0]
 8002c68:	8823      	ldrh	r3, [r4, #0]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	8023      	strh	r3, [r4, #0]
 8002c78:	e02d      	b.n	8002cd6 <PCD_EP_ISR_Handler+0x272>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2b3e      	cmp	r3, #62	; 0x3e
 8002c80:	d812      	bhi.n	8002ca8 <PCD_EP_ISR_Handler+0x244>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	085b      	lsrs	r3, r3, #1
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <PCD_EP_ISR_Handler+0x238>
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	61bb      	str	r3, [r7, #24]
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	029b      	lsls	r3, r3, #10
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	8023      	strh	r3, [r4, #0]
 8002ca6:	e016      	b.n	8002cd6 <PCD_EP_ISR_Handler+0x272>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	61bb      	str	r3, [r7, #24]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d102      	bne.n	8002cc2 <PCD_EP_ISR_Handler+0x25e>
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	61bb      	str	r3, [r7, #24]
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	029b      	lsls	r3, r3, #10
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce6:	b29c      	uxth	r4, r3
 8002ce8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002cec:	b29c      	uxth	r4, r3
 8002cee:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002cf2:	b29c      	uxth	r4, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4b9e      	ldr	r3, [pc, #632]	; (8002f74 <PCD_EP_ISR_Handler+0x510>)
 8002cfa:	4323      	orrs	r3, r4
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	8013      	strh	r3, [r2, #0]
 8002d00:	e12a      	b.n	8002f58 <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	7d7b      	ldrb	r3, [r7, #21]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f280 80cb 	bge.w	8002eb2 <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	461a      	mov	r2, r3
 8002d22:	7d7b      	ldrb	r3, [r7, #21]
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	881b      	ldrh	r3, [r3, #0]
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d30:	4013      	ands	r3, r2
 8002d32:	b29c      	uxth	r4, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	7d7b      	ldrb	r3, [r7, #21]
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002d44:	b292      	uxth	r2, r2
 8002d46:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002d48:	7d7b      	ldrb	r3, [r7, #21]
 8002d4a:	015b      	lsls	r3, r3, #5
 8002d4c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	4413      	add	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	7b1b      	ldrb	r3, [r3, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d11f      	bne.n	8002d9e <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4413      	add	r3, r2
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6812      	ldr	r2, [r2, #0]
 8002d76:	4413      	add	r3, r2
 8002d78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d82:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002d84:	8bfb      	ldrh	r3, [r7, #30]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d06e      	beq.n	8002e68 <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6959      	ldr	r1, [r3, #20]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	88da      	ldrh	r2, [r3, #6]
 8002d96:	8bfb      	ldrh	r3, [r7, #30]
 8002d98:	f004 f947 	bl	800702a <USB_ReadPMA>
 8002d9c:	e064      	b.n	8002e68 <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db8:	b29c      	uxth	r4, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	441a      	add	r2, r3
 8002dc8:	4b6b      	ldr	r3, [pc, #428]	; (8002f78 <PCD_EP_ISR_Handler+0x514>)
 8002dca:	4323      	orrs	r3, r4
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d01f      	beq.n	8002e2a <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	461a      	mov	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6812      	ldr	r2, [r2, #0]
 8002e02:	4413      	add	r3, r2
 8002e04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e0e:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002e10:	8bfb      	ldrh	r3, [r7, #30]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d028      	beq.n	8002e68 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6959      	ldr	r1, [r3, #20]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	891a      	ldrh	r2, [r3, #8]
 8002e22:	8bfb      	ldrh	r3, [r7, #30]
 8002e24:	f004 f901 	bl	800702a <USB_ReadPMA>
 8002e28:	e01e      	b.n	8002e68 <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6812      	ldr	r2, [r2, #0]
 8002e42:	4413      	add	r3, r2
 8002e44:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e4e:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002e50:	8bfb      	ldrh	r3, [r7, #30]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d008      	beq.n	8002e68 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6818      	ldr	r0, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6959      	ldr	r1, [r3, #20]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	895a      	ldrh	r2, [r3, #10]
 8002e62:	8bfb      	ldrh	r3, [r7, #30]
 8002e64:	f004 f8e1 	bl	800702a <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	69da      	ldr	r2, [r3, #28]
 8002e6c:	8bfb      	ldrh	r3, [r7, #30]
 8002e6e:	441a      	add	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	695a      	ldr	r2, [r3, #20]
 8002e78:	8bfb      	ldrh	r3, [r7, #30]
 8002e7a:	441a      	add	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d004      	beq.n	8002e92 <PCD_EP_ISR_Handler+0x42e>
 8002e88:	8bfa      	ldrh	r2, [r7, #30]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d206      	bcs.n	8002ea0 <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	4619      	mov	r1, r3
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f005 ff05 	bl	8008ca8 <HAL_PCD_DataOutStageCallback>
 8002e9e:	e008      	b.n	8002eb2 <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	7819      	ldrb	r1, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	695a      	ldr	r2, [r3, #20]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff fca9 	bl	8002804 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002eb2:	8a7b      	ldrh	r3, [r7, #18]
 8002eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d04d      	beq.n	8002f58 <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002ebc:	7d7b      	ldrb	r3, [r7, #21]
 8002ebe:	015b      	lsls	r3, r3, #5
 8002ec0:	3328      	adds	r3, #40	; 0x28
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	7d7b      	ldrb	r3, [r7, #21]
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee0:	b29c      	uxth	r4, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	7d7b      	ldrb	r3, [r7, #21]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	441a      	add	r2, r3
 8002eee:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	461a      	mov	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6812      	ldr	r2, [r2, #0]
 8002f12:	4413      	add	r3, r2
 8002f14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	695a      	ldr	r2, [r3, #20]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	441a      	add	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d106      	bne.n	8002f46 <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f005 feca 	bl	8008cd8 <HAL_PCD_DataInStageCallback>
 8002f44:	e008      	b.n	8002f58 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	7819      	ldrb	r1, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff fca5 	bl	80028a2 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	b21b      	sxth	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f6ff ad82 	blt.w	8002a6e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3724      	adds	r7, #36	; 0x24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd90      	pop	{r4, r7, pc}
 8002f74:	ffff8080 	.word	0xffff8080
 8002f78:	ffff80c0 	.word	0xffff80c0

08002f7c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	607b      	str	r3, [r7, #4]
 8002f86:	460b      	mov	r3, r1
 8002f88:	817b      	strh	r3, [r7, #10]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002f8e:	897b      	ldrh	r3, [r7, #10]
 8002f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d008      	beq.n	8002fac <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f9a:	897b      	ldrh	r3, [r7, #10]
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	015b      	lsls	r3, r3, #5
 8002fa2:	3328      	adds	r3, #40	; 0x28
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	e006      	b.n	8002fba <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fac:	897b      	ldrh	r3, [r7, #10]
 8002fae:	015b      	lsls	r3, r3, #5
 8002fb0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002fba:	893b      	ldrh	r3, [r7, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d107      	bne.n	8002fd0 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	80da      	strh	r2, [r3, #6]
 8002fce:	e00b      	b.n	8002fe8 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	0c1b      	lsrs	r3, r3, #16
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	371c      	adds	r7, #28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b085      	sub	sp, #20
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800301a:	b29b      	uxth	r3, r3
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800302e:	b29b      	uxth	r3, r3
 8003030:	f043 0302 	orr.w	r3, r3, #2
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
	...

0800304c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003050:	4b04      	ldr	r3, [pc, #16]	; (8003064 <HAL_PWREx_GetVoltageRange+0x18>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003058:	4618      	mov	r0, r3
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40007000 	.word	0x40007000

08003068 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003076:	d130      	bne.n	80030da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003078:	4b23      	ldr	r3, [pc, #140]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003084:	d038      	beq.n	80030f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003086:	4b20      	ldr	r3, [pc, #128]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800308e:	4a1e      	ldr	r2, [pc, #120]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003090:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003094:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003096:	4b1d      	ldr	r3, [pc, #116]	; (800310c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2232      	movs	r2, #50	; 0x32
 800309c:	fb02 f303 	mul.w	r3, r2, r3
 80030a0:	4a1b      	ldr	r2, [pc, #108]	; (8003110 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	0c9b      	lsrs	r3, r3, #18
 80030a8:	3301      	adds	r3, #1
 80030aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030ac:	e002      	b.n	80030b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	3b01      	subs	r3, #1
 80030b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030b4:	4b14      	ldr	r3, [pc, #80]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c0:	d102      	bne.n	80030c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1f2      	bne.n	80030ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030c8:	4b0f      	ldr	r3, [pc, #60]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d4:	d110      	bne.n	80030f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e00f      	b.n	80030fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80030da:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e6:	d007      	beq.n	80030f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030e8:	4b07      	ldr	r3, [pc, #28]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030f0:	4a05      	ldr	r2, [pc, #20]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40007000 	.word	0x40007000
 800310c:	20000000 	.word	0x20000000
 8003110:	431bde83 	.word	0x431bde83

08003114 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003118:	4b05      	ldr	r3, [pc, #20]	; (8003130 <HAL_PWREx_EnableVddUSB+0x1c>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	4a04      	ldr	r2, [pc, #16]	; (8003130 <HAL_PWREx_EnableVddUSB+0x1c>)
 800311e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003122:	6053      	str	r3, [r2, #4]
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40007000 	.word	0x40007000

08003134 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08a      	sub	sp, #40	; 0x28
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d102      	bne.n	8003148 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	f000 bc56 	b.w	80039f4 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003148:	4ba1      	ldr	r3, [pc, #644]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 030c 	and.w	r3, r3, #12
 8003150:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003152:	4b9f      	ldr	r3, [pc, #636]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0310 	and.w	r3, r3, #16
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 80e6 	beq.w	8003336 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d007      	beq.n	8003180 <HAL_RCC_OscConfig+0x4c>
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	2b0c      	cmp	r3, #12
 8003174:	f040 808d 	bne.w	8003292 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	2b01      	cmp	r3, #1
 800317c:	f040 8089 	bne.w	8003292 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003180:	4b93      	ldr	r3, [pc, #588]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d006      	beq.n	800319a <HAL_RCC_OscConfig+0x66>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d102      	bne.n	800319a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	f000 bc2d 	b.w	80039f4 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800319e:	4b8c      	ldr	r3, [pc, #560]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d004      	beq.n	80031b4 <HAL_RCC_OscConfig+0x80>
 80031aa:	4b89      	ldr	r3, [pc, #548]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031b2:	e005      	b.n	80031c0 <HAL_RCC_OscConfig+0x8c>
 80031b4:	4b86      	ldr	r3, [pc, #536]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 80031b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ba:	091b      	lsrs	r3, r3, #4
 80031bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d224      	bcs.n	800320e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 fdbd 	bl	8003d48 <RCC_SetFlashLatencyFromMSIRange>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	f000 bc0d 	b.w	80039f4 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031da:	4b7d      	ldr	r3, [pc, #500]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a7c      	ldr	r2, [pc, #496]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 80031e0:	f043 0308 	orr.w	r3, r3, #8
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	4b7a      	ldr	r3, [pc, #488]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	4977      	ldr	r1, [pc, #476]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031f8:	4b75      	ldr	r3, [pc, #468]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	021b      	lsls	r3, r3, #8
 8003206:	4972      	ldr	r1, [pc, #456]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 8003208:	4313      	orrs	r3, r2
 800320a:	604b      	str	r3, [r1, #4]
 800320c:	e025      	b.n	800325a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800320e:	4b70      	ldr	r3, [pc, #448]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a6f      	ldr	r2, [pc, #444]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 8003214:	f043 0308 	orr.w	r3, r3, #8
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	4b6d      	ldr	r3, [pc, #436]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	496a      	ldr	r1, [pc, #424]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 8003228:	4313      	orrs	r3, r2
 800322a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800322c:	4b68      	ldr	r3, [pc, #416]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	021b      	lsls	r3, r3, #8
 800323a:	4965      	ldr	r1, [pc, #404]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 800323c:	4313      	orrs	r3, r2
 800323e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	4618      	mov	r0, r3
 800324c:	f000 fd7c 	bl	8003d48 <RCC_SetFlashLatencyFromMSIRange>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e3cc      	b.n	80039f4 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800325a:	f000 fcb3 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 800325e:	4601      	mov	r1, r0
 8003260:	4b5b      	ldr	r3, [pc, #364]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	091b      	lsrs	r3, r3, #4
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	4a5a      	ldr	r2, [pc, #360]	; (80033d4 <HAL_RCC_OscConfig+0x2a0>)
 800326c:	5cd3      	ldrb	r3, [r2, r3]
 800326e:	f003 031f 	and.w	r3, r3, #31
 8003272:	fa21 f303 	lsr.w	r3, r1, r3
 8003276:	4a58      	ldr	r2, [pc, #352]	; (80033d8 <HAL_RCC_OscConfig+0x2a4>)
 8003278:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800327a:	4b58      	ldr	r3, [pc, #352]	; (80033dc <HAL_RCC_OscConfig+0x2a8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7fe faf4 	bl	800186c <HAL_InitTick>
 8003284:	4603      	mov	r3, r0
 8003286:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003288:	7dfb      	ldrb	r3, [r7, #23]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d052      	beq.n	8003334 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800328e:	7dfb      	ldrb	r3, [r7, #23]
 8003290:	e3b0      	b.n	80039f4 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d032      	beq.n	8003300 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800329a:	4b4d      	ldr	r3, [pc, #308]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a4c      	ldr	r2, [pc, #304]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032a6:	f7fe fb2d 	bl	8001904 <HAL_GetTick>
 80032aa:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032ae:	f7fe fb29 	bl	8001904 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e399      	b.n	80039f4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032c0:	4b43      	ldr	r3, [pc, #268]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032cc:	4b40      	ldr	r3, [pc, #256]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a3f      	ldr	r2, [pc, #252]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 80032d2:	f043 0308 	orr.w	r3, r3, #8
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	4b3d      	ldr	r3, [pc, #244]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	493a      	ldr	r1, [pc, #232]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032ea:	4b39      	ldr	r3, [pc, #228]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	021b      	lsls	r3, r3, #8
 80032f8:	4935      	ldr	r1, [pc, #212]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	604b      	str	r3, [r1, #4]
 80032fe:	e01a      	b.n	8003336 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003300:	4b33      	ldr	r3, [pc, #204]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a32      	ldr	r2, [pc, #200]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 8003306:	f023 0301 	bic.w	r3, r3, #1
 800330a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800330c:	f7fe fafa 	bl	8001904 <HAL_GetTick>
 8003310:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003314:	f7fe faf6 	bl	8001904 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e366      	b.n	80039f4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003326:	4b2a      	ldr	r3, [pc, #168]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x1e0>
 8003332:	e000      	b.n	8003336 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003334:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d073      	beq.n	800342a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	2b08      	cmp	r3, #8
 8003346:	d005      	beq.n	8003354 <HAL_RCC_OscConfig+0x220>
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	2b0c      	cmp	r3, #12
 800334c:	d10e      	bne.n	800336c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	2b03      	cmp	r3, #3
 8003352:	d10b      	bne.n	800336c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003354:	4b1e      	ldr	r3, [pc, #120]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d063      	beq.n	8003428 <HAL_RCC_OscConfig+0x2f4>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d15f      	bne.n	8003428 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e343      	b.n	80039f4 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003374:	d106      	bne.n	8003384 <HAL_RCC_OscConfig+0x250>
 8003376:	4b16      	ldr	r3, [pc, #88]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a15      	ldr	r2, [pc, #84]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 800337c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	e01d      	b.n	80033c0 <HAL_RCC_OscConfig+0x28c>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800338c:	d10c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x274>
 800338e:	4b10      	ldr	r3, [pc, #64]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a0f      	ldr	r2, [pc, #60]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 8003394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	4b0d      	ldr	r3, [pc, #52]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a0c      	ldr	r2, [pc, #48]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 80033a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	e00b      	b.n	80033c0 <HAL_RCC_OscConfig+0x28c>
 80033a8:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a08      	ldr	r2, [pc, #32]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 80033ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a05      	ldr	r2, [pc, #20]	; (80033d0 <HAL_RCC_OscConfig+0x29c>)
 80033ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d01b      	beq.n	8003400 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c8:	f7fe fa9c 	bl	8001904 <HAL_GetTick>
 80033cc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ce:	e010      	b.n	80033f2 <HAL_RCC_OscConfig+0x2be>
 80033d0:	40021000 	.word	0x40021000
 80033d4:	0800940c 	.word	0x0800940c
 80033d8:	20000000 	.word	0x20000000
 80033dc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e0:	f7fe fa90 	bl	8001904 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b64      	cmp	r3, #100	; 0x64
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e300      	b.n	80039f4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033f2:	4ba0      	ldr	r3, [pc, #640]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x2ac>
 80033fe:	e014      	b.n	800342a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7fe fa80 	bl	8001904 <HAL_GetTick>
 8003404:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003408:	f7fe fa7c 	bl	8001904 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b64      	cmp	r3, #100	; 0x64
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e2ec      	b.n	80039f4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800341a:	4b96      	ldr	r3, [pc, #600]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0x2d4>
 8003426:	e000      	b.n	800342a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d060      	beq.n	80034f8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	2b04      	cmp	r3, #4
 800343a:	d005      	beq.n	8003448 <HAL_RCC_OscConfig+0x314>
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	2b0c      	cmp	r3, #12
 8003440:	d119      	bne.n	8003476 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	2b02      	cmp	r3, #2
 8003446:	d116      	bne.n	8003476 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003448:	4b8a      	ldr	r3, [pc, #552]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003450:	2b00      	cmp	r3, #0
 8003452:	d005      	beq.n	8003460 <HAL_RCC_OscConfig+0x32c>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e2c9      	b.n	80039f4 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003460:	4b84      	ldr	r3, [pc, #528]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	061b      	lsls	r3, r3, #24
 800346e:	4981      	ldr	r1, [pc, #516]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 8003470:	4313      	orrs	r3, r2
 8003472:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003474:	e040      	b.n	80034f8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d023      	beq.n	80034c6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800347e:	4b7d      	ldr	r3, [pc, #500]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a7c      	ldr	r2, [pc, #496]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 8003484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348a:	f7fe fa3b 	bl	8001904 <HAL_GetTick>
 800348e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003492:	f7fe fa37 	bl	8001904 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e2a7      	b.n	80039f4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034a4:	4b73      	ldr	r3, [pc, #460]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0f0      	beq.n	8003492 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b0:	4b70      	ldr	r3, [pc, #448]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	061b      	lsls	r3, r3, #24
 80034be:	496d      	ldr	r1, [pc, #436]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	604b      	str	r3, [r1, #4]
 80034c4:	e018      	b.n	80034f8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034c6:	4b6b      	ldr	r3, [pc, #428]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a6a      	ldr	r2, [pc, #424]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 80034cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d2:	f7fe fa17 	bl	8001904 <HAL_GetTick>
 80034d6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034da:	f7fe fa13 	bl	8001904 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e283      	b.n	80039f4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034ec:	4b61      	ldr	r3, [pc, #388]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1f0      	bne.n	80034da <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0308 	and.w	r3, r3, #8
 8003500:	2b00      	cmp	r3, #0
 8003502:	d07f      	beq.n	8003604 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d05f      	beq.n	80035cc <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800350c:	4b59      	ldr	r3, [pc, #356]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 800350e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003512:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699a      	ldr	r2, [r3, #24]
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	f003 0310 	and.w	r3, r3, #16
 800351e:	429a      	cmp	r2, r3
 8003520:	d037      	beq.n	8003592 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d006      	beq.n	800353a <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e25c      	b.n	80039f4 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	d01b      	beq.n	800357c <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8003544:	4b4b      	ldr	r3, [pc, #300]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 8003546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800354a:	4a4a      	ldr	r2, [pc, #296]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 800354c:	f023 0301 	bic.w	r3, r3, #1
 8003550:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003554:	f7fe f9d6 	bl	8001904 <HAL_GetTick>
 8003558:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800355c:	f7fe f9d2 	bl	8001904 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b11      	cmp	r3, #17
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e242      	b.n	80039f4 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800356e:	4b41      	ldr	r3, [pc, #260]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 8003570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1ef      	bne.n	800355c <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800357c:	4b3d      	ldr	r3, [pc, #244]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 800357e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003582:	f023 0210 	bic.w	r2, r3, #16
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	493a      	ldr	r1, [pc, #232]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003592:	4b38      	ldr	r3, [pc, #224]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 8003594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003598:	4a36      	ldr	r2, [pc, #216]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a2:	f7fe f9af 	bl	8001904 <HAL_GetTick>
 80035a6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035aa:	f7fe f9ab 	bl	8001904 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b11      	cmp	r3, #17
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e21b      	b.n	80039f4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035bc:	4b2d      	ldr	r3, [pc, #180]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 80035be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0ef      	beq.n	80035aa <HAL_RCC_OscConfig+0x476>
 80035ca:	e01b      	b.n	8003604 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035cc:	4b29      	ldr	r3, [pc, #164]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 80035ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d2:	4a28      	ldr	r2, [pc, #160]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 80035d4:	f023 0301 	bic.w	r3, r3, #1
 80035d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035dc:	f7fe f992 	bl	8001904 <HAL_GetTick>
 80035e0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e4:	f7fe f98e 	bl	8001904 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b11      	cmp	r3, #17
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e1fe      	b.n	80039f4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035f6:	4b1f      	ldr	r3, [pc, #124]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 80035f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1ef      	bne.n	80035e4 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 80c1 	beq.w	8003794 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003612:	2300      	movs	r3, #0
 8003614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003618:	4b16      	ldr	r3, [pc, #88]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 800361a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10e      	bne.n	8003642 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003624:	4b13      	ldr	r3, [pc, #76]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 8003626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003628:	4a12      	ldr	r2, [pc, #72]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 800362a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800362e:	6593      	str	r3, [r2, #88]	; 0x58
 8003630:	4b10      	ldr	r3, [pc, #64]	; (8003674 <HAL_RCC_OscConfig+0x540>)
 8003632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800363c:	2301      	movs	r3, #1
 800363e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003642:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <HAL_RCC_OscConfig+0x544>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364a:	2b00      	cmp	r3, #0
 800364c:	d11c      	bne.n	8003688 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800364e:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <HAL_RCC_OscConfig+0x544>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a09      	ldr	r2, [pc, #36]	; (8003678 <HAL_RCC_OscConfig+0x544>)
 8003654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800365a:	f7fe f953 	bl	8001904 <HAL_GetTick>
 800365e:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003660:	e00c      	b.n	800367c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003662:	f7fe f94f 	bl	8001904 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d905      	bls.n	800367c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e1bf      	b.n	80039f4 <HAL_RCC_OscConfig+0x8c0>
 8003674:	40021000 	.word	0x40021000
 8003678:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800367c:	4bb1      	ldr	r3, [pc, #708]	; (8003944 <HAL_RCC_OscConfig+0x810>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0ec      	beq.n	8003662 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d02c      	beq.n	80036ee <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003694:	4bac      	ldr	r3, [pc, #688]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a6:	49a8      	ldr	r1, [pc, #672]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d010      	beq.n	80036dc <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80036ba:	4ba3      	ldr	r3, [pc, #652]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 80036bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c0:	4aa1      	ldr	r2, [pc, #644]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 80036c2:	f043 0304 	orr.w	r3, r3, #4
 80036c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80036ca:	4b9f      	ldr	r3, [pc, #636]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 80036cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d0:	4a9d      	ldr	r2, [pc, #628]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 80036d2:	f043 0301 	orr.w	r3, r3, #1
 80036d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036da:	e018      	b.n	800370e <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80036dc:	4b9a      	ldr	r3, [pc, #616]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 80036de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e2:	4a99      	ldr	r2, [pc, #612]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 80036e4:	f043 0301 	orr.w	r3, r3, #1
 80036e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036ec:	e00f      	b.n	800370e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80036ee:	4b96      	ldr	r3, [pc, #600]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 80036f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f4:	4a94      	ldr	r2, [pc, #592]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 80036f6:	f023 0301 	bic.w	r3, r3, #1
 80036fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80036fe:	4b92      	ldr	r3, [pc, #584]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 8003700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003704:	4a90      	ldr	r2, [pc, #576]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 8003706:	f023 0304 	bic.w	r3, r3, #4
 800370a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d016      	beq.n	8003744 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003716:	f7fe f8f5 	bl	8001904 <HAL_GetTick>
 800371a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800371c:	e00a      	b.n	8003734 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371e:	f7fe f8f1 	bl	8001904 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	f241 3288 	movw	r2, #5000	; 0x1388
 800372c:	4293      	cmp	r3, r2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e15f      	b.n	80039f4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003734:	4b84      	ldr	r3, [pc, #528]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0ed      	beq.n	800371e <HAL_RCC_OscConfig+0x5ea>
 8003742:	e01d      	b.n	8003780 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003744:	f7fe f8de 	bl	8001904 <HAL_GetTick>
 8003748:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800374a:	e00a      	b.n	8003762 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374c:	f7fe f8da 	bl	8001904 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	f241 3288 	movw	r2, #5000	; 0x1388
 800375a:	4293      	cmp	r3, r2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e148      	b.n	80039f4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003762:	4b79      	ldr	r3, [pc, #484]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 8003764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1ed      	bne.n	800374c <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003770:	4b75      	ldr	r3, [pc, #468]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 8003772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003776:	4a74      	ldr	r2, [pc, #464]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 8003778:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800377c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003784:	2b01      	cmp	r3, #1
 8003786:	d105      	bne.n	8003794 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003788:	4b6f      	ldr	r3, [pc, #444]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 800378a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378c:	4a6e      	ldr	r2, [pc, #440]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 800378e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003792:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b00      	cmp	r3, #0
 800379e:	d03c      	beq.n	800381a <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d01c      	beq.n	80037e2 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037a8:	4b67      	ldr	r3, [pc, #412]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 80037aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037ae:	4a66      	ldr	r2, [pc, #408]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 80037b0:	f043 0301 	orr.w	r3, r3, #1
 80037b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b8:	f7fe f8a4 	bl	8001904 <HAL_GetTick>
 80037bc:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037c0:	f7fe f8a0 	bl	8001904 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e110      	b.n	80039f4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037d2:	4b5d      	ldr	r3, [pc, #372]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 80037d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0ef      	beq.n	80037c0 <HAL_RCC_OscConfig+0x68c>
 80037e0:	e01b      	b.n	800381a <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037e2:	4b59      	ldr	r3, [pc, #356]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 80037e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037e8:	4a57      	ldr	r2, [pc, #348]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 80037ea:	f023 0301 	bic.w	r3, r3, #1
 80037ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f2:	f7fe f887 	bl	8001904 <HAL_GetTick>
 80037f6:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037fa:	f7fe f883 	bl	8001904 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e0f3      	b.n	80039f4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800380c:	4b4e      	ldr	r3, [pc, #312]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 800380e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1ef      	bne.n	80037fa <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 80e7 	beq.w	80039f2 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	2b02      	cmp	r3, #2
 800382a:	f040 80b7 	bne.w	800399c <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800382e:	4b46      	ldr	r3, [pc, #280]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f003 0203 	and.w	r2, r3, #3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	429a      	cmp	r2, r3
 8003840:	d124      	bne.n	800388c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384c:	3b01      	subs	r3, #1
 800384e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003850:	429a      	cmp	r2, r3
 8003852:	d11b      	bne.n	800388c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003860:	429a      	cmp	r2, r3
 8003862:	d113      	bne.n	800388c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800386e:	085b      	lsrs	r3, r3, #1
 8003870:	3b01      	subs	r3, #1
 8003872:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003874:	429a      	cmp	r2, r3
 8003876:	d109      	bne.n	800388c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	085b      	lsrs	r3, r3, #1
 8003884:	3b01      	subs	r3, #1
 8003886:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003888:	429a      	cmp	r2, r3
 800388a:	d061      	beq.n	8003950 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	2b0c      	cmp	r3, #12
 8003890:	d056      	beq.n	8003940 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003892:	4b2d      	ldr	r3, [pc, #180]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a2c      	ldr	r2, [pc, #176]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 8003898:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800389c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800389e:	f7fe f831 	bl	8001904 <HAL_GetTick>
 80038a2:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a6:	f7fe f82d 	bl	8001904 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e09d      	b.n	80039f4 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038b8:	4b23      	ldr	r3, [pc, #140]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1f0      	bne.n	80038a6 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038c4:	4b20      	ldr	r3, [pc, #128]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	4b20      	ldr	r3, [pc, #128]	; (800394c <HAL_RCC_OscConfig+0x818>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038d4:	3a01      	subs	r2, #1
 80038d6:	0112      	lsls	r2, r2, #4
 80038d8:	4311      	orrs	r1, r2
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038de:	0212      	lsls	r2, r2, #8
 80038e0:	4311      	orrs	r1, r2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038e6:	0852      	lsrs	r2, r2, #1
 80038e8:	3a01      	subs	r2, #1
 80038ea:	0552      	lsls	r2, r2, #21
 80038ec:	4311      	orrs	r1, r2
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80038f2:	0852      	lsrs	r2, r2, #1
 80038f4:	3a01      	subs	r2, #1
 80038f6:	0652      	lsls	r2, r2, #25
 80038f8:	430a      	orrs	r2, r1
 80038fa:	4913      	ldr	r1, [pc, #76]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003900:	4b11      	ldr	r3, [pc, #68]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a10      	ldr	r2, [pc, #64]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 8003906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800390a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800390c:	4b0e      	ldr	r3, [pc, #56]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	4a0d      	ldr	r2, [pc, #52]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 8003912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003916:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003918:	f7fd fff4 	bl	8001904 <HAL_GetTick>
 800391c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003920:	f7fd fff0 	bl	8001904 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e060      	b.n	80039f4 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003932:	4b05      	ldr	r3, [pc, #20]	; (8003948 <HAL_RCC_OscConfig+0x814>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0f0      	beq.n	8003920 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800393e:	e058      	b.n	80039f2 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e057      	b.n	80039f4 <HAL_RCC_OscConfig+0x8c0>
 8003944:	40007000 	.word	0x40007000
 8003948:	40021000 	.word	0x40021000
 800394c:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003950:	4b2a      	ldr	r3, [pc, #168]	; (80039fc <HAL_RCC_OscConfig+0x8c8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d14a      	bne.n	80039f2 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800395c:	4b27      	ldr	r3, [pc, #156]	; (80039fc <HAL_RCC_OscConfig+0x8c8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a26      	ldr	r2, [pc, #152]	; (80039fc <HAL_RCC_OscConfig+0x8c8>)
 8003962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003966:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003968:	4b24      	ldr	r3, [pc, #144]	; (80039fc <HAL_RCC_OscConfig+0x8c8>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	4a23      	ldr	r2, [pc, #140]	; (80039fc <HAL_RCC_OscConfig+0x8c8>)
 800396e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003972:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003974:	f7fd ffc6 	bl	8001904 <HAL_GetTick>
 8003978:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800397c:	f7fd ffc2 	bl	8001904 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e032      	b.n	80039f4 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800398e:	4b1b      	ldr	r3, [pc, #108]	; (80039fc <HAL_RCC_OscConfig+0x8c8>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0f0      	beq.n	800397c <HAL_RCC_OscConfig+0x848>
 800399a:	e02a      	b.n	80039f2 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	2b0c      	cmp	r3, #12
 80039a0:	d025      	beq.n	80039ee <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a2:	4b16      	ldr	r3, [pc, #88]	; (80039fc <HAL_RCC_OscConfig+0x8c8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a15      	ldr	r2, [pc, #84]	; (80039fc <HAL_RCC_OscConfig+0x8c8>)
 80039a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ac:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80039ae:	4b13      	ldr	r3, [pc, #76]	; (80039fc <HAL_RCC_OscConfig+0x8c8>)
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	4a12      	ldr	r2, [pc, #72]	; (80039fc <HAL_RCC_OscConfig+0x8c8>)
 80039b4:	f023 0303 	bic.w	r3, r3, #3
 80039b8:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80039ba:	4b10      	ldr	r3, [pc, #64]	; (80039fc <HAL_RCC_OscConfig+0x8c8>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	4a0f      	ldr	r2, [pc, #60]	; (80039fc <HAL_RCC_OscConfig+0x8c8>)
 80039c0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80039c4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c6:	f7fd ff9d 	bl	8001904 <HAL_GetTick>
 80039ca:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ce:	f7fd ff99 	bl	8001904 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e009      	b.n	80039f4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039e0:	4b06      	ldr	r3, [pc, #24]	; (80039fc <HAL_RCC_OscConfig+0x8c8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1f0      	bne.n	80039ce <HAL_RCC_OscConfig+0x89a>
 80039ec:	e001      	b.n	80039f2 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e000      	b.n	80039f4 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3728      	adds	r7, #40	; 0x28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40021000 	.word	0x40021000

08003a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e0c8      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a14:	4b66      	ldr	r3, [pc, #408]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b0>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d910      	bls.n	8003a44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a22:	4b63      	ldr	r3, [pc, #396]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f023 0207 	bic.w	r2, r3, #7
 8003a2a:	4961      	ldr	r1, [pc, #388]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b0>)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a32:	4b5f      	ldr	r3, [pc, #380]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d001      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0b0      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d04c      	beq.n	8003aea <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d107      	bne.n	8003a68 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a58:	4b56      	ldr	r3, [pc, #344]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d121      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e09e      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d107      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a70:	4b50      	ldr	r3, [pc, #320]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d115      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e092      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d107      	bne.n	8003a98 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a88:	4b4a      	ldr	r3, [pc, #296]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d109      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e086      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a98:	4b46      	ldr	r3, [pc, #280]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e07e      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003aa8:	4b42      	ldr	r3, [pc, #264]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f023 0203 	bic.w	r2, r3, #3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	493f      	ldr	r1, [pc, #252]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aba:	f7fd ff23 	bl	8001904 <HAL_GetTick>
 8003abe:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac0:	e00a      	b.n	8003ad8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac2:	f7fd ff1f 	bl	8001904 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e066      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad8:	4b36      	ldr	r3, [pc, #216]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 020c 	and.w	r2, r3, #12
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d1eb      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d008      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af6:	4b2f      	ldr	r3, [pc, #188]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	492c      	ldr	r1, [pc, #176]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b08:	4b29      	ldr	r3, [pc, #164]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b0>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d210      	bcs.n	8003b38 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b16:	4b26      	ldr	r3, [pc, #152]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b0>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 0207 	bic.w	r2, r3, #7
 8003b1e:	4924      	ldr	r1, [pc, #144]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b0>)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b26:	4b22      	ldr	r3, [pc, #136]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d001      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e036      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b44:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4918      	ldr	r1, [pc, #96]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d009      	beq.n	8003b76 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b62:	4b14      	ldr	r3, [pc, #80]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	4910      	ldr	r1, [pc, #64]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b76:	f000 f825 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 8003b7a:	4601      	mov	r1, r0
 8003b7c:	4b0d      	ldr	r3, [pc, #52]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	4a0c      	ldr	r2, [pc, #48]	; (8003bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b88:	5cd3      	ldrb	r3, [r2, r3]
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	fa21 f303 	lsr.w	r3, r1, r3
 8003b92:	4a0a      	ldr	r2, [pc, #40]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b96:	4b0a      	ldr	r3, [pc, #40]	; (8003bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fd fe66 	bl	800186c <HAL_InitTick>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ba4:	7afb      	ldrb	r3, [r7, #11]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40022000 	.word	0x40022000
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	0800940c 	.word	0x0800940c
 8003bbc:	20000000 	.word	0x20000000
 8003bc0:	20000004 	.word	0x20000004

08003bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b089      	sub	sp, #36	; 0x24
 8003bc8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bd2:	4b3d      	ldr	r3, [pc, #244]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 030c 	and.w	r3, r3, #12
 8003bda:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bdc:	4b3a      	ldr	r3, [pc, #232]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x34>
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	2b0c      	cmp	r3, #12
 8003bf0:	d121      	bne.n	8003c36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d11e      	bne.n	8003c36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bf8:	4b33      	ldr	r3, [pc, #204]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d107      	bne.n	8003c14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c04:	4b30      	ldr	r3, [pc, #192]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c0a:	0a1b      	lsrs	r3, r3, #8
 8003c0c:	f003 030f 	and.w	r3, r3, #15
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	e005      	b.n	8003c20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c14:	4b2c      	ldr	r3, [pc, #176]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	091b      	lsrs	r3, r3, #4
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c20:	4a2a      	ldr	r2, [pc, #168]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10d      	bne.n	8003c4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c34:	e00a      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d102      	bne.n	8003c42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c3c:	4b24      	ldr	r3, [pc, #144]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c3e:	61bb      	str	r3, [r7, #24]
 8003c40:	e004      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d101      	bne.n	8003c4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c48:	4b22      	ldr	r3, [pc, #136]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	2b0c      	cmp	r3, #12
 8003c50:	d133      	bne.n	8003cba <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c52:	4b1d      	ldr	r3, [pc, #116]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d002      	beq.n	8003c68 <HAL_RCC_GetSysClockFreq+0xa4>
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d003      	beq.n	8003c6e <HAL_RCC_GetSysClockFreq+0xaa>
 8003c66:	e005      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c68:	4b19      	ldr	r3, [pc, #100]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c6a:	617b      	str	r3, [r7, #20]
      break;
 8003c6c:	e005      	b.n	8003c7a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c6e:	4b19      	ldr	r3, [pc, #100]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c70:	617b      	str	r3, [r7, #20]
      break;
 8003c72:	e002      	b.n	8003c7a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	617b      	str	r3, [r7, #20]
      break;
 8003c78:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c7a:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	091b      	lsrs	r3, r3, #4
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	3301      	adds	r3, #1
 8003c86:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c88:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	0a1b      	lsrs	r3, r3, #8
 8003c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	fb02 f203 	mul.w	r2, r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ca0:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	0e5b      	lsrs	r3, r3, #25
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	3301      	adds	r3, #1
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003cba:	69bb      	ldr	r3, [r7, #24]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3724      	adds	r7, #36	; 0x24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	08009424 	.word	0x08009424
 8003cd0:	00f42400 	.word	0x00f42400
 8003cd4:	007a1200 	.word	0x007a1200

08003cd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cdc:	4b03      	ldr	r3, [pc, #12]	; (8003cec <HAL_RCC_GetHCLKFreq+0x14>)
 8003cde:	681b      	ldr	r3, [r3, #0]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	20000000 	.word	0x20000000

08003cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cf4:	f7ff fff0 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003cf8:	4601      	mov	r1, r0
 8003cfa:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	0a1b      	lsrs	r3, r3, #8
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	4a04      	ldr	r2, [pc, #16]	; (8003d18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d06:	5cd3      	ldrb	r3, [r2, r3]
 8003d08:	f003 031f 	and.w	r3, r3, #31
 8003d0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40021000 	.word	0x40021000
 8003d18:	0800941c 	.word	0x0800941c

08003d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d20:	f7ff ffda 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003d24:	4601      	mov	r1, r0
 8003d26:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	0adb      	lsrs	r3, r3, #11
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	4a04      	ldr	r2, [pc, #16]	; (8003d44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d32:	5cd3      	ldrb	r3, [r2, r3]
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40021000 	.word	0x40021000
 8003d44:	0800941c 	.word	0x0800941c

08003d48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d50:	2300      	movs	r3, #0
 8003d52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d54:	4b2a      	ldr	r3, [pc, #168]	; (8003e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d60:	f7ff f974 	bl	800304c <HAL_PWREx_GetVoltageRange>
 8003d64:	6178      	str	r0, [r7, #20]
 8003d66:	e014      	b.n	8003d92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d68:	4b25      	ldr	r3, [pc, #148]	; (8003e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6c:	4a24      	ldr	r2, [pc, #144]	; (8003e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d72:	6593      	str	r3, [r2, #88]	; 0x58
 8003d74:	4b22      	ldr	r3, [pc, #136]	; (8003e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d80:	f7ff f964 	bl	800304c <HAL_PWREx_GetVoltageRange>
 8003d84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d86:	4b1e      	ldr	r3, [pc, #120]	; (8003e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8a:	4a1d      	ldr	r2, [pc, #116]	; (8003e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d98:	d10b      	bne.n	8003db2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b80      	cmp	r3, #128	; 0x80
 8003d9e:	d919      	bls.n	8003dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2ba0      	cmp	r3, #160	; 0xa0
 8003da4:	d902      	bls.n	8003dac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003da6:	2302      	movs	r3, #2
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	e013      	b.n	8003dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dac:	2301      	movs	r3, #1
 8003dae:	613b      	str	r3, [r7, #16]
 8003db0:	e010      	b.n	8003dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b80      	cmp	r3, #128	; 0x80
 8003db6:	d902      	bls.n	8003dbe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003db8:	2303      	movs	r3, #3
 8003dba:	613b      	str	r3, [r7, #16]
 8003dbc:	e00a      	b.n	8003dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b80      	cmp	r3, #128	; 0x80
 8003dc2:	d102      	bne.n	8003dca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	e004      	b.n	8003dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b70      	cmp	r3, #112	; 0x70
 8003dce:	d101      	bne.n	8003dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f023 0207 	bic.w	r2, r3, #7
 8003ddc:	4909      	ldr	r1, [pc, #36]	; (8003e04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003de4:	4b07      	ldr	r3, [pc, #28]	; (8003e04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d001      	beq.n	8003df6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40021000 	.word	0x40021000
 8003e04:	40022000 	.word	0x40022000

08003e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e10:	2300      	movs	r3, #0
 8003e12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e14:	2300      	movs	r3, #0
 8003e16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 809e 	beq.w	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e26:	2300      	movs	r3, #0
 8003e28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e2a:	4b46      	ldr	r3, [pc, #280]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00d      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e40:	4b40      	ldr	r3, [pc, #256]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e44:	4a3f      	ldr	r2, [pc, #252]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e4c:	4b3d      	ldr	r3, [pc, #244]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e5c:	4b3a      	ldr	r3, [pc, #232]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a39      	ldr	r2, [pc, #228]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e68:	f7fd fd4c 	bl	8001904 <HAL_GetTick>
 8003e6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e6e:	e009      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e70:	f7fd fd48 	bl	8001904 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d902      	bls.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	74fb      	strb	r3, [r7, #19]
        break;
 8003e82:	e005      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e84:	4b30      	ldr	r3, [pc, #192]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0ef      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8003e90:	7cfb      	ldrb	r3, [r7, #19]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d15a      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e96:	4b2b      	ldr	r3, [pc, #172]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d01e      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d019      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003eb2:	4b24      	ldr	r3, [pc, #144]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ebc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ebe:	4b21      	ldr	r3, [pc, #132]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec4:	4a1f      	ldr	r2, [pc, #124]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ece:	4b1d      	ldr	r3, [pc, #116]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed4:	4a1b      	ldr	r2, [pc, #108]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ede:	4a19      	ldr	r2, [pc, #100]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d016      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef0:	f7fd fd08 	bl	8001904 <HAL_GetTick>
 8003ef4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ef6:	e00b      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef8:	f7fd fd04 	bl	8001904 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d902      	bls.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	74fb      	strb	r3, [r7, #19]
            break;
 8003f0e:	e006      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f10:	4b0c      	ldr	r3, [pc, #48]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0ec      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8003f1e:	7cfb      	ldrb	r3, [r7, #19]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10b      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f24:	4b07      	ldr	r3, [pc, #28]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	4904      	ldr	r1, [pc, #16]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f3a:	e009      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f3c:	7cfb      	ldrb	r3, [r7, #19]
 8003f3e:	74bb      	strb	r3, [r7, #18]
 8003f40:	e006      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003f42:	bf00      	nop
 8003f44:	40021000 	.word	0x40021000
 8003f48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f4c:	7cfb      	ldrb	r3, [r7, #19]
 8003f4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f50:	7c7b      	ldrb	r3, [r7, #17]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d105      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f56:	4b6e      	ldr	r3, [pc, #440]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5a:	4a6d      	ldr	r2, [pc, #436]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f6e:	4b68      	ldr	r3, [pc, #416]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f74:	f023 0203 	bic.w	r2, r3, #3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	4964      	ldr	r1, [pc, #400]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f90:	4b5f      	ldr	r3, [pc, #380]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f96:	f023 020c 	bic.w	r2, r3, #12
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	495c      	ldr	r1, [pc, #368]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0304 	and.w	r3, r3, #4
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fb2:	4b57      	ldr	r3, [pc, #348]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	4953      	ldr	r1, [pc, #332]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0320 	and.w	r3, r3, #32
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00a      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fd4:	4b4e      	ldr	r3, [pc, #312]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	494b      	ldr	r1, [pc, #300]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ff6:	4b46      	ldr	r3, [pc, #280]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	4942      	ldr	r1, [pc, #264]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00a      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004018:	4b3d      	ldr	r3, [pc, #244]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800401a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	493a      	ldr	r1, [pc, #232]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004028:	4313      	orrs	r3, r2
 800402a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800403a:	4b35      	ldr	r3, [pc, #212]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800403c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004040:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	4931      	ldr	r1, [pc, #196]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800404a:	4313      	orrs	r3, r2
 800404c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00a      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800405c:	4b2c      	ldr	r3, [pc, #176]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004062:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	4929      	ldr	r1, [pc, #164]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800407e:	4b24      	ldr	r3, [pc, #144]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004084:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	4920      	ldr	r1, [pc, #128]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d015      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040a0:	4b1b      	ldr	r3, [pc, #108]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ae:	4918      	ldr	r1, [pc, #96]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040be:	d105      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c0:	4b13      	ldr	r3, [pc, #76]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	4a12      	ldr	r2, [pc, #72]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ca:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d015      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040d8:	4b0d      	ldr	r3, [pc, #52]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e6:	490a      	ldr	r1, [pc, #40]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040f6:	d105      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040f8:	4b05      	ldr	r3, [pc, #20]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	4a04      	ldr	r2, [pc, #16]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004102:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004104:	7cbb      	ldrb	r3, [r7, #18]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40021000 	.word	0x40021000

08004114 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e07c      	b.n	8004220 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d106      	bne.n	8004146 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7fd f9f9 	bl	8001538 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2202      	movs	r2, #2
 800414a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800415c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004166:	d902      	bls.n	800416e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004168:	2300      	movs	r3, #0
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	e002      	b.n	8004174 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800416e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004172:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800417c:	d007      	beq.n	800418e <HAL_SPI_Init+0x7a>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004186:	d002      	beq.n	800418e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10b      	bne.n	80041ae <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800419e:	d903      	bls.n	80041a8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	631a      	str	r2, [r3, #48]	; 0x30
 80041a6:	e002      	b.n	80041ae <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	ea42 0103 	orr.w	r1, r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	0c1b      	lsrs	r3, r3, #16
 80041ee:	f003 0204 	and.w	r2, r3, #4
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	ea42 0103 	orr.w	r1, r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	430a      	orrs	r2, r1
 800420e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	603b      	str	r3, [r7, #0]
 8004234:	4613      	mov	r3, r2
 8004236:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004238:	2300      	movs	r3, #0
 800423a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004242:	2b01      	cmp	r3, #1
 8004244:	d101      	bne.n	800424a <HAL_SPI_Transmit+0x22>
 8004246:	2302      	movs	r3, #2
 8004248:	e150      	b.n	80044ec <HAL_SPI_Transmit+0x2c4>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004252:	f7fd fb57 	bl	8001904 <HAL_GetTick>
 8004256:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004258:	88fb      	ldrh	r3, [r7, #6]
 800425a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b01      	cmp	r3, #1
 8004266:	d002      	beq.n	800426e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004268:	2302      	movs	r3, #2
 800426a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800426c:	e135      	b.n	80044da <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d002      	beq.n	800427a <HAL_SPI_Transmit+0x52>
 8004274:	88fb      	ldrh	r3, [r7, #6]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d102      	bne.n	8004280 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800427e:	e12c      	b.n	80044da <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2203      	movs	r2, #3
 8004284:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	88fa      	ldrh	r2, [r7, #6]
 8004298:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	88fa      	ldrh	r2, [r7, #6]
 800429e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ca:	d107      	bne.n	80042dc <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e6:	2b40      	cmp	r3, #64	; 0x40
 80042e8:	d007      	beq.n	80042fa <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004302:	d94b      	bls.n	800439c <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d002      	beq.n	8004312 <HAL_SPI_Transmit+0xea>
 800430c:	8afb      	ldrh	r3, [r7, #22]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d13e      	bne.n	8004390 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004316:	881a      	ldrh	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004322:	1c9a      	adds	r2, r3, #2
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800432c:	b29b      	uxth	r3, r3
 800432e:	3b01      	subs	r3, #1
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004336:	e02b      	b.n	8004390 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b02      	cmp	r3, #2
 8004344:	d112      	bne.n	800436c <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434a:	881a      	ldrh	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	1c9a      	adds	r2, r3, #2
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004360:	b29b      	uxth	r3, r3
 8004362:	3b01      	subs	r3, #1
 8004364:	b29a      	uxth	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	87da      	strh	r2, [r3, #62]	; 0x3e
 800436a:	e011      	b.n	8004390 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800436c:	f7fd faca 	bl	8001904 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d803      	bhi.n	8004384 <HAL_SPI_Transmit+0x15c>
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004382:	d102      	bne.n	800438a <HAL_SPI_Transmit+0x162>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d102      	bne.n	8004390 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800438e:	e0a4      	b.n	80044da <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004394:	b29b      	uxth	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1ce      	bne.n	8004338 <HAL_SPI_Transmit+0x110>
 800439a:	e07c      	b.n	8004496 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d002      	beq.n	80043aa <HAL_SPI_Transmit+0x182>
 80043a4:	8afb      	ldrh	r3, [r7, #22]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d170      	bne.n	800448c <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d912      	bls.n	80043da <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	881a      	ldrh	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	1c9a      	adds	r2, r3, #2
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	3b02      	subs	r3, #2
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043d8:	e058      	b.n	800448c <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	330c      	adds	r3, #12
 80043e4:	7812      	ldrb	r2, [r2, #0]
 80043e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004400:	e044      	b.n	800448c <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b02      	cmp	r3, #2
 800440e:	d12b      	bne.n	8004468 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b01      	cmp	r3, #1
 8004418:	d912      	bls.n	8004440 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441e:	881a      	ldrh	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442a:	1c9a      	adds	r2, r3, #2
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004434:	b29b      	uxth	r3, r3
 8004436:	3b02      	subs	r3, #2
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800443e:	e025      	b.n	800448c <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	330c      	adds	r3, #12
 800444a:	7812      	ldrb	r2, [r2, #0]
 800444c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004466:	e011      	b.n	800448c <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004468:	f7fd fa4c 	bl	8001904 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d803      	bhi.n	8004480 <HAL_SPI_Transmit+0x258>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447e:	d102      	bne.n	8004486 <HAL_SPI_Transmit+0x25e>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d102      	bne.n	800448c <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	77fb      	strb	r3, [r7, #31]
          goto error;
 800448a:	e026      	b.n	80044da <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1b5      	bne.n	8004402 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	6839      	ldr	r1, [r7, #0]
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 fc94 	bl	8004dc8 <SPI_EndRxTxTransaction>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2220      	movs	r2, #32
 80044aa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10a      	bne.n	80044ca <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044b4:	2300      	movs	r3, #0
 80044b6:	613b      	str	r3, [r7, #16]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	613b      	str	r3, [r7, #16]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	77fb      	strb	r3, [r7, #31]
 80044d6:	e000      	b.n	80044da <HAL_SPI_Transmit+0x2b2>
  }

error:
 80044d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80044ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3720      	adds	r7, #32
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af02      	add	r7, sp, #8
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	603b      	str	r3, [r7, #0]
 8004500:	4613      	mov	r3, r2
 8004502:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004504:	2300      	movs	r3, #0
 8004506:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004510:	d112      	bne.n	8004538 <HAL_SPI_Receive+0x44>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10e      	bne.n	8004538 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2204      	movs	r2, #4
 800451e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004522:	88fa      	ldrh	r2, [r7, #6]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	4613      	mov	r3, r2
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 f908 	bl	8004744 <HAL_SPI_TransmitReceive>
 8004534:	4603      	mov	r3, r0
 8004536:	e101      	b.n	800473c <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <HAL_SPI_Receive+0x52>
 8004542:	2302      	movs	r3, #2
 8004544:	e0fa      	b.n	800473c <HAL_SPI_Receive+0x248>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800454e:	f7fd f9d9 	bl	8001904 <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b01      	cmp	r3, #1
 800455e:	d002      	beq.n	8004566 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004560:	2302      	movs	r3, #2
 8004562:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004564:	e0e1      	b.n	800472a <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d002      	beq.n	8004572 <HAL_SPI_Receive+0x7e>
 800456c:	88fb      	ldrh	r3, [r7, #6]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d102      	bne.n	8004578 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004576:	e0d8      	b.n	800472a <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2204      	movs	r2, #4
 800457c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	88fa      	ldrh	r2, [r7, #6]
 8004590:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	88fa      	ldrh	r2, [r7, #6]
 8004598:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045c2:	d908      	bls.n	80045d6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045d2:	605a      	str	r2, [r3, #4]
 80045d4:	e007      	b.n	80045e6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045e4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ee:	d107      	bne.n	8004600 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80045fe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460a:	2b40      	cmp	r3, #64	; 0x40
 800460c:	d007      	beq.n	800461e <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800461c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004626:	d867      	bhi.n	80046f8 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004628:	e030      	b.n	800468c <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b01      	cmp	r3, #1
 8004636:	d117      	bne.n	8004668 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f103 020c 	add.w	r2, r3, #12
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004644:	7812      	ldrb	r2, [r2, #0]
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800465a:	b29b      	uxth	r3, r3
 800465c:	3b01      	subs	r3, #1
 800465e:	b29a      	uxth	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004666:	e011      	b.n	800468c <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004668:	f7fd f94c 	bl	8001904 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	429a      	cmp	r2, r3
 8004676:	d803      	bhi.n	8004680 <HAL_SPI_Receive+0x18c>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467e:	d102      	bne.n	8004686 <HAL_SPI_Receive+0x192>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d102      	bne.n	800468c <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	75fb      	strb	r3, [r7, #23]
          goto error;
 800468a:	e04e      	b.n	800472a <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1c8      	bne.n	800462a <HAL_SPI_Receive+0x136>
 8004698:	e034      	b.n	8004704 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d115      	bne.n	80046d4 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	b292      	uxth	r2, r2
 80046b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	1c9a      	adds	r2, r3, #2
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80046d2:	e011      	b.n	80046f8 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046d4:	f7fd f916 	bl	8001904 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d803      	bhi.n	80046ec <HAL_SPI_Receive+0x1f8>
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ea:	d102      	bne.n	80046f2 <HAL_SPI_Receive+0x1fe>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d102      	bne.n	80046f8 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80046f6:	e018      	b.n	800472a <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046fe:	b29b      	uxth	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1ca      	bne.n	800469a <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	6839      	ldr	r1, [r7, #0]
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 fb05 	bl	8004d18 <SPI_EndRxTransaction>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2220      	movs	r2, #32
 8004718:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	75fb      	strb	r3, [r7, #23]
 8004726:	e000      	b.n	800472a <HAL_SPI_Receive+0x236>
  }

error :
 8004728:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800473a:	7dfb      	ldrb	r3, [r7, #23]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b08a      	sub	sp, #40	; 0x28
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
 8004750:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004752:	2301      	movs	r3, #1
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004762:	2b01      	cmp	r3, #1
 8004764:	d101      	bne.n	800476a <HAL_SPI_TransmitReceive+0x26>
 8004766:	2302      	movs	r3, #2
 8004768:	e1fb      	b.n	8004b62 <HAL_SPI_TransmitReceive+0x41e>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004772:	f7fd f8c7 	bl	8001904 <HAL_GetTick>
 8004776:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800477e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004786:	887b      	ldrh	r3, [r7, #2]
 8004788:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800478a:	887b      	ldrh	r3, [r7, #2]
 800478c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800478e:	7efb      	ldrb	r3, [r7, #27]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d00e      	beq.n	80047b2 <HAL_SPI_TransmitReceive+0x6e>
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800479a:	d106      	bne.n	80047aa <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d102      	bne.n	80047aa <HAL_SPI_TransmitReceive+0x66>
 80047a4:	7efb      	ldrb	r3, [r7, #27]
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d003      	beq.n	80047b2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
 80047ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80047b0:	e1cd      	b.n	8004b4e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d005      	beq.n	80047c4 <HAL_SPI_TransmitReceive+0x80>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <HAL_SPI_TransmitReceive+0x80>
 80047be:	887b      	ldrh	r3, [r7, #2]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d103      	bne.n	80047cc <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80047ca:	e1c0      	b.n	8004b4e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b04      	cmp	r3, #4
 80047d6:	d003      	beq.n	80047e0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2205      	movs	r2, #5
 80047dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	887a      	ldrh	r2, [r7, #2]
 80047f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	887a      	ldrh	r2, [r7, #2]
 80047f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	887a      	ldrh	r2, [r7, #2]
 8004806:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	887a      	ldrh	r2, [r7, #2]
 800480c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004822:	d802      	bhi.n	800482a <HAL_SPI_TransmitReceive+0xe6>
 8004824:	8a3b      	ldrh	r3, [r7, #16]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d908      	bls.n	800483c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004838:	605a      	str	r2, [r3, #4]
 800483a:	e007      	b.n	800484c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800484a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004856:	2b40      	cmp	r3, #64	; 0x40
 8004858:	d007      	beq.n	800486a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004868:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004872:	d97c      	bls.n	800496e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <HAL_SPI_TransmitReceive+0x13e>
 800487c:	8a7b      	ldrh	r3, [r7, #18]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d169      	bne.n	8004956 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004886:	881a      	ldrh	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004892:	1c9a      	adds	r2, r3, #2
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800489c:	b29b      	uxth	r3, r3
 800489e:	3b01      	subs	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048a6:	e056      	b.n	8004956 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d11b      	bne.n	80048ee <HAL_SPI_TransmitReceive+0x1aa>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d016      	beq.n	80048ee <HAL_SPI_TransmitReceive+0x1aa>
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d113      	bne.n	80048ee <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ca:	881a      	ldrh	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d6:	1c9a      	adds	r2, r3, #2
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d11c      	bne.n	8004936 <HAL_SPI_TransmitReceive+0x1f2>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004902:	b29b      	uxth	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d016      	beq.n	8004936 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	b292      	uxth	r2, r2
 8004914:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	1c9a      	adds	r2, r3, #2
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004926:	b29b      	uxth	r3, r3
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004932:	2301      	movs	r3, #1
 8004934:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004936:	f7fc ffe5 	bl	8001904 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004942:	429a      	cmp	r2, r3
 8004944:	d807      	bhi.n	8004956 <HAL_SPI_TransmitReceive+0x212>
 8004946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494c:	d003      	beq.n	8004956 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004954:	e0fb      	b.n	8004b4e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800495a:	b29b      	uxth	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1a3      	bne.n	80048a8 <HAL_SPI_TransmitReceive+0x164>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004966:	b29b      	uxth	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	d19d      	bne.n	80048a8 <HAL_SPI_TransmitReceive+0x164>
 800496c:	e0df      	b.n	8004b2e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_SPI_TransmitReceive+0x23a>
 8004976:	8a7b      	ldrh	r3, [r7, #18]
 8004978:	2b01      	cmp	r3, #1
 800497a:	f040 80cb 	bne.w	8004b14 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004982:	b29b      	uxth	r3, r3
 8004984:	2b01      	cmp	r3, #1
 8004986:	d912      	bls.n	80049ae <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498c:	881a      	ldrh	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004998:	1c9a      	adds	r2, r3, #2
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	3b02      	subs	r3, #2
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049ac:	e0b2      	b.n	8004b14 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	330c      	adds	r3, #12
 80049b8:	7812      	ldrb	r2, [r2, #0]
 80049ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049d4:	e09e      	b.n	8004b14 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d134      	bne.n	8004a4e <HAL_SPI_TransmitReceive+0x30a>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d02f      	beq.n	8004a4e <HAL_SPI_TransmitReceive+0x30a>
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d12c      	bne.n	8004a4e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d912      	bls.n	8004a24 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a02:	881a      	ldrh	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0e:	1c9a      	adds	r2, r3, #2
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	3b02      	subs	r3, #2
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a22:	e012      	b.n	8004a4a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	330c      	adds	r3, #12
 8004a2e:	7812      	ldrb	r2, [r2, #0]
 8004a30:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	3b01      	subs	r3, #1
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d148      	bne.n	8004aee <HAL_SPI_TransmitReceive+0x3aa>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d042      	beq.n	8004aee <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d923      	bls.n	8004abc <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	b292      	uxth	r2, r2
 8004a80:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	1c9a      	adds	r2, r3, #2
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	3b02      	subs	r3, #2
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d81f      	bhi.n	8004aea <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ab8:	605a      	str	r2, [r3, #4]
 8004aba:	e016      	b.n	8004aea <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f103 020c 	add.w	r2, r3, #12
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	7812      	ldrb	r2, [r2, #0]
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004aea:	2301      	movs	r3, #1
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004aee:	f7fc ff09 	bl	8001904 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d803      	bhi.n	8004b06 <HAL_SPI_TransmitReceive+0x3c2>
 8004afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b04:	d102      	bne.n	8004b0c <HAL_SPI_TransmitReceive+0x3c8>
 8004b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d103      	bne.n	8004b14 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004b12:	e01c      	b.n	8004b4e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f47f af5b 	bne.w	80049d6 <HAL_SPI_TransmitReceive+0x292>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f47f af54 	bne.w	80049d6 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b2e:	69fa      	ldr	r2, [r7, #28]
 8004b30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 f948 	bl	8004dc8 <SPI_EndRxTxTransaction>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d006      	beq.n	8004b4c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2220      	movs	r2, #32
 8004b48:	661a      	str	r2, [r3, #96]	; 0x60
 8004b4a:	e000      	b.n	8004b4e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004b4c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3728      	adds	r7, #40	; 0x28
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	603b      	str	r3, [r7, #0]
 8004b76:	4613      	mov	r3, r2
 8004b78:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b7a:	e04c      	b.n	8004c16 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b82:	d048      	beq.n	8004c16 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004b84:	f7fc febe 	bl	8001904 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d902      	bls.n	8004b9a <SPI_WaitFlagStateUntilTimeout+0x30>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d13d      	bne.n	8004c16 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ba8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bb2:	d111      	bne.n	8004bd8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bbc:	d004      	beq.n	8004bc8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc6:	d107      	bne.n	8004bd8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be0:	d10f      	bne.n	8004c02 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e00f      	b.n	8004c36 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	bf0c      	ite	eq
 8004c26:	2301      	moveq	r3, #1
 8004c28:	2300      	movne	r3, #0
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	79fb      	ldrb	r3, [r7, #7]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d1a3      	bne.n	8004b7c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b084      	sub	sp, #16
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	60f8      	str	r0, [r7, #12]
 8004c46:	60b9      	str	r1, [r7, #8]
 8004c48:	607a      	str	r2, [r7, #4]
 8004c4a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004c4c:	e057      	b.n	8004cfe <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c54:	d106      	bne.n	8004c64 <SPI_WaitFifoStateUntilTimeout+0x26>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d103      	bne.n	8004c64 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	330c      	adds	r3, #12
 8004c62:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6a:	d048      	beq.n	8004cfe <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004c6c:	f7fc fe4a 	bl	8001904 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d902      	bls.n	8004c82 <SPI_WaitFifoStateUntilTimeout+0x44>
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d13d      	bne.n	8004cfe <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c9a:	d111      	bne.n	8004cc0 <SPI_WaitFifoStateUntilTimeout+0x82>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca4:	d004      	beq.n	8004cb0 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cae:	d107      	bne.n	8004cc0 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc8:	d10f      	bne.n	8004cea <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ce8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e008      	b.n	8004d10 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	4013      	ands	r3, r2
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d19f      	bne.n	8004c4e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af02      	add	r7, sp, #8
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d2c:	d111      	bne.n	8004d52 <SPI_EndRxTransaction+0x3a>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d36:	d004      	beq.n	8004d42 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d40:	d107      	bne.n	8004d52 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d50:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	2180      	movs	r1, #128	; 0x80
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f7ff ff04 	bl	8004b6a <SPI_WaitFlagStateUntilTimeout>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d007      	beq.n	8004d78 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d6c:	f043 0220 	orr.w	r2, r3, #32
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e023      	b.n	8004dc0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d80:	d11d      	bne.n	8004dbe <SPI_EndRxTransaction+0xa6>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d8a:	d004      	beq.n	8004d96 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d94:	d113      	bne.n	8004dbe <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f7ff ff4b 	bl	8004c3e <SPI_WaitFifoStateUntilTimeout>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d007      	beq.n	8004dbe <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db2:	f043 0220 	orr.w	r2, r3, #32
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e000      	b.n	8004dc0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af02      	add	r7, sp, #8
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	9300      	str	r3, [sp, #0]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f7ff ff2c 	bl	8004c3e <SPI_WaitFifoStateUntilTimeout>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d007      	beq.n	8004dfc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df0:	f043 0220 	orr.w	r2, r3, #32
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e027      	b.n	8004e4c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2200      	movs	r2, #0
 8004e04:	2180      	movs	r1, #128	; 0x80
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f7ff feaf 	bl	8004b6a <SPI_WaitFlagStateUntilTimeout>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d007      	beq.n	8004e22 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e16:	f043 0220 	orr.w	r2, r3, #32
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e014      	b.n	8004e4c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f7ff ff05 	bl	8004c3e <SPI_WaitFifoStateUntilTimeout>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d007      	beq.n	8004e4a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e3e:	f043 0220 	orr.w	r2, r3, #32
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e000      	b.n	8004e4c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e040      	b.n	8004ee8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d106      	bne.n	8004e7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7fc fc6c 	bl	8001754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2224      	movs	r2, #36	; 0x24
 8004e80:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0201 	bic.w	r2, r2, #1
 8004e90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fa28 	bl	80052e8 <UART_SetConfig>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d101      	bne.n	8004ea2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e022      	b.n	8004ee8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d002      	beq.n	8004eb0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fd30 	bl	8005910 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ebe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689a      	ldr	r2, [r3, #8]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ece:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0201 	orr.w	r2, r2, #1
 8004ede:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fdb7 	bl	8005a54 <UART_CheckIdleState>
 8004ee6:	4603      	mov	r3, r0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	4613      	mov	r3, r2
 8004efc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f02:	2b20      	cmp	r3, #32
 8004f04:	f040 808a 	bne.w	800501c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <HAL_UART_Receive_IT+0x24>
 8004f0e:	88fb      	ldrh	r3, [r7, #6]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e082      	b.n	800501e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d101      	bne.n	8004f26 <HAL_UART_Receive_IT+0x36>
 8004f22:	2302      	movs	r3, #2
 8004f24:	e07b      	b.n	800501e <HAL_UART_Receive_IT+0x12e>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	88fa      	ldrh	r2, [r7, #6]
 8004f38:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	88fa      	ldrh	r2, [r7, #6]
 8004f40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f52:	d10e      	bne.n	8004f72 <HAL_UART_Receive_IT+0x82>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d105      	bne.n	8004f68 <HAL_UART_Receive_IT+0x78>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004f62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f66:	e02d      	b.n	8004fc4 <HAL_UART_Receive_IT+0xd4>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	22ff      	movs	r2, #255	; 0xff
 8004f6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f70:	e028      	b.n	8004fc4 <HAL_UART_Receive_IT+0xd4>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10d      	bne.n	8004f96 <HAL_UART_Receive_IT+0xa6>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d104      	bne.n	8004f8c <HAL_UART_Receive_IT+0x9c>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	22ff      	movs	r2, #255	; 0xff
 8004f86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f8a:	e01b      	b.n	8004fc4 <HAL_UART_Receive_IT+0xd4>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	227f      	movs	r2, #127	; 0x7f
 8004f90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f94:	e016      	b.n	8004fc4 <HAL_UART_Receive_IT+0xd4>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f9e:	d10d      	bne.n	8004fbc <HAL_UART_Receive_IT+0xcc>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d104      	bne.n	8004fb2 <HAL_UART_Receive_IT+0xc2>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	227f      	movs	r2, #127	; 0x7f
 8004fac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004fb0:	e008      	b.n	8004fc4 <HAL_UART_Receive_IT+0xd4>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	223f      	movs	r2, #63	; 0x3f
 8004fb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004fba:	e003      	b.n	8004fc4 <HAL_UART_Receive_IT+0xd4>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2222      	movs	r2, #34	; 0x22
 8004fce:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689a      	ldr	r2, [r3, #8]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0201 	orr.w	r2, r2, #1
 8004fde:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fe8:	d107      	bne.n	8004ffa <HAL_UART_Receive_IT+0x10a>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d103      	bne.n	8004ffa <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4a0d      	ldr	r2, [pc, #52]	; (800502c <HAL_UART_Receive_IT+0x13c>)
 8004ff6:	661a      	str	r2, [r3, #96]	; 0x60
 8004ff8:	e002      	b.n	8005000 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4a0c      	ldr	r2, [pc, #48]	; (8005030 <HAL_UART_Receive_IT+0x140>)
 8004ffe:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005016:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005018:	2300      	movs	r3, #0
 800501a:	e000      	b.n	800501e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800501c:	2302      	movs	r3, #2
  }
}
 800501e:	4618      	mov	r0, r3
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	08005d1d 	.word	0x08005d1d
 8005030:	08005c73 	.word	0x08005c73

08005034 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b088      	sub	sp, #32
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005054:	69fa      	ldr	r2, [r7, #28]
 8005056:	f640 030f 	movw	r3, #2063	; 0x80f
 800505a:	4013      	ands	r3, r2
 800505c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d113      	bne.n	800508c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	f003 0320 	and.w	r3, r3, #32
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00e      	beq.n	800508c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	f003 0320 	and.w	r3, r3, #32
 8005074:	2b00      	cmp	r3, #0
 8005076:	d009      	beq.n	800508c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 8114 	beq.w	80052aa <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	4798      	blx	r3
      }
      return;
 800508a:	e10e      	b.n	80052aa <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 80d6 	beq.w	8005240 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d105      	bne.n	80050aa <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 80cb 	beq.w	8005240 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00e      	beq.n	80050d2 <HAL_UART_IRQHandler+0x9e>
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d009      	beq.n	80050d2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2201      	movs	r2, #1
 80050c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050ca:	f043 0201 	orr.w	r2, r3, #1
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00e      	beq.n	80050fa <HAL_UART_IRQHandler+0xc6>
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d009      	beq.n	80050fa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2202      	movs	r2, #2
 80050ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050f2:	f043 0204 	orr.w	r2, r3, #4
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00e      	beq.n	8005122 <HAL_UART_IRQHandler+0xee>
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d009      	beq.n	8005122 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2204      	movs	r2, #4
 8005114:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800511a:	f043 0202 	orr.w	r2, r3, #2
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	f003 0308 	and.w	r3, r3, #8
 8005128:	2b00      	cmp	r3, #0
 800512a:	d013      	beq.n	8005154 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	f003 0320 	and.w	r3, r3, #32
 8005132:	2b00      	cmp	r3, #0
 8005134:	d104      	bne.n	8005140 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800513c:	2b00      	cmp	r3, #0
 800513e:	d009      	beq.n	8005154 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2208      	movs	r2, #8
 8005146:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800514c:	f043 0208 	orr.w	r2, r3, #8
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00f      	beq.n	800517e <HAL_UART_IRQHandler+0x14a>
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00a      	beq.n	800517e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005170:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005176:	f043 0220 	orr.w	r2, r3, #32
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 8093 	beq.w	80052ae <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	f003 0320 	and.w	r3, r3, #32
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00c      	beq.n	80051ac <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	f003 0320 	and.w	r3, r3, #32
 8005198:	2b00      	cmp	r3, #0
 800519a:	d007      	beq.n	80051ac <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d003      	beq.n	80051ac <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051b0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051bc:	2b40      	cmp	r3, #64	; 0x40
 80051be:	d004      	beq.n	80051ca <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d031      	beq.n	800522e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fd02 	bl	8005bd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051da:	2b40      	cmp	r3, #64	; 0x40
 80051dc:	d123      	bne.n	8005226 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051ec:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d013      	beq.n	800521e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051fa:	4a30      	ldr	r2, [pc, #192]	; (80052bc <HAL_UART_IRQHandler+0x288>)
 80051fc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005202:	4618      	mov	r0, r3
 8005204:	f7fc fcbd 	bl	8001b82 <HAL_DMA_Abort_IT>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d016      	beq.n	800523c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005218:	4610      	mov	r0, r2
 800521a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800521c:	e00e      	b.n	800523c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f858 	bl	80052d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005224:	e00a      	b.n	800523c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f854 	bl	80052d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800522c:	e006      	b.n	800523c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f850 	bl	80052d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800523a:	e038      	b.n	80052ae <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800523c:	bf00      	nop
    return;
 800523e:	e036      	b.n	80052ae <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00d      	beq.n	8005266 <HAL_UART_IRQHandler+0x232>
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d008      	beq.n	8005266 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800525c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fdb1 	bl	8005dc6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005264:	e026      	b.n	80052b4 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00d      	beq.n	800528c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005276:	2b00      	cmp	r3, #0
 8005278:	d008      	beq.n	800528c <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800527e:	2b00      	cmp	r3, #0
 8005280:	d017      	beq.n	80052b2 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	4798      	blx	r3
    }
    return;
 800528a:	e012      	b.n	80052b2 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00e      	beq.n	80052b4 <HAL_UART_IRQHandler+0x280>
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529c:	2b00      	cmp	r3, #0
 800529e:	d009      	beq.n	80052b4 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 fccd 	bl	8005c40 <UART_EndTransmit_IT>
    return;
 80052a6:	bf00      	nop
 80052a8:	e004      	b.n	80052b4 <HAL_UART_IRQHandler+0x280>
      return;
 80052aa:	bf00      	nop
 80052ac:	e002      	b.n	80052b4 <HAL_UART_IRQHandler+0x280>
    return;
 80052ae:	bf00      	nop
 80052b0:	e000      	b.n	80052b4 <HAL_UART_IRQHandler+0x280>
    return;
 80052b2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80052b4:	3720      	adds	r7, #32
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	08005c15 	.word	0x08005c15

080052c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052e8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80052ec:	b08a      	sub	sp, #40	; 0x28
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689a      	ldr	r2, [r3, #8]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	431a      	orrs	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	4313      	orrs	r3, r2
 8005314:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	4bbc      	ldr	r3, [pc, #752]	; (8005610 <UART_SetConfig+0x328>)
 800531e:	4013      	ands	r3, r2
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6812      	ldr	r2, [r2, #0]
 8005324:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005326:	430b      	orrs	r3, r1
 8005328:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68da      	ldr	r2, [r3, #12]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4ab2      	ldr	r2, [pc, #712]	; (8005614 <UART_SetConfig+0x32c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d004      	beq.n	800535a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005356:	4313      	orrs	r3, r2
 8005358:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800536a:	430a      	orrs	r2, r1
 800536c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4aa9      	ldr	r2, [pc, #676]	; (8005618 <UART_SetConfig+0x330>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d126      	bne.n	80053c6 <UART_SetConfig+0xde>
 8005378:	4ba8      	ldr	r3, [pc, #672]	; (800561c <UART_SetConfig+0x334>)
 800537a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537e:	f003 0303 	and.w	r3, r3, #3
 8005382:	2b03      	cmp	r3, #3
 8005384:	d81a      	bhi.n	80053bc <UART_SetConfig+0xd4>
 8005386:	a201      	add	r2, pc, #4	; (adr r2, 800538c <UART_SetConfig+0xa4>)
 8005388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538c:	0800539d 	.word	0x0800539d
 8005390:	080053ad 	.word	0x080053ad
 8005394:	080053a5 	.word	0x080053a5
 8005398:	080053b5 	.word	0x080053b5
 800539c:	2301      	movs	r3, #1
 800539e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053a2:	e0ab      	b.n	80054fc <UART_SetConfig+0x214>
 80053a4:	2302      	movs	r3, #2
 80053a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053aa:	e0a7      	b.n	80054fc <UART_SetConfig+0x214>
 80053ac:	2304      	movs	r3, #4
 80053ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053b2:	e0a3      	b.n	80054fc <UART_SetConfig+0x214>
 80053b4:	2308      	movs	r3, #8
 80053b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ba:	e09f      	b.n	80054fc <UART_SetConfig+0x214>
 80053bc:	2310      	movs	r3, #16
 80053be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053c2:	bf00      	nop
 80053c4:	e09a      	b.n	80054fc <UART_SetConfig+0x214>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a95      	ldr	r2, [pc, #596]	; (8005620 <UART_SetConfig+0x338>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d138      	bne.n	8005442 <UART_SetConfig+0x15a>
 80053d0:	4b92      	ldr	r3, [pc, #584]	; (800561c <UART_SetConfig+0x334>)
 80053d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d6:	f003 030c 	and.w	r3, r3, #12
 80053da:	2b0c      	cmp	r3, #12
 80053dc:	d82c      	bhi.n	8005438 <UART_SetConfig+0x150>
 80053de:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <UART_SetConfig+0xfc>)
 80053e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e4:	08005419 	.word	0x08005419
 80053e8:	08005439 	.word	0x08005439
 80053ec:	08005439 	.word	0x08005439
 80053f0:	08005439 	.word	0x08005439
 80053f4:	08005429 	.word	0x08005429
 80053f8:	08005439 	.word	0x08005439
 80053fc:	08005439 	.word	0x08005439
 8005400:	08005439 	.word	0x08005439
 8005404:	08005421 	.word	0x08005421
 8005408:	08005439 	.word	0x08005439
 800540c:	08005439 	.word	0x08005439
 8005410:	08005439 	.word	0x08005439
 8005414:	08005431 	.word	0x08005431
 8005418:	2300      	movs	r3, #0
 800541a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800541e:	e06d      	b.n	80054fc <UART_SetConfig+0x214>
 8005420:	2302      	movs	r3, #2
 8005422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005426:	e069      	b.n	80054fc <UART_SetConfig+0x214>
 8005428:	2304      	movs	r3, #4
 800542a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800542e:	e065      	b.n	80054fc <UART_SetConfig+0x214>
 8005430:	2308      	movs	r3, #8
 8005432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005436:	e061      	b.n	80054fc <UART_SetConfig+0x214>
 8005438:	2310      	movs	r3, #16
 800543a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800543e:	bf00      	nop
 8005440:	e05c      	b.n	80054fc <UART_SetConfig+0x214>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a77      	ldr	r2, [pc, #476]	; (8005624 <UART_SetConfig+0x33c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d125      	bne.n	8005498 <UART_SetConfig+0x1b0>
 800544c:	4b73      	ldr	r3, [pc, #460]	; (800561c <UART_SetConfig+0x334>)
 800544e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005452:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005456:	2b10      	cmp	r3, #16
 8005458:	d011      	beq.n	800547e <UART_SetConfig+0x196>
 800545a:	2b10      	cmp	r3, #16
 800545c:	d802      	bhi.n	8005464 <UART_SetConfig+0x17c>
 800545e:	2b00      	cmp	r3, #0
 8005460:	d005      	beq.n	800546e <UART_SetConfig+0x186>
 8005462:	e014      	b.n	800548e <UART_SetConfig+0x1a6>
 8005464:	2b20      	cmp	r3, #32
 8005466:	d006      	beq.n	8005476 <UART_SetConfig+0x18e>
 8005468:	2b30      	cmp	r3, #48	; 0x30
 800546a:	d00c      	beq.n	8005486 <UART_SetConfig+0x19e>
 800546c:	e00f      	b.n	800548e <UART_SetConfig+0x1a6>
 800546e:	2300      	movs	r3, #0
 8005470:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005474:	e042      	b.n	80054fc <UART_SetConfig+0x214>
 8005476:	2302      	movs	r3, #2
 8005478:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800547c:	e03e      	b.n	80054fc <UART_SetConfig+0x214>
 800547e:	2304      	movs	r3, #4
 8005480:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005484:	e03a      	b.n	80054fc <UART_SetConfig+0x214>
 8005486:	2308      	movs	r3, #8
 8005488:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800548c:	e036      	b.n	80054fc <UART_SetConfig+0x214>
 800548e:	2310      	movs	r3, #16
 8005490:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005494:	bf00      	nop
 8005496:	e031      	b.n	80054fc <UART_SetConfig+0x214>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a5d      	ldr	r2, [pc, #372]	; (8005614 <UART_SetConfig+0x32c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d129      	bne.n	80054f6 <UART_SetConfig+0x20e>
 80054a2:	4b5e      	ldr	r3, [pc, #376]	; (800561c <UART_SetConfig+0x334>)
 80054a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b0:	d014      	beq.n	80054dc <UART_SetConfig+0x1f4>
 80054b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b6:	d802      	bhi.n	80054be <UART_SetConfig+0x1d6>
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d007      	beq.n	80054cc <UART_SetConfig+0x1e4>
 80054bc:	e016      	b.n	80054ec <UART_SetConfig+0x204>
 80054be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054c2:	d007      	beq.n	80054d4 <UART_SetConfig+0x1ec>
 80054c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054c8:	d00c      	beq.n	80054e4 <UART_SetConfig+0x1fc>
 80054ca:	e00f      	b.n	80054ec <UART_SetConfig+0x204>
 80054cc:	2300      	movs	r3, #0
 80054ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054d2:	e013      	b.n	80054fc <UART_SetConfig+0x214>
 80054d4:	2302      	movs	r3, #2
 80054d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054da:	e00f      	b.n	80054fc <UART_SetConfig+0x214>
 80054dc:	2304      	movs	r3, #4
 80054de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054e2:	e00b      	b.n	80054fc <UART_SetConfig+0x214>
 80054e4:	2308      	movs	r3, #8
 80054e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ea:	e007      	b.n	80054fc <UART_SetConfig+0x214>
 80054ec:	2310      	movs	r3, #16
 80054ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054f2:	bf00      	nop
 80054f4:	e002      	b.n	80054fc <UART_SetConfig+0x214>
 80054f6:	2310      	movs	r3, #16
 80054f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a44      	ldr	r2, [pc, #272]	; (8005614 <UART_SetConfig+0x32c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	f040 80fb 	bne.w	80056fe <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005508:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800550c:	2b08      	cmp	r3, #8
 800550e:	d824      	bhi.n	800555a <UART_SetConfig+0x272>
 8005510:	a201      	add	r2, pc, #4	; (adr r2, 8005518 <UART_SetConfig+0x230>)
 8005512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005516:	bf00      	nop
 8005518:	0800553d 	.word	0x0800553d
 800551c:	0800555b 	.word	0x0800555b
 8005520:	08005545 	.word	0x08005545
 8005524:	0800555b 	.word	0x0800555b
 8005528:	0800554b 	.word	0x0800554b
 800552c:	0800555b 	.word	0x0800555b
 8005530:	0800555b 	.word	0x0800555b
 8005534:	0800555b 	.word	0x0800555b
 8005538:	08005553 	.word	0x08005553
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800553c:	f7fe fbd8 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 8005540:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005542:	e00d      	b.n	8005560 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005544:	4b38      	ldr	r3, [pc, #224]	; (8005628 <UART_SetConfig+0x340>)
 8005546:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005548:	e00a      	b.n	8005560 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800554a:	f7fe fb3b 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 800554e:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005550:	e006      	b.n	8005560 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005556:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005558:	e002      	b.n	8005560 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	76fb      	strb	r3, [r7, #27]
        break;
 800555e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 81c8 	beq.w	80058f8 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	4613      	mov	r3, r2
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	4413      	add	r3, r2
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	429a      	cmp	r2, r3
 8005576:	d305      	bcc.n	8005584 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	429a      	cmp	r2, r3
 8005582:	d902      	bls.n	800558a <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	76fb      	strb	r3, [r7, #27]
 8005588:	e1b6      	b.n	80058f8 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 800558a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800558e:	2b08      	cmp	r3, #8
 8005590:	f200 80a2 	bhi.w	80056d8 <UART_SetConfig+0x3f0>
 8005594:	a201      	add	r2, pc, #4	; (adr r2, 800559c <UART_SetConfig+0x2b4>)
 8005596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559a:	bf00      	nop
 800559c:	080055c1 	.word	0x080055c1
 80055a0:	080056d9 	.word	0x080056d9
 80055a4:	0800562d 	.word	0x0800562d
 80055a8:	080056d9 	.word	0x080056d9
 80055ac:	08005661 	.word	0x08005661
 80055b0:	080056d9 	.word	0x080056d9
 80055b4:	080056d9 	.word	0x080056d9
 80055b8:	080056d9 	.word	0x080056d9
 80055bc:	080056af 	.word	0x080056af
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80055c0:	f7fe fb96 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 80055c4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	4619      	mov	r1, r3
 80055ca:	f04f 0200 	mov.w	r2, #0
 80055ce:	f04f 0300 	mov.w	r3, #0
 80055d2:	f04f 0400 	mov.w	r4, #0
 80055d6:	0214      	lsls	r4, r2, #8
 80055d8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80055dc:	020b      	lsls	r3, r1, #8
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6852      	ldr	r2, [r2, #4]
 80055e2:	0852      	lsrs	r2, r2, #1
 80055e4:	4611      	mov	r1, r2
 80055e6:	f04f 0200 	mov.w	r2, #0
 80055ea:	eb13 0b01 	adds.w	fp, r3, r1
 80055ee:	eb44 0c02 	adc.w	ip, r4, r2
 80055f2:	4658      	mov	r0, fp
 80055f4:	4661      	mov	r1, ip
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f04f 0400 	mov.w	r4, #0
 80055fe:	461a      	mov	r2, r3
 8005600:	4623      	mov	r3, r4
 8005602:	f7fa fde3 	bl	80001cc <__aeabi_uldivmod>
 8005606:	4603      	mov	r3, r0
 8005608:	460c      	mov	r4, r1
 800560a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800560c:	e067      	b.n	80056de <UART_SetConfig+0x3f6>
 800560e:	bf00      	nop
 8005610:	efff69f3 	.word	0xefff69f3
 8005614:	40008000 	.word	0x40008000
 8005618:	40013800 	.word	0x40013800
 800561c:	40021000 	.word	0x40021000
 8005620:	40004400 	.word	0x40004400
 8005624:	40004800 	.word	0x40004800
 8005628:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	085b      	lsrs	r3, r3, #1
 8005632:	f04f 0400 	mov.w	r4, #0
 8005636:	49ae      	ldr	r1, [pc, #696]	; (80058f0 <UART_SetConfig+0x608>)
 8005638:	f04f 0200 	mov.w	r2, #0
 800563c:	eb13 0b01 	adds.w	fp, r3, r1
 8005640:	eb44 0c02 	adc.w	ip, r4, r2
 8005644:	4658      	mov	r0, fp
 8005646:	4661      	mov	r1, ip
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f04f 0400 	mov.w	r4, #0
 8005650:	461a      	mov	r2, r3
 8005652:	4623      	mov	r3, r4
 8005654:	f7fa fdba 	bl	80001cc <__aeabi_uldivmod>
 8005658:	4603      	mov	r3, r0
 800565a:	460c      	mov	r4, r1
 800565c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800565e:	e03e      	b.n	80056de <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8005660:	f7fe fab0 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 8005664:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	4619      	mov	r1, r3
 800566a:	f04f 0200 	mov.w	r2, #0
 800566e:	f04f 0300 	mov.w	r3, #0
 8005672:	f04f 0400 	mov.w	r4, #0
 8005676:	0214      	lsls	r4, r2, #8
 8005678:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800567c:	020b      	lsls	r3, r1, #8
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6852      	ldr	r2, [r2, #4]
 8005682:	0852      	lsrs	r2, r2, #1
 8005684:	4611      	mov	r1, r2
 8005686:	f04f 0200 	mov.w	r2, #0
 800568a:	eb13 0b01 	adds.w	fp, r3, r1
 800568e:	eb44 0c02 	adc.w	ip, r4, r2
 8005692:	4658      	mov	r0, fp
 8005694:	4661      	mov	r1, ip
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f04f 0400 	mov.w	r4, #0
 800569e:	461a      	mov	r2, r3
 80056a0:	4623      	mov	r3, r4
 80056a2:	f7fa fd93 	bl	80001cc <__aeabi_uldivmod>
 80056a6:	4603      	mov	r3, r0
 80056a8:	460c      	mov	r4, r1
 80056aa:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80056ac:	e017      	b.n	80056de <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	085b      	lsrs	r3, r3, #1
 80056b4:	f04f 0400 	mov.w	r4, #0
 80056b8:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80056bc:	f144 0100 	adc.w	r1, r4, #0
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f04f 0400 	mov.w	r4, #0
 80056c8:	461a      	mov	r2, r3
 80056ca:	4623      	mov	r3, r4
 80056cc:	f7fa fd7e 	bl	80001cc <__aeabi_uldivmod>
 80056d0:	4603      	mov	r3, r0
 80056d2:	460c      	mov	r4, r1
 80056d4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80056d6:	e002      	b.n	80056de <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	76fb      	strb	r3, [r7, #27]
            break;
 80056dc:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056e4:	d308      	bcc.n	80056f8 <UART_SetConfig+0x410>
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056ec:	d204      	bcs.n	80056f8 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	69fa      	ldr	r2, [r7, #28]
 80056f4:	60da      	str	r2, [r3, #12]
 80056f6:	e0ff      	b.n	80058f8 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	76fb      	strb	r3, [r7, #27]
 80056fc:	e0fc      	b.n	80058f8 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005706:	f040 8083 	bne.w	8005810 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 800570a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800570e:	2b08      	cmp	r3, #8
 8005710:	d85e      	bhi.n	80057d0 <UART_SetConfig+0x4e8>
 8005712:	a201      	add	r2, pc, #4	; (adr r2, 8005718 <UART_SetConfig+0x430>)
 8005714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005718:	0800573d 	.word	0x0800573d
 800571c:	0800575d 	.word	0x0800575d
 8005720:	0800577d 	.word	0x0800577d
 8005724:	080057d1 	.word	0x080057d1
 8005728:	08005799 	.word	0x08005799
 800572c:	080057d1 	.word	0x080057d1
 8005730:	080057d1 	.word	0x080057d1
 8005734:	080057d1 	.word	0x080057d1
 8005738:	080057b9 	.word	0x080057b9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800573c:	f7fe fad8 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 8005740:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	005a      	lsls	r2, r3, #1
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	085b      	lsrs	r3, r3, #1
 800574c:	441a      	add	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	fbb2 f3f3 	udiv	r3, r2, r3
 8005756:	b29b      	uxth	r3, r3
 8005758:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800575a:	e03c      	b.n	80057d6 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800575c:	f7fe fade 	bl	8003d1c <HAL_RCC_GetPCLK2Freq>
 8005760:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	005a      	lsls	r2, r3, #1
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	085b      	lsrs	r3, r3, #1
 800576c:	441a      	add	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	fbb2 f3f3 	udiv	r3, r2, r3
 8005776:	b29b      	uxth	r3, r3
 8005778:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800577a:	e02c      	b.n	80057d6 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	085b      	lsrs	r3, r3, #1
 8005782:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005786:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	6852      	ldr	r2, [r2, #4]
 800578e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005792:	b29b      	uxth	r3, r3
 8005794:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005796:	e01e      	b.n	80057d6 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005798:	f7fe fa14 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 800579c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	005a      	lsls	r2, r3, #1
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	085b      	lsrs	r3, r3, #1
 80057a8:	441a      	add	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80057b6:	e00e      	b.n	80057d6 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	085b      	lsrs	r3, r3, #1
 80057be:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80057ce:	e002      	b.n	80057d6 <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	76fb      	strb	r3, [r7, #27]
        break;
 80057d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	2b0f      	cmp	r3, #15
 80057da:	d916      	bls.n	800580a <UART_SetConfig+0x522>
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057e2:	d212      	bcs.n	800580a <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	f023 030f 	bic.w	r3, r3, #15
 80057ec:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	085b      	lsrs	r3, r3, #1
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	89fb      	ldrh	r3, [r7, #14]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	89fa      	ldrh	r2, [r7, #14]
 8005806:	60da      	str	r2, [r3, #12]
 8005808:	e076      	b.n	80058f8 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	76fb      	strb	r3, [r7, #27]
 800580e:	e073      	b.n	80058f8 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 8005810:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005814:	2b08      	cmp	r3, #8
 8005816:	d85c      	bhi.n	80058d2 <UART_SetConfig+0x5ea>
 8005818:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <UART_SetConfig+0x538>)
 800581a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581e:	bf00      	nop
 8005820:	08005845 	.word	0x08005845
 8005824:	08005863 	.word	0x08005863
 8005828:	08005881 	.word	0x08005881
 800582c:	080058d3 	.word	0x080058d3
 8005830:	0800589d 	.word	0x0800589d
 8005834:	080058d3 	.word	0x080058d3
 8005838:	080058d3 	.word	0x080058d3
 800583c:	080058d3 	.word	0x080058d3
 8005840:	080058bb 	.word	0x080058bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005844:	f7fe fa54 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 8005848:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	085a      	lsrs	r2, r3, #1
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	441a      	add	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	fbb2 f3f3 	udiv	r3, r2, r3
 800585c:	b29b      	uxth	r3, r3
 800585e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005860:	e03a      	b.n	80058d8 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005862:	f7fe fa5b 	bl	8003d1c <HAL_RCC_GetPCLK2Freq>
 8005866:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	085a      	lsrs	r2, r3, #1
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	441a      	add	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	fbb2 f3f3 	udiv	r3, r2, r3
 800587a:	b29b      	uxth	r3, r3
 800587c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800587e:	e02b      	b.n	80058d8 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	085b      	lsrs	r3, r3, #1
 8005886:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800588a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	6852      	ldr	r2, [r2, #4]
 8005892:	fbb3 f3f2 	udiv	r3, r3, r2
 8005896:	b29b      	uxth	r3, r3
 8005898:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800589a:	e01d      	b.n	80058d8 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800589c:	f7fe f992 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 80058a0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	085a      	lsrs	r2, r3, #1
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	441a      	add	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80058b8:	e00e      	b.n	80058d8 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	085b      	lsrs	r3, r3, #1
 80058c0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80058d0:	e002      	b.n	80058d8 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	76fb      	strb	r3, [r7, #27]
        break;
 80058d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	2b0f      	cmp	r3, #15
 80058dc:	d90a      	bls.n	80058f4 <UART_SetConfig+0x60c>
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058e4:	d206      	bcs.n	80058f4 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	69fa      	ldr	r2, [r7, #28]
 80058ec:	60da      	str	r2, [r3, #12]
 80058ee:	e003      	b.n	80058f8 <UART_SetConfig+0x610>
 80058f0:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005904:	7efb      	ldrb	r3, [r7, #27]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3728      	adds	r7, #40	; 0x28
 800590a:	46bd      	mov	sp, r7
 800590c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08005910 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00a      	beq.n	800593a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00a      	beq.n	800597e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	430a      	orrs	r2, r1
 800597c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	f003 0308 	and.w	r3, r3, #8
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00a      	beq.n	80059a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	f003 0310 	and.w	r3, r3, #16
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00a      	beq.n	80059c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	f003 0320 	and.w	r3, r3, #32
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d01a      	beq.n	8005a26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a0e:	d10a      	bne.n	8005a26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	430a      	orrs	r2, r1
 8005a46:	605a      	str	r2, [r3, #4]
  }
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af02      	add	r7, sp, #8
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005a62:	f7fb ff4f 	bl	8001904 <HAL_GetTick>
 8005a66:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0308 	and.w	r3, r3, #8
 8005a72:	2b08      	cmp	r3, #8
 8005a74:	d10e      	bne.n	8005a94 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f82a 	bl	8005ade <UART_WaitOnFlagUntilTimeout>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e020      	b.n	8005ad6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0304 	and.w	r3, r3, #4
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d10e      	bne.n	8005ac0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aa2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f814 	bl	8005ade <UART_WaitOnFlagUntilTimeout>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d001      	beq.n	8005ac0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e00a      	b.n	8005ad6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b084      	sub	sp, #16
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	60f8      	str	r0, [r7, #12]
 8005ae6:	60b9      	str	r1, [r7, #8]
 8005ae8:	603b      	str	r3, [r7, #0]
 8005aea:	4613      	mov	r3, r2
 8005aec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aee:	e05d      	b.n	8005bac <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af6:	d059      	beq.n	8005bac <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005af8:	f7fb ff04 	bl	8001904 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d302      	bcc.n	8005b0e <UART_WaitOnFlagUntilTimeout+0x30>
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d11b      	bne.n	8005b46 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b1c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0201 	bic.w	r2, r2, #1
 8005b2c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2220      	movs	r2, #32
 8005b32:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2220      	movs	r2, #32
 8005b38:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e042      	b.n	8005bcc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0304 	and.w	r3, r3, #4
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d02b      	beq.n	8005bac <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b62:	d123      	bne.n	8005bac <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b6c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b7c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0201 	bic.w	r2, r2, #1
 8005b8c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2220      	movs	r2, #32
 8005b92:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2220      	movs	r2, #32
 8005b98:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e00f      	b.n	8005bcc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	69da      	ldr	r2, [r3, #28]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	bf0c      	ite	eq
 8005bbc:	2301      	moveq	r3, #1
 8005bbe:	2300      	movne	r3, #0
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	79fb      	ldrb	r3, [r7, #7]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d092      	beq.n	8005af0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005bea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689a      	ldr	r2, [r3, #8]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0201 	bic.w	r2, r2, #1
 8005bfa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f7ff fb4e 	bl	80052d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c38:	bf00      	nop
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c56:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff fb2b 	bl	80052c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c6a:	bf00      	nop
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b084      	sub	sp, #16
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c80:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c86:	2b22      	cmp	r3, #34	; 0x22
 8005c88:	d13a      	bne.n	8005d00 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005c90:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c92:	89bb      	ldrh	r3, [r7, #12]
 8005c94:	b2d9      	uxtb	r1, r3
 8005c96:	89fb      	ldrh	r3, [r7, #14]
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9e:	400a      	ands	r2, r1
 8005ca0:	b2d2      	uxtb	r2, r2
 8005ca2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d123      	bne.n	8005d14 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005cda:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689a      	ldr	r2, [r3, #8]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 0201 	bic.w	r2, r2, #1
 8005cea:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7fb fb9f 	bl	800143c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cfe:	e009      	b.n	8005d14 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	8b1b      	ldrh	r3, [r3, #24]
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f042 0208 	orr.w	r2, r2, #8
 8005d10:	b292      	uxth	r2, r2
 8005d12:	831a      	strh	r2, [r3, #24]
}
 8005d14:	bf00      	nop
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d2a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d30:	2b22      	cmp	r3, #34	; 0x22
 8005d32:	d13a      	bne.n	8005daa <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d3a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d40:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005d42:	89ba      	ldrh	r2, [r7, #12]
 8005d44:	89fb      	ldrh	r3, [r7, #14]
 8005d46:	4013      	ands	r3, r2
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d52:	1c9a      	adds	r2, r3, #2
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	3b01      	subs	r3, #1
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d123      	bne.n	8005dbe <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005d84:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 0201 	bic.w	r2, r2, #1
 8005d94:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7fb fb4a 	bl	800143c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005da8:	e009      	b.n	8005dbe <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	8b1b      	ldrh	r3, [r3, #24]
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 0208 	orr.w	r2, r2, #8
 8005dba:	b292      	uxth	r2, r2
 8005dbc:	831a      	strh	r2, [r3, #24]
}
 8005dbe:	bf00      	nop
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005dce:	bf00      	nop
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005dda:	b084      	sub	sp, #16
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	f107 0014 	add.w	r0, r7, #20
 8005de8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	b004      	add	sp, #16
 8005dfa:	4770      	bx	lr

08005dfc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e04:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005e08:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	4313      	orrs	r3, r2
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b085      	sub	sp, #20
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e36:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005e3a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	43db      	mvns	r3, r3
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005e7e:	b084      	sub	sp, #16
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	f107 0014 	add.w	r0, r7, #20
 8005e8c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f7ff ffa3 	bl	8005dfc <USB_EnableGlobalInt>

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3708      	adds	r7, #8
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ec2:	b004      	add	sp, #16
 8005ec4:	4770      	bx	lr
	...

08005ec8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ec8:	b490      	push	{r4, r7}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eec:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	78db      	ldrb	r3, [r3, #3]
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	d819      	bhi.n	8005f2a <USB_ActivateEndpoint+0x62>
 8005ef6:	a201      	add	r2, pc, #4	; (adr r2, 8005efc <USB_ActivateEndpoint+0x34>)
 8005ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efc:	08005f0d 	.word	0x08005f0d
 8005f00:	08005f21 	.word	0x08005f21
 8005f04:	08005f31 	.word	0x08005f31
 8005f08:	08005f17 	.word	0x08005f17
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005f0c:	89bb      	ldrh	r3, [r7, #12]
 8005f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f12:	81bb      	strh	r3, [r7, #12]
      break;
 8005f14:	e00d      	b.n	8005f32 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005f16:	89bb      	ldrh	r3, [r7, #12]
 8005f18:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005f1c:	81bb      	strh	r3, [r7, #12]
      break;
 8005f1e:	e008      	b.n	8005f32 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005f20:	89bb      	ldrh	r3, [r7, #12]
 8005f22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f26:	81bb      	strh	r3, [r7, #12]
      break;
 8005f28:	e003      	b.n	8005f32 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8005f2e:	e000      	b.n	8005f32 <USB_ActivateEndpoint+0x6a>
      break;
 8005f30:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	441a      	add	r2, r3
 8005f3c:	89bb      	ldrh	r3, [r7, #12]
 8005f3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	b21b      	sxth	r3, r3
 8005f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6a:	b21a      	sxth	r2, r3
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	b21b      	sxth	r3, r3
 8005f72:	4313      	orrs	r3, r2
 8005f74:	b21b      	sxth	r3, r3
 8005f76:	b29c      	uxth	r4, r3
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	441a      	add	r2, r3
 8005f82:	4b8a      	ldr	r3, [pc, #552]	; (80061ac <USB_ActivateEndpoint+0x2e4>)
 8005f84:	4323      	orrs	r3, r4
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	7b1b      	ldrb	r3, [r3, #12]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f040 8112 	bne.w	80061b8 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	785b      	ldrb	r3, [r3, #1]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d067      	beq.n	800606c <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005f9c:	687c      	ldr	r4, [r7, #4]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	441c      	add	r4, r3
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	00db      	lsls	r3, r3, #3
 8005fae:	4423      	add	r3, r4
 8005fb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fb4:	461c      	mov	r4, r3
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	88db      	ldrh	r3, [r3, #6]
 8005fba:	085b      	lsrs	r3, r3, #1
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	005b      	lsls	r3, r3, #1
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	881b      	ldrh	r3, [r3, #0]
 8005fd0:	b29c      	uxth	r4, r3
 8005fd2:	4623      	mov	r3, r4
 8005fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d014      	beq.n	8006006 <USB_ActivateEndpoint+0x13e>
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff2:	b29c      	uxth	r4, r3
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	441a      	add	r2, r3
 8005ffe:	4b6c      	ldr	r3, [pc, #432]	; (80061b0 <USB_ActivateEndpoint+0x2e8>)
 8006000:	4323      	orrs	r3, r4
 8006002:	b29b      	uxth	r3, r3
 8006004:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	78db      	ldrb	r3, [r3, #3]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d018      	beq.n	8006040 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4413      	add	r3, r2
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	b29b      	uxth	r3, r3
 800601c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006024:	b29c      	uxth	r4, r3
 8006026:	f084 0320 	eor.w	r3, r4, #32
 800602a:	b29c      	uxth	r4, r3
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	441a      	add	r2, r3
 8006036:	4b5d      	ldr	r3, [pc, #372]	; (80061ac <USB_ActivateEndpoint+0x2e4>)
 8006038:	4323      	orrs	r3, r4
 800603a:	b29b      	uxth	r3, r3
 800603c:	8013      	strh	r3, [r2, #0]
 800603e:	e22b      	b.n	8006498 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	b29b      	uxth	r3, r3
 800604e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006056:	b29c      	uxth	r4, r3
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	441a      	add	r2, r3
 8006062:	4b52      	ldr	r3, [pc, #328]	; (80061ac <USB_ActivateEndpoint+0x2e4>)
 8006064:	4323      	orrs	r3, r4
 8006066:	b29b      	uxth	r3, r3
 8006068:	8013      	strh	r3, [r2, #0]
 800606a:	e215      	b.n	8006498 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800606c:	687c      	ldr	r4, [r7, #4]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006074:	b29b      	uxth	r3, r3
 8006076:	441c      	add	r4, r3
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	00db      	lsls	r3, r3, #3
 800607e:	4423      	add	r3, r4
 8006080:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006084:	461c      	mov	r4, r3
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	88db      	ldrh	r3, [r3, #6]
 800608a:	085b      	lsrs	r3, r3, #1
 800608c:	b29b      	uxth	r3, r3
 800608e:	005b      	lsls	r3, r3, #1
 8006090:	b29b      	uxth	r3, r3
 8006092:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006094:	687c      	ldr	r4, [r7, #4]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800609c:	b29b      	uxth	r3, r3
 800609e:	441c      	add	r4, r3
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	4423      	add	r3, r4
 80060a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060ac:	461c      	mov	r4, r3
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10e      	bne.n	80060d4 <USB_ActivateEndpoint+0x20c>
 80060b6:	8823      	ldrh	r3, [r4, #0]
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060be:	b29b      	uxth	r3, r3
 80060c0:	8023      	strh	r3, [r4, #0]
 80060c2:	8823      	ldrh	r3, [r4, #0]
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	8023      	strh	r3, [r4, #0]
 80060d2:	e02d      	b.n	8006130 <USB_ActivateEndpoint+0x268>
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	2b3e      	cmp	r3, #62	; 0x3e
 80060da:	d812      	bhi.n	8006102 <USB_ActivateEndpoint+0x23a>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	085b      	lsrs	r3, r3, #1
 80060e2:	60bb      	str	r3, [r7, #8]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d002      	beq.n	80060f6 <USB_ActivateEndpoint+0x22e>
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	3301      	adds	r3, #1
 80060f4:	60bb      	str	r3, [r7, #8]
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	029b      	lsls	r3, r3, #10
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	8023      	strh	r3, [r4, #0]
 8006100:	e016      	b.n	8006130 <USB_ActivateEndpoint+0x268>
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	095b      	lsrs	r3, r3, #5
 8006108:	60bb      	str	r3, [r7, #8]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f003 031f 	and.w	r3, r3, #31
 8006112:	2b00      	cmp	r3, #0
 8006114:	d102      	bne.n	800611c <USB_ActivateEndpoint+0x254>
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	3b01      	subs	r3, #1
 800611a:	60bb      	str	r3, [r7, #8]
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	b29b      	uxth	r3, r3
 8006120:	029b      	lsls	r3, r3, #10
 8006122:	b29b      	uxth	r3, r3
 8006124:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800612c:	b29b      	uxth	r3, r3
 800612e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	b29c      	uxth	r4, r3
 800613e:	4623      	mov	r3, r4
 8006140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d014      	beq.n	8006172 <USB_ActivateEndpoint+0x2aa>
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	b29b      	uxth	r3, r3
 8006156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800615a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615e:	b29c      	uxth	r4, r3
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	441a      	add	r2, r3
 800616a:	4b12      	ldr	r3, [pc, #72]	; (80061b4 <USB_ActivateEndpoint+0x2ec>)
 800616c:	4323      	orrs	r3, r4
 800616e:	b29b      	uxth	r3, r3
 8006170:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	b29b      	uxth	r3, r3
 8006180:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006188:	b29c      	uxth	r4, r3
 800618a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800618e:	b29c      	uxth	r4, r3
 8006190:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006194:	b29c      	uxth	r4, r3
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	441a      	add	r2, r3
 80061a0:	4b02      	ldr	r3, [pc, #8]	; (80061ac <USB_ActivateEndpoint+0x2e4>)
 80061a2:	4323      	orrs	r3, r4
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	8013      	strh	r3, [r2, #0]
 80061a8:	e176      	b.n	8006498 <USB_ActivateEndpoint+0x5d0>
 80061aa:	bf00      	nop
 80061ac:	ffff8080 	.word	0xffff8080
 80061b0:	ffff80c0 	.word	0xffff80c0
 80061b4:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	881b      	ldrh	r3, [r3, #0]
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ce:	b29c      	uxth	r4, r3
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	441a      	add	r2, r3
 80061da:	4b96      	ldr	r3, [pc, #600]	; (8006434 <USB_ActivateEndpoint+0x56c>)
 80061dc:	4323      	orrs	r3, r4
 80061de:	b29b      	uxth	r3, r3
 80061e0:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80061e2:	687c      	ldr	r4, [r7, #4]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	441c      	add	r4, r3
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	00db      	lsls	r3, r3, #3
 80061f4:	4423      	add	r3, r4
 80061f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061fa:	461c      	mov	r4, r3
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	891b      	ldrh	r3, [r3, #8]
 8006200:	085b      	lsrs	r3, r3, #1
 8006202:	b29b      	uxth	r3, r3
 8006204:	005b      	lsls	r3, r3, #1
 8006206:	b29b      	uxth	r3, r3
 8006208:	8023      	strh	r3, [r4, #0]
 800620a:	687c      	ldr	r4, [r7, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006212:	b29b      	uxth	r3, r3
 8006214:	441c      	add	r4, r3
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	4423      	add	r3, r4
 800621e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006222:	461c      	mov	r4, r3
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	895b      	ldrh	r3, [r3, #10]
 8006228:	085b      	lsrs	r3, r3, #1
 800622a:	b29b      	uxth	r3, r3
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	b29b      	uxth	r3, r3
 8006230:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	785b      	ldrb	r3, [r3, #1]
 8006236:	2b00      	cmp	r3, #0
 8006238:	f040 8088 	bne.w	800634c <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	b29c      	uxth	r4, r3
 800624a:	4623      	mov	r3, r4
 800624c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d014      	beq.n	800627e <USB_ActivateEndpoint+0x3b6>
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	b29b      	uxth	r3, r3
 8006262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626a:	b29c      	uxth	r4, r3
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	441a      	add	r2, r3
 8006276:	4b70      	ldr	r3, [pc, #448]	; (8006438 <USB_ActivateEndpoint+0x570>)
 8006278:	4323      	orrs	r3, r4
 800627a:	b29b      	uxth	r3, r3
 800627c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	881b      	ldrh	r3, [r3, #0]
 800628a:	b29c      	uxth	r4, r3
 800628c:	4623      	mov	r3, r4
 800628e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006292:	2b00      	cmp	r3, #0
 8006294:	d014      	beq.n	80062c0 <USB_ActivateEndpoint+0x3f8>
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ac:	b29c      	uxth	r4, r3
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	441a      	add	r2, r3
 80062b8:	4b60      	ldr	r3, [pc, #384]	; (800643c <USB_ActivateEndpoint+0x574>)
 80062ba:	4323      	orrs	r3, r4
 80062bc:	b29b      	uxth	r3, r3
 80062be:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d6:	b29c      	uxth	r4, r3
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	441a      	add	r2, r3
 80062e2:	4b56      	ldr	r3, [pc, #344]	; (800643c <USB_ActivateEndpoint+0x574>)
 80062e4:	4323      	orrs	r3, r4
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006300:	b29c      	uxth	r4, r3
 8006302:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006306:	b29c      	uxth	r4, r3
 8006308:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800630c:	b29c      	uxth	r4, r3
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	441a      	add	r2, r3
 8006318:	4b49      	ldr	r3, [pc, #292]	; (8006440 <USB_ActivateEndpoint+0x578>)
 800631a:	4323      	orrs	r3, r4
 800631c:	b29b      	uxth	r3, r3
 800631e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	4413      	add	r3, r2
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	b29b      	uxth	r3, r3
 800632e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006332:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006336:	b29c      	uxth	r4, r3
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	441a      	add	r2, r3
 8006342:	4b3f      	ldr	r3, [pc, #252]	; (8006440 <USB_ActivateEndpoint+0x578>)
 8006344:	4323      	orrs	r3, r4
 8006346:	b29b      	uxth	r3, r3
 8006348:	8013      	strh	r3, [r2, #0]
 800634a:	e0a5      	b.n	8006498 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	b29c      	uxth	r4, r3
 800635a:	4623      	mov	r3, r4
 800635c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d014      	beq.n	800638e <USB_ActivateEndpoint+0x4c6>
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4413      	add	r3, r2
 800636e:	881b      	ldrh	r3, [r3, #0]
 8006370:	b29b      	uxth	r3, r3
 8006372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637a:	b29c      	uxth	r4, r3
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	441a      	add	r2, r3
 8006386:	4b2c      	ldr	r3, [pc, #176]	; (8006438 <USB_ActivateEndpoint+0x570>)
 8006388:	4323      	orrs	r3, r4
 800638a:	b29b      	uxth	r3, r3
 800638c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	b29c      	uxth	r4, r3
 800639c:	4623      	mov	r3, r4
 800639e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d014      	beq.n	80063d0 <USB_ActivateEndpoint+0x508>
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063bc:	b29c      	uxth	r4, r3
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	441a      	add	r2, r3
 80063c8:	4b1c      	ldr	r3, [pc, #112]	; (800643c <USB_ActivateEndpoint+0x574>)
 80063ca:	4323      	orrs	r3, r4
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e6:	b29c      	uxth	r4, r3
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	441a      	add	r2, r3
 80063f2:	4b11      	ldr	r3, [pc, #68]	; (8006438 <USB_ActivateEndpoint+0x570>)
 80063f4:	4323      	orrs	r3, r4
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	78db      	ldrb	r3, [r3, #3]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d020      	beq.n	8006444 <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	881b      	ldrh	r3, [r3, #0]
 800640e:	b29b      	uxth	r3, r3
 8006410:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006418:	b29c      	uxth	r4, r3
 800641a:	f084 0320 	eor.w	r3, r4, #32
 800641e:	b29c      	uxth	r4, r3
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	441a      	add	r2, r3
 800642a:	4b05      	ldr	r3, [pc, #20]	; (8006440 <USB_ActivateEndpoint+0x578>)
 800642c:	4323      	orrs	r3, r4
 800642e:	b29b      	uxth	r3, r3
 8006430:	8013      	strh	r3, [r2, #0]
 8006432:	e01c      	b.n	800646e <USB_ActivateEndpoint+0x5a6>
 8006434:	ffff8180 	.word	0xffff8180
 8006438:	ffffc080 	.word	0xffffc080
 800643c:	ffff80c0 	.word	0xffff80c0
 8006440:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	881b      	ldrh	r3, [r3, #0]
 8006450:	b29b      	uxth	r3, r3
 8006452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800645a:	b29c      	uxth	r4, r3
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	441a      	add	r2, r3
 8006466:	4b0f      	ldr	r3, [pc, #60]	; (80064a4 <USB_ActivateEndpoint+0x5dc>)
 8006468:	4323      	orrs	r3, r4
 800646a:	b29b      	uxth	r3, r3
 800646c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	881b      	ldrh	r3, [r3, #0]
 800647a:	b29b      	uxth	r3, r3
 800647c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006484:	b29c      	uxth	r4, r3
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	441a      	add	r2, r3
 8006490:	4b04      	ldr	r3, [pc, #16]	; (80064a4 <USB_ActivateEndpoint+0x5dc>)
 8006492:	4323      	orrs	r3, r4
 8006494:	b29b      	uxth	r3, r3
 8006496:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006498:	7bfb      	ldrb	r3, [r7, #15]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bc90      	pop	{r4, r7}
 80064a2:	4770      	bx	lr
 80064a4:	ffff8080 	.word	0xffff8080

080064a8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064a8:	b490      	push	{r4, r7}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	7b1b      	ldrb	r3, [r3, #12]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d171      	bne.n	800659e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	785b      	ldrb	r3, [r3, #1]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d036      	beq.n	8006530 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	b29c      	uxth	r4, r3
 80064d0:	4623      	mov	r3, r4
 80064d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d014      	beq.n	8006504 <USB_DeactivateEndpoint+0x5c>
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4413      	add	r3, r2
 80064e4:	881b      	ldrh	r3, [r3, #0]
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f0:	b29c      	uxth	r4, r3
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	441a      	add	r2, r3
 80064fc:	4b6b      	ldr	r3, [pc, #428]	; (80066ac <USB_DeactivateEndpoint+0x204>)
 80064fe:	4323      	orrs	r3, r4
 8006500:	b29b      	uxth	r3, r3
 8006502:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	b29b      	uxth	r3, r3
 8006512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800651a:	b29c      	uxth	r4, r3
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	441a      	add	r2, r3
 8006526:	4b62      	ldr	r3, [pc, #392]	; (80066b0 <USB_DeactivateEndpoint+0x208>)
 8006528:	4323      	orrs	r3, r4
 800652a:	b29b      	uxth	r3, r3
 800652c:	8013      	strh	r3, [r2, #0]
 800652e:	e144      	b.n	80067ba <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	b29c      	uxth	r4, r3
 800653e:	4623      	mov	r3, r4
 8006540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d014      	beq.n	8006572 <USB_DeactivateEndpoint+0xca>
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	b29b      	uxth	r3, r3
 8006556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800655a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800655e:	b29c      	uxth	r4, r3
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	441a      	add	r2, r3
 800656a:	4b52      	ldr	r3, [pc, #328]	; (80066b4 <USB_DeactivateEndpoint+0x20c>)
 800656c:	4323      	orrs	r3, r4
 800656e:	b29b      	uxth	r3, r3
 8006570:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	b29b      	uxth	r3, r3
 8006580:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006588:	b29c      	uxth	r4, r3
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	441a      	add	r2, r3
 8006594:	4b46      	ldr	r3, [pc, #280]	; (80066b0 <USB_DeactivateEndpoint+0x208>)
 8006596:	4323      	orrs	r3, r4
 8006598:	b29b      	uxth	r3, r3
 800659a:	8013      	strh	r3, [r2, #0]
 800659c:	e10d      	b.n	80067ba <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	785b      	ldrb	r3, [r3, #1]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f040 8088 	bne.w	80066b8 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	b29c      	uxth	r4, r3
 80065b6:	4623      	mov	r3, r4
 80065b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d014      	beq.n	80065ea <USB_DeactivateEndpoint+0x142>
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4413      	add	r3, r2
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d6:	b29c      	uxth	r4, r3
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	441a      	add	r2, r3
 80065e2:	4b34      	ldr	r3, [pc, #208]	; (80066b4 <USB_DeactivateEndpoint+0x20c>)
 80065e4:	4323      	orrs	r3, r4
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	b29c      	uxth	r4, r3
 80065f8:	4623      	mov	r3, r4
 80065fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d014      	beq.n	800662c <USB_DeactivateEndpoint+0x184>
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	b29b      	uxth	r3, r3
 8006610:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006618:	b29c      	uxth	r4, r3
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	441a      	add	r2, r3
 8006624:	4b21      	ldr	r3, [pc, #132]	; (80066ac <USB_DeactivateEndpoint+0x204>)
 8006626:	4323      	orrs	r3, r4
 8006628:	b29b      	uxth	r3, r3
 800662a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	b29b      	uxth	r3, r3
 800663a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800663e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006642:	b29c      	uxth	r4, r3
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	441a      	add	r2, r3
 800664e:	4b17      	ldr	r3, [pc, #92]	; (80066ac <USB_DeactivateEndpoint+0x204>)
 8006650:	4323      	orrs	r3, r4
 8006652:	b29b      	uxth	r3, r3
 8006654:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	b29b      	uxth	r3, r3
 8006664:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666c:	b29c      	uxth	r4, r3
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	441a      	add	r2, r3
 8006678:	4b0d      	ldr	r3, [pc, #52]	; (80066b0 <USB_DeactivateEndpoint+0x208>)
 800667a:	4323      	orrs	r3, r4
 800667c:	b29b      	uxth	r3, r3
 800667e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	b29b      	uxth	r3, r3
 800668e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006692:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006696:	b29c      	uxth	r4, r3
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	441a      	add	r2, r3
 80066a2:	4b03      	ldr	r3, [pc, #12]	; (80066b0 <USB_DeactivateEndpoint+0x208>)
 80066a4:	4323      	orrs	r3, r4
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	8013      	strh	r3, [r2, #0]
 80066aa:	e086      	b.n	80067ba <USB_DeactivateEndpoint+0x312>
 80066ac:	ffff80c0 	.word	0xffff80c0
 80066b0:	ffff8080 	.word	0xffff8080
 80066b4:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	b29c      	uxth	r4, r3
 80066c6:	4623      	mov	r3, r4
 80066c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d014      	beq.n	80066fa <USB_DeactivateEndpoint+0x252>
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	b29b      	uxth	r3, r3
 80066de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e6:	b29c      	uxth	r4, r3
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	441a      	add	r2, r3
 80066f2:	4b35      	ldr	r3, [pc, #212]	; (80067c8 <USB_DeactivateEndpoint+0x320>)
 80066f4:	4323      	orrs	r3, r4
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	b29c      	uxth	r4, r3
 8006708:	4623      	mov	r3, r4
 800670a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670e:	2b00      	cmp	r3, #0
 8006710:	d014      	beq.n	800673c <USB_DeactivateEndpoint+0x294>
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	b29b      	uxth	r3, r3
 8006720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006728:	b29c      	uxth	r4, r3
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	441a      	add	r2, r3
 8006734:	4b25      	ldr	r3, [pc, #148]	; (80067cc <USB_DeactivateEndpoint+0x324>)
 8006736:	4323      	orrs	r3, r4
 8006738:	b29b      	uxth	r3, r3
 800673a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	b29b      	uxth	r3, r3
 800674a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800674e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006752:	b29c      	uxth	r4, r3
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	441a      	add	r2, r3
 800675e:	4b1a      	ldr	r3, [pc, #104]	; (80067c8 <USB_DeactivateEndpoint+0x320>)
 8006760:	4323      	orrs	r3, r4
 8006762:	b29b      	uxth	r3, r3
 8006764:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4413      	add	r3, r2
 8006770:	881b      	ldrh	r3, [r3, #0]
 8006772:	b29b      	uxth	r3, r3
 8006774:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800677c:	b29c      	uxth	r4, r3
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	441a      	add	r2, r3
 8006788:	4b11      	ldr	r3, [pc, #68]	; (80067d0 <USB_DeactivateEndpoint+0x328>)
 800678a:	4323      	orrs	r3, r4
 800678c:	b29b      	uxth	r3, r3
 800678e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	881b      	ldrh	r3, [r3, #0]
 800679c:	b29b      	uxth	r3, r3
 800679e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a6:	b29c      	uxth	r4, r3
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	441a      	add	r2, r3
 80067b2:	4b07      	ldr	r3, [pc, #28]	; (80067d0 <USB_DeactivateEndpoint+0x328>)
 80067b4:	4323      	orrs	r3, r4
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bc90      	pop	{r4, r7}
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	ffffc080 	.word	0xffffc080
 80067cc:	ffff80c0 	.word	0xffff80c0
 80067d0:	ffff8080 	.word	0xffff8080

080067d4 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067d4:	b590      	push	{r4, r7, lr}
 80067d6:	b08d      	sub	sp, #52	; 0x34
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	785b      	ldrb	r3, [r3, #1]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	f040 8160 	bne.w	8006aa8 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	699a      	ldr	r2, [r3, #24]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d909      	bls.n	8006808 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	699a      	ldr	r2, [r3, #24]
 80067fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006800:	1ad2      	subs	r2, r2, r3
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	619a      	str	r2, [r3, #24]
 8006806:	e005      	b.n	8006814 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2200      	movs	r2, #0
 8006812:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	7b1b      	ldrb	r3, [r3, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d119      	bne.n	8006850 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	6959      	ldr	r1, [r3, #20]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	88da      	ldrh	r2, [r3, #6]
 8006824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006826:	b29b      	uxth	r3, r3
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fbbd 	bl	8006fa8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800682e:	687c      	ldr	r4, [r7, #4]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006836:	b29b      	uxth	r3, r3
 8006838:	441c      	add	r4, r3
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	00db      	lsls	r3, r3, #3
 8006840:	4423      	add	r3, r4
 8006842:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006846:	461c      	mov	r4, r3
 8006848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684a:	b29b      	uxth	r3, r3
 800684c:	8023      	strh	r3, [r4, #0]
 800684e:	e10f      	b.n	8006a70 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	881b      	ldrh	r3, [r3, #0]
 800685c:	b29b      	uxth	r3, r3
 800685e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006862:	2b00      	cmp	r3, #0
 8006864:	d065      	beq.n	8006932 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006866:	687c      	ldr	r4, [r7, #4]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	785b      	ldrb	r3, [r3, #1]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d148      	bne.n	8006902 <USB_EPStartXfer+0x12e>
 8006870:	687c      	ldr	r4, [r7, #4]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006878:	b29b      	uxth	r3, r3
 800687a:	441c      	add	r4, r3
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	00db      	lsls	r3, r3, #3
 8006882:	4423      	add	r3, r4
 8006884:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006888:	461c      	mov	r4, r3
 800688a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10e      	bne.n	80068ae <USB_EPStartXfer+0xda>
 8006890:	8823      	ldrh	r3, [r4, #0]
 8006892:	b29b      	uxth	r3, r3
 8006894:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006898:	b29b      	uxth	r3, r3
 800689a:	8023      	strh	r3, [r4, #0]
 800689c:	8823      	ldrh	r3, [r4, #0]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	8023      	strh	r3, [r4, #0]
 80068ac:	e03d      	b.n	800692a <USB_EPStartXfer+0x156>
 80068ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b0:	2b3e      	cmp	r3, #62	; 0x3e
 80068b2:	d810      	bhi.n	80068d6 <USB_EPStartXfer+0x102>
 80068b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b6:	085b      	lsrs	r3, r3, #1
 80068b8:	627b      	str	r3, [r7, #36]	; 0x24
 80068ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d002      	beq.n	80068ca <USB_EPStartXfer+0xf6>
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	3301      	adds	r3, #1
 80068c8:	627b      	str	r3, [r7, #36]	; 0x24
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	029b      	lsls	r3, r3, #10
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	8023      	strh	r3, [r4, #0]
 80068d4:	e029      	b.n	800692a <USB_EPStartXfer+0x156>
 80068d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d8:	095b      	lsrs	r3, r3, #5
 80068da:	627b      	str	r3, [r7, #36]	; 0x24
 80068dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068de:	f003 031f 	and.w	r3, r3, #31
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d102      	bne.n	80068ec <USB_EPStartXfer+0x118>
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	3b01      	subs	r3, #1
 80068ea:	627b      	str	r3, [r7, #36]	; 0x24
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	029b      	lsls	r3, r3, #10
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	8023      	strh	r3, [r4, #0]
 8006900:	e013      	b.n	800692a <USB_EPStartXfer+0x156>
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	785b      	ldrb	r3, [r3, #1]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d10f      	bne.n	800692a <USB_EPStartXfer+0x156>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006910:	b29b      	uxth	r3, r3
 8006912:	441c      	add	r4, r3
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	00db      	lsls	r3, r3, #3
 800691a:	4423      	add	r3, r4
 800691c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006920:	60fb      	str	r3, [r7, #12]
 8006922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006924:	b29a      	uxth	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	895b      	ldrh	r3, [r3, #10]
 800692e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006930:	e063      	b.n	80069fa <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	785b      	ldrb	r3, [r3, #1]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d148      	bne.n	80069cc <USB_EPStartXfer+0x1f8>
 800693a:	687c      	ldr	r4, [r7, #4]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006942:	b29b      	uxth	r3, r3
 8006944:	441c      	add	r4, r3
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	00db      	lsls	r3, r3, #3
 800694c:	4423      	add	r3, r4
 800694e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006952:	461c      	mov	r4, r3
 8006954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10e      	bne.n	8006978 <USB_EPStartXfer+0x1a4>
 800695a:	8823      	ldrh	r3, [r4, #0]
 800695c:	b29b      	uxth	r3, r3
 800695e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006962:	b29b      	uxth	r3, r3
 8006964:	8023      	strh	r3, [r4, #0]
 8006966:	8823      	ldrh	r3, [r4, #0]
 8006968:	b29b      	uxth	r3, r3
 800696a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800696e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006972:	b29b      	uxth	r3, r3
 8006974:	8023      	strh	r3, [r4, #0]
 8006976:	e03d      	b.n	80069f4 <USB_EPStartXfer+0x220>
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	2b3e      	cmp	r3, #62	; 0x3e
 800697c:	d810      	bhi.n	80069a0 <USB_EPStartXfer+0x1cc>
 800697e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006980:	085b      	lsrs	r3, r3, #1
 8006982:	623b      	str	r3, [r7, #32]
 8006984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	d002      	beq.n	8006994 <USB_EPStartXfer+0x1c0>
 800698e:	6a3b      	ldr	r3, [r7, #32]
 8006990:	3301      	adds	r3, #1
 8006992:	623b      	str	r3, [r7, #32]
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	b29b      	uxth	r3, r3
 8006998:	029b      	lsls	r3, r3, #10
 800699a:	b29b      	uxth	r3, r3
 800699c:	8023      	strh	r3, [r4, #0]
 800699e:	e029      	b.n	80069f4 <USB_EPStartXfer+0x220>
 80069a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a2:	095b      	lsrs	r3, r3, #5
 80069a4:	623b      	str	r3, [r7, #32]
 80069a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a8:	f003 031f 	and.w	r3, r3, #31
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d102      	bne.n	80069b6 <USB_EPStartXfer+0x1e2>
 80069b0:	6a3b      	ldr	r3, [r7, #32]
 80069b2:	3b01      	subs	r3, #1
 80069b4:	623b      	str	r3, [r7, #32]
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	029b      	lsls	r3, r3, #10
 80069bc:	b29b      	uxth	r3, r3
 80069be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	8023      	strh	r3, [r4, #0]
 80069ca:	e013      	b.n	80069f4 <USB_EPStartXfer+0x220>
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	785b      	ldrb	r3, [r3, #1]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d10f      	bne.n	80069f4 <USB_EPStartXfer+0x220>
 80069d4:	687c      	ldr	r4, [r7, #4]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069dc:	b29b      	uxth	r3, r3
 80069de:	441c      	add	r4, r3
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	00db      	lsls	r3, r3, #3
 80069e6:	4423      	add	r3, r4
 80069e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069ec:	461c      	mov	r4, r3
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	891b      	ldrh	r3, [r3, #8]
 80069f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	6959      	ldr	r1, [r3, #20]
 80069fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 facf 	bl	8006fa8 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	785b      	ldrb	r3, [r3, #1]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d115      	bne.n	8006a3e <USB_EPStartXfer+0x26a>
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a28:	b29c      	uxth	r4, r3
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	441a      	add	r2, r3
 8006a34:	4b9a      	ldr	r3, [pc, #616]	; (8006ca0 <USB_EPStartXfer+0x4cc>)
 8006a36:	4323      	orrs	r3, r4
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	8013      	strh	r3, [r2, #0]
 8006a3c:	e018      	b.n	8006a70 <USB_EPStartXfer+0x29c>
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	785b      	ldrb	r3, [r3, #1]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d114      	bne.n	8006a70 <USB_EPStartXfer+0x29c>
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5c:	b29c      	uxth	r4, r3
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	441a      	add	r2, r3
 8006a68:	4b8e      	ldr	r3, [pc, #568]	; (8006ca4 <USB_EPStartXfer+0x4d0>)
 8006a6a:	4323      	orrs	r3, r4
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a86:	b29c      	uxth	r4, r3
 8006a88:	f084 0310 	eor.w	r3, r4, #16
 8006a8c:	b29c      	uxth	r4, r3
 8006a8e:	f084 0320 	eor.w	r3, r4, #32
 8006a92:	b29c      	uxth	r4, r3
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	441a      	add	r2, r3
 8006a9e:	4b82      	ldr	r3, [pc, #520]	; (8006ca8 <USB_EPStartXfer+0x4d4>)
 8006aa0:	4323      	orrs	r3, r4
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	8013      	strh	r3, [r2, #0]
 8006aa6:	e146      	b.n	8006d36 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	699a      	ldr	r2, [r3, #24]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d909      	bls.n	8006ac8 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	699a      	ldr	r2, [r3, #24]
 8006abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac0:	1ad2      	subs	r2, r2, r3
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	619a      	str	r2, [r3, #24]
 8006ac6:	e005      	b.n	8006ad4 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	7b1b      	ldrb	r3, [r3, #12]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d148      	bne.n	8006b6e <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006adc:	687c      	ldr	r4, [r7, #4]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	441c      	add	r4, r3
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	00db      	lsls	r3, r3, #3
 8006aee:	4423      	add	r3, r4
 8006af0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006af4:	461c      	mov	r4, r3
 8006af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10e      	bne.n	8006b1a <USB_EPStartXfer+0x346>
 8006afc:	8823      	ldrh	r3, [r4, #0]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	8023      	strh	r3, [r4, #0]
 8006b08:	8823      	ldrh	r3, [r4, #0]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	8023      	strh	r3, [r4, #0]
 8006b18:	e0f2      	b.n	8006d00 <USB_EPStartXfer+0x52c>
 8006b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1c:	2b3e      	cmp	r3, #62	; 0x3e
 8006b1e:	d810      	bhi.n	8006b42 <USB_EPStartXfer+0x36e>
 8006b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b22:	085b      	lsrs	r3, r3, #1
 8006b24:	61fb      	str	r3, [r7, #28]
 8006b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b28:	f003 0301 	and.w	r3, r3, #1
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d002      	beq.n	8006b36 <USB_EPStartXfer+0x362>
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	3301      	adds	r3, #1
 8006b34:	61fb      	str	r3, [r7, #28]
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	029b      	lsls	r3, r3, #10
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	8023      	strh	r3, [r4, #0]
 8006b40:	e0de      	b.n	8006d00 <USB_EPStartXfer+0x52c>
 8006b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b44:	095b      	lsrs	r3, r3, #5
 8006b46:	61fb      	str	r3, [r7, #28]
 8006b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4a:	f003 031f 	and.w	r3, r3, #31
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d102      	bne.n	8006b58 <USB_EPStartXfer+0x384>
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	3b01      	subs	r3, #1
 8006b56:	61fb      	str	r3, [r7, #28]
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	029b      	lsls	r3, r3, #10
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	8023      	strh	r3, [r4, #0]
 8006b6c:	e0c8      	b.n	8006d00 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	785b      	ldrb	r3, [r3, #1]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d148      	bne.n	8006c08 <USB_EPStartXfer+0x434>
 8006b76:	687c      	ldr	r4, [r7, #4]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	441c      	add	r4, r3
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	00db      	lsls	r3, r3, #3
 8006b88:	4423      	add	r3, r4
 8006b8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b8e:	461c      	mov	r4, r3
 8006b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10e      	bne.n	8006bb4 <USB_EPStartXfer+0x3e0>
 8006b96:	8823      	ldrh	r3, [r4, #0]
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	8023      	strh	r3, [r4, #0]
 8006ba2:	8823      	ldrh	r3, [r4, #0]
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006baa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	8023      	strh	r3, [r4, #0]
 8006bb2:	e03d      	b.n	8006c30 <USB_EPStartXfer+0x45c>
 8006bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb6:	2b3e      	cmp	r3, #62	; 0x3e
 8006bb8:	d810      	bhi.n	8006bdc <USB_EPStartXfer+0x408>
 8006bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbc:	085b      	lsrs	r3, r3, #1
 8006bbe:	61bb      	str	r3, [r7, #24]
 8006bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d002      	beq.n	8006bd0 <USB_EPStartXfer+0x3fc>
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	61bb      	str	r3, [r7, #24]
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	029b      	lsls	r3, r3, #10
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	8023      	strh	r3, [r4, #0]
 8006bda:	e029      	b.n	8006c30 <USB_EPStartXfer+0x45c>
 8006bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bde:	095b      	lsrs	r3, r3, #5
 8006be0:	61bb      	str	r3, [r7, #24]
 8006be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be4:	f003 031f 	and.w	r3, r3, #31
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d102      	bne.n	8006bf2 <USB_EPStartXfer+0x41e>
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	61bb      	str	r3, [r7, #24]
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	029b      	lsls	r3, r3, #10
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	8023      	strh	r3, [r4, #0]
 8006c06:	e013      	b.n	8006c30 <USB_EPStartXfer+0x45c>
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	785b      	ldrb	r3, [r3, #1]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d10f      	bne.n	8006c30 <USB_EPStartXfer+0x45c>
 8006c10:	687c      	ldr	r4, [r7, #4]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	441c      	add	r4, r3
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	00db      	lsls	r3, r3, #3
 8006c22:	4423      	add	r3, r4
 8006c24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c28:	461c      	mov	r4, r3
 8006c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	8023      	strh	r3, [r4, #0]
 8006c30:	687c      	ldr	r4, [r7, #4]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	785b      	ldrb	r3, [r3, #1]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d14e      	bne.n	8006cd8 <USB_EPStartXfer+0x504>
 8006c3a:	687c      	ldr	r4, [r7, #4]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	441c      	add	r4, r3
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	00db      	lsls	r3, r3, #3
 8006c4c:	4423      	add	r3, r4
 8006c4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c52:	461c      	mov	r4, r3
 8006c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10e      	bne.n	8006c78 <USB_EPStartXfer+0x4a4>
 8006c5a:	8823      	ldrh	r3, [r4, #0]
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	8023      	strh	r3, [r4, #0]
 8006c66:	8823      	ldrh	r3, [r4, #0]
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	8023      	strh	r3, [r4, #0]
 8006c76:	e043      	b.n	8006d00 <USB_EPStartXfer+0x52c>
 8006c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7a:	2b3e      	cmp	r3, #62	; 0x3e
 8006c7c:	d816      	bhi.n	8006cac <USB_EPStartXfer+0x4d8>
 8006c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c80:	085b      	lsrs	r3, r3, #1
 8006c82:	617b      	str	r3, [r7, #20]
 8006c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d002      	beq.n	8006c94 <USB_EPStartXfer+0x4c0>
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	3301      	adds	r3, #1
 8006c92:	617b      	str	r3, [r7, #20]
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	029b      	lsls	r3, r3, #10
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	8023      	strh	r3, [r4, #0]
 8006c9e:	e02f      	b.n	8006d00 <USB_EPStartXfer+0x52c>
 8006ca0:	ffff80c0 	.word	0xffff80c0
 8006ca4:	ffffc080 	.word	0xffffc080
 8006ca8:	ffff8080 	.word	0xffff8080
 8006cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cae:	095b      	lsrs	r3, r3, #5
 8006cb0:	617b      	str	r3, [r7, #20]
 8006cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb4:	f003 031f 	and.w	r3, r3, #31
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d102      	bne.n	8006cc2 <USB_EPStartXfer+0x4ee>
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	617b      	str	r3, [r7, #20]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	029b      	lsls	r3, r3, #10
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	8023      	strh	r3, [r4, #0]
 8006cd6:	e013      	b.n	8006d00 <USB_EPStartXfer+0x52c>
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	785b      	ldrb	r3, [r3, #1]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d10f      	bne.n	8006d00 <USB_EPStartXfer+0x52c>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	441c      	add	r4, r3
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	4423      	add	r3, r4
 8006cf2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006cf6:	613b      	str	r3, [r7, #16]
 8006cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4413      	add	r3, r2
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d16:	b29c      	uxth	r4, r3
 8006d18:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006d1c:	b29c      	uxth	r4, r3
 8006d1e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006d22:	b29c      	uxth	r4, r3
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	441a      	add	r2, r3
 8006d2e:	4b04      	ldr	r3, [pc, #16]	; (8006d40 <USB_EPStartXfer+0x56c>)
 8006d30:	4323      	orrs	r3, r4
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3734      	adds	r7, #52	; 0x34
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd90      	pop	{r4, r7, pc}
 8006d40:	ffff8080 	.word	0xffff8080

08006d44 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d44:	b490      	push	{r4, r7}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	785b      	ldrb	r3, [r3, #1]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d018      	beq.n	8006d88 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d6c:	b29c      	uxth	r4, r3
 8006d6e:	f084 0310 	eor.w	r3, r4, #16
 8006d72:	b29c      	uxth	r4, r3
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	441a      	add	r2, r3
 8006d7e:	4b11      	ldr	r3, [pc, #68]	; (8006dc4 <USB_EPSetStall+0x80>)
 8006d80:	4323      	orrs	r3, r4
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	8013      	strh	r3, [r2, #0]
 8006d86:	e017      	b.n	8006db8 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	881b      	ldrh	r3, [r3, #0]
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d9e:	b29c      	uxth	r4, r3
 8006da0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006da4:	b29c      	uxth	r4, r3
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	441a      	add	r2, r3
 8006db0:	4b04      	ldr	r3, [pc, #16]	; (8006dc4 <USB_EPSetStall+0x80>)
 8006db2:	4323      	orrs	r3, r4
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bc90      	pop	{r4, r7}
 8006dc2:	4770      	bx	lr
 8006dc4:	ffff8080 	.word	0xffff8080

08006dc8 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006dc8:	b490      	push	{r4, r7}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	7b1b      	ldrb	r3, [r3, #12]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d17d      	bne.n	8006ed6 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	785b      	ldrb	r3, [r3, #1]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d03d      	beq.n	8006e5e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	b29c      	uxth	r4, r3
 8006df0:	4623      	mov	r3, r4
 8006df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d014      	beq.n	8006e24 <USB_EPClearStall+0x5c>
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e10:	b29c      	uxth	r4, r3
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	441a      	add	r2, r3
 8006e1c:	4b31      	ldr	r3, [pc, #196]	; (8006ee4 <USB_EPClearStall+0x11c>)
 8006e1e:	4323      	orrs	r3, r4
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	78db      	ldrb	r3, [r3, #3]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d054      	beq.n	8006ed6 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	881b      	ldrh	r3, [r3, #0]
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e42:	b29c      	uxth	r4, r3
 8006e44:	f084 0320 	eor.w	r3, r4, #32
 8006e48:	b29c      	uxth	r4, r3
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	441a      	add	r2, r3
 8006e54:	4b24      	ldr	r3, [pc, #144]	; (8006ee8 <USB_EPClearStall+0x120>)
 8006e56:	4323      	orrs	r3, r4
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	8013      	strh	r3, [r2, #0]
 8006e5c:	e03b      	b.n	8006ed6 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4413      	add	r3, r2
 8006e68:	881b      	ldrh	r3, [r3, #0]
 8006e6a:	b29c      	uxth	r4, r3
 8006e6c:	4623      	mov	r3, r4
 8006e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d014      	beq.n	8006ea0 <USB_EPClearStall+0xd8>
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4413      	add	r3, r2
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8c:	b29c      	uxth	r4, r3
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	441a      	add	r2, r3
 8006e98:	4b14      	ldr	r3, [pc, #80]	; (8006eec <USB_EPClearStall+0x124>)
 8006e9a:	4323      	orrs	r3, r4
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb6:	b29c      	uxth	r4, r3
 8006eb8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006ebc:	b29c      	uxth	r4, r3
 8006ebe:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006ec2:	b29c      	uxth	r4, r3
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	441a      	add	r2, r3
 8006ece:	4b06      	ldr	r3, [pc, #24]	; (8006ee8 <USB_EPClearStall+0x120>)
 8006ed0:	4323      	orrs	r3, r4
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3708      	adds	r7, #8
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bc90      	pop	{r4, r7}
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	ffff80c0 	.word	0xffff80c0
 8006ee8:	ffff8080 	.word	0xffff8080
 8006eec:	ffffc080 	.word	0xffffc080

08006ef0 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006efc:	78fb      	ldrb	r3, [r7, #3]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d103      	bne.n	8006f0a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2280      	movs	r2, #128	; 0x80
 8006f06:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b083      	sub	sp, #12
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006f82:	68fb      	ldr	r3, [r7, #12]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b08d      	sub	sp, #52	; 0x34
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	4611      	mov	r1, r2
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	80fb      	strh	r3, [r7, #6]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006fbe:	88bb      	ldrh	r3, [r7, #4]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	085b      	lsrs	r3, r3, #1
 8006fc4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006fce:	88fa      	ldrh	r2, [r7, #6]
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fd8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fde:	e01b      	b.n	8007018 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	3301      	adds	r3, #1
 8006fea:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	021b      	lsls	r3, r3, #8
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	b29a      	uxth	r2, r3
 8007002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007004:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007008:	3302      	adds	r3, #2
 800700a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800700c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700e:	3301      	adds	r3, #1
 8007010:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007014:	3b01      	subs	r3, #1
 8007016:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1e0      	bne.n	8006fe0 <USB_WritePMA+0x38>
  }
}
 800701e:	bf00      	nop
 8007020:	3734      	adds	r7, #52	; 0x34
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800702a:	b480      	push	{r7}
 800702c:	b08b      	sub	sp, #44	; 0x2c
 800702e:	af00      	add	r7, sp, #0
 8007030:	60f8      	str	r0, [r7, #12]
 8007032:	60b9      	str	r1, [r7, #8]
 8007034:	4611      	mov	r1, r2
 8007036:	461a      	mov	r2, r3
 8007038:	460b      	mov	r3, r1
 800703a:	80fb      	strh	r3, [r7, #6]
 800703c:	4613      	mov	r3, r2
 800703e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007040:	88bb      	ldrh	r3, [r7, #4]
 8007042:	085b      	lsrs	r3, r3, #1
 8007044:	b29b      	uxth	r3, r3
 8007046:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007050:	88fa      	ldrh	r2, [r7, #6]
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	4413      	add	r3, r2
 8007056:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800705a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	627b      	str	r3, [r7, #36]	; 0x24
 8007060:	e018      	b.n	8007094 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007062:	6a3b      	ldr	r3, [r7, #32]
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	b29b      	uxth	r3, r3
 8007068:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	3302      	adds	r3, #2
 800706e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	b2da      	uxtb	r2, r3
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	3301      	adds	r3, #1
 800707c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	0a1b      	lsrs	r3, r3, #8
 8007082:	b2da      	uxtb	r2, r3
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	3301      	adds	r3, #1
 800708c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007090:	3b01      	subs	r3, #1
 8007092:	627b      	str	r3, [r7, #36]	; 0x24
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1e3      	bne.n	8007062 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800709a:	88bb      	ldrh	r3, [r7, #4]
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d007      	beq.n	80070b6 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80070a6:	6a3b      	ldr	r3, [r7, #32]
 80070a8:	881b      	ldrh	r3, [r3, #0]
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	701a      	strb	r2, [r3, #0]
  }
}
 80070b6:	bf00      	nop
 80070b8:	372c      	adds	r7, #44	; 0x2c
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b084      	sub	sp, #16
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	460b      	mov	r3, r1
 80070cc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	7c1b      	ldrb	r3, [r3, #16]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d115      	bne.n	8007106 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80070da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070de:	2202      	movs	r2, #2
 80070e0:	2181      	movs	r1, #129	; 0x81
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f001 ff06 	bl	8008ef4 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80070ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070f2:	2202      	movs	r2, #2
 80070f4:	2101      	movs	r1, #1
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f001 fefc 	bl	8008ef4 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007104:	e012      	b.n	800712c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007106:	2340      	movs	r3, #64	; 0x40
 8007108:	2202      	movs	r2, #2
 800710a:	2181      	movs	r1, #129	; 0x81
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f001 fef1 	bl	8008ef4 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007118:	2340      	movs	r3, #64	; 0x40
 800711a:	2202      	movs	r2, #2
 800711c:	2101      	movs	r1, #1
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f001 fee8 	bl	8008ef4 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800712c:	2308      	movs	r3, #8
 800712e:	2203      	movs	r2, #3
 8007130:	2182      	movs	r1, #130	; 0x82
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f001 fede 	bl	8008ef4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800713e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007142:	f002 f8d1 	bl	80092e8 <USBD_static_malloc>
 8007146:	4602      	mov	r2, r0
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007154:	2b00      	cmp	r3, #0
 8007156:	d102      	bne.n	800715e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007158:	2301      	movs	r3, #1
 800715a:	73fb      	strb	r3, [r7, #15]
 800715c:	e026      	b.n	80071ac <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007164:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	2200      	movs	r2, #0
 8007174:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	2200      	movs	r2, #0
 800717c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	7c1b      	ldrb	r3, [r3, #16]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d109      	bne.n	800719c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800718e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007192:	2101      	movs	r1, #1
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f002 f823 	bl	80091e0 <USBD_LL_PrepareReceive>
 800719a:	e007      	b.n	80071ac <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071a2:	2340      	movs	r3, #64	; 0x40
 80071a4:	2101      	movs	r1, #1
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f002 f81a 	bl	80091e0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b084      	sub	sp, #16
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
 80071be:	460b      	mov	r3, r1
 80071c0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80071c2:	2300      	movs	r3, #0
 80071c4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80071c6:	2181      	movs	r1, #129	; 0x81
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f001 fed1 	bl	8008f70 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80071d4:	2101      	movs	r1, #1
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f001 feca 	bl	8008f70 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80071e4:	2182      	movs	r1, #130	; 0x82
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f001 fec2 	bl	8008f70 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00e      	beq.n	800721a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800720c:	4618      	mov	r0, r3
 800720e:	f002 f879 	bl	8009304 <USBD_static_free>
    pdev->pClassData = NULL;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800721a:	7bfb      	ldrb	r3, [r7, #15]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007234:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007236:	2300      	movs	r3, #0
 8007238:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800723a:	2300      	movs	r3, #0
 800723c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800724a:	2b00      	cmp	r3, #0
 800724c:	d039      	beq.n	80072c2 <USBD_CDC_Setup+0x9e>
 800724e:	2b20      	cmp	r3, #32
 8007250:	d17c      	bne.n	800734c <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	88db      	ldrh	r3, [r3, #6]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d029      	beq.n	80072ae <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	b25b      	sxtb	r3, r3
 8007260:	2b00      	cmp	r3, #0
 8007262:	da11      	bge.n	8007288 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	683a      	ldr	r2, [r7, #0]
 800726e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007270:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	88d2      	ldrh	r2, [r2, #6]
 8007276:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007278:	6939      	ldr	r1, [r7, #16]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	88db      	ldrh	r3, [r3, #6]
 800727e:	461a      	mov	r2, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f001 fa2b 	bl	80086dc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007286:	e068      	b.n	800735a <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	785a      	ldrb	r2, [r3, #1]
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	88db      	ldrh	r3, [r3, #6]
 8007296:	b2da      	uxtb	r2, r3
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800729e:	6939      	ldr	r1, [r7, #16]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	88db      	ldrh	r3, [r3, #6]
 80072a4:	461a      	mov	r2, r3
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f001 fa46 	bl	8008738 <USBD_CtlPrepareRx>
      break;
 80072ac:	e055      	b.n	800735a <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	683a      	ldr	r2, [r7, #0]
 80072b8:	7850      	ldrb	r0, [r2, #1]
 80072ba:	2200      	movs	r2, #0
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	4798      	blx	r3
      break;
 80072c0:	e04b      	b.n	800735a <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	785b      	ldrb	r3, [r3, #1]
 80072c6:	2b0a      	cmp	r3, #10
 80072c8:	d017      	beq.n	80072fa <USBD_CDC_Setup+0xd6>
 80072ca:	2b0b      	cmp	r3, #11
 80072cc:	d029      	beq.n	8007322 <USBD_CDC_Setup+0xfe>
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d133      	bne.n	800733a <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072d8:	2b03      	cmp	r3, #3
 80072da:	d107      	bne.n	80072ec <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80072dc:	f107 030c 	add.w	r3, r7, #12
 80072e0:	2202      	movs	r2, #2
 80072e2:	4619      	mov	r1, r3
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f001 f9f9 	bl	80086dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072ea:	e02e      	b.n	800734a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80072ec:	6839      	ldr	r1, [r7, #0]
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f001 f989 	bl	8008606 <USBD_CtlError>
            ret = USBD_FAIL;
 80072f4:	2302      	movs	r3, #2
 80072f6:	75fb      	strb	r3, [r7, #23]
          break;
 80072f8:	e027      	b.n	800734a <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007300:	2b03      	cmp	r3, #3
 8007302:	d107      	bne.n	8007314 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007304:	f107 030f 	add.w	r3, r7, #15
 8007308:	2201      	movs	r2, #1
 800730a:	4619      	mov	r1, r3
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f001 f9e5 	bl	80086dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007312:	e01a      	b.n	800734a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f001 f975 	bl	8008606 <USBD_CtlError>
            ret = USBD_FAIL;
 800731c:	2302      	movs	r3, #2
 800731e:	75fb      	strb	r3, [r7, #23]
          break;
 8007320:	e013      	b.n	800734a <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007328:	2b03      	cmp	r3, #3
 800732a:	d00d      	beq.n	8007348 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f001 f969 	bl	8008606 <USBD_CtlError>
            ret = USBD_FAIL;
 8007334:	2302      	movs	r3, #2
 8007336:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007338:	e006      	b.n	8007348 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800733a:	6839      	ldr	r1, [r7, #0]
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f001 f962 	bl	8008606 <USBD_CtlError>
          ret = USBD_FAIL;
 8007342:	2302      	movs	r3, #2
 8007344:	75fb      	strb	r3, [r7, #23]
          break;
 8007346:	e000      	b.n	800734a <USBD_CDC_Setup+0x126>
          break;
 8007348:	bf00      	nop
      }
      break;
 800734a:	e006      	b.n	800735a <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800734c:	6839      	ldr	r1, [r7, #0]
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f001 f959 	bl	8008606 <USBD_CtlError>
      ret = USBD_FAIL;
 8007354:	2302      	movs	r3, #2
 8007356:	75fb      	strb	r3, [r7, #23]
      break;
 8007358:	bf00      	nop
  }

  return ret;
 800735a:	7dfb      	ldrb	r3, [r7, #23]
}
 800735c:	4618      	mov	r0, r3
 800735e:	3718      	adds	r7, #24
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	460b      	mov	r3, r1
 800736e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007376:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800737e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007386:	2b00      	cmp	r3, #0
 8007388:	d037      	beq.n	80073fa <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800738a:	78fa      	ldrb	r2, [r7, #3]
 800738c:	6879      	ldr	r1, [r7, #4]
 800738e:	4613      	mov	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	440b      	add	r3, r1
 8007398:	331c      	adds	r3, #28
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d026      	beq.n	80073ee <USBD_CDC_DataIn+0x8a>
 80073a0:	78fa      	ldrb	r2, [r7, #3]
 80073a2:	6879      	ldr	r1, [r7, #4]
 80073a4:	4613      	mov	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	440b      	add	r3, r1
 80073ae:	331c      	adds	r3, #28
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	78fa      	ldrb	r2, [r7, #3]
 80073b4:	68b9      	ldr	r1, [r7, #8]
 80073b6:	0152      	lsls	r2, r2, #5
 80073b8:	440a      	add	r2, r1
 80073ba:	3238      	adds	r2, #56	; 0x38
 80073bc:	6812      	ldr	r2, [r2, #0]
 80073be:	fbb3 f1f2 	udiv	r1, r3, r2
 80073c2:	fb02 f201 	mul.w	r2, r2, r1
 80073c6:	1a9b      	subs	r3, r3, r2
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d110      	bne.n	80073ee <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80073cc:	78fa      	ldrb	r2, [r7, #3]
 80073ce:	6879      	ldr	r1, [r7, #4]
 80073d0:	4613      	mov	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	4413      	add	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	440b      	add	r3, r1
 80073da:	331c      	adds	r3, #28
 80073dc:	2200      	movs	r2, #0
 80073de:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80073e0:	78f9      	ldrb	r1, [r7, #3]
 80073e2:	2300      	movs	r3, #0
 80073e4:	2200      	movs	r2, #0
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f001 fec0 	bl	800916c <USBD_LL_Transmit>
 80073ec:	e003      	b.n	80073f6 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	e000      	b.n	80073fc <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 80073fa:	2302      	movs	r3, #2
  }
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	460b      	mov	r3, r1
 800740e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007416:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007418:	78fb      	ldrb	r3, [r7, #3]
 800741a:	4619      	mov	r1, r3
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f001 ff19 	bl	8009254 <USBD_LL_GetRxDataSize>
 8007422:	4602      	mov	r2, r0
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00d      	beq.n	8007450 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007448:	4611      	mov	r1, r2
 800744a:	4798      	blx	r3

    return USBD_OK;
 800744c:	2300      	movs	r3, #0
 800744e:	e000      	b.n	8007452 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007450:	2302      	movs	r3, #2
  }
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b084      	sub	sp, #16
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007468:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007470:	2b00      	cmp	r3, #0
 8007472:	d015      	beq.n	80074a0 <USBD_CDC_EP0_RxReady+0x46>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800747a:	2bff      	cmp	r3, #255	; 0xff
 800747c:	d010      	beq.n	80074a0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800748c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007494:	b292      	uxth	r2, r2
 8007496:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	22ff      	movs	r2, #255	; 0xff
 800749c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
	...

080074ac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2243      	movs	r2, #67	; 0x43
 80074b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80074ba:	4b03      	ldr	r3, [pc, #12]	; (80074c8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80074bc:	4618      	mov	r0, r3
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	20000094 	.word	0x20000094

080074cc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2243      	movs	r2, #67	; 0x43
 80074d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80074da:	4b03      	ldr	r3, [pc, #12]	; (80074e8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80074dc:	4618      	mov	r0, r3
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	20000050 	.word	0x20000050

080074ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2243      	movs	r2, #67	; 0x43
 80074f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80074fa:	4b03      	ldr	r3, [pc, #12]	; (8007508 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr
 8007508:	200000d8 	.word	0x200000d8

0800750c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	220a      	movs	r2, #10
 8007518:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800751a:	4b03      	ldr	r3, [pc, #12]	; (8007528 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800751c:	4618      	mov	r0, r3
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	2000000c 	.word	0x2000000c

0800752c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007536:	2302      	movs	r3, #2
 8007538:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d005      	beq.n	800754c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	683a      	ldr	r2, [r7, #0]
 8007544:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007548:	2300      	movs	r3, #0
 800754a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800754c:	7bfb      	ldrb	r3, [r7, #15]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3714      	adds	r7, #20
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800755a:	b480      	push	{r7}
 800755c:	b087      	sub	sp, #28
 800755e:	af00      	add	r7, sp, #0
 8007560:	60f8      	str	r0, [r7, #12]
 8007562:	60b9      	str	r1, [r7, #8]
 8007564:	4613      	mov	r3, r2
 8007566:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800756e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007578:	88fa      	ldrh	r2, [r7, #6]
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	371c      	adds	r7, #28
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr

0800758e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800758e:	b480      	push	{r7}
 8007590:	b085      	sub	sp, #20
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800759e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b084      	sub	sp, #16
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d01c      	beq.n	800760a <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d115      	bne.n	8007606 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2201      	movs	r2, #1
 80075de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	2181      	movs	r1, #129	; 0x81
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f001 fdb5 	bl	800916c <USBD_LL_Transmit>

      return USBD_OK;
 8007602:	2300      	movs	r3, #0
 8007604:	e002      	b.n	800760c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007606:	2301      	movs	r3, #1
 8007608:	e000      	b.n	800760c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800760a:	2302      	movs	r3, #2
  }
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007622:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800762a:	2b00      	cmp	r3, #0
 800762c:	d017      	beq.n	800765e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	7c1b      	ldrb	r3, [r3, #16]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d109      	bne.n	800764a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800763c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007640:	2101      	movs	r1, #1
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f001 fdcc 	bl	80091e0 <USBD_LL_PrepareReceive>
 8007648:	e007      	b.n	800765a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007650:	2340      	movs	r3, #64	; 0x40
 8007652:	2101      	movs	r1, #1
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f001 fdc3 	bl	80091e0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	e000      	b.n	8007660 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800765e:	2302      	movs	r3, #2
  }
}
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	4613      	mov	r3, r2
 8007674:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d101      	bne.n	8007680 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800767c:	2302      	movs	r3, #2
 800767e:	e01a      	b.n	80076b6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007686:	2b00      	cmp	r3, #0
 8007688:	d003      	beq.n	8007692 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d003      	beq.n	80076a0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	79fa      	ldrb	r2, [r7, #7]
 80076ac:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f001 fb8c 	bl	8008dcc <USBD_LL_Init>

  return USBD_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80076be:	b480      	push	{r7}
 80076c0:	b085      	sub	sp, #20
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80076c8:	2300      	movs	r3, #0
 80076ca:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d006      	beq.n	80076e0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	683a      	ldr	r2, [r7, #0]
 80076d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	73fb      	strb	r3, [r7, #15]
 80076de:	e001      	b.n	80076e4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80076e0:	2302      	movs	r3, #2
 80076e2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80076e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3714      	adds	r7, #20
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b082      	sub	sp, #8
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 fbc8 	bl	8008e90 <USBD_LL_Start>

  return USBD_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800770a:	b480      	push	{r7}
 800770c:	b083      	sub	sp, #12
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	460b      	mov	r3, r1
 800772a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800772c:	2302      	movs	r3, #2
 800772e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00c      	beq.n	8007754 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	78fa      	ldrb	r2, [r7, #3]
 8007744:	4611      	mov	r1, r2
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	4798      	blx	r3
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d101      	bne.n	8007754 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007754:	7bfb      	ldrb	r3, [r7, #15]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b082      	sub	sp, #8
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	460b      	mov	r3, r1
 8007768:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	78fa      	ldrb	r2, [r7, #3]
 8007774:	4611      	mov	r1, r2
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	4798      	blx	r3

  return USBD_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3708      	adds	r7, #8
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	4618      	mov	r0, r3
 8007798:	f000 fef8 	bl	800858c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80077aa:	461a      	mov	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80077b8:	f003 031f 	and.w	r3, r3, #31
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d00c      	beq.n	80077da <USBD_LL_SetupStage+0x56>
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d302      	bcc.n	80077ca <USBD_LL_SetupStage+0x46>
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d010      	beq.n	80077ea <USBD_LL_SetupStage+0x66>
 80077c8:	e017      	b.n	80077fa <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f9ce 	bl	8007b74 <USBD_StdDevReq>
      break;
 80077d8:	e01a      	b.n	8007810 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80077e0:	4619      	mov	r1, r3
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fa30 	bl	8007c48 <USBD_StdItfReq>
      break;
 80077e8:	e012      	b.n	8007810 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80077f0:	4619      	mov	r1, r3
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fa6e 	bl	8007cd4 <USBD_StdEPReq>
      break;
 80077f8:	e00a      	b.n	8007810 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007800:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007804:	b2db      	uxtb	r3, r3
 8007806:	4619      	mov	r1, r3
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f001 fbe7 	bl	8008fdc <USBD_LL_StallEP>
      break;
 800780e:	bf00      	nop
  }

  return USBD_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b086      	sub	sp, #24
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	460b      	mov	r3, r1
 8007824:	607a      	str	r2, [r7, #4]
 8007826:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007828:	7afb      	ldrb	r3, [r7, #11]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d14b      	bne.n	80078c6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007834:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800783c:	2b03      	cmp	r3, #3
 800783e:	d134      	bne.n	80078aa <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	68da      	ldr	r2, [r3, #12]
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	429a      	cmp	r2, r3
 800784a:	d919      	bls.n	8007880 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	68da      	ldr	r2, [r3, #12]
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	1ad2      	subs	r2, r2, r3
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	68da      	ldr	r2, [r3, #12]
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007862:	429a      	cmp	r2, r3
 8007864:	d203      	bcs.n	800786e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800786a:	b29b      	uxth	r3, r3
 800786c:	e002      	b.n	8007874 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007872:	b29b      	uxth	r3, r3
 8007874:	461a      	mov	r2, r3
 8007876:	6879      	ldr	r1, [r7, #4]
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f000 ff7b 	bl	8008774 <USBD_CtlContinueRx>
 800787e:	e038      	b.n	80078f2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00a      	beq.n	80078a2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007892:	2b03      	cmp	r3, #3
 8007894:	d105      	bne.n	80078a2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f000 ff78 	bl	8008798 <USBD_CtlSendStatus>
 80078a8:	e023      	b.n	80078f2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80078b0:	2b05      	cmp	r3, #5
 80078b2:	d11e      	bne.n	80078f2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80078bc:	2100      	movs	r1, #0
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f001 fb8c 	bl	8008fdc <USBD_LL_StallEP>
 80078c4:	e015      	b.n	80078f2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078cc:	699b      	ldr	r3, [r3, #24]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00d      	beq.n	80078ee <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80078d8:	2b03      	cmp	r3, #3
 80078da:	d108      	bne.n	80078ee <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	7afa      	ldrb	r2, [r7, #11]
 80078e6:	4611      	mov	r1, r2
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	4798      	blx	r3
 80078ec:	e001      	b.n	80078f2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80078ee:	2302      	movs	r3, #2
 80078f0:	e000      	b.n	80078f4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3718      	adds	r7, #24
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	460b      	mov	r3, r1
 8007906:	607a      	str	r2, [r7, #4]
 8007908:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800790a:	7afb      	ldrb	r3, [r7, #11]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d17f      	bne.n	8007a10 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	3314      	adds	r3, #20
 8007914:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800791c:	2b02      	cmp	r3, #2
 800791e:	d15c      	bne.n	80079da <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	68da      	ldr	r2, [r3, #12]
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	429a      	cmp	r2, r3
 800792a:	d915      	bls.n	8007958 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	68da      	ldr	r2, [r3, #12]
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	1ad2      	subs	r2, r2, r3
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	b29b      	uxth	r3, r3
 8007940:	461a      	mov	r2, r3
 8007942:	6879      	ldr	r1, [r7, #4]
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f000 fee5 	bl	8008714 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800794a:	2300      	movs	r3, #0
 800794c:	2200      	movs	r2, #0
 800794e:	2100      	movs	r1, #0
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f001 fc45 	bl	80091e0 <USBD_LL_PrepareReceive>
 8007956:	e04e      	b.n	80079f6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	697a      	ldr	r2, [r7, #20]
 800795e:	6912      	ldr	r2, [r2, #16]
 8007960:	fbb3 f1f2 	udiv	r1, r3, r2
 8007964:	fb02 f201 	mul.w	r2, r2, r1
 8007968:	1a9b      	subs	r3, r3, r2
 800796a:	2b00      	cmp	r3, #0
 800796c:	d11c      	bne.n	80079a8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	689a      	ldr	r2, [r3, #8]
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007976:	429a      	cmp	r2, r3
 8007978:	d316      	bcc.n	80079a8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	689a      	ldr	r2, [r3, #8]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007984:	429a      	cmp	r2, r3
 8007986:	d20f      	bcs.n	80079a8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007988:	2200      	movs	r2, #0
 800798a:	2100      	movs	r1, #0
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 fec1 	bl	8008714 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800799a:	2300      	movs	r3, #0
 800799c:	2200      	movs	r2, #0
 800799e:	2100      	movs	r1, #0
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f001 fc1d 	bl	80091e0 <USBD_LL_PrepareReceive>
 80079a6:	e026      	b.n	80079f6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00a      	beq.n	80079ca <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d105      	bne.n	80079ca <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80079ca:	2180      	movs	r1, #128	; 0x80
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f001 fb05 	bl	8008fdc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f000 fef3 	bl	80087be <USBD_CtlReceiveStatus>
 80079d8:	e00d      	b.n	80079f6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079e0:	2b04      	cmp	r3, #4
 80079e2:	d004      	beq.n	80079ee <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d103      	bne.n	80079f6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80079ee:	2180      	movs	r1, #128	; 0x80
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f001 faf3 	bl	8008fdc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d11d      	bne.n	8007a3c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f7ff fe82 	bl	800770a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007a0e:	e015      	b.n	8007a3c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a16:	695b      	ldr	r3, [r3, #20]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00d      	beq.n	8007a38 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007a22:	2b03      	cmp	r3, #3
 8007a24:	d108      	bne.n	8007a38 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	7afa      	ldrb	r2, [r7, #11]
 8007a30:	4611      	mov	r1, r2
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	4798      	blx	r3
 8007a36:	e001      	b.n	8007a3c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007a38:	2302      	movs	r3, #2
 8007a3a:	e000      	b.n	8007a3e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3718      	adds	r7, #24
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b082      	sub	sp, #8
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a4e:	2340      	movs	r3, #64	; 0x40
 8007a50:	2200      	movs	r2, #0
 8007a52:	2100      	movs	r1, #0
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f001 fa4d 	bl	8008ef4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2240      	movs	r2, #64	; 0x40
 8007a66:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a6a:	2340      	movs	r3, #64	; 0x40
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	2180      	movs	r1, #128	; 0x80
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f001 fa3f 	bl	8008ef4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2240      	movs	r2, #64	; 0x40
 8007a80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d009      	beq.n	8007abe <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	6852      	ldr	r2, [r2, #4]
 8007ab6:	b2d2      	uxtb	r2, r2
 8007ab8:	4611      	mov	r1, r2
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	4798      	blx	r3
  }

  return USBD_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	78fa      	ldrb	r2, [r7, #3]
 8007ad8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2204      	movs	r2, #4
 8007b00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	370c      	adds	r7, #12
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b083      	sub	sp, #12
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b20:	2b04      	cmp	r3, #4
 8007b22:	d105      	bne.n	8007b30 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b082      	sub	sp, #8
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d10b      	bne.n	8007b68 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b56:	69db      	ldr	r3, [r3, #28]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d005      	beq.n	8007b68 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b62:	69db      	ldr	r3, [r3, #28]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
	...

08007b74 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b8a:	2b20      	cmp	r3, #32
 8007b8c:	d004      	beq.n	8007b98 <USBD_StdDevReq+0x24>
 8007b8e:	2b40      	cmp	r3, #64	; 0x40
 8007b90:	d002      	beq.n	8007b98 <USBD_StdDevReq+0x24>
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d008      	beq.n	8007ba8 <USBD_StdDevReq+0x34>
 8007b96:	e04c      	b.n	8007c32 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	6839      	ldr	r1, [r7, #0]
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	4798      	blx	r3
      break;
 8007ba6:	e049      	b.n	8007c3c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	785b      	ldrb	r3, [r3, #1]
 8007bac:	2b09      	cmp	r3, #9
 8007bae:	d83a      	bhi.n	8007c26 <USBD_StdDevReq+0xb2>
 8007bb0:	a201      	add	r2, pc, #4	; (adr r2, 8007bb8 <USBD_StdDevReq+0x44>)
 8007bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb6:	bf00      	nop
 8007bb8:	08007c09 	.word	0x08007c09
 8007bbc:	08007c1d 	.word	0x08007c1d
 8007bc0:	08007c27 	.word	0x08007c27
 8007bc4:	08007c13 	.word	0x08007c13
 8007bc8:	08007c27 	.word	0x08007c27
 8007bcc:	08007beb 	.word	0x08007beb
 8007bd0:	08007be1 	.word	0x08007be1
 8007bd4:	08007c27 	.word	0x08007c27
 8007bd8:	08007bff 	.word	0x08007bff
 8007bdc:	08007bf5 	.word	0x08007bf5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f9d4 	bl	8007f90 <USBD_GetDescriptor>
          break;
 8007be8:	e022      	b.n	8007c30 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007bea:	6839      	ldr	r1, [r7, #0]
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fb61 	bl	80082b4 <USBD_SetAddress>
          break;
 8007bf2:	e01d      	b.n	8007c30 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007bf4:	6839      	ldr	r1, [r7, #0]
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fb9e 	bl	8008338 <USBD_SetConfig>
          break;
 8007bfc:	e018      	b.n	8007c30 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007bfe:	6839      	ldr	r1, [r7, #0]
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 fc27 	bl	8008454 <USBD_GetConfig>
          break;
 8007c06:	e013      	b.n	8007c30 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007c08:	6839      	ldr	r1, [r7, #0]
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fc56 	bl	80084bc <USBD_GetStatus>
          break;
 8007c10:	e00e      	b.n	8007c30 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007c12:	6839      	ldr	r1, [r7, #0]
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 fc84 	bl	8008522 <USBD_SetFeature>
          break;
 8007c1a:	e009      	b.n	8007c30 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007c1c:	6839      	ldr	r1, [r7, #0]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fc93 	bl	800854a <USBD_ClrFeature>
          break;
 8007c24:	e004      	b.n	8007c30 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fcec 	bl	8008606 <USBD_CtlError>
          break;
 8007c2e:	bf00      	nop
      }
      break;
 8007c30:	e004      	b.n	8007c3c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fce6 	bl	8008606 <USBD_CtlError>
      break;
 8007c3a:	bf00      	nop
  }

  return ret;
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop

08007c48 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c52:	2300      	movs	r3, #0
 8007c54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c5e:	2b20      	cmp	r3, #32
 8007c60:	d003      	beq.n	8007c6a <USBD_StdItfReq+0x22>
 8007c62:	2b40      	cmp	r3, #64	; 0x40
 8007c64:	d001      	beq.n	8007c6a <USBD_StdItfReq+0x22>
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d12a      	bne.n	8007cc0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c70:	3b01      	subs	r3, #1
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d81d      	bhi.n	8007cb2 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	889b      	ldrh	r3, [r3, #4]
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d813      	bhi.n	8007ca8 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	4798      	blx	r3
 8007c8e:	4603      	mov	r3, r0
 8007c90:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	88db      	ldrh	r3, [r3, #6]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d110      	bne.n	8007cbc <USBD_StdItfReq+0x74>
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10d      	bne.n	8007cbc <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 fd79 	bl	8008798 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007ca6:	e009      	b.n	8007cbc <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8007ca8:	6839      	ldr	r1, [r7, #0]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fcab 	bl	8008606 <USBD_CtlError>
          break;
 8007cb0:	e004      	b.n	8007cbc <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8007cb2:	6839      	ldr	r1, [r7, #0]
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 fca6 	bl	8008606 <USBD_CtlError>
          break;
 8007cba:	e000      	b.n	8007cbe <USBD_StdItfReq+0x76>
          break;
 8007cbc:	bf00      	nop
      }
      break;
 8007cbe:	e004      	b.n	8007cca <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8007cc0:	6839      	ldr	r1, [r7, #0]
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 fc9f 	bl	8008606 <USBD_CtlError>
      break;
 8007cc8:	bf00      	nop
  }

  return USBD_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	889b      	ldrh	r3, [r3, #4]
 8007ce6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cf0:	2b20      	cmp	r3, #32
 8007cf2:	d004      	beq.n	8007cfe <USBD_StdEPReq+0x2a>
 8007cf4:	2b40      	cmp	r3, #64	; 0x40
 8007cf6:	d002      	beq.n	8007cfe <USBD_StdEPReq+0x2a>
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d008      	beq.n	8007d0e <USBD_StdEPReq+0x3a>
 8007cfc:	e13d      	b.n	8007f7a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	6839      	ldr	r1, [r7, #0]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	4798      	blx	r3
      break;
 8007d0c:	e13a      	b.n	8007f84 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d16:	2b20      	cmp	r3, #32
 8007d18:	d10a      	bne.n	8007d30 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	4798      	blx	r3
 8007d28:	4603      	mov	r3, r0
 8007d2a:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
 8007d2e:	e12a      	b.n	8007f86 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	785b      	ldrb	r3, [r3, #1]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d03e      	beq.n	8007db6 <USBD_StdEPReq+0xe2>
 8007d38:	2b03      	cmp	r3, #3
 8007d3a:	d002      	beq.n	8007d42 <USBD_StdEPReq+0x6e>
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d070      	beq.n	8007e22 <USBD_StdEPReq+0x14e>
 8007d40:	e115      	b.n	8007f6e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d002      	beq.n	8007d52 <USBD_StdEPReq+0x7e>
 8007d4c:	2b03      	cmp	r3, #3
 8007d4e:	d015      	beq.n	8007d7c <USBD_StdEPReq+0xa8>
 8007d50:	e02b      	b.n	8007daa <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d52:	7bbb      	ldrb	r3, [r7, #14]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00c      	beq.n	8007d72 <USBD_StdEPReq+0x9e>
 8007d58:	7bbb      	ldrb	r3, [r7, #14]
 8007d5a:	2b80      	cmp	r3, #128	; 0x80
 8007d5c:	d009      	beq.n	8007d72 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007d5e:	7bbb      	ldrb	r3, [r7, #14]
 8007d60:	4619      	mov	r1, r3
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f001 f93a 	bl	8008fdc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007d68:	2180      	movs	r1, #128	; 0x80
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f001 f936 	bl	8008fdc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d70:	e020      	b.n	8007db4 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fc46 	bl	8008606 <USBD_CtlError>
              break;
 8007d7a:	e01b      	b.n	8007db4 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	885b      	ldrh	r3, [r3, #2]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10e      	bne.n	8007da2 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8007d84:	7bbb      	ldrb	r3, [r7, #14]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00b      	beq.n	8007da2 <USBD_StdEPReq+0xce>
 8007d8a:	7bbb      	ldrb	r3, [r7, #14]
 8007d8c:	2b80      	cmp	r3, #128	; 0x80
 8007d8e:	d008      	beq.n	8007da2 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	88db      	ldrh	r3, [r3, #6]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d104      	bne.n	8007da2 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007d98:	7bbb      	ldrb	r3, [r7, #14]
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f001 f91d 	bl	8008fdc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fcf8 	bl	8008798 <USBD_CtlSendStatus>

              break;
 8007da8:	e004      	b.n	8007db4 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8007daa:	6839      	ldr	r1, [r7, #0]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fc2a 	bl	8008606 <USBD_CtlError>
              break;
 8007db2:	bf00      	nop
          }
          break;
 8007db4:	e0e0      	b.n	8007f78 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d002      	beq.n	8007dc6 <USBD_StdEPReq+0xf2>
 8007dc0:	2b03      	cmp	r3, #3
 8007dc2:	d015      	beq.n	8007df0 <USBD_StdEPReq+0x11c>
 8007dc4:	e026      	b.n	8007e14 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007dc6:	7bbb      	ldrb	r3, [r7, #14]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00c      	beq.n	8007de6 <USBD_StdEPReq+0x112>
 8007dcc:	7bbb      	ldrb	r3, [r7, #14]
 8007dce:	2b80      	cmp	r3, #128	; 0x80
 8007dd0:	d009      	beq.n	8007de6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007dd2:	7bbb      	ldrb	r3, [r7, #14]
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f001 f900 	bl	8008fdc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007ddc:	2180      	movs	r1, #128	; 0x80
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f001 f8fc 	bl	8008fdc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007de4:	e01c      	b.n	8007e20 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fc0c 	bl	8008606 <USBD_CtlError>
              break;
 8007dee:	e017      	b.n	8007e20 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	885b      	ldrh	r3, [r3, #2]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d112      	bne.n	8007e1e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007df8:	7bbb      	ldrb	r3, [r7, #14]
 8007dfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d004      	beq.n	8007e0c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e02:	7bbb      	ldrb	r3, [r7, #14]
 8007e04:	4619      	mov	r1, r3
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f001 f91e 	bl	8009048 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fcc3 	bl	8008798 <USBD_CtlSendStatus>
              }
              break;
 8007e12:	e004      	b.n	8007e1e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8007e14:	6839      	ldr	r1, [r7, #0]
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 fbf5 	bl	8008606 <USBD_CtlError>
              break;
 8007e1c:	e000      	b.n	8007e20 <USBD_StdEPReq+0x14c>
              break;
 8007e1e:	bf00      	nop
          }
          break;
 8007e20:	e0aa      	b.n	8007f78 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d002      	beq.n	8007e32 <USBD_StdEPReq+0x15e>
 8007e2c:	2b03      	cmp	r3, #3
 8007e2e:	d032      	beq.n	8007e96 <USBD_StdEPReq+0x1c2>
 8007e30:	e097      	b.n	8007f62 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e32:	7bbb      	ldrb	r3, [r7, #14]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d007      	beq.n	8007e48 <USBD_StdEPReq+0x174>
 8007e38:	7bbb      	ldrb	r3, [r7, #14]
 8007e3a:	2b80      	cmp	r3, #128	; 0x80
 8007e3c:	d004      	beq.n	8007e48 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fbe0 	bl	8008606 <USBD_CtlError>
                break;
 8007e46:	e091      	b.n	8007f6c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	da0b      	bge.n	8007e68 <USBD_StdEPReq+0x194>
 8007e50:	7bbb      	ldrb	r3, [r7, #14]
 8007e52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e56:	4613      	mov	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	3310      	adds	r3, #16
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	4413      	add	r3, r2
 8007e64:	3304      	adds	r3, #4
 8007e66:	e00b      	b.n	8007e80 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e68:	7bbb      	ldrb	r3, [r7, #14]
 8007e6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e6e:	4613      	mov	r3, r2
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4413      	add	r3, r2
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	3304      	adds	r3, #4
 8007e80:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2200      	movs	r2, #0
 8007e86:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fc24 	bl	80086dc <USBD_CtlSendData>
              break;
 8007e94:	e06a      	b.n	8007f6c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007e96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	da11      	bge.n	8007ec2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007e9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ea0:	f003 020f 	and.w	r2, r3, #15
 8007ea4:	6879      	ldr	r1, [r7, #4]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4413      	add	r3, r2
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	440b      	add	r3, r1
 8007eb0:	3318      	adds	r3, #24
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d117      	bne.n	8007ee8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fba3 	bl	8008606 <USBD_CtlError>
                  break;
 8007ec0:	e054      	b.n	8007f6c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ec2:	7bbb      	ldrb	r3, [r7, #14]
 8007ec4:	f003 020f 	and.w	r2, r3, #15
 8007ec8:	6879      	ldr	r1, [r7, #4]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	440b      	add	r3, r1
 8007ed4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d104      	bne.n	8007ee8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007ede:	6839      	ldr	r1, [r7, #0]
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fb90 	bl	8008606 <USBD_CtlError>
                  break;
 8007ee6:	e041      	b.n	8007f6c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ee8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	da0b      	bge.n	8007f08 <USBD_StdEPReq+0x234>
 8007ef0:	7bbb      	ldrb	r3, [r7, #14]
 8007ef2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4413      	add	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	3310      	adds	r3, #16
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	4413      	add	r3, r2
 8007f04:	3304      	adds	r3, #4
 8007f06:	e00b      	b.n	8007f20 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f08:	7bbb      	ldrb	r3, [r7, #14]
 8007f0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f0e:	4613      	mov	r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4413      	add	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	3304      	adds	r3, #4
 8007f20:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f22:	7bbb      	ldrb	r3, [r7, #14]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d002      	beq.n	8007f2e <USBD_StdEPReq+0x25a>
 8007f28:	7bbb      	ldrb	r3, [r7, #14]
 8007f2a:	2b80      	cmp	r3, #128	; 0x80
 8007f2c:	d103      	bne.n	8007f36 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	2200      	movs	r2, #0
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	e00e      	b.n	8007f54 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007f36:	7bbb      	ldrb	r3, [r7, #14]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f001 f8ba 	bl	80090b4 <USBD_LL_IsStallEP>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d003      	beq.n	8007f4e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	601a      	str	r2, [r3, #0]
 8007f4c:	e002      	b.n	8007f54 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	2200      	movs	r2, #0
 8007f52:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	2202      	movs	r2, #2
 8007f58:	4619      	mov	r1, r3
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 fbbe 	bl	80086dc <USBD_CtlSendData>
              break;
 8007f60:	e004      	b.n	8007f6c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007f62:	6839      	ldr	r1, [r7, #0]
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fb4e 	bl	8008606 <USBD_CtlError>
              break;
 8007f6a:	bf00      	nop
          }
          break;
 8007f6c:	e004      	b.n	8007f78 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8007f6e:	6839      	ldr	r1, [r7, #0]
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fb48 	bl	8008606 <USBD_CtlError>
          break;
 8007f76:	bf00      	nop
      }
      break;
 8007f78:	e004      	b.n	8007f84 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8007f7a:	6839      	ldr	r1, [r7, #0]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fb42 	bl	8008606 <USBD_CtlError>
      break;
 8007f82:	bf00      	nop
  }

  return ret;
 8007f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
	...

08007f90 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	885b      	ldrh	r3, [r3, #2]
 8007faa:	0a1b      	lsrs	r3, r3, #8
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	2b0e      	cmp	r3, #14
 8007fb2:	f200 8152 	bhi.w	800825a <USBD_GetDescriptor+0x2ca>
 8007fb6:	a201      	add	r2, pc, #4	; (adr r2, 8007fbc <USBD_GetDescriptor+0x2c>)
 8007fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fbc:	0800802d 	.word	0x0800802d
 8007fc0:	08008045 	.word	0x08008045
 8007fc4:	08008085 	.word	0x08008085
 8007fc8:	0800825b 	.word	0x0800825b
 8007fcc:	0800825b 	.word	0x0800825b
 8007fd0:	080081fb 	.word	0x080081fb
 8007fd4:	08008227 	.word	0x08008227
 8007fd8:	0800825b 	.word	0x0800825b
 8007fdc:	0800825b 	.word	0x0800825b
 8007fe0:	0800825b 	.word	0x0800825b
 8007fe4:	0800825b 	.word	0x0800825b
 8007fe8:	0800825b 	.word	0x0800825b
 8007fec:	0800825b 	.word	0x0800825b
 8007ff0:	0800825b 	.word	0x0800825b
 8007ff4:	08007ff9 	.word	0x08007ff9
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ffe:	69db      	ldr	r3, [r3, #28]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00b      	beq.n	800801c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800800a:	69db      	ldr	r3, [r3, #28]
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	7c12      	ldrb	r2, [r2, #16]
 8008010:	f107 0108 	add.w	r1, r7, #8
 8008014:	4610      	mov	r0, r2
 8008016:	4798      	blx	r3
 8008018:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800801a:	e126      	b.n	800826a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800801c:	6839      	ldr	r1, [r7, #0]
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 faf1 	bl	8008606 <USBD_CtlError>
        err++;
 8008024:	7afb      	ldrb	r3, [r7, #11]
 8008026:	3301      	adds	r3, #1
 8008028:	72fb      	strb	r3, [r7, #11]
      break;
 800802a:	e11e      	b.n	800826a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	7c12      	ldrb	r2, [r2, #16]
 8008038:	f107 0108 	add.w	r1, r7, #8
 800803c:	4610      	mov	r0, r2
 800803e:	4798      	blx	r3
 8008040:	60f8      	str	r0, [r7, #12]
      break;
 8008042:	e112      	b.n	800826a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	7c1b      	ldrb	r3, [r3, #16]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10d      	bne.n	8008068 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008054:	f107 0208 	add.w	r2, r7, #8
 8008058:	4610      	mov	r0, r2
 800805a:	4798      	blx	r3
 800805c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	3301      	adds	r3, #1
 8008062:	2202      	movs	r2, #2
 8008064:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008066:	e100      	b.n	800826a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800806e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008070:	f107 0208 	add.w	r2, r7, #8
 8008074:	4610      	mov	r0, r2
 8008076:	4798      	blx	r3
 8008078:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	3301      	adds	r3, #1
 800807e:	2202      	movs	r2, #2
 8008080:	701a      	strb	r2, [r3, #0]
      break;
 8008082:	e0f2      	b.n	800826a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	885b      	ldrh	r3, [r3, #2]
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b05      	cmp	r3, #5
 800808c:	f200 80ac 	bhi.w	80081e8 <USBD_GetDescriptor+0x258>
 8008090:	a201      	add	r2, pc, #4	; (adr r2, 8008098 <USBD_GetDescriptor+0x108>)
 8008092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008096:	bf00      	nop
 8008098:	080080b1 	.word	0x080080b1
 800809c:	080080e5 	.word	0x080080e5
 80080a0:	08008119 	.word	0x08008119
 80080a4:	0800814d 	.word	0x0800814d
 80080a8:	08008181 	.word	0x08008181
 80080ac:	080081b5 	.word	0x080081b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00b      	beq.n	80080d4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	7c12      	ldrb	r2, [r2, #16]
 80080c8:	f107 0108 	add.w	r1, r7, #8
 80080cc:	4610      	mov	r0, r2
 80080ce:	4798      	blx	r3
 80080d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080d2:	e091      	b.n	80081f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80080d4:	6839      	ldr	r1, [r7, #0]
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fa95 	bl	8008606 <USBD_CtlError>
            err++;
 80080dc:	7afb      	ldrb	r3, [r7, #11]
 80080de:	3301      	adds	r3, #1
 80080e0:	72fb      	strb	r3, [r7, #11]
          break;
 80080e2:	e089      	b.n	80081f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00b      	beq.n	8008108 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	7c12      	ldrb	r2, [r2, #16]
 80080fc:	f107 0108 	add.w	r1, r7, #8
 8008100:	4610      	mov	r0, r2
 8008102:	4798      	blx	r3
 8008104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008106:	e077      	b.n	80081f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008108:	6839      	ldr	r1, [r7, #0]
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fa7b 	bl	8008606 <USBD_CtlError>
            err++;
 8008110:	7afb      	ldrb	r3, [r7, #11]
 8008112:	3301      	adds	r3, #1
 8008114:	72fb      	strb	r3, [r7, #11]
          break;
 8008116:	e06f      	b.n	80081f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00b      	beq.n	800813c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	7c12      	ldrb	r2, [r2, #16]
 8008130:	f107 0108 	add.w	r1, r7, #8
 8008134:	4610      	mov	r0, r2
 8008136:	4798      	blx	r3
 8008138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800813a:	e05d      	b.n	80081f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fa61 	bl	8008606 <USBD_CtlError>
            err++;
 8008144:	7afb      	ldrb	r3, [r7, #11]
 8008146:	3301      	adds	r3, #1
 8008148:	72fb      	strb	r3, [r7, #11]
          break;
 800814a:	e055      	b.n	80081f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00b      	beq.n	8008170 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	7c12      	ldrb	r2, [r2, #16]
 8008164:	f107 0108 	add.w	r1, r7, #8
 8008168:	4610      	mov	r0, r2
 800816a:	4798      	blx	r3
 800816c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800816e:	e043      	b.n	80081f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 fa47 	bl	8008606 <USBD_CtlError>
            err++;
 8008178:	7afb      	ldrb	r3, [r7, #11]
 800817a:	3301      	adds	r3, #1
 800817c:	72fb      	strb	r3, [r7, #11]
          break;
 800817e:	e03b      	b.n	80081f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008186:	695b      	ldr	r3, [r3, #20]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00b      	beq.n	80081a4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008192:	695b      	ldr	r3, [r3, #20]
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	7c12      	ldrb	r2, [r2, #16]
 8008198:	f107 0108 	add.w	r1, r7, #8
 800819c:	4610      	mov	r0, r2
 800819e:	4798      	blx	r3
 80081a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081a2:	e029      	b.n	80081f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80081a4:	6839      	ldr	r1, [r7, #0]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fa2d 	bl	8008606 <USBD_CtlError>
            err++;
 80081ac:	7afb      	ldrb	r3, [r7, #11]
 80081ae:	3301      	adds	r3, #1
 80081b0:	72fb      	strb	r3, [r7, #11]
          break;
 80081b2:	e021      	b.n	80081f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00b      	beq.n	80081d8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	7c12      	ldrb	r2, [r2, #16]
 80081cc:	f107 0108 	add.w	r1, r7, #8
 80081d0:	4610      	mov	r0, r2
 80081d2:	4798      	blx	r3
 80081d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081d6:	e00f      	b.n	80081f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fa13 	bl	8008606 <USBD_CtlError>
            err++;
 80081e0:	7afb      	ldrb	r3, [r7, #11]
 80081e2:	3301      	adds	r3, #1
 80081e4:	72fb      	strb	r3, [r7, #11]
          break;
 80081e6:	e007      	b.n	80081f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80081e8:	6839      	ldr	r1, [r7, #0]
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fa0b 	bl	8008606 <USBD_CtlError>
          err++;
 80081f0:	7afb      	ldrb	r3, [r7, #11]
 80081f2:	3301      	adds	r3, #1
 80081f4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80081f6:	e038      	b.n	800826a <USBD_GetDescriptor+0x2da>
 80081f8:	e037      	b.n	800826a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	7c1b      	ldrb	r3, [r3, #16]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d109      	bne.n	8008216 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800820a:	f107 0208 	add.w	r2, r7, #8
 800820e:	4610      	mov	r0, r2
 8008210:	4798      	blx	r3
 8008212:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008214:	e029      	b.n	800826a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 f9f4 	bl	8008606 <USBD_CtlError>
        err++;
 800821e:	7afb      	ldrb	r3, [r7, #11]
 8008220:	3301      	adds	r3, #1
 8008222:	72fb      	strb	r3, [r7, #11]
      break;
 8008224:	e021      	b.n	800826a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	7c1b      	ldrb	r3, [r3, #16]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10d      	bne.n	800824a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008236:	f107 0208 	add.w	r2, r7, #8
 800823a:	4610      	mov	r0, r2
 800823c:	4798      	blx	r3
 800823e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	3301      	adds	r3, #1
 8008244:	2207      	movs	r2, #7
 8008246:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008248:	e00f      	b.n	800826a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800824a:	6839      	ldr	r1, [r7, #0]
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 f9da 	bl	8008606 <USBD_CtlError>
        err++;
 8008252:	7afb      	ldrb	r3, [r7, #11]
 8008254:	3301      	adds	r3, #1
 8008256:	72fb      	strb	r3, [r7, #11]
      break;
 8008258:	e007      	b.n	800826a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800825a:	6839      	ldr	r1, [r7, #0]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f9d2 	bl	8008606 <USBD_CtlError>
      err++;
 8008262:	7afb      	ldrb	r3, [r7, #11]
 8008264:	3301      	adds	r3, #1
 8008266:	72fb      	strb	r3, [r7, #11]
      break;
 8008268:	bf00      	nop
  }

  if (err != 0U)
 800826a:	7afb      	ldrb	r3, [r7, #11]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d11c      	bne.n	80082aa <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008270:	893b      	ldrh	r3, [r7, #8]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d011      	beq.n	800829a <USBD_GetDescriptor+0x30a>
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	88db      	ldrh	r3, [r3, #6]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00d      	beq.n	800829a <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	88da      	ldrh	r2, [r3, #6]
 8008282:	893b      	ldrh	r3, [r7, #8]
 8008284:	4293      	cmp	r3, r2
 8008286:	bf28      	it	cs
 8008288:	4613      	movcs	r3, r2
 800828a:	b29b      	uxth	r3, r3
 800828c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800828e:	893b      	ldrh	r3, [r7, #8]
 8008290:	461a      	mov	r2, r3
 8008292:	68f9      	ldr	r1, [r7, #12]
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fa21 	bl	80086dc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	88db      	ldrh	r3, [r3, #6]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d104      	bne.n	80082ac <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fa78 	bl	8008798 <USBD_CtlSendStatus>
 80082a8:	e000      	b.n	80082ac <USBD_GetDescriptor+0x31c>
    return;
 80082aa:	bf00      	nop
    }
  }
}
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop

080082b4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	889b      	ldrh	r3, [r3, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d130      	bne.n	8008328 <USBD_SetAddress+0x74>
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	88db      	ldrh	r3, [r3, #6]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d12c      	bne.n	8008328 <USBD_SetAddress+0x74>
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	885b      	ldrh	r3, [r3, #2]
 80082d2:	2b7f      	cmp	r3, #127	; 0x7f
 80082d4:	d828      	bhi.n	8008328 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	885b      	ldrh	r3, [r3, #2]
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082e8:	2b03      	cmp	r3, #3
 80082ea:	d104      	bne.n	80082f6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80082ec:	6839      	ldr	r1, [r7, #0]
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f989 	bl	8008606 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082f4:	e01c      	b.n	8008330 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	7bfa      	ldrb	r2, [r7, #15]
 80082fa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80082fe:	7bfb      	ldrb	r3, [r7, #15]
 8008300:	4619      	mov	r1, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fefc 	bl	8009100 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 fa45 	bl	8008798 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800830e:	7bfb      	ldrb	r3, [r7, #15]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d004      	beq.n	800831e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2202      	movs	r2, #2
 8008318:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800831c:	e008      	b.n	8008330 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2201      	movs	r2, #1
 8008322:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008326:	e003      	b.n	8008330 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008328:	6839      	ldr	r1, [r7, #0]
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f96b 	bl	8008606 <USBD_CtlError>
  }
}
 8008330:	bf00      	nop
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	885b      	ldrh	r3, [r3, #2]
 8008346:	b2da      	uxtb	r2, r3
 8008348:	4b41      	ldr	r3, [pc, #260]	; (8008450 <USBD_SetConfig+0x118>)
 800834a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800834c:	4b40      	ldr	r3, [pc, #256]	; (8008450 <USBD_SetConfig+0x118>)
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d904      	bls.n	800835e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008354:	6839      	ldr	r1, [r7, #0]
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f955 	bl	8008606 <USBD_CtlError>
 800835c:	e075      	b.n	800844a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008364:	2b02      	cmp	r3, #2
 8008366:	d002      	beq.n	800836e <USBD_SetConfig+0x36>
 8008368:	2b03      	cmp	r3, #3
 800836a:	d023      	beq.n	80083b4 <USBD_SetConfig+0x7c>
 800836c:	e062      	b.n	8008434 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800836e:	4b38      	ldr	r3, [pc, #224]	; (8008450 <USBD_SetConfig+0x118>)
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d01a      	beq.n	80083ac <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008376:	4b36      	ldr	r3, [pc, #216]	; (8008450 <USBD_SetConfig+0x118>)
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	461a      	mov	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2203      	movs	r2, #3
 8008384:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008388:	4b31      	ldr	r3, [pc, #196]	; (8008450 <USBD_SetConfig+0x118>)
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	4619      	mov	r1, r3
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f7ff f9c6 	bl	8007720 <USBD_SetClassConfig>
 8008394:	4603      	mov	r3, r0
 8008396:	2b02      	cmp	r3, #2
 8008398:	d104      	bne.n	80083a4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800839a:	6839      	ldr	r1, [r7, #0]
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 f932 	bl	8008606 <USBD_CtlError>
            return;
 80083a2:	e052      	b.n	800844a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f9f7 	bl	8008798 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80083aa:	e04e      	b.n	800844a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 f9f3 	bl	8008798 <USBD_CtlSendStatus>
        break;
 80083b2:	e04a      	b.n	800844a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80083b4:	4b26      	ldr	r3, [pc, #152]	; (8008450 <USBD_SetConfig+0x118>)
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d112      	bne.n	80083e2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2202      	movs	r2, #2
 80083c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80083c4:	4b22      	ldr	r3, [pc, #136]	; (8008450 <USBD_SetConfig+0x118>)
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	461a      	mov	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80083ce:	4b20      	ldr	r3, [pc, #128]	; (8008450 <USBD_SetConfig+0x118>)
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	4619      	mov	r1, r3
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f7ff f9c2 	bl	800775e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f9dc 	bl	8008798 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80083e0:	e033      	b.n	800844a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80083e2:	4b1b      	ldr	r3, [pc, #108]	; (8008450 <USBD_SetConfig+0x118>)
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	461a      	mov	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d01d      	beq.n	800842c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	4619      	mov	r1, r3
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f7ff f9b0 	bl	800775e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80083fe:	4b14      	ldr	r3, [pc, #80]	; (8008450 <USBD_SetConfig+0x118>)
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	461a      	mov	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008408:	4b11      	ldr	r3, [pc, #68]	; (8008450 <USBD_SetConfig+0x118>)
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	4619      	mov	r1, r3
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f7ff f986 	bl	8007720 <USBD_SetClassConfig>
 8008414:	4603      	mov	r3, r0
 8008416:	2b02      	cmp	r3, #2
 8008418:	d104      	bne.n	8008424 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f8f2 	bl	8008606 <USBD_CtlError>
            return;
 8008422:	e012      	b.n	800844a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 f9b7 	bl	8008798 <USBD_CtlSendStatus>
        break;
 800842a:	e00e      	b.n	800844a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 f9b3 	bl	8008798 <USBD_CtlSendStatus>
        break;
 8008432:	e00a      	b.n	800844a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008434:	6839      	ldr	r1, [r7, #0]
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f8e5 	bl	8008606 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800843c:	4b04      	ldr	r3, [pc, #16]	; (8008450 <USBD_SetConfig+0x118>)
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	4619      	mov	r1, r3
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7ff f98b 	bl	800775e <USBD_ClrClassConfig>
        break;
 8008448:	bf00      	nop
    }
  }
}
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	20000451 	.word	0x20000451

08008454 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	88db      	ldrh	r3, [r3, #6]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d004      	beq.n	8008470 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008466:	6839      	ldr	r1, [r7, #0]
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 f8cc 	bl	8008606 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800846e:	e021      	b.n	80084b4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008476:	2b01      	cmp	r3, #1
 8008478:	db17      	blt.n	80084aa <USBD_GetConfig+0x56>
 800847a:	2b02      	cmp	r3, #2
 800847c:	dd02      	ble.n	8008484 <USBD_GetConfig+0x30>
 800847e:	2b03      	cmp	r3, #3
 8008480:	d00b      	beq.n	800849a <USBD_GetConfig+0x46>
 8008482:	e012      	b.n	80084aa <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	3308      	adds	r3, #8
 800848e:	2201      	movs	r2, #1
 8008490:	4619      	mov	r1, r3
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 f922 	bl	80086dc <USBD_CtlSendData>
        break;
 8008498:	e00c      	b.n	80084b4 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	3304      	adds	r3, #4
 800849e:	2201      	movs	r2, #1
 80084a0:	4619      	mov	r1, r3
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f91a 	bl	80086dc <USBD_CtlSendData>
        break;
 80084a8:	e004      	b.n	80084b4 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80084aa:	6839      	ldr	r1, [r7, #0]
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f8aa 	bl	8008606 <USBD_CtlError>
        break;
 80084b2:	bf00      	nop
}
 80084b4:	bf00      	nop
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084cc:	3b01      	subs	r3, #1
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	d81e      	bhi.n	8008510 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	88db      	ldrh	r3, [r3, #6]
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d004      	beq.n	80084e4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 f892 	bl	8008606 <USBD_CtlError>
        break;
 80084e2:	e01a      	b.n	800851a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d005      	beq.n	8008500 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	f043 0202 	orr.w	r2, r3, #2
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	330c      	adds	r3, #12
 8008504:	2202      	movs	r2, #2
 8008506:	4619      	mov	r1, r3
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 f8e7 	bl	80086dc <USBD_CtlSendData>
      break;
 800850e:	e004      	b.n	800851a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008510:	6839      	ldr	r1, [r7, #0]
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f877 	bl	8008606 <USBD_CtlError>
      break;
 8008518:	bf00      	nop
  }
}
 800851a:	bf00      	nop
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b082      	sub	sp, #8
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
 800852a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	885b      	ldrh	r3, [r3, #2]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d106      	bne.n	8008542 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2201      	movs	r2, #1
 8008538:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 f92b 	bl	8008798 <USBD_CtlSendStatus>
  }
}
 8008542:	bf00      	nop
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b082      	sub	sp, #8
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800855a:	3b01      	subs	r3, #1
 800855c:	2b02      	cmp	r3, #2
 800855e:	d80b      	bhi.n	8008578 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	885b      	ldrh	r3, [r3, #2]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d10c      	bne.n	8008582 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 f911 	bl	8008798 <USBD_CtlSendStatus>
      }
      break;
 8008576:	e004      	b.n	8008582 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008578:	6839      	ldr	r1, [r7, #0]
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f843 	bl	8008606 <USBD_CtlError>
      break;
 8008580:	e000      	b.n	8008584 <USBD_ClrFeature+0x3a>
      break;
 8008582:	bf00      	nop
  }
}
 8008584:	bf00      	nop
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	781a      	ldrb	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	785a      	ldrb	r2, [r3, #1]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	3302      	adds	r3, #2
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	3303      	adds	r3, #3
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	021b      	lsls	r3, r3, #8
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	4413      	add	r3, r2
 80085bc:	b29a      	uxth	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	3304      	adds	r3, #4
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	3305      	adds	r3, #5
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	021b      	lsls	r3, r3, #8
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	4413      	add	r3, r2
 80085d8:	b29a      	uxth	r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	3306      	adds	r3, #6
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	b29a      	uxth	r2, r3
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	3307      	adds	r3, #7
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	021b      	lsls	r3, r3, #8
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	4413      	add	r3, r2
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	80da      	strh	r2, [r3, #6]

}
 80085fa:	bf00      	nop
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b082      	sub	sp, #8
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008610:	2180      	movs	r1, #128	; 0x80
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fce2 	bl	8008fdc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008618:	2100      	movs	r1, #0
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 fcde 	bl	8008fdc <USBD_LL_StallEP>
}
 8008620:	bf00      	nop
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008634:	2300      	movs	r3, #0
 8008636:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d032      	beq.n	80086a4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f000 f834 	bl	80086ac <USBD_GetLen>
 8008644:	4603      	mov	r3, r0
 8008646:	3301      	adds	r3, #1
 8008648:	b29b      	uxth	r3, r3
 800864a:	005b      	lsls	r3, r3, #1
 800864c:	b29a      	uxth	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008652:	7dfb      	ldrb	r3, [r7, #23]
 8008654:	1c5a      	adds	r2, r3, #1
 8008656:	75fa      	strb	r2, [r7, #23]
 8008658:	461a      	mov	r2, r3
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	4413      	add	r3, r2
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	7812      	ldrb	r2, [r2, #0]
 8008662:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008664:	7dfb      	ldrb	r3, [r7, #23]
 8008666:	1c5a      	adds	r2, r3, #1
 8008668:	75fa      	strb	r2, [r7, #23]
 800866a:	461a      	mov	r2, r3
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	4413      	add	r3, r2
 8008670:	2203      	movs	r2, #3
 8008672:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008674:	e012      	b.n	800869c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	1c5a      	adds	r2, r3, #1
 800867a:	60fa      	str	r2, [r7, #12]
 800867c:	7dfa      	ldrb	r2, [r7, #23]
 800867e:	1c51      	adds	r1, r2, #1
 8008680:	75f9      	strb	r1, [r7, #23]
 8008682:	4611      	mov	r1, r2
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	440a      	add	r2, r1
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800868c:	7dfb      	ldrb	r3, [r7, #23]
 800868e:	1c5a      	adds	r2, r3, #1
 8008690:	75fa      	strb	r2, [r7, #23]
 8008692:	461a      	mov	r2, r3
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	4413      	add	r3, r2
 8008698:	2200      	movs	r2, #0
 800869a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d1e8      	bne.n	8008676 <USBD_GetString+0x4e>
    }
  }
}
 80086a4:	bf00      	nop
 80086a6:	3718      	adds	r7, #24
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80086b4:	2300      	movs	r3, #0
 80086b6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80086b8:	e005      	b.n	80086c6 <USBD_GetLen+0x1a>
  {
    len++;
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
 80086bc:	3301      	adds	r3, #1
 80086be:	73fb      	strb	r3, [r7, #15]
    buf++;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	3301      	adds	r3, #1
 80086c4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1f5      	bne.n	80086ba <USBD_GetLen+0xe>
  }

  return len;
 80086ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3714      	adds	r7, #20
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	4613      	mov	r3, r2
 80086e8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2202      	movs	r2, #2
 80086ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80086f2:	88fa      	ldrh	r2, [r7, #6]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80086f8:	88fa      	ldrh	r2, [r7, #6]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80086fe:	88fb      	ldrh	r3, [r7, #6]
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	2100      	movs	r1, #0
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	f000 fd31 	bl	800916c <USBD_LL_Transmit>

  return USBD_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	4613      	mov	r3, r2
 8008720:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008722:	88fb      	ldrh	r3, [r7, #6]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	2100      	movs	r1, #0
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f000 fd1f 	bl	800916c <USBD_LL_Transmit>

  return USBD_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	4613      	mov	r3, r2
 8008744:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2203      	movs	r2, #3
 800874a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800874e:	88fa      	ldrh	r2, [r7, #6]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008756:	88fa      	ldrh	r2, [r7, #6]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800875e:	88fb      	ldrh	r3, [r7, #6]
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	2100      	movs	r1, #0
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f000 fd3b 	bl	80091e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	4613      	mov	r3, r2
 8008780:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008782:	88fb      	ldrh	r3, [r7, #6]
 8008784:	68ba      	ldr	r2, [r7, #8]
 8008786:	2100      	movs	r1, #0
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f000 fd29 	bl	80091e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2204      	movs	r2, #4
 80087a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80087a8:	2300      	movs	r3, #0
 80087aa:	2200      	movs	r2, #0
 80087ac:	2100      	movs	r1, #0
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fcdc 	bl	800916c <USBD_LL_Transmit>

  return USBD_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b082      	sub	sp, #8
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2205      	movs	r2, #5
 80087ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087ce:	2300      	movs	r3, #0
 80087d0:	2200      	movs	r2, #0
 80087d2:	2100      	movs	r1, #0
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fd03 	bl	80091e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3708      	adds	r7, #8
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80087e8:	2200      	movs	r2, #0
 80087ea:	4912      	ldr	r1, [pc, #72]	; (8008834 <MX_USB_DEVICE_Init+0x50>)
 80087ec:	4812      	ldr	r0, [pc, #72]	; (8008838 <MX_USB_DEVICE_Init+0x54>)
 80087ee:	f7fe ff3b 	bl	8007668 <USBD_Init>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d001      	beq.n	80087fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80087f8:	f7f8 fe3a 	bl	8001470 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80087fc:	490f      	ldr	r1, [pc, #60]	; (800883c <MX_USB_DEVICE_Init+0x58>)
 80087fe:	480e      	ldr	r0, [pc, #56]	; (8008838 <MX_USB_DEVICE_Init+0x54>)
 8008800:	f7fe ff5d 	bl	80076be <USBD_RegisterClass>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d001      	beq.n	800880e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800880a:	f7f8 fe31 	bl	8001470 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800880e:	490c      	ldr	r1, [pc, #48]	; (8008840 <MX_USB_DEVICE_Init+0x5c>)
 8008810:	4809      	ldr	r0, [pc, #36]	; (8008838 <MX_USB_DEVICE_Init+0x54>)
 8008812:	f7fe fe8b 	bl	800752c <USBD_CDC_RegisterInterface>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d001      	beq.n	8008820 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800881c:	f7f8 fe28 	bl	8001470 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008820:	4805      	ldr	r0, [pc, #20]	; (8008838 <MX_USB_DEVICE_Init+0x54>)
 8008822:	f7fe ff66 	bl	80076f2 <USBD_Start>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d001      	beq.n	8008830 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800882c:	f7f8 fe20 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008830:	bf00      	nop
 8008832:	bd80      	pop	{r7, pc}
 8008834:	2000012c 	.word	0x2000012c
 8008838:	200007a8 	.word	0x200007a8
 800883c:	20000018 	.word	0x20000018
 8008840:	2000011c 	.word	0x2000011c

08008844 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008848:	2200      	movs	r2, #0
 800884a:	4905      	ldr	r1, [pc, #20]	; (8008860 <CDC_Init_FS+0x1c>)
 800884c:	4805      	ldr	r0, [pc, #20]	; (8008864 <CDC_Init_FS+0x20>)
 800884e:	f7fe fe84 	bl	800755a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008852:	4905      	ldr	r1, [pc, #20]	; (8008868 <CDC_Init_FS+0x24>)
 8008854:	4803      	ldr	r0, [pc, #12]	; (8008864 <CDC_Init_FS+0x20>)
 8008856:	f7fe fe9a 	bl	800758e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800885a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800885c:	4618      	mov	r0, r3
 800885e:	bd80      	pop	{r7, pc}
 8008860:	20000e54 	.word	0x20000e54
 8008864:	200007a8 	.word	0x200007a8
 8008868:	20000a6c 	.word	0x20000a6c

0800886c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800886c:	b480      	push	{r7}
 800886e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008870:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008872:	4618      	mov	r0, r3
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	4603      	mov	r3, r0
 8008884:	6039      	str	r1, [r7, #0]
 8008886:	71fb      	strb	r3, [r7, #7]
 8008888:	4613      	mov	r3, r2
 800888a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800888c:	79fb      	ldrb	r3, [r7, #7]
 800888e:	2b23      	cmp	r3, #35	; 0x23
 8008890:	d84a      	bhi.n	8008928 <CDC_Control_FS+0xac>
 8008892:	a201      	add	r2, pc, #4	; (adr r2, 8008898 <CDC_Control_FS+0x1c>)
 8008894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008898:	08008929 	.word	0x08008929
 800889c:	08008929 	.word	0x08008929
 80088a0:	08008929 	.word	0x08008929
 80088a4:	08008929 	.word	0x08008929
 80088a8:	08008929 	.word	0x08008929
 80088ac:	08008929 	.word	0x08008929
 80088b0:	08008929 	.word	0x08008929
 80088b4:	08008929 	.word	0x08008929
 80088b8:	08008929 	.word	0x08008929
 80088bc:	08008929 	.word	0x08008929
 80088c0:	08008929 	.word	0x08008929
 80088c4:	08008929 	.word	0x08008929
 80088c8:	08008929 	.word	0x08008929
 80088cc:	08008929 	.word	0x08008929
 80088d0:	08008929 	.word	0x08008929
 80088d4:	08008929 	.word	0x08008929
 80088d8:	08008929 	.word	0x08008929
 80088dc:	08008929 	.word	0x08008929
 80088e0:	08008929 	.word	0x08008929
 80088e4:	08008929 	.word	0x08008929
 80088e8:	08008929 	.word	0x08008929
 80088ec:	08008929 	.word	0x08008929
 80088f0:	08008929 	.word	0x08008929
 80088f4:	08008929 	.word	0x08008929
 80088f8:	08008929 	.word	0x08008929
 80088fc:	08008929 	.word	0x08008929
 8008900:	08008929 	.word	0x08008929
 8008904:	08008929 	.word	0x08008929
 8008908:	08008929 	.word	0x08008929
 800890c:	08008929 	.word	0x08008929
 8008910:	08008929 	.word	0x08008929
 8008914:	08008929 	.word	0x08008929
 8008918:	08008929 	.word	0x08008929
 800891c:	08008929 	.word	0x08008929
 8008920:	08008929 	.word	0x08008929
 8008924:	08008929 	.word	0x08008929
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008928:	bf00      	nop
  }

  return (USBD_OK);
 800892a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800892c:	4618      	mov	r0, r3
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008942:	6879      	ldr	r1, [r7, #4]
 8008944:	4805      	ldr	r0, [pc, #20]	; (800895c <CDC_Receive_FS+0x24>)
 8008946:	f7fe fe22 	bl	800758e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800894a:	4804      	ldr	r0, [pc, #16]	; (800895c <CDC_Receive_FS+0x24>)
 800894c:	f7fe fe62 	bl	8007614 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008950:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008952:	4618      	mov	r0, r3
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	200007a8 	.word	0x200007a8

08008960 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	460b      	mov	r3, r1
 800896a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008970:	4b0d      	ldr	r3, [pc, #52]	; (80089a8 <CDC_Transmit_FS+0x48>)
 8008972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008976:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800897e:	2b00      	cmp	r3, #0
 8008980:	d001      	beq.n	8008986 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008982:	2301      	movs	r3, #1
 8008984:	e00b      	b.n	800899e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008986:	887b      	ldrh	r3, [r7, #2]
 8008988:	461a      	mov	r2, r3
 800898a:	6879      	ldr	r1, [r7, #4]
 800898c:	4806      	ldr	r0, [pc, #24]	; (80089a8 <CDC_Transmit_FS+0x48>)
 800898e:	f7fe fde4 	bl	800755a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008992:	4805      	ldr	r0, [pc, #20]	; (80089a8 <CDC_Transmit_FS+0x48>)
 8008994:	f7fe fe0f 	bl	80075b6 <USBD_CDC_TransmitPacket>
 8008998:	4603      	mov	r3, r0
 800899a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800899c:	7bfb      	ldrb	r3, [r7, #15]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	200007a8 	.word	0x200007a8

080089ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	4603      	mov	r3, r0
 80089b4:	6039      	str	r1, [r7, #0]
 80089b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	2212      	movs	r2, #18
 80089bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80089be:	4b03      	ldr	r3, [pc, #12]	; (80089cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr
 80089cc:	2000014c 	.word	0x2000014c

080089d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	4603      	mov	r3, r0
 80089d8:	6039      	str	r1, [r7, #0]
 80089da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	2204      	movs	r2, #4
 80089e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80089e2:	4b03      	ldr	r3, [pc, #12]	; (80089f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr
 80089f0:	2000016c 	.word	0x2000016c

080089f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	4603      	mov	r3, r0
 80089fc:	6039      	str	r1, [r7, #0]
 80089fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a00:	79fb      	ldrb	r3, [r7, #7]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d105      	bne.n	8008a12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	4907      	ldr	r1, [pc, #28]	; (8008a28 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a0a:	4808      	ldr	r0, [pc, #32]	; (8008a2c <USBD_FS_ProductStrDescriptor+0x38>)
 8008a0c:	f7ff fe0c 	bl	8008628 <USBD_GetString>
 8008a10:	e004      	b.n	8008a1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a12:	683a      	ldr	r2, [r7, #0]
 8008a14:	4904      	ldr	r1, [pc, #16]	; (8008a28 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a16:	4805      	ldr	r0, [pc, #20]	; (8008a2c <USBD_FS_ProductStrDescriptor+0x38>)
 8008a18:	f7ff fe06 	bl	8008628 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a1c:	4b02      	ldr	r3, [pc, #8]	; (8008a28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3708      	adds	r7, #8
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	2000123c 	.word	0x2000123c
 8008a2c:	080093c4 	.word	0x080093c4

08008a30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	4603      	mov	r3, r0
 8008a38:	6039      	str	r1, [r7, #0]
 8008a3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008a3c:	683a      	ldr	r2, [r7, #0]
 8008a3e:	4904      	ldr	r1, [pc, #16]	; (8008a50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008a40:	4804      	ldr	r0, [pc, #16]	; (8008a54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008a42:	f7ff fdf1 	bl	8008628 <USBD_GetString>
  return USBD_StrDesc;
 8008a46:	4b02      	ldr	r3, [pc, #8]	; (8008a50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	2000123c 	.word	0x2000123c
 8008a54:	080093dc 	.word	0x080093dc

08008a58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	4603      	mov	r3, r0
 8008a60:	6039      	str	r1, [r7, #0]
 8008a62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	221a      	movs	r2, #26
 8008a68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008a6a:	f000 f855 	bl	8008b18 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008a6e:	4b02      	ldr	r3, [pc, #8]	; (8008a78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	20000170 	.word	0x20000170

08008a7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	4603      	mov	r3, r0
 8008a84:	6039      	str	r1, [r7, #0]
 8008a86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008a88:	79fb      	ldrb	r3, [r7, #7]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d105      	bne.n	8008a9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a8e:	683a      	ldr	r2, [r7, #0]
 8008a90:	4907      	ldr	r1, [pc, #28]	; (8008ab0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a92:	4808      	ldr	r0, [pc, #32]	; (8008ab4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a94:	f7ff fdc8 	bl	8008628 <USBD_GetString>
 8008a98:	e004      	b.n	8008aa4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a9a:	683a      	ldr	r2, [r7, #0]
 8008a9c:	4904      	ldr	r1, [pc, #16]	; (8008ab0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a9e:	4805      	ldr	r0, [pc, #20]	; (8008ab4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008aa0:	f7ff fdc2 	bl	8008628 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008aa4:	4b02      	ldr	r3, [pc, #8]	; (8008ab0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	2000123c 	.word	0x2000123c
 8008ab4:	080093f0 	.word	0x080093f0

08008ab8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	4603      	mov	r3, r0
 8008ac0:	6039      	str	r1, [r7, #0]
 8008ac2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ac4:	79fb      	ldrb	r3, [r7, #7]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d105      	bne.n	8008ad6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008aca:	683a      	ldr	r2, [r7, #0]
 8008acc:	4907      	ldr	r1, [pc, #28]	; (8008aec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ace:	4808      	ldr	r0, [pc, #32]	; (8008af0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ad0:	f7ff fdaa 	bl	8008628 <USBD_GetString>
 8008ad4:	e004      	b.n	8008ae0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ad6:	683a      	ldr	r2, [r7, #0]
 8008ad8:	4904      	ldr	r1, [pc, #16]	; (8008aec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ada:	4805      	ldr	r0, [pc, #20]	; (8008af0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008adc:	f7ff fda4 	bl	8008628 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ae0:	4b02      	ldr	r3, [pc, #8]	; (8008aec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	2000123c 	.word	0x2000123c
 8008af0:	080093fc 	.word	0x080093fc

08008af4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	4603      	mov	r3, r0
 8008afc:	6039      	str	r1, [r7, #0]
 8008afe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	220c      	movs	r2, #12
 8008b04:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008b06:	4b03      	ldr	r3, [pc, #12]	; (8008b14 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr
 8008b14:	20000160 	.word	0x20000160

08008b18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008b1e:	4b0f      	ldr	r3, [pc, #60]	; (8008b5c <Get_SerialNum+0x44>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008b24:	4b0e      	ldr	r3, [pc, #56]	; (8008b60 <Get_SerialNum+0x48>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008b2a:	4b0e      	ldr	r3, [pc, #56]	; (8008b64 <Get_SerialNum+0x4c>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4413      	add	r3, r2
 8008b36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d009      	beq.n	8008b52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008b3e:	2208      	movs	r2, #8
 8008b40:	4909      	ldr	r1, [pc, #36]	; (8008b68 <Get_SerialNum+0x50>)
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	f000 f814 	bl	8008b70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008b48:	2204      	movs	r2, #4
 8008b4a:	4908      	ldr	r1, [pc, #32]	; (8008b6c <Get_SerialNum+0x54>)
 8008b4c:	68b8      	ldr	r0, [r7, #8]
 8008b4e:	f000 f80f 	bl	8008b70 <IntToUnicode>
  }
}
 8008b52:	bf00      	nop
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	1fff7590 	.word	0x1fff7590
 8008b60:	1fff7594 	.word	0x1fff7594
 8008b64:	1fff7598 	.word	0x1fff7598
 8008b68:	20000172 	.word	0x20000172
 8008b6c:	20000182 	.word	0x20000182

08008b70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b087      	sub	sp, #28
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008b82:	2300      	movs	r3, #0
 8008b84:	75fb      	strb	r3, [r7, #23]
 8008b86:	e027      	b.n	8008bd8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	0f1b      	lsrs	r3, r3, #28
 8008b8c:	2b09      	cmp	r3, #9
 8008b8e:	d80b      	bhi.n	8008ba8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	0f1b      	lsrs	r3, r3, #28
 8008b94:	b2da      	uxtb	r2, r3
 8008b96:	7dfb      	ldrb	r3, [r7, #23]
 8008b98:	005b      	lsls	r3, r3, #1
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	440b      	add	r3, r1
 8008ba0:	3230      	adds	r2, #48	; 0x30
 8008ba2:	b2d2      	uxtb	r2, r2
 8008ba4:	701a      	strb	r2, [r3, #0]
 8008ba6:	e00a      	b.n	8008bbe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	0f1b      	lsrs	r3, r3, #28
 8008bac:	b2da      	uxtb	r2, r3
 8008bae:	7dfb      	ldrb	r3, [r7, #23]
 8008bb0:	005b      	lsls	r3, r3, #1
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	440b      	add	r3, r1
 8008bb8:	3237      	adds	r2, #55	; 0x37
 8008bba:	b2d2      	uxtb	r2, r2
 8008bbc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	011b      	lsls	r3, r3, #4
 8008bc2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008bc4:	7dfb      	ldrb	r3, [r7, #23]
 8008bc6:	005b      	lsls	r3, r3, #1
 8008bc8:	3301      	adds	r3, #1
 8008bca:	68ba      	ldr	r2, [r7, #8]
 8008bcc:	4413      	add	r3, r2
 8008bce:	2200      	movs	r2, #0
 8008bd0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008bd2:	7dfb      	ldrb	r3, [r7, #23]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	75fb      	strb	r3, [r7, #23]
 8008bd8:	7dfa      	ldrb	r2, [r7, #23]
 8008bda:	79fb      	ldrb	r3, [r7, #7]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d3d3      	bcc.n	8008b88 <IntToUnicode+0x18>
  }
}
 8008be0:	bf00      	nop
 8008be2:	371c      	adds	r7, #28
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b08a      	sub	sp, #40	; 0x28
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bf4:	f107 0314 	add.w	r3, r7, #20
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	601a      	str	r2, [r3, #0]
 8008bfc:	605a      	str	r2, [r3, #4]
 8008bfe:	609a      	str	r2, [r3, #8]
 8008c00:	60da      	str	r2, [r3, #12]
 8008c02:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a1c      	ldr	r2, [pc, #112]	; (8008c7c <HAL_PCD_MspInit+0x90>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d131      	bne.n	8008c72 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c0e:	4b1c      	ldr	r3, [pc, #112]	; (8008c80 <HAL_PCD_MspInit+0x94>)
 8008c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c12:	4a1b      	ldr	r2, [pc, #108]	; (8008c80 <HAL_PCD_MspInit+0x94>)
 8008c14:	f043 0301 	orr.w	r3, r3, #1
 8008c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008c1a:	4b19      	ldr	r3, [pc, #100]	; (8008c80 <HAL_PCD_MspInit+0x94>)
 8008c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c1e:	f003 0301 	and.w	r3, r3, #1
 8008c22:	613b      	str	r3, [r7, #16]
 8008c24:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008c26:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c30:	2300      	movs	r3, #0
 8008c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c34:	2303      	movs	r3, #3
 8008c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 8008c38:	230a      	movs	r3, #10
 8008c3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c3c:	f107 0314 	add.w	r3, r7, #20
 8008c40:	4619      	mov	r1, r3
 8008c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008c46:	f7f8 ffdd 	bl	8001c04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008c4a:	4b0d      	ldr	r3, [pc, #52]	; (8008c80 <HAL_PCD_MspInit+0x94>)
 8008c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c4e:	4a0c      	ldr	r2, [pc, #48]	; (8008c80 <HAL_PCD_MspInit+0x94>)
 8008c50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008c54:	6593      	str	r3, [r2, #88]	; 0x58
 8008c56:	4b0a      	ldr	r3, [pc, #40]	; (8008c80 <HAL_PCD_MspInit+0x94>)
 8008c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008c5e:	60fb      	str	r3, [r7, #12]
 8008c60:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8008c62:	2200      	movs	r2, #0
 8008c64:	2100      	movs	r1, #0
 8008c66:	2043      	movs	r0, #67	; 0x43
 8008c68:	f7f8 ff55 	bl	8001b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8008c6c:	2043      	movs	r0, #67	; 0x43
 8008c6e:	f7f8 ff6e 	bl	8001b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008c72:	bf00      	nop
 8008c74:	3728      	adds	r7, #40	; 0x28
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	40006800 	.word	0x40006800
 8008c80:	40021000 	.word	0x40021000

08008c84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008c98:	4619      	mov	r1, r3
 8008c9a:	4610      	mov	r0, r2
 8008c9c:	f7fe fd72 	bl	8007784 <USBD_LL_SetupStage>
}
 8008ca0:	bf00      	nop
 8008ca2:	3708      	adds	r7, #8
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8008cba:	78fb      	ldrb	r3, [r7, #3]
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	015b      	lsls	r3, r3, #5
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	78fb      	ldrb	r3, [r7, #3]
 8008cca:	4619      	mov	r1, r3
 8008ccc:	f7fe fda5 	bl	800781a <USBD_LL_DataOutStage>
}
 8008cd0:	bf00      	nop
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8008cea:	78fb      	ldrb	r3, [r7, #3]
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	015b      	lsls	r3, r3, #5
 8008cf0:	4413      	add	r3, r2
 8008cf2:	333c      	adds	r3, #60	; 0x3c
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	78fb      	ldrb	r3, [r7, #3]
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	f7fe fdff 	bl	80078fc <USBD_LL_DataInStage>
}
 8008cfe:	bf00      	nop
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b082      	sub	sp, #8
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7fe ff12 	bl	8007b3e <USBD_LL_SOF>
}
 8008d1a:	bf00      	nop
 8008d1c:	3708      	adds	r7, #8
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b084      	sub	sp, #16
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d001      	beq.n	8008d3a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008d36:	f7f8 fb9b 	bl	8001470 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008d40:	7bfa      	ldrb	r2, [r7, #15]
 8008d42:	4611      	mov	r1, r2
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7fe febf 	bl	8007ac8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7fe fe78 	bl	8007a46 <USBD_LL_Reset>
}
 8008d56:	bf00      	nop
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
	...

08008d60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fe feba 	bl	8007ae8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	699b      	ldr	r3, [r3, #24]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d005      	beq.n	8008d88 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d7c:	4b04      	ldr	r3, [pc, #16]	; (8008d90 <HAL_PCD_SuspendCallback+0x30>)
 8008d7e:	691b      	ldr	r3, [r3, #16]
 8008d80:	4a03      	ldr	r2, [pc, #12]	; (8008d90 <HAL_PCD_SuspendCallback+0x30>)
 8008d82:	f043 0306 	orr.w	r3, r3, #6
 8008d86:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008d88:	bf00      	nop
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	e000ed00 	.word	0xe000ed00

08008d94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	699b      	ldr	r3, [r3, #24]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d007      	beq.n	8008db4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008da4:	4b08      	ldr	r3, [pc, #32]	; (8008dc8 <HAL_PCD_ResumeCallback+0x34>)
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	4a07      	ldr	r2, [pc, #28]	; (8008dc8 <HAL_PCD_ResumeCallback+0x34>)
 8008daa:	f023 0306 	bic.w	r3, r3, #6
 8008dae:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008db0:	f000 fab2 	bl	8009318 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7fe fea9 	bl	8007b12 <USBD_LL_Resume>
}
 8008dc0:	bf00      	nop
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	e000ed00 	.word	0xe000ed00

08008dcc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8008dd4:	f7fa f99e 	bl	8003114 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008dd8:	4a2b      	ldr	r2, [pc, #172]	; (8008e88 <USBD_LL_Init+0xbc>)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  pdev->pData = &hpcd_USB_FS;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a29      	ldr	r2, [pc, #164]	; (8008e88 <USBD_LL_Init+0xbc>)
 8008de4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008de8:	4b27      	ldr	r3, [pc, #156]	; (8008e88 <USBD_LL_Init+0xbc>)
 8008dea:	4a28      	ldr	r2, [pc, #160]	; (8008e8c <USBD_LL_Init+0xc0>)
 8008dec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008dee:	4b26      	ldr	r3, [pc, #152]	; (8008e88 <USBD_LL_Init+0xbc>)
 8008df0:	2208      	movs	r2, #8
 8008df2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008df4:	4b24      	ldr	r3, [pc, #144]	; (8008e88 <USBD_LL_Init+0xbc>)
 8008df6:	2202      	movs	r2, #2
 8008df8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008dfa:	4b23      	ldr	r3, [pc, #140]	; (8008e88 <USBD_LL_Init+0xbc>)
 8008dfc:	2202      	movs	r2, #2
 8008dfe:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008e00:	4b21      	ldr	r3, [pc, #132]	; (8008e88 <USBD_LL_Init+0xbc>)
 8008e02:	2200      	movs	r2, #0
 8008e04:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008e06:	4b20      	ldr	r3, [pc, #128]	; (8008e88 <USBD_LL_Init+0xbc>)
 8008e08:	2200      	movs	r2, #0
 8008e0a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008e0c:	4b1e      	ldr	r3, [pc, #120]	; (8008e88 <USBD_LL_Init+0xbc>)
 8008e0e:	2200      	movs	r2, #0
 8008e10:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008e12:	4b1d      	ldr	r3, [pc, #116]	; (8008e88 <USBD_LL_Init+0xbc>)
 8008e14:	2200      	movs	r2, #0
 8008e16:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008e18:	481b      	ldr	r0, [pc, #108]	; (8008e88 <USBD_LL_Init+0xbc>)
 8008e1a:	f7f9 f9d4 	bl	80021c6 <HAL_PCD_Init>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d001      	beq.n	8008e28 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8008e24:	f7f8 fb24 	bl	8001470 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e2e:	2318      	movs	r3, #24
 8008e30:	2200      	movs	r2, #0
 8008e32:	2100      	movs	r1, #0
 8008e34:	f7fa f8a2 	bl	8002f7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e3e:	2358      	movs	r3, #88	; 0x58
 8008e40:	2200      	movs	r2, #0
 8008e42:	2180      	movs	r1, #128	; 0x80
 8008e44:	f7fa f89a 	bl	8002f7c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e4e:	23c0      	movs	r3, #192	; 0xc0
 8008e50:	2200      	movs	r2, #0
 8008e52:	2181      	movs	r1, #129	; 0x81
 8008e54:	f7fa f892 	bl	8002f7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e5e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008e62:	2200      	movs	r2, #0
 8008e64:	2101      	movs	r1, #1
 8008e66:	f7fa f889 	bl	8002f7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e74:	2200      	movs	r2, #0
 8008e76:	2182      	movs	r1, #130	; 0x82
 8008e78:	f7fa f880 	bl	8002f7c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3708      	adds	r7, #8
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	2000143c 	.word	0x2000143c
 8008e8c:	40006800 	.word	0x40006800

08008e90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7f9 fa75 	bl	8002396 <HAL_PCD_Start>
 8008eac:	4603      	mov	r3, r0
 8008eae:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8008eb0:	7bbb      	ldrb	r3, [r7, #14]
 8008eb2:	2b03      	cmp	r3, #3
 8008eb4:	d816      	bhi.n	8008ee4 <USBD_LL_Start+0x54>
 8008eb6:	a201      	add	r2, pc, #4	; (adr r2, 8008ebc <USBD_LL_Start+0x2c>)
 8008eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ebc:	08008ecd 	.word	0x08008ecd
 8008ec0:	08008ed3 	.word	0x08008ed3
 8008ec4:	08008ed9 	.word	0x08008ed9
 8008ec8:	08008edf 	.word	0x08008edf
    case HAL_OK :
      usb_status = USBD_OK;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	73fb      	strb	r3, [r7, #15]
    break;
 8008ed0:	e00b      	b.n	8008eea <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ed2:	2302      	movs	r3, #2
 8008ed4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ed6:	e008      	b.n	8008eea <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	73fb      	strb	r3, [r7, #15]
    break;
 8008edc:	e005      	b.n	8008eea <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ede:	2302      	movs	r3, #2
 8008ee0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee2:	e002      	b.n	8008eea <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008ee4:	2302      	movs	r3, #2
 8008ee6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee8:	bf00      	nop
  }
  return usb_status;
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	4608      	mov	r0, r1
 8008efe:	4611      	mov	r1, r2
 8008f00:	461a      	mov	r2, r3
 8008f02:	4603      	mov	r3, r0
 8008f04:	70fb      	strb	r3, [r7, #3]
 8008f06:	460b      	mov	r3, r1
 8008f08:	70bb      	strb	r3, [r7, #2]
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f12:	2300      	movs	r3, #0
 8008f14:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f1c:	78bb      	ldrb	r3, [r7, #2]
 8008f1e:	883a      	ldrh	r2, [r7, #0]
 8008f20:	78f9      	ldrb	r1, [r7, #3]
 8008f22:	f7f9 fbcd 	bl	80026c0 <HAL_PCD_EP_Open>
 8008f26:	4603      	mov	r3, r0
 8008f28:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008f2a:	7bbb      	ldrb	r3, [r7, #14]
 8008f2c:	2b03      	cmp	r3, #3
 8008f2e:	d817      	bhi.n	8008f60 <USBD_LL_OpenEP+0x6c>
 8008f30:	a201      	add	r2, pc, #4	; (adr r2, 8008f38 <USBD_LL_OpenEP+0x44>)
 8008f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f36:	bf00      	nop
 8008f38:	08008f49 	.word	0x08008f49
 8008f3c:	08008f4f 	.word	0x08008f4f
 8008f40:	08008f55 	.word	0x08008f55
 8008f44:	08008f5b 	.word	0x08008f5b
    case HAL_OK :
      usb_status = USBD_OK;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f4c:	e00b      	b.n	8008f66 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f4e:	2302      	movs	r3, #2
 8008f50:	73fb      	strb	r3, [r7, #15]
    break;
 8008f52:	e008      	b.n	8008f66 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f54:	2301      	movs	r3, #1
 8008f56:	73fb      	strb	r3, [r7, #15]
    break;
 8008f58:	e005      	b.n	8008f66 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f5a:	2302      	movs	r3, #2
 8008f5c:	73fb      	strb	r3, [r7, #15]
    break;
 8008f5e:	e002      	b.n	8008f66 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008f60:	2302      	movs	r3, #2
 8008f62:	73fb      	strb	r3, [r7, #15]
    break;
 8008f64:	bf00      	nop
  }
  return usb_status;
 8008f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f80:	2300      	movs	r3, #0
 8008f82:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f8a:	78fa      	ldrb	r2, [r7, #3]
 8008f8c:	4611      	mov	r1, r2
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7f9 fbf6 	bl	8002780 <HAL_PCD_EP_Close>
 8008f94:	4603      	mov	r3, r0
 8008f96:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8008f98:	7bbb      	ldrb	r3, [r7, #14]
 8008f9a:	2b03      	cmp	r3, #3
 8008f9c:	d816      	bhi.n	8008fcc <USBD_LL_CloseEP+0x5c>
 8008f9e:	a201      	add	r2, pc, #4	; (adr r2, 8008fa4 <USBD_LL_CloseEP+0x34>)
 8008fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa4:	08008fb5 	.word	0x08008fb5
 8008fa8:	08008fbb 	.word	0x08008fbb
 8008fac:	08008fc1 	.word	0x08008fc1
 8008fb0:	08008fc7 	.word	0x08008fc7
    case HAL_OK :
      usb_status = USBD_OK;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	73fb      	strb	r3, [r7, #15]
    break;
 8008fb8:	e00b      	b.n	8008fd2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008fba:	2302      	movs	r3, #2
 8008fbc:	73fb      	strb	r3, [r7, #15]
    break;
 8008fbe:	e008      	b.n	8008fd2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	73fb      	strb	r3, [r7, #15]
    break;
 8008fc4:	e005      	b.n	8008fd2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008fc6:	2302      	movs	r3, #2
 8008fc8:	73fb      	strb	r3, [r7, #15]
    break;
 8008fca:	e002      	b.n	8008fd2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008fcc:	2302      	movs	r3, #2
 8008fce:	73fb      	strb	r3, [r7, #15]
    break;
 8008fd0:	bf00      	nop
  }
  return usb_status;  
 8008fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3710      	adds	r7, #16
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ff6:	78fa      	ldrb	r2, [r7, #3]
 8008ff8:	4611      	mov	r1, r2
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7f9 fc8a 	bl	8002914 <HAL_PCD_EP_SetStall>
 8009000:	4603      	mov	r3, r0
 8009002:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009004:	7bbb      	ldrb	r3, [r7, #14]
 8009006:	2b03      	cmp	r3, #3
 8009008:	d816      	bhi.n	8009038 <USBD_LL_StallEP+0x5c>
 800900a:	a201      	add	r2, pc, #4	; (adr r2, 8009010 <USBD_LL_StallEP+0x34>)
 800900c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009010:	08009021 	.word	0x08009021
 8009014:	08009027 	.word	0x08009027
 8009018:	0800902d 	.word	0x0800902d
 800901c:	08009033 	.word	0x08009033
    case HAL_OK :
      usb_status = USBD_OK;
 8009020:	2300      	movs	r3, #0
 8009022:	73fb      	strb	r3, [r7, #15]
    break;
 8009024:	e00b      	b.n	800903e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009026:	2302      	movs	r3, #2
 8009028:	73fb      	strb	r3, [r7, #15]
    break;
 800902a:	e008      	b.n	800903e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800902c:	2301      	movs	r3, #1
 800902e:	73fb      	strb	r3, [r7, #15]
    break;
 8009030:	e005      	b.n	800903e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009032:	2302      	movs	r3, #2
 8009034:	73fb      	strb	r3, [r7, #15]
    break;
 8009036:	e002      	b.n	800903e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009038:	2302      	movs	r3, #2
 800903a:	73fb      	strb	r3, [r7, #15]
    break;
 800903c:	bf00      	nop
  }
  return usb_status;  
 800903e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009040:	4618      	mov	r0, r3
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	460b      	mov	r3, r1
 8009052:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009054:	2300      	movs	r3, #0
 8009056:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009058:	2300      	movs	r3, #0
 800905a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009062:	78fa      	ldrb	r2, [r7, #3]
 8009064:	4611      	mov	r1, r2
 8009066:	4618      	mov	r0, r3
 8009068:	f7f9 fcae 	bl	80029c8 <HAL_PCD_EP_ClrStall>
 800906c:	4603      	mov	r3, r0
 800906e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8009070:	7bbb      	ldrb	r3, [r7, #14]
 8009072:	2b03      	cmp	r3, #3
 8009074:	d816      	bhi.n	80090a4 <USBD_LL_ClearStallEP+0x5c>
 8009076:	a201      	add	r2, pc, #4	; (adr r2, 800907c <USBD_LL_ClearStallEP+0x34>)
 8009078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907c:	0800908d 	.word	0x0800908d
 8009080:	08009093 	.word	0x08009093
 8009084:	08009099 	.word	0x08009099
 8009088:	0800909f 	.word	0x0800909f
    case HAL_OK :
      usb_status = USBD_OK;
 800908c:	2300      	movs	r3, #0
 800908e:	73fb      	strb	r3, [r7, #15]
    break;
 8009090:	e00b      	b.n	80090aa <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009092:	2302      	movs	r3, #2
 8009094:	73fb      	strb	r3, [r7, #15]
    break;
 8009096:	e008      	b.n	80090aa <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009098:	2301      	movs	r3, #1
 800909a:	73fb      	strb	r3, [r7, #15]
    break;
 800909c:	e005      	b.n	80090aa <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800909e:	2302      	movs	r3, #2
 80090a0:	73fb      	strb	r3, [r7, #15]
    break;
 80090a2:	e002      	b.n	80090aa <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80090a4:	2302      	movs	r3, #2
 80090a6:	73fb      	strb	r3, [r7, #15]
    break;
 80090a8:	bf00      	nop
  }
  return usb_status; 
 80090aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3710      	adds	r7, #16
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	460b      	mov	r3, r1
 80090be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090c6:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80090c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	da08      	bge.n	80090e2 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80090d0:	78fb      	ldrb	r3, [r7, #3]
 80090d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	015b      	lsls	r3, r3, #5
 80090da:	4413      	add	r3, r2
 80090dc:	332a      	adds	r3, #42	; 0x2a
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	e008      	b.n	80090f4 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80090e2:	78fb      	ldrb	r3, [r7, #3]
 80090e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	015b      	lsls	r3, r3, #5
 80090ec:	4413      	add	r3, r2
 80090ee:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80090f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3714      	adds	r7, #20
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	460b      	mov	r3, r1
 800910a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800910c:	2300      	movs	r3, #0
 800910e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009110:	2300      	movs	r3, #0
 8009112:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800911a:	78fa      	ldrb	r2, [r7, #3]
 800911c:	4611      	mov	r1, r2
 800911e:	4618      	mov	r0, r3
 8009120:	f7f9 faa9 	bl	8002676 <HAL_PCD_SetAddress>
 8009124:	4603      	mov	r3, r0
 8009126:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8009128:	7bbb      	ldrb	r3, [r7, #14]
 800912a:	2b03      	cmp	r3, #3
 800912c:	d816      	bhi.n	800915c <USBD_LL_SetUSBAddress+0x5c>
 800912e:	a201      	add	r2, pc, #4	; (adr r2, 8009134 <USBD_LL_SetUSBAddress+0x34>)
 8009130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009134:	08009145 	.word	0x08009145
 8009138:	0800914b 	.word	0x0800914b
 800913c:	08009151 	.word	0x08009151
 8009140:	08009157 	.word	0x08009157
    case HAL_OK :
      usb_status = USBD_OK;
 8009144:	2300      	movs	r3, #0
 8009146:	73fb      	strb	r3, [r7, #15]
    break;
 8009148:	e00b      	b.n	8009162 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800914a:	2302      	movs	r3, #2
 800914c:	73fb      	strb	r3, [r7, #15]
    break;
 800914e:	e008      	b.n	8009162 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009150:	2301      	movs	r3, #1
 8009152:	73fb      	strb	r3, [r7, #15]
    break;
 8009154:	e005      	b.n	8009162 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009156:	2302      	movs	r3, #2
 8009158:	73fb      	strb	r3, [r7, #15]
    break;
 800915a:	e002      	b.n	8009162 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800915c:	2302      	movs	r3, #2
 800915e:	73fb      	strb	r3, [r7, #15]
    break;
 8009160:	bf00      	nop
  }
  return usb_status;  
 8009162:	7bfb      	ldrb	r3, [r7, #15]
}
 8009164:	4618      	mov	r0, r3
 8009166:	3710      	adds	r7, #16
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b086      	sub	sp, #24
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	607a      	str	r2, [r7, #4]
 8009176:	461a      	mov	r2, r3
 8009178:	460b      	mov	r3, r1
 800917a:	72fb      	strb	r3, [r7, #11]
 800917c:	4613      	mov	r3, r2
 800917e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009180:	2300      	movs	r3, #0
 8009182:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009184:	2300      	movs	r3, #0
 8009186:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800918e:	893b      	ldrh	r3, [r7, #8]
 8009190:	7af9      	ldrb	r1, [r7, #11]
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	f7f9 fb85 	bl	80028a2 <HAL_PCD_EP_Transmit>
 8009198:	4603      	mov	r3, r0
 800919a:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800919c:	7dbb      	ldrb	r3, [r7, #22]
 800919e:	2b03      	cmp	r3, #3
 80091a0:	d816      	bhi.n	80091d0 <USBD_LL_Transmit+0x64>
 80091a2:	a201      	add	r2, pc, #4	; (adr r2, 80091a8 <USBD_LL_Transmit+0x3c>)
 80091a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a8:	080091b9 	.word	0x080091b9
 80091ac:	080091bf 	.word	0x080091bf
 80091b0:	080091c5 	.word	0x080091c5
 80091b4:	080091cb 	.word	0x080091cb
    case HAL_OK :
      usb_status = USBD_OK;
 80091b8:	2300      	movs	r3, #0
 80091ba:	75fb      	strb	r3, [r7, #23]
    break;
 80091bc:	e00b      	b.n	80091d6 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80091be:	2302      	movs	r3, #2
 80091c0:	75fb      	strb	r3, [r7, #23]
    break;
 80091c2:	e008      	b.n	80091d6 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80091c4:	2301      	movs	r3, #1
 80091c6:	75fb      	strb	r3, [r7, #23]
    break;
 80091c8:	e005      	b.n	80091d6 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80091ca:	2302      	movs	r3, #2
 80091cc:	75fb      	strb	r3, [r7, #23]
    break;
 80091ce:	e002      	b.n	80091d6 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 80091d0:	2302      	movs	r3, #2
 80091d2:	75fb      	strb	r3, [r7, #23]
    break;
 80091d4:	bf00      	nop
  }
  return usb_status;    
 80091d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3718      	adds	r7, #24
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b086      	sub	sp, #24
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	607a      	str	r2, [r7, #4]
 80091ea:	461a      	mov	r2, r3
 80091ec:	460b      	mov	r3, r1
 80091ee:	72fb      	strb	r3, [r7, #11]
 80091f0:	4613      	mov	r3, r2
 80091f2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091f4:	2300      	movs	r3, #0
 80091f6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091f8:	2300      	movs	r3, #0
 80091fa:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009202:	893b      	ldrh	r3, [r7, #8]
 8009204:	7af9      	ldrb	r1, [r7, #11]
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	f7f9 fafc 	bl	8002804 <HAL_PCD_EP_Receive>
 800920c:	4603      	mov	r3, r0
 800920e:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8009210:	7dbb      	ldrb	r3, [r7, #22]
 8009212:	2b03      	cmp	r3, #3
 8009214:	d816      	bhi.n	8009244 <USBD_LL_PrepareReceive+0x64>
 8009216:	a201      	add	r2, pc, #4	; (adr r2, 800921c <USBD_LL_PrepareReceive+0x3c>)
 8009218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800921c:	0800922d 	.word	0x0800922d
 8009220:	08009233 	.word	0x08009233
 8009224:	08009239 	.word	0x08009239
 8009228:	0800923f 	.word	0x0800923f
    case HAL_OK :
      usb_status = USBD_OK;
 800922c:	2300      	movs	r3, #0
 800922e:	75fb      	strb	r3, [r7, #23]
    break;
 8009230:	e00b      	b.n	800924a <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009232:	2302      	movs	r3, #2
 8009234:	75fb      	strb	r3, [r7, #23]
    break;
 8009236:	e008      	b.n	800924a <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009238:	2301      	movs	r3, #1
 800923a:	75fb      	strb	r3, [r7, #23]
    break;
 800923c:	e005      	b.n	800924a <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800923e:	2302      	movs	r3, #2
 8009240:	75fb      	strb	r3, [r7, #23]
    break;
 8009242:	e002      	b.n	800924a <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 8009244:	2302      	movs	r3, #2
 8009246:	75fb      	strb	r3, [r7, #23]
    break;
 8009248:	bf00      	nop
  }
  return usb_status; 
 800924a:	7dfb      	ldrb	r3, [r7, #23]
}
 800924c:	4618      	mov	r0, r3
 800924e:	3718      	adds	r7, #24
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	460b      	mov	r3, r1
 800925e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009266:	78fa      	ldrb	r2, [r7, #3]
 8009268:	4611      	mov	r1, r2
 800926a:	4618      	mov	r0, r3
 800926c:	f7f9 fb04 	bl	8002878 <HAL_PCD_EP_GetRxCount>
 8009270:	4603      	mov	r3, r0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3708      	adds	r7, #8
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
	...

0800927c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	460b      	mov	r3, r1
 8009286:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009288:	78fb      	ldrb	r3, [r7, #3]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d002      	beq.n	8009294 <HAL_PCDEx_LPM_Callback+0x18>
 800928e:	2b01      	cmp	r3, #1
 8009290:	d013      	beq.n	80092ba <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8009292:	e023      	b.n	80092dc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	699b      	ldr	r3, [r3, #24]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d007      	beq.n	80092ac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800929c:	f000 f83c 	bl	8009318 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092a0:	4b10      	ldr	r3, [pc, #64]	; (80092e4 <HAL_PCDEx_LPM_Callback+0x68>)
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	4a0f      	ldr	r2, [pc, #60]	; (80092e4 <HAL_PCDEx_LPM_Callback+0x68>)
 80092a6:	f023 0306 	bic.w	r3, r3, #6
 80092aa:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7fe fc2d 	bl	8007b12 <USBD_LL_Resume>
    break;
 80092b8:	e010      	b.n	80092dc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7fe fc11 	bl	8007ae8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	699b      	ldr	r3, [r3, #24]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d005      	beq.n	80092da <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092ce:	4b05      	ldr	r3, [pc, #20]	; (80092e4 <HAL_PCDEx_LPM_Callback+0x68>)
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	4a04      	ldr	r2, [pc, #16]	; (80092e4 <HAL_PCDEx_LPM_Callback+0x68>)
 80092d4:	f043 0306 	orr.w	r3, r3, #6
 80092d8:	6113      	str	r3, [r2, #16]
    break;   
 80092da:	bf00      	nop
}
 80092dc:	bf00      	nop
 80092de:	3708      	adds	r7, #8
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	e000ed00 	.word	0xe000ed00

080092e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80092f0:	4b03      	ldr	r3, [pc, #12]	; (8009300 <USBD_static_malloc+0x18>)
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	370c      	adds	r7, #12
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop
 8009300:	20000454 	.word	0x20000454

08009304 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]

}
 800930c:	bf00      	nop
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009318:	b480      	push	{r7}
 800931a:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800931c:	bf00      	nop
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr
	...

08009328 <__libc_init_array>:
 8009328:	b570      	push	{r4, r5, r6, lr}
 800932a:	4e0d      	ldr	r6, [pc, #52]	; (8009360 <__libc_init_array+0x38>)
 800932c:	4c0d      	ldr	r4, [pc, #52]	; (8009364 <__libc_init_array+0x3c>)
 800932e:	1ba4      	subs	r4, r4, r6
 8009330:	10a4      	asrs	r4, r4, #2
 8009332:	2500      	movs	r5, #0
 8009334:	42a5      	cmp	r5, r4
 8009336:	d109      	bne.n	800934c <__libc_init_array+0x24>
 8009338:	4e0b      	ldr	r6, [pc, #44]	; (8009368 <__libc_init_array+0x40>)
 800933a:	4c0c      	ldr	r4, [pc, #48]	; (800936c <__libc_init_array+0x44>)
 800933c:	f000 f836 	bl	80093ac <_init>
 8009340:	1ba4      	subs	r4, r4, r6
 8009342:	10a4      	asrs	r4, r4, #2
 8009344:	2500      	movs	r5, #0
 8009346:	42a5      	cmp	r5, r4
 8009348:	d105      	bne.n	8009356 <__libc_init_array+0x2e>
 800934a:	bd70      	pop	{r4, r5, r6, pc}
 800934c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009350:	4798      	blx	r3
 8009352:	3501      	adds	r5, #1
 8009354:	e7ee      	b.n	8009334 <__libc_init_array+0xc>
 8009356:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800935a:	4798      	blx	r3
 800935c:	3501      	adds	r5, #1
 800935e:	e7f2      	b.n	8009346 <__libc_init_array+0x1e>
 8009360:	0800945c 	.word	0x0800945c
 8009364:	0800945c 	.word	0x0800945c
 8009368:	0800945c 	.word	0x0800945c
 800936c:	08009464 	.word	0x08009464

08009370 <memset>:
 8009370:	4402      	add	r2, r0
 8009372:	4603      	mov	r3, r0
 8009374:	4293      	cmp	r3, r2
 8009376:	d100      	bne.n	800937a <memset+0xa>
 8009378:	4770      	bx	lr
 800937a:	f803 1b01 	strb.w	r1, [r3], #1
 800937e:	e7f9      	b.n	8009374 <memset+0x4>

08009380 <strncpy>:
 8009380:	b570      	push	{r4, r5, r6, lr}
 8009382:	3901      	subs	r1, #1
 8009384:	4604      	mov	r4, r0
 8009386:	b902      	cbnz	r2, 800938a <strncpy+0xa>
 8009388:	bd70      	pop	{r4, r5, r6, pc}
 800938a:	4623      	mov	r3, r4
 800938c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8009390:	f803 5b01 	strb.w	r5, [r3], #1
 8009394:	1e56      	subs	r6, r2, #1
 8009396:	b92d      	cbnz	r5, 80093a4 <strncpy+0x24>
 8009398:	4414      	add	r4, r2
 800939a:	42a3      	cmp	r3, r4
 800939c:	d0f4      	beq.n	8009388 <strncpy+0x8>
 800939e:	f803 5b01 	strb.w	r5, [r3], #1
 80093a2:	e7fa      	b.n	800939a <strncpy+0x1a>
 80093a4:	461c      	mov	r4, r3
 80093a6:	4632      	mov	r2, r6
 80093a8:	e7ed      	b.n	8009386 <strncpy+0x6>
	...

080093ac <_init>:
 80093ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ae:	bf00      	nop
 80093b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093b2:	bc08      	pop	{r3}
 80093b4:	469e      	mov	lr, r3
 80093b6:	4770      	bx	lr

080093b8 <_fini>:
 80093b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ba:	bf00      	nop
 80093bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093be:	bc08      	pop	{r3}
 80093c0:	469e      	mov	lr, r3
 80093c2:	4770      	bx	lr
