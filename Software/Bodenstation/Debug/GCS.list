
GCS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095e4  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08009774  08009774  00019774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009820  08009820  0002018c  2**0
                  CONTENTS
  4 .ARM          00000008  08009820  08009820  00019820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009828  08009828  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009828  08009828  00019828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009830  08009830  00019830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08009834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013e4  2000018c  080099c0  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001570  080099c0  00021570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027e0f  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005116  00000000  00000000  00047fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001760  00000000  00000000  0004d0e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001518  00000000  00000000  0004e848  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021ef2  00000000  00000000  0004fd60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019f2a  00000000  00000000  00071c52  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ab413  00000000  00000000  0008bb7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136f8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006050  00000000  00000000  0013700c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000018c 	.word	0x2000018c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800975c 	.word	0x0800975c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000190 	.word	0x20000190
 80001cc:	0800975c 	.word	0x0800975c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__gedf2>:
 8000548:	f04f 3cff 	mov.w	ip, #4294967295
 800054c:	e006      	b.n	800055c <__cmpdf2+0x4>
 800054e:	bf00      	nop

08000550 <__ledf2>:
 8000550:	f04f 0c01 	mov.w	ip, #1
 8000554:	e002      	b.n	800055c <__cmpdf2+0x4>
 8000556:	bf00      	nop

08000558 <__cmpdf2>:
 8000558:	f04f 0c01 	mov.w	ip, #1
 800055c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000560:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000564:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000568:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800056c:	bf18      	it	ne
 800056e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000572:	d01b      	beq.n	80005ac <__cmpdf2+0x54>
 8000574:	b001      	add	sp, #4
 8000576:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800057a:	bf0c      	ite	eq
 800057c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000580:	ea91 0f03 	teqne	r1, r3
 8000584:	bf02      	ittt	eq
 8000586:	ea90 0f02 	teqeq	r0, r2
 800058a:	2000      	moveq	r0, #0
 800058c:	4770      	bxeq	lr
 800058e:	f110 0f00 	cmn.w	r0, #0
 8000592:	ea91 0f03 	teq	r1, r3
 8000596:	bf58      	it	pl
 8000598:	4299      	cmppl	r1, r3
 800059a:	bf08      	it	eq
 800059c:	4290      	cmpeq	r0, r2
 800059e:	bf2c      	ite	cs
 80005a0:	17d8      	asrcs	r0, r3, #31
 80005a2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005a6:	f040 0001 	orr.w	r0, r0, #1
 80005aa:	4770      	bx	lr
 80005ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005b4:	d102      	bne.n	80005bc <__cmpdf2+0x64>
 80005b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005ba:	d107      	bne.n	80005cc <__cmpdf2+0x74>
 80005bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005c4:	d1d6      	bne.n	8000574 <__cmpdf2+0x1c>
 80005c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005ca:	d0d3      	beq.n	8000574 <__cmpdf2+0x1c>
 80005cc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <__aeabi_cdrcmple>:
 80005d4:	4684      	mov	ip, r0
 80005d6:	4610      	mov	r0, r2
 80005d8:	4662      	mov	r2, ip
 80005da:	468c      	mov	ip, r1
 80005dc:	4619      	mov	r1, r3
 80005de:	4663      	mov	r3, ip
 80005e0:	e000      	b.n	80005e4 <__aeabi_cdcmpeq>
 80005e2:	bf00      	nop

080005e4 <__aeabi_cdcmpeq>:
 80005e4:	b501      	push	{r0, lr}
 80005e6:	f7ff ffb7 	bl	8000558 <__cmpdf2>
 80005ea:	2800      	cmp	r0, #0
 80005ec:	bf48      	it	mi
 80005ee:	f110 0f00 	cmnmi.w	r0, #0
 80005f2:	bd01      	pop	{r0, pc}

080005f4 <__aeabi_dcmpeq>:
 80005f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f8:	f7ff fff4 	bl	80005e4 <__aeabi_cdcmpeq>
 80005fc:	bf0c      	ite	eq
 80005fe:	2001      	moveq	r0, #1
 8000600:	2000      	movne	r0, #0
 8000602:	f85d fb08 	ldr.w	pc, [sp], #8
 8000606:	bf00      	nop

08000608 <__aeabi_dcmplt>:
 8000608:	f84d ed08 	str.w	lr, [sp, #-8]!
 800060c:	f7ff ffea 	bl	80005e4 <__aeabi_cdcmpeq>
 8000610:	bf34      	ite	cc
 8000612:	2001      	movcc	r0, #1
 8000614:	2000      	movcs	r0, #0
 8000616:	f85d fb08 	ldr.w	pc, [sp], #8
 800061a:	bf00      	nop

0800061c <__aeabi_dcmple>:
 800061c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000620:	f7ff ffe0 	bl	80005e4 <__aeabi_cdcmpeq>
 8000624:	bf94      	ite	ls
 8000626:	2001      	movls	r0, #1
 8000628:	2000      	movhi	r0, #0
 800062a:	f85d fb08 	ldr.w	pc, [sp], #8
 800062e:	bf00      	nop

08000630 <__aeabi_dcmpge>:
 8000630:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000634:	f7ff ffce 	bl	80005d4 <__aeabi_cdrcmple>
 8000638:	bf94      	ite	ls
 800063a:	2001      	movls	r0, #1
 800063c:	2000      	movhi	r0, #0
 800063e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000642:	bf00      	nop

08000644 <__aeabi_dcmpgt>:
 8000644:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000648:	f7ff ffc4 	bl	80005d4 <__aeabi_cdrcmple>
 800064c:	bf34      	ite	cc
 800064e:	2001      	movcc	r0, #1
 8000650:	2000      	movcs	r0, #0
 8000652:	f85d fb08 	ldr.w	pc, [sp], #8
 8000656:	bf00      	nop

08000658 <__aeabi_uldivmod>:
 8000658:	b953      	cbnz	r3, 8000670 <__aeabi_uldivmod+0x18>
 800065a:	b94a      	cbnz	r2, 8000670 <__aeabi_uldivmod+0x18>
 800065c:	2900      	cmp	r1, #0
 800065e:	bf08      	it	eq
 8000660:	2800      	cmpeq	r0, #0
 8000662:	bf1c      	itt	ne
 8000664:	f04f 31ff 	movne.w	r1, #4294967295
 8000668:	f04f 30ff 	movne.w	r0, #4294967295
 800066c:	f000 b972 	b.w	8000954 <__aeabi_idiv0>
 8000670:	f1ad 0c08 	sub.w	ip, sp, #8
 8000674:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000678:	f000 f806 	bl	8000688 <__udivmoddi4>
 800067c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <__udivmoddi4>:
 8000688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800068c:	9e08      	ldr	r6, [sp, #32]
 800068e:	4604      	mov	r4, r0
 8000690:	4688      	mov	r8, r1
 8000692:	2b00      	cmp	r3, #0
 8000694:	d14b      	bne.n	800072e <__udivmoddi4+0xa6>
 8000696:	428a      	cmp	r2, r1
 8000698:	4615      	mov	r5, r2
 800069a:	d967      	bls.n	800076c <__udivmoddi4+0xe4>
 800069c:	fab2 f282 	clz	r2, r2
 80006a0:	b14a      	cbz	r2, 80006b6 <__udivmoddi4+0x2e>
 80006a2:	f1c2 0720 	rsb	r7, r2, #32
 80006a6:	fa01 f302 	lsl.w	r3, r1, r2
 80006aa:	fa20 f707 	lsr.w	r7, r0, r7
 80006ae:	4095      	lsls	r5, r2
 80006b0:	ea47 0803 	orr.w	r8, r7, r3
 80006b4:	4094      	lsls	r4, r2
 80006b6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006ba:	0c23      	lsrs	r3, r4, #16
 80006bc:	fbb8 f7fe 	udiv	r7, r8, lr
 80006c0:	fa1f fc85 	uxth.w	ip, r5
 80006c4:	fb0e 8817 	mls	r8, lr, r7, r8
 80006c8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006cc:	fb07 f10c 	mul.w	r1, r7, ip
 80006d0:	4299      	cmp	r1, r3
 80006d2:	d909      	bls.n	80006e8 <__udivmoddi4+0x60>
 80006d4:	18eb      	adds	r3, r5, r3
 80006d6:	f107 30ff 	add.w	r0, r7, #4294967295
 80006da:	f080 811b 	bcs.w	8000914 <__udivmoddi4+0x28c>
 80006de:	4299      	cmp	r1, r3
 80006e0:	f240 8118 	bls.w	8000914 <__udivmoddi4+0x28c>
 80006e4:	3f02      	subs	r7, #2
 80006e6:	442b      	add	r3, r5
 80006e8:	1a5b      	subs	r3, r3, r1
 80006ea:	b2a4      	uxth	r4, r4
 80006ec:	fbb3 f0fe 	udiv	r0, r3, lr
 80006f0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006f8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006fc:	45a4      	cmp	ip, r4
 80006fe:	d909      	bls.n	8000714 <__udivmoddi4+0x8c>
 8000700:	192c      	adds	r4, r5, r4
 8000702:	f100 33ff 	add.w	r3, r0, #4294967295
 8000706:	f080 8107 	bcs.w	8000918 <__udivmoddi4+0x290>
 800070a:	45a4      	cmp	ip, r4
 800070c:	f240 8104 	bls.w	8000918 <__udivmoddi4+0x290>
 8000710:	3802      	subs	r0, #2
 8000712:	442c      	add	r4, r5
 8000714:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000718:	eba4 040c 	sub.w	r4, r4, ip
 800071c:	2700      	movs	r7, #0
 800071e:	b11e      	cbz	r6, 8000728 <__udivmoddi4+0xa0>
 8000720:	40d4      	lsrs	r4, r2
 8000722:	2300      	movs	r3, #0
 8000724:	e9c6 4300 	strd	r4, r3, [r6]
 8000728:	4639      	mov	r1, r7
 800072a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072e:	428b      	cmp	r3, r1
 8000730:	d909      	bls.n	8000746 <__udivmoddi4+0xbe>
 8000732:	2e00      	cmp	r6, #0
 8000734:	f000 80eb 	beq.w	800090e <__udivmoddi4+0x286>
 8000738:	2700      	movs	r7, #0
 800073a:	e9c6 0100 	strd	r0, r1, [r6]
 800073e:	4638      	mov	r0, r7
 8000740:	4639      	mov	r1, r7
 8000742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000746:	fab3 f783 	clz	r7, r3
 800074a:	2f00      	cmp	r7, #0
 800074c:	d147      	bne.n	80007de <__udivmoddi4+0x156>
 800074e:	428b      	cmp	r3, r1
 8000750:	d302      	bcc.n	8000758 <__udivmoddi4+0xd0>
 8000752:	4282      	cmp	r2, r0
 8000754:	f200 80fa 	bhi.w	800094c <__udivmoddi4+0x2c4>
 8000758:	1a84      	subs	r4, r0, r2
 800075a:	eb61 0303 	sbc.w	r3, r1, r3
 800075e:	2001      	movs	r0, #1
 8000760:	4698      	mov	r8, r3
 8000762:	2e00      	cmp	r6, #0
 8000764:	d0e0      	beq.n	8000728 <__udivmoddi4+0xa0>
 8000766:	e9c6 4800 	strd	r4, r8, [r6]
 800076a:	e7dd      	b.n	8000728 <__udivmoddi4+0xa0>
 800076c:	b902      	cbnz	r2, 8000770 <__udivmoddi4+0xe8>
 800076e:	deff      	udf	#255	; 0xff
 8000770:	fab2 f282 	clz	r2, r2
 8000774:	2a00      	cmp	r2, #0
 8000776:	f040 808f 	bne.w	8000898 <__udivmoddi4+0x210>
 800077a:	1b49      	subs	r1, r1, r5
 800077c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000780:	fa1f f885 	uxth.w	r8, r5
 8000784:	2701      	movs	r7, #1
 8000786:	fbb1 fcfe 	udiv	ip, r1, lr
 800078a:	0c23      	lsrs	r3, r4, #16
 800078c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000790:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000794:	fb08 f10c 	mul.w	r1, r8, ip
 8000798:	4299      	cmp	r1, r3
 800079a:	d907      	bls.n	80007ac <__udivmoddi4+0x124>
 800079c:	18eb      	adds	r3, r5, r3
 800079e:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007a2:	d202      	bcs.n	80007aa <__udivmoddi4+0x122>
 80007a4:	4299      	cmp	r1, r3
 80007a6:	f200 80cd 	bhi.w	8000944 <__udivmoddi4+0x2bc>
 80007aa:	4684      	mov	ip, r0
 80007ac:	1a59      	subs	r1, r3, r1
 80007ae:	b2a3      	uxth	r3, r4
 80007b0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007b4:	fb0e 1410 	mls	r4, lr, r0, r1
 80007b8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80007bc:	fb08 f800 	mul.w	r8, r8, r0
 80007c0:	45a0      	cmp	r8, r4
 80007c2:	d907      	bls.n	80007d4 <__udivmoddi4+0x14c>
 80007c4:	192c      	adds	r4, r5, r4
 80007c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ca:	d202      	bcs.n	80007d2 <__udivmoddi4+0x14a>
 80007cc:	45a0      	cmp	r8, r4
 80007ce:	f200 80b6 	bhi.w	800093e <__udivmoddi4+0x2b6>
 80007d2:	4618      	mov	r0, r3
 80007d4:	eba4 0408 	sub.w	r4, r4, r8
 80007d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007dc:	e79f      	b.n	800071e <__udivmoddi4+0x96>
 80007de:	f1c7 0c20 	rsb	ip, r7, #32
 80007e2:	40bb      	lsls	r3, r7
 80007e4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007e8:	ea4e 0e03 	orr.w	lr, lr, r3
 80007ec:	fa01 f407 	lsl.w	r4, r1, r7
 80007f0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007f4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007f8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007fc:	4325      	orrs	r5, r4
 80007fe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000802:	0c2c      	lsrs	r4, r5, #16
 8000804:	fb08 3319 	mls	r3, r8, r9, r3
 8000808:	fa1f fa8e 	uxth.w	sl, lr
 800080c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000810:	fb09 f40a 	mul.w	r4, r9, sl
 8000814:	429c      	cmp	r4, r3
 8000816:	fa02 f207 	lsl.w	r2, r2, r7
 800081a:	fa00 f107 	lsl.w	r1, r0, r7
 800081e:	d90b      	bls.n	8000838 <__udivmoddi4+0x1b0>
 8000820:	eb1e 0303 	adds.w	r3, lr, r3
 8000824:	f109 30ff 	add.w	r0, r9, #4294967295
 8000828:	f080 8087 	bcs.w	800093a <__udivmoddi4+0x2b2>
 800082c:	429c      	cmp	r4, r3
 800082e:	f240 8084 	bls.w	800093a <__udivmoddi4+0x2b2>
 8000832:	f1a9 0902 	sub.w	r9, r9, #2
 8000836:	4473      	add	r3, lr
 8000838:	1b1b      	subs	r3, r3, r4
 800083a:	b2ad      	uxth	r5, r5
 800083c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000840:	fb08 3310 	mls	r3, r8, r0, r3
 8000844:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000848:	fb00 fa0a 	mul.w	sl, r0, sl
 800084c:	45a2      	cmp	sl, r4
 800084e:	d908      	bls.n	8000862 <__udivmoddi4+0x1da>
 8000850:	eb1e 0404 	adds.w	r4, lr, r4
 8000854:	f100 33ff 	add.w	r3, r0, #4294967295
 8000858:	d26b      	bcs.n	8000932 <__udivmoddi4+0x2aa>
 800085a:	45a2      	cmp	sl, r4
 800085c:	d969      	bls.n	8000932 <__udivmoddi4+0x2aa>
 800085e:	3802      	subs	r0, #2
 8000860:	4474      	add	r4, lr
 8000862:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000866:	fba0 8902 	umull	r8, r9, r0, r2
 800086a:	eba4 040a 	sub.w	r4, r4, sl
 800086e:	454c      	cmp	r4, r9
 8000870:	46c2      	mov	sl, r8
 8000872:	464b      	mov	r3, r9
 8000874:	d354      	bcc.n	8000920 <__udivmoddi4+0x298>
 8000876:	d051      	beq.n	800091c <__udivmoddi4+0x294>
 8000878:	2e00      	cmp	r6, #0
 800087a:	d069      	beq.n	8000950 <__udivmoddi4+0x2c8>
 800087c:	ebb1 050a 	subs.w	r5, r1, sl
 8000880:	eb64 0403 	sbc.w	r4, r4, r3
 8000884:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000888:	40fd      	lsrs	r5, r7
 800088a:	40fc      	lsrs	r4, r7
 800088c:	ea4c 0505 	orr.w	r5, ip, r5
 8000890:	e9c6 5400 	strd	r5, r4, [r6]
 8000894:	2700      	movs	r7, #0
 8000896:	e747      	b.n	8000728 <__udivmoddi4+0xa0>
 8000898:	f1c2 0320 	rsb	r3, r2, #32
 800089c:	fa20 f703 	lsr.w	r7, r0, r3
 80008a0:	4095      	lsls	r5, r2
 80008a2:	fa01 f002 	lsl.w	r0, r1, r2
 80008a6:	fa21 f303 	lsr.w	r3, r1, r3
 80008aa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008ae:	4338      	orrs	r0, r7
 80008b0:	0c01      	lsrs	r1, r0, #16
 80008b2:	fbb3 f7fe 	udiv	r7, r3, lr
 80008b6:	fa1f f885 	uxth.w	r8, r5
 80008ba:	fb0e 3317 	mls	r3, lr, r7, r3
 80008be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008c2:	fb07 f308 	mul.w	r3, r7, r8
 80008c6:	428b      	cmp	r3, r1
 80008c8:	fa04 f402 	lsl.w	r4, r4, r2
 80008cc:	d907      	bls.n	80008de <__udivmoddi4+0x256>
 80008ce:	1869      	adds	r1, r5, r1
 80008d0:	f107 3cff 	add.w	ip, r7, #4294967295
 80008d4:	d22f      	bcs.n	8000936 <__udivmoddi4+0x2ae>
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d92d      	bls.n	8000936 <__udivmoddi4+0x2ae>
 80008da:	3f02      	subs	r7, #2
 80008dc:	4429      	add	r1, r5
 80008de:	1acb      	subs	r3, r1, r3
 80008e0:	b281      	uxth	r1, r0
 80008e2:	fbb3 f0fe 	udiv	r0, r3, lr
 80008e6:	fb0e 3310 	mls	r3, lr, r0, r3
 80008ea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008ee:	fb00 f308 	mul.w	r3, r0, r8
 80008f2:	428b      	cmp	r3, r1
 80008f4:	d907      	bls.n	8000906 <__udivmoddi4+0x27e>
 80008f6:	1869      	adds	r1, r5, r1
 80008f8:	f100 3cff 	add.w	ip, r0, #4294967295
 80008fc:	d217      	bcs.n	800092e <__udivmoddi4+0x2a6>
 80008fe:	428b      	cmp	r3, r1
 8000900:	d915      	bls.n	800092e <__udivmoddi4+0x2a6>
 8000902:	3802      	subs	r0, #2
 8000904:	4429      	add	r1, r5
 8000906:	1ac9      	subs	r1, r1, r3
 8000908:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800090c:	e73b      	b.n	8000786 <__udivmoddi4+0xfe>
 800090e:	4637      	mov	r7, r6
 8000910:	4630      	mov	r0, r6
 8000912:	e709      	b.n	8000728 <__udivmoddi4+0xa0>
 8000914:	4607      	mov	r7, r0
 8000916:	e6e7      	b.n	80006e8 <__udivmoddi4+0x60>
 8000918:	4618      	mov	r0, r3
 800091a:	e6fb      	b.n	8000714 <__udivmoddi4+0x8c>
 800091c:	4541      	cmp	r1, r8
 800091e:	d2ab      	bcs.n	8000878 <__udivmoddi4+0x1f0>
 8000920:	ebb8 0a02 	subs.w	sl, r8, r2
 8000924:	eb69 020e 	sbc.w	r2, r9, lr
 8000928:	3801      	subs	r0, #1
 800092a:	4613      	mov	r3, r2
 800092c:	e7a4      	b.n	8000878 <__udivmoddi4+0x1f0>
 800092e:	4660      	mov	r0, ip
 8000930:	e7e9      	b.n	8000906 <__udivmoddi4+0x27e>
 8000932:	4618      	mov	r0, r3
 8000934:	e795      	b.n	8000862 <__udivmoddi4+0x1da>
 8000936:	4667      	mov	r7, ip
 8000938:	e7d1      	b.n	80008de <__udivmoddi4+0x256>
 800093a:	4681      	mov	r9, r0
 800093c:	e77c      	b.n	8000838 <__udivmoddi4+0x1b0>
 800093e:	3802      	subs	r0, #2
 8000940:	442c      	add	r4, r5
 8000942:	e747      	b.n	80007d4 <__udivmoddi4+0x14c>
 8000944:	f1ac 0c02 	sub.w	ip, ip, #2
 8000948:	442b      	add	r3, r5
 800094a:	e72f      	b.n	80007ac <__udivmoddi4+0x124>
 800094c:	4638      	mov	r0, r7
 800094e:	e708      	b.n	8000762 <__udivmoddi4+0xda>
 8000950:	4637      	mov	r7, r6
 8000952:	e6e9      	b.n	8000728 <__udivmoddi4+0xa0>

08000954 <__aeabi_idiv0>:
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop

08000958 <_ZN7AppMainC1Ev>:
 *      Author: marce
 */

#include "AppMain.h"

AppMain::AppMain() {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4618      	mov	r0, r3
 8000964:	f000 fa70 	bl	8000e48 <_ZN5ModelC1Ev>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	33a0      	adds	r3, #160	; 0xa0
 800096c:	4618      	mov	r0, r3
 800096e:	f000 fab7 	bl	8000ee0 <_ZN10RFM95_LoRaC1Ev>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	33c0      	adds	r3, #192	; 0xc0
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	4611      	mov	r1, r2
 800097a:	4618      	mov	r0, r3
 800097c:	f000 f99d 	bl	8000cba <_ZN3GPSC1EP5Model>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8000986:	4618      	mov	r0, r3
 8000988:	f000 fecd 	bl	8001726 <_ZN7USB_ComC1Ev>
}
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <_ZN7AppMain7initRFMEv>:

void AppMain::initRFM() {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]

	rfm95.setFrequency(868000000);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	33a0      	adds	r3, #160	; 0xa0
 80009a4:	4917      	ldr	r1, [pc, #92]	; (8000a04 <_ZN7AppMain7initRFMEv+0x6c>)
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 fd1a 	bl	80013e0 <_ZN10RFM95_LoRa12setFrequencyEl>
	rfm95.setSignalBandwidth(31.25E3);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	33a0      	adds	r3, #160	; 0xa0
 80009b0:	f647 2112 	movw	r1, #31250	; 0x7a12
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fd97 	bl	80014e8 <_ZN10RFM95_LoRa18setSignalBandwidthEl>
	rfm95.setSpreadingFactor(12);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	33a0      	adds	r3, #160	; 0xa0
 80009be:	210c      	movs	r1, #12
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 fd51 	bl	8001468 <_ZN10RFM95_LoRa18setSpreadingFactorEi>
	rfm95.setCodingRate4(5);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	33a0      	adds	r3, #160	; 0xa0
 80009ca:	2105      	movs	r1, #5
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 fe4f 	bl	8001670 <_ZN10RFM95_LoRa14setCodingRate4Ei>
	if (!rfm95.begin(866E6)) {
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	33a0      	adds	r3, #160	; 0xa0
 80009d6:	490c      	ldr	r1, [pc, #48]	; (8000a08 <_ZN7AppMain7initRFMEv+0x70>)
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 fb29 	bl	8001030 <_ZN10RFM95_LoRa5beginEl>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	bf0c      	ite	eq
 80009e4:	2301      	moveq	r3, #1
 80009e6:	2300      	movne	r3, #0
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d005      	beq.n	80009fa <_ZN7AppMain7initRFMEv+0x62>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80009ee:	2201      	movs	r2, #1
 80009f0:	2102      	movs	r1, #2
 80009f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f6:	f001 fde7 	bl	80025c8 <HAL_GPIO_WritePin>
	}
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	33bca100 	.word	0x33bca100
 8000a08:	339e1c80 	.word	0x339e1c80

08000a0c <_ZN7AppMain8mainProgEv>:

void AppMain::mainProg() {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b0e2      	sub	sp, #392	; 0x188
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	6018      	str	r0, [r3, #0]


	HAL_Delay(100);
 8000a16:	2064      	movs	r0, #100	; 0x64
 8000a18:	f001 faf0 	bl	8001ffc <HAL_Delay>
	gps.init();
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	33c0      	adds	r3, #192	; 0xc0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 f96b 	bl	8000cfe <_ZN3GPS4initEv>
	initRFM();
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	6818      	ldr	r0, [r3, #0]
 8000a2c:	f7ff ffb4 	bl	8000998 <_ZN7AppMain7initRFMEv>

	uint8_t transmitUSB1[TRANSMIT_DATA_LENGTH/3];
	uint8_t transmitUSB2[TRANSMIT_DATA_LENGTH/3];
	uint8_t transmitUSB3[TRANSMIT_DATA_LENGTH/3];

	uint8_t txOffset 	= 0;	//offset after payload read
 8000a30:	2300      	movs	r3, #0
 8000a32:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	uint8_t counter 	= 0;	//Payload counter
 8000a36:	2300      	movs	r3, #0
 8000a38:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
	uint8_t gpsCounter	= 0;	//GPS Counter
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	uint8_t splitCnt	= 0;	//sliptcounter
 8000a42:	2300      	movs	r3, #0
 8000a44:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
	uint8_t packetSize 	= 0;	//packetsize from RFM95 receive
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177

	bool init			= true;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
	while (1) {

		if(init){
 8000a54:	f897 3183 	ldrb.w	r3, [r7, #387]	; 0x183
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d003      	beq.n	8000a64 <_ZN7AppMain8mainProgEv+0x58>
			init = false;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8000a62:	e7f7      	b.n	8000a54 <_ZN7AppMain8mainProgEv+0x48>
		}else{
			/*Prepare for Transmit*/

			//-----------------------read RFM data------------------------------
			packetSize = rfm95.parsePacket();
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	33a0      	adds	r3, #160	; 0xa0
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 fb22 	bl	80010b6 <_ZN10RFM95_LoRa11parsePacketEi>
 8000a72:	4603      	mov	r3, r0
 8000a74:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
			if (packetSize != 0) {
 8000a78:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d0e9      	beq.n	8000a54 <_ZN7AppMain8mainProgEv+0x48>
				counter = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
				while (rfm95.available()) {
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	33a0      	adds	r3, #160	; 0xa0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 fbee 	bl	800126e <_ZN10RFM95_LoRa9availableEv>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	bf14      	ite	ne
 8000a98:	2301      	movne	r3, #1
 8000a9a:	2300      	moveq	r3, #0
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d014      	beq.n	8000acc <_ZN7AppMain8mainProgEv+0xc0>
					transmitData[counter] = rfm95.read();
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	33a0      	adds	r3, #160	; 0xa0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 fbf1 	bl	8001290 <_ZN10RFM95_LoRa4readEv>
 8000aae:	4602      	mov	r2, r0
 8000ab0:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 8000aba:	440b      	add	r3, r1
 8000abc:	f803 2ccc 	strb.w	r2, [r3, #-204]
					counter++;
 8000ac0:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
				while (rfm95.available()) {
 8000aca:	e7dc      	b.n	8000a86 <_ZN7AppMain8mainProgEv+0x7a>
				}
				counter++;
 8000acc:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
				transmitData[counter] = rfm95.packetRssi();
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	33a0      	adds	r3, #160	; 0xa0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 fb57 	bl	8001190 <_ZN10RFM95_LoRa10packetRssiEv>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 8000aee:	440b      	add	r3, r1
 8000af0:	f803 2ccc 	strb.w	r2, [r3, #-204]
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000af4:	2102      	movs	r1, #2
 8000af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afa:	f001 fd7d 	bl	80025f8 <HAL_GPIO_TogglePin>

			//---------------------add separator----------------------------

			transmitData[counter] = '$';
 8000afe:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8000b02:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8000b06:	4413      	add	r3, r2
 8000b08:	2224      	movs	r2, #36	; 0x24
 8000b0a:	f803 2ccc 	strb.w	r2, [r3, #-204]
			transmitData[counter+1] = '!';
 8000b0e:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8000b12:	3301      	adds	r3, #1
 8000b14:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8000b18:	4413      	add	r3, r2
 8000b1a:	2221      	movs	r2, #33	; 0x21
 8000b1c:	f803 2ccc 	strb.w	r2, [r3, #-204]


			//---------------------read GCS GPS data----------------------------
			char *gpsData = model.getGPS_GCS();
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 f9d0 	bl	8000eca <_ZN5Model10getGPS_GCSEv>
 8000b2a:	f8c7 0170 	str.w	r0, [r7, #368]	; 0x170
			txOffset = counter+2;
 8000b2e:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8000b32:	3302      	adds	r3, #2
 8000b34:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187

			for (gpsCounter = 0; gpsCounter < GPS_DATA_SIZE; gpsCounter++) {
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8000b3e:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 8000b42:	2b4a      	cmp	r3, #74	; 0x4a
 8000b44:	d817      	bhi.n	8000b76 <_ZN7AppMain8mainProgEv+0x16a>
				transmitData[txOffset] = gpsData[gpsCounter];
 8000b46:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 8000b4a:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8000b4e:	441a      	add	r2, r3
 8000b50:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8000b54:	7812      	ldrb	r2, [r2, #0]
 8000b56:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 8000b5a:	440b      	add	r3, r1
 8000b5c:	f803 2ccc 	strb.w	r2, [r3, #-204]
				txOffset++;
 8000b60:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8000b64:	3301      	adds	r3, #1
 8000b66:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
			for (gpsCounter = 0; gpsCounter < GPS_DATA_SIZE; gpsCounter++) {
 8000b6a:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 8000b6e:	3301      	adds	r3, #1
 8000b70:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8000b74:	e7e3      	b.n	8000b3e <_ZN7AppMain8mainProgEv+0x132>
			}

			//---------------------add sync bytes----------------------------
			txOffset++;
 8000b76:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
			transmitData[txOffset] = '!';
 8000b80:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8000b84:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8000b88:	4413      	add	r3, r2
 8000b8a:	2221      	movs	r2, #33	; 0x21
 8000b8c:	f803 2ccc 	strb.w	r2, [r3, #-204]
			txOffset++;
 8000b90:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8000b94:	3301      	adds	r3, #1
 8000b96:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
			transmitData[txOffset] = '*';
 8000b9a:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8000b9e:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8000ba2:	4413      	add	r3, r2
 8000ba4:	222a      	movs	r2, #42	; 0x2a
 8000ba6:	f803 2ccc 	strb.w	r2, [r3, #-204]
			txOffset++;
 8000baa:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8000bae:	3301      	adds	r3, #1
 8000bb0:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
			transmitData[txOffset] = '%';
 8000bb4:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8000bb8:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8000bbc:	4413      	add	r3, r2
 8000bbe:	2225      	movs	r2, #37	; 0x25
 8000bc0:	f803 2ccc 	strb.w	r2, [r3, #-204]

			//---------------------split transmitData----------------------------
			splitCnt = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
			for(int a = 0; a<3;a++){
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000bd0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	dc51      	bgt.n	8000c7c <_ZN7AppMain8mainProgEv+0x270>
				for(int b = 0; b < (TRANSMIT_DATA_LENGTH/3);b++ ){
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8000bde:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000be2:	2b3b      	cmp	r3, #59	; 0x3b
 8000be4:	dc44      	bgt.n	8000c70 <_ZN7AppMain8mainProgEv+0x264>
					if(splitCnt <= TRANSMIT_DATA_LENGTH){
 8000be6:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8000bea:	2bb4      	cmp	r3, #180	; 0xb4
 8000bec:	d83a      	bhi.n	8000c64 <_ZN7AppMain8mainProgEv+0x258>
						switch (a) {
 8000bee:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d013      	beq.n	8000c1e <_ZN7AppMain8mainProgEv+0x212>
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d020      	beq.n	8000c3c <_ZN7AppMain8mainProgEv+0x230>
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d000      	beq.n	8000c00 <_ZN7AppMain8mainProgEv+0x1f4>
								break;
							case 2:
								transmitUSB3[b] = transmitData[splitCnt];
								break;
							default:
								break;
 8000bfe:	e02c      	b.n	8000c5a <_ZN7AppMain8mainProgEv+0x24e>
								transmitUSB1[b] = transmitData[splitCnt];
 8000c00:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8000c04:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8000c08:	4413      	add	r3, r2
 8000c0a:	f813 1ccc 	ldrb.w	r1, [r3, #-204]
 8000c0e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000c12:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000c16:	4413      	add	r3, r2
 8000c18:	460a      	mov	r2, r1
 8000c1a:	701a      	strb	r2, [r3, #0]
								break;
 8000c1c:	e01d      	b.n	8000c5a <_ZN7AppMain8mainProgEv+0x24e>
								transmitUSB2[b] = transmitData[splitCnt];
 8000c1e:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8000c22:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8000c26:	4413      	add	r3, r2
 8000c28:	f813 1ccc 	ldrb.w	r1, [r3, #-204]
 8000c2c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000c30:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000c34:	4413      	add	r3, r2
 8000c36:	460a      	mov	r2, r1
 8000c38:	701a      	strb	r2, [r3, #0]
								break;
 8000c3a:	e00e      	b.n	8000c5a <_ZN7AppMain8mainProgEv+0x24e>
								transmitUSB3[b] = transmitData[splitCnt];
 8000c3c:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8000c40:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8000c44:	4413      	add	r3, r2
 8000c46:	f813 1ccc 	ldrb.w	r1, [r3, #-204]
 8000c4a:	f107 0208 	add.w	r2, r7, #8
 8000c4e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000c52:	4413      	add	r3, r2
 8000c54:	460a      	mov	r2, r1
 8000c56:	701a      	strb	r2, [r3, #0]
								break;
 8000c58:	bf00      	nop
						}
						splitCnt++;
 8000c5a:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8000c5e:	3301      	adds	r3, #1
 8000c60:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
				for(int b = 0; b < (TRANSMIT_DATA_LENGTH/3);b++ ){
 8000c64:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000c68:	3301      	adds	r3, #1
 8000c6a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8000c6e:	e7b6      	b.n	8000bde <_ZN7AppMain8mainProgEv+0x1d2>
			for(int a = 0; a<3;a++){
 8000c70:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000c74:	3301      	adds	r3, #1
 8000c76:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000c7a:	e7a9      	b.n	8000bd0 <_ZN7AppMain8mainProgEv+0x1c4>
					}
				}
			}

			usbCom.usbTransmit(transmitUSB1, (TRANSMIT_DATA_LENGTH/3));
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8000c84:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8000c88:	223c      	movs	r2, #60	; 0x3c
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 fd56 	bl	800173c <_ZN7USB_Com11usbTransmitEPhh>
			usbCom.usbTransmit(transmitUSB2, (TRANSMIT_DATA_LENGTH/3));
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8000c98:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000c9c:	223c      	movs	r2, #60	; 0x3c
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 fd4c 	bl	800173c <_ZN7USB_Com11usbTransmitEPhh>
			usbCom.usbTransmit(transmitUSB3, (TRANSMIT_DATA_LENGTH/3));
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8000cac:	f107 0108 	add.w	r1, r7, #8
 8000cb0:	223c      	movs	r2, #60	; 0x3c
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 fd42 	bl	800173c <_ZN7USB_Com11usbTransmitEPhh>
		}
		}
	}
 8000cb8:	e6cc      	b.n	8000a54 <_ZN7AppMain8mainProgEv+0x48>

08000cba <_ZN3GPSC1EP5Model>:


	//extern UART_HandleTypeDef huart2;


GPS::GPS(Model* model) {
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
 8000cc2:	6039      	str	r1, [r7, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	711a      	strb	r2, [r3, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	715a      	strb	r2, [r3, #5]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	this->model = model;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	683a      	ldr	r2, [r7, #0]
 8000cec:	601a      	str	r2, [r3, #0]
	init();
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f000 f805 	bl	8000cfe <_ZN3GPS4initEv>
}
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <_ZN3GPS4initEv>:
 *
 * @param none
 * @return none
 *
 */
void GPS::init(){
 8000cfe:	b480      	push	{r7}
 8000d00:	b085      	sub	sp, #20
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < GPS_DATA_SIZE; i++) {
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	2b4a      	cmp	r3, #74	; 0x4a
 8000d0e:	dc0f      	bgt.n	8000d30 <_ZN3GPS4initEv+0x32>
		data[i] = '0';
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	4413      	add	r3, r2
 8000d16:	3351      	adds	r3, #81	; 0x51
 8000d18:	2230      	movs	r2, #48	; 0x30
 8000d1a:	701a      	strb	r2, [r3, #0]
		GPS_Data[i] = '0';
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	4413      	add	r3, r2
 8000d22:	3306      	adds	r3, #6
 8000d24:	2230      	movs	r2, #48	; 0x30
 8000d26:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < GPS_DATA_SIZE; i++) {
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	e7ec      	b.n	8000d0a <_ZN3GPS4initEv+0xc>
	}
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <_ZN3GPS12gpsInterruptEh>:
*
*
* @param huart UART handle.
* @return None
 */
void GPS::gpsInterrupt(uint8_t rxData) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	460b      	mov	r3, r1
 8000d46:	70fb      	strb	r3, [r7, #3]
	static uint8_t i = 0;
		/* Receive one byte in interrupt mode */


		/*Check if received byte is a '$' (begin of record) */
		if ((char) rxData == '$') {
 8000d48:	78fb      	ldrb	r3, [r7, #3]
 8000d4a:	2b24      	cmp	r3, #36	; 0x24
 8000d4c:	d105      	bne.n	8000d5a <_ZN3GPS12gpsInterruptEh+0x1e>
			recordStart = true;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2201      	movs	r2, #1
 8000d52:	711a      	strb	r2, [r3, #4]
			i = 0;
 8000d54:	4b3b      	ldr	r3, [pc, #236]	; (8000e44 <_ZN3GPS12gpsInterruptEh+0x108>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
		}
		/*Check if received byte is a '\n' (end of record)*/
		if ((char) rxData == '\n') {
 8000d5a:	78fb      	ldrb	r3, [r7, #3]
 8000d5c:	2b0a      	cmp	r3, #10
 8000d5e:	d15a      	bne.n	8000e16 <_ZN3GPS12gpsInterruptEh+0xda>
			recordStart = false;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	711a      	strb	r2, [r3, #4]

			if (i > GPS_DATA_SIZE-10) {
 8000d66:	4b37      	ldr	r3, [pc, #220]	; (8000e44 <_ZN3GPS12gpsInterruptEh+0x108>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b41      	cmp	r3, #65	; 0x41
 8000d6c:	d939      	bls.n	8000de2 <_ZN3GPS12gpsInterruptEh+0xa6>
				copyCounter = 0;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
				for (int i = 0; i < GPS_DATA_SIZE; i++) {
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	2b4a      	cmp	r3, #74	; 0x4a
 8000d7e:	dc09      	bgt.n	8000d94 <_ZN3GPS12gpsInterruptEh+0x58>
					GPS_Data[i] = '0';
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	4413      	add	r3, r2
 8000d86:	3306      	adds	r3, #6
 8000d88:	2230      	movs	r2, #48	; 0x30
 8000d8a:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < GPS_DATA_SIZE; i++) {
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	e7f2      	b.n	8000d7a <_ZN3GPS12gpsInterruptEh+0x3e>
				}
				while (data[copyCounter] != '\r' && copyCounter <= 80) {
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4413      	add	r3, r2
 8000da0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000da4:	2b0d      	cmp	r3, #13
 8000da6:	d01c      	beq.n	8000de2 <_ZN3GPS12gpsInterruptEh+0xa6>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8000dae:	2b50      	cmp	r3, #80	; 0x50
 8000db0:	d817      	bhi.n	8000de2 <_ZN3GPS12gpsInterruptEh+0xa6>
					GPS_Data[copyCounter] = data[copyCounter];
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8000db8:	461a      	mov	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	440b      	add	r3, r1
 8000dce:	719a      	strb	r2, [r3, #6]
					copyCounter++;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
				while (data[copyCounter] != '\r' && copyCounter <= 80) {
 8000de0:	e7d8      	b.n	8000d94 <_ZN3GPS12gpsInterruptEh+0x58>
				}
			}
			model->setGPS_GCS(GPS_Data);	//set GPS data in Model
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3306      	adds	r3, #6
 8000dea:	4619      	mov	r1, r3
 8000dec:	4610      	mov	r0, r2
 8000dee:	f000 f85d 	bl	8000eac <_ZN5Model10setGPS_GCSEPc>
			for (int count = 0; count < GPS_DATA_SIZE; count++) {
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	2b4a      	cmp	r3, #74	; 0x4a
 8000dfa:	dc09      	bgt.n	8000e10 <_ZN3GPS12gpsInterruptEh+0xd4>
				data[count] = '0';
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	4413      	add	r3, r2
 8000e02:	3351      	adds	r3, #81	; 0x51
 8000e04:	2230      	movs	r2, #48	; 0x30
 8000e06:	701a      	strb	r2, [r3, #0]
			for (int count = 0; count < GPS_DATA_SIZE; count++) {
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	e7f2      	b.n	8000df6 <_ZN3GPS12gpsInterruptEh+0xba>
			}
			i = 0;
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <_ZN3GPS12gpsInterruptEh+0x108>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	701a      	strb	r2, [r3, #0]
		}

		if (recordStart) {
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	791b      	ldrb	r3, [r3, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d00d      	beq.n	8000e3a <_ZN3GPS12gpsInterruptEh+0xfe>
			data[i] = rxData;
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <_ZN3GPS12gpsInterruptEh+0x108>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4413      	add	r3, r2
 8000e28:	78fa      	ldrb	r2, [r7, #3]
 8000e2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			i++;
 8000e2e:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <_ZN3GPS12gpsInterruptEh+0x108>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	3301      	adds	r3, #1
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <_ZN3GPS12gpsInterruptEh+0x108>)
 8000e38:	701a      	strb	r2, [r3, #0]
		}



	}
 8000e3a:	bf00      	nop
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200001a8 	.word	0x200001a8

08000e48 <_ZN5ModelC1Ev>:
 *      Author: marce
 */

#include "Model.h"

Model::Model() {
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

	for(uint8_t counter = 0; counter<GPS_DATA_SIZE; counter++){
 8000e50:	2300      	movs	r3, #0
 8000e52:	73fb      	strb	r3, [r7, #15]
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	2b4a      	cmp	r3, #74	; 0x4a
 8000e58:	d80d      	bhi.n	8000e76 <_ZN5ModelC1Ev+0x2e>
		 gpsGCS[counter] = 11;
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	210b      	movs	r1, #11
 8000e60:	54d1      	strb	r1, [r2, r3]
		 gpsDevice[counter] = 22;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	4413      	add	r3, r2
 8000e68:	2216      	movs	r2, #22
 8000e6a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	for(uint8_t counter = 0; counter<GPS_DATA_SIZE; counter++){
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	3301      	adds	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	e7ee      	b.n	8000e54 <_ZN5ModelC1Ev+0xc>
	}
	 humidity = 0;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
	 pressure = 0;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
	 tempOutisde = 0;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	 tempOutisde8Bit = 0;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	 tempInside = 0;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
}
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <_ZN5Model10setGPS_GCSEPc>:


//get/set GPS_GCS Data
void Model::Model::setGPS_GCS(char* data){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
	//not implemented in Device
	strncpy(gpsGCS, data, GPS_DATA_SIZE);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	224b      	movs	r2, #75	; 0x4b
 8000eba:	6839      	ldr	r1, [r7, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f008 fc37 	bl	8009730 <strncpy>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <_ZN5Model10getGPS_GCSEv>:
char* Model::getGPS_GCS(void){
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
	//not implemented in Device
	return gpsGCS;
 8000ed2:	687b      	ldr	r3, [r7, #4]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <_ZN10RFM95_LoRaC1Ev>:
 */

#include "RFM95LoRa.h"
#include "../../AppMain/AppMain.h"

RFM95_LoRa::RFM95_LoRa() :
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  _frequency(0),
  _packetIndex(0),
  _implicitHeaderMode(0),
  _onReceive(0)
 8000ee8:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <_ZN10RFM95_LoRaC1Ev+0x34>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	615a      	str	r2, [r3, #20]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
{

}
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	080097c4 	.word	0x080097c4

08000f18 <_ZN10RFM95_LoRa9selectRFMEv>:
 * @brief RFM95 chip select
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::selectRFM(){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2a:	f001 fb4d 	bl	80025c8 <HAL_GPIO_WritePin>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <_ZN10RFM95_LoRa11deselectRFMEv>:
 * @brief RFM95 chip deselect
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::deselectRFM(){
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_SET);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f48:	f001 fb3e 	bl	80025c8 <HAL_GPIO_WritePin>
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <_ZN10RFM95_LoRa8resetRFMEv>:

void RFM95_LoRa::resetRFM(){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2108      	movs	r1, #8
 8000f60:	4808      	ldr	r0, [pc, #32]	; (8000f84 <_ZN10RFM95_LoRa8resetRFMEv+0x30>)
 8000f62:	f001 fb31 	bl	80025c8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f66:	2001      	movs	r0, #1
 8000f68:	f001 f848 	bl	8001ffc <HAL_Delay>
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_SET);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2108      	movs	r1, #8
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <_ZN10RFM95_LoRa8resetRFMEv+0x30>)
 8000f72:	f001 fb29 	bl	80025c8 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000f76:	2005      	movs	r0, #5
 8000f78:	f001 f840 	bl	8001ffc <HAL_Delay>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	48000400 	.word	0x48000400

08000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>:

bool RFM95_LoRa::writeRegister(uint8_t addr, uint8_t data){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	70fb      	strb	r3, [r7, #3]
 8000f94:	4613      	mov	r3, r2
 8000f96:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2] = {(uint8_t)(addr | 0x80), data};
 8000f98:	78fb      	ldrb	r3, [r7, #3]
 8000f9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	733b      	strb	r3, [r7, #12]
 8000fa2:	78bb      	ldrb	r3, [r7, #2]
 8000fa4:	737b      	strb	r3, [r7, #13]
	selectRFM();
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ffb6 	bl	8000f18 <_ZN10RFM95_LoRa9selectRFMEv>
	if(HAL_SPI_Transmit(&hspi1, (uint8_t*)buff, 2, 100) != HAL_OK){
 8000fac:	f107 010c 	add.w	r1, r7, #12
 8000fb0:	2364      	movs	r3, #100	; 0x64
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	480b      	ldr	r0, [pc, #44]	; (8000fe4 <_ZN10RFM95_LoRa13writeRegisterEhh+0x5c>)
 8000fb6:	f003 fc8f 	bl	80048d8 <HAL_SPI_Transmit>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	bf14      	ite	ne
 8000fc0:	2301      	movne	r3, #1
 8000fc2:	2300      	moveq	r3, #0
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d004      	beq.n	8000fd4 <_ZN10RFM95_LoRa13writeRegisterEhh+0x4c>
		deselectRFM();
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffb3 	bl	8000f36 <_ZN10RFM95_LoRa11deselectRFMEv>
		return false;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	e003      	b.n	8000fdc <_ZN10RFM95_LoRa13writeRegisterEhh+0x54>
	}
	deselectRFM();
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ffae 	bl	8000f36 <_ZN10RFM95_LoRa11deselectRFMEv>
	return true;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000580 	.word	0x20000580

08000fe8 <_ZN10RFM95_LoRa12readRegisterEh>:

uint8_t RFM95_LoRa::readRegister(uint8_t addr){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	70fb      	strb	r3, [r7, #3]
	uint8_t rxData[2] = {0,0};
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	733b      	strb	r3, [r7, #12]
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	737b      	strb	r3, [r7, #13]
	uint8_t txData[1] = {addr};
 8000ffc:	78fb      	ldrb	r3, [r7, #3]
 8000ffe:	723b      	strb	r3, [r7, #8]

	selectRFM();
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ff89 	bl	8000f18 <_ZN10RFM95_LoRa9selectRFMEv>
		HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)txData,(uint8_t*)rxData,2,100);
 8001006:	f107 020c 	add.w	r2, r7, #12
 800100a:	f107 0108 	add.w	r1, r7, #8
 800100e:	2364      	movs	r3, #100	; 0x64
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2302      	movs	r3, #2
 8001014:	4805      	ldr	r0, [pc, #20]	; (800102c <_ZN10RFM95_LoRa12readRegisterEh+0x44>)
 8001016:	f003 fdc5 	bl	8004ba4 <HAL_SPI_TransmitReceive>
	deselectRFM();
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ff8b 	bl	8000f36 <_ZN10RFM95_LoRa11deselectRFMEv>
	return rxData[1];
 8001020:	7b7b      	ldrb	r3, [r7, #13]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000580 	.word	0x20000580

08001030 <_ZN10RFM95_LoRa5beginEl>:


int RFM95_LoRa::begin(long frequency){
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
 resetRFM();
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ff8a 	bl	8000f54 <_ZN10RFM95_LoRa8resetRFMEv>
  // check version
  uint8_t version = readRegister(REG_VERSION);
 8001040:	2142      	movs	r1, #66	; 0x42
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ffd0 	bl	8000fe8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001048:	4603      	mov	r3, r0
 800104a:	73fb      	strb	r3, [r7, #15]
  if (version != 0x12) {
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	2b12      	cmp	r3, #18
 8001050:	d001      	beq.n	8001056 <_ZN10RFM95_LoRa5beginEl+0x26>
    return 0;
 8001052:	2300      	movs	r3, #0
 8001054:	e02b      	b.n	80010ae <_ZN10RFM95_LoRa5beginEl+0x7e>
  }
  // put in sleep mode
  sleep();
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 f977 	bl	800134a <_ZN10RFM95_LoRa5sleepEv>
  // set frequency
  setFrequency(frequency);
 800105c:	6839      	ldr	r1, [r7, #0]
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 f9be 	bl	80013e0 <_ZN10RFM95_LoRa12setFrequencyEl>
  // set base addresses
  writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	210e      	movs	r1, #14
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff8d 	bl	8000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FIFO_RX_BASE_ADDR, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	210f      	movs	r1, #15
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ff88 	bl	8000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set LNA boost
  writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 8001078:	210c      	movs	r1, #12
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffb4 	bl	8000fe8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001080:	4603      	mov	r3, r0
 8001082:	f043 0303 	orr.w	r3, r3, #3
 8001086:	b2db      	uxtb	r3, r3
 8001088:	461a      	mov	r2, r3
 800108a:	210c      	movs	r1, #12
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff7b 	bl	8000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set auto AGC
  writeRegister(REG_MODEM_CONFIG_3, 0x04);
 8001092:	2204      	movs	r2, #4
 8001094:	2126      	movs	r1, #38	; 0x26
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ff76 	bl	8000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set output power to 17 dBm
  setTxPower(20);
 800109c:	2201      	movs	r2, #1
 800109e:	2114      	movs	r1, #20
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f95f 	bl	8001364 <_ZN10RFM95_LoRa10setTxPowerEii>
  // put in standby mode
  idle();
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 f942 	bl	8001330 <_ZN10RFM95_LoRa4idleEv>
  return 1;
 80010ac:	2301      	movs	r3, #1
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <_ZN10RFM95_LoRa11parsePacketEi>:



int RFM95_LoRa::parsePacket(int size)

{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b084      	sub	sp, #16
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	6039      	str	r1, [r7, #0]
  int packetLength = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
  int irqFlags = readRegister(REG_IRQ_FLAGS);
 80010c4:	2112      	movs	r1, #18
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ff8e 	bl	8000fe8 <_ZN10RFM95_LoRa12readRegisterEh>
 80010cc:	4603      	mov	r3, r0
 80010ce:	60bb      	str	r3, [r7, #8]
  if (size > 0) {
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	dd0a      	ble.n	80010ec <_ZN10RFM95_LoRa11parsePacketEi+0x36>
    implicitHeaderMode();
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 fb0d 	bl	80016f6 <_ZN10RFM95_LoRa18implicitHeaderModeEv>
    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	2122      	movs	r1, #34	; 0x22
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff4f 	bl	8000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>
 80010ea:	e002      	b.n	80010f2 <_ZN10RFM95_LoRa11parsePacketEi+0x3c>
  } else {
    explicitHeaderMode();
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 faea 	bl	80016c6 <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, irqFlags);
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	461a      	mov	r2, r3
 80010f8:	2112      	movs	r1, #18
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ff44 	bl	8000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>
  if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001106:	2b00      	cmp	r3, #0
 8001108:	d026      	beq.n	8001158 <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	f003 0320 	and.w	r3, r3, #32
 8001110:	2b00      	cmp	r3, #0
 8001112:	d121      	bne.n	8001158 <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
    // received a packet
    _packetIndex = 0;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	615a      	str	r2, [r3, #20]
    // read packet length
    if (_implicitHeaderMode) {
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <_ZN10RFM95_LoRa11parsePacketEi+0x7a>
      packetLength = readRegister(REG_PAYLOAD_LENGTH);
 8001122:	2122      	movs	r1, #34	; 0x22
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ff5f 	bl	8000fe8 <_ZN10RFM95_LoRa12readRegisterEh>
 800112a:	4603      	mov	r3, r0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	e005      	b.n	800113c <_ZN10RFM95_LoRa11parsePacketEi+0x86>
    } else {
      packetLength = readRegister(REG_RX_NB_BYTES);
 8001130:	2113      	movs	r1, #19
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ff58 	bl	8000fe8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001138:	4603      	mov	r3, r0
 800113a:	60fb      	str	r3, [r7, #12]
    }
    // set FIFO address to current RX address
    writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
 800113c:	2110      	movs	r1, #16
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff ff52 	bl	8000fe8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	210d      	movs	r1, #13
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ff1c 	bl	8000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in standby mode
    idle();
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 f8ed 	bl	8001330 <_ZN10RFM95_LoRa4idleEv>
 8001156:	e015      	b.n	8001184 <_ZN10RFM95_LoRa11parsePacketEi+0xce>
  } else if (readRegister(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
 8001158:	2101      	movs	r1, #1
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ff44 	bl	8000fe8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001160:	4603      	mov	r3, r0
 8001162:	2b86      	cmp	r3, #134	; 0x86
 8001164:	bf14      	ite	ne
 8001166:	2301      	movne	r3, #1
 8001168:	2300      	moveq	r3, #0
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	d009      	beq.n	8001184 <_ZN10RFM95_LoRa11parsePacketEi+0xce>
    // not currently in RX mode
    // reset FIFO address
    writeRegister(REG_FIFO_ADDR_PTR, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	210d      	movs	r1, #13
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff07 	bl	8000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in single RX mode
    writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 800117a:	2286      	movs	r2, #134	; 0x86
 800117c:	2101      	movs	r1, #1
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ff02 	bl	8000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  return packetLength;
 8001184:	68fb      	ldr	r3, [r7, #12]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <_ZN10RFM95_LoRa10packetRssiEv>:


int RFM95_LoRa::packetRssi(){
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  return (readRegister(REG_PKT_RSSI_VALUE) - (_frequency < 868E6 ? 164 : 157));
 8001198:	211a      	movs	r1, #26
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff ff24 	bl	8000fe8 <_ZN10RFM95_LoRa12readRegisterEh>
 80011a0:	4603      	mov	r3, r0
 80011a2:	461c      	mov	r4, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	691b      	ldr	r3, [r3, #16]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f963 	bl	8000474 <__aeabi_i2d>
 80011ae:	a308      	add	r3, pc, #32	; (adr r3, 80011d0 <_ZN10RFM95_LoRa10packetRssiEv+0x40>)
 80011b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b4:	f7ff fa28 	bl	8000608 <__aeabi_dcmplt>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <_ZN10RFM95_LoRa10packetRssiEv+0x32>
 80011be:	23a4      	movs	r3, #164	; 0xa4
 80011c0:	e000      	b.n	80011c4 <_ZN10RFM95_LoRa10packetRssiEv+0x34>
 80011c2:	239d      	movs	r3, #157	; 0x9d
 80011c4:	1ae3      	subs	r3, r4, r3
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd90      	pop	{r4, r7, pc}
 80011ce:	bf00      	nop
 80011d0:	80000000 	.word	0x80000000
 80011d4:	41c9de50 	.word	0x41c9de50

080011d8 <_ZN10RFM95_LoRa5writeEh>:

float RFM95_LoRa::packetSnr(){
  return ((int8_t)readRegister(REG_PKT_SNR_VALUE)) * 0.25;
}

size_t RFM95_LoRa::write(uint8_t byte){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	70fb      	strb	r3, [r7, #3]
  return write(&byte, sizeof(byte));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	3304      	adds	r3, #4
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	1cf9      	adds	r1, r7, #3
 80011ee:	2201      	movs	r2, #1
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	4798      	blx	r3
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <_ZN10RFM95_LoRa5writeEPKhj>:



size_t RFM95_LoRa::write(const uint8_t *buffer, size_t size){
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	60f8      	str	r0, [r7, #12]
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
  int currentLength = readRegister(REG_PAYLOAD_LENGTH);
 800120a:	2122      	movs	r1, #34	; 0x22
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f7ff feeb 	bl	8000fe8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001212:	4603      	mov	r3, r0
 8001214:	613b      	str	r3, [r7, #16]
  // check size
  if ((currentLength + size) > MAX_PKT_LENGTH) {
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4413      	add	r3, r2
 800121c:	2bff      	cmp	r3, #255	; 0xff
 800121e:	d903      	bls.n	8001228 <_ZN10RFM95_LoRa5writeEPKhj+0x2a>
    size = MAX_PKT_LENGTH - currentLength;
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001226:	607b      	str	r3, [r7, #4]
  }
  // write data
  for (size_t i = 0; i < size; i++) {
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	429a      	cmp	r2, r3
 8001232:	d20c      	bcs.n	800124e <_ZN10RFM95_LoRa5writeEPKhj+0x50>
    writeRegister(REG_FIFO, buffer[i]);
 8001234:	68ba      	ldr	r2, [r7, #8]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	4413      	add	r3, r2
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	2100      	movs	r1, #0
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f7ff fea1 	bl	8000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>
  for (size_t i = 0; i < size; i++) {
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	3301      	adds	r3, #1
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	e7ee      	b.n	800122c <_ZN10RFM95_LoRa5writeEPKhj+0x2e>
  }

  // update length
  writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	4413      	add	r3, r2
 8001258:	b2db      	uxtb	r3, r3
 800125a:	461a      	mov	r2, r3
 800125c:	2122      	movs	r1, #34	; 0x22
 800125e:	68f8      	ldr	r0, [r7, #12]
 8001260:	f7ff fe92 	bl	8000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return size;
 8001264:	687b      	ldr	r3, [r7, #4]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <_ZN10RFM95_LoRa9availableEv>:


int RFM95_LoRa::available()
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8001276:	2113      	movs	r1, #19
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff feb5 	bl	8000fe8 <_ZN10RFM95_LoRa12readRegisterEh>
 800127e:	4603      	mov	r3, r0
 8001280:	461a      	mov	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	1ad3      	subs	r3, r2, r3
}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <_ZN10RFM95_LoRa4readEv>:



int RFM95_LoRa::read(){
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3308      	adds	r3, #8
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	4798      	blx	r3
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	bf0c      	ite	eq
 80012aa:	2301      	moveq	r3, #1
 80012ac:	2300      	movne	r3, #0
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <_ZN10RFM95_LoRa4readEv+0x2a>
    return -1;
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	e009      	b.n	80012ce <_ZN10RFM95_LoRa4readEv+0x3e>
  }
  _packetIndex++;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	1c5a      	adds	r2, r3, #1
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	615a      	str	r2, [r3, #20]
  return readRegister(REG_FIFO);
 80012c4:	2100      	movs	r1, #0
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff fe8e 	bl	8000fe8 <_ZN10RFM95_LoRa12readRegisterEh>
 80012cc:	4603      	mov	r3, r0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <_ZN10RFM95_LoRa4peekEv>:



int RFM95_LoRa::peek(){
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b084      	sub	sp, #16
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  if (!available()) {
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	3308      	adds	r3, #8
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	4798      	blx	r3
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	bf0c      	ite	eq
 80012f0:	2301      	moveq	r3, #1
 80012f2:	2300      	movne	r3, #0
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d002      	beq.n	8001300 <_ZN10RFM95_LoRa4peekEv+0x2a>
    return -1;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	e013      	b.n	8001328 <_ZN10RFM95_LoRa4peekEv+0x52>
  }
  // store current FIFO address
  int currentAddress = readRegister(REG_FIFO_ADDR_PTR);
 8001300:	210d      	movs	r1, #13
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff fe70 	bl	8000fe8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001308:	4603      	mov	r3, r0
 800130a:	60fb      	str	r3, [r7, #12]
  // read
  uint8_t b = readRegister(REG_FIFO);
 800130c:	2100      	movs	r1, #0
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff fe6a 	bl	8000fe8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001314:	4603      	mov	r3, r0
 8001316:	72fb      	strb	r3, [r7, #11]
  // restore FIFO address
  writeRegister(REG_FIFO_ADDR_PTR, currentAddress);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	461a      	mov	r2, r3
 800131e:	210d      	movs	r1, #13
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff fe31 	bl	8000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return b;
 8001326:	7afb      	ldrb	r3, [r7, #11]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <_ZN10RFM95_LoRa4idleEv>:
    explicitHeaderMode();
  }
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
}

void RFM95_LoRa::idle(){
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8001338:	2281      	movs	r2, #129	; 0x81
 800133a:	2101      	movs	r1, #1
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff fe23 	bl	8000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <_ZN10RFM95_LoRa5sleepEv>:

void RFM95_LoRa::sleep(){
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8001352:	2280      	movs	r2, #128	; 0x80
 8001354:	2101      	movs	r1, #1
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff fe16 	bl	8000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <_ZN10RFM95_LoRa10setTxPowerEii>:



void RFM95_LoRa::setTxPower(int level, int outputPin){
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  if (PA_OUTPUT_RFO_PIN == outputPin) {
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d116      	bne.n	80013a4 <_ZN10RFM95_LoRa10setTxPowerEii+0x40>
    // RFO
    if (level < 0) {
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	2b00      	cmp	r3, #0
 800137a:	da02      	bge.n	8001382 <_ZN10RFM95_LoRa10setTxPowerEii+0x1e>
      level = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	e004      	b.n	800138c <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
    } else if (level > 14) {
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	2b0e      	cmp	r3, #14
 8001386:	dd01      	ble.n	800138c <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
      level = 14;
 8001388:	230e      	movs	r3, #14
 800138a:	60bb      	str	r3, [r7, #8]
    }
    writeRegister(REG_PA_CONFIG, 0x70 | level);
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	b25b      	sxtb	r3, r3
 8001390:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001394:	b25b      	sxtb	r3, r3
 8001396:	b2db      	uxtb	r3, r3
 8001398:	461a      	mov	r2, r3
 800139a:	2109      	movs	r1, #9
 800139c:	68f8      	ldr	r0, [r7, #12]
 800139e:	f7ff fdf3 	bl	8000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>
    } else if (level > 17) {
      level = 17;
    }
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
  }
}
 80013a2:	e018      	b.n	80013d6 <_ZN10RFM95_LoRa10setTxPowerEii+0x72>
    if (level < 2) {
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	dc02      	bgt.n	80013b0 <_ZN10RFM95_LoRa10setTxPowerEii+0x4c>
      level = 2;
 80013aa:	2302      	movs	r3, #2
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	e004      	b.n	80013ba <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
    } else if (level > 17) {
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	2b11      	cmp	r3, #17
 80013b4:	dd01      	ble.n	80013ba <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
      level = 17;
 80013b6:	2311      	movs	r3, #17
 80013b8:	60bb      	str	r3, [r7, #8]
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	3b02      	subs	r3, #2
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	b25b      	sxtb	r3, r3
 80013c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013c8:	b25b      	sxtb	r3, r3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	461a      	mov	r2, r3
 80013ce:	2109      	movs	r1, #9
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f7ff fdd9 	bl	8000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <_ZN10RFM95_LoRa12setFrequencyEl>:



void RFM95_LoRa::setFrequency(long frequency){
 80013e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  _frequency = frequency;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	611a      	str	r2, [r3, #16]
  uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80013f6:	135e      	asrs	r6, r3, #13
 80013f8:	04dd      	lsls	r5, r3, #19
 80013fa:	4a1a      	ldr	r2, [pc, #104]	; (8001464 <_ZN10RFM95_LoRa12setFrequencyEl+0x84>)
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	4628      	mov	r0, r5
 8001402:	4631      	mov	r1, r6
 8001404:	f7ff f928 	bl	8000658 <__aeabi_uldivmod>
 8001408:	4603      	mov	r3, r0
 800140a:	460c      	mov	r4, r1
 800140c:	e9c7 3402 	strd	r3, r4, [r7, #8]
  writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8001410:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001414:	f04f 0300 	mov.w	r3, #0
 8001418:	f04f 0400 	mov.w	r4, #0
 800141c:	0c0b      	lsrs	r3, r1, #16
 800141e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001422:	0c14      	lsrs	r4, r2, #16
 8001424:	b2db      	uxtb	r3, r3
 8001426:	461a      	mov	r2, r3
 8001428:	2106      	movs	r1, #6
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff fdac 	bl	8000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 8001430:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	f04f 0400 	mov.w	r4, #0
 800143c:	0a0b      	lsrs	r3, r1, #8
 800143e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001442:	0a14      	lsrs	r4, r2, #8
 8001444:	b2db      	uxtb	r3, r3
 8001446:	461a      	mov	r2, r3
 8001448:	2107      	movs	r1, #7
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff fd9c 	bl	8000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8001450:	7a3b      	ldrb	r3, [r7, #8]
 8001452:	461a      	mov	r2, r3
 8001454:	2108      	movs	r1, #8
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff fd96 	bl	8000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001464:	01e84800 	.word	0x01e84800

08001468 <_ZN10RFM95_LoRa18setSpreadingFactorEi>:



void RFM95_LoRa::setSpreadingFactor(int sf){
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  if (sf < 6) {
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	2b05      	cmp	r3, #5
 8001476:	dc02      	bgt.n	800147e <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x16>
    sf = 6;
 8001478:	2306      	movs	r3, #6
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	e004      	b.n	8001488 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
  } else if (sf > 12) {
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	2b0c      	cmp	r3, #12
 8001482:	dd01      	ble.n	8001488 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
    sf = 12;
 8001484:	230c      	movs	r3, #12
 8001486:	603b      	str	r3, [r7, #0]
  }

  if (sf == 6) {
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	2b06      	cmp	r3, #6
 800148c:	d10a      	bne.n	80014a4 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x3c>
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc5);
 800148e:	22c5      	movs	r2, #197	; 0xc5
 8001490:	2131      	movs	r1, #49	; 0x31
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fd78 	bl	8000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0c);
 8001498:	220c      	movs	r2, #12
 800149a:	2137      	movs	r1, #55	; 0x37
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff fd73 	bl	8000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>
 80014a2:	e009      	b.n	80014b8 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x50>
  } else {
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
 80014a4:	22c3      	movs	r2, #195	; 0xc3
 80014a6:	2131      	movs	r1, #49	; 0x31
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff fd6d 	bl	8000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
 80014ae:	220a      	movs	r2, #10
 80014b0:	2137      	movs	r1, #55	; 0x37
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff fd68 	bl	8000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  writeRegister(REG_MODEM_CONFIG_2, (readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 80014b8:	211e      	movs	r1, #30
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff fd94 	bl	8000fe8 <_ZN10RFM95_LoRa12readRegisterEh>
 80014c0:	4603      	mov	r3, r0
 80014c2:	b25b      	sxtb	r3, r3
 80014c4:	f003 030f 	and.w	r3, r3, #15
 80014c8:	b25a      	sxtb	r2, r3
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	011b      	lsls	r3, r3, #4
 80014ce:	b25b      	sxtb	r3, r3
 80014d0:	4313      	orrs	r3, r2
 80014d2:	b25b      	sxtb	r3, r3
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	461a      	mov	r2, r3
 80014d8:	211e      	movs	r1, #30
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff fd54 	bl	8000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <_ZN10RFM95_LoRa18setSignalBandwidthEl>:


void RFM95_LoRa::setSignalBandwidth(long sbw){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  int bw;
  if (sbw <= 7.8E3) {
 80014f2:	6838      	ldr	r0, [r7, #0]
 80014f4:	f7fe ffbe 	bl	8000474 <__aeabi_i2d>
 80014f8:	a34b      	add	r3, pc, #300	; (adr r3, 8001628 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x140>)
 80014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fe:	f7ff f88d 	bl	800061c <__aeabi_dcmple>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d002      	beq.n	800150e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x26>
    bw = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	e071      	b.n	80015f2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 10.4E3) {
 800150e:	6838      	ldr	r0, [r7, #0]
 8001510:	f7fe ffb0 	bl	8000474 <__aeabi_i2d>
 8001514:	a346      	add	r3, pc, #280	; (adr r3, 8001630 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x148>)
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	f7ff f87f 	bl	800061c <__aeabi_dcmple>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d002      	beq.n	800152a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x42>
    bw = 1;
 8001524:	2301      	movs	r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	e063      	b.n	80015f2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 15.6E3) {
 800152a:	6838      	ldr	r0, [r7, #0]
 800152c:	f7fe ffa2 	bl	8000474 <__aeabi_i2d>
 8001530:	a341      	add	r3, pc, #260	; (adr r3, 8001638 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x150>)
 8001532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001536:	f7ff f871 	bl	800061c <__aeabi_dcmple>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d002      	beq.n	8001546 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x5e>
    bw = 2;
 8001540:	2302      	movs	r3, #2
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	e055      	b.n	80015f2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 20.8E3) {
 8001546:	6838      	ldr	r0, [r7, #0]
 8001548:	f7fe ff94 	bl	8000474 <__aeabi_i2d>
 800154c:	a33c      	add	r3, pc, #240	; (adr r3, 8001640 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x158>)
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	f7ff f863 	bl	800061c <__aeabi_dcmple>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d002      	beq.n	8001562 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x7a>
    bw = 3;
 800155c:	2303      	movs	r3, #3
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	e047      	b.n	80015f2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 31.25E3) {
 8001562:	6838      	ldr	r0, [r7, #0]
 8001564:	f7fe ff86 	bl	8000474 <__aeabi_i2d>
 8001568:	a337      	add	r3, pc, #220	; (adr r3, 8001648 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x160>)
 800156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156e:	f7ff f855 	bl	800061c <__aeabi_dcmple>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d002      	beq.n	800157e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x96>
    bw = 4;
 8001578:	2304      	movs	r3, #4
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	e039      	b.n	80015f2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 41.7E3) {
 800157e:	6838      	ldr	r0, [r7, #0]
 8001580:	f7fe ff78 	bl	8000474 <__aeabi_i2d>
 8001584:	a332      	add	r3, pc, #200	; (adr r3, 8001650 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x168>)
 8001586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158a:	f7ff f847 	bl	800061c <__aeabi_dcmple>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d002      	beq.n	800159a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xb2>
    bw = 5;
 8001594:	2305      	movs	r3, #5
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	e02b      	b.n	80015f2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 62.5E3) {
 800159a:	6838      	ldr	r0, [r7, #0]
 800159c:	f7fe ff6a 	bl	8000474 <__aeabi_i2d>
 80015a0:	a32d      	add	r3, pc, #180	; (adr r3, 8001658 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x170>)
 80015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a6:	f7ff f839 	bl	800061c <__aeabi_dcmple>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d002      	beq.n	80015b6 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xce>
    bw = 6;
 80015b0:	2306      	movs	r3, #6
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	e01d      	b.n	80015f2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 125E3) {
 80015b6:	6838      	ldr	r0, [r7, #0]
 80015b8:	f7fe ff5c 	bl	8000474 <__aeabi_i2d>
 80015bc:	a328      	add	r3, pc, #160	; (adr r3, 8001660 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x178>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	f7ff f82b 	bl	800061c <__aeabi_dcmple>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d002      	beq.n	80015d2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xea>
    bw = 7;
 80015cc:	2307      	movs	r3, #7
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	e00f      	b.n	80015f2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 250E3) {
 80015d2:	6838      	ldr	r0, [r7, #0]
 80015d4:	f7fe ff4e 	bl	8000474 <__aeabi_i2d>
 80015d8:	a323      	add	r3, pc, #140	; (adr r3, 8001668 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x180>)
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	f7ff f81d 	bl	800061c <__aeabi_dcmple>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d002      	beq.n	80015ee <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x106>
    bw = 8;
 80015e8:	2308      	movs	r3, #8
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	e001      	b.n	80015f2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else /*if (sbw <= 250E3)*/ {
    bw = 9;
 80015ee:	2309      	movs	r3, #9
 80015f0:	60fb      	str	r3, [r7, #12]
  }

  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 80015f2:	211d      	movs	r1, #29
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff fcf7 	bl	8000fe8 <_ZN10RFM95_LoRa12readRegisterEh>
 80015fa:	4603      	mov	r3, r0
 80015fc:	b25b      	sxtb	r3, r3
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	b25a      	sxtb	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	011b      	lsls	r3, r3, #4
 8001608:	b25b      	sxtb	r3, r3
 800160a:	4313      	orrs	r3, r2
 800160c:	b25b      	sxtb	r3, r3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	461a      	mov	r2, r3
 8001612:	211d      	movs	r1, #29
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff fcb7 	bl	8000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	f3af 8000 	nop.w
 8001628:	00000000 	.word	0x00000000
 800162c:	40be7800 	.word	0x40be7800
 8001630:	00000000 	.word	0x00000000
 8001634:	40c45000 	.word	0x40c45000
 8001638:	00000000 	.word	0x00000000
 800163c:	40ce7800 	.word	0x40ce7800
 8001640:	00000000 	.word	0x00000000
 8001644:	40d45000 	.word	0x40d45000
 8001648:	00000000 	.word	0x00000000
 800164c:	40de8480 	.word	0x40de8480
 8001650:	00000000 	.word	0x00000000
 8001654:	40e45c80 	.word	0x40e45c80
 8001658:	00000000 	.word	0x00000000
 800165c:	40ee8480 	.word	0x40ee8480
 8001660:	00000000 	.word	0x00000000
 8001664:	40fe8480 	.word	0x40fe8480
 8001668:	00000000 	.word	0x00000000
 800166c:	410e8480 	.word	0x410e8480

08001670 <_ZN10RFM95_LoRa14setCodingRate4Ei>:



void RFM95_LoRa::setCodingRate4(int denominator){
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  if (denominator < 5) {
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	2b04      	cmp	r3, #4
 800167e:	dc02      	bgt.n	8001686 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x16>
    denominator = 5;
 8001680:	2305      	movs	r3, #5
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	e004      	b.n	8001690 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
  } else if (denominator > 8) {
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	2b08      	cmp	r3, #8
 800168a:	dd01      	ble.n	8001690 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
	  denominator = 8;
 800168c:	2308      	movs	r3, #8
 800168e:	603b      	str	r3, [r7, #0]
  }
  int cr = denominator - 4;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	3b04      	subs	r3, #4
 8001694:	60fb      	str	r3, [r7, #12]
  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0xf1) | (cr << 1));
 8001696:	211d      	movs	r1, #29
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff fca5 	bl	8000fe8 <_ZN10RFM95_LoRa12readRegisterEh>
 800169e:	4603      	mov	r3, r0
 80016a0:	b25b      	sxtb	r3, r3
 80016a2:	f023 030e 	bic.w	r3, r3, #14
 80016a6:	b25a      	sxtb	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	4313      	orrs	r3, r2
 80016b0:	b25b      	sxtb	r3, r3
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	461a      	mov	r2, r3
 80016b6:	211d      	movs	r1, #29
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff fc65 	bl	8000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <_ZN10RFM95_LoRa18explicitHeaderModeEv>:
uint8_t RFM95_LoRa::random(){
  return readRegister(REG_RSSI_WIDEBAND);
}


void RFM95_LoRa::explicitHeaderMode(){
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 0;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 80016d4:	211d      	movs	r1, #29
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff fc86 	bl	8000fe8 <_ZN10RFM95_LoRa12readRegisterEh>
 80016dc:	4603      	mov	r3, r0
 80016de:	f023 0301 	bic.w	r3, r3, #1
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	461a      	mov	r2, r3
 80016e6:	211d      	movs	r1, #29
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff fc4d 	bl	8000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <_ZN10RFM95_LoRa18implicitHeaderModeEv>:


void RFM95_LoRa::implicitHeaderMode(){
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 1;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 8001704:	211d      	movs	r1, #29
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff fc6e 	bl	8000fe8 <_ZN10RFM95_LoRa12readRegisterEh>
 800170c:	4603      	mov	r3, r0
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	b2db      	uxtb	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	211d      	movs	r1, #29
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff fc35 	bl	8000f88 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <_ZN7USB_ComC1Ev>:
 *      Author: marce
 */

#include "USBCom.h"

USB_Com::USB_Com() {
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub

}
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_ZN7USB_Com11usbTransmitEPhh>:


bool USB_Com::usbTransmit(uint8_t *data, uint8_t size){
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	4613      	mov	r3, r2
 8001748:	71fb      	strb	r3, [r7, #7]
	uint16_t counter = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	82fb      	strh	r3, [r7, #22]
	while(CDC_Transmit_FS((uint8_t*) data, size) != USBD_OK){
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	b29b      	uxth	r3, r3
 8001752:	4619      	mov	r1, r3
 8001754:	68b8      	ldr	r0, [r7, #8]
 8001756:	f007 fadb 	bl	8008d10 <CDC_Transmit_FS>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	bf14      	ite	ne
 8001760:	2301      	movne	r3, #1
 8001762:	2300      	moveq	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d008      	beq.n	800177c <_ZN7USB_Com11usbTransmitEPhh+0x40>
		counter++;
 800176a:	8afb      	ldrh	r3, [r7, #22]
 800176c:	3301      	adds	r3, #1
 800176e:	82fb      	strh	r3, [r7, #22]
		if(counter >= 1000){
 8001770:	8afb      	ldrh	r3, [r7, #22]
 8001772:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001776:	d3ea      	bcc.n	800174e <_ZN7USB_Com11usbTransmitEPhh+0x12>
			return false;	//Trasmit faild
 8001778:	2300      	movs	r3, #0
 800177a:	e000      	b.n	800177e <_ZN7USB_Com11usbTransmitEPhh+0x42>
		}
	}
	return true;	//Transmit successful
 800177c:	2301      	movs	r3, #1
}
 800177e:	4618      	mov	r0, r3
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178e:	f107 030c 	add.w	r3, r7, #12
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
 800179c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179e:	4b43      	ldr	r3, [pc, #268]	; (80018ac <MX_GPIO_Init+0x124>)
 80017a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a2:	4a42      	ldr	r2, [pc, #264]	; (80018ac <MX_GPIO_Init+0x124>)
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017aa:	4b40      	ldr	r3, [pc, #256]	; (80018ac <MX_GPIO_Init+0x124>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	4b3d      	ldr	r3, [pc, #244]	; (80018ac <MX_GPIO_Init+0x124>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ba:	4a3c      	ldr	r2, [pc, #240]	; (80018ac <MX_GPIO_Init+0x124>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c2:	4b3a      	ldr	r3, [pc, #232]	; (80018ac <MX_GPIO_Init+0x124>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ce:	4b37      	ldr	r3, [pc, #220]	; (80018ac <MX_GPIO_Init+0x124>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d2:	4a36      	ldr	r2, [pc, #216]	; (80018ac <MX_GPIO_Init+0x124>)
 80017d4:	f043 0302 	orr.w	r3, r3, #2
 80017d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017da:	4b34      	ldr	r3, [pc, #208]	; (80018ac <MX_GPIO_Init+0x124>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|RFM_NSS_Pin, GPIO_PIN_RESET);
 80017e6:	2200      	movs	r2, #0
 80017e8:	f248 0102 	movw	r1, #32770	; 0x8002
 80017ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f0:	f000 feea 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAX_CS_Pin|MAX_DRDY_Pin|RFM_RST_Pin, GPIO_PIN_RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	210b      	movs	r1, #11
 80017f8:	482d      	ldr	r0, [pc, #180]	; (80018b0 <MX_GPIO_Init+0x128>)
 80017fa:	f000 fee5 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RFM_DIO2_Pin|RFM_DIO1_Pin;
 80017fe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001802:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001804:	2300      	movs	r3, #0
 8001806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	4619      	mov	r1, r3
 8001812:	4828      	ldr	r0, [pc, #160]	; (80018b4 <MX_GPIO_Init+0x12c>)
 8001814:	f000 fd66 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NC_Pin|NCA8_Pin;
 8001818:	f240 1301 	movw	r3, #257	; 0x101
 800181c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800181e:	2303      	movs	r3, #3
 8001820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	4619      	mov	r1, r3
 800182c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001830:	f000 fd58 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Pin|RFM_NSS_Pin;
 8001834:	f248 0302 	movw	r3, #32770	; 0x8002
 8001838:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183a:	2301      	movs	r3, #1
 800183c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001846:	f107 030c 	add.w	r3, r7, #12
 800184a:	4619      	mov	r1, r3
 800184c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001850:	f000 fd48 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PRESSURE_INT_Pin;
 8001854:	2310      	movs	r3, #16
 8001856:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001858:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <MX_GPIO_Init+0x130>)
 800185a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PRESSURE_INT_GPIO_Port, &GPIO_InitStruct);
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	4619      	mov	r1, r3
 8001866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186a:	f000 fd3b 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MAX_CS_Pin|MAX_DRDY_Pin|RFM_RST_Pin;
 800186e:	230b      	movs	r3, #11
 8001870:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001872:	2301      	movs	r3, #1
 8001874:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187e:	f107 030c 	add.w	r3, r7, #12
 8001882:	4619      	mov	r1, r3
 8001884:	480a      	ldr	r0, [pc, #40]	; (80018b0 <MX_GPIO_Init+0x128>)
 8001886:	f000 fd2d 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RFM_DIO5_Pin|RFM_DIO3_Pin|RFM_DIO4_Pin|RFM_DIO0_Pin;
 800188a:	23f0      	movs	r3, #240	; 0xf0
 800188c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001896:	f107 030c 	add.w	r3, r7, #12
 800189a:	4619      	mov	r1, r3
 800189c:	4804      	ldr	r0, [pc, #16]	; (80018b0 <MX_GPIO_Init+0x128>)
 800189e:	f000 fd21 	bl	80022e4 <HAL_GPIO_Init>

}
 80018a2:	bf00      	nop
 80018a4:	3720      	adds	r7, #32
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000
 80018b0:	48000400 	.word	0x48000400
 80018b4:	48000800 	.word	0x48000800
 80018b8:	10110000 	.word	0x10110000

080018bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80018c0:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <MX_I2C1_Init+0x74>)
 80018c2:	4a1c      	ldr	r2, [pc, #112]	; (8001934 <MX_I2C1_Init+0x78>)
 80018c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80018c6:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <MX_I2C1_Init+0x74>)
 80018c8:	4a1b      	ldr	r2, [pc, #108]	; (8001938 <MX_I2C1_Init+0x7c>)
 80018ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018cc:	4b18      	ldr	r3, [pc, #96]	; (8001930 <MX_I2C1_Init+0x74>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018d2:	4b17      	ldr	r3, [pc, #92]	; (8001930 <MX_I2C1_Init+0x74>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018d8:	4b15      	ldr	r3, [pc, #84]	; (8001930 <MX_I2C1_Init+0x74>)
 80018da:	2200      	movs	r2, #0
 80018dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018de:	4b14      	ldr	r3, [pc, #80]	; (8001930 <MX_I2C1_Init+0x74>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <MX_I2C1_Init+0x74>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <MX_I2C1_Init+0x74>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <MX_I2C1_Init+0x74>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018f6:	480e      	ldr	r0, [pc, #56]	; (8001930 <MX_I2C1_Init+0x74>)
 80018f8:	f000 fe97 	bl	800262a <HAL_I2C_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001902:	f000 f925 	bl	8001b50 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001906:	2100      	movs	r1, #0
 8001908:	4809      	ldr	r0, [pc, #36]	; (8001930 <MX_I2C1_Init+0x74>)
 800190a:	f000 ff1d 	bl	8002748 <HAL_I2CEx_ConfigAnalogFilter>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001914:	f000 f91c 	bl	8001b50 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001918:	2100      	movs	r1, #0
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_I2C1_Init+0x74>)
 800191c:	f000 ff5f 	bl	80027de <HAL_I2CEx_ConfigDigitalFilter>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001926:	f000 f913 	bl	8001b50 <Error_Handler>
  }

}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000534 	.word	0x20000534
 8001934:	40005400 	.word	0x40005400
 8001938:	00707cbb 	.word	0x00707cbb

0800193c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a18      	ldr	r2, [pc, #96]	; (80019bc <HAL_I2C_MspInit+0x80>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d129      	bne.n	80019b2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <HAL_I2C_MspInit+0x84>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	4a17      	ldr	r2, [pc, #92]	; (80019c0 <HAL_I2C_MspInit+0x84>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <HAL_I2C_MspInit+0x84>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001976:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800197a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800197c:	2312      	movs	r3, #18
 800197e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001980:	2301      	movs	r3, #1
 8001982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001984:	2303      	movs	r3, #3
 8001986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001988:	2304      	movs	r3, #4
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	4619      	mov	r1, r3
 8001992:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001996:	f000 fca5 	bl	80022e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_I2C_MspInit+0x84>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	4a08      	ldr	r2, [pc, #32]	; (80019c0 <HAL_I2C_MspInit+0x84>)
 80019a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019a4:	6593      	str	r3, [r2, #88]	; 0x58
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_I2C_MspInit+0x84>)
 80019a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80019b2:	bf00      	nop
 80019b4:	3728      	adds	r7, #40	; 0x28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40005400 	.word	0x40005400
 80019c0:	40021000 	.word	0x40021000

080019c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019c8:	f000 faa7 	bl	8001f1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019cc:	f000 f822 	bl	8001a14 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019d0:	f7ff feda 	bl	8001788 <MX_GPIO_Init>
  MX_I2C1_Init();
 80019d4:	f7ff ff72 	bl	80018bc <MX_I2C1_Init>
  MX_SPI1_Init();
 80019d8:	f000 f8e0 	bl	8001b9c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80019dc:	f000 f9fa 	bl	8001dd4 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80019e0:	f007 f8d8 	bl	8008b94 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_MspInit(&huart2);		//UART init
 80019e4:	4807      	ldr	r0, [pc, #28]	; (8001a04 <main+0x40>)
 80019e6:	f000 fa25 	bl	8001e34 <HAL_UART_MspInit>
  HAL_SPI_MspInit(&hspi1);		//SPI init
 80019ea:	4807      	ldr	r0, [pc, #28]	; (8001a08 <main+0x44>)
 80019ec:	f000 f914 	bl	8001c18 <HAL_SPI_MspInit>
  HAL_UART_Receive_IT(&huart2, rxData, 1);
 80019f0:	2201      	movs	r2, #1
 80019f2:	4906      	ldr	r1, [pc, #24]	; (8001a0c <main+0x48>)
 80019f4:	4803      	ldr	r0, [pc, #12]	; (8001a04 <main+0x40>)
 80019f6:	f003 fc53 	bl	80052a0 <HAL_UART_Receive_IT>
  appMain.mainProg();
 80019fa:	4805      	ldr	r0, [pc, #20]	; (8001a10 <main+0x4c>)
 80019fc:	f7ff f806 	bl	8000a0c <_ZN7AppMain8mainProgEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <main+0x3c>
 8001a02:	bf00      	nop
 8001a04:	200005e4 	.word	0x200005e4
 8001a08:	20000580 	.word	0x20000580
 8001a0c:	20000310 	.word	0x20000310
 8001a10:	200001ac 	.word	0x200001ac

08001a14 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b0a4      	sub	sp, #144	; 0x90
 8001a18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a1e:	2244      	movs	r2, #68	; 0x44
 8001a20:	2100      	movs	r1, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f007 fe7c 	bl	8009720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	2234      	movs	r2, #52	; 0x34
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f007 fe6e 	bl	8009720 <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a44:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a48:	f001 fe66 	bl	8003718 <HAL_PWREx_ControlVoltageScaling>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	bf14      	ite	ne
 8001a52:	2301      	movne	r3, #1
 8001a54:	2300      	moveq	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <_Z18SystemClock_Configv+0x4c>
  {
    Error_Handler();
 8001a5c:	f000 f878 	bl	8001b50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001a60:	2322      	movs	r3, #34	; 0x22
 8001a62:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a68:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a6e:	2340      	movs	r3, #64	; 0x40
 8001a70:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a72:	2302      	movs	r3, #2
 8001a74:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a76:	2302      	movs	r3, #2
 8001a78:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001a80:	2308      	movs	r3, #8
 8001a82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a86:	2302      	movs	r3, #2
 8001a88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a96:	4618      	mov	r0, r3
 8001a98:	f001 fea4 	bl	80037e4 <HAL_RCC_OscConfig>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	bf14      	ite	ne
 8001aa2:	2301      	movne	r3, #1
 8001aa4:	2300      	moveq	r3, #0
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <_Z18SystemClock_Configv+0x9c>
  {
    Error_Handler();
 8001aac:	f000 f850 	bl	8001b50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ab0:	230f      	movs	r3, #15
 8001ab2:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001abc:	2300      	movs	r3, #0
 8001abe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ac4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ac8:	2101      	movs	r1, #1
 8001aca:	4618      	mov	r0, r3
 8001acc:	f002 faf0 	bl	80040b0 <HAL_RCC_ClockConfig>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	bf14      	ite	ne
 8001ad6:	2301      	movne	r3, #1
 8001ad8:	2300      	moveq	r3, #0
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <_Z18SystemClock_Configv+0xd0>
  {
    Error_Handler();
 8001ae0:	f000 f836 	bl	8001b50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001ae4:	f242 0342 	movw	r3, #8258	; 0x2042
 8001ae8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001af2:	2300      	movs	r3, #0
 8001af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	4618      	mov	r0, r3
 8001afa:	f002 fcdd 	bl	80044b8 <HAL_RCCEx_PeriphCLKConfig>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	bf14      	ite	ne
 8001b04:	2301      	movne	r3, #1
 8001b06:	2300      	moveq	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <_Z18SystemClock_Configv+0xfe>
  {
    Error_Handler();
 8001b0e:	f000 f81f 	bl	8001b50 <Error_Handler>
  }
}
 8001b12:	bf00      	nop
 8001b14:	3790      	adds	r7, #144	; 0x90
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, rxData, 1);
 8001b24:	2201      	movs	r2, #1
 8001b26:	4907      	ldr	r1, [pc, #28]	; (8001b44 <HAL_UART_RxCpltCallback+0x28>)
 8001b28:	4807      	ldr	r0, [pc, #28]	; (8001b48 <HAL_UART_RxCpltCallback+0x2c>)
 8001b2a:	f003 fbb9 	bl	80052a0 <HAL_UART_Receive_IT>
	appMain.gps.gpsInterrupt(rxData[0]);
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_UART_RxCpltCallback+0x28>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	4619      	mov	r1, r3
 8001b34:	4805      	ldr	r0, [pc, #20]	; (8001b4c <HAL_UART_RxCpltCallback+0x30>)
 8001b36:	f7ff f901 	bl	8000d3c <_ZN3GPS12gpsInterruptEh>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000310 	.word	0x20000310
 8001b48:	200005e4 	.word	0x200005e4
 8001b4c:	2000026c 	.word	0x2000026c

08001b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <_Z41__static_initialization_and_destruction_0ii>:
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d107      	bne.n	8001b80 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d102      	bne.n	8001b80 <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain;
 8001b7a:	4803      	ldr	r0, [pc, #12]	; (8001b88 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001b7c:	f7fe feec 	bl	8000958 <_ZN7AppMainC1Ev>
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	200001ac 	.word	0x200001ac

08001b8c <_GLOBAL__sub_I_appMain>:
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b94:	2001      	movs	r0, #1
 8001b96:	f7ff ffe3 	bl	8001b60 <_Z41__static_initialization_and_destruction_0ii>
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <MX_SPI1_Init+0x74>)
 8001ba2:	4a1c      	ldr	r2, [pc, #112]	; (8001c14 <MX_SPI1_Init+0x78>)
 8001ba4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <MX_SPI1_Init+0x74>)
 8001ba8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bae:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <MX_SPI1_Init+0x74>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bb4:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <MX_SPI1_Init+0x74>)
 8001bb6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001bba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bbc:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <MX_SPI1_Init+0x74>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bc2:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <MX_SPI1_Init+0x74>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <MX_SPI1_Init+0x74>)
 8001bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <MX_SPI1_Init+0x74>)
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <MX_SPI1_Init+0x74>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <MX_SPI1_Init+0x74>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <MX_SPI1_Init+0x74>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <MX_SPI1_Init+0x74>)
 8001bea:	2207      	movs	r2, #7
 8001bec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bee:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <MX_SPI1_Init+0x74>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <MX_SPI1_Init+0x74>)
 8001bf6:	2208      	movs	r2, #8
 8001bf8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bfa:	4805      	ldr	r0, [pc, #20]	; (8001c10 <MX_SPI1_Init+0x74>)
 8001bfc:	f002 fde2 	bl	80047c4 <HAL_SPI_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c06:	f7ff ffa3 	bl	8001b50 <Error_Handler>
  }

}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000580 	.word	0x20000580
 8001c14:	40013000 	.word	0x40013000

08001c18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a17      	ldr	r2, [pc, #92]	; (8001c94 <HAL_SPI_MspInit+0x7c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d128      	bne.n	8001c8c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c3a:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <HAL_SPI_MspInit+0x80>)
 8001c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c3e:	4a16      	ldr	r2, [pc, #88]	; (8001c98 <HAL_SPI_MspInit+0x80>)
 8001c40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c44:	6613      	str	r3, [r2, #96]	; 0x60
 8001c46:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <HAL_SPI_MspInit+0x80>)
 8001c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <HAL_SPI_MspInit+0x80>)
 8001c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c56:	4a10      	ldr	r2, [pc, #64]	; (8001c98 <HAL_SPI_MspInit+0x80>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <HAL_SPI_MspInit+0x80>)
 8001c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c6a:	23e0      	movs	r3, #224	; 0xe0
 8001c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c76:	2303      	movs	r3, #3
 8001c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c7a:	2305      	movs	r3, #5
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7e:	f107 0314 	add.w	r3, r7, #20
 8001c82:	4619      	mov	r1, r3
 8001c84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c88:	f000 fb2c 	bl	80022e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	3728      	adds	r7, #40	; 0x28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40013000 	.word	0x40013000
 8001c98:	40021000 	.word	0x40021000

08001c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <HAL_MspInit+0x44>)
 8001ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca6:	4a0e      	ldr	r2, [pc, #56]	; (8001ce0 <HAL_MspInit+0x44>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6613      	str	r3, [r2, #96]	; 0x60
 8001cae:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <HAL_MspInit+0x44>)
 8001cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_MspInit+0x44>)
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbe:	4a08      	ldr	r2, [pc, #32]	; (8001ce0 <HAL_MspInit+0x44>)
 8001cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_MspInit+0x44>)
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40021000 	.word	0x40021000

08001ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf6:	e7fe      	b.n	8001cf6 <HardFault_Handler+0x4>

08001cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cfc:	e7fe      	b.n	8001cfc <MemManage_Handler+0x4>

08001cfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d02:	e7fe      	b.n	8001d02 <BusFault_Handler+0x4>

08001d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <UsageFault_Handler+0x4>

08001d0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d38:	f000 f942 	bl	8001fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d44:	4802      	ldr	r0, [pc, #8]	; (8001d50 <USART2_IRQHandler+0x10>)
 8001d46:	f003 fb4d 	bl	80053e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200005e4 	.word	0x200005e4

08001d54 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001d58:	4802      	ldr	r0, [pc, #8]	; (8001d64 <USB_IRQHandler+0x10>)
 8001d5a:	f000 fe96 	bl	8002a8a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200012fc 	.word	0x200012fc

08001d68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d6c:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <SystemInit+0x64>)
 8001d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d72:	4a16      	ldr	r2, [pc, #88]	; (8001dcc <SystemInit+0x64>)
 8001d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d7c:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <SystemInit+0x68>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a13      	ldr	r2, [pc, #76]	; (8001dd0 <SystemInit+0x68>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <SystemInit+0x68>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001d8e:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <SystemInit+0x68>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a0f      	ldr	r2, [pc, #60]	; (8001dd0 <SystemInit+0x68>)
 8001d94:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001d98:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001d9c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <SystemInit+0x68>)
 8001da0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001da4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <SystemInit+0x68>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a09      	ldr	r2, [pc, #36]	; (8001dd0 <SystemInit+0x68>)
 8001dac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001db2:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <SystemInit+0x68>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001db8:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <SystemInit+0x64>)
 8001dba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dbe:	609a      	str	r2, [r3, #8]
#endif
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000ed00 	.word	0xe000ed00
 8001dd0:	40021000 	.word	0x40021000

08001dd4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001dd8:	4b14      	ldr	r3, [pc, #80]	; (8001e2c <MX_USART2_UART_Init+0x58>)
 8001dda:	4a15      	ldr	r2, [pc, #84]	; (8001e30 <MX_USART2_UART_Init+0x5c>)
 8001ddc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001dde:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <MX_USART2_UART_Init+0x58>)
 8001de0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001de4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001de6:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <MX_USART2_UART_Init+0x58>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dec:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <MX_USART2_UART_Init+0x58>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001df2:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <MX_USART2_UART_Init+0x58>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <MX_USART2_UART_Init+0x58>)
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <MX_USART2_UART_Init+0x58>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e04:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <MX_USART2_UART_Init+0x58>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e0a:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <MX_USART2_UART_Init+0x58>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <MX_USART2_UART_Init+0x58>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e16:	4805      	ldr	r0, [pc, #20]	; (8001e2c <MX_USART2_UART_Init+0x58>)
 8001e18:	f003 f9f4 	bl	8005204 <HAL_UART_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001e22:	f7ff fe95 	bl	8001b50 <Error_Handler>
  }

}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200005e4 	.word	0x200005e4
 8001e30:	40004400 	.word	0x40004400

08001e34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	; 0x28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a1b      	ldr	r2, [pc, #108]	; (8001ec0 <HAL_UART_MspInit+0x8c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d130      	bne.n	8001eb8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e56:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_UART_MspInit+0x90>)
 8001e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5a:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <HAL_UART_MspInit+0x90>)
 8001e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e60:	6593      	str	r3, [r2, #88]	; 0x58
 8001e62:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_UART_MspInit+0x90>)
 8001e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <HAL_UART_MspInit+0x90>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e72:	4a14      	ldr	r2, [pc, #80]	; (8001ec4 <HAL_UART_MspInit+0x90>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_UART_MspInit+0x90>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e86:	230c      	movs	r3, #12
 8001e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e92:	2303      	movs	r3, #3
 8001e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e96:	2307      	movs	r3, #7
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9a:	f107 0314 	add.w	r3, r7, #20
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea4:	f000 fa1e 	bl	80022e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2100      	movs	r1, #0
 8001eac:	2026      	movs	r0, #38	; 0x26
 8001eae:	f000 f9a2 	bl	80021f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001eb2:	2026      	movs	r0, #38	; 0x26
 8001eb4:	f000 f9bb 	bl	800222e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001eb8:	bf00      	nop
 8001eba:	3728      	adds	r7, #40	; 0x28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40004400 	.word	0x40004400
 8001ec4:	40021000 	.word	0x40021000

08001ec8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f00 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ecc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ece:	e003      	b.n	8001ed8 <LoopCopyDataInit>

08001ed0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001ed2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ed4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001ed6:	3104      	adds	r1, #4

08001ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ed8:	480b      	ldr	r0, [pc, #44]	; (8001f08 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001eda:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001edc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ede:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ee0:	d3f6      	bcc.n	8001ed0 <CopyDataInit>
	ldr	r2, =_sbss
 8001ee2:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ee4:	e002      	b.n	8001eec <LoopFillZerobss>

08001ee6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001ee6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ee8:	f842 3b04 	str.w	r3, [r2], #4

08001eec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001eec:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <LoopForever+0x16>)
	cmp	r2, r3
 8001eee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ef0:	d3f9      	bcc.n	8001ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ef2:	f7ff ff39 	bl	8001d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ef6:	f007 fbef 	bl	80096d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001efa:	f7ff fd63 	bl	80019c4 <main>

08001efe <LoopForever>:

LoopForever:
    b LoopForever
 8001efe:	e7fe      	b.n	8001efe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f00:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8001f04:	08009834 	.word	0x08009834
	ldr	r0, =_sdata
 8001f08:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001f0c:	2000018c 	.word	0x2000018c
	ldr	r2, =_sbss
 8001f10:	2000018c 	.word	0x2000018c
	ldr	r3, = _ebss
 8001f14:	20001570 	.word	0x20001570

08001f18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f18:	e7fe      	b.n	8001f18 <ADC1_2_IRQHandler>

08001f1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f24:	2003      	movs	r0, #3
 8001f26:	f000 f95b 	bl	80021e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	f000 f80e 	bl	8001f4c <HAL_InitTick>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d002      	beq.n	8001f3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	71fb      	strb	r3, [r7, #7]
 8001f3a:	e001      	b.n	8001f40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f3c:	f7ff feae 	bl	8001c9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f40:	79fb      	ldrb	r3, [r7, #7]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f58:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <HAL_InitTick+0x68>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d022      	beq.n	8001fa6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f60:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <HAL_InitTick+0x6c>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <HAL_InitTick+0x68>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 f968 	bl	800224a <HAL_SYSTICK_Config>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10f      	bne.n	8001fa0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b0f      	cmp	r3, #15
 8001f84:	d809      	bhi.n	8001f9a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f86:	2200      	movs	r2, #0
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8e:	f000 f932 	bl	80021f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f92:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <HAL_InitTick+0x70>)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6013      	str	r3, [r2, #0]
 8001f98:	e007      	b.n	8001faa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	73fb      	strb	r3, [r7, #15]
 8001f9e:	e004      	b.n	8001faa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	73fb      	strb	r3, [r7, #15]
 8001fa4:	e001      	b.n	8001faa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000008 	.word	0x20000008
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	20000004 	.word	0x20000004

08001fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <HAL_IncTick+0x1c>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <HAL_IncTick+0x20>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4413      	add	r3, r2
 8001fce:	4a03      	ldr	r2, [pc, #12]	; (8001fdc <HAL_IncTick+0x1c>)
 8001fd0:	6013      	str	r3, [r2, #0]
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	20000664 	.word	0x20000664
 8001fe0:	20000008 	.word	0x20000008

08001fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe8:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <HAL_GetTick+0x14>)
 8001fea:	681b      	ldr	r3, [r3, #0]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20000664 	.word	0x20000664

08001ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002004:	f7ff ffee 	bl	8001fe4 <HAL_GetTick>
 8002008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002014:	d004      	beq.n	8002020 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002016:	4b09      	ldr	r3, [pc, #36]	; (800203c <HAL_Delay+0x40>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4413      	add	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002020:	bf00      	nop
 8002022:	f7ff ffdf 	bl	8001fe4 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	429a      	cmp	r2, r3
 8002030:	d8f7      	bhi.n	8002022 <HAL_Delay+0x26>
  {
  }
}
 8002032:	bf00      	nop
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000008 	.word	0x20000008

08002040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <__NVIC_SetPriorityGrouping+0x44>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800205c:	4013      	ands	r3, r2
 800205e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002068:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800206c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002072:	4a04      	ldr	r2, [pc, #16]	; (8002084 <__NVIC_SetPriorityGrouping+0x44>)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	60d3      	str	r3, [r2, #12]
}
 8002078:	bf00      	nop
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800208c:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <__NVIC_GetPriorityGrouping+0x18>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	0a1b      	lsrs	r3, r3, #8
 8002092:	f003 0307 	and.w	r3, r3, #7
}
 8002096:	4618      	mov	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	db0b      	blt.n	80020ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	f003 021f 	and.w	r2, r3, #31
 80020bc:	4907      	ldr	r1, [pc, #28]	; (80020dc <__NVIC_EnableIRQ+0x38>)
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	095b      	lsrs	r3, r3, #5
 80020c4:	2001      	movs	r0, #1
 80020c6:	fa00 f202 	lsl.w	r2, r0, r2
 80020ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	e000e100 	.word	0xe000e100

080020e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	6039      	str	r1, [r7, #0]
 80020ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	db0a      	blt.n	800210a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	490c      	ldr	r1, [pc, #48]	; (800212c <__NVIC_SetPriority+0x4c>)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	0112      	lsls	r2, r2, #4
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	440b      	add	r3, r1
 8002104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002108:	e00a      	b.n	8002120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	b2da      	uxtb	r2, r3
 800210e:	4908      	ldr	r1, [pc, #32]	; (8002130 <__NVIC_SetPriority+0x50>)
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	3b04      	subs	r3, #4
 8002118:	0112      	lsls	r2, r2, #4
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	440b      	add	r3, r1
 800211e:	761a      	strb	r2, [r3, #24]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	e000e100 	.word	0xe000e100
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002134:	b480      	push	{r7}
 8002136:	b089      	sub	sp, #36	; 0x24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f1c3 0307 	rsb	r3, r3, #7
 800214e:	2b04      	cmp	r3, #4
 8002150:	bf28      	it	cs
 8002152:	2304      	movcs	r3, #4
 8002154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3304      	adds	r3, #4
 800215a:	2b06      	cmp	r3, #6
 800215c:	d902      	bls.n	8002164 <NVIC_EncodePriority+0x30>
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3b03      	subs	r3, #3
 8002162:	e000      	b.n	8002166 <NVIC_EncodePriority+0x32>
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002168:	f04f 32ff 	mov.w	r2, #4294967295
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43da      	mvns	r2, r3
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	401a      	ands	r2, r3
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800217c:	f04f 31ff 	mov.w	r1, #4294967295
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	43d9      	mvns	r1, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800218c:	4313      	orrs	r3, r2
         );
}
 800218e:	4618      	mov	r0, r3
 8002190:	3724      	adds	r7, #36	; 0x24
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021ac:	d301      	bcc.n	80021b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ae:	2301      	movs	r3, #1
 80021b0:	e00f      	b.n	80021d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021b2:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <SysTick_Config+0x40>)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ba:	210f      	movs	r1, #15
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	f7ff ff8e 	bl	80020e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <SysTick_Config+0x40>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ca:	4b04      	ldr	r3, [pc, #16]	; (80021dc <SysTick_Config+0x40>)
 80021cc:	2207      	movs	r2, #7
 80021ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	e000e010 	.word	0xe000e010

080021e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ff29 	bl	8002040 <__NVIC_SetPriorityGrouping>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b086      	sub	sp, #24
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002208:	f7ff ff3e 	bl	8002088 <__NVIC_GetPriorityGrouping>
 800220c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	6978      	ldr	r0, [r7, #20]
 8002214:	f7ff ff8e 	bl	8002134 <NVIC_EncodePriority>
 8002218:	4602      	mov	r2, r0
 800221a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800221e:	4611      	mov	r1, r2
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff5d 	bl	80020e0 <__NVIC_SetPriority>
}
 8002226:	bf00      	nop
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	4603      	mov	r3, r0
 8002236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff31 	bl	80020a4 <__NVIC_EnableIRQ>
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff ffa2 	bl	800219c <SysTick_Config>
 8002258:	4603      	mov	r3, r0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d005      	beq.n	8002286 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2204      	movs	r2, #4
 800227e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	73fb      	strb	r3, [r7, #15]
 8002284:	e029      	b.n	80022da <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 020e 	bic.w	r2, r2, #14
 8002294:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0201 	bic.w	r2, r2, #1
 80022a4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	f003 021c 	and.w	r2, r3, #28
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	2101      	movs	r1, #1
 80022b4:	fa01 f202 	lsl.w	r2, r1, r2
 80022b8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	4798      	blx	r3
    }
  }
  return status;
 80022da:	7bfb      	ldrb	r3, [r7, #15]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f2:	e14e      	b.n	8002592 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	2101      	movs	r1, #1
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002300:	4013      	ands	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 8140 	beq.w	800258c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d00b      	beq.n	800232c <HAL_GPIO_Init+0x48>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d007      	beq.n	800232c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002320:	2b11      	cmp	r3, #17
 8002322:	d003      	beq.n	800232c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b12      	cmp	r3, #18
 800232a:	d130      	bne.n	800238e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	2203      	movs	r2, #3
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002362:	2201      	movs	r2, #1
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4013      	ands	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	091b      	lsrs	r3, r3, #4
 8002378:	f003 0201 	and.w	r2, r3, #1
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	2203      	movs	r2, #3
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4013      	ands	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_Init+0xea>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b12      	cmp	r3, #18
 80023cc:	d123      	bne.n	8002416 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	08da      	lsrs	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3208      	adds	r2, #8
 80023d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	220f      	movs	r2, #15
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	691a      	ldr	r2, [r3, #16]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	08da      	lsrs	r2, r3, #3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3208      	adds	r2, #8
 8002410:	6939      	ldr	r1, [r7, #16]
 8002412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	2203      	movs	r2, #3
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4013      	ands	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 0203 	and.w	r2, r3, #3
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 809a 	beq.w	800258c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002458:	4b55      	ldr	r3, [pc, #340]	; (80025b0 <HAL_GPIO_Init+0x2cc>)
 800245a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800245c:	4a54      	ldr	r2, [pc, #336]	; (80025b0 <HAL_GPIO_Init+0x2cc>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6613      	str	r3, [r2, #96]	; 0x60
 8002464:	4b52      	ldr	r3, [pc, #328]	; (80025b0 <HAL_GPIO_Init+0x2cc>)
 8002466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002470:	4a50      	ldr	r2, [pc, #320]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	089b      	lsrs	r3, r3, #2
 8002476:	3302      	adds	r3, #2
 8002478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	220f      	movs	r2, #15
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800249a:	d013      	beq.n	80024c4 <HAL_GPIO_Init+0x1e0>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a46      	ldr	r2, [pc, #280]	; (80025b8 <HAL_GPIO_Init+0x2d4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d00d      	beq.n	80024c0 <HAL_GPIO_Init+0x1dc>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a45      	ldr	r2, [pc, #276]	; (80025bc <HAL_GPIO_Init+0x2d8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d007      	beq.n	80024bc <HAL_GPIO_Init+0x1d8>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a44      	ldr	r2, [pc, #272]	; (80025c0 <HAL_GPIO_Init+0x2dc>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d101      	bne.n	80024b8 <HAL_GPIO_Init+0x1d4>
 80024b4:	2303      	movs	r3, #3
 80024b6:	e006      	b.n	80024c6 <HAL_GPIO_Init+0x1e2>
 80024b8:	2307      	movs	r3, #7
 80024ba:	e004      	b.n	80024c6 <HAL_GPIO_Init+0x1e2>
 80024bc:	2302      	movs	r3, #2
 80024be:	e002      	b.n	80024c6 <HAL_GPIO_Init+0x1e2>
 80024c0:	2301      	movs	r3, #1
 80024c2:	e000      	b.n	80024c6 <HAL_GPIO_Init+0x1e2>
 80024c4:	2300      	movs	r3, #0
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	f002 0203 	and.w	r2, r2, #3
 80024cc:	0092      	lsls	r2, r2, #2
 80024ce:	4093      	lsls	r3, r2
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024d6:	4937      	ldr	r1, [pc, #220]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	089b      	lsrs	r3, r3, #2
 80024dc:	3302      	adds	r3, #2
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024e4:	4b37      	ldr	r3, [pc, #220]	; (80025c4 <HAL_GPIO_Init+0x2e0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4013      	ands	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002508:	4a2e      	ldr	r2, [pc, #184]	; (80025c4 <HAL_GPIO_Init+0x2e0>)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800250e:	4b2d      	ldr	r3, [pc, #180]	; (80025c4 <HAL_GPIO_Init+0x2e0>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	43db      	mvns	r3, r3
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4013      	ands	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002532:	4a24      	ldr	r2, [pc, #144]	; (80025c4 <HAL_GPIO_Init+0x2e0>)
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002538:	4b22      	ldr	r3, [pc, #136]	; (80025c4 <HAL_GPIO_Init+0x2e0>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	43db      	mvns	r3, r3
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800255c:	4a19      	ldr	r2, [pc, #100]	; (80025c4 <HAL_GPIO_Init+0x2e0>)
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002562:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <HAL_GPIO_Init+0x2e0>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	43db      	mvns	r3, r3
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4013      	ands	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4313      	orrs	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002586:	4a0f      	ldr	r2, [pc, #60]	; (80025c4 <HAL_GPIO_Init+0x2e0>)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	3301      	adds	r3, #1
 8002590:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	fa22 f303 	lsr.w	r3, r2, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	f47f aea9 	bne.w	80022f4 <HAL_GPIO_Init+0x10>
  }
}
 80025a2:	bf00      	nop
 80025a4:	371c      	adds	r7, #28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40010000 	.word	0x40010000
 80025b8:	48000400 	.word	0x48000400
 80025bc:	48000800 	.word	0x48000800
 80025c0:	48000c00 	.word	0x48000c00
 80025c4:	40010400 	.word	0x40010400

080025c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
 80025d4:	4613      	mov	r3, r2
 80025d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d8:	787b      	ldrb	r3, [r7, #1]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025e4:	e002      	b.n	80025ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025e6:	887a      	ldrh	r2, [r7, #2]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	695a      	ldr	r2, [r3, #20]
 8002608:	887b      	ldrh	r3, [r7, #2]
 800260a:	4013      	ands	r3, r2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002610:	887a      	ldrh	r2, [r7, #2]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002616:	e002      	b.n	800261e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002618:	887a      	ldrh	r2, [r7, #2]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	619a      	str	r2, [r3, #24]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e081      	b.n	8002740 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d106      	bne.n	8002656 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff f973 	bl	800193c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2224      	movs	r2, #36	; 0x24
 800265a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0201 	bic.w	r2, r2, #1
 800266c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800267a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800268a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d107      	bne.n	80026a4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026a0:	609a      	str	r2, [r3, #8]
 80026a2:	e006      	b.n	80026b2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80026b0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d104      	bne.n	80026c4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026c2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026d6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026e6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	ea42 0103 	orr.w	r1, r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	021a      	lsls	r2, r3, #8
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69d9      	ldr	r1, [r3, #28]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1a      	ldr	r2, [r3, #32]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 0201 	orr.w	r2, r2, #1
 8002720:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2220      	movs	r2, #32
 800272c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b20      	cmp	r3, #32
 800275c:	d138      	bne.n	80027d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002768:	2302      	movs	r3, #2
 800276a:	e032      	b.n	80027d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2224      	movs	r2, #36	; 0x24
 8002778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0201 	bic.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800279a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6819      	ldr	r1, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027cc:	2300      	movs	r3, #0
 80027ce:	e000      	b.n	80027d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027d0:	2302      	movs	r3, #2
  }
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027de:	b480      	push	{r7}
 80027e0:	b085      	sub	sp, #20
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b20      	cmp	r3, #32
 80027f2:	d139      	bne.n	8002868 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027fe:	2302      	movs	r3, #2
 8002800:	e033      	b.n	800286a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2224      	movs	r2, #36	; 0x24
 800280e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0201 	bic.w	r2, r2, #1
 8002820:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002830:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	021b      	lsls	r3, r3, #8
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4313      	orrs	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0201 	orr.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2220      	movs	r2, #32
 8002858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002864:	2300      	movs	r3, #0
 8002866:	e000      	b.n	800286a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002868:	2302      	movs	r3, #2
  }
}
 800286a:	4618      	mov	r0, r3
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002876:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002878:	b08b      	sub	sp, #44	; 0x2c
 800287a:	af06      	add	r7, sp, #24
 800287c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0da      	b.n	8002a3e <HAL_PCD_Init+0x1c8>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	d106      	bne.n	80028a2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f006 fb7d 	bl	8008f9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2203      	movs	r2, #3
 80028a6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f003 fc95 	bl	80061de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	687e      	ldr	r6, [r7, #4]
 80028bc:	466d      	mov	r5, sp
 80028be:	f106 0410 	add.w	r4, r6, #16
 80028c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028c6:	6823      	ldr	r3, [r4, #0]
 80028c8:	602b      	str	r3, [r5, #0]
 80028ca:	1d33      	adds	r3, r6, #4
 80028cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028ce:	6838      	ldr	r0, [r7, #0]
 80028d0:	f003 fc5b 	bl	800618a <USB_CoreInit>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2202      	movs	r2, #2
 80028de:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e0ab      	b.n	8002a3e <HAL_PCD_Init+0x1c8>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2100      	movs	r1, #0
 80028ec:	4618      	mov	r0, r3
 80028ee:	f003 fc91 	bl	8006214 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028f2:	2300      	movs	r3, #0
 80028f4:	73fb      	strb	r3, [r7, #15]
 80028f6:	e035      	b.n	8002964 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	015b      	lsls	r3, r3, #5
 80028fe:	4413      	add	r3, r2
 8002900:	3329      	adds	r3, #41	; 0x29
 8002902:	2201      	movs	r2, #1
 8002904:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	015b      	lsls	r3, r3, #5
 800290c:	4413      	add	r3, r2
 800290e:	3328      	adds	r3, #40	; 0x28
 8002910:	7bfa      	ldrb	r2, [r7, #15]
 8002912:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002914:	7bfb      	ldrb	r3, [r7, #15]
 8002916:	7bfa      	ldrb	r2, [r7, #15]
 8002918:	b291      	uxth	r1, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	015b      	lsls	r3, r3, #5
 800291e:	4413      	add	r3, r2
 8002920:	3336      	adds	r3, #54	; 0x36
 8002922:	460a      	mov	r2, r1
 8002924:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002926:	7bfb      	ldrb	r3, [r7, #15]
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	015b      	lsls	r3, r3, #5
 800292c:	4413      	add	r3, r2
 800292e:	332b      	adds	r3, #43	; 0x2b
 8002930:	2200      	movs	r2, #0
 8002932:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002934:	7bfb      	ldrb	r3, [r7, #15]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	015b      	lsls	r3, r3, #5
 800293a:	4413      	add	r3, r2
 800293c:	3338      	adds	r3, #56	; 0x38
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	015b      	lsls	r3, r3, #5
 8002948:	4413      	add	r3, r2
 800294a:	333c      	adds	r3, #60	; 0x3c
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002950:	7bfb      	ldrb	r3, [r7, #15]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	3302      	adds	r3, #2
 8002956:	015b      	lsls	r3, r3, #5
 8002958:	4413      	add	r3, r2
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	3301      	adds	r3, #1
 8002962:	73fb      	strb	r3, [r7, #15]
 8002964:	7bfa      	ldrb	r2, [r7, #15]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	429a      	cmp	r2, r3
 800296c:	d3c4      	bcc.n	80028f8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800296e:	2300      	movs	r3, #0
 8002970:	73fb      	strb	r3, [r7, #15]
 8002972:	e031      	b.n	80029d8 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	015b      	lsls	r3, r3, #5
 800297a:	4413      	add	r3, r2
 800297c:	f203 1329 	addw	r3, r3, #297	; 0x129
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	015b      	lsls	r3, r3, #5
 800298a:	4413      	add	r3, r2
 800298c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002990:	7bfa      	ldrb	r2, [r7, #15]
 8002992:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	015b      	lsls	r3, r3, #5
 800299a:	4413      	add	r3, r2
 800299c:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80029a0:	2200      	movs	r2, #0
 80029a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	015b      	lsls	r3, r3, #5
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	015b      	lsls	r3, r3, #5
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	330a      	adds	r3, #10
 80029ca:	015b      	lsls	r3, r3, #5
 80029cc:	4413      	add	r3, r2
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d2:	7bfb      	ldrb	r3, [r7, #15]
 80029d4:	3301      	adds	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
 80029d8:	7bfa      	ldrb	r2, [r7, #15]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d3c8      	bcc.n	8002974 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	687e      	ldr	r6, [r7, #4]
 80029ea:	466d      	mov	r5, sp
 80029ec:	f106 0410 	add.w	r4, r6, #16
 80029f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029f4:	6823      	ldr	r3, [r4, #0]
 80029f6:	602b      	str	r3, [r5, #0]
 80029f8:	1d33      	adds	r3, r6, #4
 80029fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029fc:	6838      	ldr	r0, [r7, #0]
 80029fe:	f003 fc16 	bl	800622e <USB_DevInit>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e014      	b.n	8002a3e <HAL_PCD_Init+0x1c8>
  }

  hpcd->USB_Address = 0U;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d102      	bne.n	8002a32 <HAL_PCD_Init+0x1bc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 fe3a 	bl	80036a6 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f004 fc5d 	bl	80072f6 <USB_DevDisconnect>

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a46 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <HAL_PCD_Start+0x16>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e012      	b.n	8002a82 <HAL_PCD_Start+0x3c>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f004 fc2d 	bl	80072c8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f003 fb9a 	bl	80061ac <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b082      	sub	sp, #8
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f004 fc42 	bl	8007320 <USB_ReadInterrupts>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa6:	d102      	bne.n	8002aae <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 fb33 	bl	8003114 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f004 fc34 	bl	8007320 <USB_ReadInterrupts>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac2:	d112      	bne.n	8002aea <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad6:	b292      	uxth	r2, r2
 8002ad8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f006 faf8 	bl	80090d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f91e 	bl	8002d26 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f004 fc16 	bl	8007320 <USB_ReadInterrupts>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002afa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002afe:	d10b      	bne.n	8002b18 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b12:	b292      	uxth	r2, r2
 8002b14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f004 fbff 	bl	8007320 <USB_ReadInterrupts>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b2c:	d10b      	bne.n	8002b46 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b40:	b292      	uxth	r2, r2
 8002b42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f004 fbe8 	bl	8007320 <USB_ReadInterrupts>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b5a:	d133      	bne.n	8002bc4 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0204 	bic.w	r2, r2, #4
 8002b6e:	b292      	uxth	r2, r2
 8002b70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0208 	bic.w	r2, r2, #8
 8002b86:	b292      	uxth	r2, r2
 8002b88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d107      	bne.n	8002ba6 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f006 fd43 	bl	800962c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f006 facc 	bl	8009144 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bbe:	b292      	uxth	r2, r2
 8002bc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f004 fba9 	bl	8007320 <USB_ReadInterrupts>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bd8:	d126      	bne.n	8002c28 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0208 	orr.w	r2, r2, #8
 8002bec:	b292      	uxth	r2, r2
 8002bee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c04:	b292      	uxth	r2, r2
 8002c06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0204 	orr.w	r2, r2, #4
 8002c1c:	b292      	uxth	r2, r2
 8002c1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f006 fa74 	bl	8009110 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f004 fb77 	bl	8007320 <USB_ReadInterrupts>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c38:	2b80      	cmp	r3, #128	; 0x80
 8002c3a:	d13f      	bne.n	8002cbc <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c4e:	b292      	uxth	r2, r2
 8002c50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d12b      	bne.n	8002cb6 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f042 0204 	orr.w	r2, r2, #4
 8002c70:	b292      	uxth	r2, r2
 8002c72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 0208 	orr.w	r2, r2, #8
 8002c88:	b292      	uxth	r2, r2
 8002c8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	089b      	lsrs	r3, r3, #2
 8002ca2:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002cac:	2101      	movs	r1, #1
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f006 fcbc 	bl	800962c <HAL_PCDEx_LPM_Callback>
 8002cb4:	e002      	b.n	8002cbc <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f006 fa2a 	bl	8009110 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f004 fb2d 	bl	8007320 <USB_ReadInterrupts>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cd0:	d10e      	bne.n	8002cf0 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ce4:	b292      	uxth	r2, r2
 8002ce6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f006 f9e3 	bl	80090b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f004 fb13 	bl	8007320 <USB_ReadInterrupts>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d04:	d10b      	bne.n	8002d1e <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d18:	b292      	uxth	r2, r2
 8002d1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
 8002d2e:	460b      	mov	r3, r1
 8002d30:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_PCD_SetAddress+0x1a>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e013      	b.n	8002d68 <HAL_PCD_SetAddress+0x42>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	78fa      	ldrb	r2, [r7, #3]
 8002d4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	4611      	mov	r1, r2
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f004 faa1 	bl	80072a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	4608      	mov	r0, r1
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4603      	mov	r3, r0
 8002d80:	70fb      	strb	r3, [r7, #3]
 8002d82:	460b      	mov	r3, r1
 8002d84:	803b      	strh	r3, [r7, #0]
 8002d86:	4613      	mov	r3, r2
 8002d88:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	da0b      	bge.n	8002dae <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	015b      	lsls	r3, r3, #5
 8002d9e:	3328      	adds	r3, #40	; 0x28
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	4413      	add	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2201      	movs	r2, #1
 8002daa:	705a      	strb	r2, [r3, #1]
 8002dac:	e00b      	b.n	8002dc6 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dae:	78fb      	ldrb	r3, [r7, #3]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	015b      	lsls	r3, r3, #5
 8002db6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002dc6:	78fb      	ldrb	r3, [r7, #3]
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002dd2:	883a      	ldrh	r2, [r7, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	78ba      	ldrb	r2, [r7, #2]
 8002ddc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	785b      	ldrb	r3, [r3, #1]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d004      	beq.n	8002df0 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002df0:	78bb      	ldrb	r3, [r7, #2]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d102      	bne.n	8002dfc <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_PCD_EP_Open+0x9a>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e00e      	b.n	8002e28 <HAL_PCD_EP_Open+0xb8>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68f9      	ldr	r1, [r7, #12]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f003 fa2d 	bl	8006278 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8002e26:	7afb      	ldrb	r3, [r7, #11]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	da0b      	bge.n	8002e5c <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e44:	78fb      	ldrb	r3, [r7, #3]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	015b      	lsls	r3, r3, #5
 8002e4c:	3328      	adds	r3, #40	; 0x28
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	4413      	add	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2201      	movs	r2, #1
 8002e58:	705a      	strb	r2, [r3, #1]
 8002e5a:	e00b      	b.n	8002e74 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	015b      	lsls	r3, r3, #5
 8002e64:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_PCD_EP_Close+0x5e>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e00e      	b.n	8002eac <HAL_PCD_EP_Close+0x7c>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68f9      	ldr	r1, [r7, #12]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f003 fcdb 	bl	8006858 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	603b      	str	r3, [r7, #0]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ec4:	7afb      	ldrb	r3, [r7, #11]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	015b      	lsls	r3, r3, #5
 8002ecc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2200      	movs	r2, #0
 8002eec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eee:	7afb      	ldrb	r3, [r7, #11]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002efa:	7afb      	ldrb	r3, [r7, #11]
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d106      	bne.n	8002f12 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6979      	ldr	r1, [r7, #20]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f003 fe3a 	bl	8006b84 <USB_EPStartXfer>
 8002f10:	e005      	b.n	8002f1e <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6979      	ldr	r1, [r7, #20]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f003 fe33 	bl	8006b84 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	330a      	adds	r3, #10
 8002f3e:	015b      	lsls	r3, r3, #5
 8002f40:	4413      	add	r3, r2
 8002f42:	3304      	adds	r3, #4
 8002f44:	681b      	ldr	r3, [r3, #0]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b086      	sub	sp, #24
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	603b      	str	r3, [r7, #0]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f62:	7afb      	ldrb	r3, [r7, #11]
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	015b      	lsls	r3, r3, #5
 8002f6a:	3328      	adds	r3, #40	; 0x28
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4413      	add	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2200      	movs	r2, #0
 8002f82:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	2201      	movs	r2, #1
 8002f88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f8a:	7afb      	ldrb	r3, [r7, #11]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f96:	7afb      	ldrb	r3, [r7, #11]
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d106      	bne.n	8002fae <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6979      	ldr	r1, [r7, #20]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f003 fdec 	bl	8006b84 <USB_EPStartXfer>
 8002fac:	e005      	b.n	8002fba <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6979      	ldr	r1, [r7, #20]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f003 fde5 	bl	8006b84 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	f003 0207 	and.w	r2, r3, #7
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d901      	bls.n	8002fe2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e046      	b.n	8003070 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fe2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	da0b      	bge.n	8003002 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fea:	78fb      	ldrb	r3, [r7, #3]
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	015b      	lsls	r3, r3, #5
 8002ff2:	3328      	adds	r3, #40	; 0x28
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	705a      	strb	r2, [r3, #1]
 8003000:	e009      	b.n	8003016 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	015b      	lsls	r3, r3, #5
 8003006:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	4413      	add	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2201      	movs	r2, #1
 800301a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800301c:	78fb      	ldrb	r3, [r7, #3]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	b2da      	uxtb	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <HAL_PCD_EP_SetStall+0x72>
 8003032:	2302      	movs	r3, #2
 8003034:	e01c      	b.n	8003070 <HAL_PCD_EP_SetStall+0xac>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68f9      	ldr	r1, [r7, #12]
 8003044:	4618      	mov	r0, r3
 8003046:	f004 f855 	bl	80070f4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800304a:	78fb      	ldrb	r3, [r7, #3]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	2b00      	cmp	r3, #0
 8003052:	d108      	bne.n	8003066 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800305e:	4619      	mov	r1, r3
 8003060:	4610      	mov	r0, r2
 8003062:	f004 f96d 	bl	8007340 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003084:	78fb      	ldrb	r3, [r7, #3]
 8003086:	f003 020f 	and.w	r2, r3, #15
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	429a      	cmp	r2, r3
 8003090:	d901      	bls.n	8003096 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e03a      	b.n	800310c <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003096:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800309a:	2b00      	cmp	r3, #0
 800309c:	da0b      	bge.n	80030b6 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800309e:	78fb      	ldrb	r3, [r7, #3]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	015b      	lsls	r3, r3, #5
 80030a6:	3328      	adds	r3, #40	; 0x28
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	4413      	add	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2201      	movs	r2, #1
 80030b2:	705a      	strb	r2, [r3, #1]
 80030b4:	e00b      	b.n	80030ce <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030b6:	78fb      	ldrb	r3, [r7, #3]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	015b      	lsls	r3, r3, #5
 80030be:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	4413      	add	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030d4:	78fb      	ldrb	r3, [r7, #3]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_PCD_EP_ClrStall+0x76>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e00e      	b.n	800310c <HAL_PCD_EP_ClrStall+0x94>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68f9      	ldr	r1, [r7, #12]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f004 f83b 	bl	8007178 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003114:	b590      	push	{r4, r7, lr}
 8003116:	b089      	sub	sp, #36	; 0x24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800311c:	e274      	b.n	8003608 <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003126:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003128:	8afb      	ldrh	r3, [r7, #22]
 800312a:	b2db      	uxtb	r3, r3
 800312c:	f003 030f 	and.w	r3, r3, #15
 8003130:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8003132:	7d7b      	ldrb	r3, [r7, #21]
 8003134:	2b00      	cmp	r3, #0
 8003136:	f040 813c 	bne.w	80033b2 <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800313a:	8afb      	ldrh	r3, [r7, #22]
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	2b00      	cmp	r3, #0
 8003142:	d14f      	bne.n	80031e4 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	b29b      	uxth	r3, r3
 800314c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003154:	b29c      	uxth	r4, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800315e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003162:	b29b      	uxth	r3, r3
 8003164:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3328      	adds	r3, #40	; 0x28
 800316a:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003174:	b29b      	uxth	r3, r3
 8003176:	461a      	mov	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4413      	add	r3, r2
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6812      	ldr	r2, [r2, #0]
 8003184:	4413      	add	r3, r2
 8003186:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	695a      	ldr	r2, [r3, #20]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	441a      	add	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80031a2:	2100      	movs	r1, #0
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f005 ff6f 	bl	8009088 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 8228 	beq.w	8003608 <PCD_EP_ISR_Handler+0x4f4>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f040 8223 	bne.w	8003608 <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	b292      	uxth	r2, r2
 80031d6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031e2:	e211      	b.n	8003608 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80031ea:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80031f4:	8a7b      	ldrh	r3, [r7, #18]
 80031f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d031      	beq.n	8003262 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003206:	b29b      	uxth	r3, r3
 8003208:	461a      	mov	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	4413      	add	r3, r2
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	4413      	add	r3, r2
 8003218:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003238:	b29b      	uxth	r3, r3
 800323a:	f004 f8ce 	bl	80073da <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	881b      	ldrh	r3, [r3, #0]
 8003244:	b29a      	uxth	r2, r3
 8003246:	f640 738f 	movw	r3, #3983	; 0xf8f
 800324a:	4013      	ands	r3, r2
 800324c:	b29c      	uxth	r4, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003256:	b292      	uxth	r2, r2
 8003258:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f005 feea 	bl	8009034 <HAL_PCD_SetupStageCallback>
 8003260:	e1d2      	b.n	8003608 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003262:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003266:	2b00      	cmp	r3, #0
 8003268:	f280 81ce 	bge.w	8003608 <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	b29a      	uxth	r2, r3
 8003274:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003278:	4013      	ands	r3, r2
 800327a:	b29c      	uxth	r4, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003284:	b292      	uxth	r2, r2
 8003286:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003290:	b29b      	uxth	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4413      	add	r3, r2
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	4413      	add	r3, r2
 80032a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d019      	beq.n	80032ec <PCD_EP_ISR_Handler+0x1d8>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d015      	beq.n	80032ec <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6818      	ldr	r0, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6959      	ldr	r1, [r3, #20]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	f004 f882 	bl	80073da <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	441a      	add	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80032e4:	2100      	movs	r1, #0
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f005 feb6 	bl	8009058 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	461c      	mov	r4, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	441c      	add	r4, r3
 80032fe:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8003302:	461c      	mov	r4, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10e      	bne.n	800332a <PCD_EP_ISR_Handler+0x216>
 800330c:	8823      	ldrh	r3, [r4, #0]
 800330e:	b29b      	uxth	r3, r3
 8003310:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003314:	b29b      	uxth	r3, r3
 8003316:	8023      	strh	r3, [r4, #0]
 8003318:	8823      	ldrh	r3, [r4, #0]
 800331a:	b29b      	uxth	r3, r3
 800331c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003320:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003324:	b29b      	uxth	r3, r3
 8003326:	8023      	strh	r3, [r4, #0]
 8003328:	e02d      	b.n	8003386 <PCD_EP_ISR_Handler+0x272>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	2b3e      	cmp	r3, #62	; 0x3e
 8003330:	d812      	bhi.n	8003358 <PCD_EP_ISR_Handler+0x244>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	085b      	lsrs	r3, r3, #1
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <PCD_EP_ISR_Handler+0x238>
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	3301      	adds	r3, #1
 800334a:	61bb      	str	r3, [r7, #24]
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	b29b      	uxth	r3, r3
 8003350:	029b      	lsls	r3, r3, #10
 8003352:	b29b      	uxth	r3, r3
 8003354:	8023      	strh	r3, [r4, #0]
 8003356:	e016      	b.n	8003386 <PCD_EP_ISR_Handler+0x272>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	095b      	lsrs	r3, r3, #5
 800335e:	61bb      	str	r3, [r7, #24]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	f003 031f 	and.w	r3, r3, #31
 8003368:	2b00      	cmp	r3, #0
 800336a:	d102      	bne.n	8003372 <PCD_EP_ISR_Handler+0x25e>
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	3b01      	subs	r3, #1
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	b29b      	uxth	r3, r3
 8003376:	029b      	lsls	r3, r3, #10
 8003378:	b29b      	uxth	r3, r3
 800337a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800337e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003382:	b29b      	uxth	r3, r3
 8003384:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	b29b      	uxth	r3, r3
 800338e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003396:	b29c      	uxth	r4, r3
 8003398:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800339c:	b29c      	uxth	r4, r3
 800339e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80033a2:	b29c      	uxth	r4, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	4b9e      	ldr	r3, [pc, #632]	; (8003624 <PCD_EP_ISR_Handler+0x510>)
 80033aa:	4323      	orrs	r3, r4
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	8013      	strh	r3, [r2, #0]
 80033b0:	e12a      	b.n	8003608 <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	7d7b      	ldrb	r3, [r7, #21]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80033c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f280 80cb 	bge.w	8003562 <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	461a      	mov	r2, r3
 80033d2:	7d7b      	ldrb	r3, [r7, #21]
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	b29a      	uxth	r2, r3
 80033dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80033e0:	4013      	ands	r3, r2
 80033e2:	b29c      	uxth	r4, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	461a      	mov	r2, r3
 80033ea:	7d7b      	ldrb	r3, [r7, #21]
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80033f4:	b292      	uxth	r2, r2
 80033f6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80033f8:	7d7b      	ldrb	r3, [r7, #21]
 80033fa:	015b      	lsls	r3, r3, #5
 80033fc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	4413      	add	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	7b1b      	ldrb	r3, [r3, #12]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d11f      	bne.n	800344e <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003416:	b29b      	uxth	r3, r3
 8003418:	461a      	mov	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4413      	add	r3, r2
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6812      	ldr	r2, [r2, #0]
 8003426:	4413      	add	r3, r2
 8003428:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003432:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8003434:	8bfb      	ldrh	r3, [r7, #30]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d06e      	beq.n	8003518 <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6818      	ldr	r0, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6959      	ldr	r1, [r3, #20]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	88da      	ldrh	r2, [r3, #6]
 8003446:	8bfb      	ldrh	r3, [r7, #30]
 8003448:	f003 ffc7 	bl	80073da <USB_ReadPMA>
 800344c:	e064      	b.n	8003518 <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	461a      	mov	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	b29b      	uxth	r3, r3
 8003460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003468:	b29c      	uxth	r4, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	441a      	add	r2, r3
 8003478:	4b6b      	ldr	r3, [pc, #428]	; (8003628 <PCD_EP_ISR_Handler+0x514>)
 800347a:	4323      	orrs	r3, r4
 800347c:	b29b      	uxth	r3, r3
 800347e:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	b29b      	uxth	r3, r3
 8003492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d01f      	beq.n	80034da <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	461a      	mov	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4413      	add	r3, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	4413      	add	r3, r2
 80034b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034be:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80034c0:	8bfb      	ldrh	r3, [r7, #30]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d028      	beq.n	8003518 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6959      	ldr	r1, [r3, #20]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	891a      	ldrh	r2, [r3, #8]
 80034d2:	8bfb      	ldrh	r3, [r7, #30]
 80034d4:	f003 ff81 	bl	80073da <USB_ReadPMA>
 80034d8:	e01e      	b.n	8003518 <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	461a      	mov	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4413      	add	r3, r2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	4413      	add	r3, r2
 80034f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034fe:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003500:	8bfb      	ldrh	r3, [r7, #30]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d008      	beq.n	8003518 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6959      	ldr	r1, [r3, #20]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	895a      	ldrh	r2, [r3, #10]
 8003512:	8bfb      	ldrh	r3, [r7, #30]
 8003514:	f003 ff61 	bl	80073da <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	69da      	ldr	r2, [r3, #28]
 800351c:	8bfb      	ldrh	r3, [r7, #30]
 800351e:	441a      	add	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	695a      	ldr	r2, [r3, #20]
 8003528:	8bfb      	ldrh	r3, [r7, #30]
 800352a:	441a      	add	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d004      	beq.n	8003542 <PCD_EP_ISR_Handler+0x42e>
 8003538:	8bfa      	ldrh	r2, [r7, #30]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	429a      	cmp	r2, r3
 8003540:	d206      	bcs.n	8003550 <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	4619      	mov	r1, r3
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f005 fd85 	bl	8009058 <HAL_PCD_DataOutStageCallback>
 800354e:	e008      	b.n	8003562 <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	7819      	ldrb	r1, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	695a      	ldr	r2, [r3, #20]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff fca9 	bl	8002eb4 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003562:	8a7b      	ldrh	r3, [r7, #18]
 8003564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003568:	2b00      	cmp	r3, #0
 800356a:	d04d      	beq.n	8003608 <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 800356c:	7d7b      	ldrb	r3, [r7, #21]
 800356e:	015b      	lsls	r3, r3, #5
 8003570:	3328      	adds	r3, #40	; 0x28
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	4413      	add	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	461a      	mov	r2, r3
 800357e:	7d7b      	ldrb	r3, [r7, #21]
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	b29b      	uxth	r3, r3
 8003588:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800358c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003590:	b29c      	uxth	r4, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	7d7b      	ldrb	r3, [r7, #21]
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	441a      	add	r2, r3
 800359e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80035a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	461a      	mov	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	4413      	add	r3, r2
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6812      	ldr	r2, [r2, #0]
 80035c2:	4413      	add	r3, r2
 80035c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	695a      	ldr	r2, [r3, #20]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	441a      	add	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d106      	bne.n	80035f6 <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	4619      	mov	r1, r3
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f005 fd4a 	bl	8009088 <HAL_PCD_DataInStageCallback>
 80035f4:	e008      	b.n	8003608 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	7819      	ldrb	r1, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	695a      	ldr	r2, [r3, #20]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff fca5 	bl	8002f52 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003610:	b29b      	uxth	r3, r3
 8003612:	b21b      	sxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	f6ff ad82 	blt.w	800311e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3724      	adds	r7, #36	; 0x24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd90      	pop	{r4, r7, pc}
 8003624:	ffff8080 	.word	0xffff8080
 8003628:	ffff80c0 	.word	0xffff80c0

0800362c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	607b      	str	r3, [r7, #4]
 8003636:	460b      	mov	r3, r1
 8003638:	817b      	strh	r3, [r7, #10]
 800363a:	4613      	mov	r3, r2
 800363c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800363e:	897b      	ldrh	r3, [r7, #10]
 8003640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003644:	b29b      	uxth	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d008      	beq.n	800365c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800364a:	897b      	ldrh	r3, [r7, #10]
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	015b      	lsls	r3, r3, #5
 8003652:	3328      	adds	r3, #40	; 0x28
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4413      	add	r3, r2
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	e006      	b.n	800366a <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800365c:	897b      	ldrh	r3, [r7, #10]
 800365e:	015b      	lsls	r3, r3, #5
 8003660:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4413      	add	r3, r2
 8003668:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800366a:	893b      	ldrh	r3, [r7, #8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d107      	bne.n	8003680 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2200      	movs	r2, #0
 8003674:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	b29a      	uxth	r2, r3
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	80da      	strh	r2, [r3, #6]
 800367e:	e00b      	b.n	8003698 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	2201      	movs	r2, #1
 8003684:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	b29a      	uxth	r2, r3
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	0c1b      	lsrs	r3, r3, #16
 8003692:	b29a      	uxth	r2, r3
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	371c      	adds	r7, #28
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b085      	sub	sp, #20
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	f043 0301 	orr.w	r3, r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80036de:	b29b      	uxth	r3, r3
 80036e0:	f043 0302 	orr.w	r3, r3, #2
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
	...

080036fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003700:	4b04      	ldr	r3, [pc, #16]	; (8003714 <HAL_PWREx_GetVoltageRange+0x18>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003708:	4618      	mov	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	40007000 	.word	0x40007000

08003718 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003726:	d130      	bne.n	800378a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003728:	4b23      	ldr	r3, [pc, #140]	; (80037b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003734:	d038      	beq.n	80037a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003736:	4b20      	ldr	r3, [pc, #128]	; (80037b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800373e:	4a1e      	ldr	r2, [pc, #120]	; (80037b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003740:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003744:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003746:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2232      	movs	r2, #50	; 0x32
 800374c:	fb02 f303 	mul.w	r3, r2, r3
 8003750:	4a1b      	ldr	r2, [pc, #108]	; (80037c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003752:	fba2 2303 	umull	r2, r3, r2, r3
 8003756:	0c9b      	lsrs	r3, r3, #18
 8003758:	3301      	adds	r3, #1
 800375a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800375c:	e002      	b.n	8003764 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	3b01      	subs	r3, #1
 8003762:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003764:	4b14      	ldr	r3, [pc, #80]	; (80037b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800376c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003770:	d102      	bne.n	8003778 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1f2      	bne.n	800375e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003778:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003784:	d110      	bne.n	80037a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e00f      	b.n	80037aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800378a:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003796:	d007      	beq.n	80037a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003798:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037a0:	4a05      	ldr	r2, [pc, #20]	; (80037b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40007000 	.word	0x40007000
 80037bc:	20000000 	.word	0x20000000
 80037c0:	431bde83 	.word	0x431bde83

080037c4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	4a04      	ldr	r2, [pc, #16]	; (80037e0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80037ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037d2:	6053      	str	r3, [r2, #4]
}
 80037d4:	bf00      	nop
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40007000 	.word	0x40007000

080037e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08a      	sub	sp, #40	; 0x28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d102      	bne.n	80037f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	f000 bc56 	b.w	80040a4 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037f8:	4ba1      	ldr	r3, [pc, #644]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 030c 	and.w	r3, r3, #12
 8003800:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003802:	4b9f      	ldr	r3, [pc, #636]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0310 	and.w	r3, r3, #16
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 80e6 	beq.w	80039e6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d007      	beq.n	8003830 <HAL_RCC_OscConfig+0x4c>
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	2b0c      	cmp	r3, #12
 8003824:	f040 808d 	bne.w	8003942 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	2b01      	cmp	r3, #1
 800382c:	f040 8089 	bne.w	8003942 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003830:	4b93      	ldr	r3, [pc, #588]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d006      	beq.n	800384a <HAL_RCC_OscConfig+0x66>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d102      	bne.n	800384a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	f000 bc2d 	b.w	80040a4 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800384e:	4b8c      	ldr	r3, [pc, #560]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d004      	beq.n	8003864 <HAL_RCC_OscConfig+0x80>
 800385a:	4b89      	ldr	r3, [pc, #548]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003862:	e005      	b.n	8003870 <HAL_RCC_OscConfig+0x8c>
 8003864:	4b86      	ldr	r3, [pc, #536]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 8003866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800386a:	091b      	lsrs	r3, r3, #4
 800386c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003870:	4293      	cmp	r3, r2
 8003872:	d224      	bcs.n	80038be <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fdbd 	bl	80043f8 <RCC_SetFlashLatencyFromMSIRange>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	f000 bc0d 	b.w	80040a4 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800388a:	4b7d      	ldr	r3, [pc, #500]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a7c      	ldr	r2, [pc, #496]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 8003890:	f043 0308 	orr.w	r3, r3, #8
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	4b7a      	ldr	r3, [pc, #488]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	4977      	ldr	r1, [pc, #476]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038a8:	4b75      	ldr	r3, [pc, #468]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	021b      	lsls	r3, r3, #8
 80038b6:	4972      	ldr	r1, [pc, #456]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]
 80038bc:	e025      	b.n	800390a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038be:	4b70      	ldr	r3, [pc, #448]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a6f      	ldr	r2, [pc, #444]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 80038c4:	f043 0308 	orr.w	r3, r3, #8
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	4b6d      	ldr	r3, [pc, #436]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	496a      	ldr	r1, [pc, #424]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038dc:	4b68      	ldr	r3, [pc, #416]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	021b      	lsls	r3, r3, #8
 80038ea:	4965      	ldr	r1, [pc, #404]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 fd7c 	bl	80043f8 <RCC_SetFlashLatencyFromMSIRange>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e3cc      	b.n	80040a4 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800390a:	f000 fcb3 	bl	8004274 <HAL_RCC_GetSysClockFreq>
 800390e:	4601      	mov	r1, r0
 8003910:	4b5b      	ldr	r3, [pc, #364]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	091b      	lsrs	r3, r3, #4
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	4a5a      	ldr	r2, [pc, #360]	; (8003a84 <HAL_RCC_OscConfig+0x2a0>)
 800391c:	5cd3      	ldrb	r3, [r2, r3]
 800391e:	f003 031f 	and.w	r3, r3, #31
 8003922:	fa21 f303 	lsr.w	r3, r1, r3
 8003926:	4a58      	ldr	r2, [pc, #352]	; (8003a88 <HAL_RCC_OscConfig+0x2a4>)
 8003928:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800392a:	4b58      	ldr	r3, [pc, #352]	; (8003a8c <HAL_RCC_OscConfig+0x2a8>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f7fe fb0c 	bl	8001f4c <HAL_InitTick>
 8003934:	4603      	mov	r3, r0
 8003936:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003938:	7dfb      	ldrb	r3, [r7, #23]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d052      	beq.n	80039e4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800393e:	7dfb      	ldrb	r3, [r7, #23]
 8003940:	e3b0      	b.n	80040a4 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d032      	beq.n	80039b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800394a:	4b4d      	ldr	r3, [pc, #308]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a4c      	ldr	r2, [pc, #304]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003956:	f7fe fb45 	bl	8001fe4 <HAL_GetTick>
 800395a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800395e:	f7fe fb41 	bl	8001fe4 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e399      	b.n	80040a4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003970:	4b43      	ldr	r3, [pc, #268]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0f0      	beq.n	800395e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800397c:	4b40      	ldr	r3, [pc, #256]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a3f      	ldr	r2, [pc, #252]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 8003982:	f043 0308 	orr.w	r3, r3, #8
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	4b3d      	ldr	r3, [pc, #244]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	493a      	ldr	r1, [pc, #232]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 8003996:	4313      	orrs	r3, r2
 8003998:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800399a:	4b39      	ldr	r3, [pc, #228]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	021b      	lsls	r3, r3, #8
 80039a8:	4935      	ldr	r1, [pc, #212]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	604b      	str	r3, [r1, #4]
 80039ae:	e01a      	b.n	80039e6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039b0:	4b33      	ldr	r3, [pc, #204]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a32      	ldr	r2, [pc, #200]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 80039b6:	f023 0301 	bic.w	r3, r3, #1
 80039ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039bc:	f7fe fb12 	bl	8001fe4 <HAL_GetTick>
 80039c0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039c4:	f7fe fb0e 	bl	8001fe4 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e366      	b.n	80040a4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039d6:	4b2a      	ldr	r3, [pc, #168]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x1e0>
 80039e2:	e000      	b.n	80039e6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d073      	beq.n	8003ada <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d005      	beq.n	8003a04 <HAL_RCC_OscConfig+0x220>
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	2b0c      	cmp	r3, #12
 80039fc:	d10e      	bne.n	8003a1c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d10b      	bne.n	8003a1c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a04:	4b1e      	ldr	r3, [pc, #120]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d063      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x2f4>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d15f      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e343      	b.n	80040a4 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a24:	d106      	bne.n	8003a34 <HAL_RCC_OscConfig+0x250>
 8003a26:	4b16      	ldr	r3, [pc, #88]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a15      	ldr	r2, [pc, #84]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 8003a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	e01d      	b.n	8003a70 <HAL_RCC_OscConfig+0x28c>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a3c:	d10c      	bne.n	8003a58 <HAL_RCC_OscConfig+0x274>
 8003a3e:	4b10      	ldr	r3, [pc, #64]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a0f      	ldr	r2, [pc, #60]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 8003a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	4b0d      	ldr	r3, [pc, #52]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a0c      	ldr	r2, [pc, #48]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 8003a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	e00b      	b.n	8003a70 <HAL_RCC_OscConfig+0x28c>
 8003a58:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a08      	ldr	r2, [pc, #32]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 8003a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a05      	ldr	r2, [pc, #20]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 8003a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d01b      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a78:	f7fe fab4 	bl	8001fe4 <HAL_GetTick>
 8003a7c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a7e:	e010      	b.n	8003aa2 <HAL_RCC_OscConfig+0x2be>
 8003a80:	40021000 	.word	0x40021000
 8003a84:	080097d8 	.word	0x080097d8
 8003a88:	20000000 	.word	0x20000000
 8003a8c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a90:	f7fe faa8 	bl	8001fe4 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b64      	cmp	r3, #100	; 0x64
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e300      	b.n	80040a4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aa2:	4ba0      	ldr	r3, [pc, #640]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0f0      	beq.n	8003a90 <HAL_RCC_OscConfig+0x2ac>
 8003aae:	e014      	b.n	8003ada <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab0:	f7fe fa98 	bl	8001fe4 <HAL_GetTick>
 8003ab4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ab8:	f7fe fa94 	bl	8001fe4 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b64      	cmp	r3, #100	; 0x64
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e2ec      	b.n	80040a4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003aca:	4b96      	ldr	r3, [pc, #600]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f0      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x2d4>
 8003ad6:	e000      	b.n	8003ada <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d060      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d005      	beq.n	8003af8 <HAL_RCC_OscConfig+0x314>
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	2b0c      	cmp	r3, #12
 8003af0:	d119      	bne.n	8003b26 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d116      	bne.n	8003b26 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003af8:	4b8a      	ldr	r3, [pc, #552]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <HAL_RCC_OscConfig+0x32c>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e2c9      	b.n	80040a4 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b10:	4b84      	ldr	r3, [pc, #528]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	061b      	lsls	r3, r3, #24
 8003b1e:	4981      	ldr	r1, [pc, #516]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b24:	e040      	b.n	8003ba8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d023      	beq.n	8003b76 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b2e:	4b7d      	ldr	r3, [pc, #500]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a7c      	ldr	r2, [pc, #496]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3a:	f7fe fa53 	bl	8001fe4 <HAL_GetTick>
 8003b3e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b42:	f7fe fa4f 	bl	8001fe4 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e2a7      	b.n	80040a4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b54:	4b73      	ldr	r3, [pc, #460]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0f0      	beq.n	8003b42 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b60:	4b70      	ldr	r3, [pc, #448]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	061b      	lsls	r3, r3, #24
 8003b6e:	496d      	ldr	r1, [pc, #436]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	604b      	str	r3, [r1, #4]
 8003b74:	e018      	b.n	8003ba8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b76:	4b6b      	ldr	r3, [pc, #428]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a6a      	ldr	r2, [pc, #424]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b82:	f7fe fa2f 	bl	8001fe4 <HAL_GetTick>
 8003b86:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b8a:	f7fe fa2b 	bl	8001fe4 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e283      	b.n	80040a4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b9c:	4b61      	ldr	r3, [pc, #388]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1f0      	bne.n	8003b8a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d07f      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d05f      	beq.n	8003c7c <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003bbc:	4b59      	ldr	r3, [pc, #356]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc2:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699a      	ldr	r2, [r3, #24]
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f003 0310 	and.w	r3, r3, #16
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d037      	beq.n	8003c42 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d006      	beq.n	8003bea <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e25c      	b.n	80040a4 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d01b      	beq.n	8003c2c <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8003bf4:	4b4b      	ldr	r3, [pc, #300]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bfa:	4a4a      	ldr	r2, [pc, #296]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003bfc:	f023 0301 	bic.w	r3, r3, #1
 8003c00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c04:	f7fe f9ee 	bl	8001fe4 <HAL_GetTick>
 8003c08:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c0c:	f7fe f9ea 	bl	8001fe4 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b11      	cmp	r3, #17
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e242      	b.n	80040a4 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c1e:	4b41      	ldr	r3, [pc, #260]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1ef      	bne.n	8003c0c <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003c2c:	4b3d      	ldr	r3, [pc, #244]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c32:	f023 0210 	bic.w	r2, r3, #16
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	493a      	ldr	r1, [pc, #232]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c42:	4b38      	ldr	r3, [pc, #224]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003c44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c48:	4a36      	ldr	r2, [pc, #216]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c52:	f7fe f9c7 	bl	8001fe4 <HAL_GetTick>
 8003c56:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c5a:	f7fe f9c3 	bl	8001fe4 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b11      	cmp	r3, #17
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e21b      	b.n	80040a4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c6c:	4b2d      	ldr	r3, [pc, #180]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0ef      	beq.n	8003c5a <HAL_RCC_OscConfig+0x476>
 8003c7a:	e01b      	b.n	8003cb4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c7c:	4b29      	ldr	r3, [pc, #164]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c82:	4a28      	ldr	r2, [pc, #160]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003c84:	f023 0301 	bic.w	r3, r3, #1
 8003c88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8c:	f7fe f9aa 	bl	8001fe4 <HAL_GetTick>
 8003c90:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c94:	f7fe f9a6 	bl	8001fe4 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b11      	cmp	r3, #17
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e1fe      	b.n	80040a4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ca6:	4b1f      	ldr	r3, [pc, #124]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1ef      	bne.n	8003c94 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 80c1 	beq.w	8003e44 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003cc8:	4b16      	ldr	r3, [pc, #88]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10e      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cd4:	4b13      	ldr	r3, [pc, #76]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd8:	4a12      	ldr	r2, [pc, #72]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cde:	6593      	str	r3, [r2, #88]	; 0x58
 8003ce0:	4b10      	ldr	r3, [pc, #64]	; (8003d24 <HAL_RCC_OscConfig+0x540>)
 8003ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003cec:	2301      	movs	r3, #1
 8003cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cf2:	4b0d      	ldr	r3, [pc, #52]	; (8003d28 <HAL_RCC_OscConfig+0x544>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d11c      	bne.n	8003d38 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cfe:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <HAL_RCC_OscConfig+0x544>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a09      	ldr	r2, [pc, #36]	; (8003d28 <HAL_RCC_OscConfig+0x544>)
 8003d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d0a:	f7fe f96b 	bl	8001fe4 <HAL_GetTick>
 8003d0e:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d10:	e00c      	b.n	8003d2c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d12:	f7fe f967 	bl	8001fe4 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d905      	bls.n	8003d2c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e1bf      	b.n	80040a4 <HAL_RCC_OscConfig+0x8c0>
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d2c:	4bb1      	ldr	r3, [pc, #708]	; (8003ff4 <HAL_RCC_OscConfig+0x810>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0ec      	beq.n	8003d12 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d02c      	beq.n	8003d9e <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003d44:	4bac      	ldr	r3, [pc, #688]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d56:	49a8      	ldr	r1, [pc, #672]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d010      	beq.n	8003d8c <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d6a:	4ba3      	ldr	r3, [pc, #652]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d70:	4aa1      	ldr	r2, [pc, #644]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003d72:	f043 0304 	orr.w	r3, r3, #4
 8003d76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d7a:	4b9f      	ldr	r3, [pc, #636]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d80:	4a9d      	ldr	r2, [pc, #628]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003d82:	f043 0301 	orr.w	r3, r3, #1
 8003d86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d8a:	e018      	b.n	8003dbe <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d8c:	4b9a      	ldr	r3, [pc, #616]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d92:	4a99      	ldr	r2, [pc, #612]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003d94:	f043 0301 	orr.w	r3, r3, #1
 8003d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d9c:	e00f      	b.n	8003dbe <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d9e:	4b96      	ldr	r3, [pc, #600]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da4:	4a94      	ldr	r2, [pc, #592]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003da6:	f023 0301 	bic.w	r3, r3, #1
 8003daa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003dae:	4b92      	ldr	r3, [pc, #584]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db4:	4a90      	ldr	r2, [pc, #576]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003db6:	f023 0304 	bic.w	r3, r3, #4
 8003dba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d016      	beq.n	8003df4 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc6:	f7fe f90d 	bl	8001fe4 <HAL_GetTick>
 8003dca:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dcc:	e00a      	b.n	8003de4 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dce:	f7fe f909 	bl	8001fe4 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e15f      	b.n	80040a4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003de4:	4b84      	ldr	r3, [pc, #528]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0ed      	beq.n	8003dce <HAL_RCC_OscConfig+0x5ea>
 8003df2:	e01d      	b.n	8003e30 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df4:	f7fe f8f6 	bl	8001fe4 <HAL_GetTick>
 8003df8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dfa:	e00a      	b.n	8003e12 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfc:	f7fe f8f2 	bl	8001fe4 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e148      	b.n	80040a4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e12:	4b79      	ldr	r3, [pc, #484]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1ed      	bne.n	8003dfc <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003e20:	4b75      	ldr	r3, [pc, #468]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e26:	4a74      	ldr	r2, [pc, #464]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003e28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d105      	bne.n	8003e44 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e38:	4b6f      	ldr	r3, [pc, #444]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3c:	4a6e      	ldr	r2, [pc, #440]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003e3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e42:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0320 	and.w	r3, r3, #32
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d03c      	beq.n	8003eca <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01c      	beq.n	8003e92 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e58:	4b67      	ldr	r3, [pc, #412]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003e5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e5e:	4a66      	ldr	r2, [pc, #408]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003e60:	f043 0301 	orr.w	r3, r3, #1
 8003e64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e68:	f7fe f8bc 	bl	8001fe4 <HAL_GetTick>
 8003e6c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e70:	f7fe f8b8 	bl	8001fe4 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e110      	b.n	80040a4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e82:	4b5d      	ldr	r3, [pc, #372]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003e84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0ef      	beq.n	8003e70 <HAL_RCC_OscConfig+0x68c>
 8003e90:	e01b      	b.n	8003eca <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e92:	4b59      	ldr	r3, [pc, #356]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003e94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e98:	4a57      	ldr	r2, [pc, #348]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003e9a:	f023 0301 	bic.w	r3, r3, #1
 8003e9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea2:	f7fe f89f 	bl	8001fe4 <HAL_GetTick>
 8003ea6:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003eaa:	f7fe f89b 	bl	8001fe4 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e0f3      	b.n	80040a4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ebc:	4b4e      	ldr	r3, [pc, #312]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003ebe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1ef      	bne.n	8003eaa <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 80e7 	beq.w	80040a2 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	f040 80b7 	bne.w	800404c <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ede:	4b46      	ldr	r3, [pc, #280]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	f003 0203 	and.w	r2, r3, #3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d124      	bne.n	8003f3c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efc:	3b01      	subs	r3, #1
 8003efe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d11b      	bne.n	8003f3c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d113      	bne.n	8003f3c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1e:	085b      	lsrs	r3, r3, #1
 8003f20:	3b01      	subs	r3, #1
 8003f22:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d109      	bne.n	8003f3c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	085b      	lsrs	r3, r3, #1
 8003f34:	3b01      	subs	r3, #1
 8003f36:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d061      	beq.n	8004000 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	2b0c      	cmp	r3, #12
 8003f40:	d056      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f42:	4b2d      	ldr	r3, [pc, #180]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a2c      	ldr	r2, [pc, #176]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003f48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f4c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f4e:	f7fe f849 	bl	8001fe4 <HAL_GetTick>
 8003f52:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f56:	f7fe f845 	bl	8001fe4 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e09d      	b.n	80040a4 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f68:	4b23      	ldr	r3, [pc, #140]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1f0      	bne.n	8003f56 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f74:	4b20      	ldr	r3, [pc, #128]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <HAL_RCC_OscConfig+0x818>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f84:	3a01      	subs	r2, #1
 8003f86:	0112      	lsls	r2, r2, #4
 8003f88:	4311      	orrs	r1, r2
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f8e:	0212      	lsls	r2, r2, #8
 8003f90:	4311      	orrs	r1, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f96:	0852      	lsrs	r2, r2, #1
 8003f98:	3a01      	subs	r2, #1
 8003f9a:	0552      	lsls	r2, r2, #21
 8003f9c:	4311      	orrs	r1, r2
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003fa2:	0852      	lsrs	r2, r2, #1
 8003fa4:	3a01      	subs	r2, #1
 8003fa6:	0652      	lsls	r2, r2, #25
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	4913      	ldr	r1, [pc, #76]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fb0:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a10      	ldr	r2, [pc, #64]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fbc:	4b0e      	ldr	r3, [pc, #56]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	4a0d      	ldr	r2, [pc, #52]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003fc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fc8:	f7fe f80c 	bl	8001fe4 <HAL_GetTick>
 8003fcc:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd0:	f7fe f808 	bl	8001fe4 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e060      	b.n	80040a4 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fe2:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <HAL_RCC_OscConfig+0x814>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fee:	e058      	b.n	80040a2 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e057      	b.n	80040a4 <HAL_RCC_OscConfig+0x8c0>
 8003ff4:	40007000 	.word	0x40007000
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004000:	4b2a      	ldr	r3, [pc, #168]	; (80040ac <HAL_RCC_OscConfig+0x8c8>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d14a      	bne.n	80040a2 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800400c:	4b27      	ldr	r3, [pc, #156]	; (80040ac <HAL_RCC_OscConfig+0x8c8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a26      	ldr	r2, [pc, #152]	; (80040ac <HAL_RCC_OscConfig+0x8c8>)
 8004012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004016:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004018:	4b24      	ldr	r3, [pc, #144]	; (80040ac <HAL_RCC_OscConfig+0x8c8>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	4a23      	ldr	r2, [pc, #140]	; (80040ac <HAL_RCC_OscConfig+0x8c8>)
 800401e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004022:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004024:	f7fd ffde 	bl	8001fe4 <HAL_GetTick>
 8004028:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402c:	f7fd ffda 	bl	8001fe4 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e032      	b.n	80040a4 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800403e:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <HAL_RCC_OscConfig+0x8c8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0x848>
 800404a:	e02a      	b.n	80040a2 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	2b0c      	cmp	r3, #12
 8004050:	d025      	beq.n	800409e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004052:	4b16      	ldr	r3, [pc, #88]	; (80040ac <HAL_RCC_OscConfig+0x8c8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a15      	ldr	r2, [pc, #84]	; (80040ac <HAL_RCC_OscConfig+0x8c8>)
 8004058:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800405c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800405e:	4b13      	ldr	r3, [pc, #76]	; (80040ac <HAL_RCC_OscConfig+0x8c8>)
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	4a12      	ldr	r2, [pc, #72]	; (80040ac <HAL_RCC_OscConfig+0x8c8>)
 8004064:	f023 0303 	bic.w	r3, r3, #3
 8004068:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800406a:	4b10      	ldr	r3, [pc, #64]	; (80040ac <HAL_RCC_OscConfig+0x8c8>)
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	4a0f      	ldr	r2, [pc, #60]	; (80040ac <HAL_RCC_OscConfig+0x8c8>)
 8004070:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004074:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004076:	f7fd ffb5 	bl	8001fe4 <HAL_GetTick>
 800407a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800407e:	f7fd ffb1 	bl	8001fe4 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e009      	b.n	80040a4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004090:	4b06      	ldr	r3, [pc, #24]	; (80040ac <HAL_RCC_OscConfig+0x8c8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1f0      	bne.n	800407e <HAL_RCC_OscConfig+0x89a>
 800409c:	e001      	b.n	80040a2 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3728      	adds	r7, #40	; 0x28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40021000 	.word	0x40021000

080040b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e0c8      	b.n	8004256 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040c4:	4b66      	ldr	r3, [pc, #408]	; (8004260 <HAL_RCC_ClockConfig+0x1b0>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d910      	bls.n	80040f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d2:	4b63      	ldr	r3, [pc, #396]	; (8004260 <HAL_RCC_ClockConfig+0x1b0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 0207 	bic.w	r2, r3, #7
 80040da:	4961      	ldr	r1, [pc, #388]	; (8004260 <HAL_RCC_ClockConfig+0x1b0>)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	4313      	orrs	r3, r2
 80040e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e2:	4b5f      	ldr	r3, [pc, #380]	; (8004260 <HAL_RCC_ClockConfig+0x1b0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d001      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e0b0      	b.n	8004256 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d04c      	beq.n	800419a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b03      	cmp	r3, #3
 8004106:	d107      	bne.n	8004118 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004108:	4b56      	ldr	r3, [pc, #344]	; (8004264 <HAL_RCC_ClockConfig+0x1b4>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d121      	bne.n	8004158 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e09e      	b.n	8004256 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b02      	cmp	r3, #2
 800411e:	d107      	bne.n	8004130 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004120:	4b50      	ldr	r3, [pc, #320]	; (8004264 <HAL_RCC_ClockConfig+0x1b4>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d115      	bne.n	8004158 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e092      	b.n	8004256 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d107      	bne.n	8004148 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004138:	4b4a      	ldr	r3, [pc, #296]	; (8004264 <HAL_RCC_ClockConfig+0x1b4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d109      	bne.n	8004158 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e086      	b.n	8004256 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004148:	4b46      	ldr	r3, [pc, #280]	; (8004264 <HAL_RCC_ClockConfig+0x1b4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e07e      	b.n	8004256 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004158:	4b42      	ldr	r3, [pc, #264]	; (8004264 <HAL_RCC_ClockConfig+0x1b4>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f023 0203 	bic.w	r2, r3, #3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	493f      	ldr	r1, [pc, #252]	; (8004264 <HAL_RCC_ClockConfig+0x1b4>)
 8004166:	4313      	orrs	r3, r2
 8004168:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800416a:	f7fd ff3b 	bl	8001fe4 <HAL_GetTick>
 800416e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004170:	e00a      	b.n	8004188 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004172:	f7fd ff37 	bl	8001fe4 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004180:	4293      	cmp	r3, r2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e066      	b.n	8004256 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004188:	4b36      	ldr	r3, [pc, #216]	; (8004264 <HAL_RCC_ClockConfig+0x1b4>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 020c 	and.w	r2, r3, #12
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	429a      	cmp	r2, r3
 8004198:	d1eb      	bne.n	8004172 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d008      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a6:	4b2f      	ldr	r3, [pc, #188]	; (8004264 <HAL_RCC_ClockConfig+0x1b4>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	492c      	ldr	r1, [pc, #176]	; (8004264 <HAL_RCC_ClockConfig+0x1b4>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041b8:	4b29      	ldr	r3, [pc, #164]	; (8004260 <HAL_RCC_ClockConfig+0x1b0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d210      	bcs.n	80041e8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c6:	4b26      	ldr	r3, [pc, #152]	; (8004260 <HAL_RCC_ClockConfig+0x1b0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f023 0207 	bic.w	r2, r3, #7
 80041ce:	4924      	ldr	r1, [pc, #144]	; (8004260 <HAL_RCC_ClockConfig+0x1b0>)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d6:	4b22      	ldr	r3, [pc, #136]	; (8004260 <HAL_RCC_ClockConfig+0x1b0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d001      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e036      	b.n	8004256 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d008      	beq.n	8004206 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041f4:	4b1b      	ldr	r3, [pc, #108]	; (8004264 <HAL_RCC_ClockConfig+0x1b4>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4918      	ldr	r1, [pc, #96]	; (8004264 <HAL_RCC_ClockConfig+0x1b4>)
 8004202:	4313      	orrs	r3, r2
 8004204:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b00      	cmp	r3, #0
 8004210:	d009      	beq.n	8004226 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004212:	4b14      	ldr	r3, [pc, #80]	; (8004264 <HAL_RCC_ClockConfig+0x1b4>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	4910      	ldr	r1, [pc, #64]	; (8004264 <HAL_RCC_ClockConfig+0x1b4>)
 8004222:	4313      	orrs	r3, r2
 8004224:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004226:	f000 f825 	bl	8004274 <HAL_RCC_GetSysClockFreq>
 800422a:	4601      	mov	r1, r0
 800422c:	4b0d      	ldr	r3, [pc, #52]	; (8004264 <HAL_RCC_ClockConfig+0x1b4>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	091b      	lsrs	r3, r3, #4
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	4a0c      	ldr	r2, [pc, #48]	; (8004268 <HAL_RCC_ClockConfig+0x1b8>)
 8004238:	5cd3      	ldrb	r3, [r2, r3]
 800423a:	f003 031f 	and.w	r3, r3, #31
 800423e:	fa21 f303 	lsr.w	r3, r1, r3
 8004242:	4a0a      	ldr	r2, [pc, #40]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004246:	4b0a      	ldr	r3, [pc, #40]	; (8004270 <HAL_RCC_ClockConfig+0x1c0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f7fd fe7e 	bl	8001f4c <HAL_InitTick>
 8004250:	4603      	mov	r3, r0
 8004252:	72fb      	strb	r3, [r7, #11]

  return status;
 8004254:	7afb      	ldrb	r3, [r7, #11]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40022000 	.word	0x40022000
 8004264:	40021000 	.word	0x40021000
 8004268:	080097d8 	.word	0x080097d8
 800426c:	20000000 	.word	0x20000000
 8004270:	20000004 	.word	0x20000004

08004274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004274:	b480      	push	{r7}
 8004276:	b089      	sub	sp, #36	; 0x24
 8004278:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	61fb      	str	r3, [r7, #28]
 800427e:	2300      	movs	r3, #0
 8004280:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004282:	4b3d      	ldr	r3, [pc, #244]	; (8004378 <HAL_RCC_GetSysClockFreq+0x104>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 030c 	and.w	r3, r3, #12
 800428a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800428c:	4b3a      	ldr	r3, [pc, #232]	; (8004378 <HAL_RCC_GetSysClockFreq+0x104>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f003 0303 	and.w	r3, r3, #3
 8004294:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d005      	beq.n	80042a8 <HAL_RCC_GetSysClockFreq+0x34>
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	2b0c      	cmp	r3, #12
 80042a0:	d121      	bne.n	80042e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d11e      	bne.n	80042e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042a8:	4b33      	ldr	r3, [pc, #204]	; (8004378 <HAL_RCC_GetSysClockFreq+0x104>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0308 	and.w	r3, r3, #8
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d107      	bne.n	80042c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042b4:	4b30      	ldr	r3, [pc, #192]	; (8004378 <HAL_RCC_GetSysClockFreq+0x104>)
 80042b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ba:	0a1b      	lsrs	r3, r3, #8
 80042bc:	f003 030f 	and.w	r3, r3, #15
 80042c0:	61fb      	str	r3, [r7, #28]
 80042c2:	e005      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042c4:	4b2c      	ldr	r3, [pc, #176]	; (8004378 <HAL_RCC_GetSysClockFreq+0x104>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	091b      	lsrs	r3, r3, #4
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042d0:	4a2a      	ldr	r2, [pc, #168]	; (800437c <HAL_RCC_GetSysClockFreq+0x108>)
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10d      	bne.n	80042fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042e4:	e00a      	b.n	80042fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d102      	bne.n	80042f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042ec:	4b24      	ldr	r3, [pc, #144]	; (8004380 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042ee:	61bb      	str	r3, [r7, #24]
 80042f0:	e004      	b.n	80042fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d101      	bne.n	80042fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042f8:	4b22      	ldr	r3, [pc, #136]	; (8004384 <HAL_RCC_GetSysClockFreq+0x110>)
 80042fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	2b0c      	cmp	r3, #12
 8004300:	d133      	bne.n	800436a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004302:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <HAL_RCC_GetSysClockFreq+0x104>)
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f003 0303 	and.w	r3, r3, #3
 800430a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b02      	cmp	r3, #2
 8004310:	d002      	beq.n	8004318 <HAL_RCC_GetSysClockFreq+0xa4>
 8004312:	2b03      	cmp	r3, #3
 8004314:	d003      	beq.n	800431e <HAL_RCC_GetSysClockFreq+0xaa>
 8004316:	e005      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004318:	4b19      	ldr	r3, [pc, #100]	; (8004380 <HAL_RCC_GetSysClockFreq+0x10c>)
 800431a:	617b      	str	r3, [r7, #20]
      break;
 800431c:	e005      	b.n	800432a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800431e:	4b19      	ldr	r3, [pc, #100]	; (8004384 <HAL_RCC_GetSysClockFreq+0x110>)
 8004320:	617b      	str	r3, [r7, #20]
      break;
 8004322:	e002      	b.n	800432a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	617b      	str	r3, [r7, #20]
      break;
 8004328:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800432a:	4b13      	ldr	r3, [pc, #76]	; (8004378 <HAL_RCC_GetSysClockFreq+0x104>)
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	091b      	lsrs	r3, r3, #4
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	3301      	adds	r3, #1
 8004336:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004338:	4b0f      	ldr	r3, [pc, #60]	; (8004378 <HAL_RCC_GetSysClockFreq+0x104>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	0a1b      	lsrs	r3, r3, #8
 800433e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	fb02 f203 	mul.w	r2, r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	fbb2 f3f3 	udiv	r3, r2, r3
 800434e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004350:	4b09      	ldr	r3, [pc, #36]	; (8004378 <HAL_RCC_GetSysClockFreq+0x104>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	0e5b      	lsrs	r3, r3, #25
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	3301      	adds	r3, #1
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	fbb2 f3f3 	udiv	r3, r2, r3
 8004368:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800436a:	69bb      	ldr	r3, [r7, #24]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3724      	adds	r7, #36	; 0x24
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	40021000 	.word	0x40021000
 800437c:	080097f0 	.word	0x080097f0
 8004380:	00f42400 	.word	0x00f42400
 8004384:	007a1200 	.word	0x007a1200

08004388 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800438c:	4b03      	ldr	r3, [pc, #12]	; (800439c <HAL_RCC_GetHCLKFreq+0x14>)
 800438e:	681b      	ldr	r3, [r3, #0]
}
 8004390:	4618      	mov	r0, r3
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	20000000 	.word	0x20000000

080043a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043a4:	f7ff fff0 	bl	8004388 <HAL_RCC_GetHCLKFreq>
 80043a8:	4601      	mov	r1, r0
 80043aa:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	0a1b      	lsrs	r3, r3, #8
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	4a04      	ldr	r2, [pc, #16]	; (80043c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043b6:	5cd3      	ldrb	r3, [r2, r3]
 80043b8:	f003 031f 	and.w	r3, r3, #31
 80043bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40021000 	.word	0x40021000
 80043c8:	080097e8 	.word	0x080097e8

080043cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043d0:	f7ff ffda 	bl	8004388 <HAL_RCC_GetHCLKFreq>
 80043d4:	4601      	mov	r1, r0
 80043d6:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	0adb      	lsrs	r3, r3, #11
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	4a04      	ldr	r2, [pc, #16]	; (80043f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80043e2:	5cd3      	ldrb	r3, [r2, r3]
 80043e4:	f003 031f 	and.w	r3, r3, #31
 80043e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40021000 	.word	0x40021000
 80043f4:	080097e8 	.word	0x080097e8

080043f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004400:	2300      	movs	r3, #0
 8004402:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004404:	4b2a      	ldr	r3, [pc, #168]	; (80044b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004410:	f7ff f974 	bl	80036fc <HAL_PWREx_GetVoltageRange>
 8004414:	6178      	str	r0, [r7, #20]
 8004416:	e014      	b.n	8004442 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004418:	4b25      	ldr	r3, [pc, #148]	; (80044b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800441a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441c:	4a24      	ldr	r2, [pc, #144]	; (80044b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800441e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004422:	6593      	str	r3, [r2, #88]	; 0x58
 8004424:	4b22      	ldr	r3, [pc, #136]	; (80044b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004430:	f7ff f964 	bl	80036fc <HAL_PWREx_GetVoltageRange>
 8004434:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004436:	4b1e      	ldr	r3, [pc, #120]	; (80044b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443a:	4a1d      	ldr	r2, [pc, #116]	; (80044b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800443c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004440:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004448:	d10b      	bne.n	8004462 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b80      	cmp	r3, #128	; 0x80
 800444e:	d919      	bls.n	8004484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2ba0      	cmp	r3, #160	; 0xa0
 8004454:	d902      	bls.n	800445c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004456:	2302      	movs	r3, #2
 8004458:	613b      	str	r3, [r7, #16]
 800445a:	e013      	b.n	8004484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800445c:	2301      	movs	r3, #1
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	e010      	b.n	8004484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b80      	cmp	r3, #128	; 0x80
 8004466:	d902      	bls.n	800446e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004468:	2303      	movs	r3, #3
 800446a:	613b      	str	r3, [r7, #16]
 800446c:	e00a      	b.n	8004484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b80      	cmp	r3, #128	; 0x80
 8004472:	d102      	bne.n	800447a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004474:	2302      	movs	r3, #2
 8004476:	613b      	str	r3, [r7, #16]
 8004478:	e004      	b.n	8004484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b70      	cmp	r3, #112	; 0x70
 800447e:	d101      	bne.n	8004484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004480:	2301      	movs	r3, #1
 8004482:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004484:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f023 0207 	bic.w	r2, r3, #7
 800448c:	4909      	ldr	r1, [pc, #36]	; (80044b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	4313      	orrs	r3, r2
 8004492:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004494:	4b07      	ldr	r3, [pc, #28]	; (80044b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d001      	beq.n	80044a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e000      	b.n	80044a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40021000 	.word	0x40021000
 80044b4:	40022000 	.word	0x40022000

080044b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044c0:	2300      	movs	r3, #0
 80044c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044c4:	2300      	movs	r3, #0
 80044c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 809e 	beq.w	8004612 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044d6:	2300      	movs	r3, #0
 80044d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044da:	4b46      	ldr	r3, [pc, #280]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80044dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x32>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x34>
 80044ea:	2300      	movs	r3, #0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00d      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f0:	4b40      	ldr	r3, [pc, #256]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80044f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f4:	4a3f      	ldr	r2, [pc, #252]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80044f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044fa:	6593      	str	r3, [r2, #88]	; 0x58
 80044fc:	4b3d      	ldr	r3, [pc, #244]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80044fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004508:	2301      	movs	r3, #1
 800450a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800450c:	4b3a      	ldr	r3, [pc, #232]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a39      	ldr	r2, [pc, #228]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004516:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004518:	f7fd fd64 	bl	8001fe4 <HAL_GetTick>
 800451c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800451e:	e009      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004520:	f7fd fd60 	bl	8001fe4 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d902      	bls.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	74fb      	strb	r3, [r7, #19]
        break;
 8004532:	e005      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004534:	4b30      	ldr	r3, [pc, #192]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0ef      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8004540:	7cfb      	ldrb	r3, [r7, #19]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d15a      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004546:	4b2b      	ldr	r3, [pc, #172]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004550:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d01e      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	429a      	cmp	r2, r3
 8004560:	d019      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004562:	4b24      	ldr	r3, [pc, #144]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800456c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800456e:	4b21      	ldr	r3, [pc, #132]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004574:	4a1f      	ldr	r2, [pc, #124]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800457a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800457e:	4b1d      	ldr	r3, [pc, #116]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004584:	4a1b      	ldr	r2, [pc, #108]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800458a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800458e:	4a19      	ldr	r2, [pc, #100]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b00      	cmp	r3, #0
 800459e:	d016      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a0:	f7fd fd20 	bl	8001fe4 <HAL_GetTick>
 80045a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045a6:	e00b      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a8:	f7fd fd1c 	bl	8001fe4 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d902      	bls.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	74fb      	strb	r3, [r7, #19]
            break;
 80045be:	e006      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045c0:	4b0c      	ldr	r3, [pc, #48]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80045c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0ec      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80045ce:	7cfb      	ldrb	r3, [r7, #19]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10b      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045d4:	4b07      	ldr	r3, [pc, #28]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80045d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e2:	4904      	ldr	r1, [pc, #16]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80045ea:	e009      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045ec:	7cfb      	ldrb	r3, [r7, #19]
 80045ee:	74bb      	strb	r3, [r7, #18]
 80045f0:	e006      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80045f2:	bf00      	nop
 80045f4:	40021000 	.word	0x40021000
 80045f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045fc:	7cfb      	ldrb	r3, [r7, #19]
 80045fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004600:	7c7b      	ldrb	r3, [r7, #17]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d105      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004606:	4b6e      	ldr	r3, [pc, #440]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460a:	4a6d      	ldr	r2, [pc, #436]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800460c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004610:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800461e:	4b68      	ldr	r3, [pc, #416]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004624:	f023 0203 	bic.w	r2, r3, #3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	4964      	ldr	r1, [pc, #400]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00a      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004640:	4b5f      	ldr	r3, [pc, #380]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004646:	f023 020c 	bic.w	r2, r3, #12
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	495c      	ldr	r1, [pc, #368]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004650:	4313      	orrs	r3, r2
 8004652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0304 	and.w	r3, r3, #4
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004662:	4b57      	ldr	r3, [pc, #348]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004668:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	4953      	ldr	r1, [pc, #332]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004672:	4313      	orrs	r3, r2
 8004674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0320 	and.w	r3, r3, #32
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00a      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004684:	4b4e      	ldr	r3, [pc, #312]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	494b      	ldr	r1, [pc, #300]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046a6:	4b46      	ldr	r3, [pc, #280]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80046a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	4942      	ldr	r1, [pc, #264]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046c8:	4b3d      	ldr	r3, [pc, #244]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80046ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	493a      	ldr	r1, [pc, #232]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046ea:	4b35      	ldr	r3, [pc, #212]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80046ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	4931      	ldr	r1, [pc, #196]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800470c:	4b2c      	ldr	r3, [pc, #176]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800470e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004712:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	4929      	ldr	r1, [pc, #164]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800472e:	4b24      	ldr	r3, [pc, #144]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004734:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	4920      	ldr	r1, [pc, #128]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800473e:	4313      	orrs	r3, r2
 8004740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d015      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004750:	4b1b      	ldr	r3, [pc, #108]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004756:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475e:	4918      	ldr	r1, [pc, #96]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800476e:	d105      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004770:	4b13      	ldr	r3, [pc, #76]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	4a12      	ldr	r2, [pc, #72]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004776:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800477a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d015      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004788:	4b0d      	ldr	r3, [pc, #52]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	490a      	ldr	r1, [pc, #40]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047a6:	d105      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047a8:	4b05      	ldr	r3, [pc, #20]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	4a04      	ldr	r2, [pc, #16]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80047ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3718      	adds	r7, #24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40021000 	.word	0x40021000

080047c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e07c      	b.n	80048d0 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d106      	bne.n	80047f6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7fd fa11 	bl	8001c18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2202      	movs	r2, #2
 80047fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800480c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004816:	d902      	bls.n	800481e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004818:	2300      	movs	r3, #0
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	e002      	b.n	8004824 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800481e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004822:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800482c:	d007      	beq.n	800483e <HAL_SPI_Init+0x7a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004836:	d002      	beq.n	800483e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10b      	bne.n	800485e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800484e:	d903      	bls.n	8004858 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	631a      	str	r2, [r3, #48]	; 0x30
 8004856:	e002      	b.n	800485e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	431a      	orrs	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800487c:	431a      	orrs	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	ea42 0103 	orr.w	r1, r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	0c1b      	lsrs	r3, r3, #16
 800489e:	f003 0204 	and.w	r2, r3, #4
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ac:	431a      	orrs	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	ea42 0103 	orr.w	r1, r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	430a      	orrs	r2, r1
 80048be:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	4613      	mov	r3, r2
 80048e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048e8:	2300      	movs	r3, #0
 80048ea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <HAL_SPI_Transmit+0x22>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e150      	b.n	8004b9c <HAL_SPI_Transmit+0x2c4>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004902:	f7fd fb6f 	bl	8001fe4 <HAL_GetTick>
 8004906:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004908:	88fb      	ldrh	r3, [r7, #6]
 800490a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b01      	cmp	r3, #1
 8004916:	d002      	beq.n	800491e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004918:	2302      	movs	r3, #2
 800491a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800491c:	e135      	b.n	8004b8a <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <HAL_SPI_Transmit+0x52>
 8004924:	88fb      	ldrh	r3, [r7, #6]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d102      	bne.n	8004930 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800492e:	e12c      	b.n	8004b8a <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2203      	movs	r2, #3
 8004934:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	88fa      	ldrh	r2, [r7, #6]
 8004948:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	88fa      	ldrh	r2, [r7, #6]
 800494e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800497a:	d107      	bne.n	800498c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800498a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004996:	2b40      	cmp	r3, #64	; 0x40
 8004998:	d007      	beq.n	80049aa <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049b2:	d94b      	bls.n	8004a4c <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <HAL_SPI_Transmit+0xea>
 80049bc:	8afb      	ldrh	r3, [r7, #22]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d13e      	bne.n	8004a40 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c6:	881a      	ldrh	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d2:	1c9a      	adds	r2, r3, #2
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049e6:	e02b      	b.n	8004a40 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d112      	bne.n	8004a1c <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fa:	881a      	ldrh	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a06:	1c9a      	adds	r2, r3, #2
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a1a:	e011      	b.n	8004a40 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a1c:	f7fd fae2 	bl	8001fe4 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d803      	bhi.n	8004a34 <HAL_SPI_Transmit+0x15c>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a32:	d102      	bne.n	8004a3a <HAL_SPI_Transmit+0x162>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d102      	bne.n	8004a40 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a3e:	e0a4      	b.n	8004b8a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1ce      	bne.n	80049e8 <HAL_SPI_Transmit+0x110>
 8004a4a:	e07c      	b.n	8004b46 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d002      	beq.n	8004a5a <HAL_SPI_Transmit+0x182>
 8004a54:	8afb      	ldrh	r3, [r7, #22]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d170      	bne.n	8004b3c <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d912      	bls.n	8004a8a <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a68:	881a      	ldrh	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a74:	1c9a      	adds	r2, r3, #2
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b02      	subs	r3, #2
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a88:	e058      	b.n	8004b3c <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	330c      	adds	r3, #12
 8004a94:	7812      	ldrb	r2, [r2, #0]
 8004a96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004ab0:	e044      	b.n	8004b3c <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d12b      	bne.n	8004b18 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d912      	bls.n	8004af0 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ace:	881a      	ldrh	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ada:	1c9a      	adds	r2, r3, #2
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	3b02      	subs	r3, #2
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004aee:	e025      	b.n	8004b3c <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	330c      	adds	r3, #12
 8004afa:	7812      	ldrb	r2, [r2, #0]
 8004afc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b16:	e011      	b.n	8004b3c <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b18:	f7fd fa64 	bl	8001fe4 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d803      	bhi.n	8004b30 <HAL_SPI_Transmit+0x258>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2e:	d102      	bne.n	8004b36 <HAL_SPI_Transmit+0x25e>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d102      	bne.n	8004b3c <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b3a:	e026      	b.n	8004b8a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1b5      	bne.n	8004ab2 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	6839      	ldr	r1, [r7, #0]
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 fb14 	bl	8005178 <SPI_EndRxTxTransaction>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10a      	bne.n	8004b7a <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b64:	2300      	movs	r3, #0
 8004b66:	613b      	str	r3, [r7, #16]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	613b      	str	r3, [r7, #16]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	613b      	str	r3, [r7, #16]
 8004b78:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	77fb      	strb	r3, [r7, #31]
 8004b86:	e000      	b.n	8004b8a <HAL_SPI_Transmit+0x2b2>
  }

error:
 8004b88:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3720      	adds	r7, #32
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08a      	sub	sp, #40	; 0x28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
 8004bb0:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d101      	bne.n	8004bca <HAL_SPI_TransmitReceive+0x26>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e1fb      	b.n	8004fc2 <HAL_SPI_TransmitReceive+0x41e>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bd2:	f7fd fa07 	bl	8001fe4 <HAL_GetTick>
 8004bd6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bde:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004be6:	887b      	ldrh	r3, [r7, #2]
 8004be8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004bea:	887b      	ldrh	r3, [r7, #2]
 8004bec:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bee:	7efb      	ldrb	r3, [r7, #27]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d00e      	beq.n	8004c12 <HAL_SPI_TransmitReceive+0x6e>
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bfa:	d106      	bne.n	8004c0a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d102      	bne.n	8004c0a <HAL_SPI_TransmitReceive+0x66>
 8004c04:	7efb      	ldrb	r3, [r7, #27]
 8004c06:	2b04      	cmp	r3, #4
 8004c08:	d003      	beq.n	8004c12 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004c10:	e1cd      	b.n	8004fae <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d005      	beq.n	8004c24 <HAL_SPI_TransmitReceive+0x80>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <HAL_SPI_TransmitReceive+0x80>
 8004c1e:	887b      	ldrh	r3, [r7, #2]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d103      	bne.n	8004c2c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004c2a:	e1c0      	b.n	8004fae <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d003      	beq.n	8004c40 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2205      	movs	r2, #5
 8004c3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	887a      	ldrh	r2, [r7, #2]
 8004c50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	887a      	ldrh	r2, [r7, #2]
 8004c58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	887a      	ldrh	r2, [r7, #2]
 8004c66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	887a      	ldrh	r2, [r7, #2]
 8004c6c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c82:	d802      	bhi.n	8004c8a <HAL_SPI_TransmitReceive+0xe6>
 8004c84:	8a3b      	ldrh	r3, [r7, #16]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d908      	bls.n	8004c9c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c98:	605a      	str	r2, [r3, #4]
 8004c9a:	e007      	b.n	8004cac <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004caa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb6:	2b40      	cmp	r3, #64	; 0x40
 8004cb8:	d007      	beq.n	8004cca <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cc8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cd2:	d97c      	bls.n	8004dce <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <HAL_SPI_TransmitReceive+0x13e>
 8004cdc:	8a7b      	ldrh	r3, [r7, #18]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d169      	bne.n	8004db6 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce6:	881a      	ldrh	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	1c9a      	adds	r2, r3, #2
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d06:	e056      	b.n	8004db6 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d11b      	bne.n	8004d4e <HAL_SPI_TransmitReceive+0x1aa>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d016      	beq.n	8004d4e <HAL_SPI_TransmitReceive+0x1aa>
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d113      	bne.n	8004d4e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2a:	881a      	ldrh	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d36:	1c9a      	adds	r2, r3, #2
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	3b01      	subs	r3, #1
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d11c      	bne.n	8004d96 <HAL_SPI_TransmitReceive+0x1f2>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d016      	beq.n	8004d96 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	b292      	uxth	r2, r2
 8004d74:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	1c9a      	adds	r2, r3, #2
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d92:	2301      	movs	r3, #1
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d96:	f7fd f925 	bl	8001fe4 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d807      	bhi.n	8004db6 <HAL_SPI_TransmitReceive+0x212>
 8004da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dac:	d003      	beq.n	8004db6 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004db4:	e0fb      	b.n	8004fae <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1a3      	bne.n	8004d08 <HAL_SPI_TransmitReceive+0x164>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d19d      	bne.n	8004d08 <HAL_SPI_TransmitReceive+0x164>
 8004dcc:	e0df      	b.n	8004f8e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_SPI_TransmitReceive+0x23a>
 8004dd6:	8a7b      	ldrh	r3, [r7, #18]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	f040 80cb 	bne.w	8004f74 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d912      	bls.n	8004e0e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dec:	881a      	ldrh	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df8:	1c9a      	adds	r2, r3, #2
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b02      	subs	r3, #2
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e0c:	e0b2      	b.n	8004f74 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	330c      	adds	r3, #12
 8004e18:	7812      	ldrb	r2, [r2, #0]
 8004e1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e34:	e09e      	b.n	8004f74 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d134      	bne.n	8004eae <HAL_SPI_TransmitReceive+0x30a>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d02f      	beq.n	8004eae <HAL_SPI_TransmitReceive+0x30a>
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d12c      	bne.n	8004eae <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d912      	bls.n	8004e84 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e62:	881a      	ldrh	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6e:	1c9a      	adds	r2, r3, #2
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	3b02      	subs	r3, #2
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e82:	e012      	b.n	8004eaa <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	330c      	adds	r3, #12
 8004e8e:	7812      	ldrb	r2, [r2, #0]
 8004e90:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e96:	1c5a      	adds	r2, r3, #1
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d148      	bne.n	8004f4e <HAL_SPI_TransmitReceive+0x3aa>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d042      	beq.n	8004f4e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d923      	bls.n	8004f1c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	b292      	uxth	r2, r2
 8004ee0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	1c9a      	adds	r2, r3, #2
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	3b02      	subs	r3, #2
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d81f      	bhi.n	8004f4a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f18:	605a      	str	r2, [r3, #4]
 8004f1a:	e016      	b.n	8004f4a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f103 020c 	add.w	r2, r3, #12
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	7812      	ldrb	r2, [r2, #0]
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	3b01      	subs	r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f4e:	f7fd f849 	bl	8001fe4 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d803      	bhi.n	8004f66 <HAL_SPI_TransmitReceive+0x3c2>
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f64:	d102      	bne.n	8004f6c <HAL_SPI_TransmitReceive+0x3c8>
 8004f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d103      	bne.n	8004f74 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004f72:	e01c      	b.n	8004fae <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f47f af5b 	bne.w	8004e36 <HAL_SPI_TransmitReceive+0x292>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f47f af54 	bne.w	8004e36 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f8e:	69fa      	ldr	r2, [r7, #28]
 8004f90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 f8f0 	bl	8005178 <SPI_EndRxTxTransaction>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d006      	beq.n	8004fac <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	661a      	str	r2, [r3, #96]	; 0x60
 8004faa:	e000      	b.n	8004fae <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004fac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004fbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3728      	adds	r7, #40	; 0x28
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b084      	sub	sp, #16
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	60f8      	str	r0, [r7, #12]
 8004fd2:	60b9      	str	r1, [r7, #8]
 8004fd4:	603b      	str	r3, [r7, #0]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fda:	e04c      	b.n	8005076 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe2:	d048      	beq.n	8005076 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004fe4:	f7fc fffe 	bl	8001fe4 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d902      	bls.n	8004ffa <SPI_WaitFlagStateUntilTimeout+0x30>
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d13d      	bne.n	8005076 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005008:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005012:	d111      	bne.n	8005038 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800501c:	d004      	beq.n	8005028 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005026:	d107      	bne.n	8005038 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005036:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005040:	d10f      	bne.n	8005062 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005060:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e00f      	b.n	8005096 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4013      	ands	r3, r2
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	429a      	cmp	r2, r3
 8005084:	bf0c      	ite	eq
 8005086:	2301      	moveq	r3, #1
 8005088:	2300      	movne	r3, #0
 800508a:	b2db      	uxtb	r3, r3
 800508c:	461a      	mov	r2, r3
 800508e:	79fb      	ldrb	r3, [r7, #7]
 8005090:	429a      	cmp	r2, r3
 8005092:	d1a3      	bne.n	8004fdc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b084      	sub	sp, #16
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	60f8      	str	r0, [r7, #12]
 80050a6:	60b9      	str	r1, [r7, #8]
 80050a8:	607a      	str	r2, [r7, #4]
 80050aa:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80050ac:	e057      	b.n	800515e <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80050b4:	d106      	bne.n	80050c4 <SPI_WaitFifoStateUntilTimeout+0x26>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d103      	bne.n	80050c4 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	330c      	adds	r3, #12
 80050c2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ca:	d048      	beq.n	800515e <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80050cc:	f7fc ff8a 	bl	8001fe4 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d902      	bls.n	80050e2 <SPI_WaitFifoStateUntilTimeout+0x44>
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d13d      	bne.n	800515e <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050fa:	d111      	bne.n	8005120 <SPI_WaitFifoStateUntilTimeout+0x82>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005104:	d004      	beq.n	8005110 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800510e:	d107      	bne.n	8005120 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800511e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005128:	d10f      	bne.n	800514a <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005148:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e008      	b.n	8005170 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	4013      	ands	r3, r2
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	429a      	cmp	r2, r3
 800516c:	d19f      	bne.n	80050ae <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af02      	add	r7, sp, #8
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2200      	movs	r2, #0
 800518c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f7ff ff84 	bl	800509e <SPI_WaitFifoStateUntilTimeout>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d007      	beq.n	80051ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a0:	f043 0220 	orr.w	r2, r3, #32
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e027      	b.n	80051fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2200      	movs	r2, #0
 80051b4:	2180      	movs	r1, #128	; 0x80
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f7ff ff07 	bl	8004fca <SPI_WaitFlagStateUntilTimeout>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d007      	beq.n	80051d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c6:	f043 0220 	orr.w	r2, r3, #32
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e014      	b.n	80051fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2200      	movs	r2, #0
 80051da:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f7ff ff5d 	bl	800509e <SPI_WaitFifoStateUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d007      	beq.n	80051fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ee:	f043 0220 	orr.w	r2, r3, #32
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e000      	b.n	80051fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e040      	b.n	8005298 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800521a:	2b00      	cmp	r3, #0
 800521c:	d106      	bne.n	800522c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7fc fe04 	bl	8001e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2224      	movs	r2, #36	; 0x24
 8005230:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0201 	bic.w	r2, r2, #1
 8005240:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 fa28 	bl	8005698 <UART_SetConfig>
 8005248:	4603      	mov	r3, r0
 800524a:	2b01      	cmp	r3, #1
 800524c:	d101      	bne.n	8005252 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e022      	b.n	8005298 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	2b00      	cmp	r3, #0
 8005258:	d002      	beq.n	8005260 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 fd30 	bl	8005cc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800526e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800527e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0201 	orr.w	r2, r2, #1
 800528e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 fdb7 	bl	8005e04 <UART_CheckIdleState>
 8005296:	4603      	mov	r3, r0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	4613      	mov	r3, r2
 80052ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052b2:	2b20      	cmp	r3, #32
 80052b4:	f040 808a 	bne.w	80053cc <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d002      	beq.n	80052c4 <HAL_UART_Receive_IT+0x24>
 80052be:	88fb      	ldrh	r3, [r7, #6]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e082      	b.n	80053ce <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d101      	bne.n	80052d6 <HAL_UART_Receive_IT+0x36>
 80052d2:	2302      	movs	r3, #2
 80052d4:	e07b      	b.n	80053ce <HAL_UART_Receive_IT+0x12e>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	88fa      	ldrh	r2, [r7, #6]
 80052e8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	88fa      	ldrh	r2, [r7, #6]
 80052f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005302:	d10e      	bne.n	8005322 <HAL_UART_Receive_IT+0x82>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d105      	bne.n	8005318 <HAL_UART_Receive_IT+0x78>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005312:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005316:	e02d      	b.n	8005374 <HAL_UART_Receive_IT+0xd4>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	22ff      	movs	r2, #255	; 0xff
 800531c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005320:	e028      	b.n	8005374 <HAL_UART_Receive_IT+0xd4>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10d      	bne.n	8005346 <HAL_UART_Receive_IT+0xa6>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d104      	bne.n	800533c <HAL_UART_Receive_IT+0x9c>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	22ff      	movs	r2, #255	; 0xff
 8005336:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800533a:	e01b      	b.n	8005374 <HAL_UART_Receive_IT+0xd4>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	227f      	movs	r2, #127	; 0x7f
 8005340:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005344:	e016      	b.n	8005374 <HAL_UART_Receive_IT+0xd4>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800534e:	d10d      	bne.n	800536c <HAL_UART_Receive_IT+0xcc>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d104      	bne.n	8005362 <HAL_UART_Receive_IT+0xc2>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	227f      	movs	r2, #127	; 0x7f
 800535c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005360:	e008      	b.n	8005374 <HAL_UART_Receive_IT+0xd4>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	223f      	movs	r2, #63	; 0x3f
 8005366:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800536a:	e003      	b.n	8005374 <HAL_UART_Receive_IT+0xd4>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2222      	movs	r2, #34	; 0x22
 800537e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0201 	orr.w	r2, r2, #1
 800538e:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005398:	d107      	bne.n	80053aa <HAL_UART_Receive_IT+0x10a>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d103      	bne.n	80053aa <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4a0d      	ldr	r2, [pc, #52]	; (80053dc <HAL_UART_Receive_IT+0x13c>)
 80053a6:	661a      	str	r2, [r3, #96]	; 0x60
 80053a8:	e002      	b.n	80053b0 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4a0c      	ldr	r2, [pc, #48]	; (80053e0 <HAL_UART_Receive_IT+0x140>)
 80053ae:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80053c6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80053c8:	2300      	movs	r3, #0
 80053ca:	e000      	b.n	80053ce <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80053cc:	2302      	movs	r3, #2
  }
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	080060cd 	.word	0x080060cd
 80053e0:	08006023 	.word	0x08006023

080053e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b088      	sub	sp, #32
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005404:	69fa      	ldr	r2, [r7, #28]
 8005406:	f640 030f 	movw	r3, #2063	; 0x80f
 800540a:	4013      	ands	r3, r2
 800540c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d113      	bne.n	800543c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	f003 0320 	and.w	r3, r3, #32
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00e      	beq.n	800543c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	2b00      	cmp	r3, #0
 8005426:	d009      	beq.n	800543c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 8114 	beq.w	800565a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	4798      	blx	r3
      }
      return;
 800543a:	e10e      	b.n	800565a <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 80d6 	beq.w	80055f0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	d105      	bne.n	800545a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 80cb 	beq.w	80055f0 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00e      	beq.n	8005482 <HAL_UART_IRQHandler+0x9e>
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546a:	2b00      	cmp	r3, #0
 800546c:	d009      	beq.n	8005482 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2201      	movs	r2, #1
 8005474:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800547a:	f043 0201 	orr.w	r2, r3, #1
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00e      	beq.n	80054aa <HAL_UART_IRQHandler+0xc6>
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d009      	beq.n	80054aa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2202      	movs	r2, #2
 800549c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054a2:	f043 0204 	orr.w	r2, r3, #4
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	f003 0304 	and.w	r3, r3, #4
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00e      	beq.n	80054d2 <HAL_UART_IRQHandler+0xee>
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d009      	beq.n	80054d2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2204      	movs	r2, #4
 80054c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ca:	f043 0202 	orr.w	r2, r3, #2
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	f003 0308 	and.w	r3, r3, #8
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d013      	beq.n	8005504 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	f003 0320 	and.w	r3, r3, #32
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d104      	bne.n	80054f0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d009      	beq.n	8005504 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2208      	movs	r2, #8
 80054f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054fc:	f043 0208 	orr.w	r2, r3, #8
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00f      	beq.n	800552e <HAL_UART_IRQHandler+0x14a>
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00a      	beq.n	800552e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005520:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005526:	f043 0220 	orr.w	r2, r3, #32
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 8093 	beq.w	800565e <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	f003 0320 	and.w	r3, r3, #32
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00c      	beq.n	800555c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	f003 0320 	and.w	r3, r3, #32
 8005548:	2b00      	cmp	r3, #0
 800554a:	d007      	beq.n	800555c <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005550:	2b00      	cmp	r3, #0
 8005552:	d003      	beq.n	800555c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005560:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556c:	2b40      	cmp	r3, #64	; 0x40
 800556e:	d004      	beq.n	800557a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005576:	2b00      	cmp	r3, #0
 8005578:	d031      	beq.n	80055de <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fd02 	bl	8005f84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558a:	2b40      	cmp	r3, #64	; 0x40
 800558c:	d123      	bne.n	80055d6 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800559c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d013      	beq.n	80055ce <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055aa:	4a30      	ldr	r2, [pc, #192]	; (800566c <HAL_UART_IRQHandler+0x288>)
 80055ac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fc fe55 	bl	8002262 <HAL_DMA_Abort_IT>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d016      	beq.n	80055ec <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80055c8:	4610      	mov	r0, r2
 80055ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055cc:	e00e      	b.n	80055ec <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f858 	bl	8005684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d4:	e00a      	b.n	80055ec <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f854 	bl	8005684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055dc:	e006      	b.n	80055ec <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f850 	bl	8005684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80055ea:	e038      	b.n	800565e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ec:	bf00      	nop
    return;
 80055ee:	e036      	b.n	800565e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00d      	beq.n	8005616 <HAL_UART_IRQHandler+0x232>
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d008      	beq.n	8005616 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800560c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fdb1 	bl	8006176 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005614:	e026      	b.n	8005664 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00d      	beq.n	800563c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005626:	2b00      	cmp	r3, #0
 8005628:	d008      	beq.n	800563c <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800562e:	2b00      	cmp	r3, #0
 8005630:	d017      	beq.n	8005662 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	4798      	blx	r3
    }
    return;
 800563a:	e012      	b.n	8005662 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00e      	beq.n	8005664 <HAL_UART_IRQHandler+0x280>
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564c:	2b00      	cmp	r3, #0
 800564e:	d009      	beq.n	8005664 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 fccd 	bl	8005ff0 <UART_EndTransmit_IT>
    return;
 8005656:	bf00      	nop
 8005658:	e004      	b.n	8005664 <HAL_UART_IRQHandler+0x280>
      return;
 800565a:	bf00      	nop
 800565c:	e002      	b.n	8005664 <HAL_UART_IRQHandler+0x280>
    return;
 800565e:	bf00      	nop
 8005660:	e000      	b.n	8005664 <HAL_UART_IRQHandler+0x280>
    return;
 8005662:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005664:	3720      	adds	r7, #32
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	08005fc5 	.word	0x08005fc5

08005670 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005698:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800569c:	b08a      	sub	sp, #40	; 0x28
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	689a      	ldr	r2, [r3, #8]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	431a      	orrs	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	431a      	orrs	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	4bbc      	ldr	r3, [pc, #752]	; (80059c0 <UART_SetConfig+0x328>)
 80056ce:	4013      	ands	r3, r2
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	6812      	ldr	r2, [r2, #0]
 80056d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056d6:	430b      	orrs	r3, r1
 80056d8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68da      	ldr	r2, [r3, #12]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4ab2      	ldr	r2, [pc, #712]	; (80059c4 <UART_SetConfig+0x32c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d004      	beq.n	800570a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005706:	4313      	orrs	r3, r2
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800571a:	430a      	orrs	r2, r1
 800571c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4aa9      	ldr	r2, [pc, #676]	; (80059c8 <UART_SetConfig+0x330>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d126      	bne.n	8005776 <UART_SetConfig+0xde>
 8005728:	4ba8      	ldr	r3, [pc, #672]	; (80059cc <UART_SetConfig+0x334>)
 800572a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	2b03      	cmp	r3, #3
 8005734:	d81a      	bhi.n	800576c <UART_SetConfig+0xd4>
 8005736:	a201      	add	r2, pc, #4	; (adr r2, 800573c <UART_SetConfig+0xa4>)
 8005738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573c:	0800574d 	.word	0x0800574d
 8005740:	0800575d 	.word	0x0800575d
 8005744:	08005755 	.word	0x08005755
 8005748:	08005765 	.word	0x08005765
 800574c:	2301      	movs	r3, #1
 800574e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005752:	e0ab      	b.n	80058ac <UART_SetConfig+0x214>
 8005754:	2302      	movs	r3, #2
 8005756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800575a:	e0a7      	b.n	80058ac <UART_SetConfig+0x214>
 800575c:	2304      	movs	r3, #4
 800575e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005762:	e0a3      	b.n	80058ac <UART_SetConfig+0x214>
 8005764:	2308      	movs	r3, #8
 8005766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800576a:	e09f      	b.n	80058ac <UART_SetConfig+0x214>
 800576c:	2310      	movs	r3, #16
 800576e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005772:	bf00      	nop
 8005774:	e09a      	b.n	80058ac <UART_SetConfig+0x214>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a95      	ldr	r2, [pc, #596]	; (80059d0 <UART_SetConfig+0x338>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d138      	bne.n	80057f2 <UART_SetConfig+0x15a>
 8005780:	4b92      	ldr	r3, [pc, #584]	; (80059cc <UART_SetConfig+0x334>)
 8005782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005786:	f003 030c 	and.w	r3, r3, #12
 800578a:	2b0c      	cmp	r3, #12
 800578c:	d82c      	bhi.n	80057e8 <UART_SetConfig+0x150>
 800578e:	a201      	add	r2, pc, #4	; (adr r2, 8005794 <UART_SetConfig+0xfc>)
 8005790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005794:	080057c9 	.word	0x080057c9
 8005798:	080057e9 	.word	0x080057e9
 800579c:	080057e9 	.word	0x080057e9
 80057a0:	080057e9 	.word	0x080057e9
 80057a4:	080057d9 	.word	0x080057d9
 80057a8:	080057e9 	.word	0x080057e9
 80057ac:	080057e9 	.word	0x080057e9
 80057b0:	080057e9 	.word	0x080057e9
 80057b4:	080057d1 	.word	0x080057d1
 80057b8:	080057e9 	.word	0x080057e9
 80057bc:	080057e9 	.word	0x080057e9
 80057c0:	080057e9 	.word	0x080057e9
 80057c4:	080057e1 	.word	0x080057e1
 80057c8:	2300      	movs	r3, #0
 80057ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ce:	e06d      	b.n	80058ac <UART_SetConfig+0x214>
 80057d0:	2302      	movs	r3, #2
 80057d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057d6:	e069      	b.n	80058ac <UART_SetConfig+0x214>
 80057d8:	2304      	movs	r3, #4
 80057da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057de:	e065      	b.n	80058ac <UART_SetConfig+0x214>
 80057e0:	2308      	movs	r3, #8
 80057e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057e6:	e061      	b.n	80058ac <UART_SetConfig+0x214>
 80057e8:	2310      	movs	r3, #16
 80057ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ee:	bf00      	nop
 80057f0:	e05c      	b.n	80058ac <UART_SetConfig+0x214>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a77      	ldr	r2, [pc, #476]	; (80059d4 <UART_SetConfig+0x33c>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d125      	bne.n	8005848 <UART_SetConfig+0x1b0>
 80057fc:	4b73      	ldr	r3, [pc, #460]	; (80059cc <UART_SetConfig+0x334>)
 80057fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005802:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005806:	2b10      	cmp	r3, #16
 8005808:	d011      	beq.n	800582e <UART_SetConfig+0x196>
 800580a:	2b10      	cmp	r3, #16
 800580c:	d802      	bhi.n	8005814 <UART_SetConfig+0x17c>
 800580e:	2b00      	cmp	r3, #0
 8005810:	d005      	beq.n	800581e <UART_SetConfig+0x186>
 8005812:	e014      	b.n	800583e <UART_SetConfig+0x1a6>
 8005814:	2b20      	cmp	r3, #32
 8005816:	d006      	beq.n	8005826 <UART_SetConfig+0x18e>
 8005818:	2b30      	cmp	r3, #48	; 0x30
 800581a:	d00c      	beq.n	8005836 <UART_SetConfig+0x19e>
 800581c:	e00f      	b.n	800583e <UART_SetConfig+0x1a6>
 800581e:	2300      	movs	r3, #0
 8005820:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005824:	e042      	b.n	80058ac <UART_SetConfig+0x214>
 8005826:	2302      	movs	r3, #2
 8005828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800582c:	e03e      	b.n	80058ac <UART_SetConfig+0x214>
 800582e:	2304      	movs	r3, #4
 8005830:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005834:	e03a      	b.n	80058ac <UART_SetConfig+0x214>
 8005836:	2308      	movs	r3, #8
 8005838:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800583c:	e036      	b.n	80058ac <UART_SetConfig+0x214>
 800583e:	2310      	movs	r3, #16
 8005840:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005844:	bf00      	nop
 8005846:	e031      	b.n	80058ac <UART_SetConfig+0x214>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a5d      	ldr	r2, [pc, #372]	; (80059c4 <UART_SetConfig+0x32c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d129      	bne.n	80058a6 <UART_SetConfig+0x20e>
 8005852:	4b5e      	ldr	r3, [pc, #376]	; (80059cc <UART_SetConfig+0x334>)
 8005854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005858:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800585c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005860:	d014      	beq.n	800588c <UART_SetConfig+0x1f4>
 8005862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005866:	d802      	bhi.n	800586e <UART_SetConfig+0x1d6>
 8005868:	2b00      	cmp	r3, #0
 800586a:	d007      	beq.n	800587c <UART_SetConfig+0x1e4>
 800586c:	e016      	b.n	800589c <UART_SetConfig+0x204>
 800586e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005872:	d007      	beq.n	8005884 <UART_SetConfig+0x1ec>
 8005874:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005878:	d00c      	beq.n	8005894 <UART_SetConfig+0x1fc>
 800587a:	e00f      	b.n	800589c <UART_SetConfig+0x204>
 800587c:	2300      	movs	r3, #0
 800587e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005882:	e013      	b.n	80058ac <UART_SetConfig+0x214>
 8005884:	2302      	movs	r3, #2
 8005886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800588a:	e00f      	b.n	80058ac <UART_SetConfig+0x214>
 800588c:	2304      	movs	r3, #4
 800588e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005892:	e00b      	b.n	80058ac <UART_SetConfig+0x214>
 8005894:	2308      	movs	r3, #8
 8005896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800589a:	e007      	b.n	80058ac <UART_SetConfig+0x214>
 800589c:	2310      	movs	r3, #16
 800589e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058a2:	bf00      	nop
 80058a4:	e002      	b.n	80058ac <UART_SetConfig+0x214>
 80058a6:	2310      	movs	r3, #16
 80058a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a44      	ldr	r2, [pc, #272]	; (80059c4 <UART_SetConfig+0x32c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	f040 80fb 	bne.w	8005aae <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058bc:	2b08      	cmp	r3, #8
 80058be:	d824      	bhi.n	800590a <UART_SetConfig+0x272>
 80058c0:	a201      	add	r2, pc, #4	; (adr r2, 80058c8 <UART_SetConfig+0x230>)
 80058c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c6:	bf00      	nop
 80058c8:	080058ed 	.word	0x080058ed
 80058cc:	0800590b 	.word	0x0800590b
 80058d0:	080058f5 	.word	0x080058f5
 80058d4:	0800590b 	.word	0x0800590b
 80058d8:	080058fb 	.word	0x080058fb
 80058dc:	0800590b 	.word	0x0800590b
 80058e0:	0800590b 	.word	0x0800590b
 80058e4:	0800590b 	.word	0x0800590b
 80058e8:	08005903 	.word	0x08005903
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80058ec:	f7fe fd58 	bl	80043a0 <HAL_RCC_GetPCLK1Freq>
 80058f0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80058f2:	e00d      	b.n	8005910 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80058f4:	4b38      	ldr	r3, [pc, #224]	; (80059d8 <UART_SetConfig+0x340>)
 80058f6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80058f8:	e00a      	b.n	8005910 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80058fa:	f7fe fcbb 	bl	8004274 <HAL_RCC_GetSysClockFreq>
 80058fe:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005900:	e006      	b.n	8005910 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005906:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005908:	e002      	b.n	8005910 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	76fb      	strb	r3, [r7, #27]
        break;
 800590e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 81c8 	beq.w	8005ca8 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	4613      	mov	r3, r2
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	4413      	add	r3, r2
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	429a      	cmp	r2, r3
 8005926:	d305      	bcc.n	8005934 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	429a      	cmp	r2, r3
 8005932:	d902      	bls.n	800593a <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	76fb      	strb	r3, [r7, #27]
 8005938:	e1b6      	b.n	8005ca8 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 800593a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800593e:	2b08      	cmp	r3, #8
 8005940:	f200 80a2 	bhi.w	8005a88 <UART_SetConfig+0x3f0>
 8005944:	a201      	add	r2, pc, #4	; (adr r2, 800594c <UART_SetConfig+0x2b4>)
 8005946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594a:	bf00      	nop
 800594c:	08005971 	.word	0x08005971
 8005950:	08005a89 	.word	0x08005a89
 8005954:	080059dd 	.word	0x080059dd
 8005958:	08005a89 	.word	0x08005a89
 800595c:	08005a11 	.word	0x08005a11
 8005960:	08005a89 	.word	0x08005a89
 8005964:	08005a89 	.word	0x08005a89
 8005968:	08005a89 	.word	0x08005a89
 800596c:	08005a5f 	.word	0x08005a5f
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005970:	f7fe fd16 	bl	80043a0 <HAL_RCC_GetPCLK1Freq>
 8005974:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	4619      	mov	r1, r3
 800597a:	f04f 0200 	mov.w	r2, #0
 800597e:	f04f 0300 	mov.w	r3, #0
 8005982:	f04f 0400 	mov.w	r4, #0
 8005986:	0214      	lsls	r4, r2, #8
 8005988:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800598c:	020b      	lsls	r3, r1, #8
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	6852      	ldr	r2, [r2, #4]
 8005992:	0852      	lsrs	r2, r2, #1
 8005994:	4611      	mov	r1, r2
 8005996:	f04f 0200 	mov.w	r2, #0
 800599a:	eb13 0b01 	adds.w	fp, r3, r1
 800599e:	eb44 0c02 	adc.w	ip, r4, r2
 80059a2:	4658      	mov	r0, fp
 80059a4:	4661      	mov	r1, ip
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f04f 0400 	mov.w	r4, #0
 80059ae:	461a      	mov	r2, r3
 80059b0:	4623      	mov	r3, r4
 80059b2:	f7fa fe51 	bl	8000658 <__aeabi_uldivmod>
 80059b6:	4603      	mov	r3, r0
 80059b8:	460c      	mov	r4, r1
 80059ba:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80059bc:	e067      	b.n	8005a8e <UART_SetConfig+0x3f6>
 80059be:	bf00      	nop
 80059c0:	efff69f3 	.word	0xefff69f3
 80059c4:	40008000 	.word	0x40008000
 80059c8:	40013800 	.word	0x40013800
 80059cc:	40021000 	.word	0x40021000
 80059d0:	40004400 	.word	0x40004400
 80059d4:	40004800 	.word	0x40004800
 80059d8:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	085b      	lsrs	r3, r3, #1
 80059e2:	f04f 0400 	mov.w	r4, #0
 80059e6:	49ae      	ldr	r1, [pc, #696]	; (8005ca0 <UART_SetConfig+0x608>)
 80059e8:	f04f 0200 	mov.w	r2, #0
 80059ec:	eb13 0b01 	adds.w	fp, r3, r1
 80059f0:	eb44 0c02 	adc.w	ip, r4, r2
 80059f4:	4658      	mov	r0, fp
 80059f6:	4661      	mov	r1, ip
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f04f 0400 	mov.w	r4, #0
 8005a00:	461a      	mov	r2, r3
 8005a02:	4623      	mov	r3, r4
 8005a04:	f7fa fe28 	bl	8000658 <__aeabi_uldivmod>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	460c      	mov	r4, r1
 8005a0c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005a0e:	e03e      	b.n	8005a8e <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8005a10:	f7fe fc30 	bl	8004274 <HAL_RCC_GetSysClockFreq>
 8005a14:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	4619      	mov	r1, r3
 8005a1a:	f04f 0200 	mov.w	r2, #0
 8005a1e:	f04f 0300 	mov.w	r3, #0
 8005a22:	f04f 0400 	mov.w	r4, #0
 8005a26:	0214      	lsls	r4, r2, #8
 8005a28:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005a2c:	020b      	lsls	r3, r1, #8
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	6852      	ldr	r2, [r2, #4]
 8005a32:	0852      	lsrs	r2, r2, #1
 8005a34:	4611      	mov	r1, r2
 8005a36:	f04f 0200 	mov.w	r2, #0
 8005a3a:	eb13 0b01 	adds.w	fp, r3, r1
 8005a3e:	eb44 0c02 	adc.w	ip, r4, r2
 8005a42:	4658      	mov	r0, fp
 8005a44:	4661      	mov	r1, ip
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f04f 0400 	mov.w	r4, #0
 8005a4e:	461a      	mov	r2, r3
 8005a50:	4623      	mov	r3, r4
 8005a52:	f7fa fe01 	bl	8000658 <__aeabi_uldivmod>
 8005a56:	4603      	mov	r3, r0
 8005a58:	460c      	mov	r4, r1
 8005a5a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005a5c:	e017      	b.n	8005a8e <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	085b      	lsrs	r3, r3, #1
 8005a64:	f04f 0400 	mov.w	r4, #0
 8005a68:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8005a6c:	f144 0100 	adc.w	r1, r4, #0
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f04f 0400 	mov.w	r4, #0
 8005a78:	461a      	mov	r2, r3
 8005a7a:	4623      	mov	r3, r4
 8005a7c:	f7fa fdec 	bl	8000658 <__aeabi_uldivmod>
 8005a80:	4603      	mov	r3, r0
 8005a82:	460c      	mov	r4, r1
 8005a84:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005a86:	e002      	b.n	8005a8e <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	76fb      	strb	r3, [r7, #27]
            break;
 8005a8c:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a94:	d308      	bcc.n	8005aa8 <UART_SetConfig+0x410>
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a9c:	d204      	bcs.n	8005aa8 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	69fa      	ldr	r2, [r7, #28]
 8005aa4:	60da      	str	r2, [r3, #12]
 8005aa6:	e0ff      	b.n	8005ca8 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	76fb      	strb	r3, [r7, #27]
 8005aac:	e0fc      	b.n	8005ca8 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ab6:	f040 8083 	bne.w	8005bc0 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 8005aba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005abe:	2b08      	cmp	r3, #8
 8005ac0:	d85e      	bhi.n	8005b80 <UART_SetConfig+0x4e8>
 8005ac2:	a201      	add	r2, pc, #4	; (adr r2, 8005ac8 <UART_SetConfig+0x430>)
 8005ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac8:	08005aed 	.word	0x08005aed
 8005acc:	08005b0d 	.word	0x08005b0d
 8005ad0:	08005b2d 	.word	0x08005b2d
 8005ad4:	08005b81 	.word	0x08005b81
 8005ad8:	08005b49 	.word	0x08005b49
 8005adc:	08005b81 	.word	0x08005b81
 8005ae0:	08005b81 	.word	0x08005b81
 8005ae4:	08005b81 	.word	0x08005b81
 8005ae8:	08005b69 	.word	0x08005b69
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aec:	f7fe fc58 	bl	80043a0 <HAL_RCC_GetPCLK1Freq>
 8005af0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	005a      	lsls	r2, r3, #1
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	085b      	lsrs	r3, r3, #1
 8005afc:	441a      	add	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005b0a:	e03c      	b.n	8005b86 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b0c:	f7fe fc5e 	bl	80043cc <HAL_RCC_GetPCLK2Freq>
 8005b10:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	005a      	lsls	r2, r3, #1
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	085b      	lsrs	r3, r3, #1
 8005b1c:	441a      	add	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005b2a:	e02c      	b.n	8005b86 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	085b      	lsrs	r3, r3, #1
 8005b32:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005b36:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	6852      	ldr	r2, [r2, #4]
 8005b3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005b46:	e01e      	b.n	8005b86 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b48:	f7fe fb94 	bl	8004274 <HAL_RCC_GetSysClockFreq>
 8005b4c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	005a      	lsls	r2, r3, #1
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	085b      	lsrs	r3, r3, #1
 8005b58:	441a      	add	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005b66:	e00e      	b.n	8005b86 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	085b      	lsrs	r3, r3, #1
 8005b6e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005b7e:	e002      	b.n	8005b86 <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	76fb      	strb	r3, [r7, #27]
        break;
 8005b84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	2b0f      	cmp	r3, #15
 8005b8a:	d916      	bls.n	8005bba <UART_SetConfig+0x522>
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b92:	d212      	bcs.n	8005bba <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	f023 030f 	bic.w	r3, r3, #15
 8005b9c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	085b      	lsrs	r3, r3, #1
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	f003 0307 	and.w	r3, r3, #7
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	89fb      	ldrh	r3, [r7, #14]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	89fa      	ldrh	r2, [r7, #14]
 8005bb6:	60da      	str	r2, [r3, #12]
 8005bb8:	e076      	b.n	8005ca8 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	76fb      	strb	r3, [r7, #27]
 8005bbe:	e073      	b.n	8005ca8 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 8005bc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	d85c      	bhi.n	8005c82 <UART_SetConfig+0x5ea>
 8005bc8:	a201      	add	r2, pc, #4	; (adr r2, 8005bd0 <UART_SetConfig+0x538>)
 8005bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bce:	bf00      	nop
 8005bd0:	08005bf5 	.word	0x08005bf5
 8005bd4:	08005c13 	.word	0x08005c13
 8005bd8:	08005c31 	.word	0x08005c31
 8005bdc:	08005c83 	.word	0x08005c83
 8005be0:	08005c4d 	.word	0x08005c4d
 8005be4:	08005c83 	.word	0x08005c83
 8005be8:	08005c83 	.word	0x08005c83
 8005bec:	08005c83 	.word	0x08005c83
 8005bf0:	08005c6b 	.word	0x08005c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bf4:	f7fe fbd4 	bl	80043a0 <HAL_RCC_GetPCLK1Freq>
 8005bf8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	085a      	lsrs	r2, r3, #1
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	441a      	add	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005c10:	e03a      	b.n	8005c88 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c12:	f7fe fbdb 	bl	80043cc <HAL_RCC_GetPCLK2Freq>
 8005c16:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	085a      	lsrs	r2, r3, #1
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	441a      	add	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005c2e:	e02b      	b.n	8005c88 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	085b      	lsrs	r3, r3, #1
 8005c36:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005c3a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	6852      	ldr	r2, [r2, #4]
 8005c42:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005c4a:	e01d      	b.n	8005c88 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c4c:	f7fe fb12 	bl	8004274 <HAL_RCC_GetSysClockFreq>
 8005c50:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	085a      	lsrs	r2, r3, #1
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	441a      	add	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005c68:	e00e      	b.n	8005c88 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	085b      	lsrs	r3, r3, #1
 8005c70:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005c80:	e002      	b.n	8005c88 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	76fb      	strb	r3, [r7, #27]
        break;
 8005c86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	2b0f      	cmp	r3, #15
 8005c8c:	d90a      	bls.n	8005ca4 <UART_SetConfig+0x60c>
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c94:	d206      	bcs.n	8005ca4 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69fa      	ldr	r2, [r7, #28]
 8005c9c:	60da      	str	r2, [r3, #12]
 8005c9e:	e003      	b.n	8005ca8 <UART_SetConfig+0x610>
 8005ca0:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005cb4:	7efb      	ldrb	r3, [r7, #27]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3728      	adds	r7, #40	; 0x28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08005cc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00a      	beq.n	8005cea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00a      	beq.n	8005d0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00a      	beq.n	8005d2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d32:	f003 0308 	and.w	r3, r3, #8
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00a      	beq.n	8005d50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d54:	f003 0310 	and.w	r3, r3, #16
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00a      	beq.n	8005d72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d76:	f003 0320 	and.w	r3, r3, #32
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00a      	beq.n	8005d94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	430a      	orrs	r2, r1
 8005d92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d01a      	beq.n	8005dd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dbe:	d10a      	bne.n	8005dd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00a      	beq.n	8005df8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	430a      	orrs	r2, r1
 8005df6:	605a      	str	r2, [r3, #4]
  }
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af02      	add	r7, sp, #8
 8005e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005e12:	f7fc f8e7 	bl	8001fe4 <HAL_GetTick>
 8005e16:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0308 	and.w	r3, r3, #8
 8005e22:	2b08      	cmp	r3, #8
 8005e24:	d10e      	bne.n	8005e44 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e26:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f82a 	bl	8005e8e <UART_WaitOnFlagUntilTimeout>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d001      	beq.n	8005e44 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e020      	b.n	8005e86 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0304 	and.w	r3, r3, #4
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d10e      	bne.n	8005e70 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e52:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 f814 	bl	8005e8e <UART_WaitOnFlagUntilTimeout>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e00a      	b.n	8005e86 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2220      	movs	r2, #32
 8005e74:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2220      	movs	r2, #32
 8005e7a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b084      	sub	sp, #16
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	60f8      	str	r0, [r7, #12]
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	603b      	str	r3, [r7, #0]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e9e:	e05d      	b.n	8005f5c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea6:	d059      	beq.n	8005f5c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ea8:	f7fc f89c 	bl	8001fe4 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d302      	bcc.n	8005ebe <UART_WaitOnFlagUntilTimeout+0x30>
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d11b      	bne.n	8005ef6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ecc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	689a      	ldr	r2, [r3, #8]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f022 0201 	bic.w	r2, r2, #1
 8005edc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e042      	b.n	8005f7c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0304 	and.w	r3, r3, #4
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d02b      	beq.n	8005f5c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f12:	d123      	bne.n	8005f5c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f1c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f2c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689a      	ldr	r2, [r3, #8]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 0201 	bic.w	r2, r2, #1
 8005f3c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2220      	movs	r2, #32
 8005f42:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2220      	movs	r2, #32
 8005f48:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e00f      	b.n	8005f7c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	69da      	ldr	r2, [r3, #28]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	4013      	ands	r3, r2
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	bf0c      	ite	eq
 8005f6c:	2301      	moveq	r3, #1
 8005f6e:	2300      	movne	r3, #0
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	461a      	mov	r2, r3
 8005f74:	79fb      	ldrb	r3, [r7, #7]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d092      	beq.n	8005ea0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f9a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689a      	ldr	r2, [r3, #8]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 0201 	bic.w	r2, r2, #1
 8005faa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f7ff fb4e 	bl	8005684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fe8:	bf00      	nop
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006006:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2220      	movs	r2, #32
 800600c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f7ff fb2b 	bl	8005670 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800601a:	bf00      	nop
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b084      	sub	sp, #16
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006030:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006036:	2b22      	cmp	r3, #34	; 0x22
 8006038:	d13a      	bne.n	80060b0 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006040:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006042:	89bb      	ldrh	r3, [r7, #12]
 8006044:	b2d9      	uxtb	r1, r3
 8006046:	89fb      	ldrh	r3, [r7, #14]
 8006048:	b2da      	uxtb	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800604e:	400a      	ands	r2, r1
 8006050:	b2d2      	uxtb	r2, r2
 8006052:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006064:	b29b      	uxth	r3, r3
 8006066:	3b01      	subs	r3, #1
 8006068:	b29a      	uxth	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006076:	b29b      	uxth	r3, r3
 8006078:	2b00      	cmp	r3, #0
 800607a:	d123      	bne.n	80060c4 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800608a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689a      	ldr	r2, [r3, #8]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 0201 	bic.w	r2, r2, #1
 800609a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2220      	movs	r2, #32
 80060a0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7fb fd37 	bl	8001b1c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060ae:	e009      	b.n	80060c4 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	8b1b      	ldrh	r3, [r3, #24]
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f042 0208 	orr.w	r2, r2, #8
 80060c0:	b292      	uxth	r2, r2
 80060c2:	831a      	strh	r2, [r3, #24]
}
 80060c4:	bf00      	nop
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060da:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060e0:	2b22      	cmp	r3, #34	; 0x22
 80060e2:	d13a      	bne.n	800615a <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80060ea:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80060f2:	89ba      	ldrh	r2, [r7, #12]
 80060f4:	89fb      	ldrh	r3, [r7, #14]
 80060f6:	4013      	ands	r3, r2
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006102:	1c9a      	adds	r2, r3, #2
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800610e:	b29b      	uxth	r3, r3
 8006110:	3b01      	subs	r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006120:	b29b      	uxth	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d123      	bne.n	800616e <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006134:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 0201 	bic.w	r2, r2, #1
 8006144:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2220      	movs	r2, #32
 800614a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7fb fce2 	bl	8001b1c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006158:	e009      	b.n	800616e <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	8b1b      	ldrh	r3, [r3, #24]
 8006160:	b29a      	uxth	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0208 	orr.w	r2, r2, #8
 800616a:	b292      	uxth	r2, r2
 800616c:	831a      	strh	r2, [r3, #24]
}
 800616e:	bf00      	nop
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800617e:	bf00      	nop
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800618a:	b084      	sub	sp, #16
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	f107 0014 	add.w	r0, r7, #20
 8006198:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	b004      	add	sp, #16
 80061aa:	4770      	bx	lr

080061ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80061b4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80061b8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	4313      	orrs	r3, r2
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80061de:	b480      	push	{r7}
 80061e0:	b085      	sub	sp, #20
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80061e6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80061ea:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	43db      	mvns	r3, r3
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	4013      	ands	r3, r2
 80061fe:	b29a      	uxth	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	460b      	mov	r3, r1
 800621e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800622e:	b084      	sub	sp, #16
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	f107 0014 	add.w	r0, r7, #20
 800623c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7ff ffa3 	bl	80061ac <USB_EnableGlobalInt>

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006272:	b004      	add	sp, #16
 8006274:	4770      	bx	lr
	...

08006278 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006278:	b490      	push	{r4, r7}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	b29b      	uxth	r3, r3
 8006294:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629c:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	78db      	ldrb	r3, [r3, #3]
 80062a2:	2b03      	cmp	r3, #3
 80062a4:	d819      	bhi.n	80062da <USB_ActivateEndpoint+0x62>
 80062a6:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <USB_ActivateEndpoint+0x34>)
 80062a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ac:	080062bd 	.word	0x080062bd
 80062b0:	080062d1 	.word	0x080062d1
 80062b4:	080062e1 	.word	0x080062e1
 80062b8:	080062c7 	.word	0x080062c7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80062bc:	89bb      	ldrh	r3, [r7, #12]
 80062be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062c2:	81bb      	strh	r3, [r7, #12]
      break;
 80062c4:	e00d      	b.n	80062e2 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80062c6:	89bb      	ldrh	r3, [r7, #12]
 80062c8:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80062cc:	81bb      	strh	r3, [r7, #12]
      break;
 80062ce:	e008      	b.n	80062e2 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80062d0:	89bb      	ldrh	r3, [r7, #12]
 80062d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062d6:	81bb      	strh	r3, [r7, #12]
      break;
 80062d8:	e003      	b.n	80062e2 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	73fb      	strb	r3, [r7, #15]
      break;
 80062de:	e000      	b.n	80062e2 <USB_ActivateEndpoint+0x6a>
      break;
 80062e0:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	441a      	add	r2, r3
 80062ec:	89bb      	ldrh	r3, [r7, #12]
 80062ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062fe:	b29b      	uxth	r3, r3
 8006300:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4413      	add	r3, r2
 800630c:	881b      	ldrh	r3, [r3, #0]
 800630e:	b29b      	uxth	r3, r3
 8006310:	b21b      	sxth	r3, r3
 8006312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631a:	b21a      	sxth	r2, r3
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	b21b      	sxth	r3, r3
 8006322:	4313      	orrs	r3, r2
 8006324:	b21b      	sxth	r3, r3
 8006326:	b29c      	uxth	r4, r3
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	441a      	add	r2, r3
 8006332:	4b8a      	ldr	r3, [pc, #552]	; (800655c <USB_ActivateEndpoint+0x2e4>)
 8006334:	4323      	orrs	r3, r4
 8006336:	b29b      	uxth	r3, r3
 8006338:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	7b1b      	ldrb	r3, [r3, #12]
 800633e:	2b00      	cmp	r3, #0
 8006340:	f040 8112 	bne.w	8006568 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	785b      	ldrb	r3, [r3, #1]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d067      	beq.n	800641c <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800634c:	687c      	ldr	r4, [r7, #4]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006354:	b29b      	uxth	r3, r3
 8006356:	441c      	add	r4, r3
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	00db      	lsls	r3, r3, #3
 800635e:	4423      	add	r3, r4
 8006360:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006364:	461c      	mov	r4, r3
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	88db      	ldrh	r3, [r3, #6]
 800636a:	085b      	lsrs	r3, r3, #1
 800636c:	b29b      	uxth	r3, r3
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	b29b      	uxth	r3, r3
 8006372:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	881b      	ldrh	r3, [r3, #0]
 8006380:	b29c      	uxth	r4, r3
 8006382:	4623      	mov	r3, r4
 8006384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006388:	2b00      	cmp	r3, #0
 800638a:	d014      	beq.n	80063b6 <USB_ActivateEndpoint+0x13e>
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	881b      	ldrh	r3, [r3, #0]
 8006398:	b29b      	uxth	r3, r3
 800639a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800639e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a2:	b29c      	uxth	r4, r3
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	441a      	add	r2, r3
 80063ae:	4b6c      	ldr	r3, [pc, #432]	; (8006560 <USB_ActivateEndpoint+0x2e8>)
 80063b0:	4323      	orrs	r3, r4
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	78db      	ldrb	r3, [r3, #3]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d018      	beq.n	80063f0 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	881b      	ldrh	r3, [r3, #0]
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063d4:	b29c      	uxth	r4, r3
 80063d6:	f084 0320 	eor.w	r3, r4, #32
 80063da:	b29c      	uxth	r4, r3
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	441a      	add	r2, r3
 80063e6:	4b5d      	ldr	r3, [pc, #372]	; (800655c <USB_ActivateEndpoint+0x2e4>)
 80063e8:	4323      	orrs	r3, r4
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	8013      	strh	r3, [r2, #0]
 80063ee:	e22b      	b.n	8006848 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006402:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006406:	b29c      	uxth	r4, r3
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	441a      	add	r2, r3
 8006412:	4b52      	ldr	r3, [pc, #328]	; (800655c <USB_ActivateEndpoint+0x2e4>)
 8006414:	4323      	orrs	r3, r4
 8006416:	b29b      	uxth	r3, r3
 8006418:	8013      	strh	r3, [r2, #0]
 800641a:	e215      	b.n	8006848 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800641c:	687c      	ldr	r4, [r7, #4]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006424:	b29b      	uxth	r3, r3
 8006426:	441c      	add	r4, r3
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	00db      	lsls	r3, r3, #3
 800642e:	4423      	add	r3, r4
 8006430:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006434:	461c      	mov	r4, r3
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	88db      	ldrh	r3, [r3, #6]
 800643a:	085b      	lsrs	r3, r3, #1
 800643c:	b29b      	uxth	r3, r3
 800643e:	005b      	lsls	r3, r3, #1
 8006440:	b29b      	uxth	r3, r3
 8006442:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006444:	687c      	ldr	r4, [r7, #4]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800644c:	b29b      	uxth	r3, r3
 800644e:	441c      	add	r4, r3
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	00db      	lsls	r3, r3, #3
 8006456:	4423      	add	r3, r4
 8006458:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800645c:	461c      	mov	r4, r3
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10e      	bne.n	8006484 <USB_ActivateEndpoint+0x20c>
 8006466:	8823      	ldrh	r3, [r4, #0]
 8006468:	b29b      	uxth	r3, r3
 800646a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800646e:	b29b      	uxth	r3, r3
 8006470:	8023      	strh	r3, [r4, #0]
 8006472:	8823      	ldrh	r3, [r4, #0]
 8006474:	b29b      	uxth	r3, r3
 8006476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800647a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800647e:	b29b      	uxth	r3, r3
 8006480:	8023      	strh	r3, [r4, #0]
 8006482:	e02d      	b.n	80064e0 <USB_ActivateEndpoint+0x268>
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	2b3e      	cmp	r3, #62	; 0x3e
 800648a:	d812      	bhi.n	80064b2 <USB_ActivateEndpoint+0x23a>
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	085b      	lsrs	r3, r3, #1
 8006492:	60bb      	str	r3, [r7, #8]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	d002      	beq.n	80064a6 <USB_ActivateEndpoint+0x22e>
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	3301      	adds	r3, #1
 80064a4:	60bb      	str	r3, [r7, #8]
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	029b      	lsls	r3, r3, #10
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	8023      	strh	r3, [r4, #0]
 80064b0:	e016      	b.n	80064e0 <USB_ActivateEndpoint+0x268>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	095b      	lsrs	r3, r3, #5
 80064b8:	60bb      	str	r3, [r7, #8]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	f003 031f 	and.w	r3, r3, #31
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d102      	bne.n	80064cc <USB_ActivateEndpoint+0x254>
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	3b01      	subs	r3, #1
 80064ca:	60bb      	str	r3, [r7, #8]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	029b      	lsls	r3, r3, #10
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064dc:	b29b      	uxth	r3, r3
 80064de:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4413      	add	r3, r2
 80064ea:	881b      	ldrh	r3, [r3, #0]
 80064ec:	b29c      	uxth	r4, r3
 80064ee:	4623      	mov	r3, r4
 80064f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d014      	beq.n	8006522 <USB_ActivateEndpoint+0x2aa>
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	881b      	ldrh	r3, [r3, #0]
 8006504:	b29b      	uxth	r3, r3
 8006506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800650a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650e:	b29c      	uxth	r4, r3
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	441a      	add	r2, r3
 800651a:	4b12      	ldr	r3, [pc, #72]	; (8006564 <USB_ActivateEndpoint+0x2ec>)
 800651c:	4323      	orrs	r3, r4
 800651e:	b29b      	uxth	r3, r3
 8006520:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	881b      	ldrh	r3, [r3, #0]
 800652e:	b29b      	uxth	r3, r3
 8006530:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006538:	b29c      	uxth	r4, r3
 800653a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800653e:	b29c      	uxth	r4, r3
 8006540:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006544:	b29c      	uxth	r4, r3
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	441a      	add	r2, r3
 8006550:	4b02      	ldr	r3, [pc, #8]	; (800655c <USB_ActivateEndpoint+0x2e4>)
 8006552:	4323      	orrs	r3, r4
 8006554:	b29b      	uxth	r3, r3
 8006556:	8013      	strh	r3, [r2, #0]
 8006558:	e176      	b.n	8006848 <USB_ActivateEndpoint+0x5d0>
 800655a:	bf00      	nop
 800655c:	ffff8080 	.word	0xffff8080
 8006560:	ffff80c0 	.word	0xffff80c0
 8006564:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	b29b      	uxth	r3, r3
 8006576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800657a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800657e:	b29c      	uxth	r4, r3
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	441a      	add	r2, r3
 800658a:	4b96      	ldr	r3, [pc, #600]	; (80067e4 <USB_ActivateEndpoint+0x56c>)
 800658c:	4323      	orrs	r3, r4
 800658e:	b29b      	uxth	r3, r3
 8006590:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006592:	687c      	ldr	r4, [r7, #4]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800659a:	b29b      	uxth	r3, r3
 800659c:	441c      	add	r4, r3
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	00db      	lsls	r3, r3, #3
 80065a4:	4423      	add	r3, r4
 80065a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065aa:	461c      	mov	r4, r3
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	891b      	ldrh	r3, [r3, #8]
 80065b0:	085b      	lsrs	r3, r3, #1
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	8023      	strh	r3, [r4, #0]
 80065ba:	687c      	ldr	r4, [r7, #4]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	441c      	add	r4, r3
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	4423      	add	r3, r4
 80065ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065d2:	461c      	mov	r4, r3
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	895b      	ldrh	r3, [r3, #10]
 80065d8:	085b      	lsrs	r3, r3, #1
 80065da:	b29b      	uxth	r3, r3
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	b29b      	uxth	r3, r3
 80065e0:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	785b      	ldrb	r3, [r3, #1]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	f040 8088 	bne.w	80066fc <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	b29c      	uxth	r4, r3
 80065fa:	4623      	mov	r3, r4
 80065fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d014      	beq.n	800662e <USB_ActivateEndpoint+0x3b6>
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4413      	add	r3, r2
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	b29b      	uxth	r3, r3
 8006612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800661a:	b29c      	uxth	r4, r3
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	441a      	add	r2, r3
 8006626:	4b70      	ldr	r3, [pc, #448]	; (80067e8 <USB_ActivateEndpoint+0x570>)
 8006628:	4323      	orrs	r3, r4
 800662a:	b29b      	uxth	r3, r3
 800662c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	b29c      	uxth	r4, r3
 800663c:	4623      	mov	r3, r4
 800663e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006642:	2b00      	cmp	r3, #0
 8006644:	d014      	beq.n	8006670 <USB_ActivateEndpoint+0x3f8>
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	b29b      	uxth	r3, r3
 8006654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665c:	b29c      	uxth	r4, r3
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	441a      	add	r2, r3
 8006668:	4b60      	ldr	r3, [pc, #384]	; (80067ec <USB_ActivateEndpoint+0x574>)
 800666a:	4323      	orrs	r3, r4
 800666c:	b29b      	uxth	r3, r3
 800666e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4413      	add	r3, r2
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	b29b      	uxth	r3, r3
 800667e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006686:	b29c      	uxth	r4, r3
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	441a      	add	r2, r3
 8006692:	4b56      	ldr	r3, [pc, #344]	; (80067ec <USB_ActivateEndpoint+0x574>)
 8006694:	4323      	orrs	r3, r4
 8006696:	b29b      	uxth	r3, r3
 8006698:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4413      	add	r3, r2
 80066a4:	881b      	ldrh	r3, [r3, #0]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b0:	b29c      	uxth	r4, r3
 80066b2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80066b6:	b29c      	uxth	r4, r3
 80066b8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80066bc:	b29c      	uxth	r4, r3
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	441a      	add	r2, r3
 80066c8:	4b49      	ldr	r3, [pc, #292]	; (80067f0 <USB_ActivateEndpoint+0x578>)
 80066ca:	4323      	orrs	r3, r4
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	b29b      	uxth	r3, r3
 80066de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066e6:	b29c      	uxth	r4, r3
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	441a      	add	r2, r3
 80066f2:	4b3f      	ldr	r3, [pc, #252]	; (80067f0 <USB_ActivateEndpoint+0x578>)
 80066f4:	4323      	orrs	r3, r4
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	8013      	strh	r3, [r2, #0]
 80066fa:	e0a5      	b.n	8006848 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	b29c      	uxth	r4, r3
 800670a:	4623      	mov	r3, r4
 800670c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d014      	beq.n	800673e <USB_ActivateEndpoint+0x4c6>
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4413      	add	r3, r2
 800671e:	881b      	ldrh	r3, [r3, #0]
 8006720:	b29b      	uxth	r3, r3
 8006722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800672a:	b29c      	uxth	r4, r3
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	441a      	add	r2, r3
 8006736:	4b2c      	ldr	r3, [pc, #176]	; (80067e8 <USB_ActivateEndpoint+0x570>)
 8006738:	4323      	orrs	r3, r4
 800673a:	b29b      	uxth	r3, r3
 800673c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4413      	add	r3, r2
 8006748:	881b      	ldrh	r3, [r3, #0]
 800674a:	b29c      	uxth	r4, r3
 800674c:	4623      	mov	r3, r4
 800674e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006752:	2b00      	cmp	r3, #0
 8006754:	d014      	beq.n	8006780 <USB_ActivateEndpoint+0x508>
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	881b      	ldrh	r3, [r3, #0]
 8006762:	b29b      	uxth	r3, r3
 8006764:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800676c:	b29c      	uxth	r4, r3
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	441a      	add	r2, r3
 8006778:	4b1c      	ldr	r3, [pc, #112]	; (80067ec <USB_ActivateEndpoint+0x574>)
 800677a:	4323      	orrs	r3, r4
 800677c:	b29b      	uxth	r3, r3
 800677e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	b29b      	uxth	r3, r3
 800678e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006796:	b29c      	uxth	r4, r3
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	441a      	add	r2, r3
 80067a2:	4b11      	ldr	r3, [pc, #68]	; (80067e8 <USB_ActivateEndpoint+0x570>)
 80067a4:	4323      	orrs	r3, r4
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	78db      	ldrb	r3, [r3, #3]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d020      	beq.n	80067f4 <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	881b      	ldrh	r3, [r3, #0]
 80067be:	b29b      	uxth	r3, r3
 80067c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067c8:	b29c      	uxth	r4, r3
 80067ca:	f084 0320 	eor.w	r3, r4, #32
 80067ce:	b29c      	uxth	r4, r3
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	441a      	add	r2, r3
 80067da:	4b05      	ldr	r3, [pc, #20]	; (80067f0 <USB_ActivateEndpoint+0x578>)
 80067dc:	4323      	orrs	r3, r4
 80067de:	b29b      	uxth	r3, r3
 80067e0:	8013      	strh	r3, [r2, #0]
 80067e2:	e01c      	b.n	800681e <USB_ActivateEndpoint+0x5a6>
 80067e4:	ffff8180 	.word	0xffff8180
 80067e8:	ffffc080 	.word	0xffffc080
 80067ec:	ffff80c0 	.word	0xffff80c0
 80067f0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	881b      	ldrh	r3, [r3, #0]
 8006800:	b29b      	uxth	r3, r3
 8006802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006806:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800680a:	b29c      	uxth	r4, r3
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	441a      	add	r2, r3
 8006816:	4b0f      	ldr	r3, [pc, #60]	; (8006854 <USB_ActivateEndpoint+0x5dc>)
 8006818:	4323      	orrs	r3, r4
 800681a:	b29b      	uxth	r3, r3
 800681c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	b29b      	uxth	r3, r3
 800682c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006834:	b29c      	uxth	r4, r3
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	441a      	add	r2, r3
 8006840:	4b04      	ldr	r3, [pc, #16]	; (8006854 <USB_ActivateEndpoint+0x5dc>)
 8006842:	4323      	orrs	r3, r4
 8006844:	b29b      	uxth	r3, r3
 8006846:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006848:	7bfb      	ldrb	r3, [r7, #15]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bc90      	pop	{r4, r7}
 8006852:	4770      	bx	lr
 8006854:	ffff8080 	.word	0xffff8080

08006858 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006858:	b490      	push	{r4, r7}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	7b1b      	ldrb	r3, [r3, #12]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d171      	bne.n	800694e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	785b      	ldrb	r3, [r3, #1]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d036      	beq.n	80068e0 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	b29c      	uxth	r4, r3
 8006880:	4623      	mov	r3, r4
 8006882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006886:	2b00      	cmp	r3, #0
 8006888:	d014      	beq.n	80068b4 <USB_DeactivateEndpoint+0x5c>
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4413      	add	r3, r2
 8006894:	881b      	ldrh	r3, [r3, #0]
 8006896:	b29b      	uxth	r3, r3
 8006898:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800689c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a0:	b29c      	uxth	r4, r3
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	441a      	add	r2, r3
 80068ac:	4b6b      	ldr	r3, [pc, #428]	; (8006a5c <USB_DeactivateEndpoint+0x204>)
 80068ae:	4323      	orrs	r3, r4
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	881b      	ldrh	r3, [r3, #0]
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068ca:	b29c      	uxth	r4, r3
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	441a      	add	r2, r3
 80068d6:	4b62      	ldr	r3, [pc, #392]	; (8006a60 <USB_DeactivateEndpoint+0x208>)
 80068d8:	4323      	orrs	r3, r4
 80068da:	b29b      	uxth	r3, r3
 80068dc:	8013      	strh	r3, [r2, #0]
 80068de:	e144      	b.n	8006b6a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	881b      	ldrh	r3, [r3, #0]
 80068ec:	b29c      	uxth	r4, r3
 80068ee:	4623      	mov	r3, r4
 80068f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d014      	beq.n	8006922 <USB_DeactivateEndpoint+0xca>
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	881b      	ldrh	r3, [r3, #0]
 8006904:	b29b      	uxth	r3, r3
 8006906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800690a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800690e:	b29c      	uxth	r4, r3
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	441a      	add	r2, r3
 800691a:	4b52      	ldr	r3, [pc, #328]	; (8006a64 <USB_DeactivateEndpoint+0x20c>)
 800691c:	4323      	orrs	r3, r4
 800691e:	b29b      	uxth	r3, r3
 8006920:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4413      	add	r3, r2
 800692c:	881b      	ldrh	r3, [r3, #0]
 800692e:	b29b      	uxth	r3, r3
 8006930:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006938:	b29c      	uxth	r4, r3
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	441a      	add	r2, r3
 8006944:	4b46      	ldr	r3, [pc, #280]	; (8006a60 <USB_DeactivateEndpoint+0x208>)
 8006946:	4323      	orrs	r3, r4
 8006948:	b29b      	uxth	r3, r3
 800694a:	8013      	strh	r3, [r2, #0]
 800694c:	e10d      	b.n	8006b6a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	785b      	ldrb	r3, [r3, #1]
 8006952:	2b00      	cmp	r3, #0
 8006954:	f040 8088 	bne.w	8006a68 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	b29c      	uxth	r4, r3
 8006966:	4623      	mov	r3, r4
 8006968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d014      	beq.n	800699a <USB_DeactivateEndpoint+0x142>
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	881b      	ldrh	r3, [r3, #0]
 800697c:	b29b      	uxth	r3, r3
 800697e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006986:	b29c      	uxth	r4, r3
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	441a      	add	r2, r3
 8006992:	4b34      	ldr	r3, [pc, #208]	; (8006a64 <USB_DeactivateEndpoint+0x20c>)
 8006994:	4323      	orrs	r3, r4
 8006996:	b29b      	uxth	r3, r3
 8006998:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	b29c      	uxth	r4, r3
 80069a8:	4623      	mov	r3, r4
 80069aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d014      	beq.n	80069dc <USB_DeactivateEndpoint+0x184>
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	b29b      	uxth	r3, r3
 80069c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c8:	b29c      	uxth	r4, r3
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	441a      	add	r2, r3
 80069d4:	4b21      	ldr	r3, [pc, #132]	; (8006a5c <USB_DeactivateEndpoint+0x204>)
 80069d6:	4323      	orrs	r3, r4
 80069d8:	b29b      	uxth	r3, r3
 80069da:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	881b      	ldrh	r3, [r3, #0]
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f2:	b29c      	uxth	r4, r3
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	441a      	add	r2, r3
 80069fe:	4b17      	ldr	r3, [pc, #92]	; (8006a5c <USB_DeactivateEndpoint+0x204>)
 8006a00:	4323      	orrs	r3, r4
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4413      	add	r3, r2
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a1c:	b29c      	uxth	r4, r3
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	441a      	add	r2, r3
 8006a28:	4b0d      	ldr	r3, [pc, #52]	; (8006a60 <USB_DeactivateEndpoint+0x208>)
 8006a2a:	4323      	orrs	r3, r4
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	881b      	ldrh	r3, [r3, #0]
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a46:	b29c      	uxth	r4, r3
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	441a      	add	r2, r3
 8006a52:	4b03      	ldr	r3, [pc, #12]	; (8006a60 <USB_DeactivateEndpoint+0x208>)
 8006a54:	4323      	orrs	r3, r4
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	8013      	strh	r3, [r2, #0]
 8006a5a:	e086      	b.n	8006b6a <USB_DeactivateEndpoint+0x312>
 8006a5c:	ffff80c0 	.word	0xffff80c0
 8006a60:	ffff8080 	.word	0xffff8080
 8006a64:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	881b      	ldrh	r3, [r3, #0]
 8006a74:	b29c      	uxth	r4, r3
 8006a76:	4623      	mov	r3, r4
 8006a78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d014      	beq.n	8006aaa <USB_DeactivateEndpoint+0x252>
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4413      	add	r3, r2
 8006a8a:	881b      	ldrh	r3, [r3, #0]
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a96:	b29c      	uxth	r4, r3
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	441a      	add	r2, r3
 8006aa2:	4b35      	ldr	r3, [pc, #212]	; (8006b78 <USB_DeactivateEndpoint+0x320>)
 8006aa4:	4323      	orrs	r3, r4
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	b29c      	uxth	r4, r3
 8006ab8:	4623      	mov	r3, r4
 8006aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d014      	beq.n	8006aec <USB_DeactivateEndpoint+0x294>
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4413      	add	r3, r2
 8006acc:	881b      	ldrh	r3, [r3, #0]
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad8:	b29c      	uxth	r4, r3
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	441a      	add	r2, r3
 8006ae4:	4b25      	ldr	r3, [pc, #148]	; (8006b7c <USB_DeactivateEndpoint+0x324>)
 8006ae6:	4323      	orrs	r3, r4
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b02:	b29c      	uxth	r4, r3
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	441a      	add	r2, r3
 8006b0e:	4b1a      	ldr	r3, [pc, #104]	; (8006b78 <USB_DeactivateEndpoint+0x320>)
 8006b10:	4323      	orrs	r3, r4
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b2c:	b29c      	uxth	r4, r3
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	441a      	add	r2, r3
 8006b38:	4b11      	ldr	r3, [pc, #68]	; (8006b80 <USB_DeactivateEndpoint+0x328>)
 8006b3a:	4323      	orrs	r3, r4
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b56:	b29c      	uxth	r4, r3
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	441a      	add	r2, r3
 8006b62:	4b07      	ldr	r3, [pc, #28]	; (8006b80 <USB_DeactivateEndpoint+0x328>)
 8006b64:	4323      	orrs	r3, r4
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bc90      	pop	{r4, r7}
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	ffffc080 	.word	0xffffc080
 8006b7c:	ffff80c0 	.word	0xffff80c0
 8006b80:	ffff8080 	.word	0xffff8080

08006b84 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b84:	b590      	push	{r4, r7, lr}
 8006b86:	b08d      	sub	sp, #52	; 0x34
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	785b      	ldrb	r3, [r3, #1]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	f040 8160 	bne.w	8006e58 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	699a      	ldr	r2, [r3, #24]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d909      	bls.n	8006bb8 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	699a      	ldr	r2, [r3, #24]
 8006bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb0:	1ad2      	subs	r2, r2, r3
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	619a      	str	r2, [r3, #24]
 8006bb6:	e005      	b.n	8006bc4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	7b1b      	ldrb	r3, [r3, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d119      	bne.n	8006c00 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	6959      	ldr	r1, [r3, #20]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	88da      	ldrh	r2, [r3, #6]
 8006bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fbbd 	bl	8007358 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006bde:	687c      	ldr	r4, [r7, #4]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	441c      	add	r4, r3
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	00db      	lsls	r3, r3, #3
 8006bf0:	4423      	add	r3, r4
 8006bf2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006bf6:	461c      	mov	r4, r3
 8006bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	8023      	strh	r3, [r4, #0]
 8006bfe:	e10f      	b.n	8006e20 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d065      	beq.n	8006ce2 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006c16:	687c      	ldr	r4, [r7, #4]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	785b      	ldrb	r3, [r3, #1]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d148      	bne.n	8006cb2 <USB_EPStartXfer+0x12e>
 8006c20:	687c      	ldr	r4, [r7, #4]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	441c      	add	r4, r3
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	00db      	lsls	r3, r3, #3
 8006c32:	4423      	add	r3, r4
 8006c34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c38:	461c      	mov	r4, r3
 8006c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10e      	bne.n	8006c5e <USB_EPStartXfer+0xda>
 8006c40:	8823      	ldrh	r3, [r4, #0]
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	8023      	strh	r3, [r4, #0]
 8006c4c:	8823      	ldrh	r3, [r4, #0]
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	8023      	strh	r3, [r4, #0]
 8006c5c:	e03d      	b.n	8006cda <USB_EPStartXfer+0x156>
 8006c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c60:	2b3e      	cmp	r3, #62	; 0x3e
 8006c62:	d810      	bhi.n	8006c86 <USB_EPStartXfer+0x102>
 8006c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c66:	085b      	lsrs	r3, r3, #1
 8006c68:	627b      	str	r3, [r7, #36]	; 0x24
 8006c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6c:	f003 0301 	and.w	r3, r3, #1
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d002      	beq.n	8006c7a <USB_EPStartXfer+0xf6>
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	3301      	adds	r3, #1
 8006c78:	627b      	str	r3, [r7, #36]	; 0x24
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	029b      	lsls	r3, r3, #10
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	8023      	strh	r3, [r4, #0]
 8006c84:	e029      	b.n	8006cda <USB_EPStartXfer+0x156>
 8006c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c88:	095b      	lsrs	r3, r3, #5
 8006c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8e:	f003 031f 	and.w	r3, r3, #31
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d102      	bne.n	8006c9c <USB_EPStartXfer+0x118>
 8006c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	029b      	lsls	r3, r3, #10
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	8023      	strh	r3, [r4, #0]
 8006cb0:	e013      	b.n	8006cda <USB_EPStartXfer+0x156>
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	785b      	ldrb	r3, [r3, #1]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d10f      	bne.n	8006cda <USB_EPStartXfer+0x156>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	441c      	add	r4, r3
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	00db      	lsls	r3, r3, #3
 8006cca:	4423      	add	r3, r4
 8006ccc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006cd0:	60fb      	str	r3, [r7, #12]
 8006cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	895b      	ldrh	r3, [r3, #10]
 8006cde:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006ce0:	e063      	b.n	8006daa <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	785b      	ldrb	r3, [r3, #1]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d148      	bne.n	8006d7c <USB_EPStartXfer+0x1f8>
 8006cea:	687c      	ldr	r4, [r7, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	441c      	add	r4, r3
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	00db      	lsls	r3, r3, #3
 8006cfc:	4423      	add	r3, r4
 8006cfe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d02:	461c      	mov	r4, r3
 8006d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10e      	bne.n	8006d28 <USB_EPStartXfer+0x1a4>
 8006d0a:	8823      	ldrh	r3, [r4, #0]
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	8023      	strh	r3, [r4, #0]
 8006d16:	8823      	ldrh	r3, [r4, #0]
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	8023      	strh	r3, [r4, #0]
 8006d26:	e03d      	b.n	8006da4 <USB_EPStartXfer+0x220>
 8006d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2a:	2b3e      	cmp	r3, #62	; 0x3e
 8006d2c:	d810      	bhi.n	8006d50 <USB_EPStartXfer+0x1cc>
 8006d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d30:	085b      	lsrs	r3, r3, #1
 8006d32:	623b      	str	r3, [r7, #32]
 8006d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d002      	beq.n	8006d44 <USB_EPStartXfer+0x1c0>
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	3301      	adds	r3, #1
 8006d42:	623b      	str	r3, [r7, #32]
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	029b      	lsls	r3, r3, #10
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	8023      	strh	r3, [r4, #0]
 8006d4e:	e029      	b.n	8006da4 <USB_EPStartXfer+0x220>
 8006d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d52:	095b      	lsrs	r3, r3, #5
 8006d54:	623b      	str	r3, [r7, #32]
 8006d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d58:	f003 031f 	and.w	r3, r3, #31
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d102      	bne.n	8006d66 <USB_EPStartXfer+0x1e2>
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	3b01      	subs	r3, #1
 8006d64:	623b      	str	r3, [r7, #32]
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	029b      	lsls	r3, r3, #10
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	8023      	strh	r3, [r4, #0]
 8006d7a:	e013      	b.n	8006da4 <USB_EPStartXfer+0x220>
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	785b      	ldrb	r3, [r3, #1]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d10f      	bne.n	8006da4 <USB_EPStartXfer+0x220>
 8006d84:	687c      	ldr	r4, [r7, #4]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	441c      	add	r4, r3
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	00db      	lsls	r3, r3, #3
 8006d96:	4423      	add	r3, r4
 8006d98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d9c:	461c      	mov	r4, r3
 8006d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	891b      	ldrh	r3, [r3, #8]
 8006da8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	6959      	ldr	r1, [r3, #20]
 8006dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 facf 	bl	8007358 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	785b      	ldrb	r3, [r3, #1]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d115      	bne.n	8006dee <USB_EPStartXfer+0x26a>
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd8:	b29c      	uxth	r4, r3
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	441a      	add	r2, r3
 8006de4:	4b9a      	ldr	r3, [pc, #616]	; (8007050 <USB_EPStartXfer+0x4cc>)
 8006de6:	4323      	orrs	r3, r4
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	8013      	strh	r3, [r2, #0]
 8006dec:	e018      	b.n	8006e20 <USB_EPStartXfer+0x29c>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	785b      	ldrb	r3, [r3, #1]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d114      	bne.n	8006e20 <USB_EPStartXfer+0x29c>
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	881b      	ldrh	r3, [r3, #0]
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e0c:	b29c      	uxth	r4, r3
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	441a      	add	r2, r3
 8006e18:	4b8e      	ldr	r3, [pc, #568]	; (8007054 <USB_EPStartXfer+0x4d0>)
 8006e1a:	4323      	orrs	r3, r4
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e36:	b29c      	uxth	r4, r3
 8006e38:	f084 0310 	eor.w	r3, r4, #16
 8006e3c:	b29c      	uxth	r4, r3
 8006e3e:	f084 0320 	eor.w	r3, r4, #32
 8006e42:	b29c      	uxth	r4, r3
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	441a      	add	r2, r3
 8006e4e:	4b82      	ldr	r3, [pc, #520]	; (8007058 <USB_EPStartXfer+0x4d4>)
 8006e50:	4323      	orrs	r3, r4
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	8013      	strh	r3, [r2, #0]
 8006e56:	e146      	b.n	80070e6 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	699a      	ldr	r2, [r3, #24]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d909      	bls.n	8006e78 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	699a      	ldr	r2, [r3, #24]
 8006e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e70:	1ad2      	subs	r2, r2, r3
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	619a      	str	r2, [r3, #24]
 8006e76:	e005      	b.n	8006e84 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	2200      	movs	r2, #0
 8006e82:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	7b1b      	ldrb	r3, [r3, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d148      	bne.n	8006f1e <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006e8c:	687c      	ldr	r4, [r7, #4]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	441c      	add	r4, r3
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	00db      	lsls	r3, r3, #3
 8006e9e:	4423      	add	r3, r4
 8006ea0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ea4:	461c      	mov	r4, r3
 8006ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10e      	bne.n	8006eca <USB_EPStartXfer+0x346>
 8006eac:	8823      	ldrh	r3, [r4, #0]
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	8023      	strh	r3, [r4, #0]
 8006eb8:	8823      	ldrh	r3, [r4, #0]
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	8023      	strh	r3, [r4, #0]
 8006ec8:	e0f2      	b.n	80070b0 <USB_EPStartXfer+0x52c>
 8006eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ecc:	2b3e      	cmp	r3, #62	; 0x3e
 8006ece:	d810      	bhi.n	8006ef2 <USB_EPStartXfer+0x36e>
 8006ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed2:	085b      	lsrs	r3, r3, #1
 8006ed4:	61fb      	str	r3, [r7, #28]
 8006ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed8:	f003 0301 	and.w	r3, r3, #1
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d002      	beq.n	8006ee6 <USB_EPStartXfer+0x362>
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	61fb      	str	r3, [r7, #28]
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	029b      	lsls	r3, r3, #10
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	8023      	strh	r3, [r4, #0]
 8006ef0:	e0de      	b.n	80070b0 <USB_EPStartXfer+0x52c>
 8006ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef4:	095b      	lsrs	r3, r3, #5
 8006ef6:	61fb      	str	r3, [r7, #28]
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efa:	f003 031f 	and.w	r3, r3, #31
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d102      	bne.n	8006f08 <USB_EPStartXfer+0x384>
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	3b01      	subs	r3, #1
 8006f06:	61fb      	str	r3, [r7, #28]
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	029b      	lsls	r3, r3, #10
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	8023      	strh	r3, [r4, #0]
 8006f1c:	e0c8      	b.n	80070b0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	785b      	ldrb	r3, [r3, #1]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d148      	bne.n	8006fb8 <USB_EPStartXfer+0x434>
 8006f26:	687c      	ldr	r4, [r7, #4]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	441c      	add	r4, r3
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	00db      	lsls	r3, r3, #3
 8006f38:	4423      	add	r3, r4
 8006f3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f3e:	461c      	mov	r4, r3
 8006f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10e      	bne.n	8006f64 <USB_EPStartXfer+0x3e0>
 8006f46:	8823      	ldrh	r3, [r4, #0]
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	8023      	strh	r3, [r4, #0]
 8006f52:	8823      	ldrh	r3, [r4, #0]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	8023      	strh	r3, [r4, #0]
 8006f62:	e03d      	b.n	8006fe0 <USB_EPStartXfer+0x45c>
 8006f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f66:	2b3e      	cmp	r3, #62	; 0x3e
 8006f68:	d810      	bhi.n	8006f8c <USB_EPStartXfer+0x408>
 8006f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6c:	085b      	lsrs	r3, r3, #1
 8006f6e:	61bb      	str	r3, [r7, #24]
 8006f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d002      	beq.n	8006f80 <USB_EPStartXfer+0x3fc>
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	61bb      	str	r3, [r7, #24]
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	029b      	lsls	r3, r3, #10
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	8023      	strh	r3, [r4, #0]
 8006f8a:	e029      	b.n	8006fe0 <USB_EPStartXfer+0x45c>
 8006f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8e:	095b      	lsrs	r3, r3, #5
 8006f90:	61bb      	str	r3, [r7, #24]
 8006f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f94:	f003 031f 	and.w	r3, r3, #31
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d102      	bne.n	8006fa2 <USB_EPStartXfer+0x41e>
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	61bb      	str	r3, [r7, #24]
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	029b      	lsls	r3, r3, #10
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	8023      	strh	r3, [r4, #0]
 8006fb6:	e013      	b.n	8006fe0 <USB_EPStartXfer+0x45c>
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	785b      	ldrb	r3, [r3, #1]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d10f      	bne.n	8006fe0 <USB_EPStartXfer+0x45c>
 8006fc0:	687c      	ldr	r4, [r7, #4]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	441c      	add	r4, r3
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	00db      	lsls	r3, r3, #3
 8006fd2:	4423      	add	r3, r4
 8006fd4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006fd8:	461c      	mov	r4, r3
 8006fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	8023      	strh	r3, [r4, #0]
 8006fe0:	687c      	ldr	r4, [r7, #4]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	785b      	ldrb	r3, [r3, #1]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d14e      	bne.n	8007088 <USB_EPStartXfer+0x504>
 8006fea:	687c      	ldr	r4, [r7, #4]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	441c      	add	r4, r3
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	00db      	lsls	r3, r3, #3
 8006ffc:	4423      	add	r3, r4
 8006ffe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007002:	461c      	mov	r4, r3
 8007004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10e      	bne.n	8007028 <USB_EPStartXfer+0x4a4>
 800700a:	8823      	ldrh	r3, [r4, #0]
 800700c:	b29b      	uxth	r3, r3
 800700e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007012:	b29b      	uxth	r3, r3
 8007014:	8023      	strh	r3, [r4, #0]
 8007016:	8823      	ldrh	r3, [r4, #0]
 8007018:	b29b      	uxth	r3, r3
 800701a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800701e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007022:	b29b      	uxth	r3, r3
 8007024:	8023      	strh	r3, [r4, #0]
 8007026:	e043      	b.n	80070b0 <USB_EPStartXfer+0x52c>
 8007028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702a:	2b3e      	cmp	r3, #62	; 0x3e
 800702c:	d816      	bhi.n	800705c <USB_EPStartXfer+0x4d8>
 800702e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007030:	085b      	lsrs	r3, r3, #1
 8007032:	617b      	str	r3, [r7, #20]
 8007034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007036:	f003 0301 	and.w	r3, r3, #1
 800703a:	2b00      	cmp	r3, #0
 800703c:	d002      	beq.n	8007044 <USB_EPStartXfer+0x4c0>
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	3301      	adds	r3, #1
 8007042:	617b      	str	r3, [r7, #20]
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	b29b      	uxth	r3, r3
 8007048:	029b      	lsls	r3, r3, #10
 800704a:	b29b      	uxth	r3, r3
 800704c:	8023      	strh	r3, [r4, #0]
 800704e:	e02f      	b.n	80070b0 <USB_EPStartXfer+0x52c>
 8007050:	ffff80c0 	.word	0xffff80c0
 8007054:	ffffc080 	.word	0xffffc080
 8007058:	ffff8080 	.word	0xffff8080
 800705c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705e:	095b      	lsrs	r3, r3, #5
 8007060:	617b      	str	r3, [r7, #20]
 8007062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007064:	f003 031f 	and.w	r3, r3, #31
 8007068:	2b00      	cmp	r3, #0
 800706a:	d102      	bne.n	8007072 <USB_EPStartXfer+0x4ee>
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	3b01      	subs	r3, #1
 8007070:	617b      	str	r3, [r7, #20]
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	b29b      	uxth	r3, r3
 8007076:	029b      	lsls	r3, r3, #10
 8007078:	b29b      	uxth	r3, r3
 800707a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800707e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007082:	b29b      	uxth	r3, r3
 8007084:	8023      	strh	r3, [r4, #0]
 8007086:	e013      	b.n	80070b0 <USB_EPStartXfer+0x52c>
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	785b      	ldrb	r3, [r3, #1]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d10f      	bne.n	80070b0 <USB_EPStartXfer+0x52c>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007096:	b29b      	uxth	r3, r3
 8007098:	441c      	add	r4, r3
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	00db      	lsls	r3, r3, #3
 80070a0:	4423      	add	r3, r4
 80070a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80070a6:	613b      	str	r3, [r7, #16]
 80070a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4413      	add	r3, r2
 80070ba:	881b      	ldrh	r3, [r3, #0]
 80070bc:	b29b      	uxth	r3, r3
 80070be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c6:	b29c      	uxth	r4, r3
 80070c8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80070cc:	b29c      	uxth	r4, r3
 80070ce:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80070d2:	b29c      	uxth	r4, r3
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	441a      	add	r2, r3
 80070de:	4b04      	ldr	r3, [pc, #16]	; (80070f0 <USB_EPStartXfer+0x56c>)
 80070e0:	4323      	orrs	r3, r4
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3734      	adds	r7, #52	; 0x34
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd90      	pop	{r4, r7, pc}
 80070f0:	ffff8080 	.word	0xffff8080

080070f4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070f4:	b490      	push	{r4, r7}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	785b      	ldrb	r3, [r3, #1]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d018      	beq.n	8007138 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	b29b      	uxth	r3, r3
 8007114:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800711c:	b29c      	uxth	r4, r3
 800711e:	f084 0310 	eor.w	r3, r4, #16
 8007122:	b29c      	uxth	r4, r3
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	441a      	add	r2, r3
 800712e:	4b11      	ldr	r3, [pc, #68]	; (8007174 <USB_EPSetStall+0x80>)
 8007130:	4323      	orrs	r3, r4
 8007132:	b29b      	uxth	r3, r3
 8007134:	8013      	strh	r3, [r2, #0]
 8007136:	e017      	b.n	8007168 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	881b      	ldrh	r3, [r3, #0]
 8007144:	b29b      	uxth	r3, r3
 8007146:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800714a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800714e:	b29c      	uxth	r4, r3
 8007150:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007154:	b29c      	uxth	r4, r3
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	441a      	add	r2, r3
 8007160:	4b04      	ldr	r3, [pc, #16]	; (8007174 <USB_EPSetStall+0x80>)
 8007162:	4323      	orrs	r3, r4
 8007164:	b29b      	uxth	r3, r3
 8007166:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3708      	adds	r7, #8
 800716e:	46bd      	mov	sp, r7
 8007170:	bc90      	pop	{r4, r7}
 8007172:	4770      	bx	lr
 8007174:	ffff8080 	.word	0xffff8080

08007178 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007178:	b490      	push	{r4, r7}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	7b1b      	ldrb	r3, [r3, #12]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d17d      	bne.n	8007286 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	785b      	ldrb	r3, [r3, #1]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d03d      	beq.n	800720e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4413      	add	r3, r2
 800719c:	881b      	ldrh	r3, [r3, #0]
 800719e:	b29c      	uxth	r4, r3
 80071a0:	4623      	mov	r3, r4
 80071a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d014      	beq.n	80071d4 <USB_EPClearStall+0x5c>
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4413      	add	r3, r2
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c0:	b29c      	uxth	r4, r3
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	441a      	add	r2, r3
 80071cc:	4b31      	ldr	r3, [pc, #196]	; (8007294 <USB_EPClearStall+0x11c>)
 80071ce:	4323      	orrs	r3, r4
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	78db      	ldrb	r3, [r3, #3]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d054      	beq.n	8007286 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	881b      	ldrh	r3, [r3, #0]
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071f2:	b29c      	uxth	r4, r3
 80071f4:	f084 0320 	eor.w	r3, r4, #32
 80071f8:	b29c      	uxth	r4, r3
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	441a      	add	r2, r3
 8007204:	4b24      	ldr	r3, [pc, #144]	; (8007298 <USB_EPClearStall+0x120>)
 8007206:	4323      	orrs	r3, r4
 8007208:	b29b      	uxth	r3, r3
 800720a:	8013      	strh	r3, [r2, #0]
 800720c:	e03b      	b.n	8007286 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	b29c      	uxth	r4, r3
 800721c:	4623      	mov	r3, r4
 800721e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d014      	beq.n	8007250 <USB_EPClearStall+0xd8>
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	881b      	ldrh	r3, [r3, #0]
 8007232:	b29b      	uxth	r3, r3
 8007234:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723c:	b29c      	uxth	r4, r3
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	441a      	add	r2, r3
 8007248:	4b14      	ldr	r3, [pc, #80]	; (800729c <USB_EPClearStall+0x124>)
 800724a:	4323      	orrs	r3, r4
 800724c:	b29b      	uxth	r3, r3
 800724e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	881b      	ldrh	r3, [r3, #0]
 800725c:	b29b      	uxth	r3, r3
 800725e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007266:	b29c      	uxth	r4, r3
 8007268:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800726c:	b29c      	uxth	r4, r3
 800726e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007272:	b29c      	uxth	r4, r3
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	441a      	add	r2, r3
 800727e:	4b06      	ldr	r3, [pc, #24]	; (8007298 <USB_EPClearStall+0x120>)
 8007280:	4323      	orrs	r3, r4
 8007282:	b29b      	uxth	r3, r3
 8007284:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bc90      	pop	{r4, r7}
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	ffff80c0 	.word	0xffff80c0
 8007298:	ffff8080 	.word	0xffff8080
 800729c:	ffffc080 	.word	0xffffc080

080072a0 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	460b      	mov	r3, r1
 80072aa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80072ac:	78fb      	ldrb	r3, [r7, #3]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d103      	bne.n	80072ba <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2280      	movs	r2, #128	; 0x80
 80072b6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	370c      	adds	r7, #12
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80072f6:	b480      	push	{r7}
 80072f8:	b083      	sub	sp, #12
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007304:	b29b      	uxth	r3, r3
 8007306:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800730a:	b29a      	uxth	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800732e:	b29b      	uxth	r3, r3
 8007330:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007332:	68fb      	ldr	r3, [r7, #12]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3714      	adds	r7, #20
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007358:	b480      	push	{r7}
 800735a:	b08d      	sub	sp, #52	; 0x34
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	4611      	mov	r1, r2
 8007364:	461a      	mov	r2, r3
 8007366:	460b      	mov	r3, r1
 8007368:	80fb      	strh	r3, [r7, #6]
 800736a:	4613      	mov	r3, r2
 800736c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800736e:	88bb      	ldrh	r3, [r7, #4]
 8007370:	3301      	adds	r3, #1
 8007372:	085b      	lsrs	r3, r3, #1
 8007374:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800737e:	88fa      	ldrh	r2, [r7, #6]
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	4413      	add	r3, r2
 8007384:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007388:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800738e:	e01b      	b.n	80073c8 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	3301      	adds	r3, #1
 800739a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	021b      	lsls	r3, r3, #8
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	461a      	mov	r2, r3
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80073b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b8:	3302      	adds	r3, #2
 80073ba:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80073bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073be:	3301      	adds	r3, #1
 80073c0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80073c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c4:	3b01      	subs	r3, #1
 80073c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1e0      	bne.n	8007390 <USB_WritePMA+0x38>
  }
}
 80073ce:	bf00      	nop
 80073d0:	3734      	adds	r7, #52	; 0x34
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80073da:	b480      	push	{r7}
 80073dc:	b08b      	sub	sp, #44	; 0x2c
 80073de:	af00      	add	r7, sp, #0
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	60b9      	str	r1, [r7, #8]
 80073e4:	4611      	mov	r1, r2
 80073e6:	461a      	mov	r2, r3
 80073e8:	460b      	mov	r3, r1
 80073ea:	80fb      	strh	r3, [r7, #6]
 80073ec:	4613      	mov	r3, r2
 80073ee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80073f0:	88bb      	ldrh	r3, [r7, #4]
 80073f2:	085b      	lsrs	r3, r3, #1
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007400:	88fa      	ldrh	r2, [r7, #6]
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	4413      	add	r3, r2
 8007406:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800740a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	627b      	str	r3, [r7, #36]	; 0x24
 8007410:	e018      	b.n	8007444 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007412:	6a3b      	ldr	r3, [r7, #32]
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	b29b      	uxth	r3, r3
 8007418:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	3302      	adds	r3, #2
 800741e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	b2da      	uxtb	r2, r3
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	3301      	adds	r3, #1
 800742c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	0a1b      	lsrs	r3, r3, #8
 8007432:	b2da      	uxtb	r2, r3
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	3301      	adds	r3, #1
 800743c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800743e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007440:	3b01      	subs	r3, #1
 8007442:	627b      	str	r3, [r7, #36]	; 0x24
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1e3      	bne.n	8007412 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800744a:	88bb      	ldrh	r3, [r7, #4]
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	b29b      	uxth	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	d007      	beq.n	8007466 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	b29b      	uxth	r3, r3
 800745c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	b2da      	uxtb	r2, r3
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	701a      	strb	r2, [r3, #0]
  }
}
 8007466:	bf00      	nop
 8007468:	372c      	adds	r7, #44	; 0x2c
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b084      	sub	sp, #16
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	460b      	mov	r3, r1
 800747c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800747e:	2300      	movs	r3, #0
 8007480:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	7c1b      	ldrb	r3, [r3, #16]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d115      	bne.n	80074b6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800748a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800748e:	2202      	movs	r2, #2
 8007490:	2181      	movs	r1, #129	; 0x81
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f001 ff06 	bl	80092a4 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800749e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074a2:	2202      	movs	r2, #2
 80074a4:	2101      	movs	r1, #1
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f001 fefc 	bl	80092a4 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80074b4:	e012      	b.n	80074dc <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80074b6:	2340      	movs	r3, #64	; 0x40
 80074b8:	2202      	movs	r2, #2
 80074ba:	2181      	movs	r1, #129	; 0x81
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f001 fef1 	bl	80092a4 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80074c8:	2340      	movs	r3, #64	; 0x40
 80074ca:	2202      	movs	r2, #2
 80074cc:	2101      	movs	r1, #1
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f001 fee8 	bl	80092a4 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80074dc:	2308      	movs	r3, #8
 80074de:	2203      	movs	r2, #3
 80074e0:	2182      	movs	r1, #130	; 0x82
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f001 fede 	bl	80092a4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80074ee:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80074f2:	f002 f8d1 	bl	8009698 <USBD_static_malloc>
 80074f6:	4602      	mov	r2, r0
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007504:	2b00      	cmp	r3, #0
 8007506:	d102      	bne.n	800750e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007508:	2301      	movs	r3, #1
 800750a:	73fb      	strb	r3, [r7, #15]
 800750c:	e026      	b.n	800755c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007514:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2200      	movs	r2, #0
 8007524:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	2200      	movs	r2, #0
 800752c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	7c1b      	ldrb	r3, [r3, #16]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d109      	bne.n	800754c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800753e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007542:	2101      	movs	r1, #1
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f002 f823 	bl	8009590 <USBD_LL_PrepareReceive>
 800754a:	e007      	b.n	800755c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007552:	2340      	movs	r3, #64	; 0x40
 8007554:	2101      	movs	r1, #1
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f002 f81a 	bl	8009590 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800755c:	7bfb      	ldrb	r3, [r7, #15]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b084      	sub	sp, #16
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
 800756e:	460b      	mov	r3, r1
 8007570:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007572:	2300      	movs	r3, #0
 8007574:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007576:	2181      	movs	r1, #129	; 0x81
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f001 fed1 	bl	8009320 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007584:	2101      	movs	r1, #1
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f001 feca 	bl	8009320 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007594:	2182      	movs	r1, #130	; 0x82
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f001 fec2 	bl	8009320 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00e      	beq.n	80075ca <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075bc:	4618      	mov	r0, r3
 80075be:	f002 f879 	bl	80096b4 <USBD_static_free>
    pdev->pClassData = NULL;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80075ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3710      	adds	r7, #16
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80075ea:	2300      	movs	r3, #0
 80075ec:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d039      	beq.n	8007672 <USBD_CDC_Setup+0x9e>
 80075fe:	2b20      	cmp	r3, #32
 8007600:	d17c      	bne.n	80076fc <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	88db      	ldrh	r3, [r3, #6]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d029      	beq.n	800765e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	b25b      	sxtb	r3, r3
 8007610:	2b00      	cmp	r3, #0
 8007612:	da11      	bge.n	8007638 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007620:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	88d2      	ldrh	r2, [r2, #6]
 8007626:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007628:	6939      	ldr	r1, [r7, #16]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	88db      	ldrh	r3, [r3, #6]
 800762e:	461a      	mov	r2, r3
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f001 fa2b 	bl	8008a8c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007636:	e068      	b.n	800770a <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	785a      	ldrb	r2, [r3, #1]
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	88db      	ldrh	r3, [r3, #6]
 8007646:	b2da      	uxtb	r2, r3
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800764e:	6939      	ldr	r1, [r7, #16]
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	88db      	ldrh	r3, [r3, #6]
 8007654:	461a      	mov	r2, r3
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f001 fa46 	bl	8008ae8 <USBD_CtlPrepareRx>
      break;
 800765c:	e055      	b.n	800770a <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	7850      	ldrb	r0, [r2, #1]
 800766a:	2200      	movs	r2, #0
 800766c:	6839      	ldr	r1, [r7, #0]
 800766e:	4798      	blx	r3
      break;
 8007670:	e04b      	b.n	800770a <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	785b      	ldrb	r3, [r3, #1]
 8007676:	2b0a      	cmp	r3, #10
 8007678:	d017      	beq.n	80076aa <USBD_CDC_Setup+0xd6>
 800767a:	2b0b      	cmp	r3, #11
 800767c:	d029      	beq.n	80076d2 <USBD_CDC_Setup+0xfe>
 800767e:	2b00      	cmp	r3, #0
 8007680:	d133      	bne.n	80076ea <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007688:	2b03      	cmp	r3, #3
 800768a:	d107      	bne.n	800769c <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800768c:	f107 030c 	add.w	r3, r7, #12
 8007690:	2202      	movs	r2, #2
 8007692:	4619      	mov	r1, r3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f001 f9f9 	bl	8008a8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800769a:	e02e      	b.n	80076fa <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f001 f989 	bl	80089b6 <USBD_CtlError>
            ret = USBD_FAIL;
 80076a4:	2302      	movs	r3, #2
 80076a6:	75fb      	strb	r3, [r7, #23]
          break;
 80076a8:	e027      	b.n	80076fa <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076b0:	2b03      	cmp	r3, #3
 80076b2:	d107      	bne.n	80076c4 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80076b4:	f107 030f 	add.w	r3, r7, #15
 80076b8:	2201      	movs	r2, #1
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f001 f9e5 	bl	8008a8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076c2:	e01a      	b.n	80076fa <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80076c4:	6839      	ldr	r1, [r7, #0]
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f001 f975 	bl	80089b6 <USBD_CtlError>
            ret = USBD_FAIL;
 80076cc:	2302      	movs	r3, #2
 80076ce:	75fb      	strb	r3, [r7, #23]
          break;
 80076d0:	e013      	b.n	80076fa <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d8:	2b03      	cmp	r3, #3
 80076da:	d00d      	beq.n	80076f8 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f001 f969 	bl	80089b6 <USBD_CtlError>
            ret = USBD_FAIL;
 80076e4:	2302      	movs	r3, #2
 80076e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80076e8:	e006      	b.n	80076f8 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80076ea:	6839      	ldr	r1, [r7, #0]
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f001 f962 	bl	80089b6 <USBD_CtlError>
          ret = USBD_FAIL;
 80076f2:	2302      	movs	r3, #2
 80076f4:	75fb      	strb	r3, [r7, #23]
          break;
 80076f6:	e000      	b.n	80076fa <USBD_CDC_Setup+0x126>
          break;
 80076f8:	bf00      	nop
      }
      break;
 80076fa:	e006      	b.n	800770a <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80076fc:	6839      	ldr	r1, [r7, #0]
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f001 f959 	bl	80089b6 <USBD_CtlError>
      ret = USBD_FAIL;
 8007704:	2302      	movs	r3, #2
 8007706:	75fb      	strb	r3, [r7, #23]
      break;
 8007708:	bf00      	nop
  }

  return ret;
 800770a:	7dfb      	ldrb	r3, [r7, #23]
}
 800770c:	4618      	mov	r0, r3
 800770e:	3718      	adds	r7, #24
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	460b      	mov	r3, r1
 800771e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007726:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800772e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007736:	2b00      	cmp	r3, #0
 8007738:	d037      	beq.n	80077aa <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800773a:	78fa      	ldrb	r2, [r7, #3]
 800773c:	6879      	ldr	r1, [r7, #4]
 800773e:	4613      	mov	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	440b      	add	r3, r1
 8007748:	331c      	adds	r3, #28
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d026      	beq.n	800779e <USBD_CDC_DataIn+0x8a>
 8007750:	78fa      	ldrb	r2, [r7, #3]
 8007752:	6879      	ldr	r1, [r7, #4]
 8007754:	4613      	mov	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4413      	add	r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	440b      	add	r3, r1
 800775e:	331c      	adds	r3, #28
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	78fa      	ldrb	r2, [r7, #3]
 8007764:	68b9      	ldr	r1, [r7, #8]
 8007766:	0152      	lsls	r2, r2, #5
 8007768:	440a      	add	r2, r1
 800776a:	3238      	adds	r2, #56	; 0x38
 800776c:	6812      	ldr	r2, [r2, #0]
 800776e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007772:	fb02 f201 	mul.w	r2, r2, r1
 8007776:	1a9b      	subs	r3, r3, r2
 8007778:	2b00      	cmp	r3, #0
 800777a:	d110      	bne.n	800779e <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800777c:	78fa      	ldrb	r2, [r7, #3]
 800777e:	6879      	ldr	r1, [r7, #4]
 8007780:	4613      	mov	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4413      	add	r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	440b      	add	r3, r1
 800778a:	331c      	adds	r3, #28
 800778c:	2200      	movs	r2, #0
 800778e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007790:	78f9      	ldrb	r1, [r7, #3]
 8007792:	2300      	movs	r3, #0
 8007794:	2200      	movs	r2, #0
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f001 fec0 	bl	800951c <USBD_LL_Transmit>
 800779c:	e003      	b.n	80077a6 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	e000      	b.n	80077ac <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 80077aa:	2302      	movs	r3, #2
  }
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	460b      	mov	r3, r1
 80077be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80077c8:	78fb      	ldrb	r3, [r7, #3]
 80077ca:	4619      	mov	r1, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f001 ff19 	bl	8009604 <USBD_LL_GetRxDataSize>
 80077d2:	4602      	mov	r2, r0
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00d      	beq.n	8007800 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80077f8:	4611      	mov	r1, r2
 80077fa:	4798      	blx	r3

    return USBD_OK;
 80077fc:	2300      	movs	r3, #0
 80077fe:	e000      	b.n	8007802 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007800:	2302      	movs	r3, #2
  }
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007818:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007820:	2b00      	cmp	r3, #0
 8007822:	d015      	beq.n	8007850 <USBD_CDC_EP0_RxReady+0x46>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800782a:	2bff      	cmp	r3, #255	; 0xff
 800782c:	d010      	beq.n	8007850 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800783c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007844:	b292      	uxth	r2, r2
 8007846:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	22ff      	movs	r2, #255	; 0xff
 800784c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
	...

0800785c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2243      	movs	r2, #67	; 0x43
 8007868:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800786a:	4b03      	ldr	r3, [pc, #12]	; (8007878 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800786c:	4618      	mov	r0, r3
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr
 8007878:	20000094 	.word	0x20000094

0800787c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2243      	movs	r2, #67	; 0x43
 8007888:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800788a:	4b03      	ldr	r3, [pc, #12]	; (8007898 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800788c:	4618      	mov	r0, r3
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr
 8007898:	20000050 	.word	0x20000050

0800789c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2243      	movs	r2, #67	; 0x43
 80078a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80078aa:	4b03      	ldr	r3, [pc, #12]	; (80078b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr
 80078b8:	200000d8 	.word	0x200000d8

080078bc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	220a      	movs	r2, #10
 80078c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80078ca:	4b03      	ldr	r3, [pc, #12]	; (80078d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr
 80078d8:	2000000c 	.word	0x2000000c

080078dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80078e6:	2302      	movs	r3, #2
 80078e8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d005      	beq.n	80078fc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3714      	adds	r7, #20
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr

0800790a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800790a:	b480      	push	{r7}
 800790c:	b087      	sub	sp, #28
 800790e:	af00      	add	r7, sp, #0
 8007910:	60f8      	str	r0, [r7, #12]
 8007912:	60b9      	str	r1, [r7, #8]
 8007914:	4613      	mov	r3, r2
 8007916:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800791e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007928:	88fa      	ldrh	r2, [r7, #6]
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	371c      	adds	r7, #28
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800793e:	b480      	push	{r7}
 8007940:	b085      	sub	sp, #20
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800794e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3714      	adds	r7, #20
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b084      	sub	sp, #16
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007974:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800797c:	2b00      	cmp	r3, #0
 800797e:	d01c      	beq.n	80079ba <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007986:	2b00      	cmp	r3, #0
 8007988:	d115      	bne.n	80079b6 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2201      	movs	r2, #1
 800798e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	2181      	movs	r1, #129	; 0x81
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f001 fdb5 	bl	800951c <USBD_LL_Transmit>

      return USBD_OK;
 80079b2:	2300      	movs	r3, #0
 80079b4:	e002      	b.n	80079bc <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e000      	b.n	80079bc <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80079ba:	2302      	movs	r3, #2
  }
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d017      	beq.n	8007a0e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	7c1b      	ldrb	r3, [r3, #16]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d109      	bne.n	80079fa <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079f0:	2101      	movs	r1, #1
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f001 fdcc 	bl	8009590 <USBD_LL_PrepareReceive>
 80079f8:	e007      	b.n	8007a0a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a00:	2340      	movs	r3, #64	; 0x40
 8007a02:	2101      	movs	r1, #1
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f001 fdc3 	bl	8009590 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	e000      	b.n	8007a10 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007a0e:	2302      	movs	r3, #2
  }
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	4613      	mov	r3, r2
 8007a24:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d101      	bne.n	8007a30 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	e01a      	b.n	8007a66 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d003      	beq.n	8007a50 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	79fa      	ldrb	r2, [r7, #7]
 8007a5c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f001 fb8c 	bl	800917c <USBD_LL_Init>

  return USBD_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b085      	sub	sp, #20
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d006      	beq.n	8007a90 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	683a      	ldr	r2, [r7, #0]
 8007a86:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	73fb      	strb	r3, [r7, #15]
 8007a8e:	e001      	b.n	8007a94 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007a90:	2302      	movs	r3, #2
 8007a92:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3714      	adds	r7, #20
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr

08007aa2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b082      	sub	sp, #8
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f001 fbc8 	bl	8009240 <USBD_LL_Start>

  return USBD_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b083      	sub	sp, #12
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007adc:	2302      	movs	r3, #2
 8007ade:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00c      	beq.n	8007b04 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	78fa      	ldrb	r2, [r7, #3]
 8007af4:	4611      	mov	r1, r2
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	4798      	blx	r3
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d101      	bne.n	8007b04 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b082      	sub	sp, #8
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	460b      	mov	r3, r1
 8007b18:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	78fa      	ldrb	r2, [r7, #3]
 8007b24:	4611      	mov	r1, r2
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	4798      	blx	r3

  return USBD_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b44:	6839      	ldr	r1, [r7, #0]
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 fef8 	bl	800893c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007b68:	f003 031f 	and.w	r3, r3, #31
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d00c      	beq.n	8007b8a <USBD_LL_SetupStage+0x56>
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d302      	bcc.n	8007b7a <USBD_LL_SetupStage+0x46>
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d010      	beq.n	8007b9a <USBD_LL_SetupStage+0x66>
 8007b78:	e017      	b.n	8007baa <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b80:	4619      	mov	r1, r3
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f9ce 	bl	8007f24 <USBD_StdDevReq>
      break;
 8007b88:	e01a      	b.n	8007bc0 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b90:	4619      	mov	r1, r3
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fa30 	bl	8007ff8 <USBD_StdItfReq>
      break;
 8007b98:	e012      	b.n	8007bc0 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fa6e 	bl	8008084 <USBD_StdEPReq>
      break;
 8007ba8:	e00a      	b.n	8007bc0 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007bb0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f001 fbe7 	bl	800938c <USBD_LL_StallEP>
      break;
 8007bbe:	bf00      	nop
  }

  return USBD_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3708      	adds	r7, #8
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b086      	sub	sp, #24
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	60f8      	str	r0, [r7, #12]
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	607a      	str	r2, [r7, #4]
 8007bd6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007bd8:	7afb      	ldrb	r3, [r7, #11]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d14b      	bne.n	8007c76 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007be4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007bec:	2b03      	cmp	r3, #3
 8007bee:	d134      	bne.n	8007c5a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	68da      	ldr	r2, [r3, #12]
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d919      	bls.n	8007c30 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	68da      	ldr	r2, [r3, #12]
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	1ad2      	subs	r2, r2, r3
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	68da      	ldr	r2, [r3, #12]
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d203      	bcs.n	8007c1e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	e002      	b.n	8007c24 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	461a      	mov	r2, r3
 8007c26:	6879      	ldr	r1, [r7, #4]
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 ff7b 	bl	8008b24 <USBD_CtlContinueRx>
 8007c2e:	e038      	b.n	8007ca2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00a      	beq.n	8007c52 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	d105      	bne.n	8007c52 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f000 ff78 	bl	8008b48 <USBD_CtlSendStatus>
 8007c58:	e023      	b.n	8007ca2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c60:	2b05      	cmp	r3, #5
 8007c62:	d11e      	bne.n	8007ca2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f001 fb8c 	bl	800938c <USBD_LL_StallEP>
 8007c74:	e015      	b.n	8007ca2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00d      	beq.n	8007c9e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007c88:	2b03      	cmp	r3, #3
 8007c8a:	d108      	bne.n	8007c9e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c92:	699b      	ldr	r3, [r3, #24]
 8007c94:	7afa      	ldrb	r2, [r7, #11]
 8007c96:	4611      	mov	r1, r2
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	4798      	blx	r3
 8007c9c:	e001      	b.n	8007ca2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	e000      	b.n	8007ca4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3718      	adds	r7, #24
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b086      	sub	sp, #24
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	607a      	str	r2, [r7, #4]
 8007cb8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007cba:	7afb      	ldrb	r3, [r7, #11]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d17f      	bne.n	8007dc0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	3314      	adds	r3, #20
 8007cc4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d15c      	bne.n	8007d8a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	68da      	ldr	r2, [r3, #12]
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d915      	bls.n	8007d08 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	68da      	ldr	r2, [r3, #12]
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	1ad2      	subs	r2, r2, r3
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	6879      	ldr	r1, [r7, #4]
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f000 fee5 	bl	8008ac4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	2100      	movs	r1, #0
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f001 fc45 	bl	8009590 <USBD_LL_PrepareReceive>
 8007d06:	e04e      	b.n	8007da6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	6912      	ldr	r2, [r2, #16]
 8007d10:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d14:	fb02 f201 	mul.w	r2, r2, r1
 8007d18:	1a9b      	subs	r3, r3, r2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d11c      	bne.n	8007d58 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	689a      	ldr	r2, [r3, #8]
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d316      	bcc.n	8007d58 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	689a      	ldr	r2, [r3, #8]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d20f      	bcs.n	8007d58 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007d38:	2200      	movs	r2, #0
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f000 fec1 	bl	8008ac4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	2100      	movs	r1, #0
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f001 fc1d 	bl	8009590 <USBD_LL_PrepareReceive>
 8007d56:	e026      	b.n	8007da6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00a      	beq.n	8007d7a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007d6a:	2b03      	cmp	r3, #3
 8007d6c:	d105      	bne.n	8007d7a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007d7a:	2180      	movs	r1, #128	; 0x80
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f001 fb05 	bl	800938c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f000 fef3 	bl	8008b6e <USBD_CtlReceiveStatus>
 8007d88:	e00d      	b.n	8007da6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d90:	2b04      	cmp	r3, #4
 8007d92:	d004      	beq.n	8007d9e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d103      	bne.n	8007da6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007d9e:	2180      	movs	r1, #128	; 0x80
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f001 faf3 	bl	800938c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d11d      	bne.n	8007dec <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f7ff fe82 	bl	8007aba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007dbe:	e015      	b.n	8007dec <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dc6:	695b      	ldr	r3, [r3, #20]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00d      	beq.n	8007de8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007dd2:	2b03      	cmp	r3, #3
 8007dd4:	d108      	bne.n	8007de8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	7afa      	ldrb	r2, [r7, #11]
 8007de0:	4611      	mov	r1, r2
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	4798      	blx	r3
 8007de6:	e001      	b.n	8007dec <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007de8:	2302      	movs	r3, #2
 8007dea:	e000      	b.n	8007dee <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3718      	adds	r7, #24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b082      	sub	sp, #8
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007dfe:	2340      	movs	r3, #64	; 0x40
 8007e00:	2200      	movs	r2, #0
 8007e02:	2100      	movs	r1, #0
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f001 fa4d 	bl	80092a4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2240      	movs	r2, #64	; 0x40
 8007e16:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e1a:	2340      	movs	r3, #64	; 0x40
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	2180      	movs	r1, #128	; 0x80
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f001 fa3f 	bl	80092a4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2240      	movs	r2, #64	; 0x40
 8007e30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d009      	beq.n	8007e6e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	6852      	ldr	r2, [r2, #4]
 8007e66:	b2d2      	uxtb	r2, r2
 8007e68:	4611      	mov	r1, r2
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	4798      	blx	r3
  }

  return USBD_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	460b      	mov	r3, r1
 8007e82:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	78fa      	ldrb	r2, [r7, #3]
 8007e88:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2204      	movs	r2, #4
 8007eb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	370c      	adds	r7, #12
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b083      	sub	sp, #12
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ed0:	2b04      	cmp	r3, #4
 8007ed2:	d105      	bne.n	8007ee0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	370c      	adds	r7, #12
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b082      	sub	sp, #8
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007efc:	2b03      	cmp	r3, #3
 8007efe:	d10b      	bne.n	8007f18 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f06:	69db      	ldr	r3, [r3, #28]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d005      	beq.n	8007f18 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f12:	69db      	ldr	r3, [r3, #28]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
	...

08007f24 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f3a:	2b20      	cmp	r3, #32
 8007f3c:	d004      	beq.n	8007f48 <USBD_StdDevReq+0x24>
 8007f3e:	2b40      	cmp	r3, #64	; 0x40
 8007f40:	d002      	beq.n	8007f48 <USBD_StdDevReq+0x24>
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d008      	beq.n	8007f58 <USBD_StdDevReq+0x34>
 8007f46:	e04c      	b.n	8007fe2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	6839      	ldr	r1, [r7, #0]
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	4798      	blx	r3
      break;
 8007f56:	e049      	b.n	8007fec <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	785b      	ldrb	r3, [r3, #1]
 8007f5c:	2b09      	cmp	r3, #9
 8007f5e:	d83a      	bhi.n	8007fd6 <USBD_StdDevReq+0xb2>
 8007f60:	a201      	add	r2, pc, #4	; (adr r2, 8007f68 <USBD_StdDevReq+0x44>)
 8007f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f66:	bf00      	nop
 8007f68:	08007fb9 	.word	0x08007fb9
 8007f6c:	08007fcd 	.word	0x08007fcd
 8007f70:	08007fd7 	.word	0x08007fd7
 8007f74:	08007fc3 	.word	0x08007fc3
 8007f78:	08007fd7 	.word	0x08007fd7
 8007f7c:	08007f9b 	.word	0x08007f9b
 8007f80:	08007f91 	.word	0x08007f91
 8007f84:	08007fd7 	.word	0x08007fd7
 8007f88:	08007faf 	.word	0x08007faf
 8007f8c:	08007fa5 	.word	0x08007fa5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007f90:	6839      	ldr	r1, [r7, #0]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f9d4 	bl	8008340 <USBD_GetDescriptor>
          break;
 8007f98:	e022      	b.n	8007fe0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 fb61 	bl	8008664 <USBD_SetAddress>
          break;
 8007fa2:	e01d      	b.n	8007fe0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007fa4:	6839      	ldr	r1, [r7, #0]
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fb9e 	bl	80086e8 <USBD_SetConfig>
          break;
 8007fac:	e018      	b.n	8007fe0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007fae:	6839      	ldr	r1, [r7, #0]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fc27 	bl	8008804 <USBD_GetConfig>
          break;
 8007fb6:	e013      	b.n	8007fe0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fc56 	bl	800886c <USBD_GetStatus>
          break;
 8007fc0:	e00e      	b.n	8007fe0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007fc2:	6839      	ldr	r1, [r7, #0]
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fc84 	bl	80088d2 <USBD_SetFeature>
          break;
 8007fca:	e009      	b.n	8007fe0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007fcc:	6839      	ldr	r1, [r7, #0]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fc93 	bl	80088fa <USBD_ClrFeature>
          break;
 8007fd4:	e004      	b.n	8007fe0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007fd6:	6839      	ldr	r1, [r7, #0]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 fcec 	bl	80089b6 <USBD_CtlError>
          break;
 8007fde:	bf00      	nop
      }
      break;
 8007fe0:	e004      	b.n	8007fec <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007fe2:	6839      	ldr	r1, [r7, #0]
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 fce6 	bl	80089b6 <USBD_CtlError>
      break;
 8007fea:	bf00      	nop
  }

  return ret;
 8007fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop

08007ff8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008002:	2300      	movs	r3, #0
 8008004:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800800e:	2b20      	cmp	r3, #32
 8008010:	d003      	beq.n	800801a <USBD_StdItfReq+0x22>
 8008012:	2b40      	cmp	r3, #64	; 0x40
 8008014:	d001      	beq.n	800801a <USBD_StdItfReq+0x22>
 8008016:	2b00      	cmp	r3, #0
 8008018:	d12a      	bne.n	8008070 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008020:	3b01      	subs	r3, #1
 8008022:	2b02      	cmp	r3, #2
 8008024:	d81d      	bhi.n	8008062 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	889b      	ldrh	r3, [r3, #4]
 800802a:	b2db      	uxtb	r3, r3
 800802c:	2b01      	cmp	r3, #1
 800802e:	d813      	bhi.n	8008058 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	4798      	blx	r3
 800803e:	4603      	mov	r3, r0
 8008040:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	88db      	ldrh	r3, [r3, #6]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d110      	bne.n	800806c <USBD_StdItfReq+0x74>
 800804a:	7bfb      	ldrb	r3, [r7, #15]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10d      	bne.n	800806c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fd79 	bl	8008b48 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008056:	e009      	b.n	800806c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fcab 	bl	80089b6 <USBD_CtlError>
          break;
 8008060:	e004      	b.n	800806c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8008062:	6839      	ldr	r1, [r7, #0]
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fca6 	bl	80089b6 <USBD_CtlError>
          break;
 800806a:	e000      	b.n	800806e <USBD_StdItfReq+0x76>
          break;
 800806c:	bf00      	nop
      }
      break;
 800806e:	e004      	b.n	800807a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8008070:	6839      	ldr	r1, [r7, #0]
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fc9f 	bl	80089b6 <USBD_CtlError>
      break;
 8008078:	bf00      	nop
  }

  return USBD_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	889b      	ldrh	r3, [r3, #4]
 8008096:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080a0:	2b20      	cmp	r3, #32
 80080a2:	d004      	beq.n	80080ae <USBD_StdEPReq+0x2a>
 80080a4:	2b40      	cmp	r3, #64	; 0x40
 80080a6:	d002      	beq.n	80080ae <USBD_StdEPReq+0x2a>
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d008      	beq.n	80080be <USBD_StdEPReq+0x3a>
 80080ac:	e13d      	b.n	800832a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	6839      	ldr	r1, [r7, #0]
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	4798      	blx	r3
      break;
 80080bc:	e13a      	b.n	8008334 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080c6:	2b20      	cmp	r3, #32
 80080c8:	d10a      	bne.n	80080e0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	4798      	blx	r3
 80080d8:	4603      	mov	r3, r0
 80080da:	73fb      	strb	r3, [r7, #15]

        return ret;
 80080dc:	7bfb      	ldrb	r3, [r7, #15]
 80080de:	e12a      	b.n	8008336 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	785b      	ldrb	r3, [r3, #1]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d03e      	beq.n	8008166 <USBD_StdEPReq+0xe2>
 80080e8:	2b03      	cmp	r3, #3
 80080ea:	d002      	beq.n	80080f2 <USBD_StdEPReq+0x6e>
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d070      	beq.n	80081d2 <USBD_StdEPReq+0x14e>
 80080f0:	e115      	b.n	800831e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d002      	beq.n	8008102 <USBD_StdEPReq+0x7e>
 80080fc:	2b03      	cmp	r3, #3
 80080fe:	d015      	beq.n	800812c <USBD_StdEPReq+0xa8>
 8008100:	e02b      	b.n	800815a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008102:	7bbb      	ldrb	r3, [r7, #14]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00c      	beq.n	8008122 <USBD_StdEPReq+0x9e>
 8008108:	7bbb      	ldrb	r3, [r7, #14]
 800810a:	2b80      	cmp	r3, #128	; 0x80
 800810c:	d009      	beq.n	8008122 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800810e:	7bbb      	ldrb	r3, [r7, #14]
 8008110:	4619      	mov	r1, r3
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f001 f93a 	bl	800938c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008118:	2180      	movs	r1, #128	; 0x80
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f001 f936 	bl	800938c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008120:	e020      	b.n	8008164 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fc46 	bl	80089b6 <USBD_CtlError>
              break;
 800812a:	e01b      	b.n	8008164 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	885b      	ldrh	r3, [r3, #2]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10e      	bne.n	8008152 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008134:	7bbb      	ldrb	r3, [r7, #14]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00b      	beq.n	8008152 <USBD_StdEPReq+0xce>
 800813a:	7bbb      	ldrb	r3, [r7, #14]
 800813c:	2b80      	cmp	r3, #128	; 0x80
 800813e:	d008      	beq.n	8008152 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	88db      	ldrh	r3, [r3, #6]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d104      	bne.n	8008152 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008148:	7bbb      	ldrb	r3, [r7, #14]
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f001 f91d 	bl	800938c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fcf8 	bl	8008b48 <USBD_CtlSendStatus>

              break;
 8008158:	e004      	b.n	8008164 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800815a:	6839      	ldr	r1, [r7, #0]
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 fc2a 	bl	80089b6 <USBD_CtlError>
              break;
 8008162:	bf00      	nop
          }
          break;
 8008164:	e0e0      	b.n	8008328 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800816c:	2b02      	cmp	r3, #2
 800816e:	d002      	beq.n	8008176 <USBD_StdEPReq+0xf2>
 8008170:	2b03      	cmp	r3, #3
 8008172:	d015      	beq.n	80081a0 <USBD_StdEPReq+0x11c>
 8008174:	e026      	b.n	80081c4 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008176:	7bbb      	ldrb	r3, [r7, #14]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00c      	beq.n	8008196 <USBD_StdEPReq+0x112>
 800817c:	7bbb      	ldrb	r3, [r7, #14]
 800817e:	2b80      	cmp	r3, #128	; 0x80
 8008180:	d009      	beq.n	8008196 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008182:	7bbb      	ldrb	r3, [r7, #14]
 8008184:	4619      	mov	r1, r3
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f001 f900 	bl	800938c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800818c:	2180      	movs	r1, #128	; 0x80
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f001 f8fc 	bl	800938c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008194:	e01c      	b.n	80081d0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008196:	6839      	ldr	r1, [r7, #0]
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fc0c 	bl	80089b6 <USBD_CtlError>
              break;
 800819e:	e017      	b.n	80081d0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	885b      	ldrh	r3, [r3, #2]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d112      	bne.n	80081ce <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80081a8:	7bbb      	ldrb	r3, [r7, #14]
 80081aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d004      	beq.n	80081bc <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80081b2:	7bbb      	ldrb	r3, [r7, #14]
 80081b4:	4619      	mov	r1, r3
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f001 f91e 	bl	80093f8 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fcc3 	bl	8008b48 <USBD_CtlSendStatus>
              }
              break;
 80081c2:	e004      	b.n	80081ce <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80081c4:	6839      	ldr	r1, [r7, #0]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fbf5 	bl	80089b6 <USBD_CtlError>
              break;
 80081cc:	e000      	b.n	80081d0 <USBD_StdEPReq+0x14c>
              break;
 80081ce:	bf00      	nop
          }
          break;
 80081d0:	e0aa      	b.n	8008328 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d002      	beq.n	80081e2 <USBD_StdEPReq+0x15e>
 80081dc:	2b03      	cmp	r3, #3
 80081de:	d032      	beq.n	8008246 <USBD_StdEPReq+0x1c2>
 80081e0:	e097      	b.n	8008312 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081e2:	7bbb      	ldrb	r3, [r7, #14]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d007      	beq.n	80081f8 <USBD_StdEPReq+0x174>
 80081e8:	7bbb      	ldrb	r3, [r7, #14]
 80081ea:	2b80      	cmp	r3, #128	; 0x80
 80081ec:	d004      	beq.n	80081f8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80081ee:	6839      	ldr	r1, [r7, #0]
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fbe0 	bl	80089b6 <USBD_CtlError>
                break;
 80081f6:	e091      	b.n	800831c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	da0b      	bge.n	8008218 <USBD_StdEPReq+0x194>
 8008200:	7bbb      	ldrb	r3, [r7, #14]
 8008202:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008206:	4613      	mov	r3, r2
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	3310      	adds	r3, #16
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	4413      	add	r3, r2
 8008214:	3304      	adds	r3, #4
 8008216:	e00b      	b.n	8008230 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008218:	7bbb      	ldrb	r3, [r7, #14]
 800821a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800821e:	4613      	mov	r3, r2
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	4413      	add	r3, r2
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	4413      	add	r3, r2
 800822e:	3304      	adds	r3, #4
 8008230:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	2200      	movs	r2, #0
 8008236:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	2202      	movs	r2, #2
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fc24 	bl	8008a8c <USBD_CtlSendData>
              break;
 8008244:	e06a      	b.n	800831c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008246:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800824a:	2b00      	cmp	r3, #0
 800824c:	da11      	bge.n	8008272 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800824e:	7bbb      	ldrb	r3, [r7, #14]
 8008250:	f003 020f 	and.w	r2, r3, #15
 8008254:	6879      	ldr	r1, [r7, #4]
 8008256:	4613      	mov	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	4413      	add	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	440b      	add	r3, r1
 8008260:	3318      	adds	r3, #24
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d117      	bne.n	8008298 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008268:	6839      	ldr	r1, [r7, #0]
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fba3 	bl	80089b6 <USBD_CtlError>
                  break;
 8008270:	e054      	b.n	800831c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008272:	7bbb      	ldrb	r3, [r7, #14]
 8008274:	f003 020f 	and.w	r2, r3, #15
 8008278:	6879      	ldr	r1, [r7, #4]
 800827a:	4613      	mov	r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4413      	add	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	440b      	add	r3, r1
 8008284:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d104      	bne.n	8008298 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fb90 	bl	80089b6 <USBD_CtlError>
                  break;
 8008296:	e041      	b.n	800831c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008298:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800829c:	2b00      	cmp	r3, #0
 800829e:	da0b      	bge.n	80082b8 <USBD_StdEPReq+0x234>
 80082a0:	7bbb      	ldrb	r3, [r7, #14]
 80082a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082a6:	4613      	mov	r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	3310      	adds	r3, #16
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	4413      	add	r3, r2
 80082b4:	3304      	adds	r3, #4
 80082b6:	e00b      	b.n	80082d0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082b8:	7bbb      	ldrb	r3, [r7, #14]
 80082ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082be:	4613      	mov	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4413      	add	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	4413      	add	r3, r2
 80082ce:	3304      	adds	r3, #4
 80082d0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80082d2:	7bbb      	ldrb	r3, [r7, #14]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d002      	beq.n	80082de <USBD_StdEPReq+0x25a>
 80082d8:	7bbb      	ldrb	r3, [r7, #14]
 80082da:	2b80      	cmp	r3, #128	; 0x80
 80082dc:	d103      	bne.n	80082e6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	2200      	movs	r2, #0
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	e00e      	b.n	8008304 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80082e6:	7bbb      	ldrb	r3, [r7, #14]
 80082e8:	4619      	mov	r1, r3
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f001 f8ba 	bl	8009464 <USBD_LL_IsStallEP>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d003      	beq.n	80082fe <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	2201      	movs	r2, #1
 80082fa:	601a      	str	r2, [r3, #0]
 80082fc:	e002      	b.n	8008304 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	2200      	movs	r2, #0
 8008302:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	2202      	movs	r2, #2
 8008308:	4619      	mov	r1, r3
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fbbe 	bl	8008a8c <USBD_CtlSendData>
              break;
 8008310:	e004      	b.n	800831c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008312:	6839      	ldr	r1, [r7, #0]
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fb4e 	bl	80089b6 <USBD_CtlError>
              break;
 800831a:	bf00      	nop
          }
          break;
 800831c:	e004      	b.n	8008328 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800831e:	6839      	ldr	r1, [r7, #0]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fb48 	bl	80089b6 <USBD_CtlError>
          break;
 8008326:	bf00      	nop
      }
      break;
 8008328:	e004      	b.n	8008334 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800832a:	6839      	ldr	r1, [r7, #0]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fb42 	bl	80089b6 <USBD_CtlError>
      break;
 8008332:	bf00      	nop
  }

  return ret;
 8008334:	7bfb      	ldrb	r3, [r7, #15]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
	...

08008340 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800834a:	2300      	movs	r3, #0
 800834c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800834e:	2300      	movs	r3, #0
 8008350:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008352:	2300      	movs	r3, #0
 8008354:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	885b      	ldrh	r3, [r3, #2]
 800835a:	0a1b      	lsrs	r3, r3, #8
 800835c:	b29b      	uxth	r3, r3
 800835e:	3b01      	subs	r3, #1
 8008360:	2b0e      	cmp	r3, #14
 8008362:	f200 8152 	bhi.w	800860a <USBD_GetDescriptor+0x2ca>
 8008366:	a201      	add	r2, pc, #4	; (adr r2, 800836c <USBD_GetDescriptor+0x2c>)
 8008368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836c:	080083dd 	.word	0x080083dd
 8008370:	080083f5 	.word	0x080083f5
 8008374:	08008435 	.word	0x08008435
 8008378:	0800860b 	.word	0x0800860b
 800837c:	0800860b 	.word	0x0800860b
 8008380:	080085ab 	.word	0x080085ab
 8008384:	080085d7 	.word	0x080085d7
 8008388:	0800860b 	.word	0x0800860b
 800838c:	0800860b 	.word	0x0800860b
 8008390:	0800860b 	.word	0x0800860b
 8008394:	0800860b 	.word	0x0800860b
 8008398:	0800860b 	.word	0x0800860b
 800839c:	0800860b 	.word	0x0800860b
 80083a0:	0800860b 	.word	0x0800860b
 80083a4:	080083a9 	.word	0x080083a9
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083ae:	69db      	ldr	r3, [r3, #28]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00b      	beq.n	80083cc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083ba:	69db      	ldr	r3, [r3, #28]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	7c12      	ldrb	r2, [r2, #16]
 80083c0:	f107 0108 	add.w	r1, r7, #8
 80083c4:	4610      	mov	r0, r2
 80083c6:	4798      	blx	r3
 80083c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083ca:	e126      	b.n	800861a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 faf1 	bl	80089b6 <USBD_CtlError>
        err++;
 80083d4:	7afb      	ldrb	r3, [r7, #11]
 80083d6:	3301      	adds	r3, #1
 80083d8:	72fb      	strb	r3, [r7, #11]
      break;
 80083da:	e11e      	b.n	800861a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	7c12      	ldrb	r2, [r2, #16]
 80083e8:	f107 0108 	add.w	r1, r7, #8
 80083ec:	4610      	mov	r0, r2
 80083ee:	4798      	blx	r3
 80083f0:	60f8      	str	r0, [r7, #12]
      break;
 80083f2:	e112      	b.n	800861a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	7c1b      	ldrb	r3, [r3, #16]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10d      	bne.n	8008418 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008404:	f107 0208 	add.w	r2, r7, #8
 8008408:	4610      	mov	r0, r2
 800840a:	4798      	blx	r3
 800840c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	3301      	adds	r3, #1
 8008412:	2202      	movs	r2, #2
 8008414:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008416:	e100      	b.n	800861a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800841e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008420:	f107 0208 	add.w	r2, r7, #8
 8008424:	4610      	mov	r0, r2
 8008426:	4798      	blx	r3
 8008428:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	3301      	adds	r3, #1
 800842e:	2202      	movs	r2, #2
 8008430:	701a      	strb	r2, [r3, #0]
      break;
 8008432:	e0f2      	b.n	800861a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	885b      	ldrh	r3, [r3, #2]
 8008438:	b2db      	uxtb	r3, r3
 800843a:	2b05      	cmp	r3, #5
 800843c:	f200 80ac 	bhi.w	8008598 <USBD_GetDescriptor+0x258>
 8008440:	a201      	add	r2, pc, #4	; (adr r2, 8008448 <USBD_GetDescriptor+0x108>)
 8008442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008446:	bf00      	nop
 8008448:	08008461 	.word	0x08008461
 800844c:	08008495 	.word	0x08008495
 8008450:	080084c9 	.word	0x080084c9
 8008454:	080084fd 	.word	0x080084fd
 8008458:	08008531 	.word	0x08008531
 800845c:	08008565 	.word	0x08008565
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d00b      	beq.n	8008484 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	7c12      	ldrb	r2, [r2, #16]
 8008478:	f107 0108 	add.w	r1, r7, #8
 800847c:	4610      	mov	r0, r2
 800847e:	4798      	blx	r3
 8008480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008482:	e091      	b.n	80085a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008484:	6839      	ldr	r1, [r7, #0]
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fa95 	bl	80089b6 <USBD_CtlError>
            err++;
 800848c:	7afb      	ldrb	r3, [r7, #11]
 800848e:	3301      	adds	r3, #1
 8008490:	72fb      	strb	r3, [r7, #11]
          break;
 8008492:	e089      	b.n	80085a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00b      	beq.n	80084b8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	7c12      	ldrb	r2, [r2, #16]
 80084ac:	f107 0108 	add.w	r1, r7, #8
 80084b0:	4610      	mov	r0, r2
 80084b2:	4798      	blx	r3
 80084b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084b6:	e077      	b.n	80085a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084b8:	6839      	ldr	r1, [r7, #0]
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fa7b 	bl	80089b6 <USBD_CtlError>
            err++;
 80084c0:	7afb      	ldrb	r3, [r7, #11]
 80084c2:	3301      	adds	r3, #1
 80084c4:	72fb      	strb	r3, [r7, #11]
          break;
 80084c6:	e06f      	b.n	80085a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00b      	beq.n	80084ec <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	7c12      	ldrb	r2, [r2, #16]
 80084e0:	f107 0108 	add.w	r1, r7, #8
 80084e4:	4610      	mov	r0, r2
 80084e6:	4798      	blx	r3
 80084e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084ea:	e05d      	b.n	80085a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fa61 	bl	80089b6 <USBD_CtlError>
            err++;
 80084f4:	7afb      	ldrb	r3, [r7, #11]
 80084f6:	3301      	adds	r3, #1
 80084f8:	72fb      	strb	r3, [r7, #11]
          break;
 80084fa:	e055      	b.n	80085a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00b      	beq.n	8008520 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	7c12      	ldrb	r2, [r2, #16]
 8008514:	f107 0108 	add.w	r1, r7, #8
 8008518:	4610      	mov	r0, r2
 800851a:	4798      	blx	r3
 800851c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800851e:	e043      	b.n	80085a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fa47 	bl	80089b6 <USBD_CtlError>
            err++;
 8008528:	7afb      	ldrb	r3, [r7, #11]
 800852a:	3301      	adds	r3, #1
 800852c:	72fb      	strb	r3, [r7, #11]
          break;
 800852e:	e03b      	b.n	80085a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008536:	695b      	ldr	r3, [r3, #20]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00b      	beq.n	8008554 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008542:	695b      	ldr	r3, [r3, #20]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	7c12      	ldrb	r2, [r2, #16]
 8008548:	f107 0108 	add.w	r1, r7, #8
 800854c:	4610      	mov	r0, r2
 800854e:	4798      	blx	r3
 8008550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008552:	e029      	b.n	80085a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008554:	6839      	ldr	r1, [r7, #0]
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fa2d 	bl	80089b6 <USBD_CtlError>
            err++;
 800855c:	7afb      	ldrb	r3, [r7, #11]
 800855e:	3301      	adds	r3, #1
 8008560:	72fb      	strb	r3, [r7, #11]
          break;
 8008562:	e021      	b.n	80085a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00b      	beq.n	8008588 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	7c12      	ldrb	r2, [r2, #16]
 800857c:	f107 0108 	add.w	r1, r7, #8
 8008580:	4610      	mov	r0, r2
 8008582:	4798      	blx	r3
 8008584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008586:	e00f      	b.n	80085a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fa13 	bl	80089b6 <USBD_CtlError>
            err++;
 8008590:	7afb      	ldrb	r3, [r7, #11]
 8008592:	3301      	adds	r3, #1
 8008594:	72fb      	strb	r3, [r7, #11]
          break;
 8008596:	e007      	b.n	80085a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008598:	6839      	ldr	r1, [r7, #0]
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 fa0b 	bl	80089b6 <USBD_CtlError>
          err++;
 80085a0:	7afb      	ldrb	r3, [r7, #11]
 80085a2:	3301      	adds	r3, #1
 80085a4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80085a6:	e038      	b.n	800861a <USBD_GetDescriptor+0x2da>
 80085a8:	e037      	b.n	800861a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	7c1b      	ldrb	r3, [r3, #16]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d109      	bne.n	80085c6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ba:	f107 0208 	add.w	r2, r7, #8
 80085be:	4610      	mov	r0, r2
 80085c0:	4798      	blx	r3
 80085c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085c4:	e029      	b.n	800861a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80085c6:	6839      	ldr	r1, [r7, #0]
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f9f4 	bl	80089b6 <USBD_CtlError>
        err++;
 80085ce:	7afb      	ldrb	r3, [r7, #11]
 80085d0:	3301      	adds	r3, #1
 80085d2:	72fb      	strb	r3, [r7, #11]
      break;
 80085d4:	e021      	b.n	800861a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	7c1b      	ldrb	r3, [r3, #16]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10d      	bne.n	80085fa <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e6:	f107 0208 	add.w	r2, r7, #8
 80085ea:	4610      	mov	r0, r2
 80085ec:	4798      	blx	r3
 80085ee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	3301      	adds	r3, #1
 80085f4:	2207      	movs	r2, #7
 80085f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085f8:	e00f      	b.n	800861a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80085fa:	6839      	ldr	r1, [r7, #0]
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 f9da 	bl	80089b6 <USBD_CtlError>
        err++;
 8008602:	7afb      	ldrb	r3, [r7, #11]
 8008604:	3301      	adds	r3, #1
 8008606:	72fb      	strb	r3, [r7, #11]
      break;
 8008608:	e007      	b.n	800861a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f9d2 	bl	80089b6 <USBD_CtlError>
      err++;
 8008612:	7afb      	ldrb	r3, [r7, #11]
 8008614:	3301      	adds	r3, #1
 8008616:	72fb      	strb	r3, [r7, #11]
      break;
 8008618:	bf00      	nop
  }

  if (err != 0U)
 800861a:	7afb      	ldrb	r3, [r7, #11]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d11c      	bne.n	800865a <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008620:	893b      	ldrh	r3, [r7, #8]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d011      	beq.n	800864a <USBD_GetDescriptor+0x30a>
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	88db      	ldrh	r3, [r3, #6]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00d      	beq.n	800864a <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	88da      	ldrh	r2, [r3, #6]
 8008632:	893b      	ldrh	r3, [r7, #8]
 8008634:	4293      	cmp	r3, r2
 8008636:	bf28      	it	cs
 8008638:	4613      	movcs	r3, r2
 800863a:	b29b      	uxth	r3, r3
 800863c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800863e:	893b      	ldrh	r3, [r7, #8]
 8008640:	461a      	mov	r2, r3
 8008642:	68f9      	ldr	r1, [r7, #12]
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 fa21 	bl	8008a8c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	88db      	ldrh	r3, [r3, #6]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d104      	bne.n	800865c <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fa78 	bl	8008b48 <USBD_CtlSendStatus>
 8008658:	e000      	b.n	800865c <USBD_GetDescriptor+0x31c>
    return;
 800865a:	bf00      	nop
    }
  }
}
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop

08008664 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	889b      	ldrh	r3, [r3, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d130      	bne.n	80086d8 <USBD_SetAddress+0x74>
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	88db      	ldrh	r3, [r3, #6]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d12c      	bne.n	80086d8 <USBD_SetAddress+0x74>
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	885b      	ldrh	r3, [r3, #2]
 8008682:	2b7f      	cmp	r3, #127	; 0x7f
 8008684:	d828      	bhi.n	80086d8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	885b      	ldrh	r3, [r3, #2]
 800868a:	b2db      	uxtb	r3, r3
 800868c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008690:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008698:	2b03      	cmp	r3, #3
 800869a:	d104      	bne.n	80086a6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800869c:	6839      	ldr	r1, [r7, #0]
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f989 	bl	80089b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086a4:	e01c      	b.n	80086e0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	7bfa      	ldrb	r2, [r7, #15]
 80086aa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80086ae:	7bfb      	ldrb	r3, [r7, #15]
 80086b0:	4619      	mov	r1, r3
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fefc 	bl	80094b0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fa45 	bl	8008b48 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80086be:	7bfb      	ldrb	r3, [r7, #15]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d004      	beq.n	80086ce <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2202      	movs	r2, #2
 80086c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086cc:	e008      	b.n	80086e0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2201      	movs	r2, #1
 80086d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086d6:	e003      	b.n	80086e0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80086d8:	6839      	ldr	r1, [r7, #0]
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 f96b 	bl	80089b6 <USBD_CtlError>
  }
}
 80086e0:	bf00      	nop
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	885b      	ldrh	r3, [r3, #2]
 80086f6:	b2da      	uxtb	r2, r3
 80086f8:	4b41      	ldr	r3, [pc, #260]	; (8008800 <USBD_SetConfig+0x118>)
 80086fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80086fc:	4b40      	ldr	r3, [pc, #256]	; (8008800 <USBD_SetConfig+0x118>)
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d904      	bls.n	800870e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008704:	6839      	ldr	r1, [r7, #0]
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 f955 	bl	80089b6 <USBD_CtlError>
 800870c:	e075      	b.n	80087fa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008714:	2b02      	cmp	r3, #2
 8008716:	d002      	beq.n	800871e <USBD_SetConfig+0x36>
 8008718:	2b03      	cmp	r3, #3
 800871a:	d023      	beq.n	8008764 <USBD_SetConfig+0x7c>
 800871c:	e062      	b.n	80087e4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800871e:	4b38      	ldr	r3, [pc, #224]	; (8008800 <USBD_SetConfig+0x118>)
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d01a      	beq.n	800875c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008726:	4b36      	ldr	r3, [pc, #216]	; (8008800 <USBD_SetConfig+0x118>)
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	461a      	mov	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2203      	movs	r2, #3
 8008734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008738:	4b31      	ldr	r3, [pc, #196]	; (8008800 <USBD_SetConfig+0x118>)
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	4619      	mov	r1, r3
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7ff f9c6 	bl	8007ad0 <USBD_SetClassConfig>
 8008744:	4603      	mov	r3, r0
 8008746:	2b02      	cmp	r3, #2
 8008748:	d104      	bne.n	8008754 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800874a:	6839      	ldr	r1, [r7, #0]
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 f932 	bl	80089b6 <USBD_CtlError>
            return;
 8008752:	e052      	b.n	80087fa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f9f7 	bl	8008b48 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800875a:	e04e      	b.n	80087fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 f9f3 	bl	8008b48 <USBD_CtlSendStatus>
        break;
 8008762:	e04a      	b.n	80087fa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008764:	4b26      	ldr	r3, [pc, #152]	; (8008800 <USBD_SetConfig+0x118>)
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d112      	bne.n	8008792 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2202      	movs	r2, #2
 8008770:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008774:	4b22      	ldr	r3, [pc, #136]	; (8008800 <USBD_SetConfig+0x118>)
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	461a      	mov	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800877e:	4b20      	ldr	r3, [pc, #128]	; (8008800 <USBD_SetConfig+0x118>)
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	4619      	mov	r1, r3
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f7ff f9c2 	bl	8007b0e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f9dc 	bl	8008b48 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008790:	e033      	b.n	80087fa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008792:	4b1b      	ldr	r3, [pc, #108]	; (8008800 <USBD_SetConfig+0x118>)
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	461a      	mov	r2, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	429a      	cmp	r2, r3
 800879e:	d01d      	beq.n	80087dc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	4619      	mov	r1, r3
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f7ff f9b0 	bl	8007b0e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80087ae:	4b14      	ldr	r3, [pc, #80]	; (8008800 <USBD_SetConfig+0x118>)
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	461a      	mov	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80087b8:	4b11      	ldr	r3, [pc, #68]	; (8008800 <USBD_SetConfig+0x118>)
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	4619      	mov	r1, r3
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f7ff f986 	bl	8007ad0 <USBD_SetClassConfig>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d104      	bne.n	80087d4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80087ca:	6839      	ldr	r1, [r7, #0]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 f8f2 	bl	80089b6 <USBD_CtlError>
            return;
 80087d2:	e012      	b.n	80087fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 f9b7 	bl	8008b48 <USBD_CtlSendStatus>
        break;
 80087da:	e00e      	b.n	80087fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 f9b3 	bl	8008b48 <USBD_CtlSendStatus>
        break;
 80087e2:	e00a      	b.n	80087fa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80087e4:	6839      	ldr	r1, [r7, #0]
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f8e5 	bl	80089b6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80087ec:	4b04      	ldr	r3, [pc, #16]	; (8008800 <USBD_SetConfig+0x118>)
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	4619      	mov	r1, r3
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7ff f98b 	bl	8007b0e <USBD_ClrClassConfig>
        break;
 80087f8:	bf00      	nop
    }
  }
}
 80087fa:	3708      	adds	r7, #8
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	20000311 	.word	0x20000311

08008804 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	88db      	ldrh	r3, [r3, #6]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d004      	beq.n	8008820 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008816:	6839      	ldr	r1, [r7, #0]
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 f8cc 	bl	80089b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800881e:	e021      	b.n	8008864 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008826:	2b01      	cmp	r3, #1
 8008828:	db17      	blt.n	800885a <USBD_GetConfig+0x56>
 800882a:	2b02      	cmp	r3, #2
 800882c:	dd02      	ble.n	8008834 <USBD_GetConfig+0x30>
 800882e:	2b03      	cmp	r3, #3
 8008830:	d00b      	beq.n	800884a <USBD_GetConfig+0x46>
 8008832:	e012      	b.n	800885a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	3308      	adds	r3, #8
 800883e:	2201      	movs	r2, #1
 8008840:	4619      	mov	r1, r3
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f922 	bl	8008a8c <USBD_CtlSendData>
        break;
 8008848:	e00c      	b.n	8008864 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	3304      	adds	r3, #4
 800884e:	2201      	movs	r2, #1
 8008850:	4619      	mov	r1, r3
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f91a 	bl	8008a8c <USBD_CtlSendData>
        break;
 8008858:	e004      	b.n	8008864 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800885a:	6839      	ldr	r1, [r7, #0]
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f8aa 	bl	80089b6 <USBD_CtlError>
        break;
 8008862:	bf00      	nop
}
 8008864:	bf00      	nop
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800887c:	3b01      	subs	r3, #1
 800887e:	2b02      	cmp	r3, #2
 8008880:	d81e      	bhi.n	80088c0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	88db      	ldrh	r3, [r3, #6]
 8008886:	2b02      	cmp	r3, #2
 8008888:	d004      	beq.n	8008894 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800888a:	6839      	ldr	r1, [r7, #0]
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f892 	bl	80089b6 <USBD_CtlError>
        break;
 8008892:	e01a      	b.n	80088ca <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d005      	beq.n	80088b0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	f043 0202 	orr.w	r2, r3, #2
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	330c      	adds	r3, #12
 80088b4:	2202      	movs	r2, #2
 80088b6:	4619      	mov	r1, r3
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f8e7 	bl	8008a8c <USBD_CtlSendData>
      break;
 80088be:	e004      	b.n	80088ca <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80088c0:	6839      	ldr	r1, [r7, #0]
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f877 	bl	80089b6 <USBD_CtlError>
      break;
 80088c8:	bf00      	nop
  }
}
 80088ca:	bf00      	nop
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	885b      	ldrh	r3, [r3, #2]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d106      	bne.n	80088f2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f92b 	bl	8008b48 <USBD_CtlSendStatus>
  }
}
 80088f2:	bf00      	nop
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b082      	sub	sp, #8
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
 8008902:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800890a:	3b01      	subs	r3, #1
 800890c:	2b02      	cmp	r3, #2
 800890e:	d80b      	bhi.n	8008928 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	885b      	ldrh	r3, [r3, #2]
 8008914:	2b01      	cmp	r3, #1
 8008916:	d10c      	bne.n	8008932 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f911 	bl	8008b48 <USBD_CtlSendStatus>
      }
      break;
 8008926:	e004      	b.n	8008932 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f843 	bl	80089b6 <USBD_CtlError>
      break;
 8008930:	e000      	b.n	8008934 <USBD_ClrFeature+0x3a>
      break;
 8008932:	bf00      	nop
  }
}
 8008934:	bf00      	nop
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	781a      	ldrb	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	785a      	ldrb	r2, [r3, #1]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	3302      	adds	r3, #2
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	b29a      	uxth	r2, r3
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	3303      	adds	r3, #3
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	b29b      	uxth	r3, r3
 8008966:	021b      	lsls	r3, r3, #8
 8008968:	b29b      	uxth	r3, r3
 800896a:	4413      	add	r3, r2
 800896c:	b29a      	uxth	r2, r3
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	3304      	adds	r3, #4
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	b29a      	uxth	r2, r3
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	3305      	adds	r3, #5
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	b29b      	uxth	r3, r3
 8008982:	021b      	lsls	r3, r3, #8
 8008984:	b29b      	uxth	r3, r3
 8008986:	4413      	add	r3, r2
 8008988:	b29a      	uxth	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	3306      	adds	r3, #6
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	b29a      	uxth	r2, r3
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	3307      	adds	r3, #7
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	b29b      	uxth	r3, r3
 800899e:	021b      	lsls	r3, r3, #8
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	4413      	add	r3, r2
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	80da      	strh	r2, [r3, #6]

}
 80089aa:	bf00      	nop
 80089ac:	370c      	adds	r7, #12
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr

080089b6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b082      	sub	sp, #8
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
 80089be:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80089c0:	2180      	movs	r1, #128	; 0x80
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fce2 	bl	800938c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80089c8:	2100      	movs	r1, #0
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fcde 	bl	800938c <USBD_LL_StallEP>
}
 80089d0:	bf00      	nop
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80089e4:	2300      	movs	r3, #0
 80089e6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d032      	beq.n	8008a54 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f000 f834 	bl	8008a5c <USBD_GetLen>
 80089f4:	4603      	mov	r3, r0
 80089f6:	3301      	adds	r3, #1
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	005b      	lsls	r3, r3, #1
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008a02:	7dfb      	ldrb	r3, [r7, #23]
 8008a04:	1c5a      	adds	r2, r3, #1
 8008a06:	75fa      	strb	r2, [r7, #23]
 8008a08:	461a      	mov	r2, r3
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	7812      	ldrb	r2, [r2, #0]
 8008a12:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008a14:	7dfb      	ldrb	r3, [r7, #23]
 8008a16:	1c5a      	adds	r2, r3, #1
 8008a18:	75fa      	strb	r2, [r7, #23]
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	4413      	add	r3, r2
 8008a20:	2203      	movs	r2, #3
 8008a22:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008a24:	e012      	b.n	8008a4c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	1c5a      	adds	r2, r3, #1
 8008a2a:	60fa      	str	r2, [r7, #12]
 8008a2c:	7dfa      	ldrb	r2, [r7, #23]
 8008a2e:	1c51      	adds	r1, r2, #1
 8008a30:	75f9      	strb	r1, [r7, #23]
 8008a32:	4611      	mov	r1, r2
 8008a34:	68ba      	ldr	r2, [r7, #8]
 8008a36:	440a      	add	r2, r1
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008a3c:	7dfb      	ldrb	r3, [r7, #23]
 8008a3e:	1c5a      	adds	r2, r3, #1
 8008a40:	75fa      	strb	r2, [r7, #23]
 8008a42:	461a      	mov	r2, r3
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	4413      	add	r3, r2
 8008a48:	2200      	movs	r2, #0
 8008a4a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1e8      	bne.n	8008a26 <USBD_GetString+0x4e>
    }
  }
}
 8008a54:	bf00      	nop
 8008a56:	3718      	adds	r7, #24
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008a64:	2300      	movs	r3, #0
 8008a66:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008a68:	e005      	b.n	8008a76 <USBD_GetLen+0x1a>
  {
    len++;
 8008a6a:	7bfb      	ldrb	r3, [r7, #15]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	3301      	adds	r3, #1
 8008a74:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d1f5      	bne.n	8008a6a <USBD_GetLen+0xe>
  }

  return len;
 8008a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3714      	adds	r7, #20
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	4613      	mov	r3, r2
 8008a98:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2202      	movs	r2, #2
 8008a9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008aa2:	88fa      	ldrh	r2, [r7, #6]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008aa8:	88fa      	ldrh	r2, [r7, #6]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008aae:	88fb      	ldrh	r3, [r7, #6]
 8008ab0:	68ba      	ldr	r2, [r7, #8]
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f000 fd31 	bl	800951c <USBD_LL_Transmit>

  return USBD_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ad2:	88fb      	ldrh	r3, [r7, #6]
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	2100      	movs	r1, #0
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f000 fd1f 	bl	800951c <USBD_LL_Transmit>

  return USBD_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	4613      	mov	r3, r2
 8008af4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2203      	movs	r2, #3
 8008afa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008afe:	88fa      	ldrh	r2, [r7, #6]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008b06:	88fa      	ldrh	r2, [r7, #6]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b0e:	88fb      	ldrh	r3, [r7, #6]
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	2100      	movs	r1, #0
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f000 fd3b 	bl	8009590 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	4613      	mov	r3, r2
 8008b30:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b32:	88fb      	ldrh	r3, [r7, #6]
 8008b34:	68ba      	ldr	r2, [r7, #8]
 8008b36:	2100      	movs	r1, #0
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f000 fd29 	bl	8009590 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3710      	adds	r7, #16
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2204      	movs	r2, #4
 8008b54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b58:	2300      	movs	r3, #0
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 fcdc 	bl	800951c <USBD_LL_Transmit>

  return USBD_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3708      	adds	r7, #8
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b082      	sub	sp, #8
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2205      	movs	r2, #5
 8008b7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b7e:	2300      	movs	r3, #0
 8008b80:	2200      	movs	r2, #0
 8008b82:	2100      	movs	r1, #0
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 fd03 	bl	8009590 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3708      	adds	r7, #8
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	4912      	ldr	r1, [pc, #72]	; (8008be4 <MX_USB_DEVICE_Init+0x50>)
 8008b9c:	4812      	ldr	r0, [pc, #72]	; (8008be8 <MX_USB_DEVICE_Init+0x54>)
 8008b9e:	f7fe ff3b 	bl	8007a18 <USBD_Init>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d001      	beq.n	8008bac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ba8:	f7f8 ffd2 	bl	8001b50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008bac:	490f      	ldr	r1, [pc, #60]	; (8008bec <MX_USB_DEVICE_Init+0x58>)
 8008bae:	480e      	ldr	r0, [pc, #56]	; (8008be8 <MX_USB_DEVICE_Init+0x54>)
 8008bb0:	f7fe ff5d 	bl	8007a6e <USBD_RegisterClass>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d001      	beq.n	8008bbe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008bba:	f7f8 ffc9 	bl	8001b50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008bbe:	490c      	ldr	r1, [pc, #48]	; (8008bf0 <MX_USB_DEVICE_Init+0x5c>)
 8008bc0:	4809      	ldr	r0, [pc, #36]	; (8008be8 <MX_USB_DEVICE_Init+0x54>)
 8008bc2:	f7fe fe8b 	bl	80078dc <USBD_CDC_RegisterInterface>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d001      	beq.n	8008bd0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008bcc:	f7f8 ffc0 	bl	8001b50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008bd0:	4805      	ldr	r0, [pc, #20]	; (8008be8 <MX_USB_DEVICE_Init+0x54>)
 8008bd2:	f7fe ff66 	bl	8007aa2 <USBD_Start>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d001      	beq.n	8008be0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008bdc:	f7f8 ffb8 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008be0:	bf00      	nop
 8008be2:	bd80      	pop	{r7, pc}
 8008be4:	2000012c 	.word	0x2000012c
 8008be8:	20000668 	.word	0x20000668
 8008bec:	20000018 	.word	0x20000018
 8008bf0:	2000011c 	.word	0x2000011c

08008bf4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	4905      	ldr	r1, [pc, #20]	; (8008c10 <CDC_Init_FS+0x1c>)
 8008bfc:	4805      	ldr	r0, [pc, #20]	; (8008c14 <CDC_Init_FS+0x20>)
 8008bfe:	f7fe fe84 	bl	800790a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008c02:	4905      	ldr	r1, [pc, #20]	; (8008c18 <CDC_Init_FS+0x24>)
 8008c04:	4803      	ldr	r0, [pc, #12]	; (8008c14 <CDC_Init_FS+0x20>)
 8008c06:	f7fe fe9a 	bl	800793e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008c0a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	20000d14 	.word	0x20000d14
 8008c14:	20000668 	.word	0x20000668
 8008c18:	2000092c 	.word	0x2000092c

08008c1c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008c20:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	4603      	mov	r3, r0
 8008c34:	6039      	str	r1, [r7, #0]
 8008c36:	71fb      	strb	r3, [r7, #7]
 8008c38:	4613      	mov	r3, r2
 8008c3a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008c3c:	79fb      	ldrb	r3, [r7, #7]
 8008c3e:	2b23      	cmp	r3, #35	; 0x23
 8008c40:	d84a      	bhi.n	8008cd8 <CDC_Control_FS+0xac>
 8008c42:	a201      	add	r2, pc, #4	; (adr r2, 8008c48 <CDC_Control_FS+0x1c>)
 8008c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c48:	08008cd9 	.word	0x08008cd9
 8008c4c:	08008cd9 	.word	0x08008cd9
 8008c50:	08008cd9 	.word	0x08008cd9
 8008c54:	08008cd9 	.word	0x08008cd9
 8008c58:	08008cd9 	.word	0x08008cd9
 8008c5c:	08008cd9 	.word	0x08008cd9
 8008c60:	08008cd9 	.word	0x08008cd9
 8008c64:	08008cd9 	.word	0x08008cd9
 8008c68:	08008cd9 	.word	0x08008cd9
 8008c6c:	08008cd9 	.word	0x08008cd9
 8008c70:	08008cd9 	.word	0x08008cd9
 8008c74:	08008cd9 	.word	0x08008cd9
 8008c78:	08008cd9 	.word	0x08008cd9
 8008c7c:	08008cd9 	.word	0x08008cd9
 8008c80:	08008cd9 	.word	0x08008cd9
 8008c84:	08008cd9 	.word	0x08008cd9
 8008c88:	08008cd9 	.word	0x08008cd9
 8008c8c:	08008cd9 	.word	0x08008cd9
 8008c90:	08008cd9 	.word	0x08008cd9
 8008c94:	08008cd9 	.word	0x08008cd9
 8008c98:	08008cd9 	.word	0x08008cd9
 8008c9c:	08008cd9 	.word	0x08008cd9
 8008ca0:	08008cd9 	.word	0x08008cd9
 8008ca4:	08008cd9 	.word	0x08008cd9
 8008ca8:	08008cd9 	.word	0x08008cd9
 8008cac:	08008cd9 	.word	0x08008cd9
 8008cb0:	08008cd9 	.word	0x08008cd9
 8008cb4:	08008cd9 	.word	0x08008cd9
 8008cb8:	08008cd9 	.word	0x08008cd9
 8008cbc:	08008cd9 	.word	0x08008cd9
 8008cc0:	08008cd9 	.word	0x08008cd9
 8008cc4:	08008cd9 	.word	0x08008cd9
 8008cc8:	08008cd9 	.word	0x08008cd9
 8008ccc:	08008cd9 	.word	0x08008cd9
 8008cd0:	08008cd9 	.word	0x08008cd9
 8008cd4:	08008cd9 	.word	0x08008cd9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008cd8:	bf00      	nop
  }

  return (USBD_OK);
 8008cda:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008cf2:	6879      	ldr	r1, [r7, #4]
 8008cf4:	4805      	ldr	r0, [pc, #20]	; (8008d0c <CDC_Receive_FS+0x24>)
 8008cf6:	f7fe fe22 	bl	800793e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008cfa:	4804      	ldr	r0, [pc, #16]	; (8008d0c <CDC_Receive_FS+0x24>)
 8008cfc:	f7fe fe62 	bl	80079c4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008d00:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	20000668 	.word	0x20000668

08008d10 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008d20:	4b0d      	ldr	r3, [pc, #52]	; (8008d58 <CDC_Transmit_FS+0x48>)
 8008d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d26:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d001      	beq.n	8008d36 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008d32:	2301      	movs	r3, #1
 8008d34:	e00b      	b.n	8008d4e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008d36:	887b      	ldrh	r3, [r7, #2]
 8008d38:	461a      	mov	r2, r3
 8008d3a:	6879      	ldr	r1, [r7, #4]
 8008d3c:	4806      	ldr	r0, [pc, #24]	; (8008d58 <CDC_Transmit_FS+0x48>)
 8008d3e:	f7fe fde4 	bl	800790a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008d42:	4805      	ldr	r0, [pc, #20]	; (8008d58 <CDC_Transmit_FS+0x48>)
 8008d44:	f7fe fe0f 	bl	8007966 <USBD_CDC_TransmitPacket>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	20000668 	.word	0x20000668

08008d5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	4603      	mov	r3, r0
 8008d64:	6039      	str	r1, [r7, #0]
 8008d66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	2212      	movs	r2, #18
 8008d6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008d6e:	4b03      	ldr	r3, [pc, #12]	; (8008d7c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	2000014c 	.word	0x2000014c

08008d80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	4603      	mov	r3, r0
 8008d88:	6039      	str	r1, [r7, #0]
 8008d8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	2204      	movs	r2, #4
 8008d90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008d92:	4b03      	ldr	r3, [pc, #12]	; (8008da0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	2000016c 	.word	0x2000016c

08008da4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	4603      	mov	r3, r0
 8008dac:	6039      	str	r1, [r7, #0]
 8008dae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008db0:	79fb      	ldrb	r3, [r7, #7]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d105      	bne.n	8008dc2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008db6:	683a      	ldr	r2, [r7, #0]
 8008db8:	4907      	ldr	r1, [pc, #28]	; (8008dd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008dba:	4808      	ldr	r0, [pc, #32]	; (8008ddc <USBD_FS_ProductStrDescriptor+0x38>)
 8008dbc:	f7ff fe0c 	bl	80089d8 <USBD_GetString>
 8008dc0:	e004      	b.n	8008dcc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008dc2:	683a      	ldr	r2, [r7, #0]
 8008dc4:	4904      	ldr	r1, [pc, #16]	; (8008dd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008dc6:	4805      	ldr	r0, [pc, #20]	; (8008ddc <USBD_FS_ProductStrDescriptor+0x38>)
 8008dc8:	f7ff fe06 	bl	80089d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dcc:	4b02      	ldr	r3, [pc, #8]	; (8008dd8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	200010fc 	.word	0x200010fc
 8008ddc:	08009774 	.word	0x08009774

08008de0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	4603      	mov	r3, r0
 8008de8:	6039      	str	r1, [r7, #0]
 8008dea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008dec:	683a      	ldr	r2, [r7, #0]
 8008dee:	4904      	ldr	r1, [pc, #16]	; (8008e00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008df0:	4804      	ldr	r0, [pc, #16]	; (8008e04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008df2:	f7ff fdf1 	bl	80089d8 <USBD_GetString>
  return USBD_StrDesc;
 8008df6:	4b02      	ldr	r3, [pc, #8]	; (8008e00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	200010fc 	.word	0x200010fc
 8008e04:	0800978c 	.word	0x0800978c

08008e08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	4603      	mov	r3, r0
 8008e10:	6039      	str	r1, [r7, #0]
 8008e12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	221a      	movs	r2, #26
 8008e18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e1a:	f000 f855 	bl	8008ec8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008e1e:	4b02      	ldr	r3, [pc, #8]	; (8008e28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	20000170 	.word	0x20000170

08008e2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	4603      	mov	r3, r0
 8008e34:	6039      	str	r1, [r7, #0]
 8008e36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e38:	79fb      	ldrb	r3, [r7, #7]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d105      	bne.n	8008e4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e3e:	683a      	ldr	r2, [r7, #0]
 8008e40:	4907      	ldr	r1, [pc, #28]	; (8008e60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e42:	4808      	ldr	r0, [pc, #32]	; (8008e64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e44:	f7ff fdc8 	bl	80089d8 <USBD_GetString>
 8008e48:	e004      	b.n	8008e54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e4a:	683a      	ldr	r2, [r7, #0]
 8008e4c:	4904      	ldr	r1, [pc, #16]	; (8008e60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e4e:	4805      	ldr	r0, [pc, #20]	; (8008e64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e50:	f7ff fdc2 	bl	80089d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e54:	4b02      	ldr	r3, [pc, #8]	; (8008e60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3708      	adds	r7, #8
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	200010fc 	.word	0x200010fc
 8008e64:	080097a0 	.word	0x080097a0

08008e68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	4603      	mov	r3, r0
 8008e70:	6039      	str	r1, [r7, #0]
 8008e72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e74:	79fb      	ldrb	r3, [r7, #7]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d105      	bne.n	8008e86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e7a:	683a      	ldr	r2, [r7, #0]
 8008e7c:	4907      	ldr	r1, [pc, #28]	; (8008e9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e7e:	4808      	ldr	r0, [pc, #32]	; (8008ea0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e80:	f7ff fdaa 	bl	80089d8 <USBD_GetString>
 8008e84:	e004      	b.n	8008e90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e86:	683a      	ldr	r2, [r7, #0]
 8008e88:	4904      	ldr	r1, [pc, #16]	; (8008e9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e8a:	4805      	ldr	r0, [pc, #20]	; (8008ea0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e8c:	f7ff fda4 	bl	80089d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e90:	4b02      	ldr	r3, [pc, #8]	; (8008e9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3708      	adds	r7, #8
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	200010fc 	.word	0x200010fc
 8008ea0:	080097ac 	.word	0x080097ac

08008ea4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	4603      	mov	r3, r0
 8008eac:	6039      	str	r1, [r7, #0]
 8008eae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	220c      	movs	r2, #12
 8008eb4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008eb6:	4b03      	ldr	r3, [pc, #12]	; (8008ec4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr
 8008ec4:	20000160 	.word	0x20000160

08008ec8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ece:	4b0f      	ldr	r3, [pc, #60]	; (8008f0c <Get_SerialNum+0x44>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ed4:	4b0e      	ldr	r3, [pc, #56]	; (8008f10 <Get_SerialNum+0x48>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008eda:	4b0e      	ldr	r3, [pc, #56]	; (8008f14 <Get_SerialNum+0x4c>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ee0:	68fa      	ldr	r2, [r7, #12]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d009      	beq.n	8008f02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008eee:	2208      	movs	r2, #8
 8008ef0:	4909      	ldr	r1, [pc, #36]	; (8008f18 <Get_SerialNum+0x50>)
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f000 f814 	bl	8008f20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ef8:	2204      	movs	r2, #4
 8008efa:	4908      	ldr	r1, [pc, #32]	; (8008f1c <Get_SerialNum+0x54>)
 8008efc:	68b8      	ldr	r0, [r7, #8]
 8008efe:	f000 f80f 	bl	8008f20 <IntToUnicode>
  }
}
 8008f02:	bf00      	nop
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	1fff7590 	.word	0x1fff7590
 8008f10:	1fff7594 	.word	0x1fff7594
 8008f14:	1fff7598 	.word	0x1fff7598
 8008f18:	20000172 	.word	0x20000172
 8008f1c:	20000182 	.word	0x20000182

08008f20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b087      	sub	sp, #28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f32:	2300      	movs	r3, #0
 8008f34:	75fb      	strb	r3, [r7, #23]
 8008f36:	e027      	b.n	8008f88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	0f1b      	lsrs	r3, r3, #28
 8008f3c:	2b09      	cmp	r3, #9
 8008f3e:	d80b      	bhi.n	8008f58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	0f1b      	lsrs	r3, r3, #28
 8008f44:	b2da      	uxtb	r2, r3
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
 8008f48:	005b      	lsls	r3, r3, #1
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	440b      	add	r3, r1
 8008f50:	3230      	adds	r2, #48	; 0x30
 8008f52:	b2d2      	uxtb	r2, r2
 8008f54:	701a      	strb	r2, [r3, #0]
 8008f56:	e00a      	b.n	8008f6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	0f1b      	lsrs	r3, r3, #28
 8008f5c:	b2da      	uxtb	r2, r3
 8008f5e:	7dfb      	ldrb	r3, [r7, #23]
 8008f60:	005b      	lsls	r3, r3, #1
 8008f62:	4619      	mov	r1, r3
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	440b      	add	r3, r1
 8008f68:	3237      	adds	r2, #55	; 0x37
 8008f6a:	b2d2      	uxtb	r2, r2
 8008f6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	011b      	lsls	r3, r3, #4
 8008f72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f74:	7dfb      	ldrb	r3, [r7, #23]
 8008f76:	005b      	lsls	r3, r3, #1
 8008f78:	3301      	adds	r3, #1
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	2200      	movs	r2, #0
 8008f80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f82:	7dfb      	ldrb	r3, [r7, #23]
 8008f84:	3301      	adds	r3, #1
 8008f86:	75fb      	strb	r3, [r7, #23]
 8008f88:	7dfa      	ldrb	r2, [r7, #23]
 8008f8a:	79fb      	ldrb	r3, [r7, #7]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d3d3      	bcc.n	8008f38 <IntToUnicode+0x18>
  }
}
 8008f90:	bf00      	nop
 8008f92:	371c      	adds	r7, #28
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b08a      	sub	sp, #40	; 0x28
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fa4:	f107 0314 	add.w	r3, r7, #20
 8008fa8:	2200      	movs	r2, #0
 8008faa:	601a      	str	r2, [r3, #0]
 8008fac:	605a      	str	r2, [r3, #4]
 8008fae:	609a      	str	r2, [r3, #8]
 8008fb0:	60da      	str	r2, [r3, #12]
 8008fb2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a1c      	ldr	r2, [pc, #112]	; (800902c <HAL_PCD_MspInit+0x90>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d131      	bne.n	8009022 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fbe:	4b1c      	ldr	r3, [pc, #112]	; (8009030 <HAL_PCD_MspInit+0x94>)
 8008fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fc2:	4a1b      	ldr	r2, [pc, #108]	; (8009030 <HAL_PCD_MspInit+0x94>)
 8008fc4:	f043 0301 	orr.w	r3, r3, #1
 8008fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008fca:	4b19      	ldr	r3, [pc, #100]	; (8009030 <HAL_PCD_MspInit+0x94>)
 8008fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fce:	f003 0301 	and.w	r3, r3, #1
 8008fd2:	613b      	str	r3, [r7, #16]
 8008fd4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008fd6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fdc:	2302      	movs	r3, #2
 8008fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 8008fe8:	230a      	movs	r3, #10
 8008fea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fec:	f107 0314 	add.w	r3, r7, #20
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008ff6:	f7f9 f975 	bl	80022e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008ffa:	4b0d      	ldr	r3, [pc, #52]	; (8009030 <HAL_PCD_MspInit+0x94>)
 8008ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ffe:	4a0c      	ldr	r2, [pc, #48]	; (8009030 <HAL_PCD_MspInit+0x94>)
 8009000:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009004:	6593      	str	r3, [r2, #88]	; 0x58
 8009006:	4b0a      	ldr	r3, [pc, #40]	; (8009030 <HAL_PCD_MspInit+0x94>)
 8009008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800900a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800900e:	60fb      	str	r3, [r7, #12]
 8009010:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8009012:	2200      	movs	r2, #0
 8009014:	2100      	movs	r1, #0
 8009016:	2043      	movs	r0, #67	; 0x43
 8009018:	f7f9 f8ed 	bl	80021f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800901c:	2043      	movs	r0, #67	; 0x43
 800901e:	f7f9 f906 	bl	800222e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009022:	bf00      	nop
 8009024:	3728      	adds	r7, #40	; 0x28
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	40006800 	.word	0x40006800
 8009030:	40021000 	.word	0x40021000

08009034 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8009048:	4619      	mov	r1, r3
 800904a:	4610      	mov	r0, r2
 800904c:	f7fe fd72 	bl	8007b34 <USBD_LL_SetupStage>
}
 8009050:	bf00      	nop
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	460b      	mov	r3, r1
 8009062:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800906a:	78fb      	ldrb	r3, [r7, #3]
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	015b      	lsls	r3, r3, #5
 8009070:	4413      	add	r3, r2
 8009072:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	78fb      	ldrb	r3, [r7, #3]
 800907a:	4619      	mov	r1, r3
 800907c:	f7fe fda5 	bl	8007bca <USBD_LL_DataOutStage>
}
 8009080:	bf00      	nop
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	460b      	mov	r3, r1
 8009092:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800909a:	78fb      	ldrb	r3, [r7, #3]
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	015b      	lsls	r3, r3, #5
 80090a0:	4413      	add	r3, r2
 80090a2:	333c      	adds	r3, #60	; 0x3c
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	78fb      	ldrb	r3, [r7, #3]
 80090a8:	4619      	mov	r1, r3
 80090aa:	f7fe fdff 	bl	8007cac <USBD_LL_DataInStage>
}
 80090ae:	bf00      	nop
 80090b0:	3708      	adds	r7, #8
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b082      	sub	sp, #8
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7fe ff12 	bl	8007eee <USBD_LL_SOF>
}
 80090ca:	bf00      	nop
 80090cc:	3708      	adds	r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b084      	sub	sp, #16
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80090da:	2301      	movs	r3, #1
 80090dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d001      	beq.n	80090ea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80090e6:	f7f8 fd33 	bl	8001b50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80090f0:	7bfa      	ldrb	r2, [r7, #15]
 80090f2:	4611      	mov	r1, r2
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fe febf 	bl	8007e78 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009100:	4618      	mov	r0, r3
 8009102:	f7fe fe78 	bl	8007df6 <USBD_LL_Reset>
}
 8009106:	bf00      	nop
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
	...

08009110 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800911e:	4618      	mov	r0, r3
 8009120:	f7fe feba 	bl	8007e98 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	699b      	ldr	r3, [r3, #24]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d005      	beq.n	8009138 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800912c:	4b04      	ldr	r3, [pc, #16]	; (8009140 <HAL_PCD_SuspendCallback+0x30>)
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	4a03      	ldr	r2, [pc, #12]	; (8009140 <HAL_PCD_SuspendCallback+0x30>)
 8009132:	f043 0306 	orr.w	r3, r3, #6
 8009136:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009138:	bf00      	nop
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	e000ed00 	.word	0xe000ed00

08009144 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	699b      	ldr	r3, [r3, #24]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d007      	beq.n	8009164 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009154:	4b08      	ldr	r3, [pc, #32]	; (8009178 <HAL_PCD_ResumeCallback+0x34>)
 8009156:	691b      	ldr	r3, [r3, #16]
 8009158:	4a07      	ldr	r2, [pc, #28]	; (8009178 <HAL_PCD_ResumeCallback+0x34>)
 800915a:	f023 0306 	bic.w	r3, r3, #6
 800915e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009160:	f000 fab2 	bl	80096c8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800916a:	4618      	mov	r0, r3
 800916c:	f7fe fea9 	bl	8007ec2 <USBD_LL_Resume>
}
 8009170:	bf00      	nop
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	e000ed00 	.word	0xe000ed00

0800917c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8009184:	f7fa fb1e 	bl	80037c4 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009188:	4a2b      	ldr	r2, [pc, #172]	; (8009238 <USBD_LL_Init+0xbc>)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  pdev->pData = &hpcd_USB_FS;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4a29      	ldr	r2, [pc, #164]	; (8009238 <USBD_LL_Init+0xbc>)
 8009194:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009198:	4b27      	ldr	r3, [pc, #156]	; (8009238 <USBD_LL_Init+0xbc>)
 800919a:	4a28      	ldr	r2, [pc, #160]	; (800923c <USBD_LL_Init+0xc0>)
 800919c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800919e:	4b26      	ldr	r3, [pc, #152]	; (8009238 <USBD_LL_Init+0xbc>)
 80091a0:	2208      	movs	r2, #8
 80091a2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80091a4:	4b24      	ldr	r3, [pc, #144]	; (8009238 <USBD_LL_Init+0xbc>)
 80091a6:	2202      	movs	r2, #2
 80091a8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80091aa:	4b23      	ldr	r3, [pc, #140]	; (8009238 <USBD_LL_Init+0xbc>)
 80091ac:	2202      	movs	r2, #2
 80091ae:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80091b0:	4b21      	ldr	r3, [pc, #132]	; (8009238 <USBD_LL_Init+0xbc>)
 80091b2:	2200      	movs	r2, #0
 80091b4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80091b6:	4b20      	ldr	r3, [pc, #128]	; (8009238 <USBD_LL_Init+0xbc>)
 80091b8:	2200      	movs	r2, #0
 80091ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80091bc:	4b1e      	ldr	r3, [pc, #120]	; (8009238 <USBD_LL_Init+0xbc>)
 80091be:	2200      	movs	r2, #0
 80091c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80091c2:	4b1d      	ldr	r3, [pc, #116]	; (8009238 <USBD_LL_Init+0xbc>)
 80091c4:	2200      	movs	r2, #0
 80091c6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80091c8:	481b      	ldr	r0, [pc, #108]	; (8009238 <USBD_LL_Init+0xbc>)
 80091ca:	f7f9 fb54 	bl	8002876 <HAL_PCD_Init>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d001      	beq.n	80091d8 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80091d4:	f7f8 fcbc 	bl	8001b50 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091de:	2318      	movs	r3, #24
 80091e0:	2200      	movs	r2, #0
 80091e2:	2100      	movs	r1, #0
 80091e4:	f7fa fa22 	bl	800362c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091ee:	2358      	movs	r3, #88	; 0x58
 80091f0:	2200      	movs	r2, #0
 80091f2:	2180      	movs	r1, #128	; 0x80
 80091f4:	f7fa fa1a 	bl	800362c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091fe:	23c0      	movs	r3, #192	; 0xc0
 8009200:	2200      	movs	r2, #0
 8009202:	2181      	movs	r1, #129	; 0x81
 8009204:	f7fa fa12 	bl	800362c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800920e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009212:	2200      	movs	r2, #0
 8009214:	2101      	movs	r1, #1
 8009216:	f7fa fa09 	bl	800362c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009220:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009224:	2200      	movs	r2, #0
 8009226:	2182      	movs	r1, #130	; 0x82
 8009228:	f7fa fa00 	bl	800362c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	200012fc 	.word	0x200012fc
 800923c:	40006800 	.word	0x40006800

08009240 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009248:	2300      	movs	r3, #0
 800924a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800924c:	2300      	movs	r3, #0
 800924e:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009256:	4618      	mov	r0, r3
 8009258:	f7f9 fbf5 	bl	8002a46 <HAL_PCD_Start>
 800925c:	4603      	mov	r3, r0
 800925e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8009260:	7bbb      	ldrb	r3, [r7, #14]
 8009262:	2b03      	cmp	r3, #3
 8009264:	d816      	bhi.n	8009294 <USBD_LL_Start+0x54>
 8009266:	a201      	add	r2, pc, #4	; (adr r2, 800926c <USBD_LL_Start+0x2c>)
 8009268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800926c:	0800927d 	.word	0x0800927d
 8009270:	08009283 	.word	0x08009283
 8009274:	08009289 	.word	0x08009289
 8009278:	0800928f 	.word	0x0800928f
    case HAL_OK :
      usb_status = USBD_OK;
 800927c:	2300      	movs	r3, #0
 800927e:	73fb      	strb	r3, [r7, #15]
    break;
 8009280:	e00b      	b.n	800929a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009282:	2302      	movs	r3, #2
 8009284:	73fb      	strb	r3, [r7, #15]
    break;
 8009286:	e008      	b.n	800929a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009288:	2301      	movs	r3, #1
 800928a:	73fb      	strb	r3, [r7, #15]
    break;
 800928c:	e005      	b.n	800929a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800928e:	2302      	movs	r3, #2
 8009290:	73fb      	strb	r3, [r7, #15]
    break;
 8009292:	e002      	b.n	800929a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8009294:	2302      	movs	r3, #2
 8009296:	73fb      	strb	r3, [r7, #15]
    break;
 8009298:	bf00      	nop
  }
  return usb_status;
 800929a:	7bfb      	ldrb	r3, [r7, #15]
}
 800929c:	4618      	mov	r0, r3
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	4608      	mov	r0, r1
 80092ae:	4611      	mov	r1, r2
 80092b0:	461a      	mov	r2, r3
 80092b2:	4603      	mov	r3, r0
 80092b4:	70fb      	strb	r3, [r7, #3]
 80092b6:	460b      	mov	r3, r1
 80092b8:	70bb      	strb	r3, [r7, #2]
 80092ba:	4613      	mov	r3, r2
 80092bc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092be:	2300      	movs	r3, #0
 80092c0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092cc:	78bb      	ldrb	r3, [r7, #2]
 80092ce:	883a      	ldrh	r2, [r7, #0]
 80092d0:	78f9      	ldrb	r1, [r7, #3]
 80092d2:	f7f9 fd4d 	bl	8002d70 <HAL_PCD_EP_Open>
 80092d6:	4603      	mov	r3, r0
 80092d8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80092da:	7bbb      	ldrb	r3, [r7, #14]
 80092dc:	2b03      	cmp	r3, #3
 80092de:	d817      	bhi.n	8009310 <USBD_LL_OpenEP+0x6c>
 80092e0:	a201      	add	r2, pc, #4	; (adr r2, 80092e8 <USBD_LL_OpenEP+0x44>)
 80092e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e6:	bf00      	nop
 80092e8:	080092f9 	.word	0x080092f9
 80092ec:	080092ff 	.word	0x080092ff
 80092f0:	08009305 	.word	0x08009305
 80092f4:	0800930b 	.word	0x0800930b
    case HAL_OK :
      usb_status = USBD_OK;
 80092f8:	2300      	movs	r3, #0
 80092fa:	73fb      	strb	r3, [r7, #15]
    break;
 80092fc:	e00b      	b.n	8009316 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80092fe:	2302      	movs	r3, #2
 8009300:	73fb      	strb	r3, [r7, #15]
    break;
 8009302:	e008      	b.n	8009316 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009304:	2301      	movs	r3, #1
 8009306:	73fb      	strb	r3, [r7, #15]
    break;
 8009308:	e005      	b.n	8009316 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800930a:	2302      	movs	r3, #2
 800930c:	73fb      	strb	r3, [r7, #15]
    break;
 800930e:	e002      	b.n	8009316 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009310:	2302      	movs	r3, #2
 8009312:	73fb      	strb	r3, [r7, #15]
    break;
 8009314:	bf00      	nop
  }
  return usb_status;
 8009316:	7bfb      	ldrb	r3, [r7, #15]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	460b      	mov	r3, r1
 800932a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009330:	2300      	movs	r3, #0
 8009332:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800933a:	78fa      	ldrb	r2, [r7, #3]
 800933c:	4611      	mov	r1, r2
 800933e:	4618      	mov	r0, r3
 8009340:	f7f9 fd76 	bl	8002e30 <HAL_PCD_EP_Close>
 8009344:	4603      	mov	r3, r0
 8009346:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8009348:	7bbb      	ldrb	r3, [r7, #14]
 800934a:	2b03      	cmp	r3, #3
 800934c:	d816      	bhi.n	800937c <USBD_LL_CloseEP+0x5c>
 800934e:	a201      	add	r2, pc, #4	; (adr r2, 8009354 <USBD_LL_CloseEP+0x34>)
 8009350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009354:	08009365 	.word	0x08009365
 8009358:	0800936b 	.word	0x0800936b
 800935c:	08009371 	.word	0x08009371
 8009360:	08009377 	.word	0x08009377
    case HAL_OK :
      usb_status = USBD_OK;
 8009364:	2300      	movs	r3, #0
 8009366:	73fb      	strb	r3, [r7, #15]
    break;
 8009368:	e00b      	b.n	8009382 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800936a:	2302      	movs	r3, #2
 800936c:	73fb      	strb	r3, [r7, #15]
    break;
 800936e:	e008      	b.n	8009382 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009370:	2301      	movs	r3, #1
 8009372:	73fb      	strb	r3, [r7, #15]
    break;
 8009374:	e005      	b.n	8009382 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009376:	2302      	movs	r3, #2
 8009378:	73fb      	strb	r3, [r7, #15]
    break;
 800937a:	e002      	b.n	8009382 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800937c:	2302      	movs	r3, #2
 800937e:	73fb      	strb	r3, [r7, #15]
    break;
 8009380:	bf00      	nop
  }
  return usb_status;  
 8009382:	7bfb      	ldrb	r3, [r7, #15]
}
 8009384:	4618      	mov	r0, r3
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	460b      	mov	r3, r1
 8009396:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009398:	2300      	movs	r3, #0
 800939a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800939c:	2300      	movs	r3, #0
 800939e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093a6:	78fa      	ldrb	r2, [r7, #3]
 80093a8:	4611      	mov	r1, r2
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7f9 fe0a 	bl	8002fc4 <HAL_PCD_EP_SetStall>
 80093b0:	4603      	mov	r3, r0
 80093b2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80093b4:	7bbb      	ldrb	r3, [r7, #14]
 80093b6:	2b03      	cmp	r3, #3
 80093b8:	d816      	bhi.n	80093e8 <USBD_LL_StallEP+0x5c>
 80093ba:	a201      	add	r2, pc, #4	; (adr r2, 80093c0 <USBD_LL_StallEP+0x34>)
 80093bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c0:	080093d1 	.word	0x080093d1
 80093c4:	080093d7 	.word	0x080093d7
 80093c8:	080093dd 	.word	0x080093dd
 80093cc:	080093e3 	.word	0x080093e3
    case HAL_OK :
      usb_status = USBD_OK;
 80093d0:	2300      	movs	r3, #0
 80093d2:	73fb      	strb	r3, [r7, #15]
    break;
 80093d4:	e00b      	b.n	80093ee <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093d6:	2302      	movs	r3, #2
 80093d8:	73fb      	strb	r3, [r7, #15]
    break;
 80093da:	e008      	b.n	80093ee <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80093dc:	2301      	movs	r3, #1
 80093de:	73fb      	strb	r3, [r7, #15]
    break;
 80093e0:	e005      	b.n	80093ee <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093e2:	2302      	movs	r3, #2
 80093e4:	73fb      	strb	r3, [r7, #15]
    break;
 80093e6:	e002      	b.n	80093ee <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80093e8:	2302      	movs	r3, #2
 80093ea:	73fb      	strb	r3, [r7, #15]
    break;
 80093ec:	bf00      	nop
  }
  return usb_status;  
 80093ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3710      	adds	r7, #16
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	460b      	mov	r3, r1
 8009402:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009404:	2300      	movs	r3, #0
 8009406:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009408:	2300      	movs	r3, #0
 800940a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009412:	78fa      	ldrb	r2, [r7, #3]
 8009414:	4611      	mov	r1, r2
 8009416:	4618      	mov	r0, r3
 8009418:	f7f9 fe2e 	bl	8003078 <HAL_PCD_EP_ClrStall>
 800941c:	4603      	mov	r3, r0
 800941e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8009420:	7bbb      	ldrb	r3, [r7, #14]
 8009422:	2b03      	cmp	r3, #3
 8009424:	d816      	bhi.n	8009454 <USBD_LL_ClearStallEP+0x5c>
 8009426:	a201      	add	r2, pc, #4	; (adr r2, 800942c <USBD_LL_ClearStallEP+0x34>)
 8009428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800942c:	0800943d 	.word	0x0800943d
 8009430:	08009443 	.word	0x08009443
 8009434:	08009449 	.word	0x08009449
 8009438:	0800944f 	.word	0x0800944f
    case HAL_OK :
      usb_status = USBD_OK;
 800943c:	2300      	movs	r3, #0
 800943e:	73fb      	strb	r3, [r7, #15]
    break;
 8009440:	e00b      	b.n	800945a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009442:	2302      	movs	r3, #2
 8009444:	73fb      	strb	r3, [r7, #15]
    break;
 8009446:	e008      	b.n	800945a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009448:	2301      	movs	r3, #1
 800944a:	73fb      	strb	r3, [r7, #15]
    break;
 800944c:	e005      	b.n	800945a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800944e:	2302      	movs	r3, #2
 8009450:	73fb      	strb	r3, [r7, #15]
    break;
 8009452:	e002      	b.n	800945a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009454:	2302      	movs	r3, #2
 8009456:	73fb      	strb	r3, [r7, #15]
    break;
 8009458:	bf00      	nop
  }
  return usb_status; 
 800945a:	7bfb      	ldrb	r3, [r7, #15]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	460b      	mov	r3, r1
 800946e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009476:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8009478:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800947c:	2b00      	cmp	r3, #0
 800947e:	da08      	bge.n	8009492 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009480:	78fb      	ldrb	r3, [r7, #3]
 8009482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	015b      	lsls	r3, r3, #5
 800948a:	4413      	add	r3, r2
 800948c:	332a      	adds	r3, #42	; 0x2a
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	e008      	b.n	80094a4 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009492:	78fb      	ldrb	r3, [r7, #3]
 8009494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	015b      	lsls	r3, r3, #5
 800949c:	4413      	add	r3, r2
 800949e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80094a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3714      	adds	r7, #20
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	460b      	mov	r3, r1
 80094ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094bc:	2300      	movs	r3, #0
 80094be:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094c0:	2300      	movs	r3, #0
 80094c2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094ca:	78fa      	ldrb	r2, [r7, #3]
 80094cc:	4611      	mov	r1, r2
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7f9 fc29 	bl	8002d26 <HAL_PCD_SetAddress>
 80094d4:	4603      	mov	r3, r0
 80094d6:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80094d8:	7bbb      	ldrb	r3, [r7, #14]
 80094da:	2b03      	cmp	r3, #3
 80094dc:	d816      	bhi.n	800950c <USBD_LL_SetUSBAddress+0x5c>
 80094de:	a201      	add	r2, pc, #4	; (adr r2, 80094e4 <USBD_LL_SetUSBAddress+0x34>)
 80094e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e4:	080094f5 	.word	0x080094f5
 80094e8:	080094fb 	.word	0x080094fb
 80094ec:	08009501 	.word	0x08009501
 80094f0:	08009507 	.word	0x08009507
    case HAL_OK :
      usb_status = USBD_OK;
 80094f4:	2300      	movs	r3, #0
 80094f6:	73fb      	strb	r3, [r7, #15]
    break;
 80094f8:	e00b      	b.n	8009512 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80094fa:	2302      	movs	r3, #2
 80094fc:	73fb      	strb	r3, [r7, #15]
    break;
 80094fe:	e008      	b.n	8009512 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009500:	2301      	movs	r3, #1
 8009502:	73fb      	strb	r3, [r7, #15]
    break;
 8009504:	e005      	b.n	8009512 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009506:	2302      	movs	r3, #2
 8009508:	73fb      	strb	r3, [r7, #15]
    break;
 800950a:	e002      	b.n	8009512 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800950c:	2302      	movs	r3, #2
 800950e:	73fb      	strb	r3, [r7, #15]
    break;
 8009510:	bf00      	nop
  }
  return usb_status;  
 8009512:	7bfb      	ldrb	r3, [r7, #15]
}
 8009514:	4618      	mov	r0, r3
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	607a      	str	r2, [r7, #4]
 8009526:	461a      	mov	r2, r3
 8009528:	460b      	mov	r3, r1
 800952a:	72fb      	strb	r3, [r7, #11]
 800952c:	4613      	mov	r3, r2
 800952e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009530:	2300      	movs	r3, #0
 8009532:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009534:	2300      	movs	r3, #0
 8009536:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800953e:	893b      	ldrh	r3, [r7, #8]
 8009540:	7af9      	ldrb	r1, [r7, #11]
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	f7f9 fd05 	bl	8002f52 <HAL_PCD_EP_Transmit>
 8009548:	4603      	mov	r3, r0
 800954a:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800954c:	7dbb      	ldrb	r3, [r7, #22]
 800954e:	2b03      	cmp	r3, #3
 8009550:	d816      	bhi.n	8009580 <USBD_LL_Transmit+0x64>
 8009552:	a201      	add	r2, pc, #4	; (adr r2, 8009558 <USBD_LL_Transmit+0x3c>)
 8009554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009558:	08009569 	.word	0x08009569
 800955c:	0800956f 	.word	0x0800956f
 8009560:	08009575 	.word	0x08009575
 8009564:	0800957b 	.word	0x0800957b
    case HAL_OK :
      usb_status = USBD_OK;
 8009568:	2300      	movs	r3, #0
 800956a:	75fb      	strb	r3, [r7, #23]
    break;
 800956c:	e00b      	b.n	8009586 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800956e:	2302      	movs	r3, #2
 8009570:	75fb      	strb	r3, [r7, #23]
    break;
 8009572:	e008      	b.n	8009586 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009574:	2301      	movs	r3, #1
 8009576:	75fb      	strb	r3, [r7, #23]
    break;
 8009578:	e005      	b.n	8009586 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800957a:	2302      	movs	r3, #2
 800957c:	75fb      	strb	r3, [r7, #23]
    break;
 800957e:	e002      	b.n	8009586 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 8009580:	2302      	movs	r3, #2
 8009582:	75fb      	strb	r3, [r7, #23]
    break;
 8009584:	bf00      	nop
  }
  return usb_status;    
 8009586:	7dfb      	ldrb	r3, [r7, #23]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3718      	adds	r7, #24
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b086      	sub	sp, #24
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	607a      	str	r2, [r7, #4]
 800959a:	461a      	mov	r2, r3
 800959c:	460b      	mov	r3, r1
 800959e:	72fb      	strb	r3, [r7, #11]
 80095a0:	4613      	mov	r3, r2
 80095a2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095a4:	2300      	movs	r3, #0
 80095a6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095a8:	2300      	movs	r3, #0
 80095aa:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80095b2:	893b      	ldrh	r3, [r7, #8]
 80095b4:	7af9      	ldrb	r1, [r7, #11]
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	f7f9 fc7c 	bl	8002eb4 <HAL_PCD_EP_Receive>
 80095bc:	4603      	mov	r3, r0
 80095be:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 80095c0:	7dbb      	ldrb	r3, [r7, #22]
 80095c2:	2b03      	cmp	r3, #3
 80095c4:	d816      	bhi.n	80095f4 <USBD_LL_PrepareReceive+0x64>
 80095c6:	a201      	add	r2, pc, #4	; (adr r2, 80095cc <USBD_LL_PrepareReceive+0x3c>)
 80095c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095cc:	080095dd 	.word	0x080095dd
 80095d0:	080095e3 	.word	0x080095e3
 80095d4:	080095e9 	.word	0x080095e9
 80095d8:	080095ef 	.word	0x080095ef
    case HAL_OK :
      usb_status = USBD_OK;
 80095dc:	2300      	movs	r3, #0
 80095de:	75fb      	strb	r3, [r7, #23]
    break;
 80095e0:	e00b      	b.n	80095fa <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80095e2:	2302      	movs	r3, #2
 80095e4:	75fb      	strb	r3, [r7, #23]
    break;
 80095e6:	e008      	b.n	80095fa <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80095e8:	2301      	movs	r3, #1
 80095ea:	75fb      	strb	r3, [r7, #23]
    break;
 80095ec:	e005      	b.n	80095fa <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80095ee:	2302      	movs	r3, #2
 80095f0:	75fb      	strb	r3, [r7, #23]
    break;
 80095f2:	e002      	b.n	80095fa <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 80095f4:	2302      	movs	r3, #2
 80095f6:	75fb      	strb	r3, [r7, #23]
    break;
 80095f8:	bf00      	nop
  }
  return usb_status; 
 80095fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3718      	adds	r7, #24
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	460b      	mov	r3, r1
 800960e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009616:	78fa      	ldrb	r2, [r7, #3]
 8009618:	4611      	mov	r1, r2
 800961a:	4618      	mov	r0, r3
 800961c:	f7f9 fc84 	bl	8002f28 <HAL_PCD_EP_GetRxCount>
 8009620:	4603      	mov	r3, r0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
	...

0800962c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	460b      	mov	r3, r1
 8009636:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009638:	78fb      	ldrb	r3, [r7, #3]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d002      	beq.n	8009644 <HAL_PCDEx_LPM_Callback+0x18>
 800963e:	2b01      	cmp	r3, #1
 8009640:	d013      	beq.n	800966a <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8009642:	e023      	b.n	800968c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d007      	beq.n	800965c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800964c:	f000 f83c 	bl	80096c8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009650:	4b10      	ldr	r3, [pc, #64]	; (8009694 <HAL_PCDEx_LPM_Callback+0x68>)
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	4a0f      	ldr	r2, [pc, #60]	; (8009694 <HAL_PCDEx_LPM_Callback+0x68>)
 8009656:	f023 0306 	bic.w	r3, r3, #6
 800965a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009662:	4618      	mov	r0, r3
 8009664:	f7fe fc2d 	bl	8007ec2 <USBD_LL_Resume>
    break;
 8009668:	e010      	b.n	800968c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009670:	4618      	mov	r0, r3
 8009672:	f7fe fc11 	bl	8007e98 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	699b      	ldr	r3, [r3, #24]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d005      	beq.n	800968a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800967e:	4b05      	ldr	r3, [pc, #20]	; (8009694 <HAL_PCDEx_LPM_Callback+0x68>)
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	4a04      	ldr	r2, [pc, #16]	; (8009694 <HAL_PCDEx_LPM_Callback+0x68>)
 8009684:	f043 0306 	orr.w	r3, r3, #6
 8009688:	6113      	str	r3, [r2, #16]
    break;   
 800968a:	bf00      	nop
}
 800968c:	bf00      	nop
 800968e:	3708      	adds	r7, #8
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	e000ed00 	.word	0xe000ed00

08009698 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80096a0:	4b03      	ldr	r3, [pc, #12]	; (80096b0 <USBD_static_malloc+0x18>)
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	370c      	adds	r7, #12
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	20000314 	.word	0x20000314

080096b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]

}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80096c8:	b480      	push	{r7}
 80096ca:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 80096cc:	bf00      	nop
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr
	...

080096d8 <__libc_init_array>:
 80096d8:	b570      	push	{r4, r5, r6, lr}
 80096da:	4e0d      	ldr	r6, [pc, #52]	; (8009710 <__libc_init_array+0x38>)
 80096dc:	4c0d      	ldr	r4, [pc, #52]	; (8009714 <__libc_init_array+0x3c>)
 80096de:	1ba4      	subs	r4, r4, r6
 80096e0:	10a4      	asrs	r4, r4, #2
 80096e2:	2500      	movs	r5, #0
 80096e4:	42a5      	cmp	r5, r4
 80096e6:	d109      	bne.n	80096fc <__libc_init_array+0x24>
 80096e8:	4e0b      	ldr	r6, [pc, #44]	; (8009718 <__libc_init_array+0x40>)
 80096ea:	4c0c      	ldr	r4, [pc, #48]	; (800971c <__libc_init_array+0x44>)
 80096ec:	f000 f836 	bl	800975c <_init>
 80096f0:	1ba4      	subs	r4, r4, r6
 80096f2:	10a4      	asrs	r4, r4, #2
 80096f4:	2500      	movs	r5, #0
 80096f6:	42a5      	cmp	r5, r4
 80096f8:	d105      	bne.n	8009706 <__libc_init_array+0x2e>
 80096fa:	bd70      	pop	{r4, r5, r6, pc}
 80096fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009700:	4798      	blx	r3
 8009702:	3501      	adds	r5, #1
 8009704:	e7ee      	b.n	80096e4 <__libc_init_array+0xc>
 8009706:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800970a:	4798      	blx	r3
 800970c:	3501      	adds	r5, #1
 800970e:	e7f2      	b.n	80096f6 <__libc_init_array+0x1e>
 8009710:	08009828 	.word	0x08009828
 8009714:	08009828 	.word	0x08009828
 8009718:	08009828 	.word	0x08009828
 800971c:	08009830 	.word	0x08009830

08009720 <memset>:
 8009720:	4402      	add	r2, r0
 8009722:	4603      	mov	r3, r0
 8009724:	4293      	cmp	r3, r2
 8009726:	d100      	bne.n	800972a <memset+0xa>
 8009728:	4770      	bx	lr
 800972a:	f803 1b01 	strb.w	r1, [r3], #1
 800972e:	e7f9      	b.n	8009724 <memset+0x4>

08009730 <strncpy>:
 8009730:	b570      	push	{r4, r5, r6, lr}
 8009732:	3901      	subs	r1, #1
 8009734:	4604      	mov	r4, r0
 8009736:	b902      	cbnz	r2, 800973a <strncpy+0xa>
 8009738:	bd70      	pop	{r4, r5, r6, pc}
 800973a:	4623      	mov	r3, r4
 800973c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8009740:	f803 5b01 	strb.w	r5, [r3], #1
 8009744:	1e56      	subs	r6, r2, #1
 8009746:	b92d      	cbnz	r5, 8009754 <strncpy+0x24>
 8009748:	4414      	add	r4, r2
 800974a:	42a3      	cmp	r3, r4
 800974c:	d0f4      	beq.n	8009738 <strncpy+0x8>
 800974e:	f803 5b01 	strb.w	r5, [r3], #1
 8009752:	e7fa      	b.n	800974a <strncpy+0x1a>
 8009754:	461c      	mov	r4, r3
 8009756:	4632      	mov	r2, r6
 8009758:	e7ed      	b.n	8009736 <strncpy+0x6>
	...

0800975c <_init>:
 800975c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800975e:	bf00      	nop
 8009760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009762:	bc08      	pop	{r3}
 8009764:	469e      	mov	lr, r3
 8009766:	4770      	bx	lr

08009768 <_fini>:
 8009768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800976a:	bf00      	nop
 800976c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800976e:	bc08      	pop	{r3}
 8009770:	469e      	mov	lr, r3
 8009772:	4770      	bx	lr
