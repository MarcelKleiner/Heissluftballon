
GCS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095b4  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08009744  08009744  00019744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097f0  080097f0  0002018c  2**0
                  CONTENTS
  4 .ARM          00000008  080097f0  080097f0  000197f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097f8  080097f8  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080097f8  080097f8  000197f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009800  08009800  00019800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08009804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013fc  2000018c  08009990  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001588  08009990  00021588  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027e0f  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005116  00000000  00000000  00047fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001760  00000000  00000000  0004d0e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001518  00000000  00000000  0004e848  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021ef2  00000000  00000000  0004fd60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019f24  00000000  00000000  00071c52  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ab426  00000000  00000000  0008bb76  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136f9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006054  00000000  00000000  00137018  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000018c 	.word	0x2000018c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800972c 	.word	0x0800972c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000190 	.word	0x20000190
 80001cc:	0800972c 	.word	0x0800972c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__gedf2>:
 8000548:	f04f 3cff 	mov.w	ip, #4294967295
 800054c:	e006      	b.n	800055c <__cmpdf2+0x4>
 800054e:	bf00      	nop

08000550 <__ledf2>:
 8000550:	f04f 0c01 	mov.w	ip, #1
 8000554:	e002      	b.n	800055c <__cmpdf2+0x4>
 8000556:	bf00      	nop

08000558 <__cmpdf2>:
 8000558:	f04f 0c01 	mov.w	ip, #1
 800055c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000560:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000564:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000568:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800056c:	bf18      	it	ne
 800056e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000572:	d01b      	beq.n	80005ac <__cmpdf2+0x54>
 8000574:	b001      	add	sp, #4
 8000576:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800057a:	bf0c      	ite	eq
 800057c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000580:	ea91 0f03 	teqne	r1, r3
 8000584:	bf02      	ittt	eq
 8000586:	ea90 0f02 	teqeq	r0, r2
 800058a:	2000      	moveq	r0, #0
 800058c:	4770      	bxeq	lr
 800058e:	f110 0f00 	cmn.w	r0, #0
 8000592:	ea91 0f03 	teq	r1, r3
 8000596:	bf58      	it	pl
 8000598:	4299      	cmppl	r1, r3
 800059a:	bf08      	it	eq
 800059c:	4290      	cmpeq	r0, r2
 800059e:	bf2c      	ite	cs
 80005a0:	17d8      	asrcs	r0, r3, #31
 80005a2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005a6:	f040 0001 	orr.w	r0, r0, #1
 80005aa:	4770      	bx	lr
 80005ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005b4:	d102      	bne.n	80005bc <__cmpdf2+0x64>
 80005b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005ba:	d107      	bne.n	80005cc <__cmpdf2+0x74>
 80005bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005c4:	d1d6      	bne.n	8000574 <__cmpdf2+0x1c>
 80005c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005ca:	d0d3      	beq.n	8000574 <__cmpdf2+0x1c>
 80005cc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <__aeabi_cdrcmple>:
 80005d4:	4684      	mov	ip, r0
 80005d6:	4610      	mov	r0, r2
 80005d8:	4662      	mov	r2, ip
 80005da:	468c      	mov	ip, r1
 80005dc:	4619      	mov	r1, r3
 80005de:	4663      	mov	r3, ip
 80005e0:	e000      	b.n	80005e4 <__aeabi_cdcmpeq>
 80005e2:	bf00      	nop

080005e4 <__aeabi_cdcmpeq>:
 80005e4:	b501      	push	{r0, lr}
 80005e6:	f7ff ffb7 	bl	8000558 <__cmpdf2>
 80005ea:	2800      	cmp	r0, #0
 80005ec:	bf48      	it	mi
 80005ee:	f110 0f00 	cmnmi.w	r0, #0
 80005f2:	bd01      	pop	{r0, pc}

080005f4 <__aeabi_dcmpeq>:
 80005f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f8:	f7ff fff4 	bl	80005e4 <__aeabi_cdcmpeq>
 80005fc:	bf0c      	ite	eq
 80005fe:	2001      	moveq	r0, #1
 8000600:	2000      	movne	r0, #0
 8000602:	f85d fb08 	ldr.w	pc, [sp], #8
 8000606:	bf00      	nop

08000608 <__aeabi_dcmplt>:
 8000608:	f84d ed08 	str.w	lr, [sp, #-8]!
 800060c:	f7ff ffea 	bl	80005e4 <__aeabi_cdcmpeq>
 8000610:	bf34      	ite	cc
 8000612:	2001      	movcc	r0, #1
 8000614:	2000      	movcs	r0, #0
 8000616:	f85d fb08 	ldr.w	pc, [sp], #8
 800061a:	bf00      	nop

0800061c <__aeabi_dcmple>:
 800061c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000620:	f7ff ffe0 	bl	80005e4 <__aeabi_cdcmpeq>
 8000624:	bf94      	ite	ls
 8000626:	2001      	movls	r0, #1
 8000628:	2000      	movhi	r0, #0
 800062a:	f85d fb08 	ldr.w	pc, [sp], #8
 800062e:	bf00      	nop

08000630 <__aeabi_dcmpge>:
 8000630:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000634:	f7ff ffce 	bl	80005d4 <__aeabi_cdrcmple>
 8000638:	bf94      	ite	ls
 800063a:	2001      	movls	r0, #1
 800063c:	2000      	movhi	r0, #0
 800063e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000642:	bf00      	nop

08000644 <__aeabi_dcmpgt>:
 8000644:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000648:	f7ff ffc4 	bl	80005d4 <__aeabi_cdrcmple>
 800064c:	bf34      	ite	cc
 800064e:	2001      	movcc	r0, #1
 8000650:	2000      	movcs	r0, #0
 8000652:	f85d fb08 	ldr.w	pc, [sp], #8
 8000656:	bf00      	nop

08000658 <__aeabi_uldivmod>:
 8000658:	b953      	cbnz	r3, 8000670 <__aeabi_uldivmod+0x18>
 800065a:	b94a      	cbnz	r2, 8000670 <__aeabi_uldivmod+0x18>
 800065c:	2900      	cmp	r1, #0
 800065e:	bf08      	it	eq
 8000660:	2800      	cmpeq	r0, #0
 8000662:	bf1c      	itt	ne
 8000664:	f04f 31ff 	movne.w	r1, #4294967295
 8000668:	f04f 30ff 	movne.w	r0, #4294967295
 800066c:	f000 b972 	b.w	8000954 <__aeabi_idiv0>
 8000670:	f1ad 0c08 	sub.w	ip, sp, #8
 8000674:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000678:	f000 f806 	bl	8000688 <__udivmoddi4>
 800067c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <__udivmoddi4>:
 8000688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800068c:	9e08      	ldr	r6, [sp, #32]
 800068e:	4604      	mov	r4, r0
 8000690:	4688      	mov	r8, r1
 8000692:	2b00      	cmp	r3, #0
 8000694:	d14b      	bne.n	800072e <__udivmoddi4+0xa6>
 8000696:	428a      	cmp	r2, r1
 8000698:	4615      	mov	r5, r2
 800069a:	d967      	bls.n	800076c <__udivmoddi4+0xe4>
 800069c:	fab2 f282 	clz	r2, r2
 80006a0:	b14a      	cbz	r2, 80006b6 <__udivmoddi4+0x2e>
 80006a2:	f1c2 0720 	rsb	r7, r2, #32
 80006a6:	fa01 f302 	lsl.w	r3, r1, r2
 80006aa:	fa20 f707 	lsr.w	r7, r0, r7
 80006ae:	4095      	lsls	r5, r2
 80006b0:	ea47 0803 	orr.w	r8, r7, r3
 80006b4:	4094      	lsls	r4, r2
 80006b6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006ba:	0c23      	lsrs	r3, r4, #16
 80006bc:	fbb8 f7fe 	udiv	r7, r8, lr
 80006c0:	fa1f fc85 	uxth.w	ip, r5
 80006c4:	fb0e 8817 	mls	r8, lr, r7, r8
 80006c8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006cc:	fb07 f10c 	mul.w	r1, r7, ip
 80006d0:	4299      	cmp	r1, r3
 80006d2:	d909      	bls.n	80006e8 <__udivmoddi4+0x60>
 80006d4:	18eb      	adds	r3, r5, r3
 80006d6:	f107 30ff 	add.w	r0, r7, #4294967295
 80006da:	f080 811b 	bcs.w	8000914 <__udivmoddi4+0x28c>
 80006de:	4299      	cmp	r1, r3
 80006e0:	f240 8118 	bls.w	8000914 <__udivmoddi4+0x28c>
 80006e4:	3f02      	subs	r7, #2
 80006e6:	442b      	add	r3, r5
 80006e8:	1a5b      	subs	r3, r3, r1
 80006ea:	b2a4      	uxth	r4, r4
 80006ec:	fbb3 f0fe 	udiv	r0, r3, lr
 80006f0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006f8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006fc:	45a4      	cmp	ip, r4
 80006fe:	d909      	bls.n	8000714 <__udivmoddi4+0x8c>
 8000700:	192c      	adds	r4, r5, r4
 8000702:	f100 33ff 	add.w	r3, r0, #4294967295
 8000706:	f080 8107 	bcs.w	8000918 <__udivmoddi4+0x290>
 800070a:	45a4      	cmp	ip, r4
 800070c:	f240 8104 	bls.w	8000918 <__udivmoddi4+0x290>
 8000710:	3802      	subs	r0, #2
 8000712:	442c      	add	r4, r5
 8000714:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000718:	eba4 040c 	sub.w	r4, r4, ip
 800071c:	2700      	movs	r7, #0
 800071e:	b11e      	cbz	r6, 8000728 <__udivmoddi4+0xa0>
 8000720:	40d4      	lsrs	r4, r2
 8000722:	2300      	movs	r3, #0
 8000724:	e9c6 4300 	strd	r4, r3, [r6]
 8000728:	4639      	mov	r1, r7
 800072a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072e:	428b      	cmp	r3, r1
 8000730:	d909      	bls.n	8000746 <__udivmoddi4+0xbe>
 8000732:	2e00      	cmp	r6, #0
 8000734:	f000 80eb 	beq.w	800090e <__udivmoddi4+0x286>
 8000738:	2700      	movs	r7, #0
 800073a:	e9c6 0100 	strd	r0, r1, [r6]
 800073e:	4638      	mov	r0, r7
 8000740:	4639      	mov	r1, r7
 8000742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000746:	fab3 f783 	clz	r7, r3
 800074a:	2f00      	cmp	r7, #0
 800074c:	d147      	bne.n	80007de <__udivmoddi4+0x156>
 800074e:	428b      	cmp	r3, r1
 8000750:	d302      	bcc.n	8000758 <__udivmoddi4+0xd0>
 8000752:	4282      	cmp	r2, r0
 8000754:	f200 80fa 	bhi.w	800094c <__udivmoddi4+0x2c4>
 8000758:	1a84      	subs	r4, r0, r2
 800075a:	eb61 0303 	sbc.w	r3, r1, r3
 800075e:	2001      	movs	r0, #1
 8000760:	4698      	mov	r8, r3
 8000762:	2e00      	cmp	r6, #0
 8000764:	d0e0      	beq.n	8000728 <__udivmoddi4+0xa0>
 8000766:	e9c6 4800 	strd	r4, r8, [r6]
 800076a:	e7dd      	b.n	8000728 <__udivmoddi4+0xa0>
 800076c:	b902      	cbnz	r2, 8000770 <__udivmoddi4+0xe8>
 800076e:	deff      	udf	#255	; 0xff
 8000770:	fab2 f282 	clz	r2, r2
 8000774:	2a00      	cmp	r2, #0
 8000776:	f040 808f 	bne.w	8000898 <__udivmoddi4+0x210>
 800077a:	1b49      	subs	r1, r1, r5
 800077c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000780:	fa1f f885 	uxth.w	r8, r5
 8000784:	2701      	movs	r7, #1
 8000786:	fbb1 fcfe 	udiv	ip, r1, lr
 800078a:	0c23      	lsrs	r3, r4, #16
 800078c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000790:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000794:	fb08 f10c 	mul.w	r1, r8, ip
 8000798:	4299      	cmp	r1, r3
 800079a:	d907      	bls.n	80007ac <__udivmoddi4+0x124>
 800079c:	18eb      	adds	r3, r5, r3
 800079e:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007a2:	d202      	bcs.n	80007aa <__udivmoddi4+0x122>
 80007a4:	4299      	cmp	r1, r3
 80007a6:	f200 80cd 	bhi.w	8000944 <__udivmoddi4+0x2bc>
 80007aa:	4684      	mov	ip, r0
 80007ac:	1a59      	subs	r1, r3, r1
 80007ae:	b2a3      	uxth	r3, r4
 80007b0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007b4:	fb0e 1410 	mls	r4, lr, r0, r1
 80007b8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80007bc:	fb08 f800 	mul.w	r8, r8, r0
 80007c0:	45a0      	cmp	r8, r4
 80007c2:	d907      	bls.n	80007d4 <__udivmoddi4+0x14c>
 80007c4:	192c      	adds	r4, r5, r4
 80007c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ca:	d202      	bcs.n	80007d2 <__udivmoddi4+0x14a>
 80007cc:	45a0      	cmp	r8, r4
 80007ce:	f200 80b6 	bhi.w	800093e <__udivmoddi4+0x2b6>
 80007d2:	4618      	mov	r0, r3
 80007d4:	eba4 0408 	sub.w	r4, r4, r8
 80007d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007dc:	e79f      	b.n	800071e <__udivmoddi4+0x96>
 80007de:	f1c7 0c20 	rsb	ip, r7, #32
 80007e2:	40bb      	lsls	r3, r7
 80007e4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007e8:	ea4e 0e03 	orr.w	lr, lr, r3
 80007ec:	fa01 f407 	lsl.w	r4, r1, r7
 80007f0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007f4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007f8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007fc:	4325      	orrs	r5, r4
 80007fe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000802:	0c2c      	lsrs	r4, r5, #16
 8000804:	fb08 3319 	mls	r3, r8, r9, r3
 8000808:	fa1f fa8e 	uxth.w	sl, lr
 800080c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000810:	fb09 f40a 	mul.w	r4, r9, sl
 8000814:	429c      	cmp	r4, r3
 8000816:	fa02 f207 	lsl.w	r2, r2, r7
 800081a:	fa00 f107 	lsl.w	r1, r0, r7
 800081e:	d90b      	bls.n	8000838 <__udivmoddi4+0x1b0>
 8000820:	eb1e 0303 	adds.w	r3, lr, r3
 8000824:	f109 30ff 	add.w	r0, r9, #4294967295
 8000828:	f080 8087 	bcs.w	800093a <__udivmoddi4+0x2b2>
 800082c:	429c      	cmp	r4, r3
 800082e:	f240 8084 	bls.w	800093a <__udivmoddi4+0x2b2>
 8000832:	f1a9 0902 	sub.w	r9, r9, #2
 8000836:	4473      	add	r3, lr
 8000838:	1b1b      	subs	r3, r3, r4
 800083a:	b2ad      	uxth	r5, r5
 800083c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000840:	fb08 3310 	mls	r3, r8, r0, r3
 8000844:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000848:	fb00 fa0a 	mul.w	sl, r0, sl
 800084c:	45a2      	cmp	sl, r4
 800084e:	d908      	bls.n	8000862 <__udivmoddi4+0x1da>
 8000850:	eb1e 0404 	adds.w	r4, lr, r4
 8000854:	f100 33ff 	add.w	r3, r0, #4294967295
 8000858:	d26b      	bcs.n	8000932 <__udivmoddi4+0x2aa>
 800085a:	45a2      	cmp	sl, r4
 800085c:	d969      	bls.n	8000932 <__udivmoddi4+0x2aa>
 800085e:	3802      	subs	r0, #2
 8000860:	4474      	add	r4, lr
 8000862:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000866:	fba0 8902 	umull	r8, r9, r0, r2
 800086a:	eba4 040a 	sub.w	r4, r4, sl
 800086e:	454c      	cmp	r4, r9
 8000870:	46c2      	mov	sl, r8
 8000872:	464b      	mov	r3, r9
 8000874:	d354      	bcc.n	8000920 <__udivmoddi4+0x298>
 8000876:	d051      	beq.n	800091c <__udivmoddi4+0x294>
 8000878:	2e00      	cmp	r6, #0
 800087a:	d069      	beq.n	8000950 <__udivmoddi4+0x2c8>
 800087c:	ebb1 050a 	subs.w	r5, r1, sl
 8000880:	eb64 0403 	sbc.w	r4, r4, r3
 8000884:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000888:	40fd      	lsrs	r5, r7
 800088a:	40fc      	lsrs	r4, r7
 800088c:	ea4c 0505 	orr.w	r5, ip, r5
 8000890:	e9c6 5400 	strd	r5, r4, [r6]
 8000894:	2700      	movs	r7, #0
 8000896:	e747      	b.n	8000728 <__udivmoddi4+0xa0>
 8000898:	f1c2 0320 	rsb	r3, r2, #32
 800089c:	fa20 f703 	lsr.w	r7, r0, r3
 80008a0:	4095      	lsls	r5, r2
 80008a2:	fa01 f002 	lsl.w	r0, r1, r2
 80008a6:	fa21 f303 	lsr.w	r3, r1, r3
 80008aa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008ae:	4338      	orrs	r0, r7
 80008b0:	0c01      	lsrs	r1, r0, #16
 80008b2:	fbb3 f7fe 	udiv	r7, r3, lr
 80008b6:	fa1f f885 	uxth.w	r8, r5
 80008ba:	fb0e 3317 	mls	r3, lr, r7, r3
 80008be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008c2:	fb07 f308 	mul.w	r3, r7, r8
 80008c6:	428b      	cmp	r3, r1
 80008c8:	fa04 f402 	lsl.w	r4, r4, r2
 80008cc:	d907      	bls.n	80008de <__udivmoddi4+0x256>
 80008ce:	1869      	adds	r1, r5, r1
 80008d0:	f107 3cff 	add.w	ip, r7, #4294967295
 80008d4:	d22f      	bcs.n	8000936 <__udivmoddi4+0x2ae>
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d92d      	bls.n	8000936 <__udivmoddi4+0x2ae>
 80008da:	3f02      	subs	r7, #2
 80008dc:	4429      	add	r1, r5
 80008de:	1acb      	subs	r3, r1, r3
 80008e0:	b281      	uxth	r1, r0
 80008e2:	fbb3 f0fe 	udiv	r0, r3, lr
 80008e6:	fb0e 3310 	mls	r3, lr, r0, r3
 80008ea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008ee:	fb00 f308 	mul.w	r3, r0, r8
 80008f2:	428b      	cmp	r3, r1
 80008f4:	d907      	bls.n	8000906 <__udivmoddi4+0x27e>
 80008f6:	1869      	adds	r1, r5, r1
 80008f8:	f100 3cff 	add.w	ip, r0, #4294967295
 80008fc:	d217      	bcs.n	800092e <__udivmoddi4+0x2a6>
 80008fe:	428b      	cmp	r3, r1
 8000900:	d915      	bls.n	800092e <__udivmoddi4+0x2a6>
 8000902:	3802      	subs	r0, #2
 8000904:	4429      	add	r1, r5
 8000906:	1ac9      	subs	r1, r1, r3
 8000908:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800090c:	e73b      	b.n	8000786 <__udivmoddi4+0xfe>
 800090e:	4637      	mov	r7, r6
 8000910:	4630      	mov	r0, r6
 8000912:	e709      	b.n	8000728 <__udivmoddi4+0xa0>
 8000914:	4607      	mov	r7, r0
 8000916:	e6e7      	b.n	80006e8 <__udivmoddi4+0x60>
 8000918:	4618      	mov	r0, r3
 800091a:	e6fb      	b.n	8000714 <__udivmoddi4+0x8c>
 800091c:	4541      	cmp	r1, r8
 800091e:	d2ab      	bcs.n	8000878 <__udivmoddi4+0x1f0>
 8000920:	ebb8 0a02 	subs.w	sl, r8, r2
 8000924:	eb69 020e 	sbc.w	r2, r9, lr
 8000928:	3801      	subs	r0, #1
 800092a:	4613      	mov	r3, r2
 800092c:	e7a4      	b.n	8000878 <__udivmoddi4+0x1f0>
 800092e:	4660      	mov	r0, ip
 8000930:	e7e9      	b.n	8000906 <__udivmoddi4+0x27e>
 8000932:	4618      	mov	r0, r3
 8000934:	e795      	b.n	8000862 <__udivmoddi4+0x1da>
 8000936:	4667      	mov	r7, ip
 8000938:	e7d1      	b.n	80008de <__udivmoddi4+0x256>
 800093a:	4681      	mov	r9, r0
 800093c:	e77c      	b.n	8000838 <__udivmoddi4+0x1b0>
 800093e:	3802      	subs	r0, #2
 8000940:	442c      	add	r4, r5
 8000942:	e747      	b.n	80007d4 <__udivmoddi4+0x14c>
 8000944:	f1ac 0c02 	sub.w	ip, ip, #2
 8000948:	442b      	add	r3, r5
 800094a:	e72f      	b.n	80007ac <__udivmoddi4+0x124>
 800094c:	4638      	mov	r0, r7
 800094e:	e708      	b.n	8000762 <__udivmoddi4+0xda>
 8000950:	4637      	mov	r7, r6
 8000952:	e6e9      	b.n	8000728 <__udivmoddi4+0xa0>

08000954 <__aeabi_idiv0>:
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop

08000958 <_ZN7AppMainC1Ev>:
 *      Author: marce
 */

#include "AppMain.h"

AppMain::AppMain() {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4618      	mov	r0, r3
 8000964:	f000 fa5e 	bl	8000e24 <_ZN5ModelC1Ev>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	33ac      	adds	r3, #172	; 0xac
 800096c:	4618      	mov	r0, r3
 800096e:	f000 faa7 	bl	8000ec0 <_ZN10RFM95_LoRaC1Ev>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	33cc      	adds	r3, #204	; 0xcc
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	4611      	mov	r1, r2
 800097a:	4618      	mov	r0, r3
 800097c:	f000 f98b 	bl	8000c96 <_ZN3GPSC1EP5Model>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000986:	4618      	mov	r0, r3
 8000988:	f000 febd 	bl	8001706 <_ZN7USB_ComC1Ev>
}
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <_ZN7AppMain7initRFMEv>:

void AppMain::initRFM() {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]

	rfm95.setFrequency(868000000);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	33ac      	adds	r3, #172	; 0xac
 80009a4:	4917      	ldr	r1, [pc, #92]	; (8000a04 <_ZN7AppMain7initRFMEv+0x6c>)
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 fd0a 	bl	80013c0 <_ZN10RFM95_LoRa12setFrequencyEl>
	rfm95.setSignalBandwidth(31.25E3);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	33ac      	adds	r3, #172	; 0xac
 80009b0:	f647 2112 	movw	r1, #31250	; 0x7a12
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fd87 	bl	80014c8 <_ZN10RFM95_LoRa18setSignalBandwidthEl>
	rfm95.setSpreadingFactor(12);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	33ac      	adds	r3, #172	; 0xac
 80009be:	210c      	movs	r1, #12
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 fd41 	bl	8001448 <_ZN10RFM95_LoRa18setSpreadingFactorEi>
	rfm95.setCodingRate4(5);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	33ac      	adds	r3, #172	; 0xac
 80009ca:	2105      	movs	r1, #5
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 fe3f 	bl	8001650 <_ZN10RFM95_LoRa14setCodingRate4Ei>
	if (!rfm95.begin(866E6)) {
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	33ac      	adds	r3, #172	; 0xac
 80009d6:	490c      	ldr	r1, [pc, #48]	; (8000a08 <_ZN7AppMain7initRFMEv+0x70>)
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 fb19 	bl	8001010 <_ZN10RFM95_LoRa5beginEl>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	bf0c      	ite	eq
 80009e4:	2301      	moveq	r3, #1
 80009e6:	2300      	movne	r3, #0
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d005      	beq.n	80009fa <_ZN7AppMain7initRFMEv+0x62>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80009ee:	2201      	movs	r2, #1
 80009f0:	2102      	movs	r1, #2
 80009f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f6:	f001 fdcf 	bl	8002598 <HAL_GPIO_WritePin>
	}
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	33bca100 	.word	0x33bca100
 8000a08:	339e1c80 	.word	0x339e1c80

08000a0c <_ZN7AppMain8mainProgEv>:

void AppMain::mainProg() {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b0e2      	sub	sp, #392	; 0x188
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	6018      	str	r0, [r3, #0]


	HAL_Delay(100);
 8000a16:	2064      	movs	r0, #100	; 0x64
 8000a18:	f001 fad8 	bl	8001fcc <HAL_Delay>
	gps.init();
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	33cc      	adds	r3, #204	; 0xcc
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 f959 	bl	8000cda <_ZN3GPS4initEv>
	initRFM();
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	6818      	ldr	r0, [r3, #0]
 8000a2c:	f7ff ffb4 	bl	8000998 <_ZN7AppMain7initRFMEv>

	uint8_t transmitUSB1[TRANSMIT_DATA_LENGTH/3];
	uint8_t transmitUSB2[TRANSMIT_DATA_LENGTH/3];
	uint8_t transmitUSB3[TRANSMIT_DATA_LENGTH/3];

	uint8_t txOffset 	= 0;	//offset after payload read
 8000a30:	2300      	movs	r3, #0
 8000a32:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	uint8_t counter 	= 0;	//Payload counter
 8000a36:	2300      	movs	r3, #0
 8000a38:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
	uint8_t gpsCounter	= 0;	//GPS Counter
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	uint8_t splitCnt	= 0;	//sliptcounter
 8000a42:	2300      	movs	r3, #0
 8000a44:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
	uint8_t packetSize 	= 0;	//packetsize from RFM95 receive
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177

	bool init			= true;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
	while (1) {

		if(init){
 8000a54:	f897 3183 	ldrb.w	r3, [r7, #387]	; 0x183
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d003      	beq.n	8000a64 <_ZN7AppMain8mainProgEv+0x58>
			init = false;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8000a62:	e7f7      	b.n	8000a54 <_ZN7AppMain8mainProgEv+0x48>
		}else{
			/*Prepare for Transmit*/

			//-----------------------read RFM data------------------------------
			packetSize = rfm95.parsePacket();
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	33ac      	adds	r3, #172	; 0xac
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 fb12 	bl	8001096 <_ZN10RFM95_LoRa11parsePacketEi>
 8000a72:	4603      	mov	r3, r0
 8000a74:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
			if (packetSize != 0) {
 8000a78:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d0e9      	beq.n	8000a54 <_ZN7AppMain8mainProgEv+0x48>
				counter = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
				while (rfm95.available()) {
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	33ac      	adds	r3, #172	; 0xac
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 fbde 	bl	800124e <_ZN10RFM95_LoRa9availableEv>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	bf14      	ite	ne
 8000a98:	2301      	movne	r3, #1
 8000a9a:	2300      	moveq	r3, #0
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d014      	beq.n	8000acc <_ZN7AppMain8mainProgEv+0xc0>
					transmitData[counter] = rfm95.read();
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	33ac      	adds	r3, #172	; 0xac
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 fbe1 	bl	8001270 <_ZN10RFM95_LoRa4readEv>
 8000aae:	4602      	mov	r2, r0
 8000ab0:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 8000aba:	440b      	add	r3, r1
 8000abc:	f803 2ccc 	strb.w	r2, [r3, #-204]
					counter++;
 8000ac0:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
				while (rfm95.available()) {
 8000aca:	e7dc      	b.n	8000a86 <_ZN7AppMain8mainProgEv+0x7a>
				}
				counter++;
 8000acc:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
				transmitData[counter] = rfm95.packetRssi();
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	33ac      	adds	r3, #172	; 0xac
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 fb47 	bl	8001170 <_ZN10RFM95_LoRa10packetRssiEv>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 8000aee:	440b      	add	r3, r1
 8000af0:	f803 2ccc 	strb.w	r2, [r3, #-204]
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000af4:	2102      	movs	r1, #2
 8000af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afa:	f001 fd65 	bl	80025c8 <HAL_GPIO_TogglePin>

			//---------------------read GCS GPS data----------------------------
			char *gpsData = model.getGPS_GCS();
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f9c0 	bl	8000e88 <_ZN5Model10getGPS_GCSEv>
 8000b08:	f8c7 0170 	str.w	r0, [r7, #368]	; 0x170

			txOffset = counter;
 8000b0c:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8000b10:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187

			for (gpsCounter = 0; gpsCounter < GPS_DATA_SIZE; gpsCounter++) {
 8000b14:	2300      	movs	r3, #0
 8000b16:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8000b1a:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 8000b1e:	2b4f      	cmp	r3, #79	; 0x4f
 8000b20:	d817      	bhi.n	8000b52 <_ZN7AppMain8mainProgEv+0x146>
				transmitData[txOffset] = gpsData[gpsCounter];
 8000b22:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 8000b26:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8000b2a:	441a      	add	r2, r3
 8000b2c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8000b30:	7812      	ldrb	r2, [r2, #0]
 8000b32:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 8000b36:	440b      	add	r3, r1
 8000b38:	f803 2ccc 	strb.w	r2, [r3, #-204]
				txOffset++;
 8000b3c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8000b40:	3301      	adds	r3, #1
 8000b42:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
			for (gpsCounter = 0; gpsCounter < GPS_DATA_SIZE; gpsCounter++) {
 8000b46:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8000b50:	e7e3      	b.n	8000b1a <_ZN7AppMain8mainProgEv+0x10e>
			}

			//---------------------add sync bytes----------------------------
			txOffset++;
 8000b52:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8000b56:	3301      	adds	r3, #1
 8000b58:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
			transmitData[txOffset] = '!';
 8000b5c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8000b60:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8000b64:	4413      	add	r3, r2
 8000b66:	2221      	movs	r2, #33	; 0x21
 8000b68:	f803 2ccc 	strb.w	r2, [r3, #-204]
			txOffset++;
 8000b6c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8000b70:	3301      	adds	r3, #1
 8000b72:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
			transmitData[txOffset] = '*';
 8000b76:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8000b7a:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8000b7e:	4413      	add	r3, r2
 8000b80:	222a      	movs	r2, #42	; 0x2a
 8000b82:	f803 2ccc 	strb.w	r2, [r3, #-204]
			txOffset++;
 8000b86:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
			transmitData[txOffset] = '%';
 8000b90:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8000b94:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8000b98:	4413      	add	r3, r2
 8000b9a:	2225      	movs	r2, #37	; 0x25
 8000b9c:	f803 2ccc 	strb.w	r2, [r3, #-204]

			//---------------------split transmitData----------------------------
			splitCnt = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
			for(int a = 0; a<3;a++){
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000bac:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	dc51      	bgt.n	8000c58 <_ZN7AppMain8mainProgEv+0x24c>
				for(int b = 0; b < (TRANSMIT_DATA_LENGTH/3);b++ ){
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8000bba:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000bbe:	2b3b      	cmp	r3, #59	; 0x3b
 8000bc0:	dc44      	bgt.n	8000c4c <_ZN7AppMain8mainProgEv+0x240>
					if(splitCnt <= TRANSMIT_DATA_LENGTH){
 8000bc2:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8000bc6:	2bb4      	cmp	r3, #180	; 0xb4
 8000bc8:	d83a      	bhi.n	8000c40 <_ZN7AppMain8mainProgEv+0x234>
						switch (a) {
 8000bca:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d013      	beq.n	8000bfa <_ZN7AppMain8mainProgEv+0x1ee>
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d020      	beq.n	8000c18 <_ZN7AppMain8mainProgEv+0x20c>
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d000      	beq.n	8000bdc <_ZN7AppMain8mainProgEv+0x1d0>
								break;
							case 2:
								transmitUSB3[b] = transmitData[splitCnt];
								break;
							default:
								break;
 8000bda:	e02c      	b.n	8000c36 <_ZN7AppMain8mainProgEv+0x22a>
								transmitUSB1[b] = transmitData[splitCnt];
 8000bdc:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8000be0:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8000be4:	4413      	add	r3, r2
 8000be6:	f813 1ccc 	ldrb.w	r1, [r3, #-204]
 8000bea:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000bee:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000bf2:	4413      	add	r3, r2
 8000bf4:	460a      	mov	r2, r1
 8000bf6:	701a      	strb	r2, [r3, #0]
								break;
 8000bf8:	e01d      	b.n	8000c36 <_ZN7AppMain8mainProgEv+0x22a>
								transmitUSB2[b] = transmitData[splitCnt];
 8000bfa:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8000bfe:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8000c02:	4413      	add	r3, r2
 8000c04:	f813 1ccc 	ldrb.w	r1, [r3, #-204]
 8000c08:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000c0c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000c10:	4413      	add	r3, r2
 8000c12:	460a      	mov	r2, r1
 8000c14:	701a      	strb	r2, [r3, #0]
								break;
 8000c16:	e00e      	b.n	8000c36 <_ZN7AppMain8mainProgEv+0x22a>
								transmitUSB3[b] = transmitData[splitCnt];
 8000c18:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8000c1c:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8000c20:	4413      	add	r3, r2
 8000c22:	f813 1ccc 	ldrb.w	r1, [r3, #-204]
 8000c26:	f107 0208 	add.w	r2, r7, #8
 8000c2a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000c2e:	4413      	add	r3, r2
 8000c30:	460a      	mov	r2, r1
 8000c32:	701a      	strb	r2, [r3, #0]
								break;
 8000c34:	bf00      	nop
						}
						splitCnt++;
 8000c36:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
				for(int b = 0; b < (TRANSMIT_DATA_LENGTH/3);b++ ){
 8000c40:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000c44:	3301      	adds	r3, #1
 8000c46:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8000c4a:	e7b6      	b.n	8000bba <_ZN7AppMain8mainProgEv+0x1ae>
			for(int a = 0; a<3;a++){
 8000c4c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000c50:	3301      	adds	r3, #1
 8000c52:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000c56:	e7a9      	b.n	8000bac <_ZN7AppMain8mainProgEv+0x1a0>
					}
				}
			}

			usbCom.usbTransmit(transmitUSB1, (TRANSMIT_DATA_LENGTH/3));
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000c60:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8000c64:	223c      	movs	r2, #60	; 0x3c
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 fd58 	bl	800171c <_ZN7USB_Com11usbTransmitEPhh>
			usbCom.usbTransmit(transmitUSB2, (TRANSMIT_DATA_LENGTH/3));
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000c74:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000c78:	223c      	movs	r2, #60	; 0x3c
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 fd4e 	bl	800171c <_ZN7USB_Com11usbTransmitEPhh>
			usbCom.usbTransmit(transmitUSB3, (TRANSMIT_DATA_LENGTH/3));
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000c88:	f107 0108 	add.w	r1, r7, #8
 8000c8c:	223c      	movs	r2, #60	; 0x3c
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 fd44 	bl	800171c <_ZN7USB_Com11usbTransmitEPhh>
		}
		}
	}
 8000c94:	e6de      	b.n	8000a54 <_ZN7AppMain8mainProgEv+0x48>

08000c96 <_ZN3GPSC1EP5Model>:


	//extern UART_HandleTypeDef huart2;


GPS::GPS(Model* model) {
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
 8000c9e:	6039      	str	r1, [r7, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	711a      	strb	r2, [r3, #4]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	715a      	strb	r2, [r3, #5]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	this->model = model;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	683a      	ldr	r2, [r7, #0]
 8000cc8:	601a      	str	r2, [r3, #0]
	init();
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f000 f805 	bl	8000cda <_ZN3GPS4initEv>
}
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <_ZN3GPS4initEv>:
 *
 * @param none
 * @return none
 *
 */
void GPS::init(){
 8000cda:	b480      	push	{r7}
 8000cdc:	b085      	sub	sp, #20
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < GPS_DATA_SIZE; i++) {
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	2b4f      	cmp	r3, #79	; 0x4f
 8000cea:	dc0f      	bgt.n	8000d0c <_ZN3GPS4initEv+0x32>
		data[i] = '0';
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	3356      	adds	r3, #86	; 0x56
 8000cf4:	2230      	movs	r2, #48	; 0x30
 8000cf6:	701a      	strb	r2, [r3, #0]
		GPS_Data[i] = '0';
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	3306      	adds	r3, #6
 8000d00:	2230      	movs	r2, #48	; 0x30
 8000d02:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < GPS_DATA_SIZE; i++) {
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	3301      	adds	r3, #1
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	e7ec      	b.n	8000ce6 <_ZN3GPS4initEv+0xc>
	}
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <_ZN3GPS12gpsInterruptEh>:
*
*
* @param huart UART handle.
* @return None
 */
void GPS::gpsInterrupt(uint8_t rxData) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	70fb      	strb	r3, [r7, #3]
	static uint8_t i = 0;
		/* Receive one byte in interrupt mode */


		/*Check if received byte is a '$' (begin of record) */
		if ((char) rxData == '$') {
 8000d24:	78fb      	ldrb	r3, [r7, #3]
 8000d26:	2b24      	cmp	r3, #36	; 0x24
 8000d28:	d105      	bne.n	8000d36 <_ZN3GPS12gpsInterruptEh+0x1e>
			recordStart = true;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	711a      	strb	r2, [r3, #4]
			i = 0;
 8000d30:	4b3b      	ldr	r3, [pc, #236]	; (8000e20 <_ZN3GPS12gpsInterruptEh+0x108>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
		}
		/*Check if received byte is a '\n' (end of record)*/
		if ((char) rxData == '\n') {
 8000d36:	78fb      	ldrb	r3, [r7, #3]
 8000d38:	2b0a      	cmp	r3, #10
 8000d3a:	d15a      	bne.n	8000df2 <_ZN3GPS12gpsInterruptEh+0xda>
			recordStart = false;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	711a      	strb	r2, [r3, #4]

			if (i > GPS_DATA_SIZE-10) {
 8000d42:	4b37      	ldr	r3, [pc, #220]	; (8000e20 <_ZN3GPS12gpsInterruptEh+0x108>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b46      	cmp	r3, #70	; 0x46
 8000d48:	d939      	bls.n	8000dbe <_ZN3GPS12gpsInterruptEh+0xa6>
				copyCounter = 0;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
				for (int i = 0; i < GPS_DATA_SIZE; i++) {
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	2b4f      	cmp	r3, #79	; 0x4f
 8000d5a:	dc09      	bgt.n	8000d70 <_ZN3GPS12gpsInterruptEh+0x58>
					GPS_Data[i] = '0';
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	4413      	add	r3, r2
 8000d62:	3306      	adds	r3, #6
 8000d64:	2230      	movs	r2, #48	; 0x30
 8000d66:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < GPS_DATA_SIZE; i++) {
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	e7f2      	b.n	8000d56 <_ZN3GPS12gpsInterruptEh+0x3e>
				}
				while (data[copyCounter] != '\r' && copyCounter <= 80) {
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8000d76:	461a      	mov	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8000d80:	2b0d      	cmp	r3, #13
 8000d82:	d01c      	beq.n	8000dbe <_ZN3GPS12gpsInterruptEh+0xa6>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8000d8a:	2b50      	cmp	r3, #80	; 0x50
 8000d8c:	d817      	bhi.n	8000dbe <_ZN3GPS12gpsInterruptEh+0xa6>
					GPS_Data[copyCounter] = data[copyCounter];
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8000d94:	461a      	mov	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	440b      	add	r3, r1
 8000daa:	719a      	strb	r2, [r3, #6]
					copyCounter++;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8000db2:	3301      	adds	r3, #1
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
				while (data[copyCounter] != '\r' && copyCounter <= 80) {
 8000dbc:	e7d8      	b.n	8000d70 <_ZN3GPS12gpsInterruptEh+0x58>
				}
			}
			model->setGPS_Device(GPS_Data);	//set GPS data in Model
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3306      	adds	r3, #6
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4610      	mov	r0, r2
 8000dca:	f000 f868 	bl	8000e9e <_ZN5Model13setGPS_DeviceEPc>
			for (int count = 0; count < GPS_DATA_SIZE; count++) {
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	2b4f      	cmp	r3, #79	; 0x4f
 8000dd6:	dc09      	bgt.n	8000dec <_ZN3GPS12gpsInterruptEh+0xd4>
				data[count] = '0';
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	4413      	add	r3, r2
 8000dde:	3356      	adds	r3, #86	; 0x56
 8000de0:	2230      	movs	r2, #48	; 0x30
 8000de2:	701a      	strb	r2, [r3, #0]
			for (int count = 0; count < GPS_DATA_SIZE; count++) {
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	3301      	adds	r3, #1
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	e7f2      	b.n	8000dd2 <_ZN3GPS12gpsInterruptEh+0xba>
			}
			i = 0;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <_ZN3GPS12gpsInterruptEh+0x108>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
		}

		if (recordStart) {
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	791b      	ldrb	r3, [r3, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d00d      	beq.n	8000e16 <_ZN3GPS12gpsInterruptEh+0xfe>
			data[i] = rxData;
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <_ZN3GPS12gpsInterruptEh+0x108>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4413      	add	r3, r2
 8000e04:	78fa      	ldrb	r2, [r7, #3]
 8000e06:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
			i++;
 8000e0a:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <_ZN3GPS12gpsInterruptEh+0x108>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <_ZN3GPS12gpsInterruptEh+0x108>)
 8000e14:	701a      	strb	r2, [r3, #0]
		}



	}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200001a8 	.word	0x200001a8

08000e24 <_ZN5ModelC1Ev>:
 *      Author: marce
 */

#include "Model.h"

Model::Model() {
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

	for(uint8_t counter = 0; counter<GPS_DATA_SIZE; counter++){
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	73fb      	strb	r3, [r7, #15]
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	2b4f      	cmp	r3, #79	; 0x4f
 8000e34:	d80d      	bhi.n	8000e52 <_ZN5ModelC1Ev+0x2e>
		 gpsGCS[counter] = 11;
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	210b      	movs	r1, #11
 8000e3c:	54d1      	strb	r1, [r2, r3]
		 gpsDevice[counter] = 22;
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	4413      	add	r3, r2
 8000e44:	2216      	movs	r2, #22
 8000e46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	for(uint8_t counter = 0; counter<GPS_DATA_SIZE; counter++){
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	73fb      	strb	r3, [r7, #15]
 8000e50:	e7ee      	b.n	8000e30 <_ZN5ModelC1Ev+0xc>
	}
	 humidity = 0;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	 pressure = 0;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	 tempOutisde = 0;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	 tempOutisde8Bit = 0;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
	 tempInside = 0;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <_ZN5Model10getGPS_GCSEv>:
//get/set GPS_GCS Data
void Model::Model::setGPS_GCS(char* data){
	//not implemented in Device
	//strncpy(gpsGCS, data, GPS_DATA_SIZE);
}
char* Model::getGPS_GCS(void){
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	//not implemented in Device
	return gpsGCS;
 8000e90:	687b      	ldr	r3, [r7, #4]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <_ZN5Model13setGPS_DeviceEPc>:

//get/set GPS_Device Data
void Model::setGPS_Device(char* data){
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	6039      	str	r1, [r7, #0]
	strncpy(gpsDevice, data, GPS_DATA_SIZE);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3350      	adds	r3, #80	; 0x50
 8000eac:	2250      	movs	r2, #80	; 0x50
 8000eae:	6839      	ldr	r1, [r7, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f008 fc25 	bl	8009700 <strncpy>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <_ZN10RFM95_LoRaC1Ev>:
 */

#include "RFM95LoRa.h"
#include "../../AppMain/AppMain.h"

RFM95_LoRa::RFM95_LoRa() :
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  _frequency(0),
  _packetIndex(0),
  _implicitHeaderMode(0),
  _onReceive(0)
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <_ZN10RFM95_LoRaC1Ev+0x34>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	615a      	str	r2, [r3, #20]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	61da      	str	r2, [r3, #28]
{

}
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	08009794 	.word	0x08009794

08000ef8 <_ZN10RFM95_LoRa9selectRFMEv>:
 * @brief RFM95 chip select
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::selectRFM(){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f001 fb45 	bl	8002598 <HAL_GPIO_WritePin>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <_ZN10RFM95_LoRa11deselectRFMEv>:
 * @brief RFM95 chip deselect
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::deselectRFM(){
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_SET);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f28:	f001 fb36 	bl	8002598 <HAL_GPIO_WritePin>
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <_ZN10RFM95_LoRa8resetRFMEv>:

void RFM95_LoRa::resetRFM(){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2108      	movs	r1, #8
 8000f40:	4808      	ldr	r0, [pc, #32]	; (8000f64 <_ZN10RFM95_LoRa8resetRFMEv+0x30>)
 8000f42:	f001 fb29 	bl	8002598 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f46:	2001      	movs	r0, #1
 8000f48:	f001 f840 	bl	8001fcc <HAL_Delay>
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_SET);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2108      	movs	r1, #8
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <_ZN10RFM95_LoRa8resetRFMEv+0x30>)
 8000f52:	f001 fb21 	bl	8002598 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000f56:	2005      	movs	r0, #5
 8000f58:	f001 f838 	bl	8001fcc <HAL_Delay>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	48000400 	.word	0x48000400

08000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>:

bool RFM95_LoRa::writeRegister(uint8_t addr, uint8_t data){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	70fb      	strb	r3, [r7, #3]
 8000f74:	4613      	mov	r3, r2
 8000f76:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2] = {(uint8_t)(addr | 0x80), data};
 8000f78:	78fb      	ldrb	r3, [r7, #3]
 8000f7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	733b      	strb	r3, [r7, #12]
 8000f82:	78bb      	ldrb	r3, [r7, #2]
 8000f84:	737b      	strb	r3, [r7, #13]
	selectRFM();
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ffb6 	bl	8000ef8 <_ZN10RFM95_LoRa9selectRFMEv>
	if(HAL_SPI_Transmit(&hspi1, (uint8_t*)buff, 2, 100) != HAL_OK){
 8000f8c:	f107 010c 	add.w	r1, r7, #12
 8000f90:	2364      	movs	r3, #100	; 0x64
 8000f92:	2202      	movs	r2, #2
 8000f94:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <_ZN10RFM95_LoRa13writeRegisterEhh+0x5c>)
 8000f96:	f003 fc87 	bl	80048a8 <HAL_SPI_Transmit>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	bf14      	ite	ne
 8000fa0:	2301      	movne	r3, #1
 8000fa2:	2300      	moveq	r3, #0
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d004      	beq.n	8000fb4 <_ZN10RFM95_LoRa13writeRegisterEhh+0x4c>
		deselectRFM();
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ffb3 	bl	8000f16 <_ZN10RFM95_LoRa11deselectRFMEv>
		return false;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e003      	b.n	8000fbc <_ZN10RFM95_LoRa13writeRegisterEhh+0x54>
	}
	deselectRFM();
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ffae 	bl	8000f16 <_ZN10RFM95_LoRa11deselectRFMEv>
	return true;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000598 	.word	0x20000598

08000fc8 <_ZN10RFM95_LoRa12readRegisterEh>:

uint8_t RFM95_LoRa::readRegister(uint8_t addr){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	70fb      	strb	r3, [r7, #3]
	uint8_t rxData[2] = {0,0};
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	733b      	strb	r3, [r7, #12]
 8000fd8:	2300      	movs	r3, #0
 8000fda:	737b      	strb	r3, [r7, #13]
	uint8_t txData[1] = {addr};
 8000fdc:	78fb      	ldrb	r3, [r7, #3]
 8000fde:	723b      	strb	r3, [r7, #8]

	selectRFM();
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff89 	bl	8000ef8 <_ZN10RFM95_LoRa9selectRFMEv>
		HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)txData,(uint8_t*)rxData,2,100);
 8000fe6:	f107 020c 	add.w	r2, r7, #12
 8000fea:	f107 0108 	add.w	r1, r7, #8
 8000fee:	2364      	movs	r3, #100	; 0x64
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <_ZN10RFM95_LoRa12readRegisterEh+0x44>)
 8000ff6:	f003 fdbd 	bl	8004b74 <HAL_SPI_TransmitReceive>
	deselectRFM();
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ff8b 	bl	8000f16 <_ZN10RFM95_LoRa11deselectRFMEv>
	return rxData[1];
 8001000:	7b7b      	ldrb	r3, [r7, #13]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000598 	.word	0x20000598

08001010 <_ZN10RFM95_LoRa5beginEl>:


int RFM95_LoRa::begin(long frequency){
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
 resetRFM();
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ff8a 	bl	8000f34 <_ZN10RFM95_LoRa8resetRFMEv>
  // check version
  uint8_t version = readRegister(REG_VERSION);
 8001020:	2142      	movs	r1, #66	; 0x42
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ffd0 	bl	8000fc8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001028:	4603      	mov	r3, r0
 800102a:	73fb      	strb	r3, [r7, #15]
  if (version != 0x12) {
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	2b12      	cmp	r3, #18
 8001030:	d001      	beq.n	8001036 <_ZN10RFM95_LoRa5beginEl+0x26>
    return 0;
 8001032:	2300      	movs	r3, #0
 8001034:	e02b      	b.n	800108e <_ZN10RFM95_LoRa5beginEl+0x7e>
  }
  // put in sleep mode
  sleep();
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 f977 	bl	800132a <_ZN10RFM95_LoRa5sleepEv>
  // set frequency
  setFrequency(frequency);
 800103c:	6839      	ldr	r1, [r7, #0]
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f000 f9be 	bl	80013c0 <_ZN10RFM95_LoRa12setFrequencyEl>
  // set base addresses
  writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	210e      	movs	r1, #14
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff8d 	bl	8000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FIFO_RX_BASE_ADDR, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	210f      	movs	r1, #15
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ff88 	bl	8000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set LNA boost
  writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 8001058:	210c      	movs	r1, #12
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ffb4 	bl	8000fc8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001060:	4603      	mov	r3, r0
 8001062:	f043 0303 	orr.w	r3, r3, #3
 8001066:	b2db      	uxtb	r3, r3
 8001068:	461a      	mov	r2, r3
 800106a:	210c      	movs	r1, #12
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff7b 	bl	8000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set auto AGC
  writeRegister(REG_MODEM_CONFIG_3, 0x04);
 8001072:	2204      	movs	r2, #4
 8001074:	2126      	movs	r1, #38	; 0x26
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ff76 	bl	8000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set output power to 17 dBm
  setTxPower(20);
 800107c:	2201      	movs	r2, #1
 800107e:	2114      	movs	r1, #20
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f000 f95f 	bl	8001344 <_ZN10RFM95_LoRa10setTxPowerEii>
  // put in standby mode
  idle();
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f000 f942 	bl	8001310 <_ZN10RFM95_LoRa4idleEv>
  return 1;
 800108c:	2301      	movs	r3, #1
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <_ZN10RFM95_LoRa11parsePacketEi>:



int RFM95_LoRa::parsePacket(int size)

{
 8001096:	b580      	push	{r7, lr}
 8001098:	b084      	sub	sp, #16
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	6039      	str	r1, [r7, #0]
  int packetLength = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
  int irqFlags = readRegister(REG_IRQ_FLAGS);
 80010a4:	2112      	movs	r1, #18
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ff8e 	bl	8000fc8 <_ZN10RFM95_LoRa12readRegisterEh>
 80010ac:	4603      	mov	r3, r0
 80010ae:	60bb      	str	r3, [r7, #8]
  if (size > 0) {
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	dd0a      	ble.n	80010cc <_ZN10RFM95_LoRa11parsePacketEi+0x36>
    implicitHeaderMode();
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 fb0d 	bl	80016d6 <_ZN10RFM95_LoRa18implicitHeaderModeEv>
    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	461a      	mov	r2, r3
 80010c2:	2122      	movs	r1, #34	; 0x22
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff4f 	bl	8000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>
 80010ca:	e002      	b.n	80010d2 <_ZN10RFM95_LoRa11parsePacketEi+0x3c>
  } else {
    explicitHeaderMode();
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 faea 	bl	80016a6 <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, irqFlags);
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	461a      	mov	r2, r3
 80010d8:	2112      	movs	r1, #18
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ff44 	bl	8000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>
  if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d026      	beq.n	8001138 <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	f003 0320 	and.w	r3, r3, #32
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d121      	bne.n	8001138 <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
    // received a packet
    _packetIndex = 0;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	615a      	str	r2, [r3, #20]
    // read packet length
    if (_implicitHeaderMode) {
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d006      	beq.n	8001110 <_ZN10RFM95_LoRa11parsePacketEi+0x7a>
      packetLength = readRegister(REG_PAYLOAD_LENGTH);
 8001102:	2122      	movs	r1, #34	; 0x22
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff5f 	bl	8000fc8 <_ZN10RFM95_LoRa12readRegisterEh>
 800110a:	4603      	mov	r3, r0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	e005      	b.n	800111c <_ZN10RFM95_LoRa11parsePacketEi+0x86>
    } else {
      packetLength = readRegister(REG_RX_NB_BYTES);
 8001110:	2113      	movs	r1, #19
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ff58 	bl	8000fc8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001118:	4603      	mov	r3, r0
 800111a:	60fb      	str	r3, [r7, #12]
    }
    // set FIFO address to current RX address
    writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
 800111c:	2110      	movs	r1, #16
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ff52 	bl	8000fc8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001124:	4603      	mov	r3, r0
 8001126:	461a      	mov	r2, r3
 8001128:	210d      	movs	r1, #13
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ff1c 	bl	8000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in standby mode
    idle();
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 f8ed 	bl	8001310 <_ZN10RFM95_LoRa4idleEv>
 8001136:	e015      	b.n	8001164 <_ZN10RFM95_LoRa11parsePacketEi+0xce>
  } else if (readRegister(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
 8001138:	2101      	movs	r1, #1
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ff44 	bl	8000fc8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001140:	4603      	mov	r3, r0
 8001142:	2b86      	cmp	r3, #134	; 0x86
 8001144:	bf14      	ite	ne
 8001146:	2301      	movne	r3, #1
 8001148:	2300      	moveq	r3, #0
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d009      	beq.n	8001164 <_ZN10RFM95_LoRa11parsePacketEi+0xce>
    // not currently in RX mode
    // reset FIFO address
    writeRegister(REG_FIFO_ADDR_PTR, 0);
 8001150:	2200      	movs	r2, #0
 8001152:	210d      	movs	r1, #13
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff07 	bl	8000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in single RX mode
    writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 800115a:	2286      	movs	r2, #134	; 0x86
 800115c:	2101      	movs	r1, #1
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ff02 	bl	8000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  return packetLength;
 8001164:	68fb      	ldr	r3, [r7, #12]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <_ZN10RFM95_LoRa10packetRssiEv>:


int RFM95_LoRa::packetRssi(){
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  return (readRegister(REG_PKT_RSSI_VALUE) - (_frequency < 868E6 ? 164 : 157));
 8001178:	211a      	movs	r1, #26
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ff24 	bl	8000fc8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001180:	4603      	mov	r3, r0
 8001182:	461c      	mov	r4, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f973 	bl	8000474 <__aeabi_i2d>
 800118e:	a308      	add	r3, pc, #32	; (adr r3, 80011b0 <_ZN10RFM95_LoRa10packetRssiEv+0x40>)
 8001190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001194:	f7ff fa38 	bl	8000608 <__aeabi_dcmplt>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <_ZN10RFM95_LoRa10packetRssiEv+0x32>
 800119e:	23a4      	movs	r3, #164	; 0xa4
 80011a0:	e000      	b.n	80011a4 <_ZN10RFM95_LoRa10packetRssiEv+0x34>
 80011a2:	239d      	movs	r3, #157	; 0x9d
 80011a4:	1ae3      	subs	r3, r4, r3
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd90      	pop	{r4, r7, pc}
 80011ae:	bf00      	nop
 80011b0:	80000000 	.word	0x80000000
 80011b4:	41c9de50 	.word	0x41c9de50

080011b8 <_ZN10RFM95_LoRa5writeEh>:

float RFM95_LoRa::packetSnr(){
  return ((int8_t)readRegister(REG_PKT_SNR_VALUE)) * 0.25;
}

size_t RFM95_LoRa::write(uint8_t byte){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	70fb      	strb	r3, [r7, #3]
  return write(&byte, sizeof(byte));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	3304      	adds	r3, #4
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	1cf9      	adds	r1, r7, #3
 80011ce:	2201      	movs	r2, #1
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	4798      	blx	r3
 80011d4:	4603      	mov	r3, r0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <_ZN10RFM95_LoRa5writeEPKhj>:



size_t RFM95_LoRa::write(const uint8_t *buffer, size_t size){
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	60f8      	str	r0, [r7, #12]
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
  int currentLength = readRegister(REG_PAYLOAD_LENGTH);
 80011ea:	2122      	movs	r1, #34	; 0x22
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	f7ff feeb 	bl	8000fc8 <_ZN10RFM95_LoRa12readRegisterEh>
 80011f2:	4603      	mov	r3, r0
 80011f4:	613b      	str	r3, [r7, #16]
  // check size
  if ((currentLength + size) > MAX_PKT_LENGTH) {
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4413      	add	r3, r2
 80011fc:	2bff      	cmp	r3, #255	; 0xff
 80011fe:	d903      	bls.n	8001208 <_ZN10RFM95_LoRa5writeEPKhj+0x2a>
    size = MAX_PKT_LENGTH - currentLength;
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001206:	607b      	str	r3, [r7, #4]
  }
  // write data
  for (size_t i = 0; i < size; i++) {
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	429a      	cmp	r2, r3
 8001212:	d20c      	bcs.n	800122e <_ZN10RFM95_LoRa5writeEPKhj+0x50>
    writeRegister(REG_FIFO, buffer[i]);
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	4413      	add	r3, r2
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	2100      	movs	r1, #0
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f7ff fea1 	bl	8000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>
  for (size_t i = 0; i < size; i++) {
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	3301      	adds	r3, #1
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	e7ee      	b.n	800120c <_ZN10RFM95_LoRa5writeEPKhj+0x2e>
  }

  // update length
  writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	4413      	add	r3, r2
 8001238:	b2db      	uxtb	r3, r3
 800123a:	461a      	mov	r2, r3
 800123c:	2122      	movs	r1, #34	; 0x22
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f7ff fe92 	bl	8000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return size;
 8001244:	687b      	ldr	r3, [r7, #4]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <_ZN10RFM95_LoRa9availableEv>:


int RFM95_LoRa::available()
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8001256:	2113      	movs	r1, #19
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff feb5 	bl	8000fc8 <_ZN10RFM95_LoRa12readRegisterEh>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	1ad3      	subs	r3, r2, r3
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <_ZN10RFM95_LoRa4readEv>:



int RFM95_LoRa::read(){
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	3308      	adds	r3, #8
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	4798      	blx	r3
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	bf0c      	ite	eq
 800128a:	2301      	moveq	r3, #1
 800128c:	2300      	movne	r3, #0
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b00      	cmp	r3, #0
 8001292:	d002      	beq.n	800129a <_ZN10RFM95_LoRa4readEv+0x2a>
    return -1;
 8001294:	f04f 33ff 	mov.w	r3, #4294967295
 8001298:	e009      	b.n	80012ae <_ZN10RFM95_LoRa4readEv+0x3e>
  }
  _packetIndex++;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	615a      	str	r2, [r3, #20]
  return readRegister(REG_FIFO);
 80012a4:	2100      	movs	r1, #0
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff fe8e 	bl	8000fc8 <_ZN10RFM95_LoRa12readRegisterEh>
 80012ac:	4603      	mov	r3, r0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <_ZN10RFM95_LoRa4peekEv>:



int RFM95_LoRa::peek(){
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b084      	sub	sp, #16
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
  if (!available()) {
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	3308      	adds	r3, #8
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	4798      	blx	r3
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	bf0c      	ite	eq
 80012d0:	2301      	moveq	r3, #1
 80012d2:	2300      	movne	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d002      	beq.n	80012e0 <_ZN10RFM95_LoRa4peekEv+0x2a>
    return -1;
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	e013      	b.n	8001308 <_ZN10RFM95_LoRa4peekEv+0x52>
  }
  // store current FIFO address
  int currentAddress = readRegister(REG_FIFO_ADDR_PTR);
 80012e0:	210d      	movs	r1, #13
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff fe70 	bl	8000fc8 <_ZN10RFM95_LoRa12readRegisterEh>
 80012e8:	4603      	mov	r3, r0
 80012ea:	60fb      	str	r3, [r7, #12]
  // read
  uint8_t b = readRegister(REG_FIFO);
 80012ec:	2100      	movs	r1, #0
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff fe6a 	bl	8000fc8 <_ZN10RFM95_LoRa12readRegisterEh>
 80012f4:	4603      	mov	r3, r0
 80012f6:	72fb      	strb	r3, [r7, #11]
  // restore FIFO address
  writeRegister(REG_FIFO_ADDR_PTR, currentAddress);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	461a      	mov	r2, r3
 80012fe:	210d      	movs	r1, #13
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff fe31 	bl	8000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return b;
 8001306:	7afb      	ldrb	r3, [r7, #11]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <_ZN10RFM95_LoRa4idleEv>:
    explicitHeaderMode();
  }
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
}

void RFM95_LoRa::idle(){
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8001318:	2281      	movs	r2, #129	; 0x81
 800131a:	2101      	movs	r1, #1
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff fe23 	bl	8000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <_ZN10RFM95_LoRa5sleepEv>:

void RFM95_LoRa::sleep(){
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8001332:	2280      	movs	r2, #128	; 0x80
 8001334:	2101      	movs	r1, #1
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff fe16 	bl	8000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <_ZN10RFM95_LoRa10setTxPowerEii>:



void RFM95_LoRa::setTxPower(int level, int outputPin){
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  if (PA_OUTPUT_RFO_PIN == outputPin) {
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d116      	bne.n	8001384 <_ZN10RFM95_LoRa10setTxPowerEii+0x40>
    // RFO
    if (level < 0) {
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	2b00      	cmp	r3, #0
 800135a:	da02      	bge.n	8001362 <_ZN10RFM95_LoRa10setTxPowerEii+0x1e>
      level = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	e004      	b.n	800136c <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
    } else if (level > 14) {
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	2b0e      	cmp	r3, #14
 8001366:	dd01      	ble.n	800136c <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
      level = 14;
 8001368:	230e      	movs	r3, #14
 800136a:	60bb      	str	r3, [r7, #8]
    }
    writeRegister(REG_PA_CONFIG, 0x70 | level);
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	b25b      	sxtb	r3, r3
 8001370:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001374:	b25b      	sxtb	r3, r3
 8001376:	b2db      	uxtb	r3, r3
 8001378:	461a      	mov	r2, r3
 800137a:	2109      	movs	r1, #9
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f7ff fdf3 	bl	8000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>
    } else if (level > 17) {
      level = 17;
    }
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
  }
}
 8001382:	e018      	b.n	80013b6 <_ZN10RFM95_LoRa10setTxPowerEii+0x72>
    if (level < 2) {
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2b01      	cmp	r3, #1
 8001388:	dc02      	bgt.n	8001390 <_ZN10RFM95_LoRa10setTxPowerEii+0x4c>
      level = 2;
 800138a:	2302      	movs	r3, #2
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	e004      	b.n	800139a <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
    } else if (level > 17) {
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	2b11      	cmp	r3, #17
 8001394:	dd01      	ble.n	800139a <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
      level = 17;
 8001396:	2311      	movs	r3, #17
 8001398:	60bb      	str	r3, [r7, #8]
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	3b02      	subs	r3, #2
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	b25b      	sxtb	r3, r3
 80013a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013a8:	b25b      	sxtb	r3, r3
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	461a      	mov	r2, r3
 80013ae:	2109      	movs	r1, #9
 80013b0:	68f8      	ldr	r0, [r7, #12]
 80013b2:	f7ff fdd9 	bl	8000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <_ZN10RFM95_LoRa12setFrequencyEl>:



void RFM95_LoRa::setFrequency(long frequency){
 80013c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  _frequency = frequency;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	611a      	str	r2, [r3, #16]
  uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80013d6:	135e      	asrs	r6, r3, #13
 80013d8:	04dd      	lsls	r5, r3, #19
 80013da:	4a1a      	ldr	r2, [pc, #104]	; (8001444 <_ZN10RFM95_LoRa12setFrequencyEl+0x84>)
 80013dc:	f04f 0300 	mov.w	r3, #0
 80013e0:	4628      	mov	r0, r5
 80013e2:	4631      	mov	r1, r6
 80013e4:	f7ff f938 	bl	8000658 <__aeabi_uldivmod>
 80013e8:	4603      	mov	r3, r0
 80013ea:	460c      	mov	r4, r1
 80013ec:	e9c7 3402 	strd	r3, r4, [r7, #8]
  writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 80013f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80013f4:	f04f 0300 	mov.w	r3, #0
 80013f8:	f04f 0400 	mov.w	r4, #0
 80013fc:	0c0b      	lsrs	r3, r1, #16
 80013fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001402:	0c14      	lsrs	r4, r2, #16
 8001404:	b2db      	uxtb	r3, r3
 8001406:	461a      	mov	r2, r3
 8001408:	2106      	movs	r1, #6
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff fdac 	bl	8000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 8001410:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001414:	f04f 0300 	mov.w	r3, #0
 8001418:	f04f 0400 	mov.w	r4, #0
 800141c:	0a0b      	lsrs	r3, r1, #8
 800141e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001422:	0a14      	lsrs	r4, r2, #8
 8001424:	b2db      	uxtb	r3, r3
 8001426:	461a      	mov	r2, r3
 8001428:	2107      	movs	r1, #7
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff fd9c 	bl	8000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8001430:	7a3b      	ldrb	r3, [r7, #8]
 8001432:	461a      	mov	r2, r3
 8001434:	2108      	movs	r1, #8
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff fd96 	bl	8000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001444:	01e84800 	.word	0x01e84800

08001448 <_ZN10RFM95_LoRa18setSpreadingFactorEi>:



void RFM95_LoRa::setSpreadingFactor(int sf){
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  if (sf < 6) {
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	2b05      	cmp	r3, #5
 8001456:	dc02      	bgt.n	800145e <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x16>
    sf = 6;
 8001458:	2306      	movs	r3, #6
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	e004      	b.n	8001468 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
  } else if (sf > 12) {
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	2b0c      	cmp	r3, #12
 8001462:	dd01      	ble.n	8001468 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
    sf = 12;
 8001464:	230c      	movs	r3, #12
 8001466:	603b      	str	r3, [r7, #0]
  }

  if (sf == 6) {
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	2b06      	cmp	r3, #6
 800146c:	d10a      	bne.n	8001484 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x3c>
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc5);
 800146e:	22c5      	movs	r2, #197	; 0xc5
 8001470:	2131      	movs	r1, #49	; 0x31
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff fd78 	bl	8000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0c);
 8001478:	220c      	movs	r2, #12
 800147a:	2137      	movs	r1, #55	; 0x37
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff fd73 	bl	8000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>
 8001482:	e009      	b.n	8001498 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x50>
  } else {
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
 8001484:	22c3      	movs	r2, #195	; 0xc3
 8001486:	2131      	movs	r1, #49	; 0x31
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff fd6d 	bl	8000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
 800148e:	220a      	movs	r2, #10
 8001490:	2137      	movs	r1, #55	; 0x37
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fd68 	bl	8000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  writeRegister(REG_MODEM_CONFIG_2, (readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 8001498:	211e      	movs	r1, #30
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff fd94 	bl	8000fc8 <_ZN10RFM95_LoRa12readRegisterEh>
 80014a0:	4603      	mov	r3, r0
 80014a2:	b25b      	sxtb	r3, r3
 80014a4:	f003 030f 	and.w	r3, r3, #15
 80014a8:	b25a      	sxtb	r2, r3
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	b25b      	sxtb	r3, r3
 80014b0:	4313      	orrs	r3, r2
 80014b2:	b25b      	sxtb	r3, r3
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	461a      	mov	r2, r3
 80014b8:	211e      	movs	r1, #30
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff fd54 	bl	8000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <_ZN10RFM95_LoRa18setSignalBandwidthEl>:


void RFM95_LoRa::setSignalBandwidth(long sbw){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  int bw;
  if (sbw <= 7.8E3) {
 80014d2:	6838      	ldr	r0, [r7, #0]
 80014d4:	f7fe ffce 	bl	8000474 <__aeabi_i2d>
 80014d8:	a34b      	add	r3, pc, #300	; (adr r3, 8001608 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x140>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7ff f89d 	bl	800061c <__aeabi_dcmple>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d002      	beq.n	80014ee <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x26>
    bw = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	e071      	b.n	80015d2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 10.4E3) {
 80014ee:	6838      	ldr	r0, [r7, #0]
 80014f0:	f7fe ffc0 	bl	8000474 <__aeabi_i2d>
 80014f4:	a346      	add	r3, pc, #280	; (adr r3, 8001610 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x148>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	f7ff f88f 	bl	800061c <__aeabi_dcmple>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d002      	beq.n	800150a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x42>
    bw = 1;
 8001504:	2301      	movs	r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	e063      	b.n	80015d2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 15.6E3) {
 800150a:	6838      	ldr	r0, [r7, #0]
 800150c:	f7fe ffb2 	bl	8000474 <__aeabi_i2d>
 8001510:	a341      	add	r3, pc, #260	; (adr r3, 8001618 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x150>)
 8001512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001516:	f7ff f881 	bl	800061c <__aeabi_dcmple>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d002      	beq.n	8001526 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x5e>
    bw = 2;
 8001520:	2302      	movs	r3, #2
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	e055      	b.n	80015d2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 20.8E3) {
 8001526:	6838      	ldr	r0, [r7, #0]
 8001528:	f7fe ffa4 	bl	8000474 <__aeabi_i2d>
 800152c:	a33c      	add	r3, pc, #240	; (adr r3, 8001620 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x158>)
 800152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001532:	f7ff f873 	bl	800061c <__aeabi_dcmple>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d002      	beq.n	8001542 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x7a>
    bw = 3;
 800153c:	2303      	movs	r3, #3
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	e047      	b.n	80015d2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 31.25E3) {
 8001542:	6838      	ldr	r0, [r7, #0]
 8001544:	f7fe ff96 	bl	8000474 <__aeabi_i2d>
 8001548:	a337      	add	r3, pc, #220	; (adr r3, 8001628 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x160>)
 800154a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154e:	f7ff f865 	bl	800061c <__aeabi_dcmple>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d002      	beq.n	800155e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x96>
    bw = 4;
 8001558:	2304      	movs	r3, #4
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	e039      	b.n	80015d2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 41.7E3) {
 800155e:	6838      	ldr	r0, [r7, #0]
 8001560:	f7fe ff88 	bl	8000474 <__aeabi_i2d>
 8001564:	a332      	add	r3, pc, #200	; (adr r3, 8001630 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x168>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	f7ff f857 	bl	800061c <__aeabi_dcmple>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xb2>
    bw = 5;
 8001574:	2305      	movs	r3, #5
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	e02b      	b.n	80015d2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 62.5E3) {
 800157a:	6838      	ldr	r0, [r7, #0]
 800157c:	f7fe ff7a 	bl	8000474 <__aeabi_i2d>
 8001580:	a32d      	add	r3, pc, #180	; (adr r3, 8001638 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x170>)
 8001582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001586:	f7ff f849 	bl	800061c <__aeabi_dcmple>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d002      	beq.n	8001596 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xce>
    bw = 6;
 8001590:	2306      	movs	r3, #6
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	e01d      	b.n	80015d2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 125E3) {
 8001596:	6838      	ldr	r0, [r7, #0]
 8001598:	f7fe ff6c 	bl	8000474 <__aeabi_i2d>
 800159c:	a328      	add	r3, pc, #160	; (adr r3, 8001640 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x178>)
 800159e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a2:	f7ff f83b 	bl	800061c <__aeabi_dcmple>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d002      	beq.n	80015b2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xea>
    bw = 7;
 80015ac:	2307      	movs	r3, #7
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	e00f      	b.n	80015d2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 250E3) {
 80015b2:	6838      	ldr	r0, [r7, #0]
 80015b4:	f7fe ff5e 	bl	8000474 <__aeabi_i2d>
 80015b8:	a323      	add	r3, pc, #140	; (adr r3, 8001648 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x180>)
 80015ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015be:	f7ff f82d 	bl	800061c <__aeabi_dcmple>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d002      	beq.n	80015ce <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x106>
    bw = 8;
 80015c8:	2308      	movs	r3, #8
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	e001      	b.n	80015d2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else /*if (sbw <= 250E3)*/ {
    bw = 9;
 80015ce:	2309      	movs	r3, #9
 80015d0:	60fb      	str	r3, [r7, #12]
  }

  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 80015d2:	211d      	movs	r1, #29
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff fcf7 	bl	8000fc8 <_ZN10RFM95_LoRa12readRegisterEh>
 80015da:	4603      	mov	r3, r0
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	b25a      	sxtb	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	011b      	lsls	r3, r3, #4
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	4313      	orrs	r3, r2
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	461a      	mov	r2, r3
 80015f2:	211d      	movs	r1, #29
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff fcb7 	bl	8000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	f3af 8000 	nop.w
 8001608:	00000000 	.word	0x00000000
 800160c:	40be7800 	.word	0x40be7800
 8001610:	00000000 	.word	0x00000000
 8001614:	40c45000 	.word	0x40c45000
 8001618:	00000000 	.word	0x00000000
 800161c:	40ce7800 	.word	0x40ce7800
 8001620:	00000000 	.word	0x00000000
 8001624:	40d45000 	.word	0x40d45000
 8001628:	00000000 	.word	0x00000000
 800162c:	40de8480 	.word	0x40de8480
 8001630:	00000000 	.word	0x00000000
 8001634:	40e45c80 	.word	0x40e45c80
 8001638:	00000000 	.word	0x00000000
 800163c:	40ee8480 	.word	0x40ee8480
 8001640:	00000000 	.word	0x00000000
 8001644:	40fe8480 	.word	0x40fe8480
 8001648:	00000000 	.word	0x00000000
 800164c:	410e8480 	.word	0x410e8480

08001650 <_ZN10RFM95_LoRa14setCodingRate4Ei>:



void RFM95_LoRa::setCodingRate4(int denominator){
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  if (denominator < 5) {
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	2b04      	cmp	r3, #4
 800165e:	dc02      	bgt.n	8001666 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x16>
    denominator = 5;
 8001660:	2305      	movs	r3, #5
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	e004      	b.n	8001670 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
  } else if (denominator > 8) {
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	2b08      	cmp	r3, #8
 800166a:	dd01      	ble.n	8001670 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
	  denominator = 8;
 800166c:	2308      	movs	r3, #8
 800166e:	603b      	str	r3, [r7, #0]
  }
  int cr = denominator - 4;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	3b04      	subs	r3, #4
 8001674:	60fb      	str	r3, [r7, #12]
  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0xf1) | (cr << 1));
 8001676:	211d      	movs	r1, #29
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff fca5 	bl	8000fc8 <_ZN10RFM95_LoRa12readRegisterEh>
 800167e:	4603      	mov	r3, r0
 8001680:	b25b      	sxtb	r3, r3
 8001682:	f023 030e 	bic.w	r3, r3, #14
 8001686:	b25a      	sxtb	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	b25b      	sxtb	r3, r3
 800168e:	4313      	orrs	r3, r2
 8001690:	b25b      	sxtb	r3, r3
 8001692:	b2db      	uxtb	r3, r3
 8001694:	461a      	mov	r2, r3
 8001696:	211d      	movs	r1, #29
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff fc65 	bl	8000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <_ZN10RFM95_LoRa18explicitHeaderModeEv>:
uint8_t RFM95_LoRa::random(){
  return readRegister(REG_RSSI_WIDEBAND);
}


void RFM95_LoRa::explicitHeaderMode(){
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 0;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 80016b4:	211d      	movs	r1, #29
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fc86 	bl	8000fc8 <_ZN10RFM95_LoRa12readRegisterEh>
 80016bc:	4603      	mov	r3, r0
 80016be:	f023 0301 	bic.w	r3, r3, #1
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	461a      	mov	r2, r3
 80016c6:	211d      	movs	r1, #29
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff fc4d 	bl	8000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <_ZN10RFM95_LoRa18implicitHeaderModeEv>:


void RFM95_LoRa::implicitHeaderMode(){
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 1;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 80016e4:	211d      	movs	r1, #29
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff fc6e 	bl	8000fc8 <_ZN10RFM95_LoRa12readRegisterEh>
 80016ec:	4603      	mov	r3, r0
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	461a      	mov	r2, r3
 80016f6:	211d      	movs	r1, #29
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff fc35 	bl	8000f68 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <_ZN7USB_ComC1Ev>:
 *      Author: marce
 */

#include "USBCom.h"

USB_Com::USB_Com() {
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub

}
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_ZN7USB_Com11usbTransmitEPhh>:


bool USB_Com::usbTransmit(uint8_t *data, uint8_t size){
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	4613      	mov	r3, r2
 8001728:	71fb      	strb	r3, [r7, #7]
	uint16_t counter = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	82fb      	strh	r3, [r7, #22]
	while(CDC_Transmit_FS((uint8_t*) data, size) != USBD_OK){
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	b29b      	uxth	r3, r3
 8001732:	4619      	mov	r1, r3
 8001734:	68b8      	ldr	r0, [r7, #8]
 8001736:	f007 fad3 	bl	8008ce0 <CDC_Transmit_FS>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	bf14      	ite	ne
 8001740:	2301      	movne	r3, #1
 8001742:	2300      	moveq	r3, #0
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d000      	beq.n	800174c <_ZN7USB_Com11usbTransmitEPhh+0x30>
 800174a:	e7f0      	b.n	800172e <_ZN7USB_Com11usbTransmitEPhh+0x12>
	/*	counter++;
		if(counter >= USB_TIMEOUT){
			return false;	//Trasmit faild
		}*/
	}
	return true;	//Transmit successful
 800174c:	2301      	movs	r3, #1
}
 800174e:	4618      	mov	r0, r3
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800176e:	4b43      	ldr	r3, [pc, #268]	; (800187c <MX_GPIO_Init+0x124>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001772:	4a42      	ldr	r2, [pc, #264]	; (800187c <MX_GPIO_Init+0x124>)
 8001774:	f043 0304 	orr.w	r3, r3, #4
 8001778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800177a:	4b40      	ldr	r3, [pc, #256]	; (800187c <MX_GPIO_Init+0x124>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177e:	f003 0304 	and.w	r3, r3, #4
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	4b3d      	ldr	r3, [pc, #244]	; (800187c <MX_GPIO_Init+0x124>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178a:	4a3c      	ldr	r2, [pc, #240]	; (800187c <MX_GPIO_Init+0x124>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001792:	4b3a      	ldr	r3, [pc, #232]	; (800187c <MX_GPIO_Init+0x124>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800179e:	4b37      	ldr	r3, [pc, #220]	; (800187c <MX_GPIO_Init+0x124>)
 80017a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a2:	4a36      	ldr	r2, [pc, #216]	; (800187c <MX_GPIO_Init+0x124>)
 80017a4:	f043 0302 	orr.w	r3, r3, #2
 80017a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017aa:	4b34      	ldr	r3, [pc, #208]	; (800187c <MX_GPIO_Init+0x124>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|RFM_NSS_Pin, GPIO_PIN_RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	f248 0102 	movw	r1, #32770	; 0x8002
 80017bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c0:	f000 feea 	bl	8002598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAX_CS_Pin|MAX_DRDY_Pin|RFM_RST_Pin, GPIO_PIN_RESET);
 80017c4:	2200      	movs	r2, #0
 80017c6:	210b      	movs	r1, #11
 80017c8:	482d      	ldr	r0, [pc, #180]	; (8001880 <MX_GPIO_Init+0x128>)
 80017ca:	f000 fee5 	bl	8002598 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RFM_DIO2_Pin|RFM_DIO1_Pin;
 80017ce:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80017d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d4:	2300      	movs	r3, #0
 80017d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	4619      	mov	r1, r3
 80017e2:	4828      	ldr	r0, [pc, #160]	; (8001884 <MX_GPIO_Init+0x12c>)
 80017e4:	f000 fd66 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NC_Pin|NCA8_Pin;
 80017e8:	f240 1301 	movw	r3, #257	; 0x101
 80017ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ee:	2303      	movs	r3, #3
 80017f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	4619      	mov	r1, r3
 80017fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001800:	f000 fd58 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Pin|RFM_NSS_Pin;
 8001804:	f248 0302 	movw	r3, #32770	; 0x8002
 8001808:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180a:	2301      	movs	r3, #1
 800180c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	2300      	movs	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	4619      	mov	r1, r3
 800181c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001820:	f000 fd48 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PRESSURE_INT_Pin;
 8001824:	2310      	movs	r3, #16
 8001826:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001828:	4b17      	ldr	r3, [pc, #92]	; (8001888 <MX_GPIO_Init+0x130>)
 800182a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PRESSURE_INT_GPIO_Port, &GPIO_InitStruct);
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	4619      	mov	r1, r3
 8001836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183a:	f000 fd3b 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MAX_CS_Pin|MAX_DRDY_Pin|RFM_RST_Pin;
 800183e:	230b      	movs	r3, #11
 8001840:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001842:	2301      	movs	r3, #1
 8001844:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184a:	2300      	movs	r3, #0
 800184c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184e:	f107 030c 	add.w	r3, r7, #12
 8001852:	4619      	mov	r1, r3
 8001854:	480a      	ldr	r0, [pc, #40]	; (8001880 <MX_GPIO_Init+0x128>)
 8001856:	f000 fd2d 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RFM_DIO5_Pin|RFM_DIO3_Pin|RFM_DIO4_Pin|RFM_DIO0_Pin;
 800185a:	23f0      	movs	r3, #240	; 0xf0
 800185c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001866:	f107 030c 	add.w	r3, r7, #12
 800186a:	4619      	mov	r1, r3
 800186c:	4804      	ldr	r0, [pc, #16]	; (8001880 <MX_GPIO_Init+0x128>)
 800186e:	f000 fd21 	bl	80022b4 <HAL_GPIO_Init>

}
 8001872:	bf00      	nop
 8001874:	3720      	adds	r7, #32
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000
 8001880:	48000400 	.word	0x48000400
 8001884:	48000800 	.word	0x48000800
 8001888:	10110000 	.word	0x10110000

0800188c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001890:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <MX_I2C1_Init+0x74>)
 8001892:	4a1c      	ldr	r2, [pc, #112]	; (8001904 <MX_I2C1_Init+0x78>)
 8001894:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001896:	4b1a      	ldr	r3, [pc, #104]	; (8001900 <MX_I2C1_Init+0x74>)
 8001898:	4a1b      	ldr	r2, [pc, #108]	; (8001908 <MX_I2C1_Init+0x7c>)
 800189a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800189c:	4b18      	ldr	r3, [pc, #96]	; (8001900 <MX_I2C1_Init+0x74>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018a2:	4b17      	ldr	r3, [pc, #92]	; (8001900 <MX_I2C1_Init+0x74>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018a8:	4b15      	ldr	r3, [pc, #84]	; (8001900 <MX_I2C1_Init+0x74>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018ae:	4b14      	ldr	r3, [pc, #80]	; (8001900 <MX_I2C1_Init+0x74>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <MX_I2C1_Init+0x74>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018ba:	4b11      	ldr	r3, [pc, #68]	; (8001900 <MX_I2C1_Init+0x74>)
 80018bc:	2200      	movs	r2, #0
 80018be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <MX_I2C1_Init+0x74>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018c6:	480e      	ldr	r0, [pc, #56]	; (8001900 <MX_I2C1_Init+0x74>)
 80018c8:	f000 fe97 	bl	80025fa <HAL_I2C_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80018d2:	f000 f925 	bl	8001b20 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018d6:	2100      	movs	r1, #0
 80018d8:	4809      	ldr	r0, [pc, #36]	; (8001900 <MX_I2C1_Init+0x74>)
 80018da:	f000 ff1d 	bl	8002718 <HAL_I2CEx_ConfigAnalogFilter>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80018e4:	f000 f91c 	bl	8001b20 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018e8:	2100      	movs	r1, #0
 80018ea:	4805      	ldr	r0, [pc, #20]	; (8001900 <MX_I2C1_Init+0x74>)
 80018ec:	f000 ff5f 	bl	80027ae <HAL_I2CEx_ConfigDigitalFilter>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80018f6:	f000 f913 	bl	8001b20 <Error_Handler>
  }

}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	2000054c 	.word	0x2000054c
 8001904:	40005400 	.word	0x40005400
 8001908:	00707cbb 	.word	0x00707cbb

0800190c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	; 0x28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a18      	ldr	r2, [pc, #96]	; (800198c <HAL_I2C_MspInit+0x80>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d129      	bne.n	8001982 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192e:	4b18      	ldr	r3, [pc, #96]	; (8001990 <HAL_I2C_MspInit+0x84>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	4a17      	ldr	r2, [pc, #92]	; (8001990 <HAL_I2C_MspInit+0x84>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <HAL_I2C_MspInit+0x84>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001946:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800194a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800194c:	2312      	movs	r3, #18
 800194e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001950:	2301      	movs	r3, #1
 8001952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001954:	2303      	movs	r3, #3
 8001956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001958:	2304      	movs	r3, #4
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4619      	mov	r1, r3
 8001962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001966:	f000 fca5 	bl	80022b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_I2C_MspInit+0x84>)
 800196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196e:	4a08      	ldr	r2, [pc, #32]	; (8001990 <HAL_I2C_MspInit+0x84>)
 8001970:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001974:	6593      	str	r3, [r2, #88]	; 0x58
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_I2C_MspInit+0x84>)
 8001978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001982:	bf00      	nop
 8001984:	3728      	adds	r7, #40	; 0x28
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40005400 	.word	0x40005400
 8001990:	40021000 	.word	0x40021000

08001994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001998:	f000 faa7 	bl	8001eea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800199c:	f000 f822 	bl	80019e4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019a0:	f7ff feda 	bl	8001758 <MX_GPIO_Init>
  MX_I2C1_Init();
 80019a4:	f7ff ff72 	bl	800188c <MX_I2C1_Init>
  MX_SPI1_Init();
 80019a8:	f000 f8e0 	bl	8001b6c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80019ac:	f000 f9fa 	bl	8001da4 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80019b0:	f007 f8d8 	bl	8008b64 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_MspInit(&huart2);		//UART init
 80019b4:	4807      	ldr	r0, [pc, #28]	; (80019d4 <main+0x40>)
 80019b6:	f000 fa25 	bl	8001e04 <HAL_UART_MspInit>
  HAL_SPI_MspInit(&hspi1);		//SPI init
 80019ba:	4807      	ldr	r0, [pc, #28]	; (80019d8 <main+0x44>)
 80019bc:	f000 f914 	bl	8001be8 <HAL_SPI_MspInit>
  HAL_UART_Receive_IT(&huart2, rxData, 1);
 80019c0:	2201      	movs	r2, #1
 80019c2:	4906      	ldr	r1, [pc, #24]	; (80019dc <main+0x48>)
 80019c4:	4803      	ldr	r0, [pc, #12]	; (80019d4 <main+0x40>)
 80019c6:	f003 fc53 	bl	8005270 <HAL_UART_Receive_IT>
  appMain.mainProg();
 80019ca:	4805      	ldr	r0, [pc, #20]	; (80019e0 <main+0x4c>)
 80019cc:	f7ff f81e 	bl	8000a0c <_ZN7AppMain8mainProgEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <main+0x3c>
 80019d2:	bf00      	nop
 80019d4:	200005fc 	.word	0x200005fc
 80019d8:	20000598 	.word	0x20000598
 80019dc:	20000328 	.word	0x20000328
 80019e0:	200001ac 	.word	0x200001ac

080019e4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b0a4      	sub	sp, #144	; 0x90
 80019e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019ee:	2244      	movs	r2, #68	; 0x44
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f007 fe7c 	bl	80096f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	2234      	movs	r2, #52	; 0x34
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f007 fe6e 	bl	80096f0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a14:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a18:	f001 fe66 	bl	80036e8 <HAL_PWREx_ControlVoltageScaling>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	bf14      	ite	ne
 8001a22:	2301      	movne	r3, #1
 8001a24:	2300      	moveq	r3, #0
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <_Z18SystemClock_Configv+0x4c>
  {
    Error_Handler();
 8001a2c:	f000 f878 	bl	8001b20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001a30:	2322      	movs	r3, #34	; 0x22
 8001a32:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a38:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a3e:	2340      	movs	r3, #64	; 0x40
 8001a40:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a42:	2302      	movs	r3, #2
 8001a44:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a46:	2302      	movs	r3, #2
 8001a48:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001a50:	2308      	movs	r3, #8
 8001a52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a56:	2302      	movs	r3, #2
 8001a58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a66:	4618      	mov	r0, r3
 8001a68:	f001 fea4 	bl	80037b4 <HAL_RCC_OscConfig>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	bf14      	ite	ne
 8001a72:	2301      	movne	r3, #1
 8001a74:	2300      	moveq	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <_Z18SystemClock_Configv+0x9c>
  {
    Error_Handler();
 8001a7c:	f000 f850 	bl	8001b20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a80:	230f      	movs	r3, #15
 8001a82:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a84:	2303      	movs	r3, #3
 8001a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a90:	2300      	movs	r3, #0
 8001a92:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a98:	2101      	movs	r1, #1
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f002 faf0 	bl	8004080 <HAL_RCC_ClockConfig>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	bf14      	ite	ne
 8001aa6:	2301      	movne	r3, #1
 8001aa8:	2300      	moveq	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <_Z18SystemClock_Configv+0xd0>
  {
    Error_Handler();
 8001ab0:	f000 f836 	bl	8001b20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001ab4:	f242 0342 	movw	r3, #8258	; 0x2042
 8001ab8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f002 fcdd 	bl	8004488 <HAL_RCCEx_PeriphCLKConfig>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	bf14      	ite	ne
 8001ad4:	2301      	movne	r3, #1
 8001ad6:	2300      	moveq	r3, #0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <_Z18SystemClock_Configv+0xfe>
  {
    Error_Handler();
 8001ade:	f000 f81f 	bl	8001b20 <Error_Handler>
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	3790      	adds	r7, #144	; 0x90
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, rxData, 1);
 8001af4:	2201      	movs	r2, #1
 8001af6:	4907      	ldr	r1, [pc, #28]	; (8001b14 <HAL_UART_RxCpltCallback+0x28>)
 8001af8:	4807      	ldr	r0, [pc, #28]	; (8001b18 <HAL_UART_RxCpltCallback+0x2c>)
 8001afa:	f003 fbb9 	bl	8005270 <HAL_UART_Receive_IT>
	appMain.gps.gpsInterrupt(rxData[0]);
 8001afe:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <HAL_UART_RxCpltCallback+0x28>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	4619      	mov	r1, r3
 8001b04:	4805      	ldr	r0, [pc, #20]	; (8001b1c <HAL_UART_RxCpltCallback+0x30>)
 8001b06:	f7ff f907 	bl	8000d18 <_ZN3GPS12gpsInterruptEh>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000328 	.word	0x20000328
 8001b18:	200005fc 	.word	0x200005fc
 8001b1c:	20000278 	.word	0x20000278

08001b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <_Z41__static_initialization_and_destruction_0ii>:
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d107      	bne.n	8001b50 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d102      	bne.n	8001b50 <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain;
 8001b4a:	4803      	ldr	r0, [pc, #12]	; (8001b58 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001b4c:	f7fe ff04 	bl	8000958 <_ZN7AppMainC1Ev>
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	200001ac 	.word	0x200001ac

08001b5c <_GLOBAL__sub_I_appMain>:
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b64:	2001      	movs	r0, #1
 8001b66:	f7ff ffe3 	bl	8001b30 <_Z41__static_initialization_and_destruction_0ii>
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001b72:	4a1c      	ldr	r2, [pc, #112]	; (8001be4 <MX_SPI1_Init+0x78>)
 8001b74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b76:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001b78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b7e:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b84:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001b86:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b8c:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b92:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b9e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001bba:	2207      	movs	r2, #7
 8001bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bbe:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001bc6:	2208      	movs	r2, #8
 8001bc8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bca:	4805      	ldr	r0, [pc, #20]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001bcc:	f002 fde2 	bl	8004794 <HAL_SPI_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001bd6:	f7ff ffa3 	bl	8001b20 <Error_Handler>
  }

}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000598 	.word	0x20000598
 8001be4:	40013000 	.word	0x40013000

08001be8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	; 0x28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a17      	ldr	r2, [pc, #92]	; (8001c64 <HAL_SPI_MspInit+0x7c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d128      	bne.n	8001c5c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <HAL_SPI_MspInit+0x80>)
 8001c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c0e:	4a16      	ldr	r2, [pc, #88]	; (8001c68 <HAL_SPI_MspInit+0x80>)
 8001c10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c14:	6613      	str	r3, [r2, #96]	; 0x60
 8001c16:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <HAL_SPI_MspInit+0x80>)
 8001c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <HAL_SPI_MspInit+0x80>)
 8001c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c26:	4a10      	ldr	r2, [pc, #64]	; (8001c68 <HAL_SPI_MspInit+0x80>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <HAL_SPI_MspInit+0x80>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c3a:	23e0      	movs	r3, #224	; 0xe0
 8001c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c46:	2303      	movs	r3, #3
 8001c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c4a:	2305      	movs	r3, #5
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4619      	mov	r1, r3
 8001c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c58:	f000 fb2c 	bl	80022b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	3728      	adds	r7, #40	; 0x28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40013000 	.word	0x40013000
 8001c68:	40021000 	.word	0x40021000

08001c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c72:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <HAL_MspInit+0x44>)
 8001c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c76:	4a0e      	ldr	r2, [pc, #56]	; (8001cb0 <HAL_MspInit+0x44>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <HAL_MspInit+0x44>)
 8001c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_MspInit+0x44>)
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8e:	4a08      	ldr	r2, [pc, #32]	; (8001cb0 <HAL_MspInit+0x44>)
 8001c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c94:	6593      	str	r3, [r2, #88]	; 0x58
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_MspInit+0x44>)
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc6:	e7fe      	b.n	8001cc6 <HardFault_Handler+0x4>

08001cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <MemManage_Handler+0x4>

08001cce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd2:	e7fe      	b.n	8001cd2 <BusFault_Handler+0x4>

08001cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <UsageFault_Handler+0x4>

08001cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d08:	f000 f942 	bl	8001f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <USART2_IRQHandler+0x10>)
 8001d16:	f003 fb4d 	bl	80053b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	200005fc 	.word	0x200005fc

08001d24 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <USB_IRQHandler+0x10>)
 8001d2a:	f000 fe96 	bl	8002a5a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20001314 	.word	0x20001314

08001d38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d3c:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <SystemInit+0x64>)
 8001d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d42:	4a16      	ldr	r2, [pc, #88]	; (8001d9c <SystemInit+0x64>)
 8001d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d4c:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <SystemInit+0x68>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a13      	ldr	r2, [pc, #76]	; (8001da0 <SystemInit+0x68>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <SystemInit+0x68>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001d5e:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <SystemInit+0x68>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a0f      	ldr	r2, [pc, #60]	; (8001da0 <SystemInit+0x68>)
 8001d64:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001d68:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001d6c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <SystemInit+0x68>)
 8001d70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d74:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d76:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <SystemInit+0x68>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a09      	ldr	r2, [pc, #36]	; (8001da0 <SystemInit+0x68>)
 8001d7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d80:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001d82:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <SystemInit+0x68>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <SystemInit+0x64>)
 8001d8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d8e:	609a      	str	r2, [r3, #8]
#endif
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000ed00 	.word	0xe000ed00
 8001da0:	40021000 	.word	0x40021000

08001da4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001da8:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001daa:	4a15      	ldr	r2, [pc, #84]	; (8001e00 <MX_USART2_UART_Init+0x5c>)
 8001dac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001dae:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001db0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001db4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001dca:	2204      	movs	r2, #4
 8001dcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dce:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dd4:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dda:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001de6:	4805      	ldr	r0, [pc, #20]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001de8:	f003 f9f4 	bl	80051d4 <HAL_UART_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001df2:	f7ff fe95 	bl	8001b20 <Error_Handler>
  }

}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200005fc 	.word	0x200005fc
 8001e00:	40004400 	.word	0x40004400

08001e04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	; 0x28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1b      	ldr	r2, [pc, #108]	; (8001e90 <HAL_UART_MspInit+0x8c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d130      	bne.n	8001e88 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e26:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <HAL_UART_MspInit+0x90>)
 8001e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2a:	4a1a      	ldr	r2, [pc, #104]	; (8001e94 <HAL_UART_MspInit+0x90>)
 8001e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e30:	6593      	str	r3, [r2, #88]	; 0x58
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <HAL_UART_MspInit+0x90>)
 8001e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <HAL_UART_MspInit+0x90>)
 8001e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e42:	4a14      	ldr	r2, [pc, #80]	; (8001e94 <HAL_UART_MspInit+0x90>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e4a:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <HAL_UART_MspInit+0x90>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e56:	230c      	movs	r3, #12
 8001e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e62:	2303      	movs	r3, #3
 8001e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e66:	2307      	movs	r3, #7
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	f107 0314 	add.w	r3, r7, #20
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e74:	f000 fa1e 	bl	80022b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	2026      	movs	r0, #38	; 0x26
 8001e7e:	f000 f9a2 	bl	80021c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e82:	2026      	movs	r0, #38	; 0x26
 8001e84:	f000 f9bb 	bl	80021fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e88:	bf00      	nop
 8001e8a:	3728      	adds	r7, #40	; 0x28
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40004400 	.word	0x40004400
 8001e94:	40021000 	.word	0x40021000

08001e98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ed0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e9e:	e003      	b.n	8001ea8 <LoopCopyDataInit>

08001ea0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001ea2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ea4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001ea6:	3104      	adds	r1, #4

08001ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ea8:	480b      	ldr	r0, [pc, #44]	; (8001ed8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <LoopForever+0xe>)
	adds	r2, r0, r1
 8001eac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001eae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001eb0:	d3f6      	bcc.n	8001ea0 <CopyDataInit>
	ldr	r2, =_sbss
 8001eb2:	4a0b      	ldr	r2, [pc, #44]	; (8001ee0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001eb4:	e002      	b.n	8001ebc <LoopFillZerobss>

08001eb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001eb6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001eb8:	f842 3b04 	str.w	r3, [r2], #4

08001ebc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <LoopForever+0x16>)
	cmp	r2, r3
 8001ebe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ec0:	d3f9      	bcc.n	8001eb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ec2:	f7ff ff39 	bl	8001d38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ec6:	f007 fbef 	bl	80096a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eca:	f7ff fd63 	bl	8001994 <main>

08001ece <LoopForever>:

LoopForever:
    b LoopForever
 8001ece:	e7fe      	b.n	8001ece <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ed0:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8001ed4:	08009804 	.word	0x08009804
	ldr	r0, =_sdata
 8001ed8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001edc:	2000018c 	.word	0x2000018c
	ldr	r2, =_sbss
 8001ee0:	2000018c 	.word	0x2000018c
	ldr	r3, = _ebss
 8001ee4:	20001588 	.word	0x20001588

08001ee8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ee8:	e7fe      	b.n	8001ee8 <ADC1_2_IRQHandler>

08001eea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef4:	2003      	movs	r0, #3
 8001ef6:	f000 f95b 	bl	80021b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001efa:	2000      	movs	r0, #0
 8001efc:	f000 f80e 	bl	8001f1c <HAL_InitTick>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	71fb      	strb	r3, [r7, #7]
 8001f0a:	e001      	b.n	8001f10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f0c:	f7ff feae 	bl	8001c6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f10:	79fb      	ldrb	r3, [r7, #7]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f28:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <HAL_InitTick+0x68>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d022      	beq.n	8001f76 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f30:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <HAL_InitTick+0x6c>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <HAL_InitTick+0x68>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 f968 	bl	800221a <HAL_SYSTICK_Config>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10f      	bne.n	8001f70 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b0f      	cmp	r3, #15
 8001f54:	d809      	bhi.n	8001f6a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f56:	2200      	movs	r2, #0
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5e:	f000 f932 	bl	80021c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f62:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <HAL_InitTick+0x70>)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	e007      	b.n	8001f7a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	73fb      	strb	r3, [r7, #15]
 8001f6e:	e004      	b.n	8001f7a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
 8001f74:	e001      	b.n	8001f7a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000008 	.word	0x20000008
 8001f88:	20000000 	.word	0x20000000
 8001f8c:	20000004 	.word	0x20000004

08001f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_IncTick+0x1c>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_IncTick+0x20>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	4a03      	ldr	r2, [pc, #12]	; (8001fac <HAL_IncTick+0x1c>)
 8001fa0:	6013      	str	r3, [r2, #0]
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	2000067c 	.word	0x2000067c
 8001fb0:	20000008 	.word	0x20000008

08001fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb8:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <HAL_GetTick+0x14>)
 8001fba:	681b      	ldr	r3, [r3, #0]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	2000067c 	.word	0x2000067c

08001fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd4:	f7ff ffee 	bl	8001fb4 <HAL_GetTick>
 8001fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe4:	d004      	beq.n	8001ff0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fe6:	4b09      	ldr	r3, [pc, #36]	; (800200c <HAL_Delay+0x40>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4413      	add	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ff0:	bf00      	nop
 8001ff2:	f7ff ffdf 	bl	8001fb4 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d8f7      	bhi.n	8001ff2 <HAL_Delay+0x26>
  {
  }
}
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000008 	.word	0x20000008

08002010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <__NVIC_SetPriorityGrouping+0x44>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800202c:	4013      	ands	r3, r2
 800202e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800203c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002042:	4a04      	ldr	r2, [pc, #16]	; (8002054 <__NVIC_SetPriorityGrouping+0x44>)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	60d3      	str	r3, [r2, #12]
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <__NVIC_GetPriorityGrouping+0x18>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	f003 0307 	and.w	r3, r3, #7
}
 8002066:	4618      	mov	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	2b00      	cmp	r3, #0
 8002084:	db0b      	blt.n	800209e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	f003 021f 	and.w	r2, r3, #31
 800208c:	4907      	ldr	r1, [pc, #28]	; (80020ac <__NVIC_EnableIRQ+0x38>)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	095b      	lsrs	r3, r3, #5
 8002094:	2001      	movs	r0, #1
 8002096:	fa00 f202 	lsl.w	r2, r0, r2
 800209a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000e100 	.word	0xe000e100

080020b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	6039      	str	r1, [r7, #0]
 80020ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	db0a      	blt.n	80020da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	490c      	ldr	r1, [pc, #48]	; (80020fc <__NVIC_SetPriority+0x4c>)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	0112      	lsls	r2, r2, #4
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	440b      	add	r3, r1
 80020d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d8:	e00a      	b.n	80020f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	4908      	ldr	r1, [pc, #32]	; (8002100 <__NVIC_SetPriority+0x50>)
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	3b04      	subs	r3, #4
 80020e8:	0112      	lsls	r2, r2, #4
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	440b      	add	r3, r1
 80020ee:	761a      	strb	r2, [r3, #24]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000e100 	.word	0xe000e100
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	; 0x24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f1c3 0307 	rsb	r3, r3, #7
 800211e:	2b04      	cmp	r3, #4
 8002120:	bf28      	it	cs
 8002122:	2304      	movcs	r3, #4
 8002124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3304      	adds	r3, #4
 800212a:	2b06      	cmp	r3, #6
 800212c:	d902      	bls.n	8002134 <NVIC_EncodePriority+0x30>
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3b03      	subs	r3, #3
 8002132:	e000      	b.n	8002136 <NVIC_EncodePriority+0x32>
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	f04f 32ff 	mov.w	r2, #4294967295
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43da      	mvns	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	401a      	ands	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800214c:	f04f 31ff 	mov.w	r1, #4294967295
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	43d9      	mvns	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215c:	4313      	orrs	r3, r2
         );
}
 800215e:	4618      	mov	r0, r3
 8002160:	3724      	adds	r7, #36	; 0x24
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3b01      	subs	r3, #1
 8002178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800217c:	d301      	bcc.n	8002182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800217e:	2301      	movs	r3, #1
 8002180:	e00f      	b.n	80021a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002182:	4a0a      	ldr	r2, [pc, #40]	; (80021ac <SysTick_Config+0x40>)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3b01      	subs	r3, #1
 8002188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800218a:	210f      	movs	r1, #15
 800218c:	f04f 30ff 	mov.w	r0, #4294967295
 8002190:	f7ff ff8e 	bl	80020b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002194:	4b05      	ldr	r3, [pc, #20]	; (80021ac <SysTick_Config+0x40>)
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800219a:	4b04      	ldr	r3, [pc, #16]	; (80021ac <SysTick_Config+0x40>)
 800219c:	2207      	movs	r2, #7
 800219e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	e000e010 	.word	0xe000e010

080021b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff ff29 	bl	8002010 <__NVIC_SetPriorityGrouping>
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b086      	sub	sp, #24
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	4603      	mov	r3, r0
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	607a      	str	r2, [r7, #4]
 80021d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021d8:	f7ff ff3e 	bl	8002058 <__NVIC_GetPriorityGrouping>
 80021dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	68b9      	ldr	r1, [r7, #8]
 80021e2:	6978      	ldr	r0, [r7, #20]
 80021e4:	f7ff ff8e 	bl	8002104 <NVIC_EncodePriority>
 80021e8:	4602      	mov	r2, r0
 80021ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ee:	4611      	mov	r1, r2
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff ff5d 	bl	80020b0 <__NVIC_SetPriority>
}
 80021f6:	bf00      	nop
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	4603      	mov	r3, r0
 8002206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff31 	bl	8002074 <__NVIC_EnableIRQ>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff ffa2 	bl	800216c <SysTick_Config>
 8002228:	4603      	mov	r3, r0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b084      	sub	sp, #16
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d005      	beq.n	8002256 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2204      	movs	r2, #4
 800224e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	73fb      	strb	r3, [r7, #15]
 8002254:	e029      	b.n	80022aa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 020e 	bic.w	r2, r2, #14
 8002264:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0201 	bic.w	r2, r2, #1
 8002274:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f003 021c 	and.w	r2, r3, #28
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	2101      	movs	r1, #1
 8002284:	fa01 f202 	lsl.w	r2, r1, r2
 8002288:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	4798      	blx	r3
    }
  }
  return status;
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b087      	sub	sp, #28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022c2:	e14e      	b.n	8002562 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2101      	movs	r1, #1
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	fa01 f303 	lsl.w	r3, r1, r3
 80022d0:	4013      	ands	r3, r2
 80022d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 8140 	beq.w	800255c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d00b      	beq.n	80022fc <HAL_GPIO_Init+0x48>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d007      	beq.n	80022fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022f0:	2b11      	cmp	r3, #17
 80022f2:	d003      	beq.n	80022fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b12      	cmp	r3, #18
 80022fa:	d130      	bne.n	800235e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	2203      	movs	r2, #3
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	4013      	ands	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002332:	2201      	movs	r2, #1
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4013      	ands	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	091b      	lsrs	r3, r3, #4
 8002348:	f003 0201 	and.w	r2, r3, #1
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	2203      	movs	r2, #3
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43db      	mvns	r3, r3
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	4013      	ands	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d003      	beq.n	800239e <HAL_GPIO_Init+0xea>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b12      	cmp	r3, #18
 800239c:	d123      	bne.n	80023e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	08da      	lsrs	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3208      	adds	r2, #8
 80023a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	220f      	movs	r2, #15
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4013      	ands	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	691a      	ldr	r2, [r3, #16]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	08da      	lsrs	r2, r3, #3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3208      	adds	r2, #8
 80023e0:	6939      	ldr	r1, [r7, #16]
 80023e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	2203      	movs	r2, #3
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0203 	and.w	r2, r3, #3
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 809a 	beq.w	800255c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002428:	4b55      	ldr	r3, [pc, #340]	; (8002580 <HAL_GPIO_Init+0x2cc>)
 800242a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242c:	4a54      	ldr	r2, [pc, #336]	; (8002580 <HAL_GPIO_Init+0x2cc>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	6613      	str	r3, [r2, #96]	; 0x60
 8002434:	4b52      	ldr	r3, [pc, #328]	; (8002580 <HAL_GPIO_Init+0x2cc>)
 8002436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002440:	4a50      	ldr	r2, [pc, #320]	; (8002584 <HAL_GPIO_Init+0x2d0>)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	089b      	lsrs	r3, r3, #2
 8002446:	3302      	adds	r3, #2
 8002448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	220f      	movs	r2, #15
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800246a:	d013      	beq.n	8002494 <HAL_GPIO_Init+0x1e0>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a46      	ldr	r2, [pc, #280]	; (8002588 <HAL_GPIO_Init+0x2d4>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d00d      	beq.n	8002490 <HAL_GPIO_Init+0x1dc>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a45      	ldr	r2, [pc, #276]	; (800258c <HAL_GPIO_Init+0x2d8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d007      	beq.n	800248c <HAL_GPIO_Init+0x1d8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a44      	ldr	r2, [pc, #272]	; (8002590 <HAL_GPIO_Init+0x2dc>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d101      	bne.n	8002488 <HAL_GPIO_Init+0x1d4>
 8002484:	2303      	movs	r3, #3
 8002486:	e006      	b.n	8002496 <HAL_GPIO_Init+0x1e2>
 8002488:	2307      	movs	r3, #7
 800248a:	e004      	b.n	8002496 <HAL_GPIO_Init+0x1e2>
 800248c:	2302      	movs	r3, #2
 800248e:	e002      	b.n	8002496 <HAL_GPIO_Init+0x1e2>
 8002490:	2301      	movs	r3, #1
 8002492:	e000      	b.n	8002496 <HAL_GPIO_Init+0x1e2>
 8002494:	2300      	movs	r3, #0
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	f002 0203 	and.w	r2, r2, #3
 800249c:	0092      	lsls	r2, r2, #2
 800249e:	4093      	lsls	r3, r2
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024a6:	4937      	ldr	r1, [pc, #220]	; (8002584 <HAL_GPIO_Init+0x2d0>)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	089b      	lsrs	r3, r3, #2
 80024ac:	3302      	adds	r3, #2
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024b4:	4b37      	ldr	r3, [pc, #220]	; (8002594 <HAL_GPIO_Init+0x2e0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	43db      	mvns	r3, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4013      	ands	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024d8:	4a2e      	ldr	r2, [pc, #184]	; (8002594 <HAL_GPIO_Init+0x2e0>)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80024de:	4b2d      	ldr	r3, [pc, #180]	; (8002594 <HAL_GPIO_Init+0x2e0>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4013      	ands	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002502:	4a24      	ldr	r2, [pc, #144]	; (8002594 <HAL_GPIO_Init+0x2e0>)
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002508:	4b22      	ldr	r3, [pc, #136]	; (8002594 <HAL_GPIO_Init+0x2e0>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	43db      	mvns	r3, r3
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800252c:	4a19      	ldr	r2, [pc, #100]	; (8002594 <HAL_GPIO_Init+0x2e0>)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002532:	4b18      	ldr	r3, [pc, #96]	; (8002594 <HAL_GPIO_Init+0x2e0>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	43db      	mvns	r3, r3
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4013      	ands	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002556:	4a0f      	ldr	r2, [pc, #60]	; (8002594 <HAL_GPIO_Init+0x2e0>)
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	3301      	adds	r3, #1
 8002560:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	f47f aea9 	bne.w	80022c4 <HAL_GPIO_Init+0x10>
  }
}
 8002572:	bf00      	nop
 8002574:	371c      	adds	r7, #28
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
 8002584:	40010000 	.word	0x40010000
 8002588:	48000400 	.word	0x48000400
 800258c:	48000800 	.word	0x48000800
 8002590:	48000c00 	.word	0x48000c00
 8002594:	40010400 	.word	0x40010400

08002598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	807b      	strh	r3, [r7, #2]
 80025a4:	4613      	mov	r3, r2
 80025a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025a8:	787b      	ldrb	r3, [r7, #1]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025ae:	887a      	ldrh	r2, [r7, #2]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025b4:	e002      	b.n	80025bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025b6:	887a      	ldrh	r2, [r7, #2]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	695a      	ldr	r2, [r3, #20]
 80025d8:	887b      	ldrh	r3, [r7, #2]
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025e0:	887a      	ldrh	r2, [r7, #2]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80025e6:	e002      	b.n	80025ee <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025e8:	887a      	ldrh	r2, [r7, #2]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	619a      	str	r2, [r3, #24]
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e081      	b.n	8002710 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d106      	bne.n	8002626 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff f973 	bl	800190c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2224      	movs	r2, #36	; 0x24
 800262a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0201 	bic.w	r2, r2, #1
 800263c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800264a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800265a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d107      	bne.n	8002674 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002670:	609a      	str	r2, [r3, #8]
 8002672:	e006      	b.n	8002682 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002680:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d104      	bne.n	8002694 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002692:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6812      	ldr	r2, [r2, #0]
 800269e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026a6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026b6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	ea42 0103 	orr.w	r1, r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	021a      	lsls	r2, r3, #8
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69d9      	ldr	r1, [r3, #28]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1a      	ldr	r2, [r3, #32]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 0201 	orr.w	r2, r2, #1
 80026f0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2220      	movs	r2, #32
 80026fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b20      	cmp	r3, #32
 800272c:	d138      	bne.n	80027a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002738:	2302      	movs	r3, #2
 800273a:	e032      	b.n	80027a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2224      	movs	r2, #36	; 0x24
 8002748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0201 	bic.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800276a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6819      	ldr	r1, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	e000      	b.n	80027a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027a0:	2302      	movs	r3, #2
  }
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b085      	sub	sp, #20
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d139      	bne.n	8002838 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e033      	b.n	800283a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2224      	movs	r2, #36	; 0x24
 80027de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0201 	bic.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002800:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	021b      	lsls	r3, r3, #8
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	e000      	b.n	800283a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002838:	2302      	movs	r3, #2
  }
}
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002846:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002848:	b08b      	sub	sp, #44	; 0x2c
 800284a:	af06      	add	r7, sp, #24
 800284c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0da      	b.n	8002a0e <HAL_PCD_Init+0x1c8>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d106      	bne.n	8002872 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f006 fb7d 	bl	8008f6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2203      	movs	r2, #3
 8002876:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f003 fc95 	bl	80061ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	603b      	str	r3, [r7, #0]
 800288a:	687e      	ldr	r6, [r7, #4]
 800288c:	466d      	mov	r5, sp
 800288e:	f106 0410 	add.w	r4, r6, #16
 8002892:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002894:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002896:	6823      	ldr	r3, [r4, #0]
 8002898:	602b      	str	r3, [r5, #0]
 800289a:	1d33      	adds	r3, r6, #4
 800289c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800289e:	6838      	ldr	r0, [r7, #0]
 80028a0:	f003 fc5b 	bl	800615a <USB_CoreInit>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2202      	movs	r2, #2
 80028ae:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e0ab      	b.n	8002a0e <HAL_PCD_Init+0x1c8>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2100      	movs	r1, #0
 80028bc:	4618      	mov	r0, r3
 80028be:	f003 fc91 	bl	80061e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]
 80028c6:	e035      	b.n	8002934 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	015b      	lsls	r3, r3, #5
 80028ce:	4413      	add	r3, r2
 80028d0:	3329      	adds	r3, #41	; 0x29
 80028d2:	2201      	movs	r2, #1
 80028d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	015b      	lsls	r3, r3, #5
 80028dc:	4413      	add	r3, r2
 80028de:	3328      	adds	r3, #40	; 0x28
 80028e0:	7bfa      	ldrb	r2, [r7, #15]
 80028e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	7bfa      	ldrb	r2, [r7, #15]
 80028e8:	b291      	uxth	r1, r2
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	015b      	lsls	r3, r3, #5
 80028ee:	4413      	add	r3, r2
 80028f0:	3336      	adds	r3, #54	; 0x36
 80028f2:	460a      	mov	r2, r1
 80028f4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	015b      	lsls	r3, r3, #5
 80028fc:	4413      	add	r3, r2
 80028fe:	332b      	adds	r3, #43	; 0x2b
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	015b      	lsls	r3, r3, #5
 800290a:	4413      	add	r3, r2
 800290c:	3338      	adds	r3, #56	; 0x38
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	015b      	lsls	r3, r3, #5
 8002918:	4413      	add	r3, r2
 800291a:	333c      	adds	r3, #60	; 0x3c
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	3302      	adds	r3, #2
 8002926:	015b      	lsls	r3, r3, #5
 8002928:	4413      	add	r3, r2
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	3301      	adds	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]
 8002934:	7bfa      	ldrb	r2, [r7, #15]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	429a      	cmp	r2, r3
 800293c:	d3c4      	bcc.n	80028c8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800293e:	2300      	movs	r3, #0
 8002940:	73fb      	strb	r3, [r7, #15]
 8002942:	e031      	b.n	80029a8 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	015b      	lsls	r3, r3, #5
 800294a:	4413      	add	r3, r2
 800294c:	f203 1329 	addw	r3, r3, #297	; 0x129
 8002950:	2200      	movs	r2, #0
 8002952:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	015b      	lsls	r3, r3, #5
 800295a:	4413      	add	r3, r2
 800295c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002960:	7bfa      	ldrb	r2, [r7, #15]
 8002962:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002964:	7bfb      	ldrb	r3, [r7, #15]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	015b      	lsls	r3, r3, #5
 800296a:	4413      	add	r3, r2
 800296c:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8002970:	2200      	movs	r2, #0
 8002972:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	015b      	lsls	r3, r3, #5
 800297a:	4413      	add	r3, r2
 800297c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	015b      	lsls	r3, r3, #5
 800298a:	4413      	add	r3, r2
 800298c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	330a      	adds	r3, #10
 800299a:	015b      	lsls	r3, r3, #5
 800299c:	4413      	add	r3, r2
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
 80029a4:	3301      	adds	r3, #1
 80029a6:	73fb      	strb	r3, [r7, #15]
 80029a8:	7bfa      	ldrb	r2, [r7, #15]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d3c8      	bcc.n	8002944 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	603b      	str	r3, [r7, #0]
 80029b8:	687e      	ldr	r6, [r7, #4]
 80029ba:	466d      	mov	r5, sp
 80029bc:	f106 0410 	add.w	r4, r6, #16
 80029c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029c4:	6823      	ldr	r3, [r4, #0]
 80029c6:	602b      	str	r3, [r5, #0]
 80029c8:	1d33      	adds	r3, r6, #4
 80029ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029cc:	6838      	ldr	r0, [r7, #0]
 80029ce:	f003 fc16 	bl	80061fe <USB_DevInit>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e014      	b.n	8002a0e <HAL_PCD_Init+0x1c8>
  }

  hpcd->USB_Address = 0U;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d102      	bne.n	8002a02 <HAL_PCD_Init+0x1bc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 fe3a 	bl	8003676 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f004 fc5d 	bl	80072c6 <USB_DevDisconnect>

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a16 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_PCD_Start+0x16>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e012      	b.n	8002a52 <HAL_PCD_Start+0x3c>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f004 fc2d 	bl	8007298 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f003 fb9a 	bl	800617c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b082      	sub	sp, #8
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f004 fc42 	bl	80072f0 <USB_ReadInterrupts>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a76:	d102      	bne.n	8002a7e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 fb33 	bl	80030e4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f004 fc34 	bl	80072f0 <USB_ReadInterrupts>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a92:	d112      	bne.n	8002aba <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aa6:	b292      	uxth	r2, r2
 8002aa8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f006 faf8 	bl	80090a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f91e 	bl	8002cf6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f004 fc16 	bl	80072f0 <USB_ReadInterrupts>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ace:	d10b      	bne.n	8002ae8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ae2:	b292      	uxth	r2, r2
 8002ae4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f004 fbff 	bl	80072f0 <USB_ReadInterrupts>
 8002af2:	4603      	mov	r3, r0
 8002af4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002afc:	d10b      	bne.n	8002b16 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b10:	b292      	uxth	r2, r2
 8002b12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f004 fbe8 	bl	80072f0 <USB_ReadInterrupts>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b2a:	d133      	bne.n	8002b94 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0204 	bic.w	r2, r2, #4
 8002b3e:	b292      	uxth	r2, r2
 8002b40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0208 	bic.w	r2, r2, #8
 8002b56:	b292      	uxth	r2, r2
 8002b58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d107      	bne.n	8002b76 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b6e:	2100      	movs	r1, #0
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f006 fd43 	bl	80095fc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f006 facc 	bl	8009114 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b8e:	b292      	uxth	r2, r2
 8002b90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f004 fba9 	bl	80072f0 <USB_ReadInterrupts>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ba8:	d126      	bne.n	8002bf8 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0208 	orr.w	r2, r2, #8
 8002bbc:	b292      	uxth	r2, r2
 8002bbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bd4:	b292      	uxth	r2, r2
 8002bd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0204 	orr.w	r2, r2, #4
 8002bec:	b292      	uxth	r2, r2
 8002bee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f006 fa74 	bl	80090e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f004 fb77 	bl	80072f0 <USB_ReadInterrupts>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c08:	2b80      	cmp	r3, #128	; 0x80
 8002c0a:	d13f      	bne.n	8002c8c <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c1e:	b292      	uxth	r2, r2
 8002c20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d12b      	bne.n	8002c86 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0204 	orr.w	r2, r2, #4
 8002c40:	b292      	uxth	r2, r2
 8002c42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 0208 	orr.w	r2, r2, #8
 8002c58:	b292      	uxth	r2, r2
 8002c5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	089b      	lsrs	r3, r3, #2
 8002c72:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f006 fcbc 	bl	80095fc <HAL_PCDEx_LPM_Callback>
 8002c84:	e002      	b.n	8002c8c <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f006 fa2a 	bl	80090e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f004 fb2d 	bl	80072f0 <USB_ReadInterrupts>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca0:	d10e      	bne.n	8002cc0 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cb4:	b292      	uxth	r2, r2
 8002cb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f006 f9e3 	bl	8009086 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f004 fb13 	bl	80072f0 <USB_ReadInterrupts>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cd4:	d10b      	bne.n	8002cee <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ce8:	b292      	uxth	r2, r2
 8002cea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_PCD_SetAddress+0x1a>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e013      	b.n	8002d38 <HAL_PCD_SetAddress+0x42>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	78fa      	ldrb	r2, [r7, #3]
 8002d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	78fa      	ldrb	r2, [r7, #3]
 8002d26:	4611      	mov	r1, r2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f004 faa1 	bl	8007270 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	4608      	mov	r0, r1
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4603      	mov	r3, r0
 8002d50:	70fb      	strb	r3, [r7, #3]
 8002d52:	460b      	mov	r3, r1
 8002d54:	803b      	strh	r3, [r7, #0]
 8002d56:	4613      	mov	r3, r2
 8002d58:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	da0b      	bge.n	8002d7e <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d66:	78fb      	ldrb	r3, [r7, #3]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	015b      	lsls	r3, r3, #5
 8002d6e:	3328      	adds	r3, #40	; 0x28
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	4413      	add	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	705a      	strb	r2, [r3, #1]
 8002d7c:	e00b      	b.n	8002d96 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	015b      	lsls	r3, r3, #5
 8002d86:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002da2:	883a      	ldrh	r2, [r7, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	78ba      	ldrb	r2, [r7, #2]
 8002dac:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	785b      	ldrb	r3, [r3, #1]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d004      	beq.n	8002dc0 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002dc0:	78bb      	ldrb	r3, [r7, #2]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d102      	bne.n	8002dcc <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <HAL_PCD_EP_Open+0x9a>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e00e      	b.n	8002df8 <HAL_PCD_EP_Open+0xb8>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68f9      	ldr	r1, [r7, #12]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f003 fa2d 	bl	8006248 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8002df6:	7afb      	ldrb	r3, [r7, #11]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	da0b      	bge.n	8002e2c <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	015b      	lsls	r3, r3, #5
 8002e1c:	3328      	adds	r3, #40	; 0x28
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	4413      	add	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2201      	movs	r2, #1
 8002e28:	705a      	strb	r2, [r3, #1]
 8002e2a:	e00b      	b.n	8002e44 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e2c:	78fb      	ldrb	r3, [r7, #3]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	015b      	lsls	r3, r3, #5
 8002e34:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e44:	78fb      	ldrb	r3, [r7, #3]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_PCD_EP_Close+0x5e>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e00e      	b.n	8002e7c <HAL_PCD_EP_Close+0x7c>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68f9      	ldr	r1, [r7, #12]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f003 fcdb 	bl	8006828 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	607a      	str	r2, [r7, #4]
 8002e8e:	603b      	str	r3, [r7, #0]
 8002e90:	460b      	mov	r3, r1
 8002e92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e94:	7afb      	ldrb	r3, [r7, #11]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	015b      	lsls	r3, r3, #5
 8002e9c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ebe:	7afb      	ldrb	r3, [r7, #11]
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002eca:	7afb      	ldrb	r3, [r7, #11]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d106      	bne.n	8002ee2 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6979      	ldr	r1, [r7, #20]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f003 fe3a 	bl	8006b54 <USB_EPStartXfer>
 8002ee0:	e005      	b.n	8002eee <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6979      	ldr	r1, [r7, #20]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f003 fe33 	bl	8006b54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	330a      	adds	r3, #10
 8002f0e:	015b      	lsls	r3, r3, #5
 8002f10:	4413      	add	r3, r2
 8002f12:	3304      	adds	r3, #4
 8002f14:	681b      	ldr	r3, [r3, #0]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b086      	sub	sp, #24
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	603b      	str	r3, [r7, #0]
 8002f2e:	460b      	mov	r3, r1
 8002f30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f32:	7afb      	ldrb	r3, [r7, #11]
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	015b      	lsls	r3, r3, #5
 8002f3a:	3328      	adds	r3, #40	; 0x28
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4413      	add	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2200      	movs	r2, #0
 8002f52:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2201      	movs	r2, #1
 8002f58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f5a:	7afb      	ldrb	r3, [r7, #11]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f66:	7afb      	ldrb	r3, [r7, #11]
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d106      	bne.n	8002f7e <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6979      	ldr	r1, [r7, #20]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f003 fdec 	bl	8006b54 <USB_EPStartXfer>
 8002f7c:	e005      	b.n	8002f8a <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6979      	ldr	r1, [r7, #20]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f003 fde5 	bl	8006b54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	f003 0207 	and.w	r2, r3, #7
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d901      	bls.n	8002fb2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e046      	b.n	8003040 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	da0b      	bge.n	8002fd2 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fba:	78fb      	ldrb	r3, [r7, #3]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	015b      	lsls	r3, r3, #5
 8002fc2:	3328      	adds	r3, #40	; 0x28
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	705a      	strb	r2, [r3, #1]
 8002fd0:	e009      	b.n	8002fe6 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	015b      	lsls	r3, r3, #5
 8002fd6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fec:	78fb      	ldrb	r3, [r7, #3]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_PCD_EP_SetStall+0x72>
 8003002:	2302      	movs	r3, #2
 8003004:	e01c      	b.n	8003040 <HAL_PCD_EP_SetStall+0xac>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68f9      	ldr	r1, [r7, #12]
 8003014:	4618      	mov	r0, r3
 8003016:	f004 f855 	bl	80070c4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800301a:	78fb      	ldrb	r3, [r7, #3]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	2b00      	cmp	r3, #0
 8003022:	d108      	bne.n	8003036 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800302e:	4619      	mov	r1, r3
 8003030:	4610      	mov	r0, r2
 8003032:	f004 f96d 	bl	8007310 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	f003 020f 	and.w	r2, r3, #15
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	429a      	cmp	r2, r3
 8003060:	d901      	bls.n	8003066 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e03a      	b.n	80030dc <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003066:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800306a:	2b00      	cmp	r3, #0
 800306c:	da0b      	bge.n	8003086 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800306e:	78fb      	ldrb	r3, [r7, #3]
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	015b      	lsls	r3, r3, #5
 8003076:	3328      	adds	r3, #40	; 0x28
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	4413      	add	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2201      	movs	r2, #1
 8003082:	705a      	strb	r2, [r3, #1]
 8003084:	e00b      	b.n	800309e <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003086:	78fb      	ldrb	r3, [r7, #3]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	015b      	lsls	r3, r3, #5
 800308e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	4413      	add	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030a4:	78fb      	ldrb	r3, [r7, #3]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_PCD_EP_ClrStall+0x76>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e00e      	b.n	80030dc <HAL_PCD_EP_ClrStall+0x94>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68f9      	ldr	r1, [r7, #12]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f004 f83b 	bl	8007148 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80030e4:	b590      	push	{r4, r7, lr}
 80030e6:	b089      	sub	sp, #36	; 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80030ec:	e274      	b.n	80035d8 <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030f6:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80030f8:	8afb      	ldrh	r3, [r7, #22]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	f003 030f 	and.w	r3, r3, #15
 8003100:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8003102:	7d7b      	ldrb	r3, [r7, #21]
 8003104:	2b00      	cmp	r3, #0
 8003106:	f040 813c 	bne.w	8003382 <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800310a:	8afb      	ldrh	r3, [r7, #22]
 800310c:	f003 0310 	and.w	r3, r3, #16
 8003110:	2b00      	cmp	r3, #0
 8003112:	d14f      	bne.n	80031b4 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	b29b      	uxth	r3, r3
 800311c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003124:	b29c      	uxth	r4, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800312e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003132:	b29b      	uxth	r3, r3
 8003134:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3328      	adds	r3, #40	; 0x28
 800313a:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003144:	b29b      	uxth	r3, r3
 8003146:	461a      	mov	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	4413      	add	r3, r2
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	4413      	add	r3, r2
 8003156:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	695a      	ldr	r2, [r3, #20]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	441a      	add	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003172:	2100      	movs	r1, #0
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f005 ff6f 	bl	8009058 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 8228 	beq.w	80035d8 <PCD_EP_ISR_Handler+0x4f4>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	2b00      	cmp	r3, #0
 800318e:	f040 8223 	bne.w	80035d8 <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003198:	b2db      	uxtb	r3, r3
 800319a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	b292      	uxth	r2, r2
 80031a6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031b2:	e211      	b.n	80035d8 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80031ba:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80031c4:	8a7b      	ldrh	r3, [r7, #18]
 80031c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d031      	beq.n	8003232 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	461a      	mov	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4413      	add	r3, r2
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6812      	ldr	r2, [r2, #0]
 80031e6:	4413      	add	r3, r2
 80031e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6818      	ldr	r0, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003208:	b29b      	uxth	r3, r3
 800320a:	f004 f8ce 	bl	80073aa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	b29a      	uxth	r2, r3
 8003216:	f640 738f 	movw	r3, #3983	; 0xf8f
 800321a:	4013      	ands	r3, r2
 800321c:	b29c      	uxth	r4, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003226:	b292      	uxth	r2, r2
 8003228:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f005 feea 	bl	8009004 <HAL_PCD_SetupStageCallback>
 8003230:	e1d2      	b.n	80035d8 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003232:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003236:	2b00      	cmp	r3, #0
 8003238:	f280 81ce 	bge.w	80035d8 <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	b29a      	uxth	r2, r3
 8003244:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003248:	4013      	ands	r3, r2
 800324a:	b29c      	uxth	r4, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003254:	b292      	uxth	r2, r2
 8003256:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003260:	b29b      	uxth	r3, r3
 8003262:	461a      	mov	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	4413      	add	r3, r2
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6812      	ldr	r2, [r2, #0]
 8003270:	4413      	add	r3, r2
 8003272:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d019      	beq.n	80032bc <PCD_EP_ISR_Handler+0x1d8>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d015      	beq.n	80032bc <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6959      	ldr	r1, [r3, #20]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	f004 f882 	bl	80073aa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	695a      	ldr	r2, [r3, #20]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	441a      	add	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80032b4:	2100      	movs	r1, #0
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f005 feb6 	bl	8009028 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	461c      	mov	r4, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	441c      	add	r4, r3
 80032ce:	f204 4306 	addw	r3, r4, #1030	; 0x406
 80032d2:	461c      	mov	r4, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10e      	bne.n	80032fa <PCD_EP_ISR_Handler+0x216>
 80032dc:	8823      	ldrh	r3, [r4, #0]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	8023      	strh	r3, [r4, #0]
 80032e8:	8823      	ldrh	r3, [r4, #0]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	8023      	strh	r3, [r4, #0]
 80032f8:	e02d      	b.n	8003356 <PCD_EP_ISR_Handler+0x272>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	2b3e      	cmp	r3, #62	; 0x3e
 8003300:	d812      	bhi.n	8003328 <PCD_EP_ISR_Handler+0x244>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	085b      	lsrs	r3, r3, #1
 8003308:	61bb      	str	r3, [r7, #24]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <PCD_EP_ISR_Handler+0x238>
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	3301      	adds	r3, #1
 800331a:	61bb      	str	r3, [r7, #24]
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	b29b      	uxth	r3, r3
 8003320:	029b      	lsls	r3, r3, #10
 8003322:	b29b      	uxth	r3, r3
 8003324:	8023      	strh	r3, [r4, #0]
 8003326:	e016      	b.n	8003356 <PCD_EP_ISR_Handler+0x272>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	095b      	lsrs	r3, r3, #5
 800332e:	61bb      	str	r3, [r7, #24]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	f003 031f 	and.w	r3, r3, #31
 8003338:	2b00      	cmp	r3, #0
 800333a:	d102      	bne.n	8003342 <PCD_EP_ISR_Handler+0x25e>
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	3b01      	subs	r3, #1
 8003340:	61bb      	str	r3, [r7, #24]
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	b29b      	uxth	r3, r3
 8003346:	029b      	lsls	r3, r3, #10
 8003348:	b29b      	uxth	r3, r3
 800334a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800334e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003352:	b29b      	uxth	r3, r3
 8003354:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	b29b      	uxth	r3, r3
 800335e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003366:	b29c      	uxth	r4, r3
 8003368:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800336c:	b29c      	uxth	r4, r3
 800336e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003372:	b29c      	uxth	r4, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	4b9e      	ldr	r3, [pc, #632]	; (80035f4 <PCD_EP_ISR_Handler+0x510>)
 800337a:	4323      	orrs	r3, r4
 800337c:	b29b      	uxth	r3, r3
 800337e:	8013      	strh	r3, [r2, #0]
 8003380:	e12a      	b.n	80035d8 <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	461a      	mov	r2, r3
 8003388:	7d7b      	ldrb	r3, [r7, #21]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003392:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003396:	2b00      	cmp	r3, #0
 8003398:	f280 80cb 	bge.w	8003532 <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	461a      	mov	r2, r3
 80033a2:	7d7b      	ldrb	r3, [r7, #21]
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	f640 738f 	movw	r3, #3983	; 0xf8f
 80033b0:	4013      	ands	r3, r2
 80033b2:	b29c      	uxth	r4, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	7d7b      	ldrb	r3, [r7, #21]
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80033c4:	b292      	uxth	r2, r2
 80033c6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80033c8:	7d7b      	ldrb	r3, [r7, #21]
 80033ca:	015b      	lsls	r3, r3, #5
 80033cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	4413      	add	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	7b1b      	ldrb	r3, [r3, #12]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d11f      	bne.n	800341e <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	461a      	mov	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4413      	add	r3, r2
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6812      	ldr	r2, [r2, #0]
 80033f6:	4413      	add	r3, r2
 80033f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003402:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8003404:	8bfb      	ldrh	r3, [r7, #30]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d06e      	beq.n	80034e8 <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6818      	ldr	r0, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6959      	ldr	r1, [r3, #20]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	88da      	ldrh	r2, [r3, #6]
 8003416:	8bfb      	ldrh	r3, [r7, #30]
 8003418:	f003 ffc7 	bl	80073aa <USB_ReadPMA>
 800341c:	e064      	b.n	80034e8 <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	b29b      	uxth	r3, r3
 8003430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003438:	b29c      	uxth	r4, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	441a      	add	r2, r3
 8003448:	4b6b      	ldr	r3, [pc, #428]	; (80035f8 <PCD_EP_ISR_Handler+0x514>)
 800344a:	4323      	orrs	r3, r4
 800344c:	b29b      	uxth	r3, r3
 800344e:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	461a      	mov	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	b29b      	uxth	r3, r3
 8003462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d01f      	beq.n	80034aa <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003472:	b29b      	uxth	r3, r3
 8003474:	461a      	mov	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4413      	add	r3, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6812      	ldr	r2, [r2, #0]
 8003482:	4413      	add	r3, r2
 8003484:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800348e:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003490:	8bfb      	ldrh	r3, [r7, #30]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d028      	beq.n	80034e8 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6959      	ldr	r1, [r3, #20]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	891a      	ldrh	r2, [r3, #8]
 80034a2:	8bfb      	ldrh	r3, [r7, #30]
 80034a4:	f003 ff81 	bl	80073aa <USB_ReadPMA>
 80034a8:	e01e      	b.n	80034e8 <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	461a      	mov	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4413      	add	r3, r2
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6812      	ldr	r2, [r2, #0]
 80034c2:	4413      	add	r3, r2
 80034c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034ce:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80034d0:	8bfb      	ldrh	r3, [r7, #30]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d008      	beq.n	80034e8 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6959      	ldr	r1, [r3, #20]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	895a      	ldrh	r2, [r3, #10]
 80034e2:	8bfb      	ldrh	r3, [r7, #30]
 80034e4:	f003 ff61 	bl	80073aa <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	69da      	ldr	r2, [r3, #28]
 80034ec:	8bfb      	ldrh	r3, [r7, #30]
 80034ee:	441a      	add	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	695a      	ldr	r2, [r3, #20]
 80034f8:	8bfb      	ldrh	r3, [r7, #30]
 80034fa:	441a      	add	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d004      	beq.n	8003512 <PCD_EP_ISR_Handler+0x42e>
 8003508:	8bfa      	ldrh	r2, [r7, #30]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	429a      	cmp	r2, r3
 8003510:	d206      	bcs.n	8003520 <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	4619      	mov	r1, r3
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f005 fd85 	bl	8009028 <HAL_PCD_DataOutStageCallback>
 800351e:	e008      	b.n	8003532 <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	7819      	ldrb	r1, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	695a      	ldr	r2, [r3, #20]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7ff fca9 	bl	8002e84 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003532:	8a7b      	ldrh	r3, [r7, #18]
 8003534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003538:	2b00      	cmp	r3, #0
 800353a:	d04d      	beq.n	80035d8 <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 800353c:	7d7b      	ldrb	r3, [r7, #21]
 800353e:	015b      	lsls	r3, r3, #5
 8003540:	3328      	adds	r3, #40	; 0x28
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	4413      	add	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	7d7b      	ldrb	r3, [r7, #21]
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	b29b      	uxth	r3, r3
 8003558:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800355c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003560:	b29c      	uxth	r4, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	7d7b      	ldrb	r3, [r7, #21]
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	441a      	add	r2, r3
 800356e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003576:	b29b      	uxth	r3, r3
 8003578:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003582:	b29b      	uxth	r3, r3
 8003584:	461a      	mov	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4413      	add	r3, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	4413      	add	r3, r2
 8003594:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	441a      	add	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d106      	bne.n	80035c6 <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	4619      	mov	r1, r3
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f005 fd4a 	bl	8009058 <HAL_PCD_DataInStageCallback>
 80035c4:	e008      	b.n	80035d8 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	7819      	ldrb	r1, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	695a      	ldr	r2, [r3, #20]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff fca5 	bl	8002f22 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	b21b      	sxth	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f6ff ad82 	blt.w	80030ee <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3724      	adds	r7, #36	; 0x24
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd90      	pop	{r4, r7, pc}
 80035f4:	ffff8080 	.word	0xffff8080
 80035f8:	ffff80c0 	.word	0xffff80c0

080035fc <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	607b      	str	r3, [r7, #4]
 8003606:	460b      	mov	r3, r1
 8003608:	817b      	strh	r3, [r7, #10]
 800360a:	4613      	mov	r3, r2
 800360c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800360e:	897b      	ldrh	r3, [r7, #10]
 8003610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d008      	beq.n	800362c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800361a:	897b      	ldrh	r3, [r7, #10]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	015b      	lsls	r3, r3, #5
 8003622:	3328      	adds	r3, #40	; 0x28
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	4413      	add	r3, r2
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	e006      	b.n	800363a <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800362c:	897b      	ldrh	r3, [r7, #10]
 800362e:	015b      	lsls	r3, r3, #5
 8003630:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4413      	add	r3, r2
 8003638:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800363a:	893b      	ldrh	r3, [r7, #8]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d107      	bne.n	8003650 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	2200      	movs	r2, #0
 8003644:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	b29a      	uxth	r2, r3
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	80da      	strh	r2, [r3, #6]
 800364e:	e00b      	b.n	8003668 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	2201      	movs	r2, #1
 8003654:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	b29a      	uxth	r2, r3
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	0c1b      	lsrs	r3, r3, #16
 8003662:	b29a      	uxth	r2, r3
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003676:	b480      	push	{r7}
 8003678:	b085      	sub	sp, #20
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800369a:	b29b      	uxth	r3, r3
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	f043 0302 	orr.w	r3, r3, #2
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
	...

080036cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036d0:	4b04      	ldr	r3, [pc, #16]	; (80036e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80036d8:	4618      	mov	r0, r3
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40007000 	.word	0x40007000

080036e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f6:	d130      	bne.n	800375a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80036f8:	4b23      	ldr	r3, [pc, #140]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003704:	d038      	beq.n	8003778 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003706:	4b20      	ldr	r3, [pc, #128]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800370e:	4a1e      	ldr	r2, [pc, #120]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003710:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003714:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003716:	4b1d      	ldr	r3, [pc, #116]	; (800378c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2232      	movs	r2, #50	; 0x32
 800371c:	fb02 f303 	mul.w	r3, r2, r3
 8003720:	4a1b      	ldr	r2, [pc, #108]	; (8003790 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003722:	fba2 2303 	umull	r2, r3, r2, r3
 8003726:	0c9b      	lsrs	r3, r3, #18
 8003728:	3301      	adds	r3, #1
 800372a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800372c:	e002      	b.n	8003734 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	3b01      	subs	r3, #1
 8003732:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003734:	4b14      	ldr	r3, [pc, #80]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003740:	d102      	bne.n	8003748 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1f2      	bne.n	800372e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003748:	4b0f      	ldr	r3, [pc, #60]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003754:	d110      	bne.n	8003778 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e00f      	b.n	800377a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800375a:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003766:	d007      	beq.n	8003778 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003768:	4b07      	ldr	r3, [pc, #28]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003770:	4a05      	ldr	r2, [pc, #20]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003772:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003776:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40007000 	.word	0x40007000
 800378c:	20000000 	.word	0x20000000
 8003790:	431bde83 	.word	0x431bde83

08003794 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	4a04      	ldr	r2, [pc, #16]	; (80037b0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800379e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037a2:	6053      	str	r3, [r2, #4]
}
 80037a4:	bf00      	nop
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40007000 	.word	0x40007000

080037b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b08a      	sub	sp, #40	; 0x28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d102      	bne.n	80037c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	f000 bc56 	b.w	8004074 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037c8:	4ba1      	ldr	r3, [pc, #644]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 030c 	and.w	r3, r3, #12
 80037d0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037d2:	4b9f      	ldr	r3, [pc, #636]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 80e6 	beq.w	80039b6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d007      	beq.n	8003800 <HAL_RCC_OscConfig+0x4c>
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	2b0c      	cmp	r3, #12
 80037f4:	f040 808d 	bne.w	8003912 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	f040 8089 	bne.w	8003912 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003800:	4b93      	ldr	r3, [pc, #588]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d006      	beq.n	800381a <HAL_RCC_OscConfig+0x66>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d102      	bne.n	800381a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	f000 bc2d 	b.w	8004074 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800381e:	4b8c      	ldr	r3, [pc, #560]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d004      	beq.n	8003834 <HAL_RCC_OscConfig+0x80>
 800382a:	4b89      	ldr	r3, [pc, #548]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003832:	e005      	b.n	8003840 <HAL_RCC_OscConfig+0x8c>
 8003834:	4b86      	ldr	r3, [pc, #536]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 8003836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800383a:	091b      	lsrs	r3, r3, #4
 800383c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003840:	4293      	cmp	r3, r2
 8003842:	d224      	bcs.n	800388e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	4618      	mov	r0, r3
 800384a:	f000 fdbd 	bl	80043c8 <RCC_SetFlashLatencyFromMSIRange>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	f000 bc0d 	b.w	8004074 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800385a:	4b7d      	ldr	r3, [pc, #500]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a7c      	ldr	r2, [pc, #496]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 8003860:	f043 0308 	orr.w	r3, r3, #8
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	4b7a      	ldr	r3, [pc, #488]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	4977      	ldr	r1, [pc, #476]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 8003874:	4313      	orrs	r3, r2
 8003876:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003878:	4b75      	ldr	r3, [pc, #468]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	021b      	lsls	r3, r3, #8
 8003886:	4972      	ldr	r1, [pc, #456]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 8003888:	4313      	orrs	r3, r2
 800388a:	604b      	str	r3, [r1, #4]
 800388c:	e025      	b.n	80038da <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800388e:	4b70      	ldr	r3, [pc, #448]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a6f      	ldr	r2, [pc, #444]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 8003894:	f043 0308 	orr.w	r3, r3, #8
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	4b6d      	ldr	r3, [pc, #436]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	496a      	ldr	r1, [pc, #424]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038ac:	4b68      	ldr	r3, [pc, #416]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	021b      	lsls	r3, r3, #8
 80038ba:	4965      	ldr	r1, [pc, #404]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 fd7c 	bl	80043c8 <RCC_SetFlashLatencyFromMSIRange>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e3cc      	b.n	8004074 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038da:	f000 fcb3 	bl	8004244 <HAL_RCC_GetSysClockFreq>
 80038de:	4601      	mov	r1, r0
 80038e0:	4b5b      	ldr	r3, [pc, #364]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	091b      	lsrs	r3, r3, #4
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	4a5a      	ldr	r2, [pc, #360]	; (8003a54 <HAL_RCC_OscConfig+0x2a0>)
 80038ec:	5cd3      	ldrb	r3, [r2, r3]
 80038ee:	f003 031f 	and.w	r3, r3, #31
 80038f2:	fa21 f303 	lsr.w	r3, r1, r3
 80038f6:	4a58      	ldr	r2, [pc, #352]	; (8003a58 <HAL_RCC_OscConfig+0x2a4>)
 80038f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038fa:	4b58      	ldr	r3, [pc, #352]	; (8003a5c <HAL_RCC_OscConfig+0x2a8>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fe fb0c 	bl	8001f1c <HAL_InitTick>
 8003904:	4603      	mov	r3, r0
 8003906:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003908:	7dfb      	ldrb	r3, [r7, #23]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d052      	beq.n	80039b4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800390e:	7dfb      	ldrb	r3, [r7, #23]
 8003910:	e3b0      	b.n	8004074 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d032      	beq.n	8003980 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800391a:	4b4d      	ldr	r3, [pc, #308]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a4c      	ldr	r2, [pc, #304]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 8003920:	f043 0301 	orr.w	r3, r3, #1
 8003924:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003926:	f7fe fb45 	bl	8001fb4 <HAL_GetTick>
 800392a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800392e:	f7fe fb41 	bl	8001fb4 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e399      	b.n	8004074 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003940:	4b43      	ldr	r3, [pc, #268]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0f0      	beq.n	800392e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800394c:	4b40      	ldr	r3, [pc, #256]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a3f      	ldr	r2, [pc, #252]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 8003952:	f043 0308 	orr.w	r3, r3, #8
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	4b3d      	ldr	r3, [pc, #244]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	493a      	ldr	r1, [pc, #232]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 8003966:	4313      	orrs	r3, r2
 8003968:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800396a:	4b39      	ldr	r3, [pc, #228]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	021b      	lsls	r3, r3, #8
 8003978:	4935      	ldr	r1, [pc, #212]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 800397a:	4313      	orrs	r3, r2
 800397c:	604b      	str	r3, [r1, #4]
 800397e:	e01a      	b.n	80039b6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003980:	4b33      	ldr	r3, [pc, #204]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a32      	ldr	r2, [pc, #200]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 8003986:	f023 0301 	bic.w	r3, r3, #1
 800398a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800398c:	f7fe fb12 	bl	8001fb4 <HAL_GetTick>
 8003990:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003994:	f7fe fb0e 	bl	8001fb4 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e366      	b.n	8004074 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039a6:	4b2a      	ldr	r3, [pc, #168]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCC_OscConfig+0x1e0>
 80039b2:	e000      	b.n	80039b6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d073      	beq.n	8003aaa <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d005      	beq.n	80039d4 <HAL_RCC_OscConfig+0x220>
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	2b0c      	cmp	r3, #12
 80039cc:	d10e      	bne.n	80039ec <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	d10b      	bne.n	80039ec <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d4:	4b1e      	ldr	r3, [pc, #120]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d063      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x2f4>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d15f      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e343      	b.n	8004074 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f4:	d106      	bne.n	8003a04 <HAL_RCC_OscConfig+0x250>
 80039f6:	4b16      	ldr	r3, [pc, #88]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a15      	ldr	r2, [pc, #84]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 80039fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	e01d      	b.n	8003a40 <HAL_RCC_OscConfig+0x28c>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a0c:	d10c      	bne.n	8003a28 <HAL_RCC_OscConfig+0x274>
 8003a0e:	4b10      	ldr	r3, [pc, #64]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a0f      	ldr	r2, [pc, #60]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 8003a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a0c      	ldr	r2, [pc, #48]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	e00b      	b.n	8003a40 <HAL_RCC_OscConfig+0x28c>
 8003a28:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a08      	ldr	r2, [pc, #32]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 8003a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a32:	6013      	str	r3, [r2, #0]
 8003a34:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a05      	ldr	r2, [pc, #20]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 8003a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d01b      	beq.n	8003a80 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a48:	f7fe fab4 	bl	8001fb4 <HAL_GetTick>
 8003a4c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a4e:	e010      	b.n	8003a72 <HAL_RCC_OscConfig+0x2be>
 8003a50:	40021000 	.word	0x40021000
 8003a54:	080097a8 	.word	0x080097a8
 8003a58:	20000000 	.word	0x20000000
 8003a5c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a60:	f7fe faa8 	bl	8001fb4 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b64      	cmp	r3, #100	; 0x64
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e300      	b.n	8004074 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a72:	4ba0      	ldr	r3, [pc, #640]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f0      	beq.n	8003a60 <HAL_RCC_OscConfig+0x2ac>
 8003a7e:	e014      	b.n	8003aaa <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a80:	f7fe fa98 	bl	8001fb4 <HAL_GetTick>
 8003a84:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a88:	f7fe fa94 	bl	8001fb4 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b64      	cmp	r3, #100	; 0x64
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e2ec      	b.n	8004074 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a9a:	4b96      	ldr	r3, [pc, #600]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0x2d4>
 8003aa6:	e000      	b.n	8003aaa <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d060      	beq.n	8003b78 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d005      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x314>
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	2b0c      	cmp	r3, #12
 8003ac0:	d119      	bne.n	8003af6 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d116      	bne.n	8003af6 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ac8:	4b8a      	ldr	r3, [pc, #552]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x32c>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e2c9      	b.n	8004074 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae0:	4b84      	ldr	r3, [pc, #528]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	061b      	lsls	r3, r3, #24
 8003aee:	4981      	ldr	r1, [pc, #516]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003af4:	e040      	b.n	8003b78 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d023      	beq.n	8003b46 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003afe:	4b7d      	ldr	r3, [pc, #500]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a7c      	ldr	r2, [pc, #496]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0a:	f7fe fa53 	bl	8001fb4 <HAL_GetTick>
 8003b0e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b12:	f7fe fa4f 	bl	8001fb4 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e2a7      	b.n	8004074 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b24:	4b73      	ldr	r3, [pc, #460]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0f0      	beq.n	8003b12 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b30:	4b70      	ldr	r3, [pc, #448]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	061b      	lsls	r3, r3, #24
 8003b3e:	496d      	ldr	r1, [pc, #436]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	604b      	str	r3, [r1, #4]
 8003b44:	e018      	b.n	8003b78 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b46:	4b6b      	ldr	r3, [pc, #428]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a6a      	ldr	r2, [pc, #424]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b52:	f7fe fa2f 	bl	8001fb4 <HAL_GetTick>
 8003b56:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b5a:	f7fe fa2b 	bl	8001fb4 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e283      	b.n	8004074 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b6c:	4b61      	ldr	r3, [pc, #388]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1f0      	bne.n	8003b5a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d07f      	beq.n	8003c84 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d05f      	beq.n	8003c4c <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003b8c:	4b59      	ldr	r3, [pc, #356]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b92:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699a      	ldr	r2, [r3, #24]
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d037      	beq.n	8003c12 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d006      	beq.n	8003bba <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e25c      	b.n	8004074 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d01b      	beq.n	8003bfc <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8003bc4:	4b4b      	ldr	r3, [pc, #300]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bca:	4a4a      	ldr	r2, [pc, #296]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003bcc:	f023 0301 	bic.w	r3, r3, #1
 8003bd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bd4:	f7fe f9ee 	bl	8001fb4 <HAL_GetTick>
 8003bd8:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bdc:	f7fe f9ea 	bl	8001fb4 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b11      	cmp	r3, #17
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e242      	b.n	8004074 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bee:	4b41      	ldr	r3, [pc, #260]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1ef      	bne.n	8003bdc <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003bfc:	4b3d      	ldr	r3, [pc, #244]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c02:	f023 0210 	bic.w	r2, r3, #16
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	493a      	ldr	r1, [pc, #232]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c12:	4b38      	ldr	r3, [pc, #224]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c18:	4a36      	ldr	r2, [pc, #216]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003c1a:	f043 0301 	orr.w	r3, r3, #1
 8003c1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c22:	f7fe f9c7 	bl	8001fb4 <HAL_GetTick>
 8003c26:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c2a:	f7fe f9c3 	bl	8001fb4 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b11      	cmp	r3, #17
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e21b      	b.n	8004074 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c3c:	4b2d      	ldr	r3, [pc, #180]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0ef      	beq.n	8003c2a <HAL_RCC_OscConfig+0x476>
 8003c4a:	e01b      	b.n	8003c84 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c4c:	4b29      	ldr	r3, [pc, #164]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c52:	4a28      	ldr	r2, [pc, #160]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003c54:	f023 0301 	bic.w	r3, r3, #1
 8003c58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5c:	f7fe f9aa 	bl	8001fb4 <HAL_GetTick>
 8003c60:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c64:	f7fe f9a6 	bl	8001fb4 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b11      	cmp	r3, #17
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e1fe      	b.n	8004074 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c76:	4b1f      	ldr	r3, [pc, #124]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1ef      	bne.n	8003c64 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80c1 	beq.w	8003e14 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c92:	2300      	movs	r3, #0
 8003c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c98:	4b16      	ldr	r3, [pc, #88]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10e      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca4:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca8:	4a12      	ldr	r2, [pc, #72]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cae:	6593      	str	r3, [r2, #88]	; 0x58
 8003cb0:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <HAL_RCC_OscConfig+0x540>)
 8003cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <HAL_RCC_OscConfig+0x544>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d11c      	bne.n	8003d08 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cce:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <HAL_RCC_OscConfig+0x544>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a09      	ldr	r2, [pc, #36]	; (8003cf8 <HAL_RCC_OscConfig+0x544>)
 8003cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cda:	f7fe f96b 	bl	8001fb4 <HAL_GetTick>
 8003cde:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ce0:	e00c      	b.n	8003cfc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce2:	f7fe f967 	bl	8001fb4 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d905      	bls.n	8003cfc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e1bf      	b.n	8004074 <HAL_RCC_OscConfig+0x8c0>
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cfc:	4bb1      	ldr	r3, [pc, #708]	; (8003fc4 <HAL_RCC_OscConfig+0x810>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0ec      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d02c      	beq.n	8003d6e <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003d14:	4bac      	ldr	r3, [pc, #688]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d26:	49a8      	ldr	r1, [pc, #672]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 0304 	and.w	r3, r3, #4
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d010      	beq.n	8003d5c <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d3a:	4ba3      	ldr	r3, [pc, #652]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d40:	4aa1      	ldr	r2, [pc, #644]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003d42:	f043 0304 	orr.w	r3, r3, #4
 8003d46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d4a:	4b9f      	ldr	r3, [pc, #636]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d50:	4a9d      	ldr	r2, [pc, #628]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003d52:	f043 0301 	orr.w	r3, r3, #1
 8003d56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d5a:	e018      	b.n	8003d8e <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d5c:	4b9a      	ldr	r3, [pc, #616]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d62:	4a99      	ldr	r2, [pc, #612]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003d64:	f043 0301 	orr.w	r3, r3, #1
 8003d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d6c:	e00f      	b.n	8003d8e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d6e:	4b96      	ldr	r3, [pc, #600]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d74:	4a94      	ldr	r2, [pc, #592]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003d76:	f023 0301 	bic.w	r3, r3, #1
 8003d7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d7e:	4b92      	ldr	r3, [pc, #584]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d84:	4a90      	ldr	r2, [pc, #576]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003d86:	f023 0304 	bic.w	r3, r3, #4
 8003d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d016      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d96:	f7fe f90d 	bl	8001fb4 <HAL_GetTick>
 8003d9a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d9c:	e00a      	b.n	8003db4 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d9e:	f7fe f909 	bl	8001fb4 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e15f      	b.n	8004074 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003db4:	4b84      	ldr	r3, [pc, #528]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0ed      	beq.n	8003d9e <HAL_RCC_OscConfig+0x5ea>
 8003dc2:	e01d      	b.n	8003e00 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc4:	f7fe f8f6 	bl	8001fb4 <HAL_GetTick>
 8003dc8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dca:	e00a      	b.n	8003de2 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dcc:	f7fe f8f2 	bl	8001fb4 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e148      	b.n	8004074 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003de2:	4b79      	ldr	r3, [pc, #484]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1ed      	bne.n	8003dcc <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003df0:	4b75      	ldr	r3, [pc, #468]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df6:	4a74      	ldr	r2, [pc, #464]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003df8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d105      	bne.n	8003e14 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e08:	4b6f      	ldr	r3, [pc, #444]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0c:	4a6e      	ldr	r2, [pc, #440]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003e0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e12:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0320 	and.w	r3, r3, #32
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d03c      	beq.n	8003e9a <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d01c      	beq.n	8003e62 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e28:	4b67      	ldr	r3, [pc, #412]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003e2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e2e:	4a66      	ldr	r2, [pc, #408]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e38:	f7fe f8bc 	bl	8001fb4 <HAL_GetTick>
 8003e3c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e40:	f7fe f8b8 	bl	8001fb4 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e110      	b.n	8004074 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e52:	4b5d      	ldr	r3, [pc, #372]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003e54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0ef      	beq.n	8003e40 <HAL_RCC_OscConfig+0x68c>
 8003e60:	e01b      	b.n	8003e9a <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e62:	4b59      	ldr	r3, [pc, #356]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003e64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e68:	4a57      	ldr	r2, [pc, #348]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003e6a:	f023 0301 	bic.w	r3, r3, #1
 8003e6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e72:	f7fe f89f 	bl	8001fb4 <HAL_GetTick>
 8003e76:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e7a:	f7fe f89b 	bl	8001fb4 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e0f3      	b.n	8004074 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e8c:	4b4e      	ldr	r3, [pc, #312]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003e8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1ef      	bne.n	8003e7a <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 80e7 	beq.w	8004072 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	f040 80b7 	bne.w	800401c <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003eae:	4b46      	ldr	r3, [pc, #280]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f003 0203 	and.w	r2, r3, #3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d124      	bne.n	8003f0c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d11b      	bne.n	8003f0c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ede:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d113      	bne.n	8003f0c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eee:	085b      	lsrs	r3, r3, #1
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d109      	bne.n	8003f0c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	085b      	lsrs	r3, r3, #1
 8003f04:	3b01      	subs	r3, #1
 8003f06:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d061      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	2b0c      	cmp	r3, #12
 8003f10:	d056      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f12:	4b2d      	ldr	r3, [pc, #180]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a2c      	ldr	r2, [pc, #176]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003f18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f1c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f1e:	f7fe f849 	bl	8001fb4 <HAL_GetTick>
 8003f22:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f24:	e008      	b.n	8003f38 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f26:	f7fe f845 	bl	8001fb4 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e09d      	b.n	8004074 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f38:	4b23      	ldr	r3, [pc, #140]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1f0      	bne.n	8003f26 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f44:	4b20      	ldr	r3, [pc, #128]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	4b20      	ldr	r3, [pc, #128]	; (8003fcc <HAL_RCC_OscConfig+0x818>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f54:	3a01      	subs	r2, #1
 8003f56:	0112      	lsls	r2, r2, #4
 8003f58:	4311      	orrs	r1, r2
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f5e:	0212      	lsls	r2, r2, #8
 8003f60:	4311      	orrs	r1, r2
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f66:	0852      	lsrs	r2, r2, #1
 8003f68:	3a01      	subs	r2, #1
 8003f6a:	0552      	lsls	r2, r2, #21
 8003f6c:	4311      	orrs	r1, r2
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f72:	0852      	lsrs	r2, r2, #1
 8003f74:	3a01      	subs	r2, #1
 8003f76:	0652      	lsls	r2, r2, #25
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	4913      	ldr	r1, [pc, #76]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f80:	4b11      	ldr	r3, [pc, #68]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a10      	ldr	r2, [pc, #64]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f8c:	4b0e      	ldr	r3, [pc, #56]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	4a0d      	ldr	r2, [pc, #52]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f98:	f7fe f80c 	bl	8001fb4 <HAL_GetTick>
 8003f9c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa0:	f7fe f808 	bl	8001fb4 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e060      	b.n	8004074 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fb2:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <HAL_RCC_OscConfig+0x814>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0f0      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fbe:	e058      	b.n	8004072 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e057      	b.n	8004074 <HAL_RCC_OscConfig+0x8c0>
 8003fc4:	40007000 	.word	0x40007000
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fd0:	4b2a      	ldr	r3, [pc, #168]	; (800407c <HAL_RCC_OscConfig+0x8c8>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d14a      	bne.n	8004072 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003fdc:	4b27      	ldr	r3, [pc, #156]	; (800407c <HAL_RCC_OscConfig+0x8c8>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a26      	ldr	r2, [pc, #152]	; (800407c <HAL_RCC_OscConfig+0x8c8>)
 8003fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fe6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fe8:	4b24      	ldr	r3, [pc, #144]	; (800407c <HAL_RCC_OscConfig+0x8c8>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	4a23      	ldr	r2, [pc, #140]	; (800407c <HAL_RCC_OscConfig+0x8c8>)
 8003fee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ff2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ff4:	f7fd ffde 	bl	8001fb4 <HAL_GetTick>
 8003ff8:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ffc:	f7fd ffda 	bl	8001fb4 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e032      	b.n	8004074 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800400e:	4b1b      	ldr	r3, [pc, #108]	; (800407c <HAL_RCC_OscConfig+0x8c8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f0      	beq.n	8003ffc <HAL_RCC_OscConfig+0x848>
 800401a:	e02a      	b.n	8004072 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	2b0c      	cmp	r3, #12
 8004020:	d025      	beq.n	800406e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004022:	4b16      	ldr	r3, [pc, #88]	; (800407c <HAL_RCC_OscConfig+0x8c8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a15      	ldr	r2, [pc, #84]	; (800407c <HAL_RCC_OscConfig+0x8c8>)
 8004028:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800402c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800402e:	4b13      	ldr	r3, [pc, #76]	; (800407c <HAL_RCC_OscConfig+0x8c8>)
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	4a12      	ldr	r2, [pc, #72]	; (800407c <HAL_RCC_OscConfig+0x8c8>)
 8004034:	f023 0303 	bic.w	r3, r3, #3
 8004038:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800403a:	4b10      	ldr	r3, [pc, #64]	; (800407c <HAL_RCC_OscConfig+0x8c8>)
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	4a0f      	ldr	r2, [pc, #60]	; (800407c <HAL_RCC_OscConfig+0x8c8>)
 8004040:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004044:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004046:	f7fd ffb5 	bl	8001fb4 <HAL_GetTick>
 800404a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800404e:	f7fd ffb1 	bl	8001fb4 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e009      	b.n	8004074 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004060:	4b06      	ldr	r3, [pc, #24]	; (800407c <HAL_RCC_OscConfig+0x8c8>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1f0      	bne.n	800404e <HAL_RCC_OscConfig+0x89a>
 800406c:	e001      	b.n	8004072 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e000      	b.n	8004074 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3728      	adds	r7, #40	; 0x28
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40021000 	.word	0x40021000

08004080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0c8      	b.n	8004226 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004094:	4b66      	ldr	r3, [pc, #408]	; (8004230 <HAL_RCC_ClockConfig+0x1b0>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d910      	bls.n	80040c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a2:	4b63      	ldr	r3, [pc, #396]	; (8004230 <HAL_RCC_ClockConfig+0x1b0>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f023 0207 	bic.w	r2, r3, #7
 80040aa:	4961      	ldr	r1, [pc, #388]	; (8004230 <HAL_RCC_ClockConfig+0x1b0>)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b2:	4b5f      	ldr	r3, [pc, #380]	; (8004230 <HAL_RCC_ClockConfig+0x1b0>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d001      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e0b0      	b.n	8004226 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d04c      	beq.n	800416a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b03      	cmp	r3, #3
 80040d6:	d107      	bne.n	80040e8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040d8:	4b56      	ldr	r3, [pc, #344]	; (8004234 <HAL_RCC_ClockConfig+0x1b4>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d121      	bne.n	8004128 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e09e      	b.n	8004226 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d107      	bne.n	8004100 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040f0:	4b50      	ldr	r3, [pc, #320]	; (8004234 <HAL_RCC_ClockConfig+0x1b4>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d115      	bne.n	8004128 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e092      	b.n	8004226 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d107      	bne.n	8004118 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004108:	4b4a      	ldr	r3, [pc, #296]	; (8004234 <HAL_RCC_ClockConfig+0x1b4>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d109      	bne.n	8004128 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e086      	b.n	8004226 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004118:	4b46      	ldr	r3, [pc, #280]	; (8004234 <HAL_RCC_ClockConfig+0x1b4>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e07e      	b.n	8004226 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004128:	4b42      	ldr	r3, [pc, #264]	; (8004234 <HAL_RCC_ClockConfig+0x1b4>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f023 0203 	bic.w	r2, r3, #3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	493f      	ldr	r1, [pc, #252]	; (8004234 <HAL_RCC_ClockConfig+0x1b4>)
 8004136:	4313      	orrs	r3, r2
 8004138:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800413a:	f7fd ff3b 	bl	8001fb4 <HAL_GetTick>
 800413e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004140:	e00a      	b.n	8004158 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004142:	f7fd ff37 	bl	8001fb4 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004150:	4293      	cmp	r3, r2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e066      	b.n	8004226 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004158:	4b36      	ldr	r3, [pc, #216]	; (8004234 <HAL_RCC_ClockConfig+0x1b4>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 020c 	and.w	r2, r3, #12
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	429a      	cmp	r2, r3
 8004168:	d1eb      	bne.n	8004142 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d008      	beq.n	8004188 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004176:	4b2f      	ldr	r3, [pc, #188]	; (8004234 <HAL_RCC_ClockConfig+0x1b4>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	492c      	ldr	r1, [pc, #176]	; (8004234 <HAL_RCC_ClockConfig+0x1b4>)
 8004184:	4313      	orrs	r3, r2
 8004186:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004188:	4b29      	ldr	r3, [pc, #164]	; (8004230 <HAL_RCC_ClockConfig+0x1b0>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d210      	bcs.n	80041b8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004196:	4b26      	ldr	r3, [pc, #152]	; (8004230 <HAL_RCC_ClockConfig+0x1b0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f023 0207 	bic.w	r2, r3, #7
 800419e:	4924      	ldr	r1, [pc, #144]	; (8004230 <HAL_RCC_ClockConfig+0x1b0>)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a6:	4b22      	ldr	r3, [pc, #136]	; (8004230 <HAL_RCC_ClockConfig+0x1b0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d001      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e036      	b.n	8004226 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d008      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041c4:	4b1b      	ldr	r3, [pc, #108]	; (8004234 <HAL_RCC_ClockConfig+0x1b4>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4918      	ldr	r1, [pc, #96]	; (8004234 <HAL_RCC_ClockConfig+0x1b4>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d009      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041e2:	4b14      	ldr	r3, [pc, #80]	; (8004234 <HAL_RCC_ClockConfig+0x1b4>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	4910      	ldr	r1, [pc, #64]	; (8004234 <HAL_RCC_ClockConfig+0x1b4>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041f6:	f000 f825 	bl	8004244 <HAL_RCC_GetSysClockFreq>
 80041fa:	4601      	mov	r1, r0
 80041fc:	4b0d      	ldr	r3, [pc, #52]	; (8004234 <HAL_RCC_ClockConfig+0x1b4>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	091b      	lsrs	r3, r3, #4
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	4a0c      	ldr	r2, [pc, #48]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 8004208:	5cd3      	ldrb	r3, [r2, r3]
 800420a:	f003 031f 	and.w	r3, r3, #31
 800420e:	fa21 f303 	lsr.w	r3, r1, r3
 8004212:	4a0a      	ldr	r2, [pc, #40]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004216:	4b0a      	ldr	r3, [pc, #40]	; (8004240 <HAL_RCC_ClockConfig+0x1c0>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f7fd fe7e 	bl	8001f1c <HAL_InitTick>
 8004220:	4603      	mov	r3, r0
 8004222:	72fb      	strb	r3, [r7, #11]

  return status;
 8004224:	7afb      	ldrb	r3, [r7, #11]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	40022000 	.word	0x40022000
 8004234:	40021000 	.word	0x40021000
 8004238:	080097a8 	.word	0x080097a8
 800423c:	20000000 	.word	0x20000000
 8004240:	20000004 	.word	0x20000004

08004244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004244:	b480      	push	{r7}
 8004246:	b089      	sub	sp, #36	; 0x24
 8004248:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800424a:	2300      	movs	r3, #0
 800424c:	61fb      	str	r3, [r7, #28]
 800424e:	2300      	movs	r3, #0
 8004250:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004252:	4b3d      	ldr	r3, [pc, #244]	; (8004348 <HAL_RCC_GetSysClockFreq+0x104>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 030c 	and.w	r3, r3, #12
 800425a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800425c:	4b3a      	ldr	r3, [pc, #232]	; (8004348 <HAL_RCC_GetSysClockFreq+0x104>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f003 0303 	and.w	r3, r3, #3
 8004264:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d005      	beq.n	8004278 <HAL_RCC_GetSysClockFreq+0x34>
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	2b0c      	cmp	r3, #12
 8004270:	d121      	bne.n	80042b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d11e      	bne.n	80042b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004278:	4b33      	ldr	r3, [pc, #204]	; (8004348 <HAL_RCC_GetSysClockFreq+0x104>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b00      	cmp	r3, #0
 8004282:	d107      	bne.n	8004294 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004284:	4b30      	ldr	r3, [pc, #192]	; (8004348 <HAL_RCC_GetSysClockFreq+0x104>)
 8004286:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800428a:	0a1b      	lsrs	r3, r3, #8
 800428c:	f003 030f 	and.w	r3, r3, #15
 8004290:	61fb      	str	r3, [r7, #28]
 8004292:	e005      	b.n	80042a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004294:	4b2c      	ldr	r3, [pc, #176]	; (8004348 <HAL_RCC_GetSysClockFreq+0x104>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	091b      	lsrs	r3, r3, #4
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042a0:	4a2a      	ldr	r2, [pc, #168]	; (800434c <HAL_RCC_GetSysClockFreq+0x108>)
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10d      	bne.n	80042cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042b4:	e00a      	b.n	80042cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	d102      	bne.n	80042c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042bc:	4b24      	ldr	r3, [pc, #144]	; (8004350 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042be:	61bb      	str	r3, [r7, #24]
 80042c0:	e004      	b.n	80042cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d101      	bne.n	80042cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042c8:	4b22      	ldr	r3, [pc, #136]	; (8004354 <HAL_RCC_GetSysClockFreq+0x110>)
 80042ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	2b0c      	cmp	r3, #12
 80042d0:	d133      	bne.n	800433a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042d2:	4b1d      	ldr	r3, [pc, #116]	; (8004348 <HAL_RCC_GetSysClockFreq+0x104>)
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d002      	beq.n	80042e8 <HAL_RCC_GetSysClockFreq+0xa4>
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d003      	beq.n	80042ee <HAL_RCC_GetSysClockFreq+0xaa>
 80042e6:	e005      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042e8:	4b19      	ldr	r3, [pc, #100]	; (8004350 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042ea:	617b      	str	r3, [r7, #20]
      break;
 80042ec:	e005      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042ee:	4b19      	ldr	r3, [pc, #100]	; (8004354 <HAL_RCC_GetSysClockFreq+0x110>)
 80042f0:	617b      	str	r3, [r7, #20]
      break;
 80042f2:	e002      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	617b      	str	r3, [r7, #20]
      break;
 80042f8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042fa:	4b13      	ldr	r3, [pc, #76]	; (8004348 <HAL_RCC_GetSysClockFreq+0x104>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	091b      	lsrs	r3, r3, #4
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	3301      	adds	r3, #1
 8004306:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004308:	4b0f      	ldr	r3, [pc, #60]	; (8004348 <HAL_RCC_GetSysClockFreq+0x104>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	0a1b      	lsrs	r3, r3, #8
 800430e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	fb02 f203 	mul.w	r2, r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	fbb2 f3f3 	udiv	r3, r2, r3
 800431e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004320:	4b09      	ldr	r3, [pc, #36]	; (8004348 <HAL_RCC_GetSysClockFreq+0x104>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	0e5b      	lsrs	r3, r3, #25
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	3301      	adds	r3, #1
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	fbb2 f3f3 	udiv	r3, r2, r3
 8004338:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800433a:	69bb      	ldr	r3, [r7, #24]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3724      	adds	r7, #36	; 0x24
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	40021000 	.word	0x40021000
 800434c:	080097c0 	.word	0x080097c0
 8004350:	00f42400 	.word	0x00f42400
 8004354:	007a1200 	.word	0x007a1200

08004358 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800435c:	4b03      	ldr	r3, [pc, #12]	; (800436c <HAL_RCC_GetHCLKFreq+0x14>)
 800435e:	681b      	ldr	r3, [r3, #0]
}
 8004360:	4618      	mov	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	20000000 	.word	0x20000000

08004370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004374:	f7ff fff0 	bl	8004358 <HAL_RCC_GetHCLKFreq>
 8004378:	4601      	mov	r1, r0
 800437a:	4b06      	ldr	r3, [pc, #24]	; (8004394 <HAL_RCC_GetPCLK1Freq+0x24>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	0a1b      	lsrs	r3, r3, #8
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	4a04      	ldr	r2, [pc, #16]	; (8004398 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004386:	5cd3      	ldrb	r3, [r2, r3]
 8004388:	f003 031f 	and.w	r3, r3, #31
 800438c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004390:	4618      	mov	r0, r3
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40021000 	.word	0x40021000
 8004398:	080097b8 	.word	0x080097b8

0800439c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043a0:	f7ff ffda 	bl	8004358 <HAL_RCC_GetHCLKFreq>
 80043a4:	4601      	mov	r1, r0
 80043a6:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	0adb      	lsrs	r3, r3, #11
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	4a04      	ldr	r2, [pc, #16]	; (80043c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80043b2:	5cd3      	ldrb	r3, [r2, r3]
 80043b4:	f003 031f 	and.w	r3, r3, #31
 80043b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043bc:	4618      	mov	r0, r3
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40021000 	.word	0x40021000
 80043c4:	080097b8 	.word	0x080097b8

080043c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043d0:	2300      	movs	r3, #0
 80043d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043d4:	4b2a      	ldr	r3, [pc, #168]	; (8004480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043e0:	f7ff f974 	bl	80036cc <HAL_PWREx_GetVoltageRange>
 80043e4:	6178      	str	r0, [r7, #20]
 80043e6:	e014      	b.n	8004412 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043e8:	4b25      	ldr	r3, [pc, #148]	; (8004480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ec:	4a24      	ldr	r2, [pc, #144]	; (8004480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f2:	6593      	str	r3, [r2, #88]	; 0x58
 80043f4:	4b22      	ldr	r3, [pc, #136]	; (8004480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004400:	f7ff f964 	bl	80036cc <HAL_PWREx_GetVoltageRange>
 8004404:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004406:	4b1e      	ldr	r3, [pc, #120]	; (8004480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440a:	4a1d      	ldr	r2, [pc, #116]	; (8004480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800440c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004410:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004418:	d10b      	bne.n	8004432 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b80      	cmp	r3, #128	; 0x80
 800441e:	d919      	bls.n	8004454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2ba0      	cmp	r3, #160	; 0xa0
 8004424:	d902      	bls.n	800442c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004426:	2302      	movs	r3, #2
 8004428:	613b      	str	r3, [r7, #16]
 800442a:	e013      	b.n	8004454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800442c:	2301      	movs	r3, #1
 800442e:	613b      	str	r3, [r7, #16]
 8004430:	e010      	b.n	8004454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b80      	cmp	r3, #128	; 0x80
 8004436:	d902      	bls.n	800443e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004438:	2303      	movs	r3, #3
 800443a:	613b      	str	r3, [r7, #16]
 800443c:	e00a      	b.n	8004454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b80      	cmp	r3, #128	; 0x80
 8004442:	d102      	bne.n	800444a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004444:	2302      	movs	r3, #2
 8004446:	613b      	str	r3, [r7, #16]
 8004448:	e004      	b.n	8004454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b70      	cmp	r3, #112	; 0x70
 800444e:	d101      	bne.n	8004454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004450:	2301      	movs	r3, #1
 8004452:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004454:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f023 0207 	bic.w	r2, r3, #7
 800445c:	4909      	ldr	r1, [pc, #36]	; (8004484 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004464:	4b07      	ldr	r3, [pc, #28]	; (8004484 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	429a      	cmp	r2, r3
 8004470:	d001      	beq.n	8004476 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e000      	b.n	8004478 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40021000 	.word	0x40021000
 8004484:	40022000 	.word	0x40022000

08004488 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004490:	2300      	movs	r3, #0
 8004492:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004494:	2300      	movs	r3, #0
 8004496:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 809e 	beq.w	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044a6:	2300      	movs	r3, #0
 80044a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044aa:	4b46      	ldr	r3, [pc, #280]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80044ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x32>
 80044b6:	2301      	movs	r3, #1
 80044b8:	e000      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x34>
 80044ba:	2300      	movs	r3, #0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00d      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c0:	4b40      	ldr	r3, [pc, #256]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80044c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c4:	4a3f      	ldr	r2, [pc, #252]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80044c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ca:	6593      	str	r3, [r2, #88]	; 0x58
 80044cc:	4b3d      	ldr	r3, [pc, #244]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80044ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d4:	60bb      	str	r3, [r7, #8]
 80044d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044d8:	2301      	movs	r3, #1
 80044da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044dc:	4b3a      	ldr	r3, [pc, #232]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a39      	ldr	r2, [pc, #228]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80044e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044e8:	f7fd fd64 	bl	8001fb4 <HAL_GetTick>
 80044ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044ee:	e009      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f0:	f7fd fd60 	bl	8001fb4 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d902      	bls.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	74fb      	strb	r3, [r7, #19]
        break;
 8004502:	e005      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004504:	4b30      	ldr	r3, [pc, #192]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0ef      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8004510:	7cfb      	ldrb	r3, [r7, #19]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d15a      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004516:	4b2b      	ldr	r3, [pc, #172]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004520:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d01e      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	429a      	cmp	r2, r3
 8004530:	d019      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004532:	4b24      	ldr	r3, [pc, #144]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800453c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800453e:	4b21      	ldr	r3, [pc, #132]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004544:	4a1f      	ldr	r2, [pc, #124]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800454a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800454e:	4b1d      	ldr	r3, [pc, #116]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004554:	4a1b      	ldr	r2, [pc, #108]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800455a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800455e:	4a19      	ldr	r2, [pc, #100]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d016      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004570:	f7fd fd20 	bl	8001fb4 <HAL_GetTick>
 8004574:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004576:	e00b      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004578:	f7fd fd1c 	bl	8001fb4 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	f241 3288 	movw	r2, #5000	; 0x1388
 8004586:	4293      	cmp	r3, r2
 8004588:	d902      	bls.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	74fb      	strb	r3, [r7, #19]
            break;
 800458e:	e006      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004590:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0ec      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800459e:	7cfb      	ldrb	r3, [r7, #19]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10b      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045a4:	4b07      	ldr	r3, [pc, #28]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b2:	4904      	ldr	r1, [pc, #16]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80045ba:	e009      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045bc:	7cfb      	ldrb	r3, [r7, #19]
 80045be:	74bb      	strb	r3, [r7, #18]
 80045c0:	e006      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80045c2:	bf00      	nop
 80045c4:	40021000 	.word	0x40021000
 80045c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045cc:	7cfb      	ldrb	r3, [r7, #19]
 80045ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045d0:	7c7b      	ldrb	r3, [r7, #17]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d105      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045d6:	4b6e      	ldr	r3, [pc, #440]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80045d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045da:	4a6d      	ldr	r2, [pc, #436]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80045dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045ee:	4b68      	ldr	r3, [pc, #416]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80045f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f4:	f023 0203 	bic.w	r2, r3, #3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	4964      	ldr	r1, [pc, #400]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00a      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004610:	4b5f      	ldr	r3, [pc, #380]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004616:	f023 020c 	bic.w	r2, r3, #12
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	495c      	ldr	r1, [pc, #368]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004632:	4b57      	ldr	r3, [pc, #348]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004638:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	4953      	ldr	r1, [pc, #332]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004642:	4313      	orrs	r3, r2
 8004644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0320 	and.w	r3, r3, #32
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00a      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004654:	4b4e      	ldr	r3, [pc, #312]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	494b      	ldr	r1, [pc, #300]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004664:	4313      	orrs	r3, r2
 8004666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004676:	4b46      	ldr	r3, [pc, #280]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	4942      	ldr	r1, [pc, #264]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004686:	4313      	orrs	r3, r2
 8004688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004698:	4b3d      	ldr	r3, [pc, #244]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800469a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	493a      	ldr	r1, [pc, #232]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046ba:	4b35      	ldr	r3, [pc, #212]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80046bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	4931      	ldr	r1, [pc, #196]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046dc:	4b2c      	ldr	r3, [pc, #176]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80046de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	4929      	ldr	r1, [pc, #164]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046fe:	4b24      	ldr	r3, [pc, #144]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004704:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	4920      	ldr	r1, [pc, #128]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800470e:	4313      	orrs	r3, r2
 8004710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d015      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004720:	4b1b      	ldr	r3, [pc, #108]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004726:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472e:	4918      	ldr	r1, [pc, #96]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004730:	4313      	orrs	r3, r2
 8004732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800473e:	d105      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004740:	4b13      	ldr	r3, [pc, #76]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	4a12      	ldr	r2, [pc, #72]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004746:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800474a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d015      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004758:	4b0d      	ldr	r3, [pc, #52]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800475a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004766:	490a      	ldr	r1, [pc, #40]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004772:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004776:	d105      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004778:	4b05      	ldr	r3, [pc, #20]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	4a04      	ldr	r2, [pc, #16]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800477e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004782:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004784:	7cbb      	ldrb	r3, [r7, #18]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40021000 	.word	0x40021000

08004794 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e07c      	b.n	80048a0 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d106      	bne.n	80047c6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f7fd fa11 	bl	8001be8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2202      	movs	r2, #2
 80047ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047dc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047e6:	d902      	bls.n	80047ee <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80047e8:	2300      	movs	r3, #0
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	e002      	b.n	80047f4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80047ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047f2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80047fc:	d007      	beq.n	800480e <HAL_SPI_Init+0x7a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004806:	d002      	beq.n	800480e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10b      	bne.n	800482e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800481e:	d903      	bls.n	8004828 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	631a      	str	r2, [r3, #48]	; 0x30
 8004826:	e002      	b.n	800482e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	431a      	orrs	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	ea42 0103 	orr.w	r1, r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	0c1b      	lsrs	r3, r3, #16
 800486e:	f003 0204 	and.w	r2, r3, #4
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487c:	431a      	orrs	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	ea42 0103 	orr.w	r1, r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	430a      	orrs	r2, r1
 800488e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	603b      	str	r3, [r7, #0]
 80048b4:	4613      	mov	r3, r2
 80048b6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048b8:	2300      	movs	r3, #0
 80048ba:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d101      	bne.n	80048ca <HAL_SPI_Transmit+0x22>
 80048c6:	2302      	movs	r3, #2
 80048c8:	e150      	b.n	8004b6c <HAL_SPI_Transmit+0x2c4>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048d2:	f7fd fb6f 	bl	8001fb4 <HAL_GetTick>
 80048d6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80048d8:	88fb      	ldrh	r3, [r7, #6]
 80048da:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d002      	beq.n	80048ee <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80048e8:	2302      	movs	r3, #2
 80048ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048ec:	e135      	b.n	8004b5a <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <HAL_SPI_Transmit+0x52>
 80048f4:	88fb      	ldrh	r3, [r7, #6]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d102      	bne.n	8004900 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048fe:	e12c      	b.n	8004b5a <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2203      	movs	r2, #3
 8004904:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	88fa      	ldrh	r2, [r7, #6]
 8004918:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	88fa      	ldrh	r2, [r7, #6]
 800491e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800494a:	d107      	bne.n	800495c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800495a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004966:	2b40      	cmp	r3, #64	; 0x40
 8004968:	d007      	beq.n	800497a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004978:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004982:	d94b      	bls.n	8004a1c <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d002      	beq.n	8004992 <HAL_SPI_Transmit+0xea>
 800498c:	8afb      	ldrh	r3, [r7, #22]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d13e      	bne.n	8004a10 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004996:	881a      	ldrh	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a2:	1c9a      	adds	r2, r3, #2
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049b6:	e02b      	b.n	8004a10 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d112      	bne.n	80049ec <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ca:	881a      	ldrh	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d6:	1c9a      	adds	r2, r3, #2
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049ea:	e011      	b.n	8004a10 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049ec:	f7fd fae2 	bl	8001fb4 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d803      	bhi.n	8004a04 <HAL_SPI_Transmit+0x15c>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a02:	d102      	bne.n	8004a0a <HAL_SPI_Transmit+0x162>
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d102      	bne.n	8004a10 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a0e:	e0a4      	b.n	8004b5a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1ce      	bne.n	80049b8 <HAL_SPI_Transmit+0x110>
 8004a1a:	e07c      	b.n	8004b16 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d002      	beq.n	8004a2a <HAL_SPI_Transmit+0x182>
 8004a24:	8afb      	ldrh	r3, [r7, #22]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d170      	bne.n	8004b0c <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d912      	bls.n	8004a5a <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a38:	881a      	ldrh	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a44:	1c9a      	adds	r2, r3, #2
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b02      	subs	r3, #2
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a58:	e058      	b.n	8004b0c <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	330c      	adds	r3, #12
 8004a64:	7812      	ldrb	r2, [r2, #0]
 8004a66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6c:	1c5a      	adds	r2, r3, #1
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004a80:	e044      	b.n	8004b0c <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d12b      	bne.n	8004ae8 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d912      	bls.n	8004ac0 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9e:	881a      	ldrh	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	1c9a      	adds	r2, r3, #2
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3b02      	subs	r3, #2
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004abe:	e025      	b.n	8004b0c <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	330c      	adds	r3, #12
 8004aca:	7812      	ldrb	r2, [r2, #0]
 8004acc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ae6:	e011      	b.n	8004b0c <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ae8:	f7fd fa64 	bl	8001fb4 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d803      	bhi.n	8004b00 <HAL_SPI_Transmit+0x258>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afe:	d102      	bne.n	8004b06 <HAL_SPI_Transmit+0x25e>
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d102      	bne.n	8004b0c <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b0a:	e026      	b.n	8004b5a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1b5      	bne.n	8004a82 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	6839      	ldr	r1, [r7, #0]
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 fb14 	bl	8005148 <SPI_EndRxTxTransaction>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10a      	bne.n	8004b4a <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b34:	2300      	movs	r3, #0
 8004b36:	613b      	str	r3, [r7, #16]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	613b      	str	r3, [r7, #16]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	613b      	str	r3, [r7, #16]
 8004b48:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	77fb      	strb	r3, [r7, #31]
 8004b56:	e000      	b.n	8004b5a <HAL_SPI_Transmit+0x2b2>
  }

error:
 8004b58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3720      	adds	r7, #32
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b08a      	sub	sp, #40	; 0x28
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
 8004b80:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b82:	2301      	movs	r3, #1
 8004b84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d101      	bne.n	8004b9a <HAL_SPI_TransmitReceive+0x26>
 8004b96:	2302      	movs	r3, #2
 8004b98:	e1fb      	b.n	8004f92 <HAL_SPI_TransmitReceive+0x41e>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ba2:	f7fd fa07 	bl	8001fb4 <HAL_GetTick>
 8004ba6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bae:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004bb6:	887b      	ldrh	r3, [r7, #2]
 8004bb8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004bba:	887b      	ldrh	r3, [r7, #2]
 8004bbc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bbe:	7efb      	ldrb	r3, [r7, #27]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d00e      	beq.n	8004be2 <HAL_SPI_TransmitReceive+0x6e>
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bca:	d106      	bne.n	8004bda <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d102      	bne.n	8004bda <HAL_SPI_TransmitReceive+0x66>
 8004bd4:	7efb      	ldrb	r3, [r7, #27]
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d003      	beq.n	8004be2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004bda:	2302      	movs	r3, #2
 8004bdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004be0:	e1cd      	b.n	8004f7e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <HAL_SPI_TransmitReceive+0x80>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d002      	beq.n	8004bf4 <HAL_SPI_TransmitReceive+0x80>
 8004bee:	887b      	ldrh	r3, [r7, #2]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d103      	bne.n	8004bfc <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004bfa:	e1c0      	b.n	8004f7e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b04      	cmp	r3, #4
 8004c06:	d003      	beq.n	8004c10 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2205      	movs	r2, #5
 8004c0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	887a      	ldrh	r2, [r7, #2]
 8004c20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	887a      	ldrh	r2, [r7, #2]
 8004c28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	887a      	ldrh	r2, [r7, #2]
 8004c36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	887a      	ldrh	r2, [r7, #2]
 8004c3c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c52:	d802      	bhi.n	8004c5a <HAL_SPI_TransmitReceive+0xe6>
 8004c54:	8a3b      	ldrh	r3, [r7, #16]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d908      	bls.n	8004c6c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c68:	605a      	str	r2, [r3, #4]
 8004c6a:	e007      	b.n	8004c7c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c7a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c86:	2b40      	cmp	r3, #64	; 0x40
 8004c88:	d007      	beq.n	8004c9a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ca2:	d97c      	bls.n	8004d9e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <HAL_SPI_TransmitReceive+0x13e>
 8004cac:	8a7b      	ldrh	r3, [r7, #18]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d169      	bne.n	8004d86 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	881a      	ldrh	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	1c9a      	adds	r2, r3, #2
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cd6:	e056      	b.n	8004d86 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d11b      	bne.n	8004d1e <HAL_SPI_TransmitReceive+0x1aa>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d016      	beq.n	8004d1e <HAL_SPI_TransmitReceive+0x1aa>
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d113      	bne.n	8004d1e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfa:	881a      	ldrh	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d06:	1c9a      	adds	r2, r3, #2
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d11c      	bne.n	8004d66 <HAL_SPI_TransmitReceive+0x1f2>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d016      	beq.n	8004d66 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68da      	ldr	r2, [r3, #12]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	b292      	uxth	r2, r2
 8004d44:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	1c9a      	adds	r2, r3, #2
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d62:	2301      	movs	r3, #1
 8004d64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d66:	f7fd f925 	bl	8001fb4 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d807      	bhi.n	8004d86 <HAL_SPI_TransmitReceive+0x212>
 8004d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7c:	d003      	beq.n	8004d86 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004d84:	e0fb      	b.n	8004f7e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1a3      	bne.n	8004cd8 <HAL_SPI_TransmitReceive+0x164>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d19d      	bne.n	8004cd8 <HAL_SPI_TransmitReceive+0x164>
 8004d9c:	e0df      	b.n	8004f5e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_SPI_TransmitReceive+0x23a>
 8004da6:	8a7b      	ldrh	r3, [r7, #18]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	f040 80cb 	bne.w	8004f44 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d912      	bls.n	8004dde <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	881a      	ldrh	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc8:	1c9a      	adds	r2, r3, #2
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	3b02      	subs	r3, #2
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ddc:	e0b2      	b.n	8004f44 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	330c      	adds	r3, #12
 8004de8:	7812      	ldrb	r2, [r2, #0]
 8004dea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e04:	e09e      	b.n	8004f44 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d134      	bne.n	8004e7e <HAL_SPI_TransmitReceive+0x30a>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d02f      	beq.n	8004e7e <HAL_SPI_TransmitReceive+0x30a>
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d12c      	bne.n	8004e7e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d912      	bls.n	8004e54 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e32:	881a      	ldrh	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3e:	1c9a      	adds	r2, r3, #2
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	3b02      	subs	r3, #2
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e52:	e012      	b.n	8004e7a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	330c      	adds	r3, #12
 8004e5e:	7812      	ldrb	r2, [r2, #0]
 8004e60:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	1c5a      	adds	r2, r3, #1
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	3b01      	subs	r3, #1
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d148      	bne.n	8004f1e <HAL_SPI_TransmitReceive+0x3aa>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d042      	beq.n	8004f1e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d923      	bls.n	8004eec <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	b292      	uxth	r2, r2
 8004eb0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	1c9a      	adds	r2, r3, #2
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b02      	subs	r3, #2
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d81f      	bhi.n	8004f1a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ee8:	605a      	str	r2, [r3, #4]
 8004eea:	e016      	b.n	8004f1a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f103 020c 	add.w	r2, r3, #12
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	7812      	ldrb	r2, [r2, #0]
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	3b01      	subs	r3, #1
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f1e:	f7fd f849 	bl	8001fb4 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d803      	bhi.n	8004f36 <HAL_SPI_TransmitReceive+0x3c2>
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f34:	d102      	bne.n	8004f3c <HAL_SPI_TransmitReceive+0x3c8>
 8004f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d103      	bne.n	8004f44 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004f42:	e01c      	b.n	8004f7e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f47f af5b 	bne.w	8004e06 <HAL_SPI_TransmitReceive+0x292>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f47f af54 	bne.w	8004e06 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 f8f0 	bl	8005148 <SPI_EndRxTxTransaction>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d006      	beq.n	8004f7c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2220      	movs	r2, #32
 8004f78:	661a      	str	r2, [r3, #96]	; 0x60
 8004f7a:	e000      	b.n	8004f7e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004f7c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3728      	adds	r7, #40	; 0x28
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	60f8      	str	r0, [r7, #12]
 8004fa2:	60b9      	str	r1, [r7, #8]
 8004fa4:	603b      	str	r3, [r7, #0]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004faa:	e04c      	b.n	8005046 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb2:	d048      	beq.n	8005046 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004fb4:	f7fc fffe 	bl	8001fb4 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d902      	bls.n	8004fca <SPI_WaitFlagStateUntilTimeout+0x30>
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d13d      	bne.n	8005046 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fe2:	d111      	bne.n	8005008 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fec:	d004      	beq.n	8004ff8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff6:	d107      	bne.n	8005008 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005006:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005010:	d10f      	bne.n	8005032 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005030:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e00f      	b.n	8005066 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	4013      	ands	r3, r2
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	429a      	cmp	r2, r3
 8005054:	bf0c      	ite	eq
 8005056:	2301      	moveq	r3, #1
 8005058:	2300      	movne	r3, #0
 800505a:	b2db      	uxtb	r3, r3
 800505c:	461a      	mov	r2, r3
 800505e:	79fb      	ldrb	r3, [r7, #7]
 8005060:	429a      	cmp	r2, r3
 8005062:	d1a3      	bne.n	8004fac <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b084      	sub	sp, #16
 8005072:	af00      	add	r7, sp, #0
 8005074:	60f8      	str	r0, [r7, #12]
 8005076:	60b9      	str	r1, [r7, #8]
 8005078:	607a      	str	r2, [r7, #4]
 800507a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800507c:	e057      	b.n	800512e <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005084:	d106      	bne.n	8005094 <SPI_WaitFifoStateUntilTimeout+0x26>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d103      	bne.n	8005094 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	330c      	adds	r3, #12
 8005092:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509a:	d048      	beq.n	800512e <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800509c:	f7fc ff8a 	bl	8001fb4 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d902      	bls.n	80050b2 <SPI_WaitFifoStateUntilTimeout+0x44>
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d13d      	bne.n	800512e <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050ca:	d111      	bne.n	80050f0 <SPI_WaitFifoStateUntilTimeout+0x82>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d4:	d004      	beq.n	80050e0 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050de:	d107      	bne.n	80050f0 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050f8:	d10f      	bne.n	800511a <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005118:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e008      	b.n	8005140 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4013      	ands	r3, r2
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	429a      	cmp	r2, r3
 800513c:	d19f      	bne.n	800507e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af02      	add	r7, sp, #8
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2200      	movs	r2, #0
 800515c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f7ff ff84 	bl	800506e <SPI_WaitFifoStateUntilTimeout>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d007      	beq.n	800517c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005170:	f043 0220 	orr.w	r2, r3, #32
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e027      	b.n	80051cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	2200      	movs	r2, #0
 8005184:	2180      	movs	r1, #128	; 0x80
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f7ff ff07 	bl	8004f9a <SPI_WaitFlagStateUntilTimeout>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d007      	beq.n	80051a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005196:	f043 0220 	orr.w	r2, r3, #32
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e014      	b.n	80051cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f7ff ff5d 	bl	800506e <SPI_WaitFifoStateUntilTimeout>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d007      	beq.n	80051ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051be:	f043 0220 	orr.w	r2, r3, #32
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e000      	b.n	80051cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e040      	b.n	8005268 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7fc fe04 	bl	8001e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2224      	movs	r2, #36	; 0x24
 8005200:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0201 	bic.w	r2, r2, #1
 8005210:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 fa28 	bl	8005668 <UART_SetConfig>
 8005218:	4603      	mov	r3, r0
 800521a:	2b01      	cmp	r3, #1
 800521c:	d101      	bne.n	8005222 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e022      	b.n	8005268 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	2b00      	cmp	r3, #0
 8005228:	d002      	beq.n	8005230 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 fd30 	bl	8005c90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800523e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689a      	ldr	r2, [r3, #8]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800524e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0201 	orr.w	r2, r2, #1
 800525e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 fdb7 	bl	8005dd4 <UART_CheckIdleState>
 8005266:	4603      	mov	r3, r0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	4613      	mov	r3, r2
 800527c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005282:	2b20      	cmp	r3, #32
 8005284:	f040 808a 	bne.w	800539c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <HAL_UART_Receive_IT+0x24>
 800528e:	88fb      	ldrh	r3, [r7, #6]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e082      	b.n	800539e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d101      	bne.n	80052a6 <HAL_UART_Receive_IT+0x36>
 80052a2:	2302      	movs	r3, #2
 80052a4:	e07b      	b.n	800539e <HAL_UART_Receive_IT+0x12e>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	88fa      	ldrh	r2, [r7, #6]
 80052b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	88fa      	ldrh	r2, [r7, #6]
 80052c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d2:	d10e      	bne.n	80052f2 <HAL_UART_Receive_IT+0x82>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d105      	bne.n	80052e8 <HAL_UART_Receive_IT+0x78>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80052e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052e6:	e02d      	b.n	8005344 <HAL_UART_Receive_IT+0xd4>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	22ff      	movs	r2, #255	; 0xff
 80052ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052f0:	e028      	b.n	8005344 <HAL_UART_Receive_IT+0xd4>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10d      	bne.n	8005316 <HAL_UART_Receive_IT+0xa6>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d104      	bne.n	800530c <HAL_UART_Receive_IT+0x9c>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	22ff      	movs	r2, #255	; 0xff
 8005306:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800530a:	e01b      	b.n	8005344 <HAL_UART_Receive_IT+0xd4>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	227f      	movs	r2, #127	; 0x7f
 8005310:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005314:	e016      	b.n	8005344 <HAL_UART_Receive_IT+0xd4>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800531e:	d10d      	bne.n	800533c <HAL_UART_Receive_IT+0xcc>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d104      	bne.n	8005332 <HAL_UART_Receive_IT+0xc2>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	227f      	movs	r2, #127	; 0x7f
 800532c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005330:	e008      	b.n	8005344 <HAL_UART_Receive_IT+0xd4>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	223f      	movs	r2, #63	; 0x3f
 8005336:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800533a:	e003      	b.n	8005344 <HAL_UART_Receive_IT+0xd4>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2222      	movs	r2, #34	; 0x22
 800534e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0201 	orr.w	r2, r2, #1
 800535e:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005368:	d107      	bne.n	800537a <HAL_UART_Receive_IT+0x10a>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d103      	bne.n	800537a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4a0d      	ldr	r2, [pc, #52]	; (80053ac <HAL_UART_Receive_IT+0x13c>)
 8005376:	661a      	str	r2, [r3, #96]	; 0x60
 8005378:	e002      	b.n	8005380 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	4a0c      	ldr	r2, [pc, #48]	; (80053b0 <HAL_UART_Receive_IT+0x140>)
 800537e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005396:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	e000      	b.n	800539e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800539c:	2302      	movs	r3, #2
  }
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	0800609d 	.word	0x0800609d
 80053b0:	08005ff3 	.word	0x08005ff3

080053b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80053d4:	69fa      	ldr	r2, [r7, #28]
 80053d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80053da:	4013      	ands	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d113      	bne.n	800540c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	f003 0320 	and.w	r3, r3, #32
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00e      	beq.n	800540c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d009      	beq.n	800540c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 8114 	beq.w	800562a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	4798      	blx	r3
      }
      return;
 800540a:	e10e      	b.n	800562a <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 80d6 	beq.w	80055c0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d105      	bne.n	800542a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 80cb 	beq.w	80055c0 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00e      	beq.n	8005452 <HAL_UART_IRQHandler+0x9e>
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543a:	2b00      	cmp	r3, #0
 800543c:	d009      	beq.n	8005452 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2201      	movs	r2, #1
 8005444:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800544a:	f043 0201 	orr.w	r2, r3, #1
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00e      	beq.n	800547a <HAL_UART_IRQHandler+0xc6>
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d009      	beq.n	800547a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2202      	movs	r2, #2
 800546c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005472:	f043 0204 	orr.w	r2, r3, #4
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	f003 0304 	and.w	r3, r3, #4
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00e      	beq.n	80054a2 <HAL_UART_IRQHandler+0xee>
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d009      	beq.n	80054a2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2204      	movs	r2, #4
 8005494:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800549a:	f043 0202 	orr.w	r2, r3, #2
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	f003 0308 	and.w	r3, r3, #8
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d013      	beq.n	80054d4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d104      	bne.n	80054c0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d009      	beq.n	80054d4 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2208      	movs	r2, #8
 80054c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054cc:	f043 0208 	orr.w	r2, r3, #8
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00f      	beq.n	80054fe <HAL_UART_IRQHandler+0x14a>
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00a      	beq.n	80054fe <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054f6:	f043 0220 	orr.w	r2, r3, #32
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 8093 	beq.w	800562e <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	f003 0320 	and.w	r3, r3, #32
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00c      	beq.n	800552c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	f003 0320 	and.w	r3, r3, #32
 8005518:	2b00      	cmp	r3, #0
 800551a:	d007      	beq.n	800552c <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005520:	2b00      	cmp	r3, #0
 8005522:	d003      	beq.n	800552c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005530:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553c:	2b40      	cmp	r3, #64	; 0x40
 800553e:	d004      	beq.n	800554a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005546:	2b00      	cmp	r3, #0
 8005548:	d031      	beq.n	80055ae <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fd02 	bl	8005f54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555a:	2b40      	cmp	r3, #64	; 0x40
 800555c:	d123      	bne.n	80055a6 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	689a      	ldr	r2, [r3, #8]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800556c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005572:	2b00      	cmp	r3, #0
 8005574:	d013      	beq.n	800559e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800557a:	4a30      	ldr	r2, [pc, #192]	; (800563c <HAL_UART_IRQHandler+0x288>)
 800557c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005582:	4618      	mov	r0, r3
 8005584:	f7fc fe55 	bl	8002232 <HAL_DMA_Abort_IT>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d016      	beq.n	80055bc <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005598:	4610      	mov	r0, r2
 800559a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800559c:	e00e      	b.n	80055bc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f858 	bl	8005654 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a4:	e00a      	b.n	80055bc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f854 	bl	8005654 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ac:	e006      	b.n	80055bc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f850 	bl	8005654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80055ba:	e038      	b.n	800562e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055bc:	bf00      	nop
    return;
 80055be:	e036      	b.n	800562e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00d      	beq.n	80055e6 <HAL_UART_IRQHandler+0x232>
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d008      	beq.n	80055e6 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80055dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fdb1 	bl	8006146 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80055e4:	e026      	b.n	8005634 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00d      	beq.n	800560c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d008      	beq.n	800560c <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d017      	beq.n	8005632 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	4798      	blx	r3
    }
    return;
 800560a:	e012      	b.n	8005632 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00e      	beq.n	8005634 <HAL_UART_IRQHandler+0x280>
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561c:	2b00      	cmp	r3, #0
 800561e:	d009      	beq.n	8005634 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 fccd 	bl	8005fc0 <UART_EndTransmit_IT>
    return;
 8005626:	bf00      	nop
 8005628:	e004      	b.n	8005634 <HAL_UART_IRQHandler+0x280>
      return;
 800562a:	bf00      	nop
 800562c:	e002      	b.n	8005634 <HAL_UART_IRQHandler+0x280>
    return;
 800562e:	bf00      	nop
 8005630:	e000      	b.n	8005634 <HAL_UART_IRQHandler+0x280>
    return;
 8005632:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005634:	3720      	adds	r7, #32
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	08005f95 	.word	0x08005f95

08005640 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005668:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800566c:	b08a      	sub	sp, #40	; 0x28
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005672:	2300      	movs	r3, #0
 8005674:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005676:	2300      	movs	r3, #0
 8005678:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800567a:	2300      	movs	r3, #0
 800567c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	689a      	ldr	r2, [r3, #8]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	431a      	orrs	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	431a      	orrs	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	4313      	orrs	r3, r2
 8005694:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	4bbc      	ldr	r3, [pc, #752]	; (8005990 <UART_SetConfig+0x328>)
 800569e:	4013      	ands	r3, r2
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6812      	ldr	r2, [r2, #0]
 80056a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056a6:	430b      	orrs	r3, r1
 80056a8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68da      	ldr	r2, [r3, #12]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4ab2      	ldr	r2, [pc, #712]	; (8005994 <UART_SetConfig+0x32c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d004      	beq.n	80056da <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056d6:	4313      	orrs	r3, r2
 80056d8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ea:	430a      	orrs	r2, r1
 80056ec:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4aa9      	ldr	r2, [pc, #676]	; (8005998 <UART_SetConfig+0x330>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d126      	bne.n	8005746 <UART_SetConfig+0xde>
 80056f8:	4ba8      	ldr	r3, [pc, #672]	; (800599c <UART_SetConfig+0x334>)
 80056fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	2b03      	cmp	r3, #3
 8005704:	d81a      	bhi.n	800573c <UART_SetConfig+0xd4>
 8005706:	a201      	add	r2, pc, #4	; (adr r2, 800570c <UART_SetConfig+0xa4>)
 8005708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570c:	0800571d 	.word	0x0800571d
 8005710:	0800572d 	.word	0x0800572d
 8005714:	08005725 	.word	0x08005725
 8005718:	08005735 	.word	0x08005735
 800571c:	2301      	movs	r3, #1
 800571e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005722:	e0ab      	b.n	800587c <UART_SetConfig+0x214>
 8005724:	2302      	movs	r3, #2
 8005726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800572a:	e0a7      	b.n	800587c <UART_SetConfig+0x214>
 800572c:	2304      	movs	r3, #4
 800572e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005732:	e0a3      	b.n	800587c <UART_SetConfig+0x214>
 8005734:	2308      	movs	r3, #8
 8005736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800573a:	e09f      	b.n	800587c <UART_SetConfig+0x214>
 800573c:	2310      	movs	r3, #16
 800573e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005742:	bf00      	nop
 8005744:	e09a      	b.n	800587c <UART_SetConfig+0x214>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a95      	ldr	r2, [pc, #596]	; (80059a0 <UART_SetConfig+0x338>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d138      	bne.n	80057c2 <UART_SetConfig+0x15a>
 8005750:	4b92      	ldr	r3, [pc, #584]	; (800599c <UART_SetConfig+0x334>)
 8005752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005756:	f003 030c 	and.w	r3, r3, #12
 800575a:	2b0c      	cmp	r3, #12
 800575c:	d82c      	bhi.n	80057b8 <UART_SetConfig+0x150>
 800575e:	a201      	add	r2, pc, #4	; (adr r2, 8005764 <UART_SetConfig+0xfc>)
 8005760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005764:	08005799 	.word	0x08005799
 8005768:	080057b9 	.word	0x080057b9
 800576c:	080057b9 	.word	0x080057b9
 8005770:	080057b9 	.word	0x080057b9
 8005774:	080057a9 	.word	0x080057a9
 8005778:	080057b9 	.word	0x080057b9
 800577c:	080057b9 	.word	0x080057b9
 8005780:	080057b9 	.word	0x080057b9
 8005784:	080057a1 	.word	0x080057a1
 8005788:	080057b9 	.word	0x080057b9
 800578c:	080057b9 	.word	0x080057b9
 8005790:	080057b9 	.word	0x080057b9
 8005794:	080057b1 	.word	0x080057b1
 8005798:	2300      	movs	r3, #0
 800579a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800579e:	e06d      	b.n	800587c <UART_SetConfig+0x214>
 80057a0:	2302      	movs	r3, #2
 80057a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057a6:	e069      	b.n	800587c <UART_SetConfig+0x214>
 80057a8:	2304      	movs	r3, #4
 80057aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ae:	e065      	b.n	800587c <UART_SetConfig+0x214>
 80057b0:	2308      	movs	r3, #8
 80057b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057b6:	e061      	b.n	800587c <UART_SetConfig+0x214>
 80057b8:	2310      	movs	r3, #16
 80057ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057be:	bf00      	nop
 80057c0:	e05c      	b.n	800587c <UART_SetConfig+0x214>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a77      	ldr	r2, [pc, #476]	; (80059a4 <UART_SetConfig+0x33c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d125      	bne.n	8005818 <UART_SetConfig+0x1b0>
 80057cc:	4b73      	ldr	r3, [pc, #460]	; (800599c <UART_SetConfig+0x334>)
 80057ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80057d6:	2b10      	cmp	r3, #16
 80057d8:	d011      	beq.n	80057fe <UART_SetConfig+0x196>
 80057da:	2b10      	cmp	r3, #16
 80057dc:	d802      	bhi.n	80057e4 <UART_SetConfig+0x17c>
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d005      	beq.n	80057ee <UART_SetConfig+0x186>
 80057e2:	e014      	b.n	800580e <UART_SetConfig+0x1a6>
 80057e4:	2b20      	cmp	r3, #32
 80057e6:	d006      	beq.n	80057f6 <UART_SetConfig+0x18e>
 80057e8:	2b30      	cmp	r3, #48	; 0x30
 80057ea:	d00c      	beq.n	8005806 <UART_SetConfig+0x19e>
 80057ec:	e00f      	b.n	800580e <UART_SetConfig+0x1a6>
 80057ee:	2300      	movs	r3, #0
 80057f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057f4:	e042      	b.n	800587c <UART_SetConfig+0x214>
 80057f6:	2302      	movs	r3, #2
 80057f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057fc:	e03e      	b.n	800587c <UART_SetConfig+0x214>
 80057fe:	2304      	movs	r3, #4
 8005800:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005804:	e03a      	b.n	800587c <UART_SetConfig+0x214>
 8005806:	2308      	movs	r3, #8
 8005808:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800580c:	e036      	b.n	800587c <UART_SetConfig+0x214>
 800580e:	2310      	movs	r3, #16
 8005810:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005814:	bf00      	nop
 8005816:	e031      	b.n	800587c <UART_SetConfig+0x214>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a5d      	ldr	r2, [pc, #372]	; (8005994 <UART_SetConfig+0x32c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d129      	bne.n	8005876 <UART_SetConfig+0x20e>
 8005822:	4b5e      	ldr	r3, [pc, #376]	; (800599c <UART_SetConfig+0x334>)
 8005824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005828:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800582c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005830:	d014      	beq.n	800585c <UART_SetConfig+0x1f4>
 8005832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005836:	d802      	bhi.n	800583e <UART_SetConfig+0x1d6>
 8005838:	2b00      	cmp	r3, #0
 800583a:	d007      	beq.n	800584c <UART_SetConfig+0x1e4>
 800583c:	e016      	b.n	800586c <UART_SetConfig+0x204>
 800583e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005842:	d007      	beq.n	8005854 <UART_SetConfig+0x1ec>
 8005844:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005848:	d00c      	beq.n	8005864 <UART_SetConfig+0x1fc>
 800584a:	e00f      	b.n	800586c <UART_SetConfig+0x204>
 800584c:	2300      	movs	r3, #0
 800584e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005852:	e013      	b.n	800587c <UART_SetConfig+0x214>
 8005854:	2302      	movs	r3, #2
 8005856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800585a:	e00f      	b.n	800587c <UART_SetConfig+0x214>
 800585c:	2304      	movs	r3, #4
 800585e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005862:	e00b      	b.n	800587c <UART_SetConfig+0x214>
 8005864:	2308      	movs	r3, #8
 8005866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800586a:	e007      	b.n	800587c <UART_SetConfig+0x214>
 800586c:	2310      	movs	r3, #16
 800586e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005872:	bf00      	nop
 8005874:	e002      	b.n	800587c <UART_SetConfig+0x214>
 8005876:	2310      	movs	r3, #16
 8005878:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a44      	ldr	r2, [pc, #272]	; (8005994 <UART_SetConfig+0x32c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	f040 80fb 	bne.w	8005a7e <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005888:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800588c:	2b08      	cmp	r3, #8
 800588e:	d824      	bhi.n	80058da <UART_SetConfig+0x272>
 8005890:	a201      	add	r2, pc, #4	; (adr r2, 8005898 <UART_SetConfig+0x230>)
 8005892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005896:	bf00      	nop
 8005898:	080058bd 	.word	0x080058bd
 800589c:	080058db 	.word	0x080058db
 80058a0:	080058c5 	.word	0x080058c5
 80058a4:	080058db 	.word	0x080058db
 80058a8:	080058cb 	.word	0x080058cb
 80058ac:	080058db 	.word	0x080058db
 80058b0:	080058db 	.word	0x080058db
 80058b4:	080058db 	.word	0x080058db
 80058b8:	080058d3 	.word	0x080058d3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80058bc:	f7fe fd58 	bl	8004370 <HAL_RCC_GetPCLK1Freq>
 80058c0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80058c2:	e00d      	b.n	80058e0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80058c4:	4b38      	ldr	r3, [pc, #224]	; (80059a8 <UART_SetConfig+0x340>)
 80058c6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80058c8:	e00a      	b.n	80058e0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80058ca:	f7fe fcbb 	bl	8004244 <HAL_RCC_GetSysClockFreq>
 80058ce:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80058d0:	e006      	b.n	80058e0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80058d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058d6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80058d8:	e002      	b.n	80058e0 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	76fb      	strb	r3, [r7, #27]
        break;
 80058de:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 81c8 	beq.w	8005c78 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	4613      	mov	r3, r2
 80058ee:	005b      	lsls	r3, r3, #1
 80058f0:	4413      	add	r3, r2
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d305      	bcc.n	8005904 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	429a      	cmp	r2, r3
 8005902:	d902      	bls.n	800590a <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	76fb      	strb	r3, [r7, #27]
 8005908:	e1b6      	b.n	8005c78 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 800590a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800590e:	2b08      	cmp	r3, #8
 8005910:	f200 80a2 	bhi.w	8005a58 <UART_SetConfig+0x3f0>
 8005914:	a201      	add	r2, pc, #4	; (adr r2, 800591c <UART_SetConfig+0x2b4>)
 8005916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591a:	bf00      	nop
 800591c:	08005941 	.word	0x08005941
 8005920:	08005a59 	.word	0x08005a59
 8005924:	080059ad 	.word	0x080059ad
 8005928:	08005a59 	.word	0x08005a59
 800592c:	080059e1 	.word	0x080059e1
 8005930:	08005a59 	.word	0x08005a59
 8005934:	08005a59 	.word	0x08005a59
 8005938:	08005a59 	.word	0x08005a59
 800593c:	08005a2f 	.word	0x08005a2f
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005940:	f7fe fd16 	bl	8004370 <HAL_RCC_GetPCLK1Freq>
 8005944:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	4619      	mov	r1, r3
 800594a:	f04f 0200 	mov.w	r2, #0
 800594e:	f04f 0300 	mov.w	r3, #0
 8005952:	f04f 0400 	mov.w	r4, #0
 8005956:	0214      	lsls	r4, r2, #8
 8005958:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800595c:	020b      	lsls	r3, r1, #8
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	6852      	ldr	r2, [r2, #4]
 8005962:	0852      	lsrs	r2, r2, #1
 8005964:	4611      	mov	r1, r2
 8005966:	f04f 0200 	mov.w	r2, #0
 800596a:	eb13 0b01 	adds.w	fp, r3, r1
 800596e:	eb44 0c02 	adc.w	ip, r4, r2
 8005972:	4658      	mov	r0, fp
 8005974:	4661      	mov	r1, ip
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f04f 0400 	mov.w	r4, #0
 800597e:	461a      	mov	r2, r3
 8005980:	4623      	mov	r3, r4
 8005982:	f7fa fe69 	bl	8000658 <__aeabi_uldivmod>
 8005986:	4603      	mov	r3, r0
 8005988:	460c      	mov	r4, r1
 800598a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800598c:	e067      	b.n	8005a5e <UART_SetConfig+0x3f6>
 800598e:	bf00      	nop
 8005990:	efff69f3 	.word	0xefff69f3
 8005994:	40008000 	.word	0x40008000
 8005998:	40013800 	.word	0x40013800
 800599c:	40021000 	.word	0x40021000
 80059a0:	40004400 	.word	0x40004400
 80059a4:	40004800 	.word	0x40004800
 80059a8:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	085b      	lsrs	r3, r3, #1
 80059b2:	f04f 0400 	mov.w	r4, #0
 80059b6:	49ae      	ldr	r1, [pc, #696]	; (8005c70 <UART_SetConfig+0x608>)
 80059b8:	f04f 0200 	mov.w	r2, #0
 80059bc:	eb13 0b01 	adds.w	fp, r3, r1
 80059c0:	eb44 0c02 	adc.w	ip, r4, r2
 80059c4:	4658      	mov	r0, fp
 80059c6:	4661      	mov	r1, ip
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f04f 0400 	mov.w	r4, #0
 80059d0:	461a      	mov	r2, r3
 80059d2:	4623      	mov	r3, r4
 80059d4:	f7fa fe40 	bl	8000658 <__aeabi_uldivmod>
 80059d8:	4603      	mov	r3, r0
 80059da:	460c      	mov	r4, r1
 80059dc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80059de:	e03e      	b.n	8005a5e <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80059e0:	f7fe fc30 	bl	8004244 <HAL_RCC_GetSysClockFreq>
 80059e4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	4619      	mov	r1, r3
 80059ea:	f04f 0200 	mov.w	r2, #0
 80059ee:	f04f 0300 	mov.w	r3, #0
 80059f2:	f04f 0400 	mov.w	r4, #0
 80059f6:	0214      	lsls	r4, r2, #8
 80059f8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80059fc:	020b      	lsls	r3, r1, #8
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	6852      	ldr	r2, [r2, #4]
 8005a02:	0852      	lsrs	r2, r2, #1
 8005a04:	4611      	mov	r1, r2
 8005a06:	f04f 0200 	mov.w	r2, #0
 8005a0a:	eb13 0b01 	adds.w	fp, r3, r1
 8005a0e:	eb44 0c02 	adc.w	ip, r4, r2
 8005a12:	4658      	mov	r0, fp
 8005a14:	4661      	mov	r1, ip
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f04f 0400 	mov.w	r4, #0
 8005a1e:	461a      	mov	r2, r3
 8005a20:	4623      	mov	r3, r4
 8005a22:	f7fa fe19 	bl	8000658 <__aeabi_uldivmod>
 8005a26:	4603      	mov	r3, r0
 8005a28:	460c      	mov	r4, r1
 8005a2a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005a2c:	e017      	b.n	8005a5e <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	085b      	lsrs	r3, r3, #1
 8005a34:	f04f 0400 	mov.w	r4, #0
 8005a38:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8005a3c:	f144 0100 	adc.w	r1, r4, #0
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f04f 0400 	mov.w	r4, #0
 8005a48:	461a      	mov	r2, r3
 8005a4a:	4623      	mov	r3, r4
 8005a4c:	f7fa fe04 	bl	8000658 <__aeabi_uldivmod>
 8005a50:	4603      	mov	r3, r0
 8005a52:	460c      	mov	r4, r1
 8005a54:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005a56:	e002      	b.n	8005a5e <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	76fb      	strb	r3, [r7, #27]
            break;
 8005a5c:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a64:	d308      	bcc.n	8005a78 <UART_SetConfig+0x410>
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a6c:	d204      	bcs.n	8005a78 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	69fa      	ldr	r2, [r7, #28]
 8005a74:	60da      	str	r2, [r3, #12]
 8005a76:	e0ff      	b.n	8005c78 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	76fb      	strb	r3, [r7, #27]
 8005a7c:	e0fc      	b.n	8005c78 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a86:	f040 8083 	bne.w	8005b90 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 8005a8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a8e:	2b08      	cmp	r3, #8
 8005a90:	d85e      	bhi.n	8005b50 <UART_SetConfig+0x4e8>
 8005a92:	a201      	add	r2, pc, #4	; (adr r2, 8005a98 <UART_SetConfig+0x430>)
 8005a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a98:	08005abd 	.word	0x08005abd
 8005a9c:	08005add 	.word	0x08005add
 8005aa0:	08005afd 	.word	0x08005afd
 8005aa4:	08005b51 	.word	0x08005b51
 8005aa8:	08005b19 	.word	0x08005b19
 8005aac:	08005b51 	.word	0x08005b51
 8005ab0:	08005b51 	.word	0x08005b51
 8005ab4:	08005b51 	.word	0x08005b51
 8005ab8:	08005b39 	.word	0x08005b39
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005abc:	f7fe fc58 	bl	8004370 <HAL_RCC_GetPCLK1Freq>
 8005ac0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	005a      	lsls	r2, r3, #1
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	085b      	lsrs	r3, r3, #1
 8005acc:	441a      	add	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ada:	e03c      	b.n	8005b56 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005adc:	f7fe fc5e 	bl	800439c <HAL_RCC_GetPCLK2Freq>
 8005ae0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	005a      	lsls	r2, r3, #1
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	085b      	lsrs	r3, r3, #1
 8005aec:	441a      	add	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005afa:	e02c      	b.n	8005b56 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	085b      	lsrs	r3, r3, #1
 8005b02:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005b06:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	6852      	ldr	r2, [r2, #4]
 8005b0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005b16:	e01e      	b.n	8005b56 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b18:	f7fe fb94 	bl	8004244 <HAL_RCC_GetSysClockFreq>
 8005b1c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	005a      	lsls	r2, r3, #1
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	085b      	lsrs	r3, r3, #1
 8005b28:	441a      	add	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005b36:	e00e      	b.n	8005b56 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	085b      	lsrs	r3, r3, #1
 8005b3e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005b4e:	e002      	b.n	8005b56 <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	76fb      	strb	r3, [r7, #27]
        break;
 8005b54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	2b0f      	cmp	r3, #15
 8005b5a:	d916      	bls.n	8005b8a <UART_SetConfig+0x522>
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b62:	d212      	bcs.n	8005b8a <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	f023 030f 	bic.w	r3, r3, #15
 8005b6c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	085b      	lsrs	r3, r3, #1
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	f003 0307 	and.w	r3, r3, #7
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	89fb      	ldrh	r3, [r7, #14]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	89fa      	ldrh	r2, [r7, #14]
 8005b86:	60da      	str	r2, [r3, #12]
 8005b88:	e076      	b.n	8005c78 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	76fb      	strb	r3, [r7, #27]
 8005b8e:	e073      	b.n	8005c78 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 8005b90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d85c      	bhi.n	8005c52 <UART_SetConfig+0x5ea>
 8005b98:	a201      	add	r2, pc, #4	; (adr r2, 8005ba0 <UART_SetConfig+0x538>)
 8005b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9e:	bf00      	nop
 8005ba0:	08005bc5 	.word	0x08005bc5
 8005ba4:	08005be3 	.word	0x08005be3
 8005ba8:	08005c01 	.word	0x08005c01
 8005bac:	08005c53 	.word	0x08005c53
 8005bb0:	08005c1d 	.word	0x08005c1d
 8005bb4:	08005c53 	.word	0x08005c53
 8005bb8:	08005c53 	.word	0x08005c53
 8005bbc:	08005c53 	.word	0x08005c53
 8005bc0:	08005c3b 	.word	0x08005c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bc4:	f7fe fbd4 	bl	8004370 <HAL_RCC_GetPCLK1Freq>
 8005bc8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	085a      	lsrs	r2, r3, #1
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	441a      	add	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005be0:	e03a      	b.n	8005c58 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005be2:	f7fe fbdb 	bl	800439c <HAL_RCC_GetPCLK2Freq>
 8005be6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	085a      	lsrs	r2, r3, #1
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	441a      	add	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005bfe:	e02b      	b.n	8005c58 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	085b      	lsrs	r3, r3, #1
 8005c06:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005c0a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	6852      	ldr	r2, [r2, #4]
 8005c12:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005c1a:	e01d      	b.n	8005c58 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c1c:	f7fe fb12 	bl	8004244 <HAL_RCC_GetSysClockFreq>
 8005c20:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	085a      	lsrs	r2, r3, #1
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	441a      	add	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005c38:	e00e      	b.n	8005c58 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	085b      	lsrs	r3, r3, #1
 8005c40:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005c50:	e002      	b.n	8005c58 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	76fb      	strb	r3, [r7, #27]
        break;
 8005c56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	2b0f      	cmp	r3, #15
 8005c5c:	d90a      	bls.n	8005c74 <UART_SetConfig+0x60c>
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c64:	d206      	bcs.n	8005c74 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69fa      	ldr	r2, [r7, #28]
 8005c6c:	60da      	str	r2, [r3, #12]
 8005c6e:	e003      	b.n	8005c78 <UART_SetConfig+0x610>
 8005c70:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005c84:	7efb      	ldrb	r3, [r7, #27]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3728      	adds	r7, #40	; 0x28
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08005c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00a      	beq.n	8005cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00a      	beq.n	8005cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	f003 0304 	and.w	r3, r3, #4
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00a      	beq.n	8005cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	f003 0308 	and.w	r3, r3, #8
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00a      	beq.n	8005d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d24:	f003 0310 	and.w	r3, r3, #16
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00a      	beq.n	8005d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	f003 0320 	and.w	r3, r3, #32
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00a      	beq.n	8005d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01a      	beq.n	8005da6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d8e:	d10a      	bne.n	8005da6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00a      	beq.n	8005dc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	605a      	str	r2, [r3, #4]
  }
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af02      	add	r7, sp, #8
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005de2:	f7fc f8e7 	bl	8001fb4 <HAL_GetTick>
 8005de6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0308 	and.w	r3, r3, #8
 8005df2:	2b08      	cmp	r3, #8
 8005df4:	d10e      	bne.n	8005e14 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005df6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f82a 	bl	8005e5e <UART_WaitOnFlagUntilTimeout>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e020      	b.n	8005e56 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0304 	and.w	r3, r3, #4
 8005e1e:	2b04      	cmp	r3, #4
 8005e20:	d10e      	bne.n	8005e40 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f814 	bl	8005e5e <UART_WaitOnFlagUntilTimeout>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e00a      	b.n	8005e56 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2220      	movs	r2, #32
 8005e44:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2220      	movs	r2, #32
 8005e4a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b084      	sub	sp, #16
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	60f8      	str	r0, [r7, #12]
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	603b      	str	r3, [r7, #0]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e6e:	e05d      	b.n	8005f2c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e76:	d059      	beq.n	8005f2c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e78:	f7fc f89c 	bl	8001fb4 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d302      	bcc.n	8005e8e <UART_WaitOnFlagUntilTimeout+0x30>
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d11b      	bne.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e9c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	689a      	ldr	r2, [r3, #8]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0201 	bic.w	r2, r2, #1
 8005eac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e042      	b.n	8005f4c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d02b      	beq.n	8005f2c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ee2:	d123      	bne.n	8005f2c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005eec:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005efc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0201 	bic.w	r2, r2, #1
 8005f0c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2220      	movs	r2, #32
 8005f12:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2220      	movs	r2, #32
 8005f18:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e00f      	b.n	8005f4c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	69da      	ldr	r2, [r3, #28]
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	4013      	ands	r3, r2
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	bf0c      	ite	eq
 8005f3c:	2301      	moveq	r3, #1
 8005f3e:	2300      	movne	r3, #0
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	461a      	mov	r2, r3
 8005f44:	79fb      	ldrb	r3, [r7, #7]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d092      	beq.n	8005e70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f6a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 0201 	bic.w	r2, r2, #1
 8005f7a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f7ff fb4e 	bl	8005654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fb8:	bf00      	nop
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fd6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7ff fb2b 	bl	8005640 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fea:	bf00      	nop
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b084      	sub	sp, #16
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006000:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006006:	2b22      	cmp	r3, #34	; 0x22
 8006008:	d13a      	bne.n	8006080 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006010:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006012:	89bb      	ldrh	r3, [r7, #12]
 8006014:	b2d9      	uxtb	r1, r3
 8006016:	89fb      	ldrh	r3, [r7, #14]
 8006018:	b2da      	uxtb	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601e:	400a      	ands	r2, r1
 8006020:	b2d2      	uxtb	r2, r2
 8006022:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006028:	1c5a      	adds	r2, r3, #1
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006034:	b29b      	uxth	r3, r3
 8006036:	3b01      	subs	r3, #1
 8006038:	b29a      	uxth	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	d123      	bne.n	8006094 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800605a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	689a      	ldr	r2, [r3, #8]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0201 	bic.w	r2, r2, #1
 800606a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2220      	movs	r2, #32
 8006070:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f7fb fd37 	bl	8001aec <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800607e:	e009      	b.n	8006094 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	8b1b      	ldrh	r3, [r3, #24]
 8006086:	b29a      	uxth	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f042 0208 	orr.w	r2, r2, #8
 8006090:	b292      	uxth	r2, r2
 8006092:	831a      	strh	r2, [r3, #24]
}
 8006094:	bf00      	nop
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060aa:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060b0:	2b22      	cmp	r3, #34	; 0x22
 80060b2:	d13a      	bne.n	800612a <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80060ba:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80060c2:	89ba      	ldrh	r2, [r7, #12]
 80060c4:	89fb      	ldrh	r3, [r7, #14]
 80060c6:	4013      	ands	r3, r2
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d2:	1c9a      	adds	r2, r3, #2
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d123      	bne.n	800613e <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006104:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 0201 	bic.w	r2, r2, #1
 8006114:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2220      	movs	r2, #32
 800611a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7fb fce2 	bl	8001aec <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006128:	e009      	b.n	800613e <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	8b1b      	ldrh	r3, [r3, #24]
 8006130:	b29a      	uxth	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0208 	orr.w	r2, r2, #8
 800613a:	b292      	uxth	r2, r2
 800613c:	831a      	strh	r2, [r3, #24]
}
 800613e:	bf00      	nop
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800614e:	bf00      	nop
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800615a:	b084      	sub	sp, #16
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	f107 0014 	add.w	r0, r7, #20
 8006168:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	b004      	add	sp, #16
 800617a:	4770      	bx	lr

0800617c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006184:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006188:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006190:	b29a      	uxth	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	b29b      	uxth	r3, r3
 8006196:	4313      	orrs	r3, r2
 8006198:	b29a      	uxth	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b085      	sub	sp, #20
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80061b6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80061ba:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	43db      	mvns	r3, r3
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	4013      	ands	r3, r2
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	460b      	mov	r3, r1
 80061ee:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80061fe:	b084      	sub	sp, #16
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	f107 0014 	add.w	r0, r7, #20
 800620c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7ff ffa3 	bl	800617c <USB_EnableGlobalInt>

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006242:	b004      	add	sp, #16
 8006244:	4770      	bx	lr
	...

08006248 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006248:	b490      	push	{r4, r7}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	b29b      	uxth	r3, r3
 8006264:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626c:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	78db      	ldrb	r3, [r3, #3]
 8006272:	2b03      	cmp	r3, #3
 8006274:	d819      	bhi.n	80062aa <USB_ActivateEndpoint+0x62>
 8006276:	a201      	add	r2, pc, #4	; (adr r2, 800627c <USB_ActivateEndpoint+0x34>)
 8006278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627c:	0800628d 	.word	0x0800628d
 8006280:	080062a1 	.word	0x080062a1
 8006284:	080062b1 	.word	0x080062b1
 8006288:	08006297 	.word	0x08006297
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800628c:	89bb      	ldrh	r3, [r7, #12]
 800628e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006292:	81bb      	strh	r3, [r7, #12]
      break;
 8006294:	e00d      	b.n	80062b2 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006296:	89bb      	ldrh	r3, [r7, #12]
 8006298:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800629c:	81bb      	strh	r3, [r7, #12]
      break;
 800629e:	e008      	b.n	80062b2 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80062a0:	89bb      	ldrh	r3, [r7, #12]
 80062a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062a6:	81bb      	strh	r3, [r7, #12]
      break;
 80062a8:	e003      	b.n	80062b2 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	73fb      	strb	r3, [r7, #15]
      break;
 80062ae:	e000      	b.n	80062b2 <USB_ActivateEndpoint+0x6a>
      break;
 80062b0:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	441a      	add	r2, r3
 80062bc:	89bb      	ldrh	r3, [r7, #12]
 80062be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	b29b      	uxth	r3, r3
 80062e0:	b21b      	sxth	r3, r3
 80062e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ea:	b21a      	sxth	r2, r3
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	b21b      	sxth	r3, r3
 80062f2:	4313      	orrs	r3, r2
 80062f4:	b21b      	sxth	r3, r3
 80062f6:	b29c      	uxth	r4, r3
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	441a      	add	r2, r3
 8006302:	4b8a      	ldr	r3, [pc, #552]	; (800652c <USB_ActivateEndpoint+0x2e4>)
 8006304:	4323      	orrs	r3, r4
 8006306:	b29b      	uxth	r3, r3
 8006308:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	7b1b      	ldrb	r3, [r3, #12]
 800630e:	2b00      	cmp	r3, #0
 8006310:	f040 8112 	bne.w	8006538 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	785b      	ldrb	r3, [r3, #1]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d067      	beq.n	80063ec <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800631c:	687c      	ldr	r4, [r7, #4]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006324:	b29b      	uxth	r3, r3
 8006326:	441c      	add	r4, r3
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	4423      	add	r3, r4
 8006330:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006334:	461c      	mov	r4, r3
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	88db      	ldrh	r3, [r3, #6]
 800633a:	085b      	lsrs	r3, r3, #1
 800633c:	b29b      	uxth	r3, r3
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	b29b      	uxth	r3, r3
 8006342:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4413      	add	r3, r2
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	b29c      	uxth	r4, r3
 8006352:	4623      	mov	r3, r4
 8006354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006358:	2b00      	cmp	r3, #0
 800635a:	d014      	beq.n	8006386 <USB_ActivateEndpoint+0x13e>
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	b29b      	uxth	r3, r3
 800636a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800636e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006372:	b29c      	uxth	r4, r3
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	441a      	add	r2, r3
 800637e:	4b6c      	ldr	r3, [pc, #432]	; (8006530 <USB_ActivateEndpoint+0x2e8>)
 8006380:	4323      	orrs	r3, r4
 8006382:	b29b      	uxth	r3, r3
 8006384:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	78db      	ldrb	r3, [r3, #3]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d018      	beq.n	80063c0 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	b29b      	uxth	r3, r3
 800639c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063a4:	b29c      	uxth	r4, r3
 80063a6:	f084 0320 	eor.w	r3, r4, #32
 80063aa:	b29c      	uxth	r4, r3
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	441a      	add	r2, r3
 80063b6:	4b5d      	ldr	r3, [pc, #372]	; (800652c <USB_ActivateEndpoint+0x2e4>)
 80063b8:	4323      	orrs	r3, r4
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	8013      	strh	r3, [r2, #0]
 80063be:	e22b      	b.n	8006818 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	881b      	ldrh	r3, [r3, #0]
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063d6:	b29c      	uxth	r4, r3
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	441a      	add	r2, r3
 80063e2:	4b52      	ldr	r3, [pc, #328]	; (800652c <USB_ActivateEndpoint+0x2e4>)
 80063e4:	4323      	orrs	r3, r4
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	8013      	strh	r3, [r2, #0]
 80063ea:	e215      	b.n	8006818 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80063ec:	687c      	ldr	r4, [r7, #4]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	441c      	add	r4, r3
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	4423      	add	r3, r4
 8006400:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006404:	461c      	mov	r4, r3
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	88db      	ldrh	r3, [r3, #6]
 800640a:	085b      	lsrs	r3, r3, #1
 800640c:	b29b      	uxth	r3, r3
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	b29b      	uxth	r3, r3
 8006412:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006414:	687c      	ldr	r4, [r7, #4]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800641c:	b29b      	uxth	r3, r3
 800641e:	441c      	add	r4, r3
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	4423      	add	r3, r4
 8006428:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800642c:	461c      	mov	r4, r3
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10e      	bne.n	8006454 <USB_ActivateEndpoint+0x20c>
 8006436:	8823      	ldrh	r3, [r4, #0]
 8006438:	b29b      	uxth	r3, r3
 800643a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800643e:	b29b      	uxth	r3, r3
 8006440:	8023      	strh	r3, [r4, #0]
 8006442:	8823      	ldrh	r3, [r4, #0]
 8006444:	b29b      	uxth	r3, r3
 8006446:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800644a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800644e:	b29b      	uxth	r3, r3
 8006450:	8023      	strh	r3, [r4, #0]
 8006452:	e02d      	b.n	80064b0 <USB_ActivateEndpoint+0x268>
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	2b3e      	cmp	r3, #62	; 0x3e
 800645a:	d812      	bhi.n	8006482 <USB_ActivateEndpoint+0x23a>
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	085b      	lsrs	r3, r3, #1
 8006462:	60bb      	str	r3, [r7, #8]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <USB_ActivateEndpoint+0x22e>
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	3301      	adds	r3, #1
 8006474:	60bb      	str	r3, [r7, #8]
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	b29b      	uxth	r3, r3
 800647a:	029b      	lsls	r3, r3, #10
 800647c:	b29b      	uxth	r3, r3
 800647e:	8023      	strh	r3, [r4, #0]
 8006480:	e016      	b.n	80064b0 <USB_ActivateEndpoint+0x268>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	095b      	lsrs	r3, r3, #5
 8006488:	60bb      	str	r3, [r7, #8]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	f003 031f 	and.w	r3, r3, #31
 8006492:	2b00      	cmp	r3, #0
 8006494:	d102      	bne.n	800649c <USB_ActivateEndpoint+0x254>
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	3b01      	subs	r3, #1
 800649a:	60bb      	str	r3, [r7, #8]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	b29b      	uxth	r3, r3
 80064a0:	029b      	lsls	r3, r3, #10
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	b29c      	uxth	r4, r3
 80064be:	4623      	mov	r3, r4
 80064c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d014      	beq.n	80064f2 <USB_ActivateEndpoint+0x2aa>
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064de:	b29c      	uxth	r4, r3
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	441a      	add	r2, r3
 80064ea:	4b12      	ldr	r3, [pc, #72]	; (8006534 <USB_ActivateEndpoint+0x2ec>)
 80064ec:	4323      	orrs	r3, r4
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006508:	b29c      	uxth	r4, r3
 800650a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800650e:	b29c      	uxth	r4, r3
 8006510:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006514:	b29c      	uxth	r4, r3
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	441a      	add	r2, r3
 8006520:	4b02      	ldr	r3, [pc, #8]	; (800652c <USB_ActivateEndpoint+0x2e4>)
 8006522:	4323      	orrs	r3, r4
 8006524:	b29b      	uxth	r3, r3
 8006526:	8013      	strh	r3, [r2, #0]
 8006528:	e176      	b.n	8006818 <USB_ActivateEndpoint+0x5d0>
 800652a:	bf00      	nop
 800652c:	ffff8080 	.word	0xffff8080
 8006530:	ffff80c0 	.word	0xffff80c0
 8006534:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	b29b      	uxth	r3, r3
 8006546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800654a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800654e:	b29c      	uxth	r4, r3
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	441a      	add	r2, r3
 800655a:	4b96      	ldr	r3, [pc, #600]	; (80067b4 <USB_ActivateEndpoint+0x56c>)
 800655c:	4323      	orrs	r3, r4
 800655e:	b29b      	uxth	r3, r3
 8006560:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006562:	687c      	ldr	r4, [r7, #4]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800656a:	b29b      	uxth	r3, r3
 800656c:	441c      	add	r4, r3
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	00db      	lsls	r3, r3, #3
 8006574:	4423      	add	r3, r4
 8006576:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800657a:	461c      	mov	r4, r3
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	891b      	ldrh	r3, [r3, #8]
 8006580:	085b      	lsrs	r3, r3, #1
 8006582:	b29b      	uxth	r3, r3
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	b29b      	uxth	r3, r3
 8006588:	8023      	strh	r3, [r4, #0]
 800658a:	687c      	ldr	r4, [r7, #4]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006592:	b29b      	uxth	r3, r3
 8006594:	441c      	add	r4, r3
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	00db      	lsls	r3, r3, #3
 800659c:	4423      	add	r3, r4
 800659e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065a2:	461c      	mov	r4, r3
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	895b      	ldrh	r3, [r3, #10]
 80065a8:	085b      	lsrs	r3, r3, #1
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	005b      	lsls	r3, r3, #1
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	785b      	ldrb	r3, [r3, #1]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f040 8088 	bne.w	80066cc <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	881b      	ldrh	r3, [r3, #0]
 80065c8:	b29c      	uxth	r4, r3
 80065ca:	4623      	mov	r3, r4
 80065cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d014      	beq.n	80065fe <USB_ActivateEndpoint+0x3b6>
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	881b      	ldrh	r3, [r3, #0]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ea:	b29c      	uxth	r4, r3
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	441a      	add	r2, r3
 80065f6:	4b70      	ldr	r3, [pc, #448]	; (80067b8 <USB_ActivateEndpoint+0x570>)
 80065f8:	4323      	orrs	r3, r4
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	b29c      	uxth	r4, r3
 800660c:	4623      	mov	r3, r4
 800660e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006612:	2b00      	cmp	r3, #0
 8006614:	d014      	beq.n	8006640 <USB_ActivateEndpoint+0x3f8>
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	b29b      	uxth	r3, r3
 8006624:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662c:	b29c      	uxth	r4, r3
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	441a      	add	r2, r3
 8006638:	4b60      	ldr	r3, [pc, #384]	; (80067bc <USB_ActivateEndpoint+0x574>)
 800663a:	4323      	orrs	r3, r4
 800663c:	b29b      	uxth	r3, r3
 800663e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	881b      	ldrh	r3, [r3, #0]
 800664c:	b29b      	uxth	r3, r3
 800664e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006656:	b29c      	uxth	r4, r3
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	441a      	add	r2, r3
 8006662:	4b56      	ldr	r3, [pc, #344]	; (80067bc <USB_ActivateEndpoint+0x574>)
 8006664:	4323      	orrs	r3, r4
 8006666:	b29b      	uxth	r3, r3
 8006668:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	881b      	ldrh	r3, [r3, #0]
 8006676:	b29b      	uxth	r3, r3
 8006678:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800667c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006680:	b29c      	uxth	r4, r3
 8006682:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006686:	b29c      	uxth	r4, r3
 8006688:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800668c:	b29c      	uxth	r4, r3
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	441a      	add	r2, r3
 8006698:	4b49      	ldr	r3, [pc, #292]	; (80067c0 <USB_ActivateEndpoint+0x578>)
 800669a:	4323      	orrs	r3, r4
 800669c:	b29b      	uxth	r3, r3
 800669e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b6:	b29c      	uxth	r4, r3
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	441a      	add	r2, r3
 80066c2:	4b3f      	ldr	r3, [pc, #252]	; (80067c0 <USB_ActivateEndpoint+0x578>)
 80066c4:	4323      	orrs	r3, r4
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	8013      	strh	r3, [r2, #0]
 80066ca:	e0a5      	b.n	8006818 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	b29c      	uxth	r4, r3
 80066da:	4623      	mov	r3, r4
 80066dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d014      	beq.n	800670e <USB_ActivateEndpoint+0x4c6>
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fa:	b29c      	uxth	r4, r3
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	441a      	add	r2, r3
 8006706:	4b2c      	ldr	r3, [pc, #176]	; (80067b8 <USB_ActivateEndpoint+0x570>)
 8006708:	4323      	orrs	r3, r4
 800670a:	b29b      	uxth	r3, r3
 800670c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	b29c      	uxth	r4, r3
 800671c:	4623      	mov	r3, r4
 800671e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006722:	2b00      	cmp	r3, #0
 8006724:	d014      	beq.n	8006750 <USB_ActivateEndpoint+0x508>
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	b29b      	uxth	r3, r3
 8006734:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673c:	b29c      	uxth	r4, r3
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	441a      	add	r2, r3
 8006748:	4b1c      	ldr	r3, [pc, #112]	; (80067bc <USB_ActivateEndpoint+0x574>)
 800674a:	4323      	orrs	r3, r4
 800674c:	b29b      	uxth	r3, r3
 800674e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	881b      	ldrh	r3, [r3, #0]
 800675c:	b29b      	uxth	r3, r3
 800675e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006766:	b29c      	uxth	r4, r3
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	441a      	add	r2, r3
 8006772:	4b11      	ldr	r3, [pc, #68]	; (80067b8 <USB_ActivateEndpoint+0x570>)
 8006774:	4323      	orrs	r3, r4
 8006776:	b29b      	uxth	r3, r3
 8006778:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	78db      	ldrb	r3, [r3, #3]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d020      	beq.n	80067c4 <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	b29b      	uxth	r3, r3
 8006790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006798:	b29c      	uxth	r4, r3
 800679a:	f084 0320 	eor.w	r3, r4, #32
 800679e:	b29c      	uxth	r4, r3
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	441a      	add	r2, r3
 80067aa:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <USB_ActivateEndpoint+0x578>)
 80067ac:	4323      	orrs	r3, r4
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	8013      	strh	r3, [r2, #0]
 80067b2:	e01c      	b.n	80067ee <USB_ActivateEndpoint+0x5a6>
 80067b4:	ffff8180 	.word	0xffff8180
 80067b8:	ffffc080 	.word	0xffffc080
 80067bc:	ffff80c0 	.word	0xffff80c0
 80067c0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4413      	add	r3, r2
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067da:	b29c      	uxth	r4, r3
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	441a      	add	r2, r3
 80067e6:	4b0f      	ldr	r3, [pc, #60]	; (8006824 <USB_ActivateEndpoint+0x5dc>)
 80067e8:	4323      	orrs	r3, r4
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006804:	b29c      	uxth	r4, r3
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	441a      	add	r2, r3
 8006810:	4b04      	ldr	r3, [pc, #16]	; (8006824 <USB_ActivateEndpoint+0x5dc>)
 8006812:	4323      	orrs	r3, r4
 8006814:	b29b      	uxth	r3, r3
 8006816:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006818:	7bfb      	ldrb	r3, [r7, #15]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bc90      	pop	{r4, r7}
 8006822:	4770      	bx	lr
 8006824:	ffff8080 	.word	0xffff8080

08006828 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006828:	b490      	push	{r4, r7}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	7b1b      	ldrb	r3, [r3, #12]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d171      	bne.n	800691e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	785b      	ldrb	r3, [r3, #1]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d036      	beq.n	80068b0 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	b29c      	uxth	r4, r3
 8006850:	4623      	mov	r3, r4
 8006852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006856:	2b00      	cmp	r3, #0
 8006858:	d014      	beq.n	8006884 <USB_DeactivateEndpoint+0x5c>
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	b29b      	uxth	r3, r3
 8006868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800686c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006870:	b29c      	uxth	r4, r3
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	441a      	add	r2, r3
 800687c:	4b6b      	ldr	r3, [pc, #428]	; (8006a2c <USB_DeactivateEndpoint+0x204>)
 800687e:	4323      	orrs	r3, r4
 8006880:	b29b      	uxth	r3, r3
 8006882:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	b29b      	uxth	r3, r3
 8006892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006896:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800689a:	b29c      	uxth	r4, r3
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	441a      	add	r2, r3
 80068a6:	4b62      	ldr	r3, [pc, #392]	; (8006a30 <USB_DeactivateEndpoint+0x208>)
 80068a8:	4323      	orrs	r3, r4
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	8013      	strh	r3, [r2, #0]
 80068ae:	e144      	b.n	8006b3a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	881b      	ldrh	r3, [r3, #0]
 80068bc:	b29c      	uxth	r4, r3
 80068be:	4623      	mov	r3, r4
 80068c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d014      	beq.n	80068f2 <USB_DeactivateEndpoint+0xca>
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	881b      	ldrh	r3, [r3, #0]
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068de:	b29c      	uxth	r4, r3
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	441a      	add	r2, r3
 80068ea:	4b52      	ldr	r3, [pc, #328]	; (8006a34 <USB_DeactivateEndpoint+0x20c>)
 80068ec:	4323      	orrs	r3, r4
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4413      	add	r3, r2
 80068fc:	881b      	ldrh	r3, [r3, #0]
 80068fe:	b29b      	uxth	r3, r3
 8006900:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006908:	b29c      	uxth	r4, r3
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	441a      	add	r2, r3
 8006914:	4b46      	ldr	r3, [pc, #280]	; (8006a30 <USB_DeactivateEndpoint+0x208>)
 8006916:	4323      	orrs	r3, r4
 8006918:	b29b      	uxth	r3, r3
 800691a:	8013      	strh	r3, [r2, #0]
 800691c:	e10d      	b.n	8006b3a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	785b      	ldrb	r3, [r3, #1]
 8006922:	2b00      	cmp	r3, #0
 8006924:	f040 8088 	bne.w	8006a38 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	881b      	ldrh	r3, [r3, #0]
 8006934:	b29c      	uxth	r4, r3
 8006936:	4623      	mov	r3, r4
 8006938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d014      	beq.n	800696a <USB_DeactivateEndpoint+0x142>
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	b29b      	uxth	r3, r3
 800694e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006956:	b29c      	uxth	r4, r3
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	441a      	add	r2, r3
 8006962:	4b34      	ldr	r3, [pc, #208]	; (8006a34 <USB_DeactivateEndpoint+0x20c>)
 8006964:	4323      	orrs	r3, r4
 8006966:	b29b      	uxth	r3, r3
 8006968:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4413      	add	r3, r2
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	b29c      	uxth	r4, r3
 8006978:	4623      	mov	r3, r4
 800697a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697e:	2b00      	cmp	r3, #0
 8006980:	d014      	beq.n	80069ac <USB_DeactivateEndpoint+0x184>
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4413      	add	r3, r2
 800698c:	881b      	ldrh	r3, [r3, #0]
 800698e:	b29b      	uxth	r3, r3
 8006990:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006998:	b29c      	uxth	r4, r3
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	441a      	add	r2, r3
 80069a4:	4b21      	ldr	r3, [pc, #132]	; (8006a2c <USB_DeactivateEndpoint+0x204>)
 80069a6:	4323      	orrs	r3, r4
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	4413      	add	r3, r2
 80069b6:	881b      	ldrh	r3, [r3, #0]
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c2:	b29c      	uxth	r4, r3
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	441a      	add	r2, r3
 80069ce:	4b17      	ldr	r3, [pc, #92]	; (8006a2c <USB_DeactivateEndpoint+0x204>)
 80069d0:	4323      	orrs	r3, r4
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	881b      	ldrh	r3, [r3, #0]
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ec:	b29c      	uxth	r4, r3
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	441a      	add	r2, r3
 80069f8:	4b0d      	ldr	r3, [pc, #52]	; (8006a30 <USB_DeactivateEndpoint+0x208>)
 80069fa:	4323      	orrs	r3, r4
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a16:	b29c      	uxth	r4, r3
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	441a      	add	r2, r3
 8006a22:	4b03      	ldr	r3, [pc, #12]	; (8006a30 <USB_DeactivateEndpoint+0x208>)
 8006a24:	4323      	orrs	r3, r4
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	8013      	strh	r3, [r2, #0]
 8006a2a:	e086      	b.n	8006b3a <USB_DeactivateEndpoint+0x312>
 8006a2c:	ffff80c0 	.word	0xffff80c0
 8006a30:	ffff8080 	.word	0xffff8080
 8006a34:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	b29c      	uxth	r4, r3
 8006a46:	4623      	mov	r3, r4
 8006a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d014      	beq.n	8006a7a <USB_DeactivateEndpoint+0x252>
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4413      	add	r3, r2
 8006a5a:	881b      	ldrh	r3, [r3, #0]
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a66:	b29c      	uxth	r4, r3
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	441a      	add	r2, r3
 8006a72:	4b35      	ldr	r3, [pc, #212]	; (8006b48 <USB_DeactivateEndpoint+0x320>)
 8006a74:	4323      	orrs	r3, r4
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	b29c      	uxth	r4, r3
 8006a88:	4623      	mov	r3, r4
 8006a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d014      	beq.n	8006abc <USB_DeactivateEndpoint+0x294>
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	4413      	add	r3, r2
 8006a9c:	881b      	ldrh	r3, [r3, #0]
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa8:	b29c      	uxth	r4, r3
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	441a      	add	r2, r3
 8006ab4:	4b25      	ldr	r3, [pc, #148]	; (8006b4c <USB_DeactivateEndpoint+0x324>)
 8006ab6:	4323      	orrs	r3, r4
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	881b      	ldrh	r3, [r3, #0]
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad2:	b29c      	uxth	r4, r3
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	441a      	add	r2, r3
 8006ade:	4b1a      	ldr	r3, [pc, #104]	; (8006b48 <USB_DeactivateEndpoint+0x320>)
 8006ae0:	4323      	orrs	r3, r4
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006afc:	b29c      	uxth	r4, r3
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	441a      	add	r2, r3
 8006b08:	4b11      	ldr	r3, [pc, #68]	; (8006b50 <USB_DeactivateEndpoint+0x328>)
 8006b0a:	4323      	orrs	r3, r4
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b26:	b29c      	uxth	r4, r3
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	441a      	add	r2, r3
 8006b32:	4b07      	ldr	r3, [pc, #28]	; (8006b50 <USB_DeactivateEndpoint+0x328>)
 8006b34:	4323      	orrs	r3, r4
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bc90      	pop	{r4, r7}
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	ffffc080 	.word	0xffffc080
 8006b4c:	ffff80c0 	.word	0xffff80c0
 8006b50:	ffff8080 	.word	0xffff8080

08006b54 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b54:	b590      	push	{r4, r7, lr}
 8006b56:	b08d      	sub	sp, #52	; 0x34
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	785b      	ldrb	r3, [r3, #1]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	f040 8160 	bne.w	8006e28 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	699a      	ldr	r2, [r3, #24]
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d909      	bls.n	8006b88 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	699a      	ldr	r2, [r3, #24]
 8006b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b80:	1ad2      	subs	r2, r2, r3
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	619a      	str	r2, [r3, #24]
 8006b86:	e005      	b.n	8006b94 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2200      	movs	r2, #0
 8006b92:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	7b1b      	ldrb	r3, [r3, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d119      	bne.n	8006bd0 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	6959      	ldr	r1, [r3, #20]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	88da      	ldrh	r2, [r3, #6]
 8006ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 fbbd 	bl	8007328 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006bae:	687c      	ldr	r4, [r7, #4]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	441c      	add	r4, r3
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	00db      	lsls	r3, r3, #3
 8006bc0:	4423      	add	r3, r4
 8006bc2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006bc6:	461c      	mov	r4, r3
 8006bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	8023      	strh	r3, [r4, #0]
 8006bce:	e10f      	b.n	8006df0 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d065      	beq.n	8006cb2 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006be6:	687c      	ldr	r4, [r7, #4]
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	785b      	ldrb	r3, [r3, #1]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d148      	bne.n	8006c82 <USB_EPStartXfer+0x12e>
 8006bf0:	687c      	ldr	r4, [r7, #4]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	441c      	add	r4, r3
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	00db      	lsls	r3, r3, #3
 8006c02:	4423      	add	r3, r4
 8006c04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c08:	461c      	mov	r4, r3
 8006c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10e      	bne.n	8006c2e <USB_EPStartXfer+0xda>
 8006c10:	8823      	ldrh	r3, [r4, #0]
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	8023      	strh	r3, [r4, #0]
 8006c1c:	8823      	ldrh	r3, [r4, #0]
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	8023      	strh	r3, [r4, #0]
 8006c2c:	e03d      	b.n	8006caa <USB_EPStartXfer+0x156>
 8006c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c30:	2b3e      	cmp	r3, #62	; 0x3e
 8006c32:	d810      	bhi.n	8006c56 <USB_EPStartXfer+0x102>
 8006c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c36:	085b      	lsrs	r3, r3, #1
 8006c38:	627b      	str	r3, [r7, #36]	; 0x24
 8006c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d002      	beq.n	8006c4a <USB_EPStartXfer+0xf6>
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	3301      	adds	r3, #1
 8006c48:	627b      	str	r3, [r7, #36]	; 0x24
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	029b      	lsls	r3, r3, #10
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	8023      	strh	r3, [r4, #0]
 8006c54:	e029      	b.n	8006caa <USB_EPStartXfer+0x156>
 8006c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c58:	095b      	lsrs	r3, r3, #5
 8006c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5e:	f003 031f 	and.w	r3, r3, #31
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d102      	bne.n	8006c6c <USB_EPStartXfer+0x118>
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	029b      	lsls	r3, r3, #10
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	8023      	strh	r3, [r4, #0]
 8006c80:	e013      	b.n	8006caa <USB_EPStartXfer+0x156>
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	785b      	ldrb	r3, [r3, #1]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d10f      	bne.n	8006caa <USB_EPStartXfer+0x156>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	441c      	add	r4, r3
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	00db      	lsls	r3, r3, #3
 8006c9a:	4423      	add	r3, r4
 8006c9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ca0:	60fb      	str	r3, [r7, #12]
 8006ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	895b      	ldrh	r3, [r3, #10]
 8006cae:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006cb0:	e063      	b.n	8006d7a <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	785b      	ldrb	r3, [r3, #1]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d148      	bne.n	8006d4c <USB_EPStartXfer+0x1f8>
 8006cba:	687c      	ldr	r4, [r7, #4]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	441c      	add	r4, r3
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	00db      	lsls	r3, r3, #3
 8006ccc:	4423      	add	r3, r4
 8006cce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cd2:	461c      	mov	r4, r3
 8006cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10e      	bne.n	8006cf8 <USB_EPStartXfer+0x1a4>
 8006cda:	8823      	ldrh	r3, [r4, #0]
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	8023      	strh	r3, [r4, #0]
 8006ce6:	8823      	ldrh	r3, [r4, #0]
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	8023      	strh	r3, [r4, #0]
 8006cf6:	e03d      	b.n	8006d74 <USB_EPStartXfer+0x220>
 8006cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfa:	2b3e      	cmp	r3, #62	; 0x3e
 8006cfc:	d810      	bhi.n	8006d20 <USB_EPStartXfer+0x1cc>
 8006cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d00:	085b      	lsrs	r3, r3, #1
 8006d02:	623b      	str	r3, [r7, #32]
 8006d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d002      	beq.n	8006d14 <USB_EPStartXfer+0x1c0>
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
 8006d10:	3301      	adds	r3, #1
 8006d12:	623b      	str	r3, [r7, #32]
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	029b      	lsls	r3, r3, #10
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	8023      	strh	r3, [r4, #0]
 8006d1e:	e029      	b.n	8006d74 <USB_EPStartXfer+0x220>
 8006d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d22:	095b      	lsrs	r3, r3, #5
 8006d24:	623b      	str	r3, [r7, #32]
 8006d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d28:	f003 031f 	and.w	r3, r3, #31
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d102      	bne.n	8006d36 <USB_EPStartXfer+0x1e2>
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	3b01      	subs	r3, #1
 8006d34:	623b      	str	r3, [r7, #32]
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	029b      	lsls	r3, r3, #10
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	8023      	strh	r3, [r4, #0]
 8006d4a:	e013      	b.n	8006d74 <USB_EPStartXfer+0x220>
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	785b      	ldrb	r3, [r3, #1]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d10f      	bne.n	8006d74 <USB_EPStartXfer+0x220>
 8006d54:	687c      	ldr	r4, [r7, #4]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	441c      	add	r4, r3
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	00db      	lsls	r3, r3, #3
 8006d66:	4423      	add	r3, r4
 8006d68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d6c:	461c      	mov	r4, r3
 8006d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	891b      	ldrh	r3, [r3, #8]
 8006d78:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	6959      	ldr	r1, [r3, #20]
 8006d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 facf 	bl	8007328 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	785b      	ldrb	r3, [r3, #1]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d115      	bne.n	8006dbe <USB_EPStartXfer+0x26a>
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da8:	b29c      	uxth	r4, r3
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	441a      	add	r2, r3
 8006db4:	4b9a      	ldr	r3, [pc, #616]	; (8007020 <USB_EPStartXfer+0x4cc>)
 8006db6:	4323      	orrs	r3, r4
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	8013      	strh	r3, [r2, #0]
 8006dbc:	e018      	b.n	8006df0 <USB_EPStartXfer+0x29c>
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	785b      	ldrb	r3, [r3, #1]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d114      	bne.n	8006df0 <USB_EPStartXfer+0x29c>
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	881b      	ldrh	r3, [r3, #0]
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ddc:	b29c      	uxth	r4, r3
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	441a      	add	r2, r3
 8006de8:	4b8e      	ldr	r3, [pc, #568]	; (8007024 <USB_EPStartXfer+0x4d0>)
 8006dea:	4323      	orrs	r3, r4
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4413      	add	r3, r2
 8006dfa:	881b      	ldrh	r3, [r3, #0]
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e06:	b29c      	uxth	r4, r3
 8006e08:	f084 0310 	eor.w	r3, r4, #16
 8006e0c:	b29c      	uxth	r4, r3
 8006e0e:	f084 0320 	eor.w	r3, r4, #32
 8006e12:	b29c      	uxth	r4, r3
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	441a      	add	r2, r3
 8006e1e:	4b82      	ldr	r3, [pc, #520]	; (8007028 <USB_EPStartXfer+0x4d4>)
 8006e20:	4323      	orrs	r3, r4
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	8013      	strh	r3, [r2, #0]
 8006e26:	e146      	b.n	80070b6 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	699a      	ldr	r2, [r3, #24]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d909      	bls.n	8006e48 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	699a      	ldr	r2, [r3, #24]
 8006e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e40:	1ad2      	subs	r2, r2, r3
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	619a      	str	r2, [r3, #24]
 8006e46:	e005      	b.n	8006e54 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	2200      	movs	r2, #0
 8006e52:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	7b1b      	ldrb	r3, [r3, #12]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d148      	bne.n	8006eee <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006e5c:	687c      	ldr	r4, [r7, #4]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	441c      	add	r4, r3
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	00db      	lsls	r3, r3, #3
 8006e6e:	4423      	add	r3, r4
 8006e70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e74:	461c      	mov	r4, r3
 8006e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10e      	bne.n	8006e9a <USB_EPStartXfer+0x346>
 8006e7c:	8823      	ldrh	r3, [r4, #0]
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	8023      	strh	r3, [r4, #0]
 8006e88:	8823      	ldrh	r3, [r4, #0]
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	8023      	strh	r3, [r4, #0]
 8006e98:	e0f2      	b.n	8007080 <USB_EPStartXfer+0x52c>
 8006e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9c:	2b3e      	cmp	r3, #62	; 0x3e
 8006e9e:	d810      	bhi.n	8006ec2 <USB_EPStartXfer+0x36e>
 8006ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea2:	085b      	lsrs	r3, r3, #1
 8006ea4:	61fb      	str	r3, [r7, #28]
 8006ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea8:	f003 0301 	and.w	r3, r3, #1
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <USB_EPStartXfer+0x362>
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	61fb      	str	r3, [r7, #28]
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	029b      	lsls	r3, r3, #10
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	8023      	strh	r3, [r4, #0]
 8006ec0:	e0de      	b.n	8007080 <USB_EPStartXfer+0x52c>
 8006ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec4:	095b      	lsrs	r3, r3, #5
 8006ec6:	61fb      	str	r3, [r7, #28]
 8006ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eca:	f003 031f 	and.w	r3, r3, #31
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d102      	bne.n	8006ed8 <USB_EPStartXfer+0x384>
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	61fb      	str	r3, [r7, #28]
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	029b      	lsls	r3, r3, #10
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	8023      	strh	r3, [r4, #0]
 8006eec:	e0c8      	b.n	8007080 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	785b      	ldrb	r3, [r3, #1]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d148      	bne.n	8006f88 <USB_EPStartXfer+0x434>
 8006ef6:	687c      	ldr	r4, [r7, #4]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	441c      	add	r4, r3
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	00db      	lsls	r3, r3, #3
 8006f08:	4423      	add	r3, r4
 8006f0a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f0e:	461c      	mov	r4, r3
 8006f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10e      	bne.n	8006f34 <USB_EPStartXfer+0x3e0>
 8006f16:	8823      	ldrh	r3, [r4, #0]
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	8023      	strh	r3, [r4, #0]
 8006f22:	8823      	ldrh	r3, [r4, #0]
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	8023      	strh	r3, [r4, #0]
 8006f32:	e03d      	b.n	8006fb0 <USB_EPStartXfer+0x45c>
 8006f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f36:	2b3e      	cmp	r3, #62	; 0x3e
 8006f38:	d810      	bhi.n	8006f5c <USB_EPStartXfer+0x408>
 8006f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3c:	085b      	lsrs	r3, r3, #1
 8006f3e:	61bb      	str	r3, [r7, #24]
 8006f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f42:	f003 0301 	and.w	r3, r3, #1
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d002      	beq.n	8006f50 <USB_EPStartXfer+0x3fc>
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	61bb      	str	r3, [r7, #24]
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	029b      	lsls	r3, r3, #10
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	8023      	strh	r3, [r4, #0]
 8006f5a:	e029      	b.n	8006fb0 <USB_EPStartXfer+0x45c>
 8006f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5e:	095b      	lsrs	r3, r3, #5
 8006f60:	61bb      	str	r3, [r7, #24]
 8006f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f64:	f003 031f 	and.w	r3, r3, #31
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d102      	bne.n	8006f72 <USB_EPStartXfer+0x41e>
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	61bb      	str	r3, [r7, #24]
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	029b      	lsls	r3, r3, #10
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	8023      	strh	r3, [r4, #0]
 8006f86:	e013      	b.n	8006fb0 <USB_EPStartXfer+0x45c>
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	785b      	ldrb	r3, [r3, #1]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d10f      	bne.n	8006fb0 <USB_EPStartXfer+0x45c>
 8006f90:	687c      	ldr	r4, [r7, #4]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	441c      	add	r4, r3
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	00db      	lsls	r3, r3, #3
 8006fa2:	4423      	add	r3, r4
 8006fa4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006fa8:	461c      	mov	r4, r3
 8006faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	8023      	strh	r3, [r4, #0]
 8006fb0:	687c      	ldr	r4, [r7, #4]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	785b      	ldrb	r3, [r3, #1]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d14e      	bne.n	8007058 <USB_EPStartXfer+0x504>
 8006fba:	687c      	ldr	r4, [r7, #4]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	441c      	add	r4, r3
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	00db      	lsls	r3, r3, #3
 8006fcc:	4423      	add	r3, r4
 8006fce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006fd2:	461c      	mov	r4, r3
 8006fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10e      	bne.n	8006ff8 <USB_EPStartXfer+0x4a4>
 8006fda:	8823      	ldrh	r3, [r4, #0]
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	8023      	strh	r3, [r4, #0]
 8006fe6:	8823      	ldrh	r3, [r4, #0]
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	8023      	strh	r3, [r4, #0]
 8006ff6:	e043      	b.n	8007080 <USB_EPStartXfer+0x52c>
 8006ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffa:	2b3e      	cmp	r3, #62	; 0x3e
 8006ffc:	d816      	bhi.n	800702c <USB_EPStartXfer+0x4d8>
 8006ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007000:	085b      	lsrs	r3, r3, #1
 8007002:	617b      	str	r3, [r7, #20]
 8007004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	2b00      	cmp	r3, #0
 800700c:	d002      	beq.n	8007014 <USB_EPStartXfer+0x4c0>
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	3301      	adds	r3, #1
 8007012:	617b      	str	r3, [r7, #20]
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	b29b      	uxth	r3, r3
 8007018:	029b      	lsls	r3, r3, #10
 800701a:	b29b      	uxth	r3, r3
 800701c:	8023      	strh	r3, [r4, #0]
 800701e:	e02f      	b.n	8007080 <USB_EPStartXfer+0x52c>
 8007020:	ffff80c0 	.word	0xffff80c0
 8007024:	ffffc080 	.word	0xffffc080
 8007028:	ffff8080 	.word	0xffff8080
 800702c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702e:	095b      	lsrs	r3, r3, #5
 8007030:	617b      	str	r3, [r7, #20]
 8007032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007034:	f003 031f 	and.w	r3, r3, #31
 8007038:	2b00      	cmp	r3, #0
 800703a:	d102      	bne.n	8007042 <USB_EPStartXfer+0x4ee>
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	3b01      	subs	r3, #1
 8007040:	617b      	str	r3, [r7, #20]
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	b29b      	uxth	r3, r3
 8007046:	029b      	lsls	r3, r3, #10
 8007048:	b29b      	uxth	r3, r3
 800704a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800704e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007052:	b29b      	uxth	r3, r3
 8007054:	8023      	strh	r3, [r4, #0]
 8007056:	e013      	b.n	8007080 <USB_EPStartXfer+0x52c>
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	785b      	ldrb	r3, [r3, #1]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d10f      	bne.n	8007080 <USB_EPStartXfer+0x52c>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007066:	b29b      	uxth	r3, r3
 8007068:	441c      	add	r4, r3
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	00db      	lsls	r3, r3, #3
 8007070:	4423      	add	r3, r4
 8007072:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007076:	613b      	str	r3, [r7, #16]
 8007078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707a:	b29a      	uxth	r2, r3
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	b29b      	uxth	r3, r3
 800708e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007096:	b29c      	uxth	r4, r3
 8007098:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800709c:	b29c      	uxth	r4, r3
 800709e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80070a2:	b29c      	uxth	r4, r3
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	441a      	add	r2, r3
 80070ae:	4b04      	ldr	r3, [pc, #16]	; (80070c0 <USB_EPStartXfer+0x56c>)
 80070b0:	4323      	orrs	r3, r4
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3734      	adds	r7, #52	; 0x34
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd90      	pop	{r4, r7, pc}
 80070c0:	ffff8080 	.word	0xffff8080

080070c4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070c4:	b490      	push	{r4, r7}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	785b      	ldrb	r3, [r3, #1]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d018      	beq.n	8007108 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4413      	add	r3, r2
 80070e0:	881b      	ldrh	r3, [r3, #0]
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070ec:	b29c      	uxth	r4, r3
 80070ee:	f084 0310 	eor.w	r3, r4, #16
 80070f2:	b29c      	uxth	r4, r3
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	441a      	add	r2, r3
 80070fe:	4b11      	ldr	r3, [pc, #68]	; (8007144 <USB_EPSetStall+0x80>)
 8007100:	4323      	orrs	r3, r4
 8007102:	b29b      	uxth	r3, r3
 8007104:	8013      	strh	r3, [r2, #0]
 8007106:	e017      	b.n	8007138 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	4413      	add	r3, r2
 8007112:	881b      	ldrh	r3, [r3, #0]
 8007114:	b29b      	uxth	r3, r3
 8007116:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800711a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800711e:	b29c      	uxth	r4, r3
 8007120:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007124:	b29c      	uxth	r4, r3
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	441a      	add	r2, r3
 8007130:	4b04      	ldr	r3, [pc, #16]	; (8007144 <USB_EPSetStall+0x80>)
 8007132:	4323      	orrs	r3, r4
 8007134:	b29b      	uxth	r3, r3
 8007136:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bc90      	pop	{r4, r7}
 8007142:	4770      	bx	lr
 8007144:	ffff8080 	.word	0xffff8080

08007148 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007148:	b490      	push	{r4, r7}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	7b1b      	ldrb	r3, [r3, #12]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d17d      	bne.n	8007256 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	785b      	ldrb	r3, [r3, #1]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d03d      	beq.n	80071de <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4413      	add	r3, r2
 800716c:	881b      	ldrh	r3, [r3, #0]
 800716e:	b29c      	uxth	r4, r3
 8007170:	4623      	mov	r3, r4
 8007172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007176:	2b00      	cmp	r3, #0
 8007178:	d014      	beq.n	80071a4 <USB_EPClearStall+0x5c>
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4413      	add	r3, r2
 8007184:	881b      	ldrh	r3, [r3, #0]
 8007186:	b29b      	uxth	r3, r3
 8007188:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800718c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007190:	b29c      	uxth	r4, r3
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	441a      	add	r2, r3
 800719c:	4b31      	ldr	r3, [pc, #196]	; (8007264 <USB_EPClearStall+0x11c>)
 800719e:	4323      	orrs	r3, r4
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	78db      	ldrb	r3, [r3, #3]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d054      	beq.n	8007256 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4413      	add	r3, r2
 80071b6:	881b      	ldrh	r3, [r3, #0]
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071c2:	b29c      	uxth	r4, r3
 80071c4:	f084 0320 	eor.w	r3, r4, #32
 80071c8:	b29c      	uxth	r4, r3
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	441a      	add	r2, r3
 80071d4:	4b24      	ldr	r3, [pc, #144]	; (8007268 <USB_EPClearStall+0x120>)
 80071d6:	4323      	orrs	r3, r4
 80071d8:	b29b      	uxth	r3, r3
 80071da:	8013      	strh	r3, [r2, #0]
 80071dc:	e03b      	b.n	8007256 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4413      	add	r3, r2
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	b29c      	uxth	r4, r3
 80071ec:	4623      	mov	r3, r4
 80071ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d014      	beq.n	8007220 <USB_EPClearStall+0xd8>
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	881b      	ldrh	r3, [r3, #0]
 8007202:	b29b      	uxth	r3, r3
 8007204:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800720c:	b29c      	uxth	r4, r3
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	441a      	add	r2, r3
 8007218:	4b14      	ldr	r3, [pc, #80]	; (800726c <USB_EPClearStall+0x124>)
 800721a:	4323      	orrs	r3, r4
 800721c:	b29b      	uxth	r3, r3
 800721e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	b29b      	uxth	r3, r3
 800722e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007236:	b29c      	uxth	r4, r3
 8007238:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800723c:	b29c      	uxth	r4, r3
 800723e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007242:	b29c      	uxth	r4, r3
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	441a      	add	r2, r3
 800724e:	4b06      	ldr	r3, [pc, #24]	; (8007268 <USB_EPClearStall+0x120>)
 8007250:	4323      	orrs	r3, r4
 8007252:	b29b      	uxth	r3, r3
 8007254:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bc90      	pop	{r4, r7}
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	ffff80c0 	.word	0xffff80c0
 8007268:	ffff8080 	.word	0xffff8080
 800726c:	ffffc080 	.word	0xffffc080

08007270 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	460b      	mov	r3, r1
 800727a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800727c:	78fb      	ldrb	r3, [r7, #3]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d103      	bne.n	800728a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2280      	movs	r2, #128	; 0x80
 8007286:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	370c      	adds	r7, #12
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b083      	sub	sp, #12
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80072da:	b29a      	uxth	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80072fe:	b29b      	uxth	r3, r3
 8007300:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007302:	68fb      	ldr	r3, [r7, #12]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007328:	b480      	push	{r7}
 800732a:	b08d      	sub	sp, #52	; 0x34
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	4611      	mov	r1, r2
 8007334:	461a      	mov	r2, r3
 8007336:	460b      	mov	r3, r1
 8007338:	80fb      	strh	r3, [r7, #6]
 800733a:	4613      	mov	r3, r2
 800733c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800733e:	88bb      	ldrh	r3, [r7, #4]
 8007340:	3301      	adds	r3, #1
 8007342:	085b      	lsrs	r3, r3, #1
 8007344:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800734e:	88fa      	ldrh	r2, [r7, #6]
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	4413      	add	r3, r2
 8007354:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007358:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800735e:	e01b      	b.n	8007398 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007368:	3301      	adds	r3, #1
 800736a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	b29b      	uxth	r3, r3
 8007372:	021b      	lsls	r3, r3, #8
 8007374:	b29b      	uxth	r3, r3
 8007376:	461a      	mov	r2, r3
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	4313      	orrs	r3, r2
 800737c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	b29a      	uxth	r2, r3
 8007382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007384:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007388:	3302      	adds	r3, #2
 800738a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800738c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738e:	3301      	adds	r3, #1
 8007390:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007394:	3b01      	subs	r3, #1
 8007396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1e0      	bne.n	8007360 <USB_WritePMA+0x38>
  }
}
 800739e:	bf00      	nop
 80073a0:	3734      	adds	r7, #52	; 0x34
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80073aa:	b480      	push	{r7}
 80073ac:	b08b      	sub	sp, #44	; 0x2c
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	60f8      	str	r0, [r7, #12]
 80073b2:	60b9      	str	r1, [r7, #8]
 80073b4:	4611      	mov	r1, r2
 80073b6:	461a      	mov	r2, r3
 80073b8:	460b      	mov	r3, r1
 80073ba:	80fb      	strh	r3, [r7, #6]
 80073bc:	4613      	mov	r3, r2
 80073be:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80073c0:	88bb      	ldrh	r3, [r7, #4]
 80073c2:	085b      	lsrs	r3, r3, #1
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80073d0:	88fa      	ldrh	r2, [r7, #6]
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073da:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	627b      	str	r3, [r7, #36]	; 0x24
 80073e0:	e018      	b.n	8007414 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80073e2:	6a3b      	ldr	r3, [r7, #32]
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80073ea:	6a3b      	ldr	r3, [r7, #32]
 80073ec:	3302      	adds	r3, #2
 80073ee:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	b2da      	uxtb	r2, r3
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	3301      	adds	r3, #1
 80073fc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	0a1b      	lsrs	r3, r3, #8
 8007402:	b2da      	uxtb	r2, r3
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	3301      	adds	r3, #1
 800740c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007410:	3b01      	subs	r3, #1
 8007412:	627b      	str	r3, [r7, #36]	; 0x24
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1e3      	bne.n	80073e2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800741a:	88bb      	ldrh	r3, [r7, #4]
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	b29b      	uxth	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d007      	beq.n	8007436 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007426:	6a3b      	ldr	r3, [r7, #32]
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	b29b      	uxth	r3, r3
 800742c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	b2da      	uxtb	r2, r3
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	701a      	strb	r2, [r3, #0]
  }
}
 8007436:	bf00      	nop
 8007438:	372c      	adds	r7, #44	; 0x2c
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b084      	sub	sp, #16
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
 800744a:	460b      	mov	r3, r1
 800744c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800744e:	2300      	movs	r3, #0
 8007450:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	7c1b      	ldrb	r3, [r3, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d115      	bne.n	8007486 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800745a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800745e:	2202      	movs	r2, #2
 8007460:	2181      	movs	r1, #129	; 0x81
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f001 ff06 	bl	8009274 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800746e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007472:	2202      	movs	r2, #2
 8007474:	2101      	movs	r1, #1
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f001 fefc 	bl	8009274 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007484:	e012      	b.n	80074ac <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007486:	2340      	movs	r3, #64	; 0x40
 8007488:	2202      	movs	r2, #2
 800748a:	2181      	movs	r1, #129	; 0x81
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f001 fef1 	bl	8009274 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007498:	2340      	movs	r3, #64	; 0x40
 800749a:	2202      	movs	r2, #2
 800749c:	2101      	movs	r1, #1
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f001 fee8 	bl	8009274 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80074ac:	2308      	movs	r3, #8
 80074ae:	2203      	movs	r2, #3
 80074b0:	2182      	movs	r1, #130	; 0x82
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f001 fede 	bl	8009274 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80074be:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80074c2:	f002 f8d1 	bl	8009668 <USBD_static_malloc>
 80074c6:	4602      	mov	r2, r0
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d102      	bne.n	80074de <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80074d8:	2301      	movs	r3, #1
 80074da:	73fb      	strb	r3, [r7, #15]
 80074dc:	e026      	b.n	800752c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	7c1b      	ldrb	r3, [r3, #16]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d109      	bne.n	800751c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800750e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007512:	2101      	movs	r1, #1
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f002 f823 	bl	8009560 <USBD_LL_PrepareReceive>
 800751a:	e007      	b.n	800752c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007522:	2340      	movs	r3, #64	; 0x40
 8007524:	2101      	movs	r1, #1
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f002 f81a 	bl	8009560 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800752c:	7bfb      	ldrb	r3, [r7, #15]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b084      	sub	sp, #16
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	460b      	mov	r3, r1
 8007540:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007542:	2300      	movs	r3, #0
 8007544:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007546:	2181      	movs	r1, #129	; 0x81
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f001 fed1 	bl	80092f0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007554:	2101      	movs	r1, #1
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f001 feca 	bl	80092f0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007564:	2182      	movs	r1, #130	; 0x82
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f001 fec2 	bl	80092f0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00e      	beq.n	800759a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800758c:	4618      	mov	r0, r3
 800758e:	f002 f879 	bl	8009684 <USBD_static_free>
    pdev->pClassData = NULL;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800759a:	7bfb      	ldrb	r3, [r7, #15]
}
 800759c:	4618      	mov	r0, r3
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80075ba:	2300      	movs	r3, #0
 80075bc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80075be:	2300      	movs	r3, #0
 80075c0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d039      	beq.n	8007642 <USBD_CDC_Setup+0x9e>
 80075ce:	2b20      	cmp	r3, #32
 80075d0:	d17c      	bne.n	80076cc <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	88db      	ldrh	r3, [r3, #6]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d029      	beq.n	800762e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	b25b      	sxtb	r3, r3
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	da11      	bge.n	8007608 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80075f0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	88d2      	ldrh	r2, [r2, #6]
 80075f6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80075f8:	6939      	ldr	r1, [r7, #16]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	88db      	ldrh	r3, [r3, #6]
 80075fe:	461a      	mov	r2, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f001 fa2b 	bl	8008a5c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007606:	e068      	b.n	80076da <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	785a      	ldrb	r2, [r3, #1]
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	88db      	ldrh	r3, [r3, #6]
 8007616:	b2da      	uxtb	r2, r3
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800761e:	6939      	ldr	r1, [r7, #16]
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	88db      	ldrh	r3, [r3, #6]
 8007624:	461a      	mov	r2, r3
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f001 fa46 	bl	8008ab8 <USBD_CtlPrepareRx>
      break;
 800762c:	e055      	b.n	80076da <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	7850      	ldrb	r0, [r2, #1]
 800763a:	2200      	movs	r2, #0
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	4798      	blx	r3
      break;
 8007640:	e04b      	b.n	80076da <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	785b      	ldrb	r3, [r3, #1]
 8007646:	2b0a      	cmp	r3, #10
 8007648:	d017      	beq.n	800767a <USBD_CDC_Setup+0xd6>
 800764a:	2b0b      	cmp	r3, #11
 800764c:	d029      	beq.n	80076a2 <USBD_CDC_Setup+0xfe>
 800764e:	2b00      	cmp	r3, #0
 8007650:	d133      	bne.n	80076ba <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007658:	2b03      	cmp	r3, #3
 800765a:	d107      	bne.n	800766c <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800765c:	f107 030c 	add.w	r3, r7, #12
 8007660:	2202      	movs	r2, #2
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 f9f9 	bl	8008a5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800766a:	e02e      	b.n	80076ca <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800766c:	6839      	ldr	r1, [r7, #0]
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f001 f989 	bl	8008986 <USBD_CtlError>
            ret = USBD_FAIL;
 8007674:	2302      	movs	r3, #2
 8007676:	75fb      	strb	r3, [r7, #23]
          break;
 8007678:	e027      	b.n	80076ca <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007680:	2b03      	cmp	r3, #3
 8007682:	d107      	bne.n	8007694 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007684:	f107 030f 	add.w	r3, r7, #15
 8007688:	2201      	movs	r2, #1
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f001 f9e5 	bl	8008a5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007692:	e01a      	b.n	80076ca <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f001 f975 	bl	8008986 <USBD_CtlError>
            ret = USBD_FAIL;
 800769c:	2302      	movs	r3, #2
 800769e:	75fb      	strb	r3, [r7, #23]
          break;
 80076a0:	e013      	b.n	80076ca <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076a8:	2b03      	cmp	r3, #3
 80076aa:	d00d      	beq.n	80076c8 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f001 f969 	bl	8008986 <USBD_CtlError>
            ret = USBD_FAIL;
 80076b4:	2302      	movs	r3, #2
 80076b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80076b8:	e006      	b.n	80076c8 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f001 f962 	bl	8008986 <USBD_CtlError>
          ret = USBD_FAIL;
 80076c2:	2302      	movs	r3, #2
 80076c4:	75fb      	strb	r3, [r7, #23]
          break;
 80076c6:	e000      	b.n	80076ca <USBD_CDC_Setup+0x126>
          break;
 80076c8:	bf00      	nop
      }
      break;
 80076ca:	e006      	b.n	80076da <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f001 f959 	bl	8008986 <USBD_CtlError>
      ret = USBD_FAIL;
 80076d4:	2302      	movs	r3, #2
 80076d6:	75fb      	strb	r3, [r7, #23]
      break;
 80076d8:	bf00      	nop
  }

  return ret;
 80076da:	7dfb      	ldrb	r3, [r7, #23]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3718      	adds	r7, #24
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	460b      	mov	r3, r1
 80076ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076f6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076fe:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007706:	2b00      	cmp	r3, #0
 8007708:	d037      	beq.n	800777a <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800770a:	78fa      	ldrb	r2, [r7, #3]
 800770c:	6879      	ldr	r1, [r7, #4]
 800770e:	4613      	mov	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4413      	add	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	440b      	add	r3, r1
 8007718:	331c      	adds	r3, #28
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d026      	beq.n	800776e <USBD_CDC_DataIn+0x8a>
 8007720:	78fa      	ldrb	r2, [r7, #3]
 8007722:	6879      	ldr	r1, [r7, #4]
 8007724:	4613      	mov	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	440b      	add	r3, r1
 800772e:	331c      	adds	r3, #28
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	78fa      	ldrb	r2, [r7, #3]
 8007734:	68b9      	ldr	r1, [r7, #8]
 8007736:	0152      	lsls	r2, r2, #5
 8007738:	440a      	add	r2, r1
 800773a:	3238      	adds	r2, #56	; 0x38
 800773c:	6812      	ldr	r2, [r2, #0]
 800773e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007742:	fb02 f201 	mul.w	r2, r2, r1
 8007746:	1a9b      	subs	r3, r3, r2
 8007748:	2b00      	cmp	r3, #0
 800774a:	d110      	bne.n	800776e <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800774c:	78fa      	ldrb	r2, [r7, #3]
 800774e:	6879      	ldr	r1, [r7, #4]
 8007750:	4613      	mov	r3, r2
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	4413      	add	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	440b      	add	r3, r1
 800775a:	331c      	adds	r3, #28
 800775c:	2200      	movs	r2, #0
 800775e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007760:	78f9      	ldrb	r1, [r7, #3]
 8007762:	2300      	movs	r3, #0
 8007764:	2200      	movs	r2, #0
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f001 fec0 	bl	80094ec <USBD_LL_Transmit>
 800776c:	e003      	b.n	8007776 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007776:	2300      	movs	r3, #0
 8007778:	e000      	b.n	800777c <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 800777a:	2302      	movs	r3, #2
  }
}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	460b      	mov	r3, r1
 800778e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007796:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007798:	78fb      	ldrb	r3, [r7, #3]
 800779a:	4619      	mov	r1, r3
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f001 ff19 	bl	80095d4 <USBD_LL_GetRxDataSize>
 80077a2:	4602      	mov	r2, r0
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00d      	beq.n	80077d0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80077c8:	4611      	mov	r1, r2
 80077ca:	4798      	blx	r3

    return USBD_OK;
 80077cc:	2300      	movs	r3, #0
 80077ce:	e000      	b.n	80077d2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80077d0:	2302      	movs	r3, #2
  }
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b084      	sub	sp, #16
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077e8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d015      	beq.n	8007820 <USBD_CDC_EP0_RxReady+0x46>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80077fa:	2bff      	cmp	r3, #255	; 0xff
 80077fc:	d010      	beq.n	8007820 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800780c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007814:	b292      	uxth	r2, r2
 8007816:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	22ff      	movs	r2, #255	; 0xff
 800781c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
	...

0800782c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2243      	movs	r2, #67	; 0x43
 8007838:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800783a:	4b03      	ldr	r3, [pc, #12]	; (8007848 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800783c:	4618      	mov	r0, r3
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr
 8007848:	20000094 	.word	0x20000094

0800784c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2243      	movs	r2, #67	; 0x43
 8007858:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800785a:	4b03      	ldr	r3, [pc, #12]	; (8007868 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800785c:	4618      	mov	r0, r3
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr
 8007868:	20000050 	.word	0x20000050

0800786c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2243      	movs	r2, #67	; 0x43
 8007878:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800787a:	4b03      	ldr	r3, [pc, #12]	; (8007888 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800787c:	4618      	mov	r0, r3
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr
 8007888:	200000d8 	.word	0x200000d8

0800788c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	220a      	movs	r2, #10
 8007898:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800789a:	4b03      	ldr	r3, [pc, #12]	; (80078a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800789c:	4618      	mov	r0, r3
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	2000000c 	.word	0x2000000c

080078ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80078b6:	2302      	movs	r3, #2
 80078b8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d005      	beq.n	80078cc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	683a      	ldr	r2, [r7, #0]
 80078c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80078c8:	2300      	movs	r3, #0
 80078ca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80078cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80078da:	b480      	push	{r7}
 80078dc:	b087      	sub	sp, #28
 80078de:	af00      	add	r7, sp, #0
 80078e0:	60f8      	str	r0, [r7, #12]
 80078e2:	60b9      	str	r1, [r7, #8]
 80078e4:	4613      	mov	r3, r2
 80078e6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ee:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80078f8:	88fa      	ldrh	r2, [r7, #6]
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	371c      	adds	r7, #28
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800790e:	b480      	push	{r7}
 8007910:	b085      	sub	sp, #20
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
 8007916:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800791e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	683a      	ldr	r2, [r7, #0]
 8007924:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3714      	adds	r7, #20
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b084      	sub	sp, #16
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007944:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800794c:	2b00      	cmp	r3, #0
 800794e:	d01c      	beq.n	800798a <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007956:	2b00      	cmp	r3, #0
 8007958:	d115      	bne.n	8007986 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2201      	movs	r2, #1
 800795e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007978:	b29b      	uxth	r3, r3
 800797a:	2181      	movs	r1, #129	; 0x81
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f001 fdb5 	bl	80094ec <USBD_LL_Transmit>

      return USBD_OK;
 8007982:	2300      	movs	r3, #0
 8007984:	e002      	b.n	800798c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007986:	2301      	movs	r3, #1
 8007988:	e000      	b.n	800798c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800798a:	2302      	movs	r3, #2
  }
}
 800798c:	4618      	mov	r0, r3
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079a2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d017      	beq.n	80079de <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	7c1b      	ldrb	r3, [r3, #16]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d109      	bne.n	80079ca <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079c0:	2101      	movs	r1, #1
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f001 fdcc 	bl	8009560 <USBD_LL_PrepareReceive>
 80079c8:	e007      	b.n	80079da <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079d0:	2340      	movs	r3, #64	; 0x40
 80079d2:	2101      	movs	r1, #1
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f001 fdc3 	bl	8009560 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80079da:	2300      	movs	r3, #0
 80079dc:	e000      	b.n	80079e0 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80079de:	2302      	movs	r3, #2
  }
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	4613      	mov	r3, r2
 80079f4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d101      	bne.n	8007a00 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80079fc:	2302      	movs	r3, #2
 80079fe:	e01a      	b.n	8007a36 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d003      	beq.n	8007a12 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d003      	beq.n	8007a20 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	79fa      	ldrb	r2, [r7, #7]
 8007a2c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f001 fb8c 	bl	800914c <USBD_LL_Init>

  return USBD_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a3e:	b480      	push	{r7}
 8007a40:	b085      	sub	sp, #20
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
 8007a46:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d006      	beq.n	8007a60 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	683a      	ldr	r2, [r7, #0]
 8007a56:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	73fb      	strb	r3, [r7, #15]
 8007a5e:	e001      	b.n	8007a64 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007a60:	2302      	movs	r3, #2
 8007a62:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b082      	sub	sp, #8
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f001 fbc8 	bl	8009210 <USBD_LL_Start>

  return USBD_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b083      	sub	sp, #12
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007aac:	2302      	movs	r3, #2
 8007aae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00c      	beq.n	8007ad4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	78fa      	ldrb	r2, [r7, #3]
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	4798      	blx	r3
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b082      	sub	sp, #8
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	78fa      	ldrb	r2, [r7, #3]
 8007af4:	4611      	mov	r1, r2
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	4798      	blx	r3

  return USBD_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b14:	6839      	ldr	r1, [r7, #0]
 8007b16:	4618      	mov	r0, r3
 8007b18:	f000 fef8 	bl	800890c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007b38:	f003 031f 	and.w	r3, r3, #31
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d00c      	beq.n	8007b5a <USBD_LL_SetupStage+0x56>
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d302      	bcc.n	8007b4a <USBD_LL_SetupStage+0x46>
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d010      	beq.n	8007b6a <USBD_LL_SetupStage+0x66>
 8007b48:	e017      	b.n	8007b7a <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b50:	4619      	mov	r1, r3
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f9ce 	bl	8007ef4 <USBD_StdDevReq>
      break;
 8007b58:	e01a      	b.n	8007b90 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b60:	4619      	mov	r1, r3
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fa30 	bl	8007fc8 <USBD_StdItfReq>
      break;
 8007b68:	e012      	b.n	8007b90 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b70:	4619      	mov	r1, r3
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fa6e 	bl	8008054 <USBD_StdEPReq>
      break;
 8007b78:	e00a      	b.n	8007b90 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007b80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	4619      	mov	r1, r3
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f001 fbe7 	bl	800935c <USBD_LL_StallEP>
      break;
 8007b8e:	bf00      	nop
  }

  return USBD_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b086      	sub	sp, #24
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	60f8      	str	r0, [r7, #12]
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	607a      	str	r2, [r7, #4]
 8007ba6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007ba8:	7afb      	ldrb	r3, [r7, #11]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d14b      	bne.n	8007c46 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007bb4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007bbc:	2b03      	cmp	r3, #3
 8007bbe:	d134      	bne.n	8007c2a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	68da      	ldr	r2, [r3, #12]
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d919      	bls.n	8007c00 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	68da      	ldr	r2, [r3, #12]
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	1ad2      	subs	r2, r2, r3
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	68da      	ldr	r2, [r3, #12]
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d203      	bcs.n	8007bee <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	e002      	b.n	8007bf4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	6879      	ldr	r1, [r7, #4]
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f000 ff7b 	bl	8008af4 <USBD_CtlContinueRx>
 8007bfe:	e038      	b.n	8007c72 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00a      	beq.n	8007c22 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007c12:	2b03      	cmp	r3, #3
 8007c14:	d105      	bne.n	8007c22 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f000 ff78 	bl	8008b18 <USBD_CtlSendStatus>
 8007c28:	e023      	b.n	8007c72 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c30:	2b05      	cmp	r3, #5
 8007c32:	d11e      	bne.n	8007c72 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f001 fb8c 	bl	800935c <USBD_LL_StallEP>
 8007c44:	e015      	b.n	8007c72 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00d      	beq.n	8007c6e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007c58:	2b03      	cmp	r3, #3
 8007c5a:	d108      	bne.n	8007c6e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c62:	699b      	ldr	r3, [r3, #24]
 8007c64:	7afa      	ldrb	r2, [r7, #11]
 8007c66:	4611      	mov	r1, r2
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	4798      	blx	r3
 8007c6c:	e001      	b.n	8007c72 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007c6e:	2302      	movs	r3, #2
 8007c70:	e000      	b.n	8007c74 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3718      	adds	r7, #24
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	460b      	mov	r3, r1
 8007c86:	607a      	str	r2, [r7, #4]
 8007c88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007c8a:	7afb      	ldrb	r3, [r7, #11]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d17f      	bne.n	8007d90 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	3314      	adds	r3, #20
 8007c94:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d15c      	bne.n	8007d5a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	68da      	ldr	r2, [r3, #12]
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d915      	bls.n	8007cd8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	68da      	ldr	r2, [r3, #12]
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	1ad2      	subs	r2, r2, r3
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	6879      	ldr	r1, [r7, #4]
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f000 fee5 	bl	8008a94 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cca:	2300      	movs	r3, #0
 8007ccc:	2200      	movs	r2, #0
 8007cce:	2100      	movs	r1, #0
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f001 fc45 	bl	8009560 <USBD_LL_PrepareReceive>
 8007cd6:	e04e      	b.n	8007d76 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	697a      	ldr	r2, [r7, #20]
 8007cde:	6912      	ldr	r2, [r2, #16]
 8007ce0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ce4:	fb02 f201 	mul.w	r2, r2, r1
 8007ce8:	1a9b      	subs	r3, r3, r2
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d11c      	bne.n	8007d28 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	689a      	ldr	r2, [r3, #8]
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d316      	bcc.n	8007d28 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	689a      	ldr	r2, [r3, #8]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d20f      	bcs.n	8007d28 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007d08:	2200      	movs	r2, #0
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f000 fec1 	bl	8008a94 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	2100      	movs	r1, #0
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f001 fc1d 	bl	8009560 <USBD_LL_PrepareReceive>
 8007d26:	e026      	b.n	8007d76 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00a      	beq.n	8007d4a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007d3a:	2b03      	cmp	r3, #3
 8007d3c:	d105      	bne.n	8007d4a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007d4a:	2180      	movs	r1, #128	; 0x80
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f001 fb05 	bl	800935c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f000 fef3 	bl	8008b3e <USBD_CtlReceiveStatus>
 8007d58:	e00d      	b.n	8007d76 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d60:	2b04      	cmp	r3, #4
 8007d62:	d004      	beq.n	8007d6e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d103      	bne.n	8007d76 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007d6e:	2180      	movs	r1, #128	; 0x80
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f001 faf3 	bl	800935c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d11d      	bne.n	8007dbc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f7ff fe82 	bl	8007a8a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007d8e:	e015      	b.n	8007dbc <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d96:	695b      	ldr	r3, [r3, #20]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00d      	beq.n	8007db8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007da2:	2b03      	cmp	r3, #3
 8007da4:	d108      	bne.n	8007db8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	7afa      	ldrb	r2, [r7, #11]
 8007db0:	4611      	mov	r1, r2
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	4798      	blx	r3
 8007db6:	e001      	b.n	8007dbc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007db8:	2302      	movs	r3, #2
 8007dba:	e000      	b.n	8007dbe <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3718      	adds	r7, #24
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b082      	sub	sp, #8
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007dce:	2340      	movs	r3, #64	; 0x40
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f001 fa4d 	bl	8009274 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2240      	movs	r2, #64	; 0x40
 8007de6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007dea:	2340      	movs	r3, #64	; 0x40
 8007dec:	2200      	movs	r2, #0
 8007dee:	2180      	movs	r1, #128	; 0x80
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f001 fa3f 	bl	8009274 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2240      	movs	r2, #64	; 0x40
 8007e00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2201      	movs	r2, #1
 8007e06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d009      	beq.n	8007e3e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	6852      	ldr	r2, [r2, #4]
 8007e36:	b2d2      	uxtb	r2, r2
 8007e38:	4611      	mov	r1, r2
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	4798      	blx	r3
  }

  return USBD_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	460b      	mov	r3, r1
 8007e52:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	78fa      	ldrb	r2, [r7, #3]
 8007e58:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2204      	movs	r2, #4
 8007e80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr

08007e92 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007e92:	b480      	push	{r7}
 8007e94:	b083      	sub	sp, #12
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ea0:	2b04      	cmp	r3, #4
 8007ea2:	d105      	bne.n	8007eb0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b082      	sub	sp, #8
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ecc:	2b03      	cmp	r3, #3
 8007ece:	d10b      	bne.n	8007ee8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ed6:	69db      	ldr	r3, [r3, #28]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d005      	beq.n	8007ee8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ee2:	69db      	ldr	r3, [r3, #28]
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
	...

08007ef4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007efe:	2300      	movs	r3, #0
 8007f00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f0a:	2b20      	cmp	r3, #32
 8007f0c:	d004      	beq.n	8007f18 <USBD_StdDevReq+0x24>
 8007f0e:	2b40      	cmp	r3, #64	; 0x40
 8007f10:	d002      	beq.n	8007f18 <USBD_StdDevReq+0x24>
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d008      	beq.n	8007f28 <USBD_StdDevReq+0x34>
 8007f16:	e04c      	b.n	8007fb2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	6839      	ldr	r1, [r7, #0]
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	4798      	blx	r3
      break;
 8007f26:	e049      	b.n	8007fbc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	785b      	ldrb	r3, [r3, #1]
 8007f2c:	2b09      	cmp	r3, #9
 8007f2e:	d83a      	bhi.n	8007fa6 <USBD_StdDevReq+0xb2>
 8007f30:	a201      	add	r2, pc, #4	; (adr r2, 8007f38 <USBD_StdDevReq+0x44>)
 8007f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f36:	bf00      	nop
 8007f38:	08007f89 	.word	0x08007f89
 8007f3c:	08007f9d 	.word	0x08007f9d
 8007f40:	08007fa7 	.word	0x08007fa7
 8007f44:	08007f93 	.word	0x08007f93
 8007f48:	08007fa7 	.word	0x08007fa7
 8007f4c:	08007f6b 	.word	0x08007f6b
 8007f50:	08007f61 	.word	0x08007f61
 8007f54:	08007fa7 	.word	0x08007fa7
 8007f58:	08007f7f 	.word	0x08007f7f
 8007f5c:	08007f75 	.word	0x08007f75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007f60:	6839      	ldr	r1, [r7, #0]
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 f9d4 	bl	8008310 <USBD_GetDescriptor>
          break;
 8007f68:	e022      	b.n	8007fb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fb61 	bl	8008634 <USBD_SetAddress>
          break;
 8007f72:	e01d      	b.n	8007fb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fb9e 	bl	80086b8 <USBD_SetConfig>
          break;
 8007f7c:	e018      	b.n	8007fb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007f7e:	6839      	ldr	r1, [r7, #0]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fc27 	bl	80087d4 <USBD_GetConfig>
          break;
 8007f86:	e013      	b.n	8007fb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007f88:	6839      	ldr	r1, [r7, #0]
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fc56 	bl	800883c <USBD_GetStatus>
          break;
 8007f90:	e00e      	b.n	8007fb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007f92:	6839      	ldr	r1, [r7, #0]
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 fc84 	bl	80088a2 <USBD_SetFeature>
          break;
 8007f9a:	e009      	b.n	8007fb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fc93 	bl	80088ca <USBD_ClrFeature>
          break;
 8007fa4:	e004      	b.n	8007fb0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007fa6:	6839      	ldr	r1, [r7, #0]
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fcec 	bl	8008986 <USBD_CtlError>
          break;
 8007fae:	bf00      	nop
      }
      break;
 8007fb0:	e004      	b.n	8007fbc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fce6 	bl	8008986 <USBD_CtlError>
      break;
 8007fba:	bf00      	nop
  }

  return ret;
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop

08007fc8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fde:	2b20      	cmp	r3, #32
 8007fe0:	d003      	beq.n	8007fea <USBD_StdItfReq+0x22>
 8007fe2:	2b40      	cmp	r3, #64	; 0x40
 8007fe4:	d001      	beq.n	8007fea <USBD_StdItfReq+0x22>
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d12a      	bne.n	8008040 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d81d      	bhi.n	8008032 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	889b      	ldrh	r3, [r3, #4]
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d813      	bhi.n	8008028 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	4798      	blx	r3
 800800e:	4603      	mov	r3, r0
 8008010:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	88db      	ldrh	r3, [r3, #6]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d110      	bne.n	800803c <USBD_StdItfReq+0x74>
 800801a:	7bfb      	ldrb	r3, [r7, #15]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10d      	bne.n	800803c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 fd79 	bl	8008b18 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008026:	e009      	b.n	800803c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008028:	6839      	ldr	r1, [r7, #0]
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 fcab 	bl	8008986 <USBD_CtlError>
          break;
 8008030:	e004      	b.n	800803c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fca6 	bl	8008986 <USBD_CtlError>
          break;
 800803a:	e000      	b.n	800803e <USBD_StdItfReq+0x76>
          break;
 800803c:	bf00      	nop
      }
      break;
 800803e:	e004      	b.n	800804a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8008040:	6839      	ldr	r1, [r7, #0]
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 fc9f 	bl	8008986 <USBD_CtlError>
      break;
 8008048:	bf00      	nop
  }

  return USBD_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	889b      	ldrh	r3, [r3, #4]
 8008066:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008070:	2b20      	cmp	r3, #32
 8008072:	d004      	beq.n	800807e <USBD_StdEPReq+0x2a>
 8008074:	2b40      	cmp	r3, #64	; 0x40
 8008076:	d002      	beq.n	800807e <USBD_StdEPReq+0x2a>
 8008078:	2b00      	cmp	r3, #0
 800807a:	d008      	beq.n	800808e <USBD_StdEPReq+0x3a>
 800807c:	e13d      	b.n	80082fa <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	4798      	blx	r3
      break;
 800808c:	e13a      	b.n	8008304 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008096:	2b20      	cmp	r3, #32
 8008098:	d10a      	bne.n	80080b0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	6839      	ldr	r1, [r7, #0]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	4798      	blx	r3
 80080a8:	4603      	mov	r3, r0
 80080aa:	73fb      	strb	r3, [r7, #15]

        return ret;
 80080ac:	7bfb      	ldrb	r3, [r7, #15]
 80080ae:	e12a      	b.n	8008306 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	785b      	ldrb	r3, [r3, #1]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d03e      	beq.n	8008136 <USBD_StdEPReq+0xe2>
 80080b8:	2b03      	cmp	r3, #3
 80080ba:	d002      	beq.n	80080c2 <USBD_StdEPReq+0x6e>
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d070      	beq.n	80081a2 <USBD_StdEPReq+0x14e>
 80080c0:	e115      	b.n	80082ee <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d002      	beq.n	80080d2 <USBD_StdEPReq+0x7e>
 80080cc:	2b03      	cmp	r3, #3
 80080ce:	d015      	beq.n	80080fc <USBD_StdEPReq+0xa8>
 80080d0:	e02b      	b.n	800812a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080d2:	7bbb      	ldrb	r3, [r7, #14]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00c      	beq.n	80080f2 <USBD_StdEPReq+0x9e>
 80080d8:	7bbb      	ldrb	r3, [r7, #14]
 80080da:	2b80      	cmp	r3, #128	; 0x80
 80080dc:	d009      	beq.n	80080f2 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80080de:	7bbb      	ldrb	r3, [r7, #14]
 80080e0:	4619      	mov	r1, r3
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f001 f93a 	bl	800935c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80080e8:	2180      	movs	r1, #128	; 0x80
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f001 f936 	bl	800935c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080f0:	e020      	b.n	8008134 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80080f2:	6839      	ldr	r1, [r7, #0]
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fc46 	bl	8008986 <USBD_CtlError>
              break;
 80080fa:	e01b      	b.n	8008134 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	885b      	ldrh	r3, [r3, #2]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10e      	bne.n	8008122 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008104:	7bbb      	ldrb	r3, [r7, #14]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00b      	beq.n	8008122 <USBD_StdEPReq+0xce>
 800810a:	7bbb      	ldrb	r3, [r7, #14]
 800810c:	2b80      	cmp	r3, #128	; 0x80
 800810e:	d008      	beq.n	8008122 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	88db      	ldrh	r3, [r3, #6]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d104      	bne.n	8008122 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008118:	7bbb      	ldrb	r3, [r7, #14]
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f001 f91d 	bl	800935c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fcf8 	bl	8008b18 <USBD_CtlSendStatus>

              break;
 8008128:	e004      	b.n	8008134 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fc2a 	bl	8008986 <USBD_CtlError>
              break;
 8008132:	bf00      	nop
          }
          break;
 8008134:	e0e0      	b.n	80082f8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800813c:	2b02      	cmp	r3, #2
 800813e:	d002      	beq.n	8008146 <USBD_StdEPReq+0xf2>
 8008140:	2b03      	cmp	r3, #3
 8008142:	d015      	beq.n	8008170 <USBD_StdEPReq+0x11c>
 8008144:	e026      	b.n	8008194 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008146:	7bbb      	ldrb	r3, [r7, #14]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00c      	beq.n	8008166 <USBD_StdEPReq+0x112>
 800814c:	7bbb      	ldrb	r3, [r7, #14]
 800814e:	2b80      	cmp	r3, #128	; 0x80
 8008150:	d009      	beq.n	8008166 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008152:	7bbb      	ldrb	r3, [r7, #14]
 8008154:	4619      	mov	r1, r3
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f001 f900 	bl	800935c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800815c:	2180      	movs	r1, #128	; 0x80
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f001 f8fc 	bl	800935c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008164:	e01c      	b.n	80081a0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 fc0c 	bl	8008986 <USBD_CtlError>
              break;
 800816e:	e017      	b.n	80081a0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	885b      	ldrh	r3, [r3, #2]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d112      	bne.n	800819e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008178:	7bbb      	ldrb	r3, [r7, #14]
 800817a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800817e:	2b00      	cmp	r3, #0
 8008180:	d004      	beq.n	800818c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008182:	7bbb      	ldrb	r3, [r7, #14]
 8008184:	4619      	mov	r1, r3
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f001 f91e 	bl	80093c8 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fcc3 	bl	8008b18 <USBD_CtlSendStatus>
              }
              break;
 8008192:	e004      	b.n	800819e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008194:	6839      	ldr	r1, [r7, #0]
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fbf5 	bl	8008986 <USBD_CtlError>
              break;
 800819c:	e000      	b.n	80081a0 <USBD_StdEPReq+0x14c>
              break;
 800819e:	bf00      	nop
          }
          break;
 80081a0:	e0aa      	b.n	80082f8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d002      	beq.n	80081b2 <USBD_StdEPReq+0x15e>
 80081ac:	2b03      	cmp	r3, #3
 80081ae:	d032      	beq.n	8008216 <USBD_StdEPReq+0x1c2>
 80081b0:	e097      	b.n	80082e2 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081b2:	7bbb      	ldrb	r3, [r7, #14]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d007      	beq.n	80081c8 <USBD_StdEPReq+0x174>
 80081b8:	7bbb      	ldrb	r3, [r7, #14]
 80081ba:	2b80      	cmp	r3, #128	; 0x80
 80081bc:	d004      	beq.n	80081c8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80081be:	6839      	ldr	r1, [r7, #0]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fbe0 	bl	8008986 <USBD_CtlError>
                break;
 80081c6:	e091      	b.n	80082ec <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	da0b      	bge.n	80081e8 <USBD_StdEPReq+0x194>
 80081d0:	7bbb      	ldrb	r3, [r7, #14]
 80081d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081d6:	4613      	mov	r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	4413      	add	r3, r2
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	3310      	adds	r3, #16
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	4413      	add	r3, r2
 80081e4:	3304      	adds	r3, #4
 80081e6:	e00b      	b.n	8008200 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081e8:	7bbb      	ldrb	r3, [r7, #14]
 80081ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081ee:	4613      	mov	r3, r2
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	4413      	add	r3, r2
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	4413      	add	r3, r2
 80081fe:	3304      	adds	r3, #4
 8008200:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	2200      	movs	r2, #0
 8008206:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	2202      	movs	r2, #2
 800820c:	4619      	mov	r1, r3
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 fc24 	bl	8008a5c <USBD_CtlSendData>
              break;
 8008214:	e06a      	b.n	80082ec <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008216:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800821a:	2b00      	cmp	r3, #0
 800821c:	da11      	bge.n	8008242 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800821e:	7bbb      	ldrb	r3, [r7, #14]
 8008220:	f003 020f 	and.w	r2, r3, #15
 8008224:	6879      	ldr	r1, [r7, #4]
 8008226:	4613      	mov	r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4413      	add	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	440b      	add	r3, r1
 8008230:	3318      	adds	r3, #24
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d117      	bne.n	8008268 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fba3 	bl	8008986 <USBD_CtlError>
                  break;
 8008240:	e054      	b.n	80082ec <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008242:	7bbb      	ldrb	r3, [r7, #14]
 8008244:	f003 020f 	and.w	r2, r3, #15
 8008248:	6879      	ldr	r1, [r7, #4]
 800824a:	4613      	mov	r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	440b      	add	r3, r1
 8008254:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d104      	bne.n	8008268 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800825e:	6839      	ldr	r1, [r7, #0]
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 fb90 	bl	8008986 <USBD_CtlError>
                  break;
 8008266:	e041      	b.n	80082ec <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008268:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800826c:	2b00      	cmp	r3, #0
 800826e:	da0b      	bge.n	8008288 <USBD_StdEPReq+0x234>
 8008270:	7bbb      	ldrb	r3, [r7, #14]
 8008272:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008276:	4613      	mov	r3, r2
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4413      	add	r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	3310      	adds	r3, #16
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	4413      	add	r3, r2
 8008284:	3304      	adds	r3, #4
 8008286:	e00b      	b.n	80082a0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008288:	7bbb      	ldrb	r3, [r7, #14]
 800828a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800828e:	4613      	mov	r3, r2
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	4413      	add	r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	4413      	add	r3, r2
 800829e:	3304      	adds	r3, #4
 80082a0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80082a2:	7bbb      	ldrb	r3, [r7, #14]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d002      	beq.n	80082ae <USBD_StdEPReq+0x25a>
 80082a8:	7bbb      	ldrb	r3, [r7, #14]
 80082aa:	2b80      	cmp	r3, #128	; 0x80
 80082ac:	d103      	bne.n	80082b6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	2200      	movs	r2, #0
 80082b2:	601a      	str	r2, [r3, #0]
 80082b4:	e00e      	b.n	80082d4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80082b6:	7bbb      	ldrb	r3, [r7, #14]
 80082b8:	4619      	mov	r1, r3
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f001 f8ba 	bl	8009434 <USBD_LL_IsStallEP>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d003      	beq.n	80082ce <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	2201      	movs	r2, #1
 80082ca:	601a      	str	r2, [r3, #0]
 80082cc:	e002      	b.n	80082d4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2200      	movs	r2, #0
 80082d2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	2202      	movs	r2, #2
 80082d8:	4619      	mov	r1, r3
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 fbbe 	bl	8008a5c <USBD_CtlSendData>
              break;
 80082e0:	e004      	b.n	80082ec <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80082e2:	6839      	ldr	r1, [r7, #0]
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fb4e 	bl	8008986 <USBD_CtlError>
              break;
 80082ea:	bf00      	nop
          }
          break;
 80082ec:	e004      	b.n	80082f8 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fb48 	bl	8008986 <USBD_CtlError>
          break;
 80082f6:	bf00      	nop
      }
      break;
 80082f8:	e004      	b.n	8008304 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fb42 	bl	8008986 <USBD_CtlError>
      break;
 8008302:	bf00      	nop
  }

  return ret;
 8008304:	7bfb      	ldrb	r3, [r7, #15]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
	...

08008310 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800831a:	2300      	movs	r3, #0
 800831c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800831e:	2300      	movs	r3, #0
 8008320:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008322:	2300      	movs	r3, #0
 8008324:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	885b      	ldrh	r3, [r3, #2]
 800832a:	0a1b      	lsrs	r3, r3, #8
 800832c:	b29b      	uxth	r3, r3
 800832e:	3b01      	subs	r3, #1
 8008330:	2b0e      	cmp	r3, #14
 8008332:	f200 8152 	bhi.w	80085da <USBD_GetDescriptor+0x2ca>
 8008336:	a201      	add	r2, pc, #4	; (adr r2, 800833c <USBD_GetDescriptor+0x2c>)
 8008338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833c:	080083ad 	.word	0x080083ad
 8008340:	080083c5 	.word	0x080083c5
 8008344:	08008405 	.word	0x08008405
 8008348:	080085db 	.word	0x080085db
 800834c:	080085db 	.word	0x080085db
 8008350:	0800857b 	.word	0x0800857b
 8008354:	080085a7 	.word	0x080085a7
 8008358:	080085db 	.word	0x080085db
 800835c:	080085db 	.word	0x080085db
 8008360:	080085db 	.word	0x080085db
 8008364:	080085db 	.word	0x080085db
 8008368:	080085db 	.word	0x080085db
 800836c:	080085db 	.word	0x080085db
 8008370:	080085db 	.word	0x080085db
 8008374:	08008379 	.word	0x08008379
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800837e:	69db      	ldr	r3, [r3, #28]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00b      	beq.n	800839c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800838a:	69db      	ldr	r3, [r3, #28]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	7c12      	ldrb	r2, [r2, #16]
 8008390:	f107 0108 	add.w	r1, r7, #8
 8008394:	4610      	mov	r0, r2
 8008396:	4798      	blx	r3
 8008398:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800839a:	e126      	b.n	80085ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800839c:	6839      	ldr	r1, [r7, #0]
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 faf1 	bl	8008986 <USBD_CtlError>
        err++;
 80083a4:	7afb      	ldrb	r3, [r7, #11]
 80083a6:	3301      	adds	r3, #1
 80083a8:	72fb      	strb	r3, [r7, #11]
      break;
 80083aa:	e11e      	b.n	80085ea <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	7c12      	ldrb	r2, [r2, #16]
 80083b8:	f107 0108 	add.w	r1, r7, #8
 80083bc:	4610      	mov	r0, r2
 80083be:	4798      	blx	r3
 80083c0:	60f8      	str	r0, [r7, #12]
      break;
 80083c2:	e112      	b.n	80085ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	7c1b      	ldrb	r3, [r3, #16]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d10d      	bne.n	80083e8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d4:	f107 0208 	add.w	r2, r7, #8
 80083d8:	4610      	mov	r0, r2
 80083da:	4798      	blx	r3
 80083dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	3301      	adds	r3, #1
 80083e2:	2202      	movs	r2, #2
 80083e4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80083e6:	e100      	b.n	80085ea <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f0:	f107 0208 	add.w	r2, r7, #8
 80083f4:	4610      	mov	r0, r2
 80083f6:	4798      	blx	r3
 80083f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	3301      	adds	r3, #1
 80083fe:	2202      	movs	r2, #2
 8008400:	701a      	strb	r2, [r3, #0]
      break;
 8008402:	e0f2      	b.n	80085ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	885b      	ldrh	r3, [r3, #2]
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b05      	cmp	r3, #5
 800840c:	f200 80ac 	bhi.w	8008568 <USBD_GetDescriptor+0x258>
 8008410:	a201      	add	r2, pc, #4	; (adr r2, 8008418 <USBD_GetDescriptor+0x108>)
 8008412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008416:	bf00      	nop
 8008418:	08008431 	.word	0x08008431
 800841c:	08008465 	.word	0x08008465
 8008420:	08008499 	.word	0x08008499
 8008424:	080084cd 	.word	0x080084cd
 8008428:	08008501 	.word	0x08008501
 800842c:	08008535 	.word	0x08008535
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00b      	beq.n	8008454 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	7c12      	ldrb	r2, [r2, #16]
 8008448:	f107 0108 	add.w	r1, r7, #8
 800844c:	4610      	mov	r0, r2
 800844e:	4798      	blx	r3
 8008450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008452:	e091      	b.n	8008578 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008454:	6839      	ldr	r1, [r7, #0]
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fa95 	bl	8008986 <USBD_CtlError>
            err++;
 800845c:	7afb      	ldrb	r3, [r7, #11]
 800845e:	3301      	adds	r3, #1
 8008460:	72fb      	strb	r3, [r7, #11]
          break;
 8008462:	e089      	b.n	8008578 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00b      	beq.n	8008488 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	7c12      	ldrb	r2, [r2, #16]
 800847c:	f107 0108 	add.w	r1, r7, #8
 8008480:	4610      	mov	r0, r2
 8008482:	4798      	blx	r3
 8008484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008486:	e077      	b.n	8008578 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fa7b 	bl	8008986 <USBD_CtlError>
            err++;
 8008490:	7afb      	ldrb	r3, [r7, #11]
 8008492:	3301      	adds	r3, #1
 8008494:	72fb      	strb	r3, [r7, #11]
          break;
 8008496:	e06f      	b.n	8008578 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00b      	beq.n	80084bc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	7c12      	ldrb	r2, [r2, #16]
 80084b0:	f107 0108 	add.w	r1, r7, #8
 80084b4:	4610      	mov	r0, r2
 80084b6:	4798      	blx	r3
 80084b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084ba:	e05d      	b.n	8008578 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 fa61 	bl	8008986 <USBD_CtlError>
            err++;
 80084c4:	7afb      	ldrb	r3, [r7, #11]
 80084c6:	3301      	adds	r3, #1
 80084c8:	72fb      	strb	r3, [r7, #11]
          break;
 80084ca:	e055      	b.n	8008578 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00b      	beq.n	80084f0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084de:	691b      	ldr	r3, [r3, #16]
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	7c12      	ldrb	r2, [r2, #16]
 80084e4:	f107 0108 	add.w	r1, r7, #8
 80084e8:	4610      	mov	r0, r2
 80084ea:	4798      	blx	r3
 80084ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084ee:	e043      	b.n	8008578 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fa47 	bl	8008986 <USBD_CtlError>
            err++;
 80084f8:	7afb      	ldrb	r3, [r7, #11]
 80084fa:	3301      	adds	r3, #1
 80084fc:	72fb      	strb	r3, [r7, #11]
          break;
 80084fe:	e03b      	b.n	8008578 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008506:	695b      	ldr	r3, [r3, #20]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00b      	beq.n	8008524 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008512:	695b      	ldr	r3, [r3, #20]
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	7c12      	ldrb	r2, [r2, #16]
 8008518:	f107 0108 	add.w	r1, r7, #8
 800851c:	4610      	mov	r0, r2
 800851e:	4798      	blx	r3
 8008520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008522:	e029      	b.n	8008578 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008524:	6839      	ldr	r1, [r7, #0]
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fa2d 	bl	8008986 <USBD_CtlError>
            err++;
 800852c:	7afb      	ldrb	r3, [r7, #11]
 800852e:	3301      	adds	r3, #1
 8008530:	72fb      	strb	r3, [r7, #11]
          break;
 8008532:	e021      	b.n	8008578 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00b      	beq.n	8008558 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	7c12      	ldrb	r2, [r2, #16]
 800854c:	f107 0108 	add.w	r1, r7, #8
 8008550:	4610      	mov	r0, r2
 8008552:	4798      	blx	r3
 8008554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008556:	e00f      	b.n	8008578 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fa13 	bl	8008986 <USBD_CtlError>
            err++;
 8008560:	7afb      	ldrb	r3, [r7, #11]
 8008562:	3301      	adds	r3, #1
 8008564:	72fb      	strb	r3, [r7, #11]
          break;
 8008566:	e007      	b.n	8008578 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008568:	6839      	ldr	r1, [r7, #0]
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 fa0b 	bl	8008986 <USBD_CtlError>
          err++;
 8008570:	7afb      	ldrb	r3, [r7, #11]
 8008572:	3301      	adds	r3, #1
 8008574:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008576:	e038      	b.n	80085ea <USBD_GetDescriptor+0x2da>
 8008578:	e037      	b.n	80085ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	7c1b      	ldrb	r3, [r3, #16]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d109      	bne.n	8008596 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800858a:	f107 0208 	add.w	r2, r7, #8
 800858e:	4610      	mov	r0, r2
 8008590:	4798      	blx	r3
 8008592:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008594:	e029      	b.n	80085ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008596:	6839      	ldr	r1, [r7, #0]
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f9f4 	bl	8008986 <USBD_CtlError>
        err++;
 800859e:	7afb      	ldrb	r3, [r7, #11]
 80085a0:	3301      	adds	r3, #1
 80085a2:	72fb      	strb	r3, [r7, #11]
      break;
 80085a4:	e021      	b.n	80085ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	7c1b      	ldrb	r3, [r3, #16]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d10d      	bne.n	80085ca <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b6:	f107 0208 	add.w	r2, r7, #8
 80085ba:	4610      	mov	r0, r2
 80085bc:	4798      	blx	r3
 80085be:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	3301      	adds	r3, #1
 80085c4:	2207      	movs	r2, #7
 80085c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085c8:	e00f      	b.n	80085ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80085ca:	6839      	ldr	r1, [r7, #0]
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f9da 	bl	8008986 <USBD_CtlError>
        err++;
 80085d2:	7afb      	ldrb	r3, [r7, #11]
 80085d4:	3301      	adds	r3, #1
 80085d6:	72fb      	strb	r3, [r7, #11]
      break;
 80085d8:	e007      	b.n	80085ea <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80085da:	6839      	ldr	r1, [r7, #0]
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 f9d2 	bl	8008986 <USBD_CtlError>
      err++;
 80085e2:	7afb      	ldrb	r3, [r7, #11]
 80085e4:	3301      	adds	r3, #1
 80085e6:	72fb      	strb	r3, [r7, #11]
      break;
 80085e8:	bf00      	nop
  }

  if (err != 0U)
 80085ea:	7afb      	ldrb	r3, [r7, #11]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d11c      	bne.n	800862a <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80085f0:	893b      	ldrh	r3, [r7, #8]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d011      	beq.n	800861a <USBD_GetDescriptor+0x30a>
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	88db      	ldrh	r3, [r3, #6]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00d      	beq.n	800861a <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	88da      	ldrh	r2, [r3, #6]
 8008602:	893b      	ldrh	r3, [r7, #8]
 8008604:	4293      	cmp	r3, r2
 8008606:	bf28      	it	cs
 8008608:	4613      	movcs	r3, r2
 800860a:	b29b      	uxth	r3, r3
 800860c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800860e:	893b      	ldrh	r3, [r7, #8]
 8008610:	461a      	mov	r2, r3
 8008612:	68f9      	ldr	r1, [r7, #12]
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fa21 	bl	8008a5c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	88db      	ldrh	r3, [r3, #6]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d104      	bne.n	800862c <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fa78 	bl	8008b18 <USBD_CtlSendStatus>
 8008628:	e000      	b.n	800862c <USBD_GetDescriptor+0x31c>
    return;
 800862a:	bf00      	nop
    }
  }
}
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop

08008634 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	889b      	ldrh	r3, [r3, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d130      	bne.n	80086a8 <USBD_SetAddress+0x74>
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	88db      	ldrh	r3, [r3, #6]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d12c      	bne.n	80086a8 <USBD_SetAddress+0x74>
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	885b      	ldrh	r3, [r3, #2]
 8008652:	2b7f      	cmp	r3, #127	; 0x7f
 8008654:	d828      	bhi.n	80086a8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	885b      	ldrh	r3, [r3, #2]
 800865a:	b2db      	uxtb	r3, r3
 800865c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008660:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008668:	2b03      	cmp	r3, #3
 800866a:	d104      	bne.n	8008676 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800866c:	6839      	ldr	r1, [r7, #0]
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f989 	bl	8008986 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008674:	e01c      	b.n	80086b0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	7bfa      	ldrb	r2, [r7, #15]
 800867a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800867e:	7bfb      	ldrb	r3, [r7, #15]
 8008680:	4619      	mov	r1, r3
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fefc 	bl	8009480 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 fa45 	bl	8008b18 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800868e:	7bfb      	ldrb	r3, [r7, #15]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d004      	beq.n	800869e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2202      	movs	r2, #2
 8008698:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800869c:	e008      	b.n	80086b0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2201      	movs	r2, #1
 80086a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086a6:	e003      	b.n	80086b0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80086a8:	6839      	ldr	r1, [r7, #0]
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f96b 	bl	8008986 <USBD_CtlError>
  }
}
 80086b0:	bf00      	nop
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	885b      	ldrh	r3, [r3, #2]
 80086c6:	b2da      	uxtb	r2, r3
 80086c8:	4b41      	ldr	r3, [pc, #260]	; (80087d0 <USBD_SetConfig+0x118>)
 80086ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80086cc:	4b40      	ldr	r3, [pc, #256]	; (80087d0 <USBD_SetConfig+0x118>)
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d904      	bls.n	80086de <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80086d4:	6839      	ldr	r1, [r7, #0]
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 f955 	bl	8008986 <USBD_CtlError>
 80086dc:	e075      	b.n	80087ca <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d002      	beq.n	80086ee <USBD_SetConfig+0x36>
 80086e8:	2b03      	cmp	r3, #3
 80086ea:	d023      	beq.n	8008734 <USBD_SetConfig+0x7c>
 80086ec:	e062      	b.n	80087b4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80086ee:	4b38      	ldr	r3, [pc, #224]	; (80087d0 <USBD_SetConfig+0x118>)
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d01a      	beq.n	800872c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80086f6:	4b36      	ldr	r3, [pc, #216]	; (80087d0 <USBD_SetConfig+0x118>)
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	461a      	mov	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2203      	movs	r2, #3
 8008704:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008708:	4b31      	ldr	r3, [pc, #196]	; (80087d0 <USBD_SetConfig+0x118>)
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	4619      	mov	r1, r3
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f7ff f9c6 	bl	8007aa0 <USBD_SetClassConfig>
 8008714:	4603      	mov	r3, r0
 8008716:	2b02      	cmp	r3, #2
 8008718:	d104      	bne.n	8008724 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800871a:	6839      	ldr	r1, [r7, #0]
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 f932 	bl	8008986 <USBD_CtlError>
            return;
 8008722:	e052      	b.n	80087ca <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 f9f7 	bl	8008b18 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800872a:	e04e      	b.n	80087ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f9f3 	bl	8008b18 <USBD_CtlSendStatus>
        break;
 8008732:	e04a      	b.n	80087ca <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008734:	4b26      	ldr	r3, [pc, #152]	; (80087d0 <USBD_SetConfig+0x118>)
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d112      	bne.n	8008762 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2202      	movs	r2, #2
 8008740:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008744:	4b22      	ldr	r3, [pc, #136]	; (80087d0 <USBD_SetConfig+0x118>)
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	461a      	mov	r2, r3
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800874e:	4b20      	ldr	r3, [pc, #128]	; (80087d0 <USBD_SetConfig+0x118>)
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	4619      	mov	r1, r3
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f7ff f9c2 	bl	8007ade <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f9dc 	bl	8008b18 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008760:	e033      	b.n	80087ca <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008762:	4b1b      	ldr	r3, [pc, #108]	; (80087d0 <USBD_SetConfig+0x118>)
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	461a      	mov	r2, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	429a      	cmp	r2, r3
 800876e:	d01d      	beq.n	80087ac <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	b2db      	uxtb	r3, r3
 8008776:	4619      	mov	r1, r3
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f7ff f9b0 	bl	8007ade <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800877e:	4b14      	ldr	r3, [pc, #80]	; (80087d0 <USBD_SetConfig+0x118>)
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	461a      	mov	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008788:	4b11      	ldr	r3, [pc, #68]	; (80087d0 <USBD_SetConfig+0x118>)
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	4619      	mov	r1, r3
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f7ff f986 	bl	8007aa0 <USBD_SetClassConfig>
 8008794:	4603      	mov	r3, r0
 8008796:	2b02      	cmp	r3, #2
 8008798:	d104      	bne.n	80087a4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f8f2 	bl	8008986 <USBD_CtlError>
            return;
 80087a2:	e012      	b.n	80087ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f9b7 	bl	8008b18 <USBD_CtlSendStatus>
        break;
 80087aa:	e00e      	b.n	80087ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f9b3 	bl	8008b18 <USBD_CtlSendStatus>
        break;
 80087b2:	e00a      	b.n	80087ca <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 f8e5 	bl	8008986 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80087bc:	4b04      	ldr	r3, [pc, #16]	; (80087d0 <USBD_SetConfig+0x118>)
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	4619      	mov	r1, r3
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7ff f98b 	bl	8007ade <USBD_ClrClassConfig>
        break;
 80087c8:	bf00      	nop
    }
  }
}
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	20000329 	.word	0x20000329

080087d4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	88db      	ldrh	r3, [r3, #6]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d004      	beq.n	80087f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80087e6:	6839      	ldr	r1, [r7, #0]
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 f8cc 	bl	8008986 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80087ee:	e021      	b.n	8008834 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	db17      	blt.n	800882a <USBD_GetConfig+0x56>
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	dd02      	ble.n	8008804 <USBD_GetConfig+0x30>
 80087fe:	2b03      	cmp	r3, #3
 8008800:	d00b      	beq.n	800881a <USBD_GetConfig+0x46>
 8008802:	e012      	b.n	800882a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	3308      	adds	r3, #8
 800880e:	2201      	movs	r2, #1
 8008810:	4619      	mov	r1, r3
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f922 	bl	8008a5c <USBD_CtlSendData>
        break;
 8008818:	e00c      	b.n	8008834 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	3304      	adds	r3, #4
 800881e:	2201      	movs	r2, #1
 8008820:	4619      	mov	r1, r3
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f91a 	bl	8008a5c <USBD_CtlSendData>
        break;
 8008828:	e004      	b.n	8008834 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800882a:	6839      	ldr	r1, [r7, #0]
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 f8aa 	bl	8008986 <USBD_CtlError>
        break;
 8008832:	bf00      	nop
}
 8008834:	bf00      	nop
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800884c:	3b01      	subs	r3, #1
 800884e:	2b02      	cmp	r3, #2
 8008850:	d81e      	bhi.n	8008890 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	88db      	ldrh	r3, [r3, #6]
 8008856:	2b02      	cmp	r3, #2
 8008858:	d004      	beq.n	8008864 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800885a:	6839      	ldr	r1, [r7, #0]
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f892 	bl	8008986 <USBD_CtlError>
        break;
 8008862:	e01a      	b.n	800889a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008870:	2b00      	cmp	r3, #0
 8008872:	d005      	beq.n	8008880 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	f043 0202 	orr.w	r2, r3, #2
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	330c      	adds	r3, #12
 8008884:	2202      	movs	r2, #2
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f8e7 	bl	8008a5c <USBD_CtlSendData>
      break;
 800888e:	e004      	b.n	800889a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008890:	6839      	ldr	r1, [r7, #0]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f877 	bl	8008986 <USBD_CtlError>
      break;
 8008898:	bf00      	nop
  }
}
 800889a:	bf00      	nop
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b082      	sub	sp, #8
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	885b      	ldrh	r3, [r3, #2]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d106      	bne.n	80088c2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f92b 	bl	8008b18 <USBD_CtlSendStatus>
  }
}
 80088c2:	bf00      	nop
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b082      	sub	sp, #8
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
 80088d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088da:	3b01      	subs	r3, #1
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d80b      	bhi.n	80088f8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	885b      	ldrh	r3, [r3, #2]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d10c      	bne.n	8008902 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 f911 	bl	8008b18 <USBD_CtlSendStatus>
      }
      break;
 80088f6:	e004      	b.n	8008902 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80088f8:	6839      	ldr	r1, [r7, #0]
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f843 	bl	8008986 <USBD_CtlError>
      break;
 8008900:	e000      	b.n	8008904 <USBD_ClrFeature+0x3a>
      break;
 8008902:	bf00      	nop
  }
}
 8008904:	bf00      	nop
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	781a      	ldrb	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	785a      	ldrb	r2, [r3, #1]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	3302      	adds	r3, #2
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	b29a      	uxth	r2, r3
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	3303      	adds	r3, #3
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	b29b      	uxth	r3, r3
 8008936:	021b      	lsls	r3, r3, #8
 8008938:	b29b      	uxth	r3, r3
 800893a:	4413      	add	r3, r2
 800893c:	b29a      	uxth	r2, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	3304      	adds	r3, #4
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	b29a      	uxth	r2, r3
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	3305      	adds	r3, #5
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	b29b      	uxth	r3, r3
 8008952:	021b      	lsls	r3, r3, #8
 8008954:	b29b      	uxth	r3, r3
 8008956:	4413      	add	r3, r2
 8008958:	b29a      	uxth	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	3306      	adds	r3, #6
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	b29a      	uxth	r2, r3
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	3307      	adds	r3, #7
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	b29b      	uxth	r3, r3
 800896e:	021b      	lsls	r3, r3, #8
 8008970:	b29b      	uxth	r3, r3
 8008972:	4413      	add	r3, r2
 8008974:	b29a      	uxth	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	80da      	strh	r2, [r3, #6]

}
 800897a:	bf00      	nop
 800897c:	370c      	adds	r7, #12
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr

08008986 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b082      	sub	sp, #8
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
 800898e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008990:	2180      	movs	r1, #128	; 0x80
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 fce2 	bl	800935c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008998:	2100      	movs	r1, #0
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 fcde 	bl	800935c <USBD_LL_StallEP>
}
 80089a0:	bf00      	nop
 80089a2:	3708      	adds	r7, #8
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b086      	sub	sp, #24
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80089b4:	2300      	movs	r3, #0
 80089b6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d032      	beq.n	8008a24 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f000 f834 	bl	8008a2c <USBD_GetLen>
 80089c4:	4603      	mov	r3, r0
 80089c6:	3301      	adds	r3, #1
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	005b      	lsls	r3, r3, #1
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80089d2:	7dfb      	ldrb	r3, [r7, #23]
 80089d4:	1c5a      	adds	r2, r3, #1
 80089d6:	75fa      	strb	r2, [r7, #23]
 80089d8:	461a      	mov	r2, r3
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	4413      	add	r3, r2
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	7812      	ldrb	r2, [r2, #0]
 80089e2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80089e4:	7dfb      	ldrb	r3, [r7, #23]
 80089e6:	1c5a      	adds	r2, r3, #1
 80089e8:	75fa      	strb	r2, [r7, #23]
 80089ea:	461a      	mov	r2, r3
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	4413      	add	r3, r2
 80089f0:	2203      	movs	r2, #3
 80089f2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80089f4:	e012      	b.n	8008a1c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	1c5a      	adds	r2, r3, #1
 80089fa:	60fa      	str	r2, [r7, #12]
 80089fc:	7dfa      	ldrb	r2, [r7, #23]
 80089fe:	1c51      	adds	r1, r2, #1
 8008a00:	75f9      	strb	r1, [r7, #23]
 8008a02:	4611      	mov	r1, r2
 8008a04:	68ba      	ldr	r2, [r7, #8]
 8008a06:	440a      	add	r2, r1
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008a0c:	7dfb      	ldrb	r3, [r7, #23]
 8008a0e:	1c5a      	adds	r2, r3, #1
 8008a10:	75fa      	strb	r2, [r7, #23]
 8008a12:	461a      	mov	r2, r3
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	4413      	add	r3, r2
 8008a18:	2200      	movs	r2, #0
 8008a1a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d1e8      	bne.n	80089f6 <USBD_GetString+0x4e>
    }
  }
}
 8008a24:	bf00      	nop
 8008a26:	3718      	adds	r7, #24
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008a34:	2300      	movs	r3, #0
 8008a36:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008a38:	e005      	b.n	8008a46 <USBD_GetLen+0x1a>
  {
    len++;
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	3301      	adds	r3, #1
 8008a44:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1f5      	bne.n	8008a3a <USBD_GetLen+0xe>
  }

  return len;
 8008a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3714      	adds	r7, #20
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	4613      	mov	r3, r2
 8008a68:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2202      	movs	r2, #2
 8008a6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008a72:	88fa      	ldrh	r2, [r7, #6]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008a78:	88fa      	ldrh	r2, [r7, #6]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a7e:	88fb      	ldrh	r3, [r7, #6]
 8008a80:	68ba      	ldr	r2, [r7, #8]
 8008a82:	2100      	movs	r1, #0
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	f000 fd31 	bl	80094ec <USBD_LL_Transmit>

  return USBD_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3710      	adds	r7, #16
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008aa2:	88fb      	ldrh	r3, [r7, #6]
 8008aa4:	68ba      	ldr	r2, [r7, #8]
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f000 fd1f 	bl	80094ec <USBD_LL_Transmit>

  return USBD_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2203      	movs	r2, #3
 8008aca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008ace:	88fa      	ldrh	r2, [r7, #6]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008ad6:	88fa      	ldrh	r2, [r7, #6]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ade:	88fb      	ldrh	r3, [r7, #6]
 8008ae0:	68ba      	ldr	r2, [r7, #8]
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 fd3b 	bl	8009560 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	4613      	mov	r3, r2
 8008b00:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b02:	88fb      	ldrh	r3, [r7, #6]
 8008b04:	68ba      	ldr	r2, [r7, #8]
 8008b06:	2100      	movs	r1, #0
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f000 fd29 	bl	8009560 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2204      	movs	r2, #4
 8008b24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b28:	2300      	movs	r3, #0
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fcdc 	bl	80094ec <USBD_LL_Transmit>

  return USBD_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3708      	adds	r7, #8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b082      	sub	sp, #8
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2205      	movs	r2, #5
 8008b4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b4e:	2300      	movs	r3, #0
 8008b50:	2200      	movs	r2, #0
 8008b52:	2100      	movs	r1, #0
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 fd03 	bl	8009560 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008b68:	2200      	movs	r2, #0
 8008b6a:	4912      	ldr	r1, [pc, #72]	; (8008bb4 <MX_USB_DEVICE_Init+0x50>)
 8008b6c:	4812      	ldr	r0, [pc, #72]	; (8008bb8 <MX_USB_DEVICE_Init+0x54>)
 8008b6e:	f7fe ff3b 	bl	80079e8 <USBD_Init>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d001      	beq.n	8008b7c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008b78:	f7f8 ffd2 	bl	8001b20 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008b7c:	490f      	ldr	r1, [pc, #60]	; (8008bbc <MX_USB_DEVICE_Init+0x58>)
 8008b7e:	480e      	ldr	r0, [pc, #56]	; (8008bb8 <MX_USB_DEVICE_Init+0x54>)
 8008b80:	f7fe ff5d 	bl	8007a3e <USBD_RegisterClass>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d001      	beq.n	8008b8e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008b8a:	f7f8 ffc9 	bl	8001b20 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008b8e:	490c      	ldr	r1, [pc, #48]	; (8008bc0 <MX_USB_DEVICE_Init+0x5c>)
 8008b90:	4809      	ldr	r0, [pc, #36]	; (8008bb8 <MX_USB_DEVICE_Init+0x54>)
 8008b92:	f7fe fe8b 	bl	80078ac <USBD_CDC_RegisterInterface>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d001      	beq.n	8008ba0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008b9c:	f7f8 ffc0 	bl	8001b20 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ba0:	4805      	ldr	r0, [pc, #20]	; (8008bb8 <MX_USB_DEVICE_Init+0x54>)
 8008ba2:	f7fe ff66 	bl	8007a72 <USBD_Start>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d001      	beq.n	8008bb0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008bac:	f7f8 ffb8 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008bb0:	bf00      	nop
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	2000012c 	.word	0x2000012c
 8008bb8:	20000680 	.word	0x20000680
 8008bbc:	20000018 	.word	0x20000018
 8008bc0:	2000011c 	.word	0x2000011c

08008bc4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008bc8:	2200      	movs	r2, #0
 8008bca:	4905      	ldr	r1, [pc, #20]	; (8008be0 <CDC_Init_FS+0x1c>)
 8008bcc:	4805      	ldr	r0, [pc, #20]	; (8008be4 <CDC_Init_FS+0x20>)
 8008bce:	f7fe fe84 	bl	80078da <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008bd2:	4905      	ldr	r1, [pc, #20]	; (8008be8 <CDC_Init_FS+0x24>)
 8008bd4:	4803      	ldr	r0, [pc, #12]	; (8008be4 <CDC_Init_FS+0x20>)
 8008bd6:	f7fe fe9a 	bl	800790e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008bda:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	20000d2c 	.word	0x20000d2c
 8008be4:	20000680 	.word	0x20000680
 8008be8:	20000944 	.word	0x20000944

08008bec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008bec:	b480      	push	{r7}
 8008bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008bf0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	4603      	mov	r3, r0
 8008c04:	6039      	str	r1, [r7, #0]
 8008c06:	71fb      	strb	r3, [r7, #7]
 8008c08:	4613      	mov	r3, r2
 8008c0a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008c0c:	79fb      	ldrb	r3, [r7, #7]
 8008c0e:	2b23      	cmp	r3, #35	; 0x23
 8008c10:	d84a      	bhi.n	8008ca8 <CDC_Control_FS+0xac>
 8008c12:	a201      	add	r2, pc, #4	; (adr r2, 8008c18 <CDC_Control_FS+0x1c>)
 8008c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c18:	08008ca9 	.word	0x08008ca9
 8008c1c:	08008ca9 	.word	0x08008ca9
 8008c20:	08008ca9 	.word	0x08008ca9
 8008c24:	08008ca9 	.word	0x08008ca9
 8008c28:	08008ca9 	.word	0x08008ca9
 8008c2c:	08008ca9 	.word	0x08008ca9
 8008c30:	08008ca9 	.word	0x08008ca9
 8008c34:	08008ca9 	.word	0x08008ca9
 8008c38:	08008ca9 	.word	0x08008ca9
 8008c3c:	08008ca9 	.word	0x08008ca9
 8008c40:	08008ca9 	.word	0x08008ca9
 8008c44:	08008ca9 	.word	0x08008ca9
 8008c48:	08008ca9 	.word	0x08008ca9
 8008c4c:	08008ca9 	.word	0x08008ca9
 8008c50:	08008ca9 	.word	0x08008ca9
 8008c54:	08008ca9 	.word	0x08008ca9
 8008c58:	08008ca9 	.word	0x08008ca9
 8008c5c:	08008ca9 	.word	0x08008ca9
 8008c60:	08008ca9 	.word	0x08008ca9
 8008c64:	08008ca9 	.word	0x08008ca9
 8008c68:	08008ca9 	.word	0x08008ca9
 8008c6c:	08008ca9 	.word	0x08008ca9
 8008c70:	08008ca9 	.word	0x08008ca9
 8008c74:	08008ca9 	.word	0x08008ca9
 8008c78:	08008ca9 	.word	0x08008ca9
 8008c7c:	08008ca9 	.word	0x08008ca9
 8008c80:	08008ca9 	.word	0x08008ca9
 8008c84:	08008ca9 	.word	0x08008ca9
 8008c88:	08008ca9 	.word	0x08008ca9
 8008c8c:	08008ca9 	.word	0x08008ca9
 8008c90:	08008ca9 	.word	0x08008ca9
 8008c94:	08008ca9 	.word	0x08008ca9
 8008c98:	08008ca9 	.word	0x08008ca9
 8008c9c:	08008ca9 	.word	0x08008ca9
 8008ca0:	08008ca9 	.word	0x08008ca9
 8008ca4:	08008ca9 	.word	0x08008ca9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008ca8:	bf00      	nop
  }

  return (USBD_OK);
 8008caa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008cc2:	6879      	ldr	r1, [r7, #4]
 8008cc4:	4805      	ldr	r0, [pc, #20]	; (8008cdc <CDC_Receive_FS+0x24>)
 8008cc6:	f7fe fe22 	bl	800790e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008cca:	4804      	ldr	r0, [pc, #16]	; (8008cdc <CDC_Receive_FS+0x24>)
 8008ccc:	f7fe fe62 	bl	8007994 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008cd0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3708      	adds	r7, #8
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	20000680 	.word	0x20000680

08008ce0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008cf0:	4b0d      	ldr	r3, [pc, #52]	; (8008d28 <CDC_Transmit_FS+0x48>)
 8008cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cf6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008d02:	2301      	movs	r3, #1
 8008d04:	e00b      	b.n	8008d1e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008d06:	887b      	ldrh	r3, [r7, #2]
 8008d08:	461a      	mov	r2, r3
 8008d0a:	6879      	ldr	r1, [r7, #4]
 8008d0c:	4806      	ldr	r0, [pc, #24]	; (8008d28 <CDC_Transmit_FS+0x48>)
 8008d0e:	f7fe fde4 	bl	80078da <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008d12:	4805      	ldr	r0, [pc, #20]	; (8008d28 <CDC_Transmit_FS+0x48>)
 8008d14:	f7fe fe0f 	bl	8007936 <USBD_CDC_TransmitPacket>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	20000680 	.word	0x20000680

08008d2c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	4603      	mov	r3, r0
 8008d34:	6039      	str	r1, [r7, #0]
 8008d36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	2212      	movs	r2, #18
 8008d3c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008d3e:	4b03      	ldr	r3, [pc, #12]	; (8008d4c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	2000014c 	.word	0x2000014c

08008d50 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	4603      	mov	r3, r0
 8008d58:	6039      	str	r1, [r7, #0]
 8008d5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	2204      	movs	r2, #4
 8008d60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008d62:	4b03      	ldr	r3, [pc, #12]	; (8008d70 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr
 8008d70:	2000016c 	.word	0x2000016c

08008d74 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	6039      	str	r1, [r7, #0]
 8008d7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d80:	79fb      	ldrb	r3, [r7, #7]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d105      	bne.n	8008d92 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	4907      	ldr	r1, [pc, #28]	; (8008da8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d8a:	4808      	ldr	r0, [pc, #32]	; (8008dac <USBD_FS_ProductStrDescriptor+0x38>)
 8008d8c:	f7ff fe0c 	bl	80089a8 <USBD_GetString>
 8008d90:	e004      	b.n	8008d9c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	4904      	ldr	r1, [pc, #16]	; (8008da8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d96:	4805      	ldr	r0, [pc, #20]	; (8008dac <USBD_FS_ProductStrDescriptor+0x38>)
 8008d98:	f7ff fe06 	bl	80089a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d9c:	4b02      	ldr	r3, [pc, #8]	; (8008da8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	20001114 	.word	0x20001114
 8008dac:	08009744 	.word	0x08009744

08008db0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	4603      	mov	r3, r0
 8008db8:	6039      	str	r1, [r7, #0]
 8008dba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008dbc:	683a      	ldr	r2, [r7, #0]
 8008dbe:	4904      	ldr	r1, [pc, #16]	; (8008dd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008dc0:	4804      	ldr	r0, [pc, #16]	; (8008dd4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008dc2:	f7ff fdf1 	bl	80089a8 <USBD_GetString>
  return USBD_StrDesc;
 8008dc6:	4b02      	ldr	r3, [pc, #8]	; (8008dd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	20001114 	.word	0x20001114
 8008dd4:	0800975c 	.word	0x0800975c

08008dd8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	4603      	mov	r3, r0
 8008de0:	6039      	str	r1, [r7, #0]
 8008de2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	221a      	movs	r2, #26
 8008de8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008dea:	f000 f855 	bl	8008e98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008dee:	4b02      	ldr	r3, [pc, #8]	; (8008df8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	20000170 	.word	0x20000170

08008dfc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	4603      	mov	r3, r0
 8008e04:	6039      	str	r1, [r7, #0]
 8008e06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e08:	79fb      	ldrb	r3, [r7, #7]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d105      	bne.n	8008e1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	4907      	ldr	r1, [pc, #28]	; (8008e30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e12:	4808      	ldr	r0, [pc, #32]	; (8008e34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e14:	f7ff fdc8 	bl	80089a8 <USBD_GetString>
 8008e18:	e004      	b.n	8008e24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e1a:	683a      	ldr	r2, [r7, #0]
 8008e1c:	4904      	ldr	r1, [pc, #16]	; (8008e30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e1e:	4805      	ldr	r0, [pc, #20]	; (8008e34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e20:	f7ff fdc2 	bl	80089a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e24:	4b02      	ldr	r3, [pc, #8]	; (8008e30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3708      	adds	r7, #8
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	20001114 	.word	0x20001114
 8008e34:	08009770 	.word	0x08009770

08008e38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	4603      	mov	r3, r0
 8008e40:	6039      	str	r1, [r7, #0]
 8008e42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e44:	79fb      	ldrb	r3, [r7, #7]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d105      	bne.n	8008e56 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e4a:	683a      	ldr	r2, [r7, #0]
 8008e4c:	4907      	ldr	r1, [pc, #28]	; (8008e6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e4e:	4808      	ldr	r0, [pc, #32]	; (8008e70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e50:	f7ff fdaa 	bl	80089a8 <USBD_GetString>
 8008e54:	e004      	b.n	8008e60 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e56:	683a      	ldr	r2, [r7, #0]
 8008e58:	4904      	ldr	r1, [pc, #16]	; (8008e6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e5a:	4805      	ldr	r0, [pc, #20]	; (8008e70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e5c:	f7ff fda4 	bl	80089a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e60:	4b02      	ldr	r3, [pc, #8]	; (8008e6c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3708      	adds	r7, #8
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	20001114 	.word	0x20001114
 8008e70:	0800977c 	.word	0x0800977c

08008e74 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	6039      	str	r1, [r7, #0]
 8008e7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	220c      	movs	r2, #12
 8008e84:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008e86:	4b03      	ldr	r3, [pc, #12]	; (8008e94 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	370c      	adds	r7, #12
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	20000160 	.word	0x20000160

08008e98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008e9e:	4b0f      	ldr	r3, [pc, #60]	; (8008edc <Get_SerialNum+0x44>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ea4:	4b0e      	ldr	r3, [pc, #56]	; (8008ee0 <Get_SerialNum+0x48>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008eaa:	4b0e      	ldr	r3, [pc, #56]	; (8008ee4 <Get_SerialNum+0x4c>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d009      	beq.n	8008ed2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008ebe:	2208      	movs	r2, #8
 8008ec0:	4909      	ldr	r1, [pc, #36]	; (8008ee8 <Get_SerialNum+0x50>)
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f000 f814 	bl	8008ef0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ec8:	2204      	movs	r2, #4
 8008eca:	4908      	ldr	r1, [pc, #32]	; (8008eec <Get_SerialNum+0x54>)
 8008ecc:	68b8      	ldr	r0, [r7, #8]
 8008ece:	f000 f80f 	bl	8008ef0 <IntToUnicode>
  }
}
 8008ed2:	bf00      	nop
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	1fff7590 	.word	0x1fff7590
 8008ee0:	1fff7594 	.word	0x1fff7594
 8008ee4:	1fff7598 	.word	0x1fff7598
 8008ee8:	20000172 	.word	0x20000172
 8008eec:	20000182 	.word	0x20000182

08008ef0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b087      	sub	sp, #28
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	4613      	mov	r3, r2
 8008efc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008efe:	2300      	movs	r3, #0
 8008f00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f02:	2300      	movs	r3, #0
 8008f04:	75fb      	strb	r3, [r7, #23]
 8008f06:	e027      	b.n	8008f58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	0f1b      	lsrs	r3, r3, #28
 8008f0c:	2b09      	cmp	r3, #9
 8008f0e:	d80b      	bhi.n	8008f28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	0f1b      	lsrs	r3, r3, #28
 8008f14:	b2da      	uxtb	r2, r3
 8008f16:	7dfb      	ldrb	r3, [r7, #23]
 8008f18:	005b      	lsls	r3, r3, #1
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	440b      	add	r3, r1
 8008f20:	3230      	adds	r2, #48	; 0x30
 8008f22:	b2d2      	uxtb	r2, r2
 8008f24:	701a      	strb	r2, [r3, #0]
 8008f26:	e00a      	b.n	8008f3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	0f1b      	lsrs	r3, r3, #28
 8008f2c:	b2da      	uxtb	r2, r3
 8008f2e:	7dfb      	ldrb	r3, [r7, #23]
 8008f30:	005b      	lsls	r3, r3, #1
 8008f32:	4619      	mov	r1, r3
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	440b      	add	r3, r1
 8008f38:	3237      	adds	r2, #55	; 0x37
 8008f3a:	b2d2      	uxtb	r2, r2
 8008f3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	011b      	lsls	r3, r3, #4
 8008f42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f44:	7dfb      	ldrb	r3, [r7, #23]
 8008f46:	005b      	lsls	r3, r3, #1
 8008f48:	3301      	adds	r3, #1
 8008f4a:	68ba      	ldr	r2, [r7, #8]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	2200      	movs	r2, #0
 8008f50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f52:	7dfb      	ldrb	r3, [r7, #23]
 8008f54:	3301      	adds	r3, #1
 8008f56:	75fb      	strb	r3, [r7, #23]
 8008f58:	7dfa      	ldrb	r2, [r7, #23]
 8008f5a:	79fb      	ldrb	r3, [r7, #7]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d3d3      	bcc.n	8008f08 <IntToUnicode+0x18>
  }
}
 8008f60:	bf00      	nop
 8008f62:	371c      	adds	r7, #28
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b08a      	sub	sp, #40	; 0x28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f74:	f107 0314 	add.w	r3, r7, #20
 8008f78:	2200      	movs	r2, #0
 8008f7a:	601a      	str	r2, [r3, #0]
 8008f7c:	605a      	str	r2, [r3, #4]
 8008f7e:	609a      	str	r2, [r3, #8]
 8008f80:	60da      	str	r2, [r3, #12]
 8008f82:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a1c      	ldr	r2, [pc, #112]	; (8008ffc <HAL_PCD_MspInit+0x90>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d131      	bne.n	8008ff2 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f8e:	4b1c      	ldr	r3, [pc, #112]	; (8009000 <HAL_PCD_MspInit+0x94>)
 8008f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f92:	4a1b      	ldr	r2, [pc, #108]	; (8009000 <HAL_PCD_MspInit+0x94>)
 8008f94:	f043 0301 	orr.w	r3, r3, #1
 8008f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f9a:	4b19      	ldr	r3, [pc, #100]	; (8009000 <HAL_PCD_MspInit+0x94>)
 8008f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f9e:	f003 0301 	and.w	r3, r3, #1
 8008fa2:	613b      	str	r3, [r7, #16]
 8008fa4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008fa6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fac:	2302      	movs	r3, #2
 8008fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 8008fb8:	230a      	movs	r3, #10
 8008fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fbc:	f107 0314 	add.w	r3, r7, #20
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008fc6:	f7f9 f975 	bl	80022b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008fca:	4b0d      	ldr	r3, [pc, #52]	; (8009000 <HAL_PCD_MspInit+0x94>)
 8008fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fce:	4a0c      	ldr	r2, [pc, #48]	; (8009000 <HAL_PCD_MspInit+0x94>)
 8008fd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008fd4:	6593      	str	r3, [r2, #88]	; 0x58
 8008fd6:	4b0a      	ldr	r3, [pc, #40]	; (8009000 <HAL_PCD_MspInit+0x94>)
 8008fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008fde:	60fb      	str	r3, [r7, #12]
 8008fe0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	2043      	movs	r0, #67	; 0x43
 8008fe8:	f7f9 f8ed 	bl	80021c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8008fec:	2043      	movs	r0, #67	; 0x43
 8008fee:	f7f9 f906 	bl	80021fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008ff2:	bf00      	nop
 8008ff4:	3728      	adds	r7, #40	; 0x28
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	40006800 	.word	0x40006800
 8009000:	40021000 	.word	0x40021000

08009004 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8009018:	4619      	mov	r1, r3
 800901a:	4610      	mov	r0, r2
 800901c:	f7fe fd72 	bl	8007b04 <USBD_LL_SetupStage>
}
 8009020:	bf00      	nop
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	460b      	mov	r3, r1
 8009032:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800903a:	78fb      	ldrb	r3, [r7, #3]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	015b      	lsls	r3, r3, #5
 8009040:	4413      	add	r3, r2
 8009042:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	78fb      	ldrb	r3, [r7, #3]
 800904a:	4619      	mov	r1, r3
 800904c:	f7fe fda5 	bl	8007b9a <USBD_LL_DataOutStage>
}
 8009050:	bf00      	nop
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	460b      	mov	r3, r1
 8009062:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800906a:	78fb      	ldrb	r3, [r7, #3]
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	015b      	lsls	r3, r3, #5
 8009070:	4413      	add	r3, r2
 8009072:	333c      	adds	r3, #60	; 0x3c
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	78fb      	ldrb	r3, [r7, #3]
 8009078:	4619      	mov	r1, r3
 800907a:	f7fe fdff 	bl	8007c7c <USBD_LL_DataInStage>
}
 800907e:	bf00      	nop
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b082      	sub	sp, #8
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009094:	4618      	mov	r0, r3
 8009096:	f7fe ff12 	bl	8007ebe <USBD_LL_SOF>
}
 800909a:	bf00      	nop
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b084      	sub	sp, #16
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80090aa:	2301      	movs	r3, #1
 80090ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	d001      	beq.n	80090ba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80090b6:	f7f8 fd33 	bl	8001b20 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80090c0:	7bfa      	ldrb	r2, [r7, #15]
 80090c2:	4611      	mov	r1, r2
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7fe febf 	bl	8007e48 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7fe fe78 	bl	8007dc6 <USBD_LL_Reset>
}
 80090d6:	bf00      	nop
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
	...

080090e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fe feba 	bl	8007e68 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d005      	beq.n	8009108 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090fc:	4b04      	ldr	r3, [pc, #16]	; (8009110 <HAL_PCD_SuspendCallback+0x30>)
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	4a03      	ldr	r2, [pc, #12]	; (8009110 <HAL_PCD_SuspendCallback+0x30>)
 8009102:	f043 0306 	orr.w	r3, r3, #6
 8009106:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009108:	bf00      	nop
 800910a:	3708      	adds	r7, #8
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	e000ed00 	.word	0xe000ed00

08009114 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	699b      	ldr	r3, [r3, #24]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d007      	beq.n	8009134 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009124:	4b08      	ldr	r3, [pc, #32]	; (8009148 <HAL_PCD_ResumeCallback+0x34>)
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	4a07      	ldr	r2, [pc, #28]	; (8009148 <HAL_PCD_ResumeCallback+0x34>)
 800912a:	f023 0306 	bic.w	r3, r3, #6
 800912e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009130:	f000 fab2 	bl	8009698 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800913a:	4618      	mov	r0, r3
 800913c:	f7fe fea9 	bl	8007e92 <USBD_LL_Resume>
}
 8009140:	bf00      	nop
 8009142:	3708      	adds	r7, #8
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	e000ed00 	.word	0xe000ed00

0800914c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8009154:	f7fa fb1e 	bl	8003794 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009158:	4a2b      	ldr	r2, [pc, #172]	; (8009208 <USBD_LL_Init+0xbc>)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  pdev->pData = &hpcd_USB_FS;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a29      	ldr	r2, [pc, #164]	; (8009208 <USBD_LL_Init+0xbc>)
 8009164:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009168:	4b27      	ldr	r3, [pc, #156]	; (8009208 <USBD_LL_Init+0xbc>)
 800916a:	4a28      	ldr	r2, [pc, #160]	; (800920c <USBD_LL_Init+0xc0>)
 800916c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800916e:	4b26      	ldr	r3, [pc, #152]	; (8009208 <USBD_LL_Init+0xbc>)
 8009170:	2208      	movs	r2, #8
 8009172:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009174:	4b24      	ldr	r3, [pc, #144]	; (8009208 <USBD_LL_Init+0xbc>)
 8009176:	2202      	movs	r2, #2
 8009178:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800917a:	4b23      	ldr	r3, [pc, #140]	; (8009208 <USBD_LL_Init+0xbc>)
 800917c:	2202      	movs	r2, #2
 800917e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009180:	4b21      	ldr	r3, [pc, #132]	; (8009208 <USBD_LL_Init+0xbc>)
 8009182:	2200      	movs	r2, #0
 8009184:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009186:	4b20      	ldr	r3, [pc, #128]	; (8009208 <USBD_LL_Init+0xbc>)
 8009188:	2200      	movs	r2, #0
 800918a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800918c:	4b1e      	ldr	r3, [pc, #120]	; (8009208 <USBD_LL_Init+0xbc>)
 800918e:	2200      	movs	r2, #0
 8009190:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009192:	4b1d      	ldr	r3, [pc, #116]	; (8009208 <USBD_LL_Init+0xbc>)
 8009194:	2200      	movs	r2, #0
 8009196:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009198:	481b      	ldr	r0, [pc, #108]	; (8009208 <USBD_LL_Init+0xbc>)
 800919a:	f7f9 fb54 	bl	8002846 <HAL_PCD_Init>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d001      	beq.n	80091a8 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80091a4:	f7f8 fcbc 	bl	8001b20 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091ae:	2318      	movs	r3, #24
 80091b0:	2200      	movs	r2, #0
 80091b2:	2100      	movs	r1, #0
 80091b4:	f7fa fa22 	bl	80035fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091be:	2358      	movs	r3, #88	; 0x58
 80091c0:	2200      	movs	r2, #0
 80091c2:	2180      	movs	r1, #128	; 0x80
 80091c4:	f7fa fa1a 	bl	80035fc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091ce:	23c0      	movs	r3, #192	; 0xc0
 80091d0:	2200      	movs	r2, #0
 80091d2:	2181      	movs	r1, #129	; 0x81
 80091d4:	f7fa fa12 	bl	80035fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091de:	f44f 7388 	mov.w	r3, #272	; 0x110
 80091e2:	2200      	movs	r2, #0
 80091e4:	2101      	movs	r1, #1
 80091e6:	f7fa fa09 	bl	80035fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091f4:	2200      	movs	r2, #0
 80091f6:	2182      	movs	r1, #130	; 0x82
 80091f8:	f7fa fa00 	bl	80035fc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	20001314 	.word	0x20001314
 800920c:	40006800 	.word	0x40006800

08009210 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009218:	2300      	movs	r3, #0
 800921a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800921c:	2300      	movs	r3, #0
 800921e:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009226:	4618      	mov	r0, r3
 8009228:	f7f9 fbf5 	bl	8002a16 <HAL_PCD_Start>
 800922c:	4603      	mov	r3, r0
 800922e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8009230:	7bbb      	ldrb	r3, [r7, #14]
 8009232:	2b03      	cmp	r3, #3
 8009234:	d816      	bhi.n	8009264 <USBD_LL_Start+0x54>
 8009236:	a201      	add	r2, pc, #4	; (adr r2, 800923c <USBD_LL_Start+0x2c>)
 8009238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800923c:	0800924d 	.word	0x0800924d
 8009240:	08009253 	.word	0x08009253
 8009244:	08009259 	.word	0x08009259
 8009248:	0800925f 	.word	0x0800925f
    case HAL_OK :
      usb_status = USBD_OK;
 800924c:	2300      	movs	r3, #0
 800924e:	73fb      	strb	r3, [r7, #15]
    break;
 8009250:	e00b      	b.n	800926a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009252:	2302      	movs	r3, #2
 8009254:	73fb      	strb	r3, [r7, #15]
    break;
 8009256:	e008      	b.n	800926a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009258:	2301      	movs	r3, #1
 800925a:	73fb      	strb	r3, [r7, #15]
    break;
 800925c:	e005      	b.n	800926a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800925e:	2302      	movs	r3, #2
 8009260:	73fb      	strb	r3, [r7, #15]
    break;
 8009262:	e002      	b.n	800926a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8009264:	2302      	movs	r3, #2
 8009266:	73fb      	strb	r3, [r7, #15]
    break;
 8009268:	bf00      	nop
  }
  return usb_status;
 800926a:	7bfb      	ldrb	r3, [r7, #15]
}
 800926c:	4618      	mov	r0, r3
 800926e:	3710      	adds	r7, #16
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	4608      	mov	r0, r1
 800927e:	4611      	mov	r1, r2
 8009280:	461a      	mov	r2, r3
 8009282:	4603      	mov	r3, r0
 8009284:	70fb      	strb	r3, [r7, #3]
 8009286:	460b      	mov	r3, r1
 8009288:	70bb      	strb	r3, [r7, #2]
 800928a:	4613      	mov	r3, r2
 800928c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800928e:	2300      	movs	r3, #0
 8009290:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009292:	2300      	movs	r3, #0
 8009294:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800929c:	78bb      	ldrb	r3, [r7, #2]
 800929e:	883a      	ldrh	r2, [r7, #0]
 80092a0:	78f9      	ldrb	r1, [r7, #3]
 80092a2:	f7f9 fd4d 	bl	8002d40 <HAL_PCD_EP_Open>
 80092a6:	4603      	mov	r3, r0
 80092a8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80092aa:	7bbb      	ldrb	r3, [r7, #14]
 80092ac:	2b03      	cmp	r3, #3
 80092ae:	d817      	bhi.n	80092e0 <USBD_LL_OpenEP+0x6c>
 80092b0:	a201      	add	r2, pc, #4	; (adr r2, 80092b8 <USBD_LL_OpenEP+0x44>)
 80092b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b6:	bf00      	nop
 80092b8:	080092c9 	.word	0x080092c9
 80092bc:	080092cf 	.word	0x080092cf
 80092c0:	080092d5 	.word	0x080092d5
 80092c4:	080092db 	.word	0x080092db
    case HAL_OK :
      usb_status = USBD_OK;
 80092c8:	2300      	movs	r3, #0
 80092ca:	73fb      	strb	r3, [r7, #15]
    break;
 80092cc:	e00b      	b.n	80092e6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80092ce:	2302      	movs	r3, #2
 80092d0:	73fb      	strb	r3, [r7, #15]
    break;
 80092d2:	e008      	b.n	80092e6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80092d4:	2301      	movs	r3, #1
 80092d6:	73fb      	strb	r3, [r7, #15]
    break;
 80092d8:	e005      	b.n	80092e6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80092da:	2302      	movs	r3, #2
 80092dc:	73fb      	strb	r3, [r7, #15]
    break;
 80092de:	e002      	b.n	80092e6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80092e0:	2302      	movs	r3, #2
 80092e2:	73fb      	strb	r3, [r7, #15]
    break;
 80092e4:	bf00      	nop
  }
  return usb_status;
 80092e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	460b      	mov	r3, r1
 80092fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009300:	2300      	movs	r3, #0
 8009302:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800930a:	78fa      	ldrb	r2, [r7, #3]
 800930c:	4611      	mov	r1, r2
 800930e:	4618      	mov	r0, r3
 8009310:	f7f9 fd76 	bl	8002e00 <HAL_PCD_EP_Close>
 8009314:	4603      	mov	r3, r0
 8009316:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8009318:	7bbb      	ldrb	r3, [r7, #14]
 800931a:	2b03      	cmp	r3, #3
 800931c:	d816      	bhi.n	800934c <USBD_LL_CloseEP+0x5c>
 800931e:	a201      	add	r2, pc, #4	; (adr r2, 8009324 <USBD_LL_CloseEP+0x34>)
 8009320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009324:	08009335 	.word	0x08009335
 8009328:	0800933b 	.word	0x0800933b
 800932c:	08009341 	.word	0x08009341
 8009330:	08009347 	.word	0x08009347
    case HAL_OK :
      usb_status = USBD_OK;
 8009334:	2300      	movs	r3, #0
 8009336:	73fb      	strb	r3, [r7, #15]
    break;
 8009338:	e00b      	b.n	8009352 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800933a:	2302      	movs	r3, #2
 800933c:	73fb      	strb	r3, [r7, #15]
    break;
 800933e:	e008      	b.n	8009352 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009340:	2301      	movs	r3, #1
 8009342:	73fb      	strb	r3, [r7, #15]
    break;
 8009344:	e005      	b.n	8009352 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009346:	2302      	movs	r3, #2
 8009348:	73fb      	strb	r3, [r7, #15]
    break;
 800934a:	e002      	b.n	8009352 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800934c:	2302      	movs	r3, #2
 800934e:	73fb      	strb	r3, [r7, #15]
    break;
 8009350:	bf00      	nop
  }
  return usb_status;  
 8009352:	7bfb      	ldrb	r3, [r7, #15]
}
 8009354:	4618      	mov	r0, r3
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	460b      	mov	r3, r1
 8009366:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009368:	2300      	movs	r3, #0
 800936a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800936c:	2300      	movs	r3, #0
 800936e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009376:	78fa      	ldrb	r2, [r7, #3]
 8009378:	4611      	mov	r1, r2
 800937a:	4618      	mov	r0, r3
 800937c:	f7f9 fe0a 	bl	8002f94 <HAL_PCD_EP_SetStall>
 8009380:	4603      	mov	r3, r0
 8009382:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009384:	7bbb      	ldrb	r3, [r7, #14]
 8009386:	2b03      	cmp	r3, #3
 8009388:	d816      	bhi.n	80093b8 <USBD_LL_StallEP+0x5c>
 800938a:	a201      	add	r2, pc, #4	; (adr r2, 8009390 <USBD_LL_StallEP+0x34>)
 800938c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009390:	080093a1 	.word	0x080093a1
 8009394:	080093a7 	.word	0x080093a7
 8009398:	080093ad 	.word	0x080093ad
 800939c:	080093b3 	.word	0x080093b3
    case HAL_OK :
      usb_status = USBD_OK;
 80093a0:	2300      	movs	r3, #0
 80093a2:	73fb      	strb	r3, [r7, #15]
    break;
 80093a4:	e00b      	b.n	80093be <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093a6:	2302      	movs	r3, #2
 80093a8:	73fb      	strb	r3, [r7, #15]
    break;
 80093aa:	e008      	b.n	80093be <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80093ac:	2301      	movs	r3, #1
 80093ae:	73fb      	strb	r3, [r7, #15]
    break;
 80093b0:	e005      	b.n	80093be <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093b2:	2302      	movs	r3, #2
 80093b4:	73fb      	strb	r3, [r7, #15]
    break;
 80093b6:	e002      	b.n	80093be <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80093b8:	2302      	movs	r3, #2
 80093ba:	73fb      	strb	r3, [r7, #15]
    break;
 80093bc:	bf00      	nop
  }
  return usb_status;  
 80093be:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3710      	adds	r7, #16
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	460b      	mov	r3, r1
 80093d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093d4:	2300      	movs	r3, #0
 80093d6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093d8:	2300      	movs	r3, #0
 80093da:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093e2:	78fa      	ldrb	r2, [r7, #3]
 80093e4:	4611      	mov	r1, r2
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7f9 fe2e 	bl	8003048 <HAL_PCD_EP_ClrStall>
 80093ec:	4603      	mov	r3, r0
 80093ee:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80093f0:	7bbb      	ldrb	r3, [r7, #14]
 80093f2:	2b03      	cmp	r3, #3
 80093f4:	d816      	bhi.n	8009424 <USBD_LL_ClearStallEP+0x5c>
 80093f6:	a201      	add	r2, pc, #4	; (adr r2, 80093fc <USBD_LL_ClearStallEP+0x34>)
 80093f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fc:	0800940d 	.word	0x0800940d
 8009400:	08009413 	.word	0x08009413
 8009404:	08009419 	.word	0x08009419
 8009408:	0800941f 	.word	0x0800941f
    case HAL_OK :
      usb_status = USBD_OK;
 800940c:	2300      	movs	r3, #0
 800940e:	73fb      	strb	r3, [r7, #15]
    break;
 8009410:	e00b      	b.n	800942a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009412:	2302      	movs	r3, #2
 8009414:	73fb      	strb	r3, [r7, #15]
    break;
 8009416:	e008      	b.n	800942a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009418:	2301      	movs	r3, #1
 800941a:	73fb      	strb	r3, [r7, #15]
    break;
 800941c:	e005      	b.n	800942a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800941e:	2302      	movs	r3, #2
 8009420:	73fb      	strb	r3, [r7, #15]
    break;
 8009422:	e002      	b.n	800942a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009424:	2302      	movs	r3, #2
 8009426:	73fb      	strb	r3, [r7, #15]
    break;
 8009428:	bf00      	nop
  }
  return usb_status; 
 800942a:	7bfb      	ldrb	r3, [r7, #15]
}
 800942c:	4618      	mov	r0, r3
 800942e:	3710      	adds	r7, #16
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	460b      	mov	r3, r1
 800943e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009446:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8009448:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800944c:	2b00      	cmp	r3, #0
 800944e:	da08      	bge.n	8009462 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009450:	78fb      	ldrb	r3, [r7, #3]
 8009452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	015b      	lsls	r3, r3, #5
 800945a:	4413      	add	r3, r2
 800945c:	332a      	adds	r3, #42	; 0x2a
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	e008      	b.n	8009474 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009462:	78fb      	ldrb	r3, [r7, #3]
 8009464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	015b      	lsls	r3, r3, #5
 800946c:	4413      	add	r3, r2
 800946e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8009472:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009474:	4618      	mov	r0, r3
 8009476:	3714      	adds	r7, #20
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	460b      	mov	r3, r1
 800948a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800948c:	2300      	movs	r3, #0
 800948e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009490:	2300      	movs	r3, #0
 8009492:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800949a:	78fa      	ldrb	r2, [r7, #3]
 800949c:	4611      	mov	r1, r2
 800949e:	4618      	mov	r0, r3
 80094a0:	f7f9 fc29 	bl	8002cf6 <HAL_PCD_SetAddress>
 80094a4:	4603      	mov	r3, r0
 80094a6:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80094a8:	7bbb      	ldrb	r3, [r7, #14]
 80094aa:	2b03      	cmp	r3, #3
 80094ac:	d816      	bhi.n	80094dc <USBD_LL_SetUSBAddress+0x5c>
 80094ae:	a201      	add	r2, pc, #4	; (adr r2, 80094b4 <USBD_LL_SetUSBAddress+0x34>)
 80094b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b4:	080094c5 	.word	0x080094c5
 80094b8:	080094cb 	.word	0x080094cb
 80094bc:	080094d1 	.word	0x080094d1
 80094c0:	080094d7 	.word	0x080094d7
    case HAL_OK :
      usb_status = USBD_OK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	73fb      	strb	r3, [r7, #15]
    break;
 80094c8:	e00b      	b.n	80094e2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80094ca:	2302      	movs	r3, #2
 80094cc:	73fb      	strb	r3, [r7, #15]
    break;
 80094ce:	e008      	b.n	80094e2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094d0:	2301      	movs	r3, #1
 80094d2:	73fb      	strb	r3, [r7, #15]
    break;
 80094d4:	e005      	b.n	80094e2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094d6:	2302      	movs	r3, #2
 80094d8:	73fb      	strb	r3, [r7, #15]
    break;
 80094da:	e002      	b.n	80094e2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80094dc:	2302      	movs	r3, #2
 80094de:	73fb      	strb	r3, [r7, #15]
    break;
 80094e0:	bf00      	nop
  }
  return usb_status;  
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b086      	sub	sp, #24
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	607a      	str	r2, [r7, #4]
 80094f6:	461a      	mov	r2, r3
 80094f8:	460b      	mov	r3, r1
 80094fa:	72fb      	strb	r3, [r7, #11]
 80094fc:	4613      	mov	r3, r2
 80094fe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009500:	2300      	movs	r3, #0
 8009502:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009504:	2300      	movs	r3, #0
 8009506:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800950e:	893b      	ldrh	r3, [r7, #8]
 8009510:	7af9      	ldrb	r1, [r7, #11]
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	f7f9 fd05 	bl	8002f22 <HAL_PCD_EP_Transmit>
 8009518:	4603      	mov	r3, r0
 800951a:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800951c:	7dbb      	ldrb	r3, [r7, #22]
 800951e:	2b03      	cmp	r3, #3
 8009520:	d816      	bhi.n	8009550 <USBD_LL_Transmit+0x64>
 8009522:	a201      	add	r2, pc, #4	; (adr r2, 8009528 <USBD_LL_Transmit+0x3c>)
 8009524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009528:	08009539 	.word	0x08009539
 800952c:	0800953f 	.word	0x0800953f
 8009530:	08009545 	.word	0x08009545
 8009534:	0800954b 	.word	0x0800954b
    case HAL_OK :
      usb_status = USBD_OK;
 8009538:	2300      	movs	r3, #0
 800953a:	75fb      	strb	r3, [r7, #23]
    break;
 800953c:	e00b      	b.n	8009556 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800953e:	2302      	movs	r3, #2
 8009540:	75fb      	strb	r3, [r7, #23]
    break;
 8009542:	e008      	b.n	8009556 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009544:	2301      	movs	r3, #1
 8009546:	75fb      	strb	r3, [r7, #23]
    break;
 8009548:	e005      	b.n	8009556 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800954a:	2302      	movs	r3, #2
 800954c:	75fb      	strb	r3, [r7, #23]
    break;
 800954e:	e002      	b.n	8009556 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 8009550:	2302      	movs	r3, #2
 8009552:	75fb      	strb	r3, [r7, #23]
    break;
 8009554:	bf00      	nop
  }
  return usb_status;    
 8009556:	7dfb      	ldrb	r3, [r7, #23]
}
 8009558:	4618      	mov	r0, r3
 800955a:	3718      	adds	r7, #24
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b086      	sub	sp, #24
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	607a      	str	r2, [r7, #4]
 800956a:	461a      	mov	r2, r3
 800956c:	460b      	mov	r3, r1
 800956e:	72fb      	strb	r3, [r7, #11]
 8009570:	4613      	mov	r3, r2
 8009572:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009574:	2300      	movs	r3, #0
 8009576:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009578:	2300      	movs	r3, #0
 800957a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009582:	893b      	ldrh	r3, [r7, #8]
 8009584:	7af9      	ldrb	r1, [r7, #11]
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	f7f9 fc7c 	bl	8002e84 <HAL_PCD_EP_Receive>
 800958c:	4603      	mov	r3, r0
 800958e:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8009590:	7dbb      	ldrb	r3, [r7, #22]
 8009592:	2b03      	cmp	r3, #3
 8009594:	d816      	bhi.n	80095c4 <USBD_LL_PrepareReceive+0x64>
 8009596:	a201      	add	r2, pc, #4	; (adr r2, 800959c <USBD_LL_PrepareReceive+0x3c>)
 8009598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800959c:	080095ad 	.word	0x080095ad
 80095a0:	080095b3 	.word	0x080095b3
 80095a4:	080095b9 	.word	0x080095b9
 80095a8:	080095bf 	.word	0x080095bf
    case HAL_OK :
      usb_status = USBD_OK;
 80095ac:	2300      	movs	r3, #0
 80095ae:	75fb      	strb	r3, [r7, #23]
    break;
 80095b0:	e00b      	b.n	80095ca <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80095b2:	2302      	movs	r3, #2
 80095b4:	75fb      	strb	r3, [r7, #23]
    break;
 80095b6:	e008      	b.n	80095ca <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80095b8:	2301      	movs	r3, #1
 80095ba:	75fb      	strb	r3, [r7, #23]
    break;
 80095bc:	e005      	b.n	80095ca <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80095be:	2302      	movs	r3, #2
 80095c0:	75fb      	strb	r3, [r7, #23]
    break;
 80095c2:	e002      	b.n	80095ca <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 80095c4:	2302      	movs	r3, #2
 80095c6:	75fb      	strb	r3, [r7, #23]
    break;
 80095c8:	bf00      	nop
  }
  return usb_status; 
 80095ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3718      	adds	r7, #24
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	460b      	mov	r3, r1
 80095de:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095e6:	78fa      	ldrb	r2, [r7, #3]
 80095e8:	4611      	mov	r1, r2
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7f9 fc84 	bl	8002ef8 <HAL_PCD_EP_GetRxCount>
 80095f0:	4603      	mov	r3, r0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
	...

080095fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	460b      	mov	r3, r1
 8009606:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009608:	78fb      	ldrb	r3, [r7, #3]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d002      	beq.n	8009614 <HAL_PCDEx_LPM_Callback+0x18>
 800960e:	2b01      	cmp	r3, #1
 8009610:	d013      	beq.n	800963a <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8009612:	e023      	b.n	800965c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	699b      	ldr	r3, [r3, #24]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d007      	beq.n	800962c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800961c:	f000 f83c 	bl	8009698 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009620:	4b10      	ldr	r3, [pc, #64]	; (8009664 <HAL_PCDEx_LPM_Callback+0x68>)
 8009622:	691b      	ldr	r3, [r3, #16]
 8009624:	4a0f      	ldr	r2, [pc, #60]	; (8009664 <HAL_PCDEx_LPM_Callback+0x68>)
 8009626:	f023 0306 	bic.w	r3, r3, #6
 800962a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009632:	4618      	mov	r0, r3
 8009634:	f7fe fc2d 	bl	8007e92 <USBD_LL_Resume>
    break;
 8009638:	e010      	b.n	800965c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009640:	4618      	mov	r0, r3
 8009642:	f7fe fc11 	bl	8007e68 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	699b      	ldr	r3, [r3, #24]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d005      	beq.n	800965a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800964e:	4b05      	ldr	r3, [pc, #20]	; (8009664 <HAL_PCDEx_LPM_Callback+0x68>)
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	4a04      	ldr	r2, [pc, #16]	; (8009664 <HAL_PCDEx_LPM_Callback+0x68>)
 8009654:	f043 0306 	orr.w	r3, r3, #6
 8009658:	6113      	str	r3, [r2, #16]
    break;   
 800965a:	bf00      	nop
}
 800965c:	bf00      	nop
 800965e:	3708      	adds	r7, #8
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	e000ed00 	.word	0xe000ed00

08009668 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009670:	4b03      	ldr	r3, [pc, #12]	; (8009680 <USBD_static_malloc+0x18>)
}
 8009672:	4618      	mov	r0, r3
 8009674:	370c      	adds	r7, #12
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop
 8009680:	2000032c 	.word	0x2000032c

08009684 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]

}
 800968c:	bf00      	nop
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009698:	b480      	push	{r7}
 800969a:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800969c:	bf00      	nop
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr
	...

080096a8 <__libc_init_array>:
 80096a8:	b570      	push	{r4, r5, r6, lr}
 80096aa:	4e0d      	ldr	r6, [pc, #52]	; (80096e0 <__libc_init_array+0x38>)
 80096ac:	4c0d      	ldr	r4, [pc, #52]	; (80096e4 <__libc_init_array+0x3c>)
 80096ae:	1ba4      	subs	r4, r4, r6
 80096b0:	10a4      	asrs	r4, r4, #2
 80096b2:	2500      	movs	r5, #0
 80096b4:	42a5      	cmp	r5, r4
 80096b6:	d109      	bne.n	80096cc <__libc_init_array+0x24>
 80096b8:	4e0b      	ldr	r6, [pc, #44]	; (80096e8 <__libc_init_array+0x40>)
 80096ba:	4c0c      	ldr	r4, [pc, #48]	; (80096ec <__libc_init_array+0x44>)
 80096bc:	f000 f836 	bl	800972c <_init>
 80096c0:	1ba4      	subs	r4, r4, r6
 80096c2:	10a4      	asrs	r4, r4, #2
 80096c4:	2500      	movs	r5, #0
 80096c6:	42a5      	cmp	r5, r4
 80096c8:	d105      	bne.n	80096d6 <__libc_init_array+0x2e>
 80096ca:	bd70      	pop	{r4, r5, r6, pc}
 80096cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80096d0:	4798      	blx	r3
 80096d2:	3501      	adds	r5, #1
 80096d4:	e7ee      	b.n	80096b4 <__libc_init_array+0xc>
 80096d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80096da:	4798      	blx	r3
 80096dc:	3501      	adds	r5, #1
 80096de:	e7f2      	b.n	80096c6 <__libc_init_array+0x1e>
 80096e0:	080097f8 	.word	0x080097f8
 80096e4:	080097f8 	.word	0x080097f8
 80096e8:	080097f8 	.word	0x080097f8
 80096ec:	08009800 	.word	0x08009800

080096f0 <memset>:
 80096f0:	4402      	add	r2, r0
 80096f2:	4603      	mov	r3, r0
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d100      	bne.n	80096fa <memset+0xa>
 80096f8:	4770      	bx	lr
 80096fa:	f803 1b01 	strb.w	r1, [r3], #1
 80096fe:	e7f9      	b.n	80096f4 <memset+0x4>

08009700 <strncpy>:
 8009700:	b570      	push	{r4, r5, r6, lr}
 8009702:	3901      	subs	r1, #1
 8009704:	4604      	mov	r4, r0
 8009706:	b902      	cbnz	r2, 800970a <strncpy+0xa>
 8009708:	bd70      	pop	{r4, r5, r6, pc}
 800970a:	4623      	mov	r3, r4
 800970c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8009710:	f803 5b01 	strb.w	r5, [r3], #1
 8009714:	1e56      	subs	r6, r2, #1
 8009716:	b92d      	cbnz	r5, 8009724 <strncpy+0x24>
 8009718:	4414      	add	r4, r2
 800971a:	42a3      	cmp	r3, r4
 800971c:	d0f4      	beq.n	8009708 <strncpy+0x8>
 800971e:	f803 5b01 	strb.w	r5, [r3], #1
 8009722:	e7fa      	b.n	800971a <strncpy+0x1a>
 8009724:	461c      	mov	r4, r3
 8009726:	4632      	mov	r2, r6
 8009728:	e7ed      	b.n	8009706 <strncpy+0x6>
	...

0800972c <_init>:
 800972c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800972e:	bf00      	nop
 8009730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009732:	bc08      	pop	{r3}
 8009734:	469e      	mov	lr, r3
 8009736:	4770      	bx	lr

08009738 <_fini>:
 8009738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973a:	bf00      	nop
 800973c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800973e:	bc08      	pop	{r3}
 8009740:	469e      	mov	lr, r3
 8009742:	4770      	bx	lr
