
Heissluftballon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab74  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800ad04  0800ad04  0001ad04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adb0  0800adb0  0002018c  2**0
                  CONTENTS
  4 .ARM          00000008  0800adb0  0800adb0  0001adb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adb8  0800adb8  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800adb8  0800adb8  0001adb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adc0  0800adc0  0001adc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  0800adc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013f0  2000018c  0800af50  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000157c  0800af50  0002157c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c2f6  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000598a  00000000  00000000  0004c4b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001840  00000000  00000000  00051e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015c8  00000000  00000000  00053680  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000229f4  00000000  00000000  00054c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c3d8  00000000  00000000  0007763c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000abb7a  00000000  00000000  00093a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013f58e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063bc  00000000  00000000  0013f60c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000018c 	.word	0x2000018c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800acec 	.word	0x0800acec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000190 	.word	0x20000190
 80001cc:	0800acec 	.word	0x0800acec

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b30:	f000 b972 	b.w	8000e18 <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f806 	bl	8000b4c <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__udivmoddi4>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	9e08      	ldr	r6, [sp, #32]
 8000b52:	4604      	mov	r4, r0
 8000b54:	4688      	mov	r8, r1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d14b      	bne.n	8000bf2 <__udivmoddi4+0xa6>
 8000b5a:	428a      	cmp	r2, r1
 8000b5c:	4615      	mov	r5, r2
 8000b5e:	d967      	bls.n	8000c30 <__udivmoddi4+0xe4>
 8000b60:	fab2 f282 	clz	r2, r2
 8000b64:	b14a      	cbz	r2, 8000b7a <__udivmoddi4+0x2e>
 8000b66:	f1c2 0720 	rsb	r7, r2, #32
 8000b6a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b6e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b72:	4095      	lsls	r5, r2
 8000b74:	ea47 0803 	orr.w	r8, r7, r3
 8000b78:	4094      	lsls	r4, r2
 8000b7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b7e:	0c23      	lsrs	r3, r4, #16
 8000b80:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b84:	fa1f fc85 	uxth.w	ip, r5
 8000b88:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b8c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b90:	fb07 f10c 	mul.w	r1, r7, ip
 8000b94:	4299      	cmp	r1, r3
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x60>
 8000b98:	18eb      	adds	r3, r5, r3
 8000b9a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b9e:	f080 811b 	bcs.w	8000dd8 <__udivmoddi4+0x28c>
 8000ba2:	4299      	cmp	r1, r3
 8000ba4:	f240 8118 	bls.w	8000dd8 <__udivmoddi4+0x28c>
 8000ba8:	3f02      	subs	r7, #2
 8000baa:	442b      	add	r3, r5
 8000bac:	1a5b      	subs	r3, r3, r1
 8000bae:	b2a4      	uxth	r4, r4
 8000bb0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bb4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bbc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bc0:	45a4      	cmp	ip, r4
 8000bc2:	d909      	bls.n	8000bd8 <__udivmoddi4+0x8c>
 8000bc4:	192c      	adds	r4, r5, r4
 8000bc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bca:	f080 8107 	bcs.w	8000ddc <__udivmoddi4+0x290>
 8000bce:	45a4      	cmp	ip, r4
 8000bd0:	f240 8104 	bls.w	8000ddc <__udivmoddi4+0x290>
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	442c      	add	r4, r5
 8000bd8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bdc:	eba4 040c 	sub.w	r4, r4, ip
 8000be0:	2700      	movs	r7, #0
 8000be2:	b11e      	cbz	r6, 8000bec <__udivmoddi4+0xa0>
 8000be4:	40d4      	lsrs	r4, r2
 8000be6:	2300      	movs	r3, #0
 8000be8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bec:	4639      	mov	r1, r7
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d909      	bls.n	8000c0a <__udivmoddi4+0xbe>
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	f000 80eb 	beq.w	8000dd2 <__udivmoddi4+0x286>
 8000bfc:	2700      	movs	r7, #0
 8000bfe:	e9c6 0100 	strd	r0, r1, [r6]
 8000c02:	4638      	mov	r0, r7
 8000c04:	4639      	mov	r1, r7
 8000c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0a:	fab3 f783 	clz	r7, r3
 8000c0e:	2f00      	cmp	r7, #0
 8000c10:	d147      	bne.n	8000ca2 <__udivmoddi4+0x156>
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d302      	bcc.n	8000c1c <__udivmoddi4+0xd0>
 8000c16:	4282      	cmp	r2, r0
 8000c18:	f200 80fa 	bhi.w	8000e10 <__udivmoddi4+0x2c4>
 8000c1c:	1a84      	subs	r4, r0, r2
 8000c1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	4698      	mov	r8, r3
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	d0e0      	beq.n	8000bec <__udivmoddi4+0xa0>
 8000c2a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c2e:	e7dd      	b.n	8000bec <__udivmoddi4+0xa0>
 8000c30:	b902      	cbnz	r2, 8000c34 <__udivmoddi4+0xe8>
 8000c32:	deff      	udf	#255	; 0xff
 8000c34:	fab2 f282 	clz	r2, r2
 8000c38:	2a00      	cmp	r2, #0
 8000c3a:	f040 808f 	bne.w	8000d5c <__udivmoddi4+0x210>
 8000c3e:	1b49      	subs	r1, r1, r5
 8000c40:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c44:	fa1f f885 	uxth.w	r8, r5
 8000c48:	2701      	movs	r7, #1
 8000c4a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c4e:	0c23      	lsrs	r3, r4, #16
 8000c50:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c58:	fb08 f10c 	mul.w	r1, r8, ip
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x124>
 8000c60:	18eb      	adds	r3, r5, r3
 8000c62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x122>
 8000c68:	4299      	cmp	r1, r3
 8000c6a:	f200 80cd 	bhi.w	8000e08 <__udivmoddi4+0x2bc>
 8000c6e:	4684      	mov	ip, r0
 8000c70:	1a59      	subs	r1, r3, r1
 8000c72:	b2a3      	uxth	r3, r4
 8000c74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c78:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c7c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c80:	fb08 f800 	mul.w	r8, r8, r0
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x14c>
 8000c88:	192c      	adds	r4, r5, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x14a>
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	f200 80b6 	bhi.w	8000e02 <__udivmoddi4+0x2b6>
 8000c96:	4618      	mov	r0, r3
 8000c98:	eba4 0408 	sub.w	r4, r4, r8
 8000c9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca0:	e79f      	b.n	8000be2 <__udivmoddi4+0x96>
 8000ca2:	f1c7 0c20 	rsb	ip, r7, #32
 8000ca6:	40bb      	lsls	r3, r7
 8000ca8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cac:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cb0:	fa01 f407 	lsl.w	r4, r1, r7
 8000cb4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cb8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cbc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cc0:	4325      	orrs	r5, r4
 8000cc2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cc6:	0c2c      	lsrs	r4, r5, #16
 8000cc8:	fb08 3319 	mls	r3, r8, r9, r3
 8000ccc:	fa1f fa8e 	uxth.w	sl, lr
 8000cd0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cd4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cd8:	429c      	cmp	r4, r3
 8000cda:	fa02 f207 	lsl.w	r2, r2, r7
 8000cde:	fa00 f107 	lsl.w	r1, r0, r7
 8000ce2:	d90b      	bls.n	8000cfc <__udivmoddi4+0x1b0>
 8000ce4:	eb1e 0303 	adds.w	r3, lr, r3
 8000ce8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cec:	f080 8087 	bcs.w	8000dfe <__udivmoddi4+0x2b2>
 8000cf0:	429c      	cmp	r4, r3
 8000cf2:	f240 8084 	bls.w	8000dfe <__udivmoddi4+0x2b2>
 8000cf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cfa:	4473      	add	r3, lr
 8000cfc:	1b1b      	subs	r3, r3, r4
 8000cfe:	b2ad      	uxth	r5, r5
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d0c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d10:	45a2      	cmp	sl, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x1da>
 8000d14:	eb1e 0404 	adds.w	r4, lr, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	d26b      	bcs.n	8000df6 <__udivmoddi4+0x2aa>
 8000d1e:	45a2      	cmp	sl, r4
 8000d20:	d969      	bls.n	8000df6 <__udivmoddi4+0x2aa>
 8000d22:	3802      	subs	r0, #2
 8000d24:	4474      	add	r4, lr
 8000d26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d2e:	eba4 040a 	sub.w	r4, r4, sl
 8000d32:	454c      	cmp	r4, r9
 8000d34:	46c2      	mov	sl, r8
 8000d36:	464b      	mov	r3, r9
 8000d38:	d354      	bcc.n	8000de4 <__udivmoddi4+0x298>
 8000d3a:	d051      	beq.n	8000de0 <__udivmoddi4+0x294>
 8000d3c:	2e00      	cmp	r6, #0
 8000d3e:	d069      	beq.n	8000e14 <__udivmoddi4+0x2c8>
 8000d40:	ebb1 050a 	subs.w	r5, r1, sl
 8000d44:	eb64 0403 	sbc.w	r4, r4, r3
 8000d48:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d4c:	40fd      	lsrs	r5, r7
 8000d4e:	40fc      	lsrs	r4, r7
 8000d50:	ea4c 0505 	orr.w	r5, ip, r5
 8000d54:	e9c6 5400 	strd	r5, r4, [r6]
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e747      	b.n	8000bec <__udivmoddi4+0xa0>
 8000d5c:	f1c2 0320 	rsb	r3, r2, #32
 8000d60:	fa20 f703 	lsr.w	r7, r0, r3
 8000d64:	4095      	lsls	r5, r2
 8000d66:	fa01 f002 	lsl.w	r0, r1, r2
 8000d6a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d72:	4338      	orrs	r0, r7
 8000d74:	0c01      	lsrs	r1, r0, #16
 8000d76:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d7a:	fa1f f885 	uxth.w	r8, r5
 8000d7e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d86:	fb07 f308 	mul.w	r3, r7, r8
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d90:	d907      	bls.n	8000da2 <__udivmoddi4+0x256>
 8000d92:	1869      	adds	r1, r5, r1
 8000d94:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d98:	d22f      	bcs.n	8000dfa <__udivmoddi4+0x2ae>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d92d      	bls.n	8000dfa <__udivmoddi4+0x2ae>
 8000d9e:	3f02      	subs	r7, #2
 8000da0:	4429      	add	r1, r5
 8000da2:	1acb      	subs	r3, r1, r3
 8000da4:	b281      	uxth	r1, r0
 8000da6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000daa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db2:	fb00 f308 	mul.w	r3, r0, r8
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x27e>
 8000dba:	1869      	adds	r1, r5, r1
 8000dbc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dc0:	d217      	bcs.n	8000df2 <__udivmoddi4+0x2a6>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d915      	bls.n	8000df2 <__udivmoddi4+0x2a6>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4429      	add	r1, r5
 8000dca:	1ac9      	subs	r1, r1, r3
 8000dcc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dd0:	e73b      	b.n	8000c4a <__udivmoddi4+0xfe>
 8000dd2:	4637      	mov	r7, r6
 8000dd4:	4630      	mov	r0, r6
 8000dd6:	e709      	b.n	8000bec <__udivmoddi4+0xa0>
 8000dd8:	4607      	mov	r7, r0
 8000dda:	e6e7      	b.n	8000bac <__udivmoddi4+0x60>
 8000ddc:	4618      	mov	r0, r3
 8000dde:	e6fb      	b.n	8000bd8 <__udivmoddi4+0x8c>
 8000de0:	4541      	cmp	r1, r8
 8000de2:	d2ab      	bcs.n	8000d3c <__udivmoddi4+0x1f0>
 8000de4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000de8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dec:	3801      	subs	r0, #1
 8000dee:	4613      	mov	r3, r2
 8000df0:	e7a4      	b.n	8000d3c <__udivmoddi4+0x1f0>
 8000df2:	4660      	mov	r0, ip
 8000df4:	e7e9      	b.n	8000dca <__udivmoddi4+0x27e>
 8000df6:	4618      	mov	r0, r3
 8000df8:	e795      	b.n	8000d26 <__udivmoddi4+0x1da>
 8000dfa:	4667      	mov	r7, ip
 8000dfc:	e7d1      	b.n	8000da2 <__udivmoddi4+0x256>
 8000dfe:	4681      	mov	r9, r0
 8000e00:	e77c      	b.n	8000cfc <__udivmoddi4+0x1b0>
 8000e02:	3802      	subs	r0, #2
 8000e04:	442c      	add	r4, r5
 8000e06:	e747      	b.n	8000c98 <__udivmoddi4+0x14c>
 8000e08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e0c:	442b      	add	r3, r5
 8000e0e:	e72f      	b.n	8000c70 <__udivmoddi4+0x124>
 8000e10:	4638      	mov	r0, r7
 8000e12:	e708      	b.n	8000c26 <__udivmoddi4+0xda>
 8000e14:	4637      	mov	r7, r6
 8000e16:	e6e9      	b.n	8000bec <__udivmoddi4+0xa0>

08000e18 <__aeabi_idiv0>:
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <_ZN7AppMainC1Ev>:
 *      Author: marce
 */

#include "AppMain.h"

AppMain::AppMain() {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 fbda 	bl	80015e0 <_ZN5ModelC1Ev>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	33a0      	adds	r3, #160	; 0xa0
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	4611      	mov	r1, r2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 f94c 	bl	80010d2 <_ZN8FXPS7115C1EP5Model>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	33a4      	adds	r3, #164	; 0xa4
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 fa5a 	bl	80012fc <_ZN13MAX31865_TEMPC1EP5Model>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	33a8      	adds	r3, #168	; 0xa8
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	4611      	mov	r1, r2
 8000e50:	4618      	mov	r0, r3
 8000e52:	f001 f864 	bl	8001f1e <_ZN5SHT21C1EP5Model>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	33ac      	adds	r3, #172	; 0xac
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 fc86 	bl	800176c <_ZN10RFM95_LoRaC1Ev>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	33cc      	adds	r3, #204	; 0xcc
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 f97f 	bl	800116c <_ZN3GPSC1EP5Model>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8000e74:	4618      	mov	r0, r3
 8000e76:	f001 f8dd 	bl	8002034 <_ZN7USB_ComC1Ev>

}
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <_ZN7AppMain7initRFMEv>:

void AppMain::initRFM() {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	rfm95.setFrequency(868000000);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	33ac      	adds	r3, #172	; 0xac
 8000e90:	491a      	ldr	r1, [pc, #104]	; (8000efc <_ZN7AppMain7initRFMEv+0x78>)
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 fea0 	bl	8001bd8 <_ZN10RFM95_LoRa12setFrequencyEl>
	rfm95.setTxPower(17, PA_OUTPUT_PA_BOOST_PIN);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	33ac      	adds	r3, #172	; 0xac
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2111      	movs	r1, #17
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 fe5c 	bl	8001b5e <_ZN10RFM95_LoRa10setTxPowerEii>
	rfm95.setSignalBandwidth(31.25E3);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	33ac      	adds	r3, #172	; 0xac
 8000eaa:	f647 2112 	movw	r1, #31250	; 0x7a12
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 ff16 	bl	8001ce0 <_ZN10RFM95_LoRa18setSignalBandwidthEl>
	rfm95.setSpreadingFactor(12);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	33ac      	adds	r3, #172	; 0xac
 8000eb8:	210c      	movs	r1, #12
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 fed0 	bl	8001c60 <_ZN10RFM95_LoRa18setSpreadingFactorEi>
	rfm95.setCodingRate4(5);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	33ac      	adds	r3, #172	; 0xac
 8000ec4:	2105      	movs	r1, #5
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 ffce 	bl	8001e68 <_ZN10RFM95_LoRa14setCodingRate4Ei>
	if (!rfm95.begin(866E6)) {
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	33ac      	adds	r3, #172	; 0xac
 8000ed0:	490b      	ldr	r1, [pc, #44]	; (8000f00 <_ZN7AppMain7initRFMEv+0x7c>)
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 fcf2 	bl	80018bc <_ZN10RFM95_LoRa5beginEl>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	bf0c      	ite	eq
 8000ede:	2301      	moveq	r3, #1
 8000ee0:	2300      	movne	r3, #0
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d005      	beq.n	8000ef4 <_ZN7AppMain7initRFMEv+0x70>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2102      	movs	r1, #2
 8000eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef0:	f001 ffd0 	bl	8002e94 <HAL_GPIO_WritePin>
	}

}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	33bca100 	.word	0x33bca100
 8000f00:	339e1c80 	.word	0x339e1c80

08000f04 <_ZN7AppMain8mainProgEv>:

void AppMain::mainProg() {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b09e      	sub	sp, #120	; 0x78
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

	uint8_t transmitData[TRANSMIT_DATA_LENGTH];
	uint16_t transmitBuffer = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

	for (int counter = 0; counter < TRANSMIT_DATA_LENGTH; counter++) {
 8000f12:	2300      	movs	r3, #0
 8000f14:	677b      	str	r3, [r7, #116]	; 0x74
 8000f16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f18:	2b5e      	cmp	r3, #94	; 0x5e
 8000f1a:	dc09      	bgt.n	8000f30 <_ZN7AppMain8mainProgEv+0x2c>
		transmitData[counter] = 0;
 8000f1c:	f107 020c 	add.w	r2, r7, #12
 8000f20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f22:	4413      	add	r3, r2
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
	for (int counter = 0; counter < TRANSMIT_DATA_LENGTH; counter++) {
 8000f28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	677b      	str	r3, [r7, #116]	; 0x74
 8000f2e:	e7f2      	b.n	8000f16 <_ZN7AppMain8mainProgEv+0x12>
	}

	HAL_Delay(100);
 8000f30:	2064      	movs	r0, #100	; 0x64
 8000f32:	f001 fcc9 	bl	80028c8 <HAL_Delay>
	max31865.init(2);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	33a4      	adds	r3, #164	; 0xa4
 8000f3a:	2102      	movs	r1, #2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 f9ec 	bl	800131a <_ZN13MAX31865_TEMP4initEh>
	fxps7115.fxpInit();
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	33a0      	adds	r3, #160	; 0xa0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f8d2 	bl	80010f0 <_ZN8FXPS71157fxpInitEv>
	gps.init();
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	33cc      	adds	r3, #204	; 0xcc
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 f92d 	bl	80011b0 <_ZN3GPS4initEv>

	initRFM();
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ff94 	bl	8000e84 <_ZN7AppMain7initRFMEv>

	while (1) {
		/*read Sensor Data*/
		sht21.readSHT21Humidity();		//Humidity
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	33a8      	adds	r3, #168	; 0xa8
 8000f60:	4618      	mov	r0, r3
 8000f62:	f001 f835 	bl	8001fd0 <_ZN5SHT2117readSHT21HumidityEv>
		sht21.readSHT21Temp();			//TempOutside
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	33a8      	adds	r3, #168	; 0xa8
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 fffe 	bl	8001f6c <_ZN5SHT2113readSHT21TempEv>
		fxps7115.fxpReadPressure();		//Pressure
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	33a0      	adds	r3, #160	; 0xa0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 f8c5 	bl	8001104 <_ZN8FXPS711515fxpReadPressureEv>
		max31865.readTemp();			//TempInside
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	33a4      	adds	r3, #164	; 0xa4
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 f9ee 	bl	8001360 <_ZN13MAX31865_TEMP8readTempEv>

		/*Prepare for Transmit*/
		/*-------------add start synchron----------------*/
		transmitData[0] = '%';
 8000f84:	2325      	movs	r3, #37	; 0x25
 8000f86:	733b      	strb	r3, [r7, #12]
		transmitData[1] = '*';
 8000f88:	232a      	movs	r3, #42	; 0x2a
 8000f8a:	737b      	strb	r3, [r7, #13]
		transmitData[2] = '!';
 8000f8c:	2321      	movs	r3, #33	; 0x21
 8000f8e:	73bb      	strb	r3, [r7, #14]
		/*-------------Humidity Balloon----------------*/
		transmitBuffer = model.getHumidity();
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 fb82 	bl	800169c <_ZN5Model11getHumidityEv>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		transmitData[3] = transmitBuffer;
 8000f9e:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	73fb      	strb	r3, [r7, #15]
		transmitData[4] = transmitBuffer >> 8;
 8000fa6:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000faa:	121b      	asrs	r3, r3, #8
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	743b      	strb	r3, [r7, #16]
		transmitData[5] = '$';
 8000fb0:	2324      	movs	r3, #36	; 0x24
 8000fb2:	747b      	strb	r3, [r7, #17]
		transmitData[6] = '!';
 8000fb4:	2321      	movs	r3, #33	; 0x21
 8000fb6:	74bb      	strb	r3, [r7, #18]
		/*-------------Temp Outside----------------*/
		transmitBuffer = model.getTempOutside();
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 fbab 	bl	8001716 <_ZN5Model14getTempOutsideEv>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		transmitData[7] = transmitBuffer;
 8000fc6:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	74fb      	strb	r3, [r7, #19]
		transmitData[8] = transmitBuffer >> 8;
 8000fce:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000fd2:	121b      	asrs	r3, r3, #8
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	753b      	strb	r3, [r7, #20]
		transmitData[9] = '$';
 8000fd8:	2324      	movs	r3, #36	; 0x24
 8000fda:	757b      	strb	r3, [r7, #21]
		transmitData[10] = '!';
 8000fdc:	2321      	movs	r3, #33	; 0x21
 8000fde:	75bb      	strb	r3, [r7, #22]
		/*-------------Pressure----------------*/
		transmitBuffer = model.getPressure();
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 fb7a 	bl	80016dc <_ZN5Model11getPressureEv>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		transmitData[11] = transmitBuffer;
 8000fee:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	75fb      	strb	r3, [r7, #23]
		transmitData[12] = transmitBuffer >> 8;
 8000ff6:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000ffa:	121b      	asrs	r3, r3, #8
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	763b      	strb	r3, [r7, #24]
		transmitData[13] = '$';
 8001000:	2324      	movs	r3, #36	; 0x24
 8001002:	767b      	strb	r3, [r7, #25]
		transmitData[14] = '!';
 8001004:	2321      	movs	r3, #33	; 0x21
 8001006:	76bb      	strb	r3, [r7, #26]
		/*-------------Temp Balloon----------------*/
		transmitBuffer = model.getTempInsed();
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4618      	mov	r0, r3
 800100c:	f000 fba0 	bl	8001750 <_ZN5Model12getTempInsedEv>
 8001010:	4603      	mov	r3, r0
 8001012:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		transmitData[15] = transmitBuffer;
 8001016:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800101a:	b2db      	uxtb	r3, r3
 800101c:	76fb      	strb	r3, [r7, #27]
		transmitData[16] = transmitBuffer >> 8;
 800101e:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8001022:	121b      	asrs	r3, r3, #8
 8001024:	b2db      	uxtb	r3, r3
 8001026:	773b      	strb	r3, [r7, #28]
		transmitData[17] = '$';
 8001028:	2324      	movs	r3, #36	; 0x24
 800102a:	777b      	strb	r3, [r7, #29]
		transmitData[18] = '!';
 800102c:	2321      	movs	r3, #33	; 0x21
 800102e:	77bb      	strb	r3, [r7, #30]
		uint8_t offset = 19;	//Fortlaufend zu vorheriger index
 8001030:	2313      	movs	r3, #19
 8001032:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		/*-------------GPS Data----------------*/
		char *gpsDeviceTemp = model.getGPS_Device();
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4618      	mov	r0, r3
 800103a:	f000 fb13 	bl	8001664 <_ZN5Model13getGPS_DeviceEv>
 800103e:	66f8      	str	r0, [r7, #108]	; 0x6c
		for (uint8_t counter = 0; counter < GPS_DATA_SIZE; counter++) {
 8001040:	2300      	movs	r3, #0
 8001042:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8001046:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800104a:	2b4a      	cmp	r3, #74	; 0x4a
 800104c:	d816      	bhi.n	800107c <_ZN7AppMain8mainProgEv+0x178>
			transmitData[offset] = gpsDeviceTemp[counter];
 800104e:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8001052:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001054:	441a      	add	r2, r3
 8001056:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800105a:	7812      	ldrb	r2, [r2, #0]
 800105c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001060:	440b      	add	r3, r1
 8001062:	f803 2c6c 	strb.w	r2, [r3, #-108]
			offset++;
 8001066:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800106a:	3301      	adds	r3, #1
 800106c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		for (uint8_t counter = 0; counter < GPS_DATA_SIZE; counter++) {
 8001070:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8001074:	3301      	adds	r3, #1
 8001076:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 800107a:	e7e4      	b.n	8001046 <_ZN7AppMain8mainProgEv+0x142>
		}
		transmitData[offset+1] = '$';
 800107c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001080:	3301      	adds	r3, #1
 8001082:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001086:	4413      	add	r3, r2
 8001088:	2224      	movs	r2, #36	; 0x24
 800108a:	f803 2c6c 	strb.w	r2, [r3, #-108]
		transmitData[offset+2] = '!';
 800108e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001092:	3302      	adds	r3, #2
 8001094:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001098:	4413      	add	r3, r2
 800109a:	2221      	movs	r2, #33	; 0x21
 800109c:	f803 2c6c 	strb.w	r2, [r3, #-108]


		//rfm95.rfmTransmit(transmitData);
		rfm95.beginPacket();
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	33ac      	adds	r3, #172	; 0xac
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 fc4b 	bl	8001942 <_ZN10RFM95_LoRa11beginPacketEi>
		rfm95.write(transmitData, offset);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	33ac      	adds	r3, #172	; 0xac
 80010b0:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80010b4:	f107 010c 	add.w	r1, r7, #12
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 fc9d 	bl	80019f8 <_ZN10RFM95_LoRa5writeEPKhj>
		rfm95.endPacket();
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	33ac      	adds	r3, #172	; 0xac
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 fc5e 	bl	8001984 <_ZN10RFM95_LoRa9endPacketEv>
		HAL_Delay(1000);
 80010c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010cc:	f001 fbfc 	bl	80028c8 <HAL_Delay>
	}
 80010d0:	e744      	b.n	8000f5c <_ZN7AppMain8mainProgEv+0x58>

080010d2 <_ZN8FXPS7115C1EP5Model>:

#include "FXPS7115.h"



FXPS7115::FXPS7115(Model *model) {
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	6039      	str	r1, [r7, #0]
	// TODO Auto-generated constructor stub
	this->model = model;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	601a      	str	r2, [r3, #0]
}
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4618      	mov	r0, r3
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <_ZN8FXPS71157fxpInitEv>:



void FXPS7115::fxpInit(){
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]


}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <_ZN8FXPS711515fxpReadPressureEv>:
	return(HAL_I2C_Master_Transmit(&hi2c1,FXP_SLAVE_ADDR<<1,(uint8_t*)txBuffer,1,I2C_Timeout));
}



bool FXPS7115::fxpReadPressure(){
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af04      	add	r7, sp, #16
 800110a:	6078      	str	r0, [r7, #4]
	uint8_t data[2] = {0,0};
 800110c:	2300      	movs	r3, #0
 800110e:	733b      	strb	r3, [r7, #12]
 8001110:	2300      	movs	r3, #0
 8001112:	737b      	strb	r3, [r7, #13]

	if(HAL_I2C_Mem_Read(&hi2c1, FXP_SLAVE_ADDR<<1, FXP_SNSDATA0_L_REG, 1, data, 2, I2C_Timeout) != HAL_OK){
 8001114:	2364      	movs	r3, #100	; 0x64
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	2302      	movs	r3, #2
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	2262      	movs	r2, #98	; 0x62
 8001126:	21c0      	movs	r1, #192	; 0xc0
 8001128:	480f      	ldr	r0, [pc, #60]	; (8001168 <_ZN8FXPS711515fxpReadPressureEv+0x64>)
 800112a:	f002 f95d 	bl	80033e8 <HAL_I2C_Mem_Read>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	bf14      	ite	ne
 8001134:	2301      	movne	r3, #1
 8001136:	2300      	moveq	r3, #0
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <_ZN8FXPS711515fxpReadPressureEv+0x3e>
		return 0;
 800113e:	2300      	movs	r3, #0
 8001140:	e00d      	b.n	800115e <_ZN8FXPS711515fxpReadPressureEv+0x5a>
	}

	model->setPressure((data[1]<<8) + data[0]);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6818      	ldr	r0, [r3, #0]
 8001146:	7b7b      	ldrb	r3, [r7, #13]
 8001148:	b29b      	uxth	r3, r3
 800114a:	021b      	lsls	r3, r3, #8
 800114c:	b29a      	uxth	r2, r3
 800114e:	7b3b      	ldrb	r3, [r7, #12]
 8001150:	b29b      	uxth	r3, r3
 8001152:	4413      	add	r3, r2
 8001154:	b29b      	uxth	r3, r3
 8001156:	4619      	mov	r1, r3
 8001158:	f000 faad 	bl	80016b6 <_ZN5Model11setPressureEt>
	return 1;
 800115c:	2301      	movs	r3, #1
}
 800115e:	4618      	mov	r0, r3
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000540 	.word	0x20000540

0800116c <_ZN3GPSC1EP5Model>:


	//extern UART_HandleTypeDef huart2;


GPS::GPS(Model* model) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	711a      	strb	r2, [r3, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	715a      	strb	r2, [r3, #5]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	this->model = model;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	601a      	str	r2, [r3, #0]
	init();
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 f805 	bl	80011b0 <_ZN3GPS4initEv>
}
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <_ZN3GPS4initEv>:
 *
 * @param none
 * @return none
 *
 */
void GPS::init(){
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < GPS_DATA_SIZE; i++) {
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2b4a      	cmp	r3, #74	; 0x4a
 80011c0:	dc0f      	bgt.n	80011e2 <_ZN3GPS4initEv+0x32>
		data[i] = '0';
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	3351      	adds	r3, #81	; 0x51
 80011ca:	2230      	movs	r2, #48	; 0x30
 80011cc:	701a      	strb	r2, [r3, #0]
		GPS_Data[i] = '0';
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4413      	add	r3, r2
 80011d4:	3306      	adds	r3, #6
 80011d6:	2230      	movs	r2, #48	; 0x30
 80011d8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < GPS_DATA_SIZE; i++) {
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	3301      	adds	r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	e7ec      	b.n	80011bc <_ZN3GPS4initEv+0xc>
	}
}
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <_ZN3GPS12gpsInterruptEh>:
*
*
* @param huart UART handle.
* @return None
 */
void GPS::gpsInterrupt(uint8_t rxData) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	70fb      	strb	r3, [r7, #3]
	static uint8_t i = 0;
		/* Receive one byte in interrupt mode */


		/*Check if received byte is a '$' (begin of record) */
		if ((char) rxData == '$') {
 80011fc:	78fb      	ldrb	r3, [r7, #3]
 80011fe:	2b24      	cmp	r3, #36	; 0x24
 8001200:	d105      	bne.n	800120e <_ZN3GPS12gpsInterruptEh+0x1e>
			recordStart = true;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2201      	movs	r2, #1
 8001206:	711a      	strb	r2, [r3, #4]
			i = 0;
 8001208:	4b3b      	ldr	r3, [pc, #236]	; (80012f8 <_ZN3GPS12gpsInterruptEh+0x108>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
		}
		/*Check if received byte is a '\n' (end of record)*/
		if ((char) rxData == '\n') {
 800120e:	78fb      	ldrb	r3, [r7, #3]
 8001210:	2b0a      	cmp	r3, #10
 8001212:	d15a      	bne.n	80012ca <_ZN3GPS12gpsInterruptEh+0xda>
			recordStart = false;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	711a      	strb	r2, [r3, #4]

			if (i > GPS_DATA_SIZE-10) {
 800121a:	4b37      	ldr	r3, [pc, #220]	; (80012f8 <_ZN3GPS12gpsInterruptEh+0x108>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b41      	cmp	r3, #65	; 0x41
 8001220:	d939      	bls.n	8001296 <_ZN3GPS12gpsInterruptEh+0xa6>
				copyCounter = 0;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
				for (int i = 0; i < GPS_DATA_SIZE; i++) {
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2b4a      	cmp	r3, #74	; 0x4a
 8001232:	dc09      	bgt.n	8001248 <_ZN3GPS12gpsInterruptEh+0x58>
					GPS_Data[i] = '0';
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4413      	add	r3, r2
 800123a:	3306      	adds	r3, #6
 800123c:	2230      	movs	r2, #48	; 0x30
 800123e:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < GPS_DATA_SIZE; i++) {
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	3301      	adds	r3, #1
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	e7f2      	b.n	800122e <_ZN3GPS12gpsInterruptEh+0x3e>
				}
				while (data[copyCounter] != '\r' && copyCounter <= 80) {
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800124e:	461a      	mov	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4413      	add	r3, r2
 8001254:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001258:	2b0d      	cmp	r3, #13
 800125a:	d01c      	beq.n	8001296 <_ZN3GPS12gpsInterruptEh+0xa6>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8001262:	2b50      	cmp	r3, #80	; 0x50
 8001264:	d817      	bhi.n	8001296 <_ZN3GPS12gpsInterruptEh+0xa6>
					GPS_Data[copyCounter] = data[copyCounter];
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800126c:	461a      	mov	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8001274:	4619      	mov	r1, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	440b      	add	r3, r1
 8001282:	719a      	strb	r2, [r3, #6]
					copyCounter++;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800128a:	3301      	adds	r3, #1
 800128c:	b2da      	uxtb	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
				while (data[copyCounter] != '\r' && copyCounter <= 80) {
 8001294:	e7d8      	b.n	8001248 <_ZN3GPS12gpsInterruptEh+0x58>
				}
			}
			model->setGPS_Device(GPS_Data);	//set GPS data in Model
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3306      	adds	r3, #6
 800129e:	4619      	mov	r1, r3
 80012a0:	4610      	mov	r0, r2
 80012a2:	f000 f9cf 	bl	8001644 <_ZN5Model13setGPS_DeviceEPc>
			for (int count = 0; count < GPS_DATA_SIZE; count++) {
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	2b4a      	cmp	r3, #74	; 0x4a
 80012ae:	dc09      	bgt.n	80012c4 <_ZN3GPS12gpsInterruptEh+0xd4>
				data[count] = '0';
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	4413      	add	r3, r2
 80012b6:	3351      	adds	r3, #81	; 0x51
 80012b8:	2230      	movs	r2, #48	; 0x30
 80012ba:	701a      	strb	r2, [r3, #0]
			for (int count = 0; count < GPS_DATA_SIZE; count++) {
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	3301      	adds	r3, #1
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	e7f2      	b.n	80012aa <_ZN3GPS12gpsInterruptEh+0xba>
			}
			i = 0;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <_ZN3GPS12gpsInterruptEh+0x108>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
		}

		if (recordStart) {
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	791b      	ldrb	r3, [r3, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00d      	beq.n	80012ee <_ZN3GPS12gpsInterruptEh+0xfe>
			data[i] = rxData;
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <_ZN3GPS12gpsInterruptEh+0x108>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4413      	add	r3, r2
 80012dc:	78fa      	ldrb	r2, [r7, #3]
 80012de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			i++;
 80012e2:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <_ZN3GPS12gpsInterruptEh+0x108>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	3301      	adds	r3, #1
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <_ZN3GPS12gpsInterruptEh+0x108>)
 80012ec:	701a      	strb	r2, [r3, #0]
		}



	}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200001a8 	.word	0x200001a8

080012fc <_ZN13MAX31865_TEMPC1EP5Model>:

#include "MAX31865TEMP.h"

HAL_StatusTypeDef def;

MAX31865_TEMP::MAX31865_TEMP(Model *model) {
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
	// TODO Auto-generated constructor stub
	this->model = model;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	601a      	str	r2, [r3, #0]
}
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <_ZN13MAX31865_TEMP4initEh>:

void MAX31865_TEMP::init(uint8_t wires){
 800131a:	b580      	push	{r7, lr}
 800131c:	b084      	sub	sp, #16
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	460b      	mov	r3, r1
 8001324:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[1];
 HAL_Delay(100);
 8001326:	2064      	movs	r0, #100	; 0x64
 8001328:	f001 face 	bl	80028c8 <HAL_Delay>
  setWires(wires);           // Set 2,3 or 4 wire sensor
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	4619      	mov	r1, r3
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 f920 	bl	8001576 <_ZN13MAX31865_TEMP8setWiresEh>
  HAL_Delay(100);
 8001336:	2064      	movs	r0, #100	; 0x64
 8001338:	f001 fac6 	bl	80028c8 <HAL_Delay>
  enableBias(OFF);           // Disable bias voltage
 800133c:	2100      	movs	r1, #0
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 f8e2 	bl	8001508 <_ZN13MAX31865_TEMP10enableBiasEh>
  HAL_Delay(100);
 8001344:	2064      	movs	r0, #100	; 0x64
 8001346:	f001 fabf 	bl	80028c8 <HAL_Delay>
  autoConvert(OFF);          // Disable auto conversion
 800134a:	2100      	movs	r1, #0
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 f8ed 	bl	800152c <_ZN13MAX31865_TEMP11autoConvertEh>
  HAL_Delay(100);
 8001352:	2064      	movs	r0, #100	; 0x64
 8001354:	f001 fab8 	bl	80028c8 <HAL_Delay>

}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <_ZN13MAX31865_TEMP8readTempEv>:


bool MAX31865_TEMP::readTemp(){
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b089      	sub	sp, #36	; 0x24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]

	uint8_t error;
	uint8_t buff[1];
	MAX31865_read(0x07, buff, 1);
 8001368:	f107 0210 	add.w	r2, r7, #16
 800136c:	2301      	movs	r3, #1
 800136e:	2107      	movs	r1, #7
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f867 	bl	8001444 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh>

    // Activate bias voltage to read sensor data, and wait for the capacitors to fill
    enableBias(ON);
 8001376:	2101      	movs	r1, #1
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 f8c5 	bl	8001508 <_ZN13MAX31865_TEMP10enableBiasEh>
    HAL_Delay(20);
 800137e:	2014      	movs	r0, #20
 8001380:	f001 faa2 	bl	80028c8 <HAL_Delay>
    // Perform a single conversion, and wait for the result
    single_shot();
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 f91b 	bl	80015c0 <_ZN13MAX31865_TEMP11single_shotEv>
    HAL_Delay(100);
 800138a:	2064      	movs	r0, #100	; 0x64
 800138c:	f001 fa9c 	bl	80028c8 <HAL_Delay>
    // Read data from max31865 data registers
    uint8_t buffer[2];
     MAX31865_read(MAX31856_RTDMSB_REG, buffer,2);
 8001390:	f107 020c 	add.w	r2, r7, #12
 8001394:	2302      	movs	r3, #2
 8001396:	2101      	movs	r1, #1
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f000 f853 	bl	8001444 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh>
    // Combine 2 bytes into 1 number, and shift 1 down to remove fault bit
    uint16_t data = buffer[0] << 8;
 800139e:	7b3b      	ldrb	r3, [r7, #12]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	83fb      	strh	r3, [r7, #30]
    data |= buffer[1];
 80013a6:	7b7b      	ldrb	r3, [r7, #13]
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	8bfb      	ldrh	r3, [r7, #30]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	83fb      	strh	r3, [r7, #30]
    data >>= 1;
 80013b0:	8bfb      	ldrh	r3, [r7, #30]
 80013b2:	105b      	asrs	r3, r3, #1
 80013b4:	83fb      	strh	r3, [r7, #30]

    // Disable bias voltage to reduce power usage
    enableBias(OFF);
 80013b6:	2100      	movs	r1, #0
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 f8a5 	bl	8001508 <_ZN13MAX31865_TEMP10enableBiasEh>


    // Calculate the actual resistance of the sensor
    float resistance = ((float) data * RREF) / FACTOR;
 80013be:	8bfb      	ldrh	r3, [r7, #30]
 80013c0:	ee07 3a90 	vmov	s15, r3
 80013c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013c8:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001438 <_ZN13MAX31865_TEMP8readTempEv+0xd8>
 80013cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013d0:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800143c <_ZN13MAX31865_TEMP8readTempEv+0xdc>
 80013d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013d8:	edc7 7a06 	vstr	s15, [r7, #24]
    // Calculate the temperature from the measured resistance
    float temp = ((resistance / 100) - 1) / ALPHA;
 80013dc:	ed97 7a06 	vldr	s14, [r7, #24]
 80013e0:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001440 <_ZN13MAX31865_TEMP8readTempEv+0xe0>
 80013e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013f0:	ee17 0a90 	vmov	r0, s15
 80013f4:	f7ff f850 	bl	8000498 <__aeabi_f2d>
 80013f8:	a30d      	add	r3, pc, #52	; (adr r3, 8001430 <_ZN13MAX31865_TEMP8readTempEv+0xd0>)
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fe:	f7ff f9cd 	bl	800079c <__aeabi_ddiv>
 8001402:	4603      	mov	r3, r0
 8001404:	460c      	mov	r4, r1
 8001406:	4618      	mov	r0, r3
 8001408:	4621      	mov	r1, r4
 800140a:	f7ff fb37 	bl	8000a7c <__aeabi_d2f>
 800140e:	4603      	mov	r3, r0
 8001410:	617b      	str	r3, [r7, #20]



	model->setTempInside(data);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	8bfa      	ldrh	r2, [r7, #30]
 8001418:	4611      	mov	r1, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f988 	bl	8001730 <_ZN5Model13setTempInsideEt>
	return true;
 8001420:	2301      	movs	r3, #1
}
 8001422:	4618      	mov	r0, r3
 8001424:	3724      	adds	r7, #36	; 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd90      	pop	{r4, r7, pc}
 800142a:	bf00      	nop
 800142c:	f3af 8000 	nop.w
 8001430:	e1d2178f 	.word	0xe1d2178f
 8001434:	3f6f8c21 	.word	0x3f6f8c21
 8001438:	43d70000 	.word	0x43d70000
 800143c:	47000000 	.word	0x47000000
 8001440:	42c80000 	.word	0x42c80000

08001444 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh>:
 * @param addr      Register addr to read from
 * @param buffer    Pointer to rx buffer
 * @param len       Amount of bytes to read
 */
void MAX31865_TEMP::MAX31865_read(uint8_t addr, uint8_t *buffer, uint8_t size)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	461a      	mov	r2, r3
 8001450:	460b      	mov	r3, r1
 8001452:	72fb      	strb	r3, [r7, #11]
 8001454:	4613      	mov	r3, r2
 8001456:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef test;
	uint8_t txBuffer[1];
    addr &= ~MAX31865_READ;                             		// Force read bit on address
    txBuffer[0] = addr;
 8001458:	7afb      	ldrb	r3, [r7, #11]
 800145a:	753b      	strb	r3, [r7, #20]
    CLEAR_MAX_CS;          										// Enable CE
 800145c:	2200      	movs	r2, #0
 800145e:	2101      	movs	r1, #1
 8001460:	480f      	ldr	r0, [pc, #60]	; (80014a0 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh+0x5c>)
 8001462:	f001 fd17 	bl	8002e94 <HAL_GPIO_WritePin>
    test = HAL_SPI_Transmit(&hspi1,(uint8_t*)txBuffer,1,500);	//write addr
 8001466:	f107 0114 	add.w	r1, r7, #20
 800146a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800146e:	2201      	movs	r2, #1
 8001470:	480c      	ldr	r0, [pc, #48]	; (80014a4 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh+0x60>)
 8001472:	f004 fbcf 	bl	8005c14 <HAL_SPI_Transmit>
 8001476:	4603      	mov	r3, r0
 8001478:	75fb      	strb	r3, [r7, #23]
    test =HAL_SPI_Receive(&hspi1,(uint8_t*)buffer,size,500);	// Read data
 800147a:	7abb      	ldrb	r3, [r7, #10]
 800147c:	b29a      	uxth	r2, r3
 800147e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	4807      	ldr	r0, [pc, #28]	; (80014a4 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh+0x60>)
 8001486:	f004 fd2b 	bl	8005ee0 <HAL_SPI_Receive>
 800148a:	4603      	mov	r3, r0
 800148c:	75fb      	strb	r3, [r7, #23]
    SET_MAX_CS;          										// Disable CE
 800148e:	2201      	movs	r2, #1
 8001490:	2101      	movs	r1, #1
 8001492:	4803      	ldr	r0, [pc, #12]	; (80014a0 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh+0x5c>)
 8001494:	f001 fcfe 	bl	8002e94 <HAL_GPIO_WritePin>
}
 8001498:	bf00      	nop
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	48000400 	.word	0x48000400
 80014a4:	2000058c 	.word	0x2000058c

080014a8 <_ZN13MAX31865_TEMP14MAX31865_writeEhh>:
 * Write a byte in a MAX13865 register
 *
 * @param addr      Register addr to write to
 * @param buffer    Tx data
 */
void MAX31865_TEMP::MAX31865_write(uint8_t addr, uint8_t data){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	70fb      	strb	r3, [r7, #3]
 80014b4:	4613      	mov	r3, r2
 80014b6:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef test;

	uint8_t txBuffer[2];

	addr |= MAX31865_WRITE;                             // Force write bit on address
 80014b8:	78fb      	ldrb	r3, [r7, #3]
 80014ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014be:	70fb      	strb	r3, [r7, #3]
    txBuffer[0] = addr;
 80014c0:	78fb      	ldrb	r3, [r7, #3]
 80014c2:	733b      	strb	r3, [r7, #12]
    txBuffer[1] = data;
 80014c4:	78bb      	ldrb	r3, [r7, #2]
 80014c6:	737b      	strb	r3, [r7, #13]
    CLEAR_MAX_CS; 									    // Enable CE
 80014c8:	2200      	movs	r2, #0
 80014ca:	2101      	movs	r1, #1
 80014cc:	480c      	ldr	r0, [pc, #48]	; (8001500 <_ZN13MAX31865_TEMP14MAX31865_writeEhh+0x58>)
 80014ce:	f001 fce1 	bl	8002e94 <HAL_GPIO_WritePin>
    test = HAL_SPI_Transmit(&hspi1,(uint8_t*)txBuffer,2,500);				//write addr
 80014d2:	f107 010c 	add.w	r1, r7, #12
 80014d6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014da:	2202      	movs	r2, #2
 80014dc:	4809      	ldr	r0, [pc, #36]	; (8001504 <_ZN13MAX31865_TEMP14MAX31865_writeEhh+0x5c>)
 80014de:	f004 fb99 	bl	8005c14 <HAL_SPI_Transmit>
 80014e2:	4603      	mov	r3, r0
 80014e4:	73fb      	strb	r3, [r7, #15]

    SET_MAX_CS;          								// Disable CE
 80014e6:	2201      	movs	r2, #1
 80014e8:	2101      	movs	r1, #1
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <_ZN13MAX31865_TEMP14MAX31865_writeEhh+0x58>)
 80014ec:	f001 fcd2 	bl	8002e94 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80014f0:	200a      	movs	r0, #10
 80014f2:	f001 f9e9 	bl	80028c8 <HAL_Delay>
}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	48000400 	.word	0x48000400
 8001504:	2000058c 	.word	0x2000058c

08001508 <_ZN13MAX31865_TEMP10enableBiasEh>:
/**
 * Enable of disable MAX831865 bias voltage
 * @param enable Enable of disable
 */
void MAX31865_TEMP::enableBias(uint8_t enable)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	70fb      	strb	r3, [r7, #3]
        status |= MAX31856_CONFIG_BIAS;
    } else
    {
        status &= ~MAX31856_CONFIG_BIAS;
    }*/
    status = 0x80;
 8001514:	2380      	movs	r3, #128	; 0x80
 8001516:	73fb      	strb	r3, [r7, #15]
    MAX31865_write(MAX31856_CONFIG_REG, status);
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	461a      	mov	r2, r3
 800151c:	2100      	movs	r1, #0
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ffc2 	bl	80014a8 <_ZN13MAX31865_TEMP14MAX31865_writeEhh>
}
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <_ZN13MAX31865_TEMP11autoConvertEh>:
/**
 * Enable of disable MAX831865 auto convert
 * @param enable Enable of disable
 */
void MAX31865_TEMP::autoConvert(uint8_t enable)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
    uint8_t status;
    MAX31865_read(MAX31856_CONFIG_REG, &status,1);
 8001538:	f107 020f 	add.w	r2, r7, #15
 800153c:	2301      	movs	r3, #1
 800153e:	2100      	movs	r1, #0
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ff7f 	bl	8001444 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh>
    if (enable)
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <_ZN13MAX31865_TEMP11autoConvertEh+0x2c>
    {
        status |= MAX31856_CONFIG_MODEAUTO;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001552:	b2db      	uxtb	r3, r3
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	e004      	b.n	8001562 <_ZN13MAX31865_TEMP11autoConvertEh+0x36>
    } else
    {
        status &= ~MAX31856_CONFIG_MODEAUTO;
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800155e:	b2db      	uxtb	r3, r3
 8001560:	73fb      	strb	r3, [r7, #15]
    }
    MAX31865_write(MAX31856_CONFIG_REG, status);
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	461a      	mov	r2, r3
 8001566:	2100      	movs	r1, #0
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ff9d 	bl	80014a8 <_ZN13MAX31865_TEMP14MAX31865_writeEhh>
}
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <_ZN13MAX31865_TEMP8setWiresEh>:
/**
 * Set the amount of wires the temperature sensor uses
 * @param numwires 2,3 or 4 wires
 */
void MAX31865_TEMP::setWires(uint8_t numwires)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b084      	sub	sp, #16
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	460b      	mov	r3, r1
 8001580:	70fb      	strb	r3, [r7, #3]
    uint8_t status;
    MAX31865_read(MAX31856_CONFIG_REG, &status,1);
 8001582:	f107 020f 	add.w	r2, r7, #15
 8001586:	2301      	movs	r3, #1
 8001588:	2100      	movs	r1, #0
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ff5a 	bl	8001444 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh>
    if (numwires == 3) // 3-wire
 8001590:	78fb      	ldrb	r3, [r7, #3]
 8001592:	2b03      	cmp	r3, #3
 8001594:	d105      	bne.n	80015a2 <_ZN13MAX31865_TEMP8setWiresEh+0x2c>
    {
        status |= MAX31856_CONFIG_3WIRE;
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	f043 0310 	orr.w	r3, r3, #16
 800159c:	b2db      	uxtb	r3, r3
 800159e:	73fb      	strb	r3, [r7, #15]
 80015a0:	e004      	b.n	80015ac <_ZN13MAX31865_TEMP8setWiresEh+0x36>
    } else // 2-4 wire
    {
        status &= ~MAX31856_CONFIG_3WIRE;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	f023 0310 	bic.w	r3, r3, #16
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	73fb      	strb	r3, [r7, #15]
    }
    MAX31865_write(MAX31856_CONFIG_REG, status);
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	461a      	mov	r2, r3
 80015b0:	2100      	movs	r1, #0
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff ff78 	bl	80014a8 <_ZN13MAX31865_TEMP14MAX31865_writeEhh>
}
 80015b8:	bf00      	nop
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <_ZN13MAX31865_TEMP11single_shotEv>:

/**
 * Perform a single shot conversion
 */
void MAX31865_TEMP::single_shot(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
    uint8_t status;
    // Read config register
   // MAX31865_read(MAX31856_CONFIG_REG, &status,1);
    // Enable 1shot bit, and write back
    //status = MAX31856_CONFIG_1SHOT;
    status = 0xA0;
 80015c8:	23a0      	movs	r3, #160	; 0xa0
 80015ca:	73fb      	strb	r3, [r7, #15]
    MAX31865_write(MAX31856_CONFIG_REG, status);
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	461a      	mov	r2, r3
 80015d0:	2100      	movs	r1, #0
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ff68 	bl	80014a8 <_ZN13MAX31865_TEMP14MAX31865_writeEhh>
}
 80015d8:	bf00      	nop
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <_ZN5ModelC1Ev>:
 *      Author: marce
 */

#include "Model.h"

Model::Model() {
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

	for(uint8_t counter = 0; counter<GPS_DATA_SIZE; counter++){
 80015e8:	2300      	movs	r3, #0
 80015ea:	73fb      	strb	r3, [r7, #15]
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	2b4a      	cmp	r3, #74	; 0x4a
 80015f0:	d80d      	bhi.n	800160e <_ZN5ModelC1Ev+0x2e>
		 gpsGCS[counter] = 11;
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	210b      	movs	r1, #11
 80015f8:	54d1      	strb	r1, [r2, r3]
		 gpsDevice[counter] = 22;
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	4413      	add	r3, r2
 8001600:	2216      	movs	r2, #22
 8001602:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	for(uint8_t counter = 0; counter<GPS_DATA_SIZE; counter++){
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	3301      	adds	r3, #1
 800160a:	73fb      	strb	r3, [r7, #15]
 800160c:	e7ee      	b.n	80015ec <_ZN5ModelC1Ev+0xc>
	}
	 humidity = 0;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
	 pressure = 0;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
	 tempOutisde = 0;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	 tempOutisde8Bit = 0;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	 tempInside = 0;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
}
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4618      	mov	r0, r3
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <_ZN5Model13setGPS_DeviceEPc>:
	//not implemented in Device
	return gpsGCS;
}

//get/set GPS_Device Data
void Model::setGPS_Device(char* data){
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
	strncpy(gpsDevice, data, GPS_DATA_SIZE);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	334b      	adds	r3, #75	; 0x4b
 8001652:	224b      	movs	r2, #75	; 0x4b
 8001654:	6839      	ldr	r1, [r7, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f009 fb32 	bl	800acc0 <strncpy>
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <_ZN5Model13getGPS_DeviceEv>:
char* Model::getGPS_Device(void){
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	return gpsDevice;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	334b      	adds	r3, #75	; 0x4b
}
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <_ZN5Model11setHumidityEt>:

//get/set Humidity
void Model::setHumidity(uint16_t data){
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	807b      	strh	r3, [r7, #2]
	humidity = data;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	887a      	ldrh	r2, [r7, #2]
 800168c:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <_ZN5Model11getHumidityEv>:
uint16_t Model::getHumidity(void){
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	return humidity;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <_ZN5Model11setPressureEt>:

//get/set Pressure
void Model::setPressure(uint16_t data){
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	460b      	mov	r3, r1
 80016c0:	807b      	strh	r3, [r7, #2]
	pressure = (data -32768);
 80016c2:	887b      	ldrh	r3, [r7, #2]
 80016c4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <_ZN5Model11getPressureEv>:
uint16_t Model::getPressure(void){
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	return pressure;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <_ZN5Model14setTempOutsideEt>:

//get/set TempOutise
void Model::setTempOutside(uint16_t data){
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	460b      	mov	r3, r1
 8001700:	807b      	strh	r3, [r7, #2]
	tempOutisde = data;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	887a      	ldrh	r2, [r7, #2]
 8001706:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <_ZN5Model14getTempOutsideEv>:
uint16_t Model::getTempOutside(void){
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
	return tempOutisde;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
}
 8001724:	4618      	mov	r0, r3
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <_ZN5Model13setTempInsideEt>:
uint8_t  Model::getTempOutside8Bit(){
	return tempOutisde8Bit;
}

//get/set TempInside
void Model::setTempInside(uint16_t data){
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	807b      	strh	r3, [r7, #2]
	tempInside = data;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	887a      	ldrh	r2, [r7, #2]
 8001740:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <_ZN5Model12getTempInsedEv>:
uint16_t Model::getTempInsed(void){
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	return tempInside;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <_ZN10RFM95_LoRaC1Ev>:
 */

#include "RFM95LoRa.h"
#include "../../AppMain/AppMain.h"

RFM95_LoRa::RFM95_LoRa() :
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  _frequency(0),
  _packetIndex(0),
  _implicitHeaderMode(0),
  _onReceive(0)
 8001774:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <_ZN10RFM95_LoRaC1Ev+0x34>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	615a      	str	r2, [r3, #20]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
{

}
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	0800ad54 	.word	0x0800ad54

080017a4 <_ZN10RFM95_LoRa9selectRFMEv>:
 * @brief RFM95 chip select
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::selectRFM(){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_RESET);
 80017ac:	2200      	movs	r2, #0
 80017ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b6:	f001 fb6d 	bl	8002e94 <HAL_GPIO_WritePin>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <_ZN10RFM95_LoRa11deselectRFMEv>:
 * @brief RFM95 chip deselect
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::deselectRFM(){
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_SET);
 80017ca:	2201      	movs	r2, #1
 80017cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d4:	f001 fb5e 	bl	8002e94 <HAL_GPIO_WritePin>
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_ZN10RFM95_LoRa8resetRFMEv>:

void RFM95_LoRa::resetRFM(){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_RESET);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2108      	movs	r1, #8
 80017ec:	4808      	ldr	r0, [pc, #32]	; (8001810 <_ZN10RFM95_LoRa8resetRFMEv+0x30>)
 80017ee:	f001 fb51 	bl	8002e94 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80017f2:	2001      	movs	r0, #1
 80017f4:	f001 f868 	bl	80028c8 <HAL_Delay>
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_SET);
 80017f8:	2201      	movs	r2, #1
 80017fa:	2108      	movs	r1, #8
 80017fc:	4804      	ldr	r0, [pc, #16]	; (8001810 <_ZN10RFM95_LoRa8resetRFMEv+0x30>)
 80017fe:	f001 fb49 	bl	8002e94 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001802:	2005      	movs	r0, #5
 8001804:	f001 f860 	bl	80028c8 <HAL_Delay>
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	48000400 	.word	0x48000400

08001814 <_ZN10RFM95_LoRa13writeRegisterEhh>:

bool RFM95_LoRa::writeRegister(uint8_t addr, uint8_t data){
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	70fb      	strb	r3, [r7, #3]
 8001820:	4613      	mov	r3, r2
 8001822:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2] = {(uint8_t)(addr | 0x80), data};
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800182a:	b2db      	uxtb	r3, r3
 800182c:	733b      	strb	r3, [r7, #12]
 800182e:	78bb      	ldrb	r3, [r7, #2]
 8001830:	737b      	strb	r3, [r7, #13]
	selectRFM();
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ffb6 	bl	80017a4 <_ZN10RFM95_LoRa9selectRFMEv>
	if(HAL_SPI_Transmit(&hspi1, (uint8_t*)buff, 2, 100) != HAL_OK){
 8001838:	f107 010c 	add.w	r1, r7, #12
 800183c:	2364      	movs	r3, #100	; 0x64
 800183e:	2202      	movs	r2, #2
 8001840:	480b      	ldr	r0, [pc, #44]	; (8001870 <_ZN10RFM95_LoRa13writeRegisterEhh+0x5c>)
 8001842:	f004 f9e7 	bl	8005c14 <HAL_SPI_Transmit>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	bf14      	ite	ne
 800184c:	2301      	movne	r3, #1
 800184e:	2300      	moveq	r3, #0
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d004      	beq.n	8001860 <_ZN10RFM95_LoRa13writeRegisterEhh+0x4c>
		deselectRFM();
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff ffb3 	bl	80017c2 <_ZN10RFM95_LoRa11deselectRFMEv>
		return false;
 800185c:	2300      	movs	r3, #0
 800185e:	e003      	b.n	8001868 <_ZN10RFM95_LoRa13writeRegisterEhh+0x54>
	}
	deselectRFM();
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ffae 	bl	80017c2 <_ZN10RFM95_LoRa11deselectRFMEv>
	return true;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	2000058c 	.word	0x2000058c

08001874 <_ZN10RFM95_LoRa12readRegisterEh>:

uint8_t RFM95_LoRa::readRegister(uint8_t addr){
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af02      	add	r7, sp, #8
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	70fb      	strb	r3, [r7, #3]
	uint8_t rxData[2] = {0,0};
 8001880:	2300      	movs	r3, #0
 8001882:	733b      	strb	r3, [r7, #12]
 8001884:	2300      	movs	r3, #0
 8001886:	737b      	strb	r3, [r7, #13]
	uint8_t txData[1] = {addr};
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	723b      	strb	r3, [r7, #8]

	selectRFM();
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff89 	bl	80017a4 <_ZN10RFM95_LoRa9selectRFMEv>
		HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)txData,(uint8_t*)rxData,2,100);
 8001892:	f107 020c 	add.w	r2, r7, #12
 8001896:	f107 0108 	add.w	r1, r7, #8
 800189a:	2364      	movs	r3, #100	; 0x64
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	2302      	movs	r3, #2
 80018a0:	4805      	ldr	r0, [pc, #20]	; (80018b8 <_ZN10RFM95_LoRa12readRegisterEh+0x44>)
 80018a2:	f004 fc45 	bl	8006130 <HAL_SPI_TransmitReceive>
	deselectRFM();
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff ff8b 	bl	80017c2 <_ZN10RFM95_LoRa11deselectRFMEv>
	return rxData[1];
 80018ac:	7b7b      	ldrb	r3, [r7, #13]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	2000058c 	.word	0x2000058c

080018bc <_ZN10RFM95_LoRa5beginEl>:


int RFM95_LoRa::begin(long frequency){
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
 resetRFM();
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff ff8a 	bl	80017e0 <_ZN10RFM95_LoRa8resetRFMEv>
  // check version
  uint8_t version = readRegister(REG_VERSION);
 80018cc:	2142      	movs	r1, #66	; 0x42
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff ffd0 	bl	8001874 <_ZN10RFM95_LoRa12readRegisterEh>
 80018d4:	4603      	mov	r3, r0
 80018d6:	73fb      	strb	r3, [r7, #15]
  if (version != 0x12) {
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	2b12      	cmp	r3, #18
 80018dc:	d001      	beq.n	80018e2 <_ZN10RFM95_LoRa5beginEl+0x26>
    return 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	e02b      	b.n	800193a <_ZN10RFM95_LoRa5beginEl+0x7e>
  }
  // put in sleep mode
  sleep();
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f92e 	bl	8001b44 <_ZN10RFM95_LoRa5sleepEv>
  // set frequency
  setFrequency(frequency);
 80018e8:	6839      	ldr	r1, [r7, #0]
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f974 	bl	8001bd8 <_ZN10RFM95_LoRa12setFrequencyEl>
  // set base addresses
  writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
 80018f0:	2200      	movs	r2, #0
 80018f2:	210e      	movs	r1, #14
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ff8d 	bl	8001814 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FIFO_RX_BASE_ADDR, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	210f      	movs	r1, #15
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ff88 	bl	8001814 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set LNA boost
  writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 8001904:	210c      	movs	r1, #12
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ffb4 	bl	8001874 <_ZN10RFM95_LoRa12readRegisterEh>
 800190c:	4603      	mov	r3, r0
 800190e:	f043 0303 	orr.w	r3, r3, #3
 8001912:	b2db      	uxtb	r3, r3
 8001914:	461a      	mov	r2, r3
 8001916:	210c      	movs	r1, #12
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ff7b 	bl	8001814 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set auto AGC
  writeRegister(REG_MODEM_CONFIG_3, 0x04);
 800191e:	2204      	movs	r2, #4
 8001920:	2126      	movs	r1, #38	; 0x26
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ff76 	bl	8001814 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set output power to 17 dBm
  setTxPower(20);
 8001928:	2201      	movs	r2, #1
 800192a:	2114      	movs	r1, #20
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 f916 	bl	8001b5e <_ZN10RFM95_LoRa10setTxPowerEii>
  // put in standby mode
  idle();
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 f8f9 	bl	8001b2a <_ZN10RFM95_LoRa4idleEv>
  return 1;
 8001938:	2301      	movs	r3, #1
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <_ZN10RFM95_LoRa11beginPacketEi>:
  sleep();
}



int RFM95_LoRa::beginPacket(int implicitHeader){
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	6039      	str	r1, [r7, #0]
  // put in standby mode
  idle();
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 f8ec 	bl	8001b2a <_ZN10RFM95_LoRa4idleEv>

  if (implicitHeader) {
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <_ZN10RFM95_LoRa11beginPacketEi+0x1e>
    implicitHeaderMode();
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f000 fac8 	bl	8001eee <_ZN10RFM95_LoRa18implicitHeaderModeEv>
 800195e:	e002      	b.n	8001966 <_ZN10RFM95_LoRa11beginPacketEi+0x24>
  } else {
    explicitHeaderMode();
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 faac 	bl	8001ebe <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }

  // reset FIFO address and paload length
  writeRegister(REG_FIFO_ADDR_PTR, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	210d      	movs	r1, #13
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ff52 	bl	8001814 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_PAYLOAD_LENGTH, 0);
 8001970:	2200      	movs	r2, #0
 8001972:	2122      	movs	r1, #34	; 0x22
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff ff4d 	bl	8001814 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return 1;
 800197a:	2301      	movs	r3, #1
}
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <_ZN10RFM95_LoRa9endPacketEv>:



int RFM95_LoRa::endPacket(){
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  // put in TX mode
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 800198c:	2283      	movs	r2, #131	; 0x83
 800198e:	2101      	movs	r1, #1
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ff3f 	bl	8001814 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // wait for TX done
  while ((readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 8001996:	2112      	movs	r1, #18
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff ff6b 	bl	8001874 <_ZN10RFM95_LoRa12readRegisterEh>
 800199e:	4603      	mov	r3, r0
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	bf0c      	ite	eq
 80019a8:	2301      	moveq	r3, #1
 80019aa:	2300      	movne	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d000      	beq.n	80019b4 <_ZN10RFM95_LoRa9endPacketEv+0x30>
 80019b2:	e7f0      	b.n	8001996 <_ZN10RFM95_LoRa9endPacketEv+0x12>

  }
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80019b4:	2102      	movs	r1, #2
 80019b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ba:	f001 fa83 	bl	8002ec4 <HAL_GPIO_TogglePin>
  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 80019be:	2208      	movs	r2, #8
 80019c0:	2112      	movs	r1, #18
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ff26 	bl	8001814 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return 1;
 80019c8:	2301      	movs	r3, #1
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <_ZN10RFM95_LoRa5writeEh>:

float RFM95_LoRa::packetSnr(){
  return ((int8_t)readRegister(REG_PKT_SNR_VALUE)) * 0.25;
}

size_t RFM95_LoRa::write(uint8_t byte){
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	460b      	mov	r3, r1
 80019dc:	70fb      	strb	r3, [r7, #3]
  return write(&byte, sizeof(byte));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	3304      	adds	r3, #4
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	1cf9      	adds	r1, r7, #3
 80019e8:	2201      	movs	r2, #1
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	4798      	blx	r3
 80019ee:	4603      	mov	r3, r0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <_ZN10RFM95_LoRa5writeEPKhj>:



size_t RFM95_LoRa::write(const uint8_t *buffer, size_t size){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  int currentLength = readRegister(REG_PAYLOAD_LENGTH);
 8001a04:	2122      	movs	r1, #34	; 0x22
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f7ff ff34 	bl	8001874 <_ZN10RFM95_LoRa12readRegisterEh>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	613b      	str	r3, [r7, #16]
  // check size
  if ((currentLength + size) > MAX_PKT_LENGTH) {
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	2bff      	cmp	r3, #255	; 0xff
 8001a18:	d903      	bls.n	8001a22 <_ZN10RFM95_LoRa5writeEPKhj+0x2a>
    size = MAX_PKT_LENGTH - currentLength;
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001a20:	607b      	str	r3, [r7, #4]
  }
  // write data
  for (size_t i = 0; i < size; i++) {
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d20c      	bcs.n	8001a48 <_ZN10RFM95_LoRa5writeEPKhj+0x50>
    writeRegister(REG_FIFO, buffer[i]);
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	4413      	add	r3, r2
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	2100      	movs	r1, #0
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f7ff feea 	bl	8001814 <_ZN10RFM95_LoRa13writeRegisterEhh>
  for (size_t i = 0; i < size; i++) {
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	3301      	adds	r3, #1
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	e7ee      	b.n	8001a26 <_ZN10RFM95_LoRa5writeEPKhj+0x2e>
  }

  // update length
  writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	4413      	add	r3, r2
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	461a      	mov	r2, r3
 8001a56:	2122      	movs	r1, #34	; 0x22
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f7ff fedb 	bl	8001814 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return size;
 8001a5e:	687b      	ldr	r3, [r7, #4]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <_ZN10RFM95_LoRa9availableEv>:


int RFM95_LoRa::available()
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8001a70:	2113      	movs	r1, #19
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff fefe 	bl	8001874 <_ZN10RFM95_LoRa12readRegisterEh>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	1ad3      	subs	r3, r2, r3
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <_ZN10RFM95_LoRa4readEv>:



int RFM95_LoRa::read(){
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	3308      	adds	r3, #8
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	4798      	blx	r3
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	bf0c      	ite	eq
 8001aa4:	2301      	moveq	r3, #1
 8001aa6:	2300      	movne	r3, #0
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d002      	beq.n	8001ab4 <_ZN10RFM95_LoRa4readEv+0x2a>
    return -1;
 8001aae:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab2:	e009      	b.n	8001ac8 <_ZN10RFM95_LoRa4readEv+0x3e>
  }
  _packetIndex++;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	615a      	str	r2, [r3, #20]
  return readRegister(REG_FIFO);
 8001abe:	2100      	movs	r1, #0
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff fed7 	bl	8001874 <_ZN10RFM95_LoRa12readRegisterEh>
 8001ac6:	4603      	mov	r3, r0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <_ZN10RFM95_LoRa4peekEv>:



int RFM95_LoRa::peek(){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	3308      	adds	r3, #8
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	4798      	blx	r3
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	bf0c      	ite	eq
 8001aea:	2301      	moveq	r3, #1
 8001aec:	2300      	movne	r3, #0
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d002      	beq.n	8001afa <_ZN10RFM95_LoRa4peekEv+0x2a>
    return -1;
 8001af4:	f04f 33ff 	mov.w	r3, #4294967295
 8001af8:	e013      	b.n	8001b22 <_ZN10RFM95_LoRa4peekEv+0x52>
  }
  // store current FIFO address
  int currentAddress = readRegister(REG_FIFO_ADDR_PTR);
 8001afa:	210d      	movs	r1, #13
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff feb9 	bl	8001874 <_ZN10RFM95_LoRa12readRegisterEh>
 8001b02:	4603      	mov	r3, r0
 8001b04:	60fb      	str	r3, [r7, #12]
  // read
  uint8_t b = readRegister(REG_FIFO);
 8001b06:	2100      	movs	r1, #0
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff feb3 	bl	8001874 <_ZN10RFM95_LoRa12readRegisterEh>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	72fb      	strb	r3, [r7, #11]
  // restore FIFO address
  writeRegister(REG_FIFO_ADDR_PTR, currentAddress);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	461a      	mov	r2, r3
 8001b18:	210d      	movs	r1, #13
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff fe7a 	bl	8001814 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return b;
 8001b20:	7afb      	ldrb	r3, [r7, #11]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <_ZN10RFM95_LoRa4idleEv>:
    explicitHeaderMode();
  }
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
}

void RFM95_LoRa::idle(){
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8001b32:	2281      	movs	r2, #129	; 0x81
 8001b34:	2101      	movs	r1, #1
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff fe6c 	bl	8001814 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <_ZN10RFM95_LoRa5sleepEv>:

void RFM95_LoRa::sleep(){
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8001b4c:	2280      	movs	r2, #128	; 0x80
 8001b4e:	2101      	movs	r1, #1
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff fe5f 	bl	8001814 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <_ZN10RFM95_LoRa10setTxPowerEii>:



void RFM95_LoRa::setTxPower(int level, int outputPin){
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b084      	sub	sp, #16
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	60f8      	str	r0, [r7, #12]
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	607a      	str	r2, [r7, #4]
  if (PA_OUTPUT_RFO_PIN == outputPin) {
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d116      	bne.n	8001b9e <_ZN10RFM95_LoRa10setTxPowerEii+0x40>
    // RFO
    if (level < 0) {
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	da02      	bge.n	8001b7c <_ZN10RFM95_LoRa10setTxPowerEii+0x1e>
      level = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	e004      	b.n	8001b86 <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
    } else if (level > 14) {
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	2b0e      	cmp	r3, #14
 8001b80:	dd01      	ble.n	8001b86 <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
      level = 14;
 8001b82:	230e      	movs	r3, #14
 8001b84:	60bb      	str	r3, [r7, #8]
    }
    writeRegister(REG_PA_CONFIG, 0x70 | level);
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	b25b      	sxtb	r3, r3
 8001b8a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001b8e:	b25b      	sxtb	r3, r3
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	461a      	mov	r2, r3
 8001b94:	2109      	movs	r1, #9
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f7ff fe3c 	bl	8001814 <_ZN10RFM95_LoRa13writeRegisterEhh>
    } else if (level > 17) {
      level = 17;
    }
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
  }
}
 8001b9c:	e018      	b.n	8001bd0 <_ZN10RFM95_LoRa10setTxPowerEii+0x72>
    if (level < 2) {
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	dc02      	bgt.n	8001baa <_ZN10RFM95_LoRa10setTxPowerEii+0x4c>
      level = 2;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	e004      	b.n	8001bb4 <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
    } else if (level > 17) {
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2b11      	cmp	r3, #17
 8001bae:	dd01      	ble.n	8001bb4 <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
      level = 17;
 8001bb0:	2311      	movs	r3, #17
 8001bb2:	60bb      	str	r3, [r7, #8]
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	3b02      	subs	r3, #2
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	b25b      	sxtb	r3, r3
 8001bbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bc2:	b25b      	sxtb	r3, r3
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	2109      	movs	r1, #9
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f7ff fe22 	bl	8001814 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_ZN10RFM95_LoRa12setFrequencyEl>:



void RFM95_LoRa::setFrequency(long frequency){
 8001bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  _frequency = frequency;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	611a      	str	r2, [r3, #16]
  uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001bee:	135e      	asrs	r6, r3, #13
 8001bf0:	04dd      	lsls	r5, r3, #19
 8001bf2:	4a1a      	ldr	r2, [pc, #104]	; (8001c5c <_ZN10RFM95_LoRa12setFrequencyEl+0x84>)
 8001bf4:	f04f 0300 	mov.w	r3, #0
 8001bf8:	4628      	mov	r0, r5
 8001bfa:	4631      	mov	r1, r6
 8001bfc:	f7fe ff8e 	bl	8000b1c <__aeabi_uldivmod>
 8001c00:	4603      	mov	r3, r0
 8001c02:	460c      	mov	r4, r1
 8001c04:	e9c7 3402 	strd	r3, r4, [r7, #8]
  writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8001c08:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	f04f 0400 	mov.w	r4, #0
 8001c14:	0c0b      	lsrs	r3, r1, #16
 8001c16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001c1a:	0c14      	lsrs	r4, r2, #16
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	461a      	mov	r2, r3
 8001c20:	2106      	movs	r1, #6
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff fdf6 	bl	8001814 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 8001c28:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001c2c:	f04f 0300 	mov.w	r3, #0
 8001c30:	f04f 0400 	mov.w	r4, #0
 8001c34:	0a0b      	lsrs	r3, r1, #8
 8001c36:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c3a:	0a14      	lsrs	r4, r2, #8
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	461a      	mov	r2, r3
 8001c40:	2107      	movs	r1, #7
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff fde6 	bl	8001814 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8001c48:	7a3b      	ldrb	r3, [r7, #8]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	2108      	movs	r1, #8
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff fde0 	bl	8001814 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c5c:	01e84800 	.word	0x01e84800

08001c60 <_ZN10RFM95_LoRa18setSpreadingFactorEi>:



void RFM95_LoRa::setSpreadingFactor(int sf){
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  if (sf < 6) {
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	2b05      	cmp	r3, #5
 8001c6e:	dc02      	bgt.n	8001c76 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x16>
    sf = 6;
 8001c70:	2306      	movs	r3, #6
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	e004      	b.n	8001c80 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
  } else if (sf > 12) {
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2b0c      	cmp	r3, #12
 8001c7a:	dd01      	ble.n	8001c80 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
    sf = 12;
 8001c7c:	230c      	movs	r3, #12
 8001c7e:	603b      	str	r3, [r7, #0]
  }

  if (sf == 6) {
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	2b06      	cmp	r3, #6
 8001c84:	d10a      	bne.n	8001c9c <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x3c>
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc5);
 8001c86:	22c5      	movs	r2, #197	; 0xc5
 8001c88:	2131      	movs	r1, #49	; 0x31
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff fdc2 	bl	8001814 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0c);
 8001c90:	220c      	movs	r2, #12
 8001c92:	2137      	movs	r1, #55	; 0x37
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff fdbd 	bl	8001814 <_ZN10RFM95_LoRa13writeRegisterEhh>
 8001c9a:	e009      	b.n	8001cb0 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x50>
  } else {
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
 8001c9c:	22c3      	movs	r2, #195	; 0xc3
 8001c9e:	2131      	movs	r1, #49	; 0x31
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff fdb7 	bl	8001814 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
 8001ca6:	220a      	movs	r2, #10
 8001ca8:	2137      	movs	r1, #55	; 0x37
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff fdb2 	bl	8001814 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  writeRegister(REG_MODEM_CONFIG_2, (readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 8001cb0:	211e      	movs	r1, #30
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff fdde 	bl	8001874 <_ZN10RFM95_LoRa12readRegisterEh>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	b25b      	sxtb	r3, r3
 8001cbc:	f003 030f 	and.w	r3, r3, #15
 8001cc0:	b25a      	sxtb	r2, r3
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	b25b      	sxtb	r3, r3
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	b25b      	sxtb	r3, r3
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	461a      	mov	r2, r3
 8001cd0:	211e      	movs	r1, #30
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff fd9e 	bl	8001814 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <_ZN10RFM95_LoRa18setSignalBandwidthEl>:


void RFM95_LoRa::setSignalBandwidth(long sbw){
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  int bw;
  if (sbw <= 7.8E3) {
 8001cea:	6838      	ldr	r0, [r7, #0]
 8001cec:	f7fe fbc2 	bl	8000474 <__aeabi_i2d>
 8001cf0:	a34b      	add	r3, pc, #300	; (adr r3, 8001e20 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x140>)
 8001cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf6:	f7fe fea3 	bl	8000a40 <__aeabi_dcmple>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x26>
    bw = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	e071      	b.n	8001dea <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 10.4E3) {
 8001d06:	6838      	ldr	r0, [r7, #0]
 8001d08:	f7fe fbb4 	bl	8000474 <__aeabi_i2d>
 8001d0c:	a346      	add	r3, pc, #280	; (adr r3, 8001e28 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x148>)
 8001d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d12:	f7fe fe95 	bl	8000a40 <__aeabi_dcmple>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d002      	beq.n	8001d22 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x42>
    bw = 1;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	e063      	b.n	8001dea <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 15.6E3) {
 8001d22:	6838      	ldr	r0, [r7, #0]
 8001d24:	f7fe fba6 	bl	8000474 <__aeabi_i2d>
 8001d28:	a341      	add	r3, pc, #260	; (adr r3, 8001e30 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x150>)
 8001d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2e:	f7fe fe87 	bl	8000a40 <__aeabi_dcmple>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d002      	beq.n	8001d3e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x5e>
    bw = 2;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	e055      	b.n	8001dea <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 20.8E3) {
 8001d3e:	6838      	ldr	r0, [r7, #0]
 8001d40:	f7fe fb98 	bl	8000474 <__aeabi_i2d>
 8001d44:	a33c      	add	r3, pc, #240	; (adr r3, 8001e38 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x158>)
 8001d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4a:	f7fe fe79 	bl	8000a40 <__aeabi_dcmple>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x7a>
    bw = 3;
 8001d54:	2303      	movs	r3, #3
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	e047      	b.n	8001dea <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 31.25E3) {
 8001d5a:	6838      	ldr	r0, [r7, #0]
 8001d5c:	f7fe fb8a 	bl	8000474 <__aeabi_i2d>
 8001d60:	a337      	add	r3, pc, #220	; (adr r3, 8001e40 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x160>)
 8001d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d66:	f7fe fe6b 	bl	8000a40 <__aeabi_dcmple>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x96>
    bw = 4;
 8001d70:	2304      	movs	r3, #4
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	e039      	b.n	8001dea <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 41.7E3) {
 8001d76:	6838      	ldr	r0, [r7, #0]
 8001d78:	f7fe fb7c 	bl	8000474 <__aeabi_i2d>
 8001d7c:	a332      	add	r3, pc, #200	; (adr r3, 8001e48 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x168>)
 8001d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d82:	f7fe fe5d 	bl	8000a40 <__aeabi_dcmple>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xb2>
    bw = 5;
 8001d8c:	2305      	movs	r3, #5
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	e02b      	b.n	8001dea <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 62.5E3) {
 8001d92:	6838      	ldr	r0, [r7, #0]
 8001d94:	f7fe fb6e 	bl	8000474 <__aeabi_i2d>
 8001d98:	a32d      	add	r3, pc, #180	; (adr r3, 8001e50 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x170>)
 8001d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9e:	f7fe fe4f 	bl	8000a40 <__aeabi_dcmple>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xce>
    bw = 6;
 8001da8:	2306      	movs	r3, #6
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	e01d      	b.n	8001dea <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 125E3) {
 8001dae:	6838      	ldr	r0, [r7, #0]
 8001db0:	f7fe fb60 	bl	8000474 <__aeabi_i2d>
 8001db4:	a328      	add	r3, pc, #160	; (adr r3, 8001e58 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x178>)
 8001db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dba:	f7fe fe41 	bl	8000a40 <__aeabi_dcmple>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d002      	beq.n	8001dca <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xea>
    bw = 7;
 8001dc4:	2307      	movs	r3, #7
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	e00f      	b.n	8001dea <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 250E3) {
 8001dca:	6838      	ldr	r0, [r7, #0]
 8001dcc:	f7fe fb52 	bl	8000474 <__aeabi_i2d>
 8001dd0:	a323      	add	r3, pc, #140	; (adr r3, 8001e60 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x180>)
 8001dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd6:	f7fe fe33 	bl	8000a40 <__aeabi_dcmple>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x106>
    bw = 8;
 8001de0:	2308      	movs	r3, #8
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	e001      	b.n	8001dea <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else /*if (sbw <= 250E3)*/ {
    bw = 9;
 8001de6:	2309      	movs	r3, #9
 8001de8:	60fb      	str	r3, [r7, #12]
  }

  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 8001dea:	211d      	movs	r1, #29
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff fd41 	bl	8001874 <_ZN10RFM95_LoRa12readRegisterEh>
 8001df2:	4603      	mov	r3, r0
 8001df4:	b25b      	sxtb	r3, r3
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	b25a      	sxtb	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	011b      	lsls	r3, r3, #4
 8001e00:	b25b      	sxtb	r3, r3
 8001e02:	4313      	orrs	r3, r2
 8001e04:	b25b      	sxtb	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	461a      	mov	r2, r3
 8001e0a:	211d      	movs	r1, #29
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff fd01 	bl	8001814 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	f3af 8000 	nop.w
 8001e20:	00000000 	.word	0x00000000
 8001e24:	40be7800 	.word	0x40be7800
 8001e28:	00000000 	.word	0x00000000
 8001e2c:	40c45000 	.word	0x40c45000
 8001e30:	00000000 	.word	0x00000000
 8001e34:	40ce7800 	.word	0x40ce7800
 8001e38:	00000000 	.word	0x00000000
 8001e3c:	40d45000 	.word	0x40d45000
 8001e40:	00000000 	.word	0x00000000
 8001e44:	40de8480 	.word	0x40de8480
 8001e48:	00000000 	.word	0x00000000
 8001e4c:	40e45c80 	.word	0x40e45c80
 8001e50:	00000000 	.word	0x00000000
 8001e54:	40ee8480 	.word	0x40ee8480
 8001e58:	00000000 	.word	0x00000000
 8001e5c:	40fe8480 	.word	0x40fe8480
 8001e60:	00000000 	.word	0x00000000
 8001e64:	410e8480 	.word	0x410e8480

08001e68 <_ZN10RFM95_LoRa14setCodingRate4Ei>:



void RFM95_LoRa::setCodingRate4(int denominator){
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  if (denominator < 5) {
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	dc02      	bgt.n	8001e7e <_ZN10RFM95_LoRa14setCodingRate4Ei+0x16>
    denominator = 5;
 8001e78:	2305      	movs	r3, #5
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	e004      	b.n	8001e88 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
  } else if (denominator > 8) {
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	dd01      	ble.n	8001e88 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
	  denominator = 8;
 8001e84:	2308      	movs	r3, #8
 8001e86:	603b      	str	r3, [r7, #0]
  }
  int cr = denominator - 4;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	3b04      	subs	r3, #4
 8001e8c:	60fb      	str	r3, [r7, #12]
  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0xf1) | (cr << 1));
 8001e8e:	211d      	movs	r1, #29
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff fcef 	bl	8001874 <_ZN10RFM95_LoRa12readRegisterEh>
 8001e96:	4603      	mov	r3, r0
 8001e98:	b25b      	sxtb	r3, r3
 8001e9a:	f023 030e 	bic.w	r3, r3, #14
 8001e9e:	b25a      	sxtb	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	b25b      	sxtb	r3, r3
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	b25b      	sxtb	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	211d      	movs	r1, #29
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff fcaf 	bl	8001814 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <_ZN10RFM95_LoRa18explicitHeaderModeEv>:
uint8_t RFM95_LoRa::random(){
  return readRegister(REG_RSSI_WIDEBAND);
}


void RFM95_LoRa::explicitHeaderMode(){
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 0;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 8001ecc:	211d      	movs	r1, #29
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff fcd0 	bl	8001874 <_ZN10RFM95_LoRa12readRegisterEh>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	f023 0301 	bic.w	r3, r3, #1
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	461a      	mov	r2, r3
 8001ede:	211d      	movs	r1, #29
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff fc97 	bl	8001814 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <_ZN10RFM95_LoRa18implicitHeaderModeEv>:


void RFM95_LoRa::implicitHeaderMode(){
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 1;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 8001efc:	211d      	movs	r1, #29
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff fcb8 	bl	8001874 <_ZN10RFM95_LoRa12readRegisterEh>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	211d      	movs	r1, #29
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff fc7f 	bl	8001814 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <_ZN5SHT21C1EP5Model>:
 *      Author: marce
 */

#include "SHT21.h"

SHT21::SHT21(Model *model) {
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	6039      	str	r1, [r7, #0]
	this->model = model;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	601a      	str	r2, [r3, #0]

}
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <_ZN5SHT219writeByteEh>:

void SHT21::initSHT21(){

}

HAL_StatusTypeDef SHT21::writeByte(uint8_t addr){
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af02      	add	r7, sp, #8
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	70fb      	strb	r3, [r7, #3]
	uint8_t txBuffer[1];
	txBuffer[0] = addr;
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	733b      	strb	r3, [r7, #12]
	return(HAL_I2C_Master_Transmit(&hi2c1,SHT21_SLAVE_ADDR<<1,(uint8_t*)txBuffer,1,I2C_Timeout));
 8001f4c:	f107 020c 	add.w	r2, r7, #12
 8001f50:	2364      	movs	r3, #100	; 0x64
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	2301      	movs	r3, #1
 8001f56:	2180      	movs	r1, #128	; 0x80
 8001f58:	4803      	ldr	r0, [pc, #12]	; (8001f68 <_ZN5SHT219writeByteEh+0x2c>)
 8001f5a:	f001 f85b 	bl	8003014 <HAL_I2C_Master_Transmit>
 8001f5e:	4603      	mov	r3, r0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000540 	.word	0x20000540

08001f6c <_ZN5SHT2113readSHT21TempEv>:


uint32_t SHT21::readSHT21Temp(){
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af02      	add	r7, sp, #8
 8001f72:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2];
	writeByte(SHT21_TEMP_REG);
 8001f74:	21e3      	movs	r1, #227	; 0xe3
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff ffe0 	bl	8001f3c <_ZN5SHT219writeByteEh>
	/*Warten bis Messung beendet*/
	while(HAL_I2C_Master_Receive(&hi2c1,SHT21_SLAVE_ADDR<<1,buffer,2,I2C_Timeout) != HAL_OK);
 8001f7c:	f107 020c 	add.w	r2, r7, #12
 8001f80:	2364      	movs	r3, #100	; 0x64
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	2302      	movs	r3, #2
 8001f86:	2180      	movs	r1, #128	; 0x80
 8001f88:	4810      	ldr	r0, [pc, #64]	; (8001fcc <_ZN5SHT2113readSHT21TempEv+0x60>)
 8001f8a:	f001 f937 	bl	80031fc <HAL_I2C_Master_Receive>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	bf14      	ite	ne
 8001f94:	2301      	movne	r3, #1
 8001f96:	2300      	moveq	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d000      	beq.n	8001fa0 <_ZN5SHT2113readSHT21TempEv+0x34>
 8001f9e:	e7ed      	b.n	8001f7c <_ZN5SHT2113readSHT21TempEv+0x10>
	model->setTempOutside((buffer[0]<<8)+buffer[1]);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6818      	ldr	r0, [r3, #0]
 8001fa4:	7b3b      	ldrb	r3, [r7, #12]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	7b7b      	ldrb	r3, [r7, #13]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f7ff fb9e 	bl	80016f6 <_ZN5Model14setTempOutsideEt>
	return((buffer[0]<<8)+buffer[1]);
 8001fba:	7b3b      	ldrb	r3, [r7, #12]
 8001fbc:	021b      	lsls	r3, r3, #8
 8001fbe:	7b7a      	ldrb	r2, [r7, #13]
 8001fc0:	4413      	add	r3, r2
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000540 	.word	0x20000540

08001fd0 <_ZN5SHT2117readSHT21HumidityEv>:

uint32_t SHT21::readSHT21Humidity(){
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2];
	writeByte(SHT21_HUMIDITY_REG);
 8001fd8:	21e5      	movs	r1, #229	; 0xe5
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ffae 	bl	8001f3c <_ZN5SHT219writeByteEh>
	while(HAL_I2C_Master_Receive(&hi2c1,SHT21_SLAVE_ADDR<<1,buffer,2,I2C_Timeout) != HAL_OK);
 8001fe0:	f107 020c 	add.w	r2, r7, #12
 8001fe4:	2364      	movs	r3, #100	; 0x64
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	2302      	movs	r3, #2
 8001fea:	2180      	movs	r1, #128	; 0x80
 8001fec:	4810      	ldr	r0, [pc, #64]	; (8002030 <_ZN5SHT2117readSHT21HumidityEv+0x60>)
 8001fee:	f001 f905 	bl	80031fc <HAL_I2C_Master_Receive>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bf14      	ite	ne
 8001ff8:	2301      	movne	r3, #1
 8001ffa:	2300      	moveq	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d000      	beq.n	8002004 <_ZN5SHT2117readSHT21HumidityEv+0x34>
 8002002:	e7ed      	b.n	8001fe0 <_ZN5SHT2117readSHT21HumidityEv+0x10>
	model->setHumidity((buffer[0]<<8)+buffer[1]);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6818      	ldr	r0, [r3, #0]
 8002008:	7b3b      	ldrb	r3, [r7, #12]
 800200a:	b29b      	uxth	r3, r3
 800200c:	021b      	lsls	r3, r3, #8
 800200e:	b29a      	uxth	r2, r3
 8002010:	7b7b      	ldrb	r3, [r7, #13]
 8002012:	b29b      	uxth	r3, r3
 8002014:	4413      	add	r3, r2
 8002016:	b29b      	uxth	r3, r3
 8002018:	4619      	mov	r1, r3
 800201a:	f7ff fb2f 	bl	800167c <_ZN5Model11setHumidityEt>
	return((buffer[0]<<8)+buffer[1]);
 800201e:	7b3b      	ldrb	r3, [r7, #12]
 8002020:	021b      	lsls	r3, r3, #8
 8002022:	7b7a      	ldrb	r2, [r7, #13]
 8002024:	4413      	add	r3, r2
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000540 	.word	0x20000540

08002034 <_ZN7USB_ComC1Ev>:
 *      Author: marce
 */

#include "USBCom.h"

USB_Com::USB_Com() {
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub

}
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002052:	f107 030c 	add.w	r3, r7, #12
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]
 800205e:	60da      	str	r2, [r3, #12]
 8002060:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002062:	4b43      	ldr	r3, [pc, #268]	; (8002170 <MX_GPIO_Init+0x124>)
 8002064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002066:	4a42      	ldr	r2, [pc, #264]	; (8002170 <MX_GPIO_Init+0x124>)
 8002068:	f043 0304 	orr.w	r3, r3, #4
 800206c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800206e:	4b40      	ldr	r3, [pc, #256]	; (8002170 <MX_GPIO_Init+0x124>)
 8002070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	60bb      	str	r3, [r7, #8]
 8002078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800207a:	4b3d      	ldr	r3, [pc, #244]	; (8002170 <MX_GPIO_Init+0x124>)
 800207c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207e:	4a3c      	ldr	r2, [pc, #240]	; (8002170 <MX_GPIO_Init+0x124>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002086:	4b3a      	ldr	r3, [pc, #232]	; (8002170 <MX_GPIO_Init+0x124>)
 8002088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002092:	4b37      	ldr	r3, [pc, #220]	; (8002170 <MX_GPIO_Init+0x124>)
 8002094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002096:	4a36      	ldr	r2, [pc, #216]	; (8002170 <MX_GPIO_Init+0x124>)
 8002098:	f043 0302 	orr.w	r3, r3, #2
 800209c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800209e:	4b34      	ldr	r3, [pc, #208]	; (8002170 <MX_GPIO_Init+0x124>)
 80020a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	603b      	str	r3, [r7, #0]
 80020a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|RFM_NSS_Pin, GPIO_PIN_RESET);
 80020aa:	2200      	movs	r2, #0
 80020ac:	f248 0102 	movw	r1, #32770	; 0x8002
 80020b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b4:	f000 feee 	bl	8002e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAX_CS_Pin|MAX_DRDY_Pin|RFM_RST_Pin, GPIO_PIN_RESET);
 80020b8:	2200      	movs	r2, #0
 80020ba:	210b      	movs	r1, #11
 80020bc:	482d      	ldr	r0, [pc, #180]	; (8002174 <MX_GPIO_Init+0x128>)
 80020be:	f000 fee9 	bl	8002e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RFM_DIO2_Pin|RFM_DIO1_Pin;
 80020c2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80020c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c8:	2300      	movs	r3, #0
 80020ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	4619      	mov	r1, r3
 80020d6:	4828      	ldr	r0, [pc, #160]	; (8002178 <MX_GPIO_Init+0x12c>)
 80020d8:	f000 fd6a 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NC_Pin|NCA8_Pin;
 80020dc:	f240 1301 	movw	r3, #257	; 0x101
 80020e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020e2:	2303      	movs	r3, #3
 80020e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ea:	f107 030c 	add.w	r3, r7, #12
 80020ee:	4619      	mov	r1, r3
 80020f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f4:	f000 fd5c 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Pin|RFM_NSS_Pin;
 80020f8:	f248 0302 	movw	r3, #32770	; 0x8002
 80020fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fe:	2301      	movs	r3, #1
 8002100:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210a:	f107 030c 	add.w	r3, r7, #12
 800210e:	4619      	mov	r1, r3
 8002110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002114:	f000 fd4c 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PRESSURE_INT_Pin;
 8002118:	2310      	movs	r3, #16
 800211a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800211c:	4b17      	ldr	r3, [pc, #92]	; (800217c <MX_GPIO_Init+0x130>)
 800211e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PRESSURE_INT_GPIO_Port, &GPIO_InitStruct);
 8002124:	f107 030c 	add.w	r3, r7, #12
 8002128:	4619      	mov	r1, r3
 800212a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800212e:	f000 fd3f 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MAX_CS_Pin|MAX_DRDY_Pin|RFM_RST_Pin;
 8002132:	230b      	movs	r3, #11
 8002134:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002136:	2301      	movs	r3, #1
 8002138:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002142:	f107 030c 	add.w	r3, r7, #12
 8002146:	4619      	mov	r1, r3
 8002148:	480a      	ldr	r0, [pc, #40]	; (8002174 <MX_GPIO_Init+0x128>)
 800214a:	f000 fd31 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RFM_DIO5_Pin|RFM_DIO3_Pin|RFM_DIO4_Pin|RFM_DIO0_Pin;
 800214e:	23f0      	movs	r3, #240	; 0xf0
 8002150:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215a:	f107 030c 	add.w	r3, r7, #12
 800215e:	4619      	mov	r1, r3
 8002160:	4804      	ldr	r0, [pc, #16]	; (8002174 <MX_GPIO_Init+0x128>)
 8002162:	f000 fd25 	bl	8002bb0 <HAL_GPIO_Init>

}
 8002166:	bf00      	nop
 8002168:	3720      	adds	r7, #32
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000
 8002174:	48000400 	.word	0x48000400
 8002178:	48000800 	.word	0x48000800
 800217c:	10110000 	.word	0x10110000

08002180 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002184:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <MX_I2C1_Init+0x74>)
 8002186:	4a1c      	ldr	r2, [pc, #112]	; (80021f8 <MX_I2C1_Init+0x78>)
 8002188:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800218a:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <MX_I2C1_Init+0x74>)
 800218c:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <MX_I2C1_Init+0x7c>)
 800218e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002190:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <MX_I2C1_Init+0x74>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002196:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <MX_I2C1_Init+0x74>)
 8002198:	2201      	movs	r2, #1
 800219a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800219c:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <MX_I2C1_Init+0x74>)
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80021a2:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <MX_I2C1_Init+0x74>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021a8:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <MX_I2C1_Init+0x74>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021ae:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <MX_I2C1_Init+0x74>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021b4:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <MX_I2C1_Init+0x74>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021ba:	480e      	ldr	r0, [pc, #56]	; (80021f4 <MX_I2C1_Init+0x74>)
 80021bc:	f000 fe9b 	bl	8002ef6 <HAL_I2C_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80021c6:	f000 f929 	bl	800241c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021ca:	2100      	movs	r1, #0
 80021cc:	4809      	ldr	r0, [pc, #36]	; (80021f4 <MX_I2C1_Init+0x74>)
 80021ce:	f001 fc59 	bl	8003a84 <HAL_I2CEx_ConfigAnalogFilter>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80021d8:	f000 f920 	bl	800241c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80021dc:	2100      	movs	r1, #0
 80021de:	4805      	ldr	r0, [pc, #20]	; (80021f4 <MX_I2C1_Init+0x74>)
 80021e0:	f001 fc9b 	bl	8003b1a <HAL_I2CEx_ConfigDigitalFilter>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80021ea:	f000 f917 	bl	800241c <Error_Handler>
  }

}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000540 	.word	0x20000540
 80021f8:	40005400 	.word	0x40005400
 80021fc:	00707cbb 	.word	0x00707cbb

08002200 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	; 0x28
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a18      	ldr	r2, [pc, #96]	; (8002280 <HAL_I2C_MspInit+0x80>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d129      	bne.n	8002276 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002222:	4b18      	ldr	r3, [pc, #96]	; (8002284 <HAL_I2C_MspInit+0x84>)
 8002224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002226:	4a17      	ldr	r2, [pc, #92]	; (8002284 <HAL_I2C_MspInit+0x84>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800222e:	4b15      	ldr	r3, [pc, #84]	; (8002284 <HAL_I2C_MspInit+0x84>)
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800223a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800223e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002240:	2312      	movs	r3, #18
 8002242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002244:	2301      	movs	r3, #1
 8002246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002248:	2303      	movs	r3, #3
 800224a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800224c:	2304      	movs	r3, #4
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	4619      	mov	r1, r3
 8002256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800225a:	f000 fca9 	bl	8002bb0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800225e:	4b09      	ldr	r3, [pc, #36]	; (8002284 <HAL_I2C_MspInit+0x84>)
 8002260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002262:	4a08      	ldr	r2, [pc, #32]	; (8002284 <HAL_I2C_MspInit+0x84>)
 8002264:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002268:	6593      	str	r3, [r2, #88]	; 0x58
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_I2C_MspInit+0x84>)
 800226c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002276:	bf00      	nop
 8002278:	3728      	adds	r7, #40	; 0x28
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40005400 	.word	0x40005400
 8002284:	40021000 	.word	0x40021000

08002288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800228c:	f000 faab 	bl	80027e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002290:	f000 f826 	bl	80022e0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002294:	f7ff feda 	bl	800204c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002298:	f7ff ff72 	bl	8002180 <MX_I2C1_Init>
  MX_SPI1_Init();
 800229c:	f000 f8e4 	bl	8002468 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80022a0:	f000 f9fe 	bl	80026a0 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80022a4:	f007 ff64 	bl	800a170 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_MspInit(&huart2);		//UART init
 80022a8:	4808      	ldr	r0, [pc, #32]	; (80022cc <main+0x44>)
 80022aa:	f000 fa29 	bl	8002700 <HAL_UART_MspInit>
  HAL_SPI_MspInit(&hspi1);		//SPI init
 80022ae:	4808      	ldr	r0, [pc, #32]	; (80022d0 <main+0x48>)
 80022b0:	f000 f918 	bl	80024e4 <HAL_SPI_MspInit>
  HAL_I2C_MspInit(&hi2c1);		//I2C init
 80022b4:	4807      	ldr	r0, [pc, #28]	; (80022d4 <main+0x4c>)
 80022b6:	f7ff ffa3 	bl	8002200 <HAL_I2C_MspInit>
  HAL_UART_Receive_IT(&huart2, rxData, 1);
 80022ba:	2201      	movs	r2, #1
 80022bc:	4906      	ldr	r1, [pc, #24]	; (80022d8 <main+0x50>)
 80022be:	4803      	ldr	r0, [pc, #12]	; (80022cc <main+0x44>)
 80022c0:	f004 fb0c 	bl	80068dc <HAL_UART_Receive_IT>
  appMain.mainProg();
 80022c4:	4805      	ldr	r0, [pc, #20]	; (80022dc <main+0x54>)
 80022c6:	f7fe fe1d 	bl	8000f04 <_ZN7AppMain8mainProgEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80022ca:	e7fe      	b.n	80022ca <main+0x42>
 80022cc:	200005f0 	.word	0x200005f0
 80022d0:	2000058c 	.word	0x2000058c
 80022d4:	20000540 	.word	0x20000540
 80022d8:	2000031c 	.word	0x2000031c
 80022dc:	200001ac 	.word	0x200001ac

080022e0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b0a4      	sub	sp, #144	; 0x90
 80022e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022ea:	2244      	movs	r2, #68	; 0x44
 80022ec:	2100      	movs	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f008 fcde 	bl	800acb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002304:	1d3b      	adds	r3, r7, #4
 8002306:	2234      	movs	r2, #52	; 0x34
 8002308:	2100      	movs	r1, #0
 800230a:	4618      	mov	r0, r3
 800230c:	f008 fcd0 	bl	800acb0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002310:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002314:	f002 fb9e 	bl	8004a54 <HAL_PWREx_ControlVoltageScaling>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	bf14      	ite	ne
 800231e:	2301      	movne	r3, #1
 8002320:	2300      	moveq	r3, #0
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <_Z18SystemClock_Configv+0x4c>
  {
    Error_Handler();
 8002328:	f000 f878 	bl	800241c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800232c:	2322      	movs	r3, #34	; 0x22
 800232e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002334:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002336:	2301      	movs	r3, #1
 8002338:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800233a:	2340      	movs	r3, #64	; 0x40
 800233c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800233e:	2302      	movs	r3, #2
 8002340:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002342:	2302      	movs	r3, #2
 8002344:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8002346:	2302      	movs	r3, #2
 8002348:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 8;
 800234c:	2308      	movs	r3, #8
 800234e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002352:	2302      	movs	r3, #2
 8002354:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002358:	2302      	movs	r3, #2
 800235a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800235e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002362:	4618      	mov	r0, r3
 8002364:	f002 fbdc 	bl	8004b20 <HAL_RCC_OscConfig>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	bf14      	ite	ne
 800236e:	2301      	movne	r3, #1
 8002370:	2300      	moveq	r3, #0
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <_Z18SystemClock_Configv+0x9c>
  {
    Error_Handler();
 8002378:	f000 f850 	bl	800241c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800237c:	230f      	movs	r3, #15
 800237e:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002380:	2303      	movs	r3, #3
 8002382:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002384:	2300      	movs	r3, #0
 8002386:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002388:	2300      	movs	r3, #0
 800238a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800238c:	2300      	movs	r3, #0
 800238e:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002390:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002394:	2101      	movs	r1, #1
 8002396:	4618      	mov	r0, r3
 8002398:	f003 f828 	bl	80053ec <HAL_RCC_ClockConfig>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	bf14      	ite	ne
 80023a2:	2301      	movne	r3, #1
 80023a4:	2300      	moveq	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <_Z18SystemClock_Configv+0xd0>
  {
    Error_Handler();
 80023ac:	f000 f836 	bl	800241c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80023b0:	f242 0342 	movw	r3, #8258	; 0x2042
 80023b4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80023be:	2300      	movs	r3, #0
 80023c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023c2:	1d3b      	adds	r3, r7, #4
 80023c4:	4618      	mov	r0, r3
 80023c6:	f003 fa15 	bl	80057f4 <HAL_RCCEx_PeriphCLKConfig>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	bf14      	ite	ne
 80023d0:	2301      	movne	r3, #1
 80023d2:	2300      	moveq	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <_Z18SystemClock_Configv+0xfe>
  {
    Error_Handler();
 80023da:	f000 f81f 	bl	800241c <Error_Handler>
  }
}
 80023de:	bf00      	nop
 80023e0:	3790      	adds	r7, #144	; 0x90
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, rxData, 1);
 80023f0:	2201      	movs	r2, #1
 80023f2:	4907      	ldr	r1, [pc, #28]	; (8002410 <HAL_UART_RxCpltCallback+0x28>)
 80023f4:	4807      	ldr	r0, [pc, #28]	; (8002414 <HAL_UART_RxCpltCallback+0x2c>)
 80023f6:	f004 fa71 	bl	80068dc <HAL_UART_Receive_IT>
	appMain.gps.gpsInterrupt(rxData[0]);
 80023fa:	4b05      	ldr	r3, [pc, #20]	; (8002410 <HAL_UART_RxCpltCallback+0x28>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	4619      	mov	r1, r3
 8002400:	4805      	ldr	r0, [pc, #20]	; (8002418 <HAL_UART_RxCpltCallback+0x30>)
 8002402:	f7fe fef5 	bl	80011f0 <_ZN3GPS12gpsInterruptEh>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	2000031c 	.word	0x2000031c
 8002414:	200005f0 	.word	0x200005f0
 8002418:	20000278 	.word	0x20000278

0800241c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
	...

0800242c <_Z41__static_initialization_and_destruction_0ii>:
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d107      	bne.n	800244c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002442:	4293      	cmp	r3, r2
 8002444:	d102      	bne.n	800244c <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain;
 8002446:	4803      	ldr	r0, [pc, #12]	; (8002454 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002448:	f7fe fce8 	bl	8000e1c <_ZN7AppMainC1Ev>
}
 800244c:	bf00      	nop
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	200001ac 	.word	0x200001ac

08002458 <_GLOBAL__sub_I_appMain>:
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
 800245c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002460:	2001      	movs	r0, #1
 8002462:	f7ff ffe3 	bl	800242c <_Z41__static_initialization_and_destruction_0ii>
 8002466:	bd80      	pop	{r7, pc}

08002468 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800246c:	4b1b      	ldr	r3, [pc, #108]	; (80024dc <MX_SPI1_Init+0x74>)
 800246e:	4a1c      	ldr	r2, [pc, #112]	; (80024e0 <MX_SPI1_Init+0x78>)
 8002470:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002472:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <MX_SPI1_Init+0x74>)
 8002474:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002478:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800247a:	4b18      	ldr	r3, [pc, #96]	; (80024dc <MX_SPI1_Init+0x74>)
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002480:	4b16      	ldr	r3, [pc, #88]	; (80024dc <MX_SPI1_Init+0x74>)
 8002482:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002486:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002488:	4b14      	ldr	r3, [pc, #80]	; (80024dc <MX_SPI1_Init+0x74>)
 800248a:	2200      	movs	r2, #0
 800248c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800248e:	4b13      	ldr	r3, [pc, #76]	; (80024dc <MX_SPI1_Init+0x74>)
 8002490:	2200      	movs	r2, #0
 8002492:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002494:	4b11      	ldr	r3, [pc, #68]	; (80024dc <MX_SPI1_Init+0x74>)
 8002496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800249a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800249c:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <MX_SPI1_Init+0x74>)
 800249e:	2218      	movs	r2, #24
 80024a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024a2:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <MX_SPI1_Init+0x74>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <MX_SPI1_Init+0x74>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024ae:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <MX_SPI1_Init+0x74>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80024b4:	4b09      	ldr	r3, [pc, #36]	; (80024dc <MX_SPI1_Init+0x74>)
 80024b6:	2207      	movs	r2, #7
 80024b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80024ba:	4b08      	ldr	r3, [pc, #32]	; (80024dc <MX_SPI1_Init+0x74>)
 80024bc:	2200      	movs	r2, #0
 80024be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <MX_SPI1_Init+0x74>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024c6:	4805      	ldr	r0, [pc, #20]	; (80024dc <MX_SPI1_Init+0x74>)
 80024c8:	f003 fb1a 	bl	8005b00 <HAL_SPI_Init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80024d2:	f7ff ffa3 	bl	800241c <Error_Handler>
  }

}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	2000058c 	.word	0x2000058c
 80024e0:	40013000 	.word	0x40013000

080024e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08a      	sub	sp, #40	; 0x28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ec:	f107 0314 	add.w	r3, r7, #20
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a17      	ldr	r2, [pc, #92]	; (8002560 <HAL_SPI_MspInit+0x7c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d128      	bne.n	8002558 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002506:	4b17      	ldr	r3, [pc, #92]	; (8002564 <HAL_SPI_MspInit+0x80>)
 8002508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800250a:	4a16      	ldr	r2, [pc, #88]	; (8002564 <HAL_SPI_MspInit+0x80>)
 800250c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002510:	6613      	str	r3, [r2, #96]	; 0x60
 8002512:	4b14      	ldr	r3, [pc, #80]	; (8002564 <HAL_SPI_MspInit+0x80>)
 8002514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800251e:	4b11      	ldr	r3, [pc, #68]	; (8002564 <HAL_SPI_MspInit+0x80>)
 8002520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002522:	4a10      	ldr	r2, [pc, #64]	; (8002564 <HAL_SPI_MspInit+0x80>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800252a:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <HAL_SPI_MspInit+0x80>)
 800252c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002536:	23e0      	movs	r3, #224	; 0xe0
 8002538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253a:	2302      	movs	r3, #2
 800253c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002542:	2303      	movs	r3, #3
 8002544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002546:	2305      	movs	r3, #5
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254a:	f107 0314 	add.w	r3, r7, #20
 800254e:	4619      	mov	r1, r3
 8002550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002554:	f000 fb2c 	bl	8002bb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002558:	bf00      	nop
 800255a:	3728      	adds	r7, #40	; 0x28
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40013000 	.word	0x40013000
 8002564:	40021000 	.word	0x40021000

08002568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256e:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <HAL_MspInit+0x44>)
 8002570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002572:	4a0e      	ldr	r2, [pc, #56]	; (80025ac <HAL_MspInit+0x44>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	6613      	str	r3, [r2, #96]	; 0x60
 800257a:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <HAL_MspInit+0x44>)
 800257c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	607b      	str	r3, [r7, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_MspInit+0x44>)
 8002588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258a:	4a08      	ldr	r2, [pc, #32]	; (80025ac <HAL_MspInit+0x44>)
 800258c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002590:	6593      	str	r3, [r2, #88]	; 0x58
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_MspInit+0x44>)
 8002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259a:	603b      	str	r3, [r7, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000

080025b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025be:	b480      	push	{r7}
 80025c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025c2:	e7fe      	b.n	80025c2 <HardFault_Handler+0x4>

080025c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025c8:	e7fe      	b.n	80025c8 <MemManage_Handler+0x4>

080025ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ca:	b480      	push	{r7}
 80025cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ce:	e7fe      	b.n	80025ce <BusFault_Handler+0x4>

080025d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d4:	e7fe      	b.n	80025d4 <UsageFault_Handler+0x4>

080025d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025f2:	b480      	push	{r7}
 80025f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002604:	f000 f942 	bl	800288c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002608:	bf00      	nop
 800260a:	bd80      	pop	{r7, pc}

0800260c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002610:	4802      	ldr	r0, [pc, #8]	; (800261c <USART2_IRQHandler+0x10>)
 8002612:	f004 fa05 	bl	8006a20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	200005f0 	.word	0x200005f0

08002620 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002624:	4802      	ldr	r0, [pc, #8]	; (8002630 <USB_IRQHandler+0x10>)
 8002626:	f001 fbce 	bl	8003dc6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20001308 	.word	0x20001308

08002634 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002638:	4b17      	ldr	r3, [pc, #92]	; (8002698 <SystemInit+0x64>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263e:	4a16      	ldr	r2, [pc, #88]	; (8002698 <SystemInit+0x64>)
 8002640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002644:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002648:	4b14      	ldr	r3, [pc, #80]	; (800269c <SystemInit+0x68>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a13      	ldr	r2, [pc, #76]	; (800269c <SystemInit+0x68>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002654:	4b11      	ldr	r3, [pc, #68]	; (800269c <SystemInit+0x68>)
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800265a:	4b10      	ldr	r3, [pc, #64]	; (800269c <SystemInit+0x68>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a0f      	ldr	r2, [pc, #60]	; (800269c <SystemInit+0x68>)
 8002660:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002664:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002668:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800266a:	4b0c      	ldr	r3, [pc, #48]	; (800269c <SystemInit+0x68>)
 800266c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002670:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002672:	4b0a      	ldr	r3, [pc, #40]	; (800269c <SystemInit+0x68>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a09      	ldr	r2, [pc, #36]	; (800269c <SystemInit+0x68>)
 8002678:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800267c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800267e:	4b07      	ldr	r3, [pc, #28]	; (800269c <SystemInit+0x68>)
 8002680:	2200      	movs	r2, #0
 8002682:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002684:	4b04      	ldr	r3, [pc, #16]	; (8002698 <SystemInit+0x64>)
 8002686:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800268a:	609a      	str	r2, [r3, #8]
#endif
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	e000ed00 	.word	0xe000ed00
 800269c:	40021000 	.word	0x40021000

080026a0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80026a4:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <MX_USART2_UART_Init+0x58>)
 80026a6:	4a15      	ldr	r2, [pc, #84]	; (80026fc <MX_USART2_UART_Init+0x5c>)
 80026a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80026aa:	4b13      	ldr	r3, [pc, #76]	; (80026f8 <MX_USART2_UART_Init+0x58>)
 80026ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80026b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026b2:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <MX_USART2_UART_Init+0x58>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026b8:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <MX_USART2_UART_Init+0x58>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026be:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <MX_USART2_UART_Init+0x58>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 80026c4:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <MX_USART2_UART_Init+0x58>)
 80026c6:	2204      	movs	r2, #4
 80026c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ca:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <MX_USART2_UART_Init+0x58>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026d0:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <MX_USART2_UART_Init+0x58>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026d6:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <MX_USART2_UART_Init+0x58>)
 80026d8:	2200      	movs	r2, #0
 80026da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <MX_USART2_UART_Init+0x58>)
 80026de:	2200      	movs	r2, #0
 80026e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026e2:	4805      	ldr	r0, [pc, #20]	; (80026f8 <MX_USART2_UART_Init+0x58>)
 80026e4:	f004 f8ac 	bl	8006840 <HAL_UART_Init>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80026ee:	f7ff fe95 	bl	800241c <Error_Handler>
  }

}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	200005f0 	.word	0x200005f0
 80026fc:	40004400 	.word	0x40004400

08002700 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08a      	sub	sp, #40	; 0x28
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a1b      	ldr	r2, [pc, #108]	; (800278c <HAL_UART_MspInit+0x8c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d130      	bne.n	8002784 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002722:	4b1b      	ldr	r3, [pc, #108]	; (8002790 <HAL_UART_MspInit+0x90>)
 8002724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002726:	4a1a      	ldr	r2, [pc, #104]	; (8002790 <HAL_UART_MspInit+0x90>)
 8002728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800272c:	6593      	str	r3, [r2, #88]	; 0x58
 800272e:	4b18      	ldr	r3, [pc, #96]	; (8002790 <HAL_UART_MspInit+0x90>)
 8002730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273a:	4b15      	ldr	r3, [pc, #84]	; (8002790 <HAL_UART_MspInit+0x90>)
 800273c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273e:	4a14      	ldr	r2, [pc, #80]	; (8002790 <HAL_UART_MspInit+0x90>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002746:	4b12      	ldr	r3, [pc, #72]	; (8002790 <HAL_UART_MspInit+0x90>)
 8002748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002752:	230c      	movs	r3, #12
 8002754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002756:	2302      	movs	r3, #2
 8002758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275e:	2303      	movs	r3, #3
 8002760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002762:	2307      	movs	r3, #7
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002766:	f107 0314 	add.w	r3, r7, #20
 800276a:	4619      	mov	r1, r3
 800276c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002770:	f000 fa1e 	bl	8002bb0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002774:	2200      	movs	r2, #0
 8002776:	2100      	movs	r1, #0
 8002778:	2026      	movs	r0, #38	; 0x26
 800277a:	f000 f9a2 	bl	8002ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800277e:	2026      	movs	r0, #38	; 0x26
 8002780:	f000 f9bb 	bl	8002afa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002784:	bf00      	nop
 8002786:	3728      	adds	r7, #40	; 0x28
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40004400 	.word	0x40004400
 8002790:	40021000 	.word	0x40021000

08002794 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002794:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027cc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002798:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800279a:	e003      	b.n	80027a4 <LoopCopyDataInit>

0800279c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800279c:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800279e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80027a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80027a2:	3104      	adds	r1, #4

080027a4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80027a4:	480b      	ldr	r0, [pc, #44]	; (80027d4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80027a6:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80027a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80027aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80027ac:	d3f6      	bcc.n	800279c <CopyDataInit>
	ldr	r2, =_sbss
 80027ae:	4a0b      	ldr	r2, [pc, #44]	; (80027dc <LoopForever+0x12>)
	b	LoopFillZerobss
 80027b0:	e002      	b.n	80027b8 <LoopFillZerobss>

080027b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80027b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80027b4:	f842 3b04 	str.w	r3, [r2], #4

080027b8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80027b8:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <LoopForever+0x16>)
	cmp	r2, r3
 80027ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80027bc:	d3f9      	bcc.n	80027b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80027be:	f7ff ff39 	bl	8002634 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027c2:	f008 fa51 	bl	800ac68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027c6:	f7ff fd5f 	bl	8002288 <main>

080027ca <LoopForever>:

LoopForever:
    b LoopForever
 80027ca:	e7fe      	b.n	80027ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027cc:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80027d0:	0800adc4 	.word	0x0800adc4
	ldr	r0, =_sdata
 80027d4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80027d8:	2000018c 	.word	0x2000018c
	ldr	r2, =_sbss
 80027dc:	2000018c 	.word	0x2000018c
	ldr	r3, = _ebss
 80027e0:	2000157c 	.word	0x2000157c

080027e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027e4:	e7fe      	b.n	80027e4 <ADC1_2_IRQHandler>

080027e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027f0:	2003      	movs	r0, #3
 80027f2:	f000 f95b 	bl	8002aac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027f6:	2000      	movs	r0, #0
 80027f8:	f000 f80e 	bl	8002818 <HAL_InitTick>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	71fb      	strb	r3, [r7, #7]
 8002806:	e001      	b.n	800280c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002808:	f7ff feae 	bl	8002568 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800280c:	79fb      	ldrb	r3, [r7, #7]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002824:	4b16      	ldr	r3, [pc, #88]	; (8002880 <HAL_InitTick+0x68>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d022      	beq.n	8002872 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800282c:	4b15      	ldr	r3, [pc, #84]	; (8002884 <HAL_InitTick+0x6c>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b13      	ldr	r3, [pc, #76]	; (8002880 <HAL_InitTick+0x68>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002838:	fbb1 f3f3 	udiv	r3, r1, r3
 800283c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002840:	4618      	mov	r0, r3
 8002842:	f000 f968 	bl	8002b16 <HAL_SYSTICK_Config>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10f      	bne.n	800286c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b0f      	cmp	r3, #15
 8002850:	d809      	bhi.n	8002866 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002852:	2200      	movs	r2, #0
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	f04f 30ff 	mov.w	r0, #4294967295
 800285a:	f000 f932 	bl	8002ac2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800285e:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <HAL_InitTick+0x70>)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	e007      	b.n	8002876 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	73fb      	strb	r3, [r7, #15]
 800286a:	e004      	b.n	8002876 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	73fb      	strb	r3, [r7, #15]
 8002870:	e001      	b.n	8002876 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002876:	7bfb      	ldrb	r3, [r7, #15]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	20000008 	.word	0x20000008
 8002884:	20000000 	.word	0x20000000
 8002888:	20000004 	.word	0x20000004

0800288c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <HAL_IncTick+0x1c>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <HAL_IncTick+0x20>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4413      	add	r3, r2
 800289a:	4a03      	ldr	r2, [pc, #12]	; (80028a8 <HAL_IncTick+0x1c>)
 800289c:	6013      	str	r3, [r2, #0]
}
 800289e:	bf00      	nop
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	20000670 	.word	0x20000670
 80028ac:	20000008 	.word	0x20000008

080028b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  return uwTick;
 80028b4:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <HAL_GetTick+0x14>)
 80028b6:	681b      	ldr	r3, [r3, #0]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	20000670 	.word	0x20000670

080028c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028d0:	f7ff ffee 	bl	80028b0 <HAL_GetTick>
 80028d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e0:	d004      	beq.n	80028ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80028e2:	4b09      	ldr	r3, [pc, #36]	; (8002908 <HAL_Delay+0x40>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4413      	add	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028ec:	bf00      	nop
 80028ee:	f7ff ffdf 	bl	80028b0 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d8f7      	bhi.n	80028ee <HAL_Delay+0x26>
  {
  }
}
 80028fe:	bf00      	nop
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000008 	.word	0x20000008

0800290c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800291c:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <__NVIC_SetPriorityGrouping+0x44>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002928:	4013      	ands	r3, r2
 800292a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002934:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800293c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800293e:	4a04      	ldr	r2, [pc, #16]	; (8002950 <__NVIC_SetPriorityGrouping+0x44>)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	60d3      	str	r3, [r2, #12]
}
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002958:	4b04      	ldr	r3, [pc, #16]	; (800296c <__NVIC_GetPriorityGrouping+0x18>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	0a1b      	lsrs	r3, r3, #8
 800295e:	f003 0307 	and.w	r3, r3, #7
}
 8002962:	4618      	mov	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800297a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297e:	2b00      	cmp	r3, #0
 8002980:	db0b      	blt.n	800299a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	f003 021f 	and.w	r2, r3, #31
 8002988:	4907      	ldr	r1, [pc, #28]	; (80029a8 <__NVIC_EnableIRQ+0x38>)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	2001      	movs	r0, #1
 8002992:	fa00 f202 	lsl.w	r2, r0, r2
 8002996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	e000e100 	.word	0xe000e100

080029ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	6039      	str	r1, [r7, #0]
 80029b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	db0a      	blt.n	80029d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	490c      	ldr	r1, [pc, #48]	; (80029f8 <__NVIC_SetPriority+0x4c>)
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	0112      	lsls	r2, r2, #4
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	440b      	add	r3, r1
 80029d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029d4:	e00a      	b.n	80029ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	4908      	ldr	r1, [pc, #32]	; (80029fc <__NVIC_SetPriority+0x50>)
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	3b04      	subs	r3, #4
 80029e4:	0112      	lsls	r2, r2, #4
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	440b      	add	r3, r1
 80029ea:	761a      	strb	r2, [r3, #24]
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	e000e100 	.word	0xe000e100
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b089      	sub	sp, #36	; 0x24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f1c3 0307 	rsb	r3, r3, #7
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	bf28      	it	cs
 8002a1e:	2304      	movcs	r3, #4
 8002a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3304      	adds	r3, #4
 8002a26:	2b06      	cmp	r3, #6
 8002a28:	d902      	bls.n	8002a30 <NVIC_EncodePriority+0x30>
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3b03      	subs	r3, #3
 8002a2e:	e000      	b.n	8002a32 <NVIC_EncodePriority+0x32>
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a34:	f04f 32ff 	mov.w	r2, #4294967295
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	401a      	ands	r2, r3
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a48:	f04f 31ff 	mov.w	r1, #4294967295
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a52:	43d9      	mvns	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a58:	4313      	orrs	r3, r2
         );
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3724      	adds	r7, #36	; 0x24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a78:	d301      	bcc.n	8002a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e00f      	b.n	8002a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a7e:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <SysTick_Config+0x40>)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a86:	210f      	movs	r1, #15
 8002a88:	f04f 30ff 	mov.w	r0, #4294967295
 8002a8c:	f7ff ff8e 	bl	80029ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <SysTick_Config+0x40>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a96:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <SysTick_Config+0x40>)
 8002a98:	2207      	movs	r2, #7
 8002a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	e000e010 	.word	0xe000e010

08002aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff ff29 	bl	800290c <__NVIC_SetPriorityGrouping>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b086      	sub	sp, #24
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	4603      	mov	r3, r0
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
 8002ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ad4:	f7ff ff3e 	bl	8002954 <__NVIC_GetPriorityGrouping>
 8002ad8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	6978      	ldr	r0, [r7, #20]
 8002ae0:	f7ff ff8e 	bl	8002a00 <NVIC_EncodePriority>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aea:	4611      	mov	r1, r2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff ff5d 	bl	80029ac <__NVIC_SetPriority>
}
 8002af2:	bf00      	nop
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	4603      	mov	r3, r0
 8002b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff31 	bl	8002970 <__NVIC_EnableIRQ>
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff ffa2 	bl	8002a68 <SysTick_Config>
 8002b24:	4603      	mov	r3, r0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d005      	beq.n	8002b52 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2204      	movs	r2, #4
 8002b4a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
 8002b50:	e029      	b.n	8002ba6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 020e 	bic.w	r2, r2, #14
 8002b60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0201 	bic.w	r2, r2, #1
 8002b70:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b76:	f003 021c 	and.w	r2, r3, #28
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	2101      	movs	r1, #1
 8002b80:	fa01 f202 	lsl.w	r2, r1, r2
 8002b84:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	4798      	blx	r3
    }
  }
  return status;
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bbe:	e14e      	b.n	8002e5e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bcc:	4013      	ands	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 8140 	beq.w	8002e58 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d00b      	beq.n	8002bf8 <HAL_GPIO_Init+0x48>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d007      	beq.n	8002bf8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bec:	2b11      	cmp	r3, #17
 8002bee:	d003      	beq.n	8002bf8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b12      	cmp	r3, #18
 8002bf6:	d130      	bne.n	8002c5a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	2203      	movs	r2, #3
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c2e:	2201      	movs	r2, #1
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	091b      	lsrs	r3, r3, #4
 8002c44:	f003 0201 	and.w	r2, r3, #1
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	2203      	movs	r2, #3
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_Init+0xea>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b12      	cmp	r3, #18
 8002c98:	d123      	bne.n	8002ce2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	08da      	lsrs	r2, r3, #3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3208      	adds	r2, #8
 8002ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	220f      	movs	r2, #15
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	08da      	lsrs	r2, r3, #3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3208      	adds	r2, #8
 8002cdc:	6939      	ldr	r1, [r7, #16]
 8002cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	2203      	movs	r2, #3
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 0203 	and.w	r2, r3, #3
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 809a 	beq.w	8002e58 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d24:	4b55      	ldr	r3, [pc, #340]	; (8002e7c <HAL_GPIO_Init+0x2cc>)
 8002d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d28:	4a54      	ldr	r2, [pc, #336]	; (8002e7c <HAL_GPIO_Init+0x2cc>)
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	6613      	str	r3, [r2, #96]	; 0x60
 8002d30:	4b52      	ldr	r3, [pc, #328]	; (8002e7c <HAL_GPIO_Init+0x2cc>)
 8002d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d3c:	4a50      	ldr	r2, [pc, #320]	; (8002e80 <HAL_GPIO_Init+0x2d0>)
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	089b      	lsrs	r3, r3, #2
 8002d42:	3302      	adds	r3, #2
 8002d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f003 0303 	and.w	r3, r3, #3
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	220f      	movs	r2, #15
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d66:	d013      	beq.n	8002d90 <HAL_GPIO_Init+0x1e0>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a46      	ldr	r2, [pc, #280]	; (8002e84 <HAL_GPIO_Init+0x2d4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d00d      	beq.n	8002d8c <HAL_GPIO_Init+0x1dc>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a45      	ldr	r2, [pc, #276]	; (8002e88 <HAL_GPIO_Init+0x2d8>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d007      	beq.n	8002d88 <HAL_GPIO_Init+0x1d8>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a44      	ldr	r2, [pc, #272]	; (8002e8c <HAL_GPIO_Init+0x2dc>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d101      	bne.n	8002d84 <HAL_GPIO_Init+0x1d4>
 8002d80:	2303      	movs	r3, #3
 8002d82:	e006      	b.n	8002d92 <HAL_GPIO_Init+0x1e2>
 8002d84:	2307      	movs	r3, #7
 8002d86:	e004      	b.n	8002d92 <HAL_GPIO_Init+0x1e2>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e002      	b.n	8002d92 <HAL_GPIO_Init+0x1e2>
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <HAL_GPIO_Init+0x1e2>
 8002d90:	2300      	movs	r3, #0
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	f002 0203 	and.w	r2, r2, #3
 8002d98:	0092      	lsls	r2, r2, #2
 8002d9a:	4093      	lsls	r3, r2
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002da2:	4937      	ldr	r1, [pc, #220]	; (8002e80 <HAL_GPIO_Init+0x2d0>)
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	089b      	lsrs	r3, r3, #2
 8002da8:	3302      	adds	r3, #2
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002db0:	4b37      	ldr	r3, [pc, #220]	; (8002e90 <HAL_GPIO_Init+0x2e0>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	43db      	mvns	r3, r3
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002dd4:	4a2e      	ldr	r2, [pc, #184]	; (8002e90 <HAL_GPIO_Init+0x2e0>)
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002dda:	4b2d      	ldr	r3, [pc, #180]	; (8002e90 <HAL_GPIO_Init+0x2e0>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	43db      	mvns	r3, r3
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4013      	ands	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dfe:	4a24      	ldr	r2, [pc, #144]	; (8002e90 <HAL_GPIO_Init+0x2e0>)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e04:	4b22      	ldr	r3, [pc, #136]	; (8002e90 <HAL_GPIO_Init+0x2e0>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4013      	ands	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e28:	4a19      	ldr	r2, [pc, #100]	; (8002e90 <HAL_GPIO_Init+0x2e0>)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e2e:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <HAL_GPIO_Init+0x2e0>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	43db      	mvns	r3, r3
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e52:	4a0f      	ldr	r2, [pc, #60]	; (8002e90 <HAL_GPIO_Init+0x2e0>)
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	fa22 f303 	lsr.w	r3, r2, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f47f aea9 	bne.w	8002bc0 <HAL_GPIO_Init+0x10>
  }
}
 8002e6e:	bf00      	nop
 8002e70:	371c      	adds	r7, #28
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	40010000 	.word	0x40010000
 8002e84:	48000400 	.word	0x48000400
 8002e88:	48000800 	.word	0x48000800
 8002e8c:	48000c00 	.word	0x48000c00
 8002e90:	40010400 	.word	0x40010400

08002e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	807b      	strh	r3, [r7, #2]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ea4:	787b      	ldrb	r3, [r7, #1]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002eaa:	887a      	ldrh	r2, [r7, #2]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002eb0:	e002      	b.n	8002eb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002eb2:	887a      	ldrh	r2, [r7, #2]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	695a      	ldr	r2, [r3, #20]
 8002ed4:	887b      	ldrh	r3, [r7, #2]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002edc:	887a      	ldrh	r2, [r7, #2]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002ee2:	e002      	b.n	8002eea <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ee4:	887a      	ldrh	r2, [r7, #2]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	619a      	str	r2, [r3, #24]
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e081      	b.n	800300c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d106      	bne.n	8002f22 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff f96f 	bl	8002200 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2224      	movs	r2, #36	; 0x24
 8002f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0201 	bic.w	r2, r2, #1
 8002f38:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f46:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f56:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d107      	bne.n	8002f70 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f6c:	609a      	str	r2, [r3, #8]
 8002f6e:	e006      	b.n	8002f7e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f7c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d104      	bne.n	8002f90 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f8e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6812      	ldr	r2, [r2, #0]
 8002f9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fa2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fb2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691a      	ldr	r2, [r3, #16]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	ea42 0103 	orr.w	r1, r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	021a      	lsls	r2, r3, #8
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69d9      	ldr	r1, [r3, #28]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1a      	ldr	r2, [r3, #32]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f042 0201 	orr.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b088      	sub	sp, #32
 8003018:	af02      	add	r7, sp, #8
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	461a      	mov	r2, r3
 8003020:	460b      	mov	r3, r1
 8003022:	817b      	strh	r3, [r7, #10]
 8003024:	4613      	mov	r3, r2
 8003026:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b20      	cmp	r3, #32
 8003032:	f040 80da 	bne.w	80031ea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <HAL_I2C_Master_Transmit+0x30>
 8003040:	2302      	movs	r3, #2
 8003042:	e0d3      	b.n	80031ec <HAL_I2C_Master_Transmit+0x1d8>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800304c:	f7ff fc30 	bl	80028b0 <HAL_GetTick>
 8003050:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	2319      	movs	r3, #25
 8003058:	2201      	movs	r2, #1
 800305a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 fb54 	bl	800370c <I2C_WaitOnFlagUntilTimeout>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e0be      	b.n	80031ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2221      	movs	r2, #33	; 0x21
 8003072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2210      	movs	r2, #16
 800307a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	893a      	ldrh	r2, [r7, #8]
 800308e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309a:	b29b      	uxth	r3, r3
 800309c:	2bff      	cmp	r3, #255	; 0xff
 800309e:	d90e      	bls.n	80030be <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	22ff      	movs	r2, #255	; 0xff
 80030a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	8979      	ldrh	r1, [r7, #10]
 80030ae:	4b51      	ldr	r3, [pc, #324]	; (80031f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 fcb6 	bl	8003a28 <I2C_TransferConfig>
 80030bc:	e06c      	b.n	8003198 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	8979      	ldrh	r1, [r7, #10]
 80030d0:	4b48      	ldr	r3, [pc, #288]	; (80031f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 fca5 	bl	8003a28 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80030de:	e05b      	b.n	8003198 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	6a39      	ldr	r1, [r7, #32]
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 fb51 	bl	800378c <I2C_WaitOnTXISFlagUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e07b      	b.n	80031ec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	781a      	ldrb	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	1c5a      	adds	r2, r3, #1
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310e:	b29b      	uxth	r3, r3
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d034      	beq.n	8003198 <HAL_I2C_Master_Transmit+0x184>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003132:	2b00      	cmp	r3, #0
 8003134:	d130      	bne.n	8003198 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	2200      	movs	r2, #0
 800313e:	2180      	movs	r1, #128	; 0x80
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 fae3 	bl	800370c <I2C_WaitOnFlagUntilTimeout>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e04d      	b.n	80031ec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003154:	b29b      	uxth	r3, r3
 8003156:	2bff      	cmp	r3, #255	; 0xff
 8003158:	d90e      	bls.n	8003178 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	22ff      	movs	r2, #255	; 0xff
 800315e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003164:	b2da      	uxtb	r2, r3
 8003166:	8979      	ldrh	r1, [r7, #10]
 8003168:	2300      	movs	r3, #0
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 fc59 	bl	8003a28 <I2C_TransferConfig>
 8003176:	e00f      	b.n	8003198 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003186:	b2da      	uxtb	r2, r3
 8003188:	8979      	ldrh	r1, [r7, #10]
 800318a:	2300      	movs	r3, #0
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 fc48 	bl	8003a28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319c:	b29b      	uxth	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d19e      	bne.n	80030e0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	6a39      	ldr	r1, [r7, #32]
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 fb30 	bl	800380c <I2C_WaitOnSTOPFlagUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e01a      	b.n	80031ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2220      	movs	r2, #32
 80031bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6859      	ldr	r1, [r3, #4]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <HAL_I2C_Master_Transmit+0x1e4>)
 80031ca:	400b      	ands	r3, r1
 80031cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2220      	movs	r2, #32
 80031d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	e000      	b.n	80031ec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80031ea:	2302      	movs	r3, #2
  }
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	80002000 	.word	0x80002000
 80031f8:	fe00e800 	.word	0xfe00e800

080031fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af02      	add	r7, sp, #8
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	607a      	str	r2, [r7, #4]
 8003206:	461a      	mov	r2, r3
 8003208:	460b      	mov	r3, r1
 800320a:	817b      	strh	r3, [r7, #10]
 800320c:	4613      	mov	r3, r2
 800320e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b20      	cmp	r3, #32
 800321a:	f040 80db 	bne.w	80033d4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003224:	2b01      	cmp	r3, #1
 8003226:	d101      	bne.n	800322c <HAL_I2C_Master_Receive+0x30>
 8003228:	2302      	movs	r3, #2
 800322a:	e0d4      	b.n	80033d6 <HAL_I2C_Master_Receive+0x1da>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003234:	f7ff fb3c 	bl	80028b0 <HAL_GetTick>
 8003238:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	2319      	movs	r3, #25
 8003240:	2201      	movs	r2, #1
 8003242:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 fa60 	bl	800370c <I2C_WaitOnFlagUntilTimeout>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e0bf      	b.n	80033d6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2222      	movs	r2, #34	; 0x22
 800325a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2210      	movs	r2, #16
 8003262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	893a      	ldrh	r2, [r7, #8]
 8003276:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003282:	b29b      	uxth	r3, r3
 8003284:	2bff      	cmp	r3, #255	; 0xff
 8003286:	d90e      	bls.n	80032a6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	22ff      	movs	r2, #255	; 0xff
 800328c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003292:	b2da      	uxtb	r2, r3
 8003294:	8979      	ldrh	r1, [r7, #10]
 8003296:	4b52      	ldr	r3, [pc, #328]	; (80033e0 <HAL_I2C_Master_Receive+0x1e4>)
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 fbc2 	bl	8003a28 <I2C_TransferConfig>
 80032a4:	e06d      	b.n	8003382 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	8979      	ldrh	r1, [r7, #10]
 80032b8:	4b49      	ldr	r3, [pc, #292]	; (80033e0 <HAL_I2C_Master_Receive+0x1e4>)
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 fbb1 	bl	8003a28 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80032c6:	e05c      	b.n	8003382 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	6a39      	ldr	r1, [r7, #32]
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 fad9 	bl	8003884 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e07c      	b.n	80033d6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003304:	b29b      	uxth	r3, r3
 8003306:	3b01      	subs	r3, #1
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003312:	b29b      	uxth	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d034      	beq.n	8003382 <HAL_I2C_Master_Receive+0x186>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331c:	2b00      	cmp	r3, #0
 800331e:	d130      	bne.n	8003382 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	2200      	movs	r2, #0
 8003328:	2180      	movs	r1, #128	; 0x80
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 f9ee 	bl	800370c <I2C_WaitOnFlagUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e04d      	b.n	80033d6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333e:	b29b      	uxth	r3, r3
 8003340:	2bff      	cmp	r3, #255	; 0xff
 8003342:	d90e      	bls.n	8003362 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	22ff      	movs	r2, #255	; 0xff
 8003348:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334e:	b2da      	uxtb	r2, r3
 8003350:	8979      	ldrh	r1, [r7, #10]
 8003352:	2300      	movs	r3, #0
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 fb64 	bl	8003a28 <I2C_TransferConfig>
 8003360:	e00f      	b.n	8003382 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003370:	b2da      	uxtb	r2, r3
 8003372:	8979      	ldrh	r1, [r7, #10]
 8003374:	2300      	movs	r3, #0
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 fb53 	bl	8003a28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d19d      	bne.n	80032c8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	6a39      	ldr	r1, [r7, #32]
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 fa3b 	bl	800380c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e01a      	b.n	80033d6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2220      	movs	r2, #32
 80033a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6859      	ldr	r1, [r3, #4]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	4b0c      	ldr	r3, [pc, #48]	; (80033e4 <HAL_I2C_Master_Receive+0x1e8>)
 80033b4:	400b      	ands	r3, r1
 80033b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	e000      	b.n	80033d6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80033d4:	2302      	movs	r3, #2
  }
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	80002400 	.word	0x80002400
 80033e4:	fe00e800 	.word	0xfe00e800

080033e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	4608      	mov	r0, r1
 80033f2:	4611      	mov	r1, r2
 80033f4:	461a      	mov	r2, r3
 80033f6:	4603      	mov	r3, r0
 80033f8:	817b      	strh	r3, [r7, #10]
 80033fa:	460b      	mov	r3, r1
 80033fc:	813b      	strh	r3, [r7, #8]
 80033fe:	4613      	mov	r3, r2
 8003400:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b20      	cmp	r3, #32
 800340c:	f040 80fd 	bne.w	800360a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <HAL_I2C_Mem_Read+0x34>
 8003416:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003418:	2b00      	cmp	r3, #0
 800341a:	d105      	bne.n	8003428 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003422:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0f1      	b.n	800360c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_I2C_Mem_Read+0x4e>
 8003432:	2302      	movs	r3, #2
 8003434:	e0ea      	b.n	800360c <HAL_I2C_Mem_Read+0x224>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800343e:	f7ff fa37 	bl	80028b0 <HAL_GetTick>
 8003442:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	2319      	movs	r3, #25
 800344a:	2201      	movs	r2, #1
 800344c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f95b 	bl	800370c <I2C_WaitOnFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e0d5      	b.n	800360c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2222      	movs	r2, #34	; 0x22
 8003464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2240      	movs	r2, #64	; 0x40
 800346c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a3a      	ldr	r2, [r7, #32]
 800347a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003480:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003488:	88f8      	ldrh	r0, [r7, #6]
 800348a:	893a      	ldrh	r2, [r7, #8]
 800348c:	8979      	ldrh	r1, [r7, #10]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	9301      	str	r3, [sp, #4]
 8003492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	4603      	mov	r3, r0
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 f8bf 	bl	800361c <I2C_RequestMemoryRead>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0ad      	b.n	800360c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2bff      	cmp	r3, #255	; 0xff
 80034b8:	d90e      	bls.n	80034d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	22ff      	movs	r2, #255	; 0xff
 80034be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	8979      	ldrh	r1, [r7, #10]
 80034c8:	4b52      	ldr	r3, [pc, #328]	; (8003614 <HAL_I2C_Mem_Read+0x22c>)
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 faa9 	bl	8003a28 <I2C_TransferConfig>
 80034d6:	e00f      	b.n	80034f8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	8979      	ldrh	r1, [r7, #10]
 80034ea:	4b4a      	ldr	r3, [pc, #296]	; (8003614 <HAL_I2C_Mem_Read+0x22c>)
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 fa98 	bl	8003a28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fe:	2200      	movs	r2, #0
 8003500:	2104      	movs	r1, #4
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f902 	bl	800370c <I2C_WaitOnFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e07c      	b.n	800360c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	1c5a      	adds	r2, r3, #1
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352e:	3b01      	subs	r3, #1
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d034      	beq.n	80035b8 <HAL_I2C_Mem_Read+0x1d0>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003552:	2b00      	cmp	r3, #0
 8003554:	d130      	bne.n	80035b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355c:	2200      	movs	r2, #0
 800355e:	2180      	movs	r1, #128	; 0x80
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f8d3 	bl	800370c <I2C_WaitOnFlagUntilTimeout>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e04d      	b.n	800360c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003574:	b29b      	uxth	r3, r3
 8003576:	2bff      	cmp	r3, #255	; 0xff
 8003578:	d90e      	bls.n	8003598 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	22ff      	movs	r2, #255	; 0xff
 800357e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003584:	b2da      	uxtb	r2, r3
 8003586:	8979      	ldrh	r1, [r7, #10]
 8003588:	2300      	movs	r3, #0
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 fa49 	bl	8003a28 <I2C_TransferConfig>
 8003596:	e00f      	b.n	80035b8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	8979      	ldrh	r1, [r7, #10]
 80035aa:	2300      	movs	r3, #0
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 fa38 	bl	8003a28 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d19a      	bne.n	80034f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f920 	bl	800380c <I2C_WaitOnSTOPFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e01a      	b.n	800360c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2220      	movs	r2, #32
 80035dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6859      	ldr	r1, [r3, #4]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_I2C_Mem_Read+0x230>)
 80035ea:	400b      	ands	r3, r1
 80035ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	e000      	b.n	800360c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800360a:	2302      	movs	r3, #2
  }
}
 800360c:	4618      	mov	r0, r3
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	80002400 	.word	0x80002400
 8003618:	fe00e800 	.word	0xfe00e800

0800361c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af02      	add	r7, sp, #8
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	4608      	mov	r0, r1
 8003626:	4611      	mov	r1, r2
 8003628:	461a      	mov	r2, r3
 800362a:	4603      	mov	r3, r0
 800362c:	817b      	strh	r3, [r7, #10]
 800362e:	460b      	mov	r3, r1
 8003630:	813b      	strh	r3, [r7, #8]
 8003632:	4613      	mov	r3, r2
 8003634:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003636:	88fb      	ldrh	r3, [r7, #6]
 8003638:	b2da      	uxtb	r2, r3
 800363a:	8979      	ldrh	r1, [r7, #10]
 800363c:	4b20      	ldr	r3, [pc, #128]	; (80036c0 <I2C_RequestMemoryRead+0xa4>)
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	2300      	movs	r3, #0
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 f9f0 	bl	8003a28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003648:	69fa      	ldr	r2, [r7, #28]
 800364a:	69b9      	ldr	r1, [r7, #24]
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 f89d 	bl	800378c <I2C_WaitOnTXISFlagUntilTimeout>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e02c      	b.n	80036b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800365c:	88fb      	ldrh	r3, [r7, #6]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d105      	bne.n	800366e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003662:	893b      	ldrh	r3, [r7, #8]
 8003664:	b2da      	uxtb	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	629a      	str	r2, [r3, #40]	; 0x28
 800366c:	e015      	b.n	800369a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800366e:	893b      	ldrh	r3, [r7, #8]
 8003670:	0a1b      	lsrs	r3, r3, #8
 8003672:	b29b      	uxth	r3, r3
 8003674:	b2da      	uxtb	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800367c:	69fa      	ldr	r2, [r7, #28]
 800367e:	69b9      	ldr	r1, [r7, #24]
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f000 f883 	bl	800378c <I2C_WaitOnTXISFlagUntilTimeout>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e012      	b.n	80036b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003690:	893b      	ldrh	r3, [r7, #8]
 8003692:	b2da      	uxtb	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	2200      	movs	r2, #0
 80036a2:	2140      	movs	r1, #64	; 0x40
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 f831 	bl	800370c <I2C_WaitOnFlagUntilTimeout>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e000      	b.n	80036b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	80002000 	.word	0x80002000

080036c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d103      	bne.n	80036e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2200      	movs	r2, #0
 80036e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d007      	beq.n	8003700 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699a      	ldr	r2, [r3, #24]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	619a      	str	r2, [r3, #24]
  }
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	4613      	mov	r3, r2
 800371a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800371c:	e022      	b.n	8003764 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003724:	d01e      	beq.n	8003764 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003726:	f7ff f8c3 	bl	80028b0 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d302      	bcc.n	800373c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d113      	bne.n	8003764 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003740:	f043 0220 	orr.w	r2, r3, #32
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e00f      	b.n	8003784 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	699a      	ldr	r2, [r3, #24]
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	4013      	ands	r3, r2
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	429a      	cmp	r2, r3
 8003772:	bf0c      	ite	eq
 8003774:	2301      	moveq	r3, #1
 8003776:	2300      	movne	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	461a      	mov	r2, r3
 800377c:	79fb      	ldrb	r3, [r7, #7]
 800377e:	429a      	cmp	r2, r3
 8003780:	d0cd      	beq.n	800371e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003798:	e02c      	b.n	80037f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f8dc 	bl	800395c <I2C_IsAcknowledgeFailed>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e02a      	b.n	8003804 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b4:	d01e      	beq.n	80037f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b6:	f7ff f87b 	bl	80028b0 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d302      	bcc.n	80037cc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d113      	bne.n	80037f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d0:	f043 0220 	orr.w	r2, r3, #32
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e007      	b.n	8003804 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d1cb      	bne.n	800379a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003818:	e028      	b.n	800386c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68b9      	ldr	r1, [r7, #8]
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f89c 	bl	800395c <I2C_IsAcknowledgeFailed>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e026      	b.n	800387c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382e:	f7ff f83f 	bl	80028b0 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	429a      	cmp	r2, r3
 800383c:	d302      	bcc.n	8003844 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d113      	bne.n	800386c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003848:	f043 0220 	orr.w	r2, r3, #32
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e007      	b.n	800387c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	f003 0320 	and.w	r3, r3, #32
 8003876:	2b20      	cmp	r3, #32
 8003878:	d1cf      	bne.n	800381a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003890:	e055      	b.n	800393e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68b9      	ldr	r1, [r7, #8]
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 f860 	bl	800395c <I2C_IsAcknowledgeFailed>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e053      	b.n	800394e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	f003 0320 	and.w	r3, r3, #32
 80038b0:	2b20      	cmp	r3, #32
 80038b2:	d129      	bne.n	8003908 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	f003 0304 	and.w	r3, r3, #4
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d105      	bne.n	80038ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	e03f      	b.n	800394e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2220      	movs	r2, #32
 80038d4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6859      	ldr	r1, [r3, #4]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4b1d      	ldr	r3, [pc, #116]	; (8003958 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80038e2:	400b      	ands	r3, r1
 80038e4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e022      	b.n	800394e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003908:	f7fe ffd2 	bl	80028b0 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	429a      	cmp	r2, r3
 8003916:	d302      	bcc.n	800391e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10f      	bne.n	800393e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	f043 0220 	orr.w	r2, r3, #32
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e007      	b.n	800394e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b04      	cmp	r3, #4
 800394a:	d1a2      	bne.n	8003892 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	fe00e800 	.word	0xfe00e800

0800395c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	f003 0310 	and.w	r3, r3, #16
 8003972:	2b10      	cmp	r3, #16
 8003974:	d151      	bne.n	8003a1a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003976:	e022      	b.n	80039be <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397e:	d01e      	beq.n	80039be <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003980:	f7fe ff96 	bl	80028b0 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	429a      	cmp	r2, r3
 800398e:	d302      	bcc.n	8003996 <I2C_IsAcknowledgeFailed+0x3a>
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d113      	bne.n	80039be <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	f043 0220 	orr.w	r2, r3, #32
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e02e      	b.n	8003a1c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b20      	cmp	r3, #32
 80039ca:	d1d5      	bne.n	8003978 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2210      	movs	r2, #16
 80039d2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2220      	movs	r2, #32
 80039da:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f7ff fe71 	bl	80036c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6859      	ldr	r1, [r3, #4]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	4b0d      	ldr	r3, [pc, #52]	; (8003a24 <I2C_IsAcknowledgeFailed+0xc8>)
 80039ee:	400b      	ands	r3, r1
 80039f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	f043 0204 	orr.w	r2, r3, #4
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	fe00e800 	.word	0xfe00e800

08003a28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	607b      	str	r3, [r7, #4]
 8003a32:	460b      	mov	r3, r1
 8003a34:	817b      	strh	r3, [r7, #10]
 8003a36:	4613      	mov	r3, r2
 8003a38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	0d5b      	lsrs	r3, r3, #21
 8003a44:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003a48:	4b0d      	ldr	r3, [pc, #52]	; (8003a80 <I2C_TransferConfig+0x58>)
 8003a4a:	430b      	orrs	r3, r1
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	ea02 0103 	and.w	r1, r2, r3
 8003a52:	897b      	ldrh	r3, [r7, #10]
 8003a54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a58:	7a7b      	ldrb	r3, [r7, #9]
 8003a5a:	041b      	lsls	r3, r3, #16
 8003a5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	431a      	orrs	r2, r3
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003a72:	bf00      	nop
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	03ff63ff 	.word	0x03ff63ff

08003a84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b20      	cmp	r3, #32
 8003a98:	d138      	bne.n	8003b0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e032      	b.n	8003b0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2224      	movs	r2, #36	; 0x24
 8003ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0201 	bic.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ad6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6819      	ldr	r1, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0201 	orr.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	e000      	b.n	8003b0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b0c:	2302      	movs	r3, #2
  }
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b085      	sub	sp, #20
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d139      	bne.n	8003ba4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e033      	b.n	8003ba6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2224      	movs	r2, #36	; 0x24
 8003b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0201 	bic.w	r2, r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	021b      	lsls	r3, r3, #8
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	e000      	b.n	8003ba6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ba4:	2302      	movs	r3, #2
  }
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003bb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bb4:	b08b      	sub	sp, #44	; 0x2c
 8003bb6:	af06      	add	r7, sp, #24
 8003bb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0da      	b.n	8003d7a <HAL_PCD_Init+0x1c8>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d106      	bne.n	8003bde <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f006 fca7 	bl	800a52c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2203      	movs	r2, #3
 8003be2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f003 fe15 	bl	800781a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	603b      	str	r3, [r7, #0]
 8003bf6:	687e      	ldr	r6, [r7, #4]
 8003bf8:	466d      	mov	r5, sp
 8003bfa:	f106 0410 	add.w	r4, r6, #16
 8003bfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c02:	6823      	ldr	r3, [r4, #0]
 8003c04:	602b      	str	r3, [r5, #0]
 8003c06:	1d33      	adds	r3, r6, #4
 8003c08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c0a:	6838      	ldr	r0, [r7, #0]
 8003c0c:	f003 fddb 	bl	80077c6 <USB_CoreInit>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d005      	beq.n	8003c22 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2202      	movs	r2, #2
 8003c1a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e0ab      	b.n	8003d7a <HAL_PCD_Init+0x1c8>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2100      	movs	r1, #0
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f003 fe11 	bl	8007850 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c2e:	2300      	movs	r3, #0
 8003c30:	73fb      	strb	r3, [r7, #15]
 8003c32:	e035      	b.n	8003ca0 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	015b      	lsls	r3, r3, #5
 8003c3a:	4413      	add	r3, r2
 8003c3c:	3329      	adds	r3, #41	; 0x29
 8003c3e:	2201      	movs	r2, #1
 8003c40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	015b      	lsls	r3, r3, #5
 8003c48:	4413      	add	r3, r2
 8003c4a:	3328      	adds	r3, #40	; 0x28
 8003c4c:	7bfa      	ldrb	r2, [r7, #15]
 8003c4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
 8003c52:	7bfa      	ldrb	r2, [r7, #15]
 8003c54:	b291      	uxth	r1, r2
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	015b      	lsls	r3, r3, #5
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3336      	adds	r3, #54	; 0x36
 8003c5e:	460a      	mov	r2, r1
 8003c60:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	015b      	lsls	r3, r3, #5
 8003c68:	4413      	add	r3, r2
 8003c6a:	332b      	adds	r3, #43	; 0x2b
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	015b      	lsls	r3, r3, #5
 8003c76:	4413      	add	r3, r2
 8003c78:	3338      	adds	r3, #56	; 0x38
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	015b      	lsls	r3, r3, #5
 8003c84:	4413      	add	r3, r2
 8003c86:	333c      	adds	r3, #60	; 0x3c
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	3302      	adds	r3, #2
 8003c92:	015b      	lsls	r3, r3, #5
 8003c94:	4413      	add	r3, r2
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
 8003ca0:	7bfa      	ldrb	r2, [r7, #15]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d3c4      	bcc.n	8003c34 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003caa:	2300      	movs	r3, #0
 8003cac:	73fb      	strb	r3, [r7, #15]
 8003cae:	e031      	b.n	8003d14 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	015b      	lsls	r3, r3, #5
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f203 1329 	addw	r3, r3, #297	; 0x129
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	015b      	lsls	r3, r3, #5
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003ccc:	7bfa      	ldrb	r2, [r7, #15]
 8003cce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	015b      	lsls	r3, r3, #5
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	015b      	lsls	r3, r3, #5
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003cf0:	7bfb      	ldrb	r3, [r7, #15]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	015b      	lsls	r3, r3, #5
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	330a      	adds	r3, #10
 8003d06:	015b      	lsls	r3, r3, #5
 8003d08:	4413      	add	r3, r2
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d0e:	7bfb      	ldrb	r3, [r7, #15]
 8003d10:	3301      	adds	r3, #1
 8003d12:	73fb      	strb	r3, [r7, #15]
 8003d14:	7bfa      	ldrb	r2, [r7, #15]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d3c8      	bcc.n	8003cb0 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	603b      	str	r3, [r7, #0]
 8003d24:	687e      	ldr	r6, [r7, #4]
 8003d26:	466d      	mov	r5, sp
 8003d28:	f106 0410 	add.w	r4, r6, #16
 8003d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d30:	6823      	ldr	r3, [r4, #0]
 8003d32:	602b      	str	r3, [r5, #0]
 8003d34:	1d33      	adds	r3, r6, #4
 8003d36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d38:	6838      	ldr	r0, [r7, #0]
 8003d3a:	f003 fd96 	bl	800786a <USB_DevInit>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d005      	beq.n	8003d50 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e014      	b.n	8003d7a <HAL_PCD_Init+0x1c8>
  }

  hpcd->USB_Address = 0U;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d102      	bne.n	8003d6e <HAL_PCD_Init+0x1bc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 fe3a 	bl	80049e2 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f004 fddd 	bl	8008932 <USB_DevDisconnect>

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d82 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b082      	sub	sp, #8
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d101      	bne.n	8003d98 <HAL_PCD_Start+0x16>
 8003d94:	2302      	movs	r3, #2
 8003d96:	e012      	b.n	8003dbe <HAL_PCD_Start+0x3c>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f004 fdad 	bl	8008904 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f003 fd1a 	bl	80077e8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b082      	sub	sp, #8
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f004 fdc2 	bl	800895c <USB_ReadInterrupts>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003de2:	d102      	bne.n	8003dea <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 fb33 	bl	8004450 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f004 fdb4 	bl	800895c <USB_ReadInterrupts>
 8003df4:	4603      	mov	r3, r0
 8003df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dfe:	d112      	bne.n	8003e26 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e12:	b292      	uxth	r2, r2
 8003e14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f006 fc22 	bl	800a662 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003e1e:	2100      	movs	r1, #0
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f91e 	bl	8004062 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f004 fd96 	bl	800895c <USB_ReadInterrupts>
 8003e30:	4603      	mov	r3, r0
 8003e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e3a:	d10b      	bne.n	8003e54 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e4e:	b292      	uxth	r2, r2
 8003e50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f004 fd7f 	bl	800895c <USB_ReadInterrupts>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e68:	d10b      	bne.n	8003e82 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e7c:	b292      	uxth	r2, r2
 8003e7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f004 fd68 	bl	800895c <USB_ReadInterrupts>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e96:	d133      	bne.n	8003f00 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0204 	bic.w	r2, r2, #4
 8003eaa:	b292      	uxth	r2, r2
 8003eac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0208 	bic.w	r2, r2, #8
 8003ec2:	b292      	uxth	r2, r2
 8003ec4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d107      	bne.n	8003ee2 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003eda:	2100      	movs	r1, #0
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f006 fe6d 	bl	800abbc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f006 fbf6 	bl	800a6d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003efa:	b292      	uxth	r2, r2
 8003efc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f004 fd29 	bl	800895c <USB_ReadInterrupts>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f14:	d126      	bne.n	8003f64 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0208 	orr.w	r2, r2, #8
 8003f28:	b292      	uxth	r2, r2
 8003f2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f40:	b292      	uxth	r2, r2
 8003f42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f042 0204 	orr.w	r2, r2, #4
 8003f58:	b292      	uxth	r2, r2
 8003f5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f006 fb9e 	bl	800a6a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f004 fcf7 	bl	800895c <USB_ReadInterrupts>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f74:	2b80      	cmp	r3, #128	; 0x80
 8003f76:	d13f      	bne.n	8003ff8 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f8a:	b292      	uxth	r2, r2
 8003f8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d12b      	bne.n	8003ff2 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f042 0204 	orr.w	r2, r2, #4
 8003fac:	b292      	uxth	r2, r2
 8003fae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f042 0208 	orr.w	r2, r2, #8
 8003fc4:	b292      	uxth	r2, r2
 8003fc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	089b      	lsrs	r3, r3, #2
 8003fde:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003fe8:	2101      	movs	r1, #1
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f006 fde6 	bl	800abbc <HAL_PCDEx_LPM_Callback>
 8003ff0:	e002      	b.n	8003ff8 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f006 fb54 	bl	800a6a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f004 fcad 	bl	800895c <USB_ReadInterrupts>
 8004002:	4603      	mov	r3, r0
 8004004:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800400c:	d10e      	bne.n	800402c <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004016:	b29a      	uxth	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004020:	b292      	uxth	r2, r2
 8004022:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f006 fb0d 	bl	800a646 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4618      	mov	r0, r3
 8004032:	f004 fc93 	bl	800895c <USB_ReadInterrupts>
 8004036:	4603      	mov	r3, r0
 8004038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004040:	d10b      	bne.n	800405a <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800404a:	b29a      	uxth	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004054:	b292      	uxth	r2, r2
 8004056:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800405a:	bf00      	nop
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b082      	sub	sp, #8
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	460b      	mov	r3, r1
 800406c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_PCD_SetAddress+0x1a>
 8004078:	2302      	movs	r3, #2
 800407a:	e013      	b.n	80040a4 <HAL_PCD_SetAddress+0x42>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	78fa      	ldrb	r2, [r7, #3]
 8004088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	78fa      	ldrb	r2, [r7, #3]
 8004092:	4611      	mov	r1, r2
 8004094:	4618      	mov	r0, r3
 8004096:	f004 fc21 	bl	80088dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	4608      	mov	r0, r1
 80040b6:	4611      	mov	r1, r2
 80040b8:	461a      	mov	r2, r3
 80040ba:	4603      	mov	r3, r0
 80040bc:	70fb      	strb	r3, [r7, #3]
 80040be:	460b      	mov	r3, r1
 80040c0:	803b      	strh	r3, [r7, #0]
 80040c2:	4613      	mov	r3, r2
 80040c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	da0b      	bge.n	80040ea <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040d2:	78fb      	ldrb	r3, [r7, #3]
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	015b      	lsls	r3, r3, #5
 80040da:	3328      	adds	r3, #40	; 0x28
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	4413      	add	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2201      	movs	r2, #1
 80040e6:	705a      	strb	r2, [r3, #1]
 80040e8:	e00b      	b.n	8004102 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040ea:	78fb      	ldrb	r3, [r7, #3]
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	015b      	lsls	r3, r3, #5
 80040f2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	4413      	add	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004102:	78fb      	ldrb	r3, [r7, #3]
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	b2da      	uxtb	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800410e:	883a      	ldrh	r2, [r7, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	78ba      	ldrb	r2, [r7, #2]
 8004118:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	785b      	ldrb	r3, [r3, #1]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d004      	beq.n	800412c <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800412c:	78bb      	ldrb	r3, [r7, #2]
 800412e:	2b02      	cmp	r3, #2
 8004130:	d102      	bne.n	8004138 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800413e:	2b01      	cmp	r3, #1
 8004140:	d101      	bne.n	8004146 <HAL_PCD_EP_Open+0x9a>
 8004142:	2302      	movs	r3, #2
 8004144:	e00e      	b.n	8004164 <HAL_PCD_EP_Open+0xb8>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68f9      	ldr	r1, [r7, #12]
 8004154:	4618      	mov	r0, r3
 8004156:	f003 fbad 	bl	80078b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8004162:	7afb      	ldrb	r3, [r7, #11]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004178:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800417c:	2b00      	cmp	r3, #0
 800417e:	da0b      	bge.n	8004198 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	f003 0307 	and.w	r3, r3, #7
 8004186:	015b      	lsls	r3, r3, #5
 8004188:	3328      	adds	r3, #40	; 0x28
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	4413      	add	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2201      	movs	r2, #1
 8004194:	705a      	strb	r2, [r3, #1]
 8004196:	e00b      	b.n	80041b0 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004198:	78fb      	ldrb	r3, [r7, #3]
 800419a:	f003 0307 	and.w	r3, r3, #7
 800419e:	015b      	lsls	r3, r3, #5
 80041a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	4413      	add	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80041b0:	78fb      	ldrb	r3, [r7, #3]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d101      	bne.n	80041ca <HAL_PCD_EP_Close+0x5e>
 80041c6:	2302      	movs	r3, #2
 80041c8:	e00e      	b.n	80041e8 <HAL_PCD_EP_Close+0x7c>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68f9      	ldr	r1, [r7, #12]
 80041d8:	4618      	mov	r0, r3
 80041da:	f003 fe5b 	bl	8007e94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	607a      	str	r2, [r7, #4]
 80041fa:	603b      	str	r3, [r7, #0]
 80041fc:	460b      	mov	r3, r1
 80041fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004200:	7afb      	ldrb	r3, [r7, #11]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	015b      	lsls	r3, r3, #5
 8004208:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4413      	add	r3, r2
 8004210:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2200      	movs	r2, #0
 8004222:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2200      	movs	r2, #0
 8004228:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800422a:	7afb      	ldrb	r3, [r7, #11]
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	b2da      	uxtb	r2, r3
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004236:	7afb      	ldrb	r3, [r7, #11]
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	2b00      	cmp	r3, #0
 800423e:	d106      	bne.n	800424e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6979      	ldr	r1, [r7, #20]
 8004246:	4618      	mov	r0, r3
 8004248:	f003 ffba 	bl	80081c0 <USB_EPStartXfer>
 800424c:	e005      	b.n	800425a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6979      	ldr	r1, [r7, #20]
 8004254:	4618      	mov	r0, r3
 8004256:	f003 ffb3 	bl	80081c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	460b      	mov	r3, r1
 800426e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004270:	78fb      	ldrb	r3, [r7, #3]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	330a      	adds	r3, #10
 800427a:	015b      	lsls	r3, r3, #5
 800427c:	4413      	add	r3, r2
 800427e:	3304      	adds	r3, #4
 8004280:	681b      	ldr	r3, [r3, #0]
}
 8004282:	4618      	mov	r0, r3
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b086      	sub	sp, #24
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]
 800429a:	460b      	mov	r3, r1
 800429c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800429e:	7afb      	ldrb	r3, [r7, #11]
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	015b      	lsls	r3, r3, #5
 80042a6:	3328      	adds	r3, #40	; 0x28
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4413      	add	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2200      	movs	r2, #0
 80042be:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	2201      	movs	r2, #1
 80042c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042c6:	7afb      	ldrb	r3, [r7, #11]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042d2:	7afb      	ldrb	r3, [r7, #11]
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d106      	bne.n	80042ea <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6979      	ldr	r1, [r7, #20]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f003 ff6c 	bl	80081c0 <USB_EPStartXfer>
 80042e8:	e005      	b.n	80042f6 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6979      	ldr	r1, [r7, #20]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f003 ff65 	bl	80081c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	460b      	mov	r3, r1
 800430a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800430c:	78fb      	ldrb	r3, [r7, #3]
 800430e:	f003 0207 	and.w	r2, r3, #7
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	429a      	cmp	r2, r3
 8004318:	d901      	bls.n	800431e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e046      	b.n	80043ac <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800431e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004322:	2b00      	cmp	r3, #0
 8004324:	da0b      	bge.n	800433e <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004326:	78fb      	ldrb	r3, [r7, #3]
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	015b      	lsls	r3, r3, #5
 800432e:	3328      	adds	r3, #40	; 0x28
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	4413      	add	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2201      	movs	r2, #1
 800433a:	705a      	strb	r2, [r3, #1]
 800433c:	e009      	b.n	8004352 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800433e:	78fb      	ldrb	r3, [r7, #3]
 8004340:	015b      	lsls	r3, r3, #5
 8004342:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	4413      	add	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2201      	movs	r2, #1
 8004356:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	b2da      	uxtb	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800436a:	2b01      	cmp	r3, #1
 800436c:	d101      	bne.n	8004372 <HAL_PCD_EP_SetStall+0x72>
 800436e:	2302      	movs	r3, #2
 8004370:	e01c      	b.n	80043ac <HAL_PCD_EP_SetStall+0xac>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68f9      	ldr	r1, [r7, #12]
 8004380:	4618      	mov	r0, r3
 8004382:	f004 f9d5 	bl	8008730 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004386:	78fb      	ldrb	r3, [r7, #3]
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	2b00      	cmp	r3, #0
 800438e:	d108      	bne.n	80043a2 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800439a:	4619      	mov	r1, r3
 800439c:	4610      	mov	r0, r2
 800439e:	f004 faed 	bl	800897c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80043c0:	78fb      	ldrb	r3, [r7, #3]
 80043c2:	f003 020f 	and.w	r2, r3, #15
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d901      	bls.n	80043d2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e03a      	b.n	8004448 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	da0b      	bge.n	80043f2 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043da:	78fb      	ldrb	r3, [r7, #3]
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	015b      	lsls	r3, r3, #5
 80043e2:	3328      	adds	r3, #40	; 0x28
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	4413      	add	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2201      	movs	r2, #1
 80043ee:	705a      	strb	r2, [r3, #1]
 80043f0:	e00b      	b.n	800440a <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043f2:	78fb      	ldrb	r3, [r7, #3]
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	015b      	lsls	r3, r3, #5
 80043fa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	4413      	add	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004410:	78fb      	ldrb	r3, [r7, #3]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	b2da      	uxtb	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004422:	2b01      	cmp	r3, #1
 8004424:	d101      	bne.n	800442a <HAL_PCD_EP_ClrStall+0x76>
 8004426:	2302      	movs	r3, #2
 8004428:	e00e      	b.n	8004448 <HAL_PCD_EP_ClrStall+0x94>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68f9      	ldr	r1, [r7, #12]
 8004438:	4618      	mov	r0, r3
 800443a:	f004 f9bb 	bl	80087b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004450:	b590      	push	{r4, r7, lr}
 8004452:	b089      	sub	sp, #36	; 0x24
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004458:	e274      	b.n	8004944 <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004462:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004464:	8afb      	ldrh	r3, [r7, #22]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	f003 030f 	and.w	r3, r3, #15
 800446c:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800446e:	7d7b      	ldrb	r3, [r7, #21]
 8004470:	2b00      	cmp	r3, #0
 8004472:	f040 813c 	bne.w	80046ee <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004476:	8afb      	ldrh	r3, [r7, #22]
 8004478:	f003 0310 	and.w	r3, r3, #16
 800447c:	2b00      	cmp	r3, #0
 800447e:	d14f      	bne.n	8004520 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	b29b      	uxth	r3, r3
 8004488:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800448c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004490:	b29c      	uxth	r4, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800449a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800449e:	b29b      	uxth	r3, r3
 80044a0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3328      	adds	r3, #40	; 0x28
 80044a6:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	461a      	mov	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	4413      	add	r3, r2
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	4413      	add	r3, r2
 80044c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80044c6:	881b      	ldrh	r3, [r3, #0]
 80044c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	695a      	ldr	r2, [r3, #20]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	441a      	add	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80044de:	2100      	movs	r1, #0
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f006 f899 	bl	800a618 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 8228 	beq.w	8004944 <PCD_EP_ISR_Handler+0x4f4>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f040 8223 	bne.w	8004944 <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004504:	b2db      	uxtb	r3, r3
 8004506:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800450a:	b2da      	uxtb	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	b292      	uxth	r2, r2
 8004512:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800451e:	e211      	b.n	8004944 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004526:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004530:	8a7b      	ldrh	r3, [r7, #18]
 8004532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004536:	2b00      	cmp	r3, #0
 8004538:	d031      	beq.n	800459e <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004542:	b29b      	uxth	r3, r3
 8004544:	461a      	mov	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	4413      	add	r3, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6812      	ldr	r2, [r2, #0]
 8004552:	4413      	add	r3, r2
 8004554:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004574:	b29b      	uxth	r3, r3
 8004576:	f004 fa4e 	bl	8008a16 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	b29a      	uxth	r2, r3
 8004582:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004586:	4013      	ands	r3, r2
 8004588:	b29c      	uxth	r4, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004592:	b292      	uxth	r2, r2
 8004594:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f006 f814 	bl	800a5c4 <HAL_PCD_SetupStageCallback>
 800459c:	e1d2      	b.n	8004944 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800459e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f280 81ce 	bge.w	8004944 <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80045b4:	4013      	ands	r3, r2
 80045b6:	b29c      	uxth	r4, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80045c0:	b292      	uxth	r2, r2
 80045c2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	461a      	mov	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4413      	add	r3, r2
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	6812      	ldr	r2, [r2, #0]
 80045dc:	4413      	add	r3, r2
 80045de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d019      	beq.n	8004628 <PCD_EP_ISR_Handler+0x1d8>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d015      	beq.n	8004628 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6818      	ldr	r0, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6959      	ldr	r1, [r3, #20]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800460c:	b29b      	uxth	r3, r3
 800460e:	f004 fa02 	bl	8008a16 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	695a      	ldr	r2, [r3, #20]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	441a      	add	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004620:	2100      	movs	r1, #0
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f005 ffe0 	bl	800a5e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	461c      	mov	r4, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004636:	b29b      	uxth	r3, r3
 8004638:	441c      	add	r4, r3
 800463a:	f204 4306 	addw	r3, r4, #1030	; 0x406
 800463e:	461c      	mov	r4, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10e      	bne.n	8004666 <PCD_EP_ISR_Handler+0x216>
 8004648:	8823      	ldrh	r3, [r4, #0]
 800464a:	b29b      	uxth	r3, r3
 800464c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004650:	b29b      	uxth	r3, r3
 8004652:	8023      	strh	r3, [r4, #0]
 8004654:	8823      	ldrh	r3, [r4, #0]
 8004656:	b29b      	uxth	r3, r3
 8004658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800465c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004660:	b29b      	uxth	r3, r3
 8004662:	8023      	strh	r3, [r4, #0]
 8004664:	e02d      	b.n	80046c2 <PCD_EP_ISR_Handler+0x272>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	2b3e      	cmp	r3, #62	; 0x3e
 800466c:	d812      	bhi.n	8004694 <PCD_EP_ISR_Handler+0x244>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	085b      	lsrs	r3, r3, #1
 8004674:	61bb      	str	r3, [r7, #24]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d002      	beq.n	8004688 <PCD_EP_ISR_Handler+0x238>
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	3301      	adds	r3, #1
 8004686:	61bb      	str	r3, [r7, #24]
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	b29b      	uxth	r3, r3
 800468c:	029b      	lsls	r3, r3, #10
 800468e:	b29b      	uxth	r3, r3
 8004690:	8023      	strh	r3, [r4, #0]
 8004692:	e016      	b.n	80046c2 <PCD_EP_ISR_Handler+0x272>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	095b      	lsrs	r3, r3, #5
 800469a:	61bb      	str	r3, [r7, #24]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	f003 031f 	and.w	r3, r3, #31
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d102      	bne.n	80046ae <PCD_EP_ISR_Handler+0x25e>
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	61bb      	str	r3, [r7, #24]
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	029b      	lsls	r3, r3, #10
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046be:	b29b      	uxth	r3, r3
 80046c0:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d2:	b29c      	uxth	r4, r3
 80046d4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80046d8:	b29c      	uxth	r4, r3
 80046da:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80046de:	b29c      	uxth	r4, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	4b9e      	ldr	r3, [pc, #632]	; (8004960 <PCD_EP_ISR_Handler+0x510>)
 80046e6:	4323      	orrs	r3, r4
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	8013      	strh	r3, [r2, #0]
 80046ec:	e12a      	b.n	8004944 <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	7d7b      	ldrb	r3, [r7, #21]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80046fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004702:	2b00      	cmp	r3, #0
 8004704:	f280 80cb 	bge.w	800489e <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	461a      	mov	r2, r3
 800470e:	7d7b      	ldrb	r3, [r7, #21]
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	b29a      	uxth	r2, r3
 8004718:	f640 738f 	movw	r3, #3983	; 0xf8f
 800471c:	4013      	ands	r3, r2
 800471e:	b29c      	uxth	r4, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	461a      	mov	r2, r3
 8004726:	7d7b      	ldrb	r3, [r7, #21]
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004730:	b292      	uxth	r2, r2
 8004732:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004734:	7d7b      	ldrb	r3, [r7, #21]
 8004736:	015b      	lsls	r3, r3, #5
 8004738:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	4413      	add	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	7b1b      	ldrb	r3, [r3, #12]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d11f      	bne.n	800478a <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004752:	b29b      	uxth	r3, r3
 8004754:	461a      	mov	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	4413      	add	r3, r2
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6812      	ldr	r2, [r2, #0]
 8004762:	4413      	add	r3, r2
 8004764:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800476e:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8004770:	8bfb      	ldrh	r3, [r7, #30]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d06e      	beq.n	8004854 <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6818      	ldr	r0, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6959      	ldr	r1, [r3, #20]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	88da      	ldrh	r2, [r3, #6]
 8004782:	8bfb      	ldrh	r3, [r7, #30]
 8004784:	f004 f947 	bl	8008a16 <USB_ReadPMA>
 8004788:	e064      	b.n	8004854 <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	b29b      	uxth	r3, r3
 800479c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a4:	b29c      	uxth	r4, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	461a      	mov	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	441a      	add	r2, r3
 80047b4:	4b6b      	ldr	r3, [pc, #428]	; (8004964 <PCD_EP_ISR_Handler+0x514>)
 80047b6:	4323      	orrs	r3, r4
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d01f      	beq.n	8004816 <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047de:	b29b      	uxth	r3, r3
 80047e0:	461a      	mov	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	4413      	add	r3, r2
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6812      	ldr	r2, [r2, #0]
 80047ee:	4413      	add	r3, r2
 80047f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047fa:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80047fc:	8bfb      	ldrh	r3, [r7, #30]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d028      	beq.n	8004854 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6818      	ldr	r0, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6959      	ldr	r1, [r3, #20]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	891a      	ldrh	r2, [r3, #8]
 800480e:	8bfb      	ldrh	r3, [r7, #30]
 8004810:	f004 f901 	bl	8008a16 <USB_ReadPMA>
 8004814:	e01e      	b.n	8004854 <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800481e:	b29b      	uxth	r3, r3
 8004820:	461a      	mov	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	4413      	add	r3, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6812      	ldr	r2, [r2, #0]
 800482e:	4413      	add	r3, r2
 8004830:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800483a:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800483c:	8bfb      	ldrh	r3, [r7, #30]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d008      	beq.n	8004854 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6818      	ldr	r0, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6959      	ldr	r1, [r3, #20]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	895a      	ldrh	r2, [r3, #10]
 800484e:	8bfb      	ldrh	r3, [r7, #30]
 8004850:	f004 f8e1 	bl	8008a16 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	69da      	ldr	r2, [r3, #28]
 8004858:	8bfb      	ldrh	r3, [r7, #30]
 800485a:	441a      	add	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	695a      	ldr	r2, [r3, #20]
 8004864:	8bfb      	ldrh	r3, [r7, #30]
 8004866:	441a      	add	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d004      	beq.n	800487e <PCD_EP_ISR_Handler+0x42e>
 8004874:	8bfa      	ldrh	r2, [r7, #30]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	429a      	cmp	r2, r3
 800487c:	d206      	bcs.n	800488c <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	4619      	mov	r1, r3
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f005 feaf 	bl	800a5e8 <HAL_PCD_DataOutStageCallback>
 800488a:	e008      	b.n	800489e <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	7819      	ldrb	r1, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	695a      	ldr	r2, [r3, #20]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7ff fca9 	bl	80041f0 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800489e:	8a7b      	ldrh	r3, [r7, #18]
 80048a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d04d      	beq.n	8004944 <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 80048a8:	7d7b      	ldrb	r3, [r7, #21]
 80048aa:	015b      	lsls	r3, r3, #5
 80048ac:	3328      	adds	r3, #40	; 0x28
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	4413      	add	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	461a      	mov	r2, r3
 80048ba:	7d7b      	ldrb	r3, [r7, #21]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80048c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048cc:	b29c      	uxth	r4, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	461a      	mov	r2, r3
 80048d4:	7d7b      	ldrb	r3, [r7, #21]
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	441a      	add	r2, r3
 80048da:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80048de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	461a      	mov	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	4413      	add	r3, r2
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6812      	ldr	r2, [r2, #0]
 80048fe:	4413      	add	r3, r2
 8004900:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	695a      	ldr	r2, [r3, #20]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	441a      	add	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d106      	bne.n	8004932 <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	4619      	mov	r1, r3
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f005 fe74 	bl	800a618 <HAL_PCD_DataInStageCallback>
 8004930:	e008      	b.n	8004944 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	7819      	ldrb	r1, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	695a      	ldr	r2, [r3, #20]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7ff fca5 	bl	800428e <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800494c:	b29b      	uxth	r3, r3
 800494e:	b21b      	sxth	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	f6ff ad82 	blt.w	800445a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3724      	adds	r7, #36	; 0x24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd90      	pop	{r4, r7, pc}
 8004960:	ffff8080 	.word	0xffff8080
 8004964:	ffff80c0 	.word	0xffff80c0

08004968 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8004968:	b480      	push	{r7}
 800496a:	b087      	sub	sp, #28
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	607b      	str	r3, [r7, #4]
 8004972:	460b      	mov	r3, r1
 8004974:	817b      	strh	r3, [r7, #10]
 8004976:	4613      	mov	r3, r2
 8004978:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800497a:	897b      	ldrh	r3, [r7, #10]
 800497c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004980:	b29b      	uxth	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d008      	beq.n	8004998 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004986:	897b      	ldrh	r3, [r7, #10]
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	015b      	lsls	r3, r3, #5
 800498e:	3328      	adds	r3, #40	; 0x28
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	4413      	add	r3, r2
 8004994:	617b      	str	r3, [r7, #20]
 8004996:	e006      	b.n	80049a6 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004998:	897b      	ldrh	r3, [r7, #10]
 800499a:	015b      	lsls	r3, r3, #5
 800499c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4413      	add	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80049a6:	893b      	ldrh	r3, [r7, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d107      	bne.n	80049bc <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2200      	movs	r2, #0
 80049b0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	80da      	strh	r2, [r3, #6]
 80049ba:	e00b      	b.n	80049d4 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2201      	movs	r2, #1
 80049c0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	0c1b      	lsrs	r3, r3, #16
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	371c      	adds	r7, #28
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b085      	sub	sp, #20
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	f043 0301 	orr.w	r3, r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	f043 0302 	orr.w	r3, r3, #2
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
	...

08004a38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a3c:	4b04      	ldr	r3, [pc, #16]	; (8004a50 <HAL_PWREx_GetVoltageRange+0x18>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	40007000 	.word	0x40007000

08004a54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a62:	d130      	bne.n	8004ac6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a64:	4b23      	ldr	r3, [pc, #140]	; (8004af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a70:	d038      	beq.n	8004ae4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a72:	4b20      	ldr	r3, [pc, #128]	; (8004af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a7a:	4a1e      	ldr	r2, [pc, #120]	; (8004af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a82:	4b1d      	ldr	r3, [pc, #116]	; (8004af8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2232      	movs	r2, #50	; 0x32
 8004a88:	fb02 f303 	mul.w	r3, r2, r3
 8004a8c:	4a1b      	ldr	r2, [pc, #108]	; (8004afc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a92:	0c9b      	lsrs	r3, r3, #18
 8004a94:	3301      	adds	r3, #1
 8004a96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a98:	e002      	b.n	8004aa0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004aa0:	4b14      	ldr	r3, [pc, #80]	; (8004af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aac:	d102      	bne.n	8004ab4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f2      	bne.n	8004a9a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ab4:	4b0f      	ldr	r3, [pc, #60]	; (8004af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ac0:	d110      	bne.n	8004ae4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e00f      	b.n	8004ae6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ac6:	4b0b      	ldr	r3, [pc, #44]	; (8004af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ad2:	d007      	beq.n	8004ae4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ad4:	4b07      	ldr	r3, [pc, #28]	; (8004af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004adc:	4a05      	ldr	r2, [pc, #20]	; (8004af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ae2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	40007000 	.word	0x40007000
 8004af8:	20000000 	.word	0x20000000
 8004afc:	431bde83 	.word	0x431bde83

08004b00 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004b04:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	4a04      	ldr	r2, [pc, #16]	; (8004b1c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004b0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b0e:	6053      	str	r3, [r2, #4]
}
 8004b10:	bf00      	nop
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	40007000 	.word	0x40007000

08004b20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b08a      	sub	sp, #40	; 0x28
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d102      	bne.n	8004b34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	f000 bc56 	b.w	80053e0 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b34:	4ba1      	ldr	r3, [pc, #644]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 030c 	and.w	r3, r3, #12
 8004b3c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b3e:	4b9f      	ldr	r3, [pc, #636]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0310 	and.w	r3, r3, #16
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 80e6 	beq.w	8004d22 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d007      	beq.n	8004b6c <HAL_RCC_OscConfig+0x4c>
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	2b0c      	cmp	r3, #12
 8004b60:	f040 808d 	bne.w	8004c7e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	f040 8089 	bne.w	8004c7e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b6c:	4b93      	ldr	r3, [pc, #588]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d006      	beq.n	8004b86 <HAL_RCC_OscConfig+0x66>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	69db      	ldr	r3, [r3, #28]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d102      	bne.n	8004b86 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	f000 bc2d 	b.w	80053e0 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b8a:	4b8c      	ldr	r3, [pc, #560]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d004      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x80>
 8004b96:	4b89      	ldr	r3, [pc, #548]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b9e:	e005      	b.n	8004bac <HAL_RCC_OscConfig+0x8c>
 8004ba0:	4b86      	ldr	r3, [pc, #536]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ba6:	091b      	lsrs	r3, r3, #4
 8004ba8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d224      	bcs.n	8004bfa <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f000 fdbd 	bl	8005734 <RCC_SetFlashLatencyFromMSIRange>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	f000 bc0d 	b.w	80053e0 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bc6:	4b7d      	ldr	r3, [pc, #500]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a7c      	ldr	r2, [pc, #496]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004bcc:	f043 0308 	orr.w	r3, r3, #8
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	4b7a      	ldr	r3, [pc, #488]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	4977      	ldr	r1, [pc, #476]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004be4:	4b75      	ldr	r3, [pc, #468]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	021b      	lsls	r3, r3, #8
 8004bf2:	4972      	ldr	r1, [pc, #456]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	604b      	str	r3, [r1, #4]
 8004bf8:	e025      	b.n	8004c46 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bfa:	4b70      	ldr	r3, [pc, #448]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a6f      	ldr	r2, [pc, #444]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004c00:	f043 0308 	orr.w	r3, r3, #8
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	4b6d      	ldr	r3, [pc, #436]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	496a      	ldr	r1, [pc, #424]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c18:	4b68      	ldr	r3, [pc, #416]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	021b      	lsls	r3, r3, #8
 8004c26:	4965      	ldr	r1, [pc, #404]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d109      	bne.n	8004c46 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 fd7c 	bl	8005734 <RCC_SetFlashLatencyFromMSIRange>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e3cc      	b.n	80053e0 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c46:	f000 fcb3 	bl	80055b0 <HAL_RCC_GetSysClockFreq>
 8004c4a:	4601      	mov	r1, r0
 8004c4c:	4b5b      	ldr	r3, [pc, #364]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	091b      	lsrs	r3, r3, #4
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	4a5a      	ldr	r2, [pc, #360]	; (8004dc0 <HAL_RCC_OscConfig+0x2a0>)
 8004c58:	5cd3      	ldrb	r3, [r2, r3]
 8004c5a:	f003 031f 	and.w	r3, r3, #31
 8004c5e:	fa21 f303 	lsr.w	r3, r1, r3
 8004c62:	4a58      	ldr	r2, [pc, #352]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004c64:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c66:	4b58      	ldr	r3, [pc, #352]	; (8004dc8 <HAL_RCC_OscConfig+0x2a8>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7fd fdd4 	bl	8002818 <HAL_InitTick>
 8004c70:	4603      	mov	r3, r0
 8004c72:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8004c74:	7dfb      	ldrb	r3, [r7, #23]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d052      	beq.n	8004d20 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8004c7a:	7dfb      	ldrb	r3, [r7, #23]
 8004c7c:	e3b0      	b.n	80053e0 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d032      	beq.n	8004cec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c86:	4b4d      	ldr	r3, [pc, #308]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a4c      	ldr	r2, [pc, #304]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004c8c:	f043 0301 	orr.w	r3, r3, #1
 8004c90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c92:	f7fd fe0d 	bl	80028b0 <HAL_GetTick>
 8004c96:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c98:	e008      	b.n	8004cac <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c9a:	f7fd fe09 	bl	80028b0 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e399      	b.n	80053e0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cac:	4b43      	ldr	r3, [pc, #268]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0f0      	beq.n	8004c9a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cb8:	4b40      	ldr	r3, [pc, #256]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a3f      	ldr	r2, [pc, #252]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004cbe:	f043 0308 	orr.w	r3, r3, #8
 8004cc2:	6013      	str	r3, [r2, #0]
 8004cc4:	4b3d      	ldr	r3, [pc, #244]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	493a      	ldr	r1, [pc, #232]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cd6:	4b39      	ldr	r3, [pc, #228]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	021b      	lsls	r3, r3, #8
 8004ce4:	4935      	ldr	r1, [pc, #212]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	604b      	str	r3, [r1, #4]
 8004cea:	e01a      	b.n	8004d22 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004cec:	4b33      	ldr	r3, [pc, #204]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a32      	ldr	r2, [pc, #200]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004cf2:	f023 0301 	bic.w	r3, r3, #1
 8004cf6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cf8:	f7fd fdda 	bl	80028b0 <HAL_GetTick>
 8004cfc:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d00:	f7fd fdd6 	bl	80028b0 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e366      	b.n	80053e0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d12:	4b2a      	ldr	r3, [pc, #168]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1f0      	bne.n	8004d00 <HAL_RCC_OscConfig+0x1e0>
 8004d1e:	e000      	b.n	8004d22 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d073      	beq.n	8004e16 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d005      	beq.n	8004d40 <HAL_RCC_OscConfig+0x220>
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	2b0c      	cmp	r3, #12
 8004d38:	d10e      	bne.n	8004d58 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	d10b      	bne.n	8004d58 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d40:	4b1e      	ldr	r3, [pc, #120]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d063      	beq.n	8004e14 <HAL_RCC_OscConfig+0x2f4>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d15f      	bne.n	8004e14 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e343      	b.n	80053e0 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d60:	d106      	bne.n	8004d70 <HAL_RCC_OscConfig+0x250>
 8004d62:	4b16      	ldr	r3, [pc, #88]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a15      	ldr	r2, [pc, #84]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d6c:	6013      	str	r3, [r2, #0]
 8004d6e:	e01d      	b.n	8004dac <HAL_RCC_OscConfig+0x28c>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d78:	d10c      	bne.n	8004d94 <HAL_RCC_OscConfig+0x274>
 8004d7a:	4b10      	ldr	r3, [pc, #64]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a0f      	ldr	r2, [pc, #60]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d84:	6013      	str	r3, [r2, #0]
 8004d86:	4b0d      	ldr	r3, [pc, #52]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a0c      	ldr	r2, [pc, #48]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d90:	6013      	str	r3, [r2, #0]
 8004d92:	e00b      	b.n	8004dac <HAL_RCC_OscConfig+0x28c>
 8004d94:	4b09      	ldr	r3, [pc, #36]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a08      	ldr	r2, [pc, #32]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d9e:	6013      	str	r3, [r2, #0]
 8004da0:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a05      	ldr	r2, [pc, #20]	; (8004dbc <HAL_RCC_OscConfig+0x29c>)
 8004da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01b      	beq.n	8004dec <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db4:	f7fd fd7c 	bl	80028b0 <HAL_GetTick>
 8004db8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dba:	e010      	b.n	8004dde <HAL_RCC_OscConfig+0x2be>
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	0800ad68 	.word	0x0800ad68
 8004dc4:	20000000 	.word	0x20000000
 8004dc8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dcc:	f7fd fd70 	bl	80028b0 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b64      	cmp	r3, #100	; 0x64
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e300      	b.n	80053e0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dde:	4ba0      	ldr	r3, [pc, #640]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0f0      	beq.n	8004dcc <HAL_RCC_OscConfig+0x2ac>
 8004dea:	e014      	b.n	8004e16 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dec:	f7fd fd60 	bl	80028b0 <HAL_GetTick>
 8004df0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004df4:	f7fd fd5c 	bl	80028b0 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b64      	cmp	r3, #100	; 0x64
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e2ec      	b.n	80053e0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e06:	4b96      	ldr	r3, [pc, #600]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1f0      	bne.n	8004df4 <HAL_RCC_OscConfig+0x2d4>
 8004e12:	e000      	b.n	8004e16 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d060      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d005      	beq.n	8004e34 <HAL_RCC_OscConfig+0x314>
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	2b0c      	cmp	r3, #12
 8004e2c:	d119      	bne.n	8004e62 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d116      	bne.n	8004e62 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e34:	4b8a      	ldr	r3, [pc, #552]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d005      	beq.n	8004e4c <HAL_RCC_OscConfig+0x32c>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e2c9      	b.n	80053e0 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e4c:	4b84      	ldr	r3, [pc, #528]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	061b      	lsls	r3, r3, #24
 8004e5a:	4981      	ldr	r1, [pc, #516]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e60:	e040      	b.n	8004ee4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d023      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e6a:	4b7d      	ldr	r3, [pc, #500]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a7c      	ldr	r2, [pc, #496]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 8004e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e76:	f7fd fd1b 	bl	80028b0 <HAL_GetTick>
 8004e7a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e7e:	f7fd fd17 	bl	80028b0 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e2a7      	b.n	80053e0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e90:	4b73      	ldr	r3, [pc, #460]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0f0      	beq.n	8004e7e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e9c:	4b70      	ldr	r3, [pc, #448]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	061b      	lsls	r3, r3, #24
 8004eaa:	496d      	ldr	r1, [pc, #436]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	604b      	str	r3, [r1, #4]
 8004eb0:	e018      	b.n	8004ee4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eb2:	4b6b      	ldr	r3, [pc, #428]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a6a      	ldr	r2, [pc, #424]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 8004eb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ebe:	f7fd fcf7 	bl	80028b0 <HAL_GetTick>
 8004ec2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ec4:	e008      	b.n	8004ed8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ec6:	f7fd fcf3 	bl	80028b0 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e283      	b.n	80053e0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ed8:	4b61      	ldr	r3, [pc, #388]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1f0      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0308 	and.w	r3, r3, #8
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d07f      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d05f      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8004ef8:	4b59      	ldr	r3, [pc, #356]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 8004efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004efe:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	699a      	ldr	r2, [r3, #24]
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f003 0310 	and.w	r3, r3, #16
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d037      	beq.n	8004f7e <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d006      	beq.n	8004f26 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e25c      	b.n	80053e0 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d01b      	beq.n	8004f68 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8004f30:	4b4b      	ldr	r3, [pc, #300]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 8004f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f36:	4a4a      	ldr	r2, [pc, #296]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 8004f38:	f023 0301 	bic.w	r3, r3, #1
 8004f3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f40:	f7fd fcb6 	bl	80028b0 <HAL_GetTick>
 8004f44:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f48:	f7fd fcb2 	bl	80028b0 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b11      	cmp	r3, #17
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e242      	b.n	80053e0 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f5a:	4b41      	ldr	r3, [pc, #260]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 8004f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1ef      	bne.n	8004f48 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8004f68:	4b3d      	ldr	r3, [pc, #244]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 8004f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f6e:	f023 0210 	bic.w	r2, r3, #16
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	493a      	ldr	r1, [pc, #232]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f7e:	4b38      	ldr	r3, [pc, #224]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 8004f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f84:	4a36      	ldr	r2, [pc, #216]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 8004f86:	f043 0301 	orr.w	r3, r3, #1
 8004f8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f8e:	f7fd fc8f 	bl	80028b0 <HAL_GetTick>
 8004f92:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f94:	e008      	b.n	8004fa8 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f96:	f7fd fc8b 	bl	80028b0 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b11      	cmp	r3, #17
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e21b      	b.n	80053e0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fa8:	4b2d      	ldr	r3, [pc, #180]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 8004faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0ef      	beq.n	8004f96 <HAL_RCC_OscConfig+0x476>
 8004fb6:	e01b      	b.n	8004ff0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fb8:	4b29      	ldr	r3, [pc, #164]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 8004fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fbe:	4a28      	ldr	r2, [pc, #160]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 8004fc0:	f023 0301 	bic.w	r3, r3, #1
 8004fc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc8:	f7fd fc72 	bl	80028b0 <HAL_GetTick>
 8004fcc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fd0:	f7fd fc6e 	bl	80028b0 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b11      	cmp	r3, #17
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e1fe      	b.n	80053e0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fe2:	4b1f      	ldr	r3, [pc, #124]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 8004fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1ef      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 80c1 	beq.w	8005180 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ffe:	2300      	movs	r3, #0
 8005000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005004:	4b16      	ldr	r3, [pc, #88]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 8005006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10e      	bne.n	800502e <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005010:	4b13      	ldr	r3, [pc, #76]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 8005012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005014:	4a12      	ldr	r2, [pc, #72]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 8005016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800501a:	6593      	str	r3, [r2, #88]	; 0x58
 800501c:	4b10      	ldr	r3, [pc, #64]	; (8005060 <HAL_RCC_OscConfig+0x540>)
 800501e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005028:	2301      	movs	r3, #1
 800502a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800502e:	4b0d      	ldr	r3, [pc, #52]	; (8005064 <HAL_RCC_OscConfig+0x544>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005036:	2b00      	cmp	r3, #0
 8005038:	d11c      	bne.n	8005074 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800503a:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <HAL_RCC_OscConfig+0x544>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a09      	ldr	r2, [pc, #36]	; (8005064 <HAL_RCC_OscConfig+0x544>)
 8005040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005046:	f7fd fc33 	bl	80028b0 <HAL_GetTick>
 800504a:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800504c:	e00c      	b.n	8005068 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800504e:	f7fd fc2f 	bl	80028b0 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d905      	bls.n	8005068 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e1bf      	b.n	80053e0 <HAL_RCC_OscConfig+0x8c0>
 8005060:	40021000 	.word	0x40021000
 8005064:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005068:	4bb1      	ldr	r3, [pc, #708]	; (8005330 <HAL_RCC_OscConfig+0x810>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0ec      	beq.n	800504e <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	d02c      	beq.n	80050da <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8005080:	4bac      	ldr	r3, [pc, #688]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 8005082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005086:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005092:	49a8      	ldr	r1, [pc, #672]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 8005094:	4313      	orrs	r3, r2
 8005096:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 0304 	and.w	r3, r3, #4
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d010      	beq.n	80050c8 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80050a6:	4ba3      	ldr	r3, [pc, #652]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 80050a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ac:	4aa1      	ldr	r2, [pc, #644]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 80050ae:	f043 0304 	orr.w	r3, r3, #4
 80050b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80050b6:	4b9f      	ldr	r3, [pc, #636]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 80050b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050bc:	4a9d      	ldr	r2, [pc, #628]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 80050be:	f043 0301 	orr.w	r3, r3, #1
 80050c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050c6:	e018      	b.n	80050fa <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80050c8:	4b9a      	ldr	r3, [pc, #616]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 80050ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ce:	4a99      	ldr	r2, [pc, #612]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 80050d0:	f043 0301 	orr.w	r3, r3, #1
 80050d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050d8:	e00f      	b.n	80050fa <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80050da:	4b96      	ldr	r3, [pc, #600]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 80050dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e0:	4a94      	ldr	r2, [pc, #592]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 80050e2:	f023 0301 	bic.w	r3, r3, #1
 80050e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80050ea:	4b92      	ldr	r3, [pc, #584]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 80050ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f0:	4a90      	ldr	r2, [pc, #576]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 80050f2:	f023 0304 	bic.w	r3, r3, #4
 80050f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d016      	beq.n	8005130 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005102:	f7fd fbd5 	bl	80028b0 <HAL_GetTick>
 8005106:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005108:	e00a      	b.n	8005120 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800510a:	f7fd fbd1 	bl	80028b0 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	f241 3288 	movw	r2, #5000	; 0x1388
 8005118:	4293      	cmp	r3, r2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e15f      	b.n	80053e0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005120:	4b84      	ldr	r3, [pc, #528]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 8005122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0ed      	beq.n	800510a <HAL_RCC_OscConfig+0x5ea>
 800512e:	e01d      	b.n	800516c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005130:	f7fd fbbe 	bl	80028b0 <HAL_GetTick>
 8005134:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005136:	e00a      	b.n	800514e <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005138:	f7fd fbba 	bl	80028b0 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	f241 3288 	movw	r2, #5000	; 0x1388
 8005146:	4293      	cmp	r3, r2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e148      	b.n	80053e0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800514e:	4b79      	ldr	r3, [pc, #484]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 8005150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1ed      	bne.n	8005138 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800515c:	4b75      	ldr	r3, [pc, #468]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 800515e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005162:	4a74      	ldr	r2, [pc, #464]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 8005164:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800516c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005170:	2b01      	cmp	r3, #1
 8005172:	d105      	bne.n	8005180 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005174:	4b6f      	ldr	r3, [pc, #444]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 8005176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005178:	4a6e      	ldr	r2, [pc, #440]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 800517a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800517e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0320 	and.w	r3, r3, #32
 8005188:	2b00      	cmp	r3, #0
 800518a:	d03c      	beq.n	8005206 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01c      	beq.n	80051ce <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005194:	4b67      	ldr	r3, [pc, #412]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 8005196:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800519a:	4a66      	ldr	r2, [pc, #408]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 800519c:	f043 0301 	orr.w	r3, r3, #1
 80051a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a4:	f7fd fb84 	bl	80028b0 <HAL_GetTick>
 80051a8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051ac:	f7fd fb80 	bl	80028b0 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e110      	b.n	80053e0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051be:	4b5d      	ldr	r3, [pc, #372]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 80051c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d0ef      	beq.n	80051ac <HAL_RCC_OscConfig+0x68c>
 80051cc:	e01b      	b.n	8005206 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051ce:	4b59      	ldr	r3, [pc, #356]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 80051d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051d4:	4a57      	ldr	r2, [pc, #348]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 80051d6:	f023 0301 	bic.w	r3, r3, #1
 80051da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051de:	f7fd fb67 	bl	80028b0 <HAL_GetTick>
 80051e2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051e4:	e008      	b.n	80051f8 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051e6:	f7fd fb63 	bl	80028b0 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e0f3      	b.n	80053e0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051f8:	4b4e      	ldr	r3, [pc, #312]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 80051fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1ef      	bne.n	80051e6 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 80e7 	beq.w	80053de <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	2b02      	cmp	r3, #2
 8005216:	f040 80b7 	bne.w	8005388 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800521a:	4b46      	ldr	r3, [pc, #280]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	f003 0203 	and.w	r2, r3, #3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522a:	429a      	cmp	r2, r3
 800522c:	d124      	bne.n	8005278 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005238:	3b01      	subs	r3, #1
 800523a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800523c:	429a      	cmp	r2, r3
 800523e:	d11b      	bne.n	8005278 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800524c:	429a      	cmp	r2, r3
 800524e:	d113      	bne.n	8005278 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525a:	085b      	lsrs	r3, r3, #1
 800525c:	3b01      	subs	r3, #1
 800525e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005260:	429a      	cmp	r2, r3
 8005262:	d109      	bne.n	8005278 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	085b      	lsrs	r3, r3, #1
 8005270:	3b01      	subs	r3, #1
 8005272:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005274:	429a      	cmp	r2, r3
 8005276:	d061      	beq.n	800533c <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005278:	6a3b      	ldr	r3, [r7, #32]
 800527a:	2b0c      	cmp	r3, #12
 800527c:	d056      	beq.n	800532c <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800527e:	4b2d      	ldr	r3, [pc, #180]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a2c      	ldr	r2, [pc, #176]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 8005284:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005288:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800528a:	f7fd fb11 	bl	80028b0 <HAL_GetTick>
 800528e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005290:	e008      	b.n	80052a4 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005292:	f7fd fb0d 	bl	80028b0 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e09d      	b.n	80053e0 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052a4:	4b23      	ldr	r3, [pc, #140]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1f0      	bne.n	8005292 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052b0:	4b20      	ldr	r3, [pc, #128]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 80052b2:	68da      	ldr	r2, [r3, #12]
 80052b4:	4b20      	ldr	r3, [pc, #128]	; (8005338 <HAL_RCC_OscConfig+0x818>)
 80052b6:	4013      	ands	r3, r2
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052c0:	3a01      	subs	r2, #1
 80052c2:	0112      	lsls	r2, r2, #4
 80052c4:	4311      	orrs	r1, r2
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052ca:	0212      	lsls	r2, r2, #8
 80052cc:	4311      	orrs	r1, r2
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80052d2:	0852      	lsrs	r2, r2, #1
 80052d4:	3a01      	subs	r2, #1
 80052d6:	0552      	lsls	r2, r2, #21
 80052d8:	4311      	orrs	r1, r2
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80052de:	0852      	lsrs	r2, r2, #1
 80052e0:	3a01      	subs	r2, #1
 80052e2:	0652      	lsls	r2, r2, #25
 80052e4:	430a      	orrs	r2, r1
 80052e6:	4913      	ldr	r1, [pc, #76]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80052ec:	4b11      	ldr	r3, [pc, #68]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a10      	ldr	r2, [pc, #64]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 80052f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052f8:	4b0e      	ldr	r3, [pc, #56]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	4a0d      	ldr	r2, [pc, #52]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 80052fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005302:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005304:	f7fd fad4 	bl	80028b0 <HAL_GetTick>
 8005308:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800530a:	e008      	b.n	800531e <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800530c:	f7fd fad0 	bl	80028b0 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d901      	bls.n	800531e <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e060      	b.n	80053e0 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800531e:	4b05      	ldr	r3, [pc, #20]	; (8005334 <HAL_RCC_OscConfig+0x814>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d0f0      	beq.n	800530c <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800532a:	e058      	b.n	80053de <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e057      	b.n	80053e0 <HAL_RCC_OscConfig+0x8c0>
 8005330:	40007000 	.word	0x40007000
 8005334:	40021000 	.word	0x40021000
 8005338:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800533c:	4b2a      	ldr	r3, [pc, #168]	; (80053e8 <HAL_RCC_OscConfig+0x8c8>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d14a      	bne.n	80053de <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005348:	4b27      	ldr	r3, [pc, #156]	; (80053e8 <HAL_RCC_OscConfig+0x8c8>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a26      	ldr	r2, [pc, #152]	; (80053e8 <HAL_RCC_OscConfig+0x8c8>)
 800534e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005352:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005354:	4b24      	ldr	r3, [pc, #144]	; (80053e8 <HAL_RCC_OscConfig+0x8c8>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	4a23      	ldr	r2, [pc, #140]	; (80053e8 <HAL_RCC_OscConfig+0x8c8>)
 800535a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800535e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005360:	f7fd faa6 	bl	80028b0 <HAL_GetTick>
 8005364:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005366:	e008      	b.n	800537a <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005368:	f7fd faa2 	bl	80028b0 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d901      	bls.n	800537a <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e032      	b.n	80053e0 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800537a:	4b1b      	ldr	r3, [pc, #108]	; (80053e8 <HAL_RCC_OscConfig+0x8c8>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d0f0      	beq.n	8005368 <HAL_RCC_OscConfig+0x848>
 8005386:	e02a      	b.n	80053de <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	2b0c      	cmp	r3, #12
 800538c:	d025      	beq.n	80053da <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800538e:	4b16      	ldr	r3, [pc, #88]	; (80053e8 <HAL_RCC_OscConfig+0x8c8>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a15      	ldr	r2, [pc, #84]	; (80053e8 <HAL_RCC_OscConfig+0x8c8>)
 8005394:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005398:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800539a:	4b13      	ldr	r3, [pc, #76]	; (80053e8 <HAL_RCC_OscConfig+0x8c8>)
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	4a12      	ldr	r2, [pc, #72]	; (80053e8 <HAL_RCC_OscConfig+0x8c8>)
 80053a0:	f023 0303 	bic.w	r3, r3, #3
 80053a4:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80053a6:	4b10      	ldr	r3, [pc, #64]	; (80053e8 <HAL_RCC_OscConfig+0x8c8>)
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	4a0f      	ldr	r2, [pc, #60]	; (80053e8 <HAL_RCC_OscConfig+0x8c8>)
 80053ac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80053b0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b2:	f7fd fa7d 	bl	80028b0 <HAL_GetTick>
 80053b6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053b8:	e008      	b.n	80053cc <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ba:	f7fd fa79 	bl	80028b0 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d901      	bls.n	80053cc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e009      	b.n	80053e0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053cc:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <HAL_RCC_OscConfig+0x8c8>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1f0      	bne.n	80053ba <HAL_RCC_OscConfig+0x89a>
 80053d8:	e001      	b.n	80053de <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e000      	b.n	80053e0 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3728      	adds	r7, #40	; 0x28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	40021000 	.word	0x40021000

080053ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e0c8      	b.n	8005592 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005400:	4b66      	ldr	r3, [pc, #408]	; (800559c <HAL_RCC_ClockConfig+0x1b0>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0307 	and.w	r3, r3, #7
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	429a      	cmp	r2, r3
 800540c:	d910      	bls.n	8005430 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800540e:	4b63      	ldr	r3, [pc, #396]	; (800559c <HAL_RCC_ClockConfig+0x1b0>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f023 0207 	bic.w	r2, r3, #7
 8005416:	4961      	ldr	r1, [pc, #388]	; (800559c <HAL_RCC_ClockConfig+0x1b0>)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	4313      	orrs	r3, r2
 800541c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800541e:	4b5f      	ldr	r3, [pc, #380]	; (800559c <HAL_RCC_ClockConfig+0x1b0>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0307 	and.w	r3, r3, #7
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	429a      	cmp	r2, r3
 800542a:	d001      	beq.n	8005430 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e0b0      	b.n	8005592 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b00      	cmp	r3, #0
 800543a:	d04c      	beq.n	80054d6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	2b03      	cmp	r3, #3
 8005442:	d107      	bne.n	8005454 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005444:	4b56      	ldr	r3, [pc, #344]	; (80055a0 <HAL_RCC_ClockConfig+0x1b4>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d121      	bne.n	8005494 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e09e      	b.n	8005592 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	2b02      	cmp	r3, #2
 800545a:	d107      	bne.n	800546c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800545c:	4b50      	ldr	r3, [pc, #320]	; (80055a0 <HAL_RCC_ClockConfig+0x1b4>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d115      	bne.n	8005494 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e092      	b.n	8005592 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d107      	bne.n	8005484 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005474:	4b4a      	ldr	r3, [pc, #296]	; (80055a0 <HAL_RCC_ClockConfig+0x1b4>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d109      	bne.n	8005494 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e086      	b.n	8005592 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005484:	4b46      	ldr	r3, [pc, #280]	; (80055a0 <HAL_RCC_ClockConfig+0x1b4>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e07e      	b.n	8005592 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005494:	4b42      	ldr	r3, [pc, #264]	; (80055a0 <HAL_RCC_ClockConfig+0x1b4>)
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f023 0203 	bic.w	r2, r3, #3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	493f      	ldr	r1, [pc, #252]	; (80055a0 <HAL_RCC_ClockConfig+0x1b4>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a6:	f7fd fa03 	bl	80028b0 <HAL_GetTick>
 80054aa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ac:	e00a      	b.n	80054c4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054ae:	f7fd f9ff 	bl	80028b0 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054bc:	4293      	cmp	r3, r2
 80054be:	d901      	bls.n	80054c4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e066      	b.n	8005592 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054c4:	4b36      	ldr	r3, [pc, #216]	; (80055a0 <HAL_RCC_ClockConfig+0x1b4>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f003 020c 	and.w	r2, r3, #12
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d1eb      	bne.n	80054ae <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d008      	beq.n	80054f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054e2:	4b2f      	ldr	r3, [pc, #188]	; (80055a0 <HAL_RCC_ClockConfig+0x1b4>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	492c      	ldr	r1, [pc, #176]	; (80055a0 <HAL_RCC_ClockConfig+0x1b4>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054f4:	4b29      	ldr	r3, [pc, #164]	; (800559c <HAL_RCC_ClockConfig+0x1b0>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d210      	bcs.n	8005524 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005502:	4b26      	ldr	r3, [pc, #152]	; (800559c <HAL_RCC_ClockConfig+0x1b0>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f023 0207 	bic.w	r2, r3, #7
 800550a:	4924      	ldr	r1, [pc, #144]	; (800559c <HAL_RCC_ClockConfig+0x1b0>)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	4313      	orrs	r3, r2
 8005510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005512:	4b22      	ldr	r3, [pc, #136]	; (800559c <HAL_RCC_ClockConfig+0x1b0>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0307 	and.w	r3, r3, #7
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	429a      	cmp	r2, r3
 800551e:	d001      	beq.n	8005524 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e036      	b.n	8005592 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b00      	cmp	r3, #0
 800552e:	d008      	beq.n	8005542 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005530:	4b1b      	ldr	r3, [pc, #108]	; (80055a0 <HAL_RCC_ClockConfig+0x1b4>)
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	4918      	ldr	r1, [pc, #96]	; (80055a0 <HAL_RCC_ClockConfig+0x1b4>)
 800553e:	4313      	orrs	r3, r2
 8005540:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0308 	and.w	r3, r3, #8
 800554a:	2b00      	cmp	r3, #0
 800554c:	d009      	beq.n	8005562 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800554e:	4b14      	ldr	r3, [pc, #80]	; (80055a0 <HAL_RCC_ClockConfig+0x1b4>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	4910      	ldr	r1, [pc, #64]	; (80055a0 <HAL_RCC_ClockConfig+0x1b4>)
 800555e:	4313      	orrs	r3, r2
 8005560:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005562:	f000 f825 	bl	80055b0 <HAL_RCC_GetSysClockFreq>
 8005566:	4601      	mov	r1, r0
 8005568:	4b0d      	ldr	r3, [pc, #52]	; (80055a0 <HAL_RCC_ClockConfig+0x1b4>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	091b      	lsrs	r3, r3, #4
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	4a0c      	ldr	r2, [pc, #48]	; (80055a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005574:	5cd3      	ldrb	r3, [r2, r3]
 8005576:	f003 031f 	and.w	r3, r3, #31
 800557a:	fa21 f303 	lsr.w	r3, r1, r3
 800557e:	4a0a      	ldr	r2, [pc, #40]	; (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005582:	4b0a      	ldr	r3, [pc, #40]	; (80055ac <HAL_RCC_ClockConfig+0x1c0>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4618      	mov	r0, r3
 8005588:	f7fd f946 	bl	8002818 <HAL_InitTick>
 800558c:	4603      	mov	r3, r0
 800558e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005590:	7afb      	ldrb	r3, [r7, #11]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	40022000 	.word	0x40022000
 80055a0:	40021000 	.word	0x40021000
 80055a4:	0800ad68 	.word	0x0800ad68
 80055a8:	20000000 	.word	0x20000000
 80055ac:	20000004 	.word	0x20000004

080055b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b089      	sub	sp, #36	; 0x24
 80055b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80055b6:	2300      	movs	r3, #0
 80055b8:	61fb      	str	r3, [r7, #28]
 80055ba:	2300      	movs	r3, #0
 80055bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055be:	4b3d      	ldr	r3, [pc, #244]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f003 030c 	and.w	r3, r3, #12
 80055c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055c8:	4b3a      	ldr	r3, [pc, #232]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f003 0303 	and.w	r3, r3, #3
 80055d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d005      	beq.n	80055e4 <HAL_RCC_GetSysClockFreq+0x34>
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	2b0c      	cmp	r3, #12
 80055dc:	d121      	bne.n	8005622 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d11e      	bne.n	8005622 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80055e4:	4b33      	ldr	r3, [pc, #204]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0308 	and.w	r3, r3, #8
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d107      	bne.n	8005600 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80055f0:	4b30      	ldr	r3, [pc, #192]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80055f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055f6:	0a1b      	lsrs	r3, r3, #8
 80055f8:	f003 030f 	and.w	r3, r3, #15
 80055fc:	61fb      	str	r3, [r7, #28]
 80055fe:	e005      	b.n	800560c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005600:	4b2c      	ldr	r3, [pc, #176]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x104>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	091b      	lsrs	r3, r3, #4
 8005606:	f003 030f 	and.w	r3, r3, #15
 800560a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800560c:	4a2a      	ldr	r2, [pc, #168]	; (80056b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005614:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10d      	bne.n	8005638 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005620:	e00a      	b.n	8005638 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	2b04      	cmp	r3, #4
 8005626:	d102      	bne.n	800562e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005628:	4b24      	ldr	r3, [pc, #144]	; (80056bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800562a:	61bb      	str	r3, [r7, #24]
 800562c:	e004      	b.n	8005638 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	2b08      	cmp	r3, #8
 8005632:	d101      	bne.n	8005638 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005634:	4b22      	ldr	r3, [pc, #136]	; (80056c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005636:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2b0c      	cmp	r3, #12
 800563c:	d133      	bne.n	80056a6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800563e:	4b1d      	ldr	r3, [pc, #116]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x104>)
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	f003 0303 	and.w	r3, r3, #3
 8005646:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2b02      	cmp	r3, #2
 800564c:	d002      	beq.n	8005654 <HAL_RCC_GetSysClockFreq+0xa4>
 800564e:	2b03      	cmp	r3, #3
 8005650:	d003      	beq.n	800565a <HAL_RCC_GetSysClockFreq+0xaa>
 8005652:	e005      	b.n	8005660 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005654:	4b19      	ldr	r3, [pc, #100]	; (80056bc <HAL_RCC_GetSysClockFreq+0x10c>)
 8005656:	617b      	str	r3, [r7, #20]
      break;
 8005658:	e005      	b.n	8005666 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800565a:	4b19      	ldr	r3, [pc, #100]	; (80056c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800565c:	617b      	str	r3, [r7, #20]
      break;
 800565e:	e002      	b.n	8005666 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	617b      	str	r3, [r7, #20]
      break;
 8005664:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005666:	4b13      	ldr	r3, [pc, #76]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x104>)
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	091b      	lsrs	r3, r3, #4
 800566c:	f003 0307 	and.w	r3, r3, #7
 8005670:	3301      	adds	r3, #1
 8005672:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005674:	4b0f      	ldr	r3, [pc, #60]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x104>)
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	0a1b      	lsrs	r3, r3, #8
 800567a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	fb02 f203 	mul.w	r2, r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	fbb2 f3f3 	udiv	r3, r2, r3
 800568a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800568c:	4b09      	ldr	r3, [pc, #36]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x104>)
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	0e5b      	lsrs	r3, r3, #25
 8005692:	f003 0303 	and.w	r3, r3, #3
 8005696:	3301      	adds	r3, #1
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80056a6:	69bb      	ldr	r3, [r7, #24]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3724      	adds	r7, #36	; 0x24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	40021000 	.word	0x40021000
 80056b8:	0800ad80 	.word	0x0800ad80
 80056bc:	00f42400 	.word	0x00f42400
 80056c0:	007a1200 	.word	0x007a1200

080056c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056c8:	4b03      	ldr	r3, [pc, #12]	; (80056d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80056ca:	681b      	ldr	r3, [r3, #0]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	20000000 	.word	0x20000000

080056dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80056e0:	f7ff fff0 	bl	80056c4 <HAL_RCC_GetHCLKFreq>
 80056e4:	4601      	mov	r1, r0
 80056e6:	4b06      	ldr	r3, [pc, #24]	; (8005700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	0a1b      	lsrs	r3, r3, #8
 80056ec:	f003 0307 	and.w	r3, r3, #7
 80056f0:	4a04      	ldr	r2, [pc, #16]	; (8005704 <HAL_RCC_GetPCLK1Freq+0x28>)
 80056f2:	5cd3      	ldrb	r3, [r2, r3]
 80056f4:	f003 031f 	and.w	r3, r3, #31
 80056f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	40021000 	.word	0x40021000
 8005704:	0800ad78 	.word	0x0800ad78

08005708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800570c:	f7ff ffda 	bl	80056c4 <HAL_RCC_GetHCLKFreq>
 8005710:	4601      	mov	r1, r0
 8005712:	4b06      	ldr	r3, [pc, #24]	; (800572c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	0adb      	lsrs	r3, r3, #11
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	4a04      	ldr	r2, [pc, #16]	; (8005730 <HAL_RCC_GetPCLK2Freq+0x28>)
 800571e:	5cd3      	ldrb	r3, [r2, r3]
 8005720:	f003 031f 	and.w	r3, r3, #31
 8005724:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005728:	4618      	mov	r0, r3
 800572a:	bd80      	pop	{r7, pc}
 800572c:	40021000 	.word	0x40021000
 8005730:	0800ad78 	.word	0x0800ad78

08005734 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800573c:	2300      	movs	r3, #0
 800573e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005740:	4b2a      	ldr	r3, [pc, #168]	; (80057ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800574c:	f7ff f974 	bl	8004a38 <HAL_PWREx_GetVoltageRange>
 8005750:	6178      	str	r0, [r7, #20]
 8005752:	e014      	b.n	800577e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005754:	4b25      	ldr	r3, [pc, #148]	; (80057ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005758:	4a24      	ldr	r2, [pc, #144]	; (80057ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800575a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800575e:	6593      	str	r3, [r2, #88]	; 0x58
 8005760:	4b22      	ldr	r3, [pc, #136]	; (80057ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005768:	60fb      	str	r3, [r7, #12]
 800576a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800576c:	f7ff f964 	bl	8004a38 <HAL_PWREx_GetVoltageRange>
 8005770:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005772:	4b1e      	ldr	r3, [pc, #120]	; (80057ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005776:	4a1d      	ldr	r2, [pc, #116]	; (80057ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005778:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800577c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005784:	d10b      	bne.n	800579e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b80      	cmp	r3, #128	; 0x80
 800578a:	d919      	bls.n	80057c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2ba0      	cmp	r3, #160	; 0xa0
 8005790:	d902      	bls.n	8005798 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005792:	2302      	movs	r3, #2
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	e013      	b.n	80057c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005798:	2301      	movs	r3, #1
 800579a:	613b      	str	r3, [r7, #16]
 800579c:	e010      	b.n	80057c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b80      	cmp	r3, #128	; 0x80
 80057a2:	d902      	bls.n	80057aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80057a4:	2303      	movs	r3, #3
 80057a6:	613b      	str	r3, [r7, #16]
 80057a8:	e00a      	b.n	80057c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b80      	cmp	r3, #128	; 0x80
 80057ae:	d102      	bne.n	80057b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80057b0:	2302      	movs	r3, #2
 80057b2:	613b      	str	r3, [r7, #16]
 80057b4:	e004      	b.n	80057c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b70      	cmp	r3, #112	; 0x70
 80057ba:	d101      	bne.n	80057c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80057bc:	2301      	movs	r3, #1
 80057be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80057c0:	4b0b      	ldr	r3, [pc, #44]	; (80057f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f023 0207 	bic.w	r2, r3, #7
 80057c8:	4909      	ldr	r1, [pc, #36]	; (80057f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80057d0:	4b07      	ldr	r3, [pc, #28]	; (80057f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d001      	beq.n	80057e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e000      	b.n	80057e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	40021000 	.word	0x40021000
 80057f0:	40022000 	.word	0x40022000

080057f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057fc:	2300      	movs	r3, #0
 80057fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005800:	2300      	movs	r3, #0
 8005802:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 809e 	beq.w	800594e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005812:	2300      	movs	r3, #0
 8005814:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005816:	4b46      	ldr	r3, [pc, #280]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800581a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8005826:	2300      	movs	r3, #0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00d      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800582c:	4b40      	ldr	r3, [pc, #256]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800582e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005830:	4a3f      	ldr	r2, [pc, #252]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005836:	6593      	str	r3, [r2, #88]	; 0x58
 8005838:	4b3d      	ldr	r3, [pc, #244]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800583a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800583c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005840:	60bb      	str	r3, [r7, #8]
 8005842:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005844:	2301      	movs	r3, #1
 8005846:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005848:	4b3a      	ldr	r3, [pc, #232]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a39      	ldr	r2, [pc, #228]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800584e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005852:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005854:	f7fd f82c 	bl	80028b0 <HAL_GetTick>
 8005858:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800585a:	e009      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800585c:	f7fd f828 	bl	80028b0 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b02      	cmp	r3, #2
 8005868:	d902      	bls.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	74fb      	strb	r3, [r7, #19]
        break;
 800586e:	e005      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005870:	4b30      	ldr	r3, [pc, #192]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005878:	2b00      	cmp	r3, #0
 800587a:	d0ef      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 800587c:	7cfb      	ldrb	r3, [r7, #19]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d15a      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005882:	4b2b      	ldr	r3, [pc, #172]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005888:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800588c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d01e      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	429a      	cmp	r2, r3
 800589c:	d019      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800589e:	4b24      	ldr	r3, [pc, #144]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80058a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058aa:	4b21      	ldr	r3, [pc, #132]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80058ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b0:	4a1f      	ldr	r2, [pc, #124]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80058b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058ba:	4b1d      	ldr	r3, [pc, #116]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80058bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c0:	4a1b      	ldr	r2, [pc, #108]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80058c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058ca:	4a19      	ldr	r2, [pc, #100]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d016      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058dc:	f7fc ffe8 	bl	80028b0 <HAL_GetTick>
 80058e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058e2:	e00b      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058e4:	f7fc ffe4 	bl	80028b0 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d902      	bls.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	74fb      	strb	r3, [r7, #19]
            break;
 80058fa:	e006      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058fc:	4b0c      	ldr	r3, [pc, #48]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80058fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0ec      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800590a:	7cfb      	ldrb	r3, [r7, #19]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10b      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005910:	4b07      	ldr	r3, [pc, #28]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005916:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591e:	4904      	ldr	r1, [pc, #16]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005920:	4313      	orrs	r3, r2
 8005922:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005926:	e009      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005928:	7cfb      	ldrb	r3, [r7, #19]
 800592a:	74bb      	strb	r3, [r7, #18]
 800592c:	e006      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800592e:	bf00      	nop
 8005930:	40021000 	.word	0x40021000
 8005934:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005938:	7cfb      	ldrb	r3, [r7, #19]
 800593a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800593c:	7c7b      	ldrb	r3, [r7, #17]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d105      	bne.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005942:	4b6e      	ldr	r3, [pc, #440]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005946:	4a6d      	ldr	r2, [pc, #436]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800594c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00a      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800595a:	4b68      	ldr	r3, [pc, #416]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800595c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005960:	f023 0203 	bic.w	r2, r3, #3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	4964      	ldr	r1, [pc, #400]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800596a:	4313      	orrs	r3, r2
 800596c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800597c:	4b5f      	ldr	r3, [pc, #380]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800597e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005982:	f023 020c 	bic.w	r2, r3, #12
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	495c      	ldr	r1, [pc, #368]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800598c:	4313      	orrs	r3, r2
 800598e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0304 	and.w	r3, r3, #4
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800599e:	4b57      	ldr	r3, [pc, #348]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	4953      	ldr	r1, [pc, #332]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0320 	and.w	r3, r3, #32
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00a      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059c0:	4b4e      	ldr	r3, [pc, #312]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	494b      	ldr	r1, [pc, #300]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00a      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059e2:	4b46      	ldr	r3, [pc, #280]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	4942      	ldr	r1, [pc, #264]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00a      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a04:	4b3d      	ldr	r3, [pc, #244]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a12:	493a      	ldr	r1, [pc, #232]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00a      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a26:	4b35      	ldr	r3, [pc, #212]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	4931      	ldr	r1, [pc, #196]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00a      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a48:	4b2c      	ldr	r3, [pc, #176]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	4929      	ldr	r1, [pc, #164]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00a      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a6a:	4b24      	ldr	r3, [pc, #144]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	69db      	ldr	r3, [r3, #28]
 8005a78:	4920      	ldr	r1, [pc, #128]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d015      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a8c:	4b1b      	ldr	r3, [pc, #108]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9a:	4918      	ldr	r1, [pc, #96]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005aaa:	d105      	bne.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005aac:	4b13      	ldr	r3, [pc, #76]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	4a12      	ldr	r2, [pc, #72]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005ab2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ab6:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d015      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ac4:	4b0d      	ldr	r3, [pc, #52]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad2:	490a      	ldr	r1, [pc, #40]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ade:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ae2:	d105      	bne.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ae4:	4b05      	ldr	r3, [pc, #20]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	4a04      	ldr	r2, [pc, #16]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005aea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005af0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3718      	adds	r7, #24
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	40021000 	.word	0x40021000

08005b00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e07c      	b.n	8005c0c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d106      	bne.n	8005b32 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7fc fcd9 	bl	80024e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2202      	movs	r2, #2
 8005b36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b48:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b52:	d902      	bls.n	8005b5a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b54:	2300      	movs	r3, #0
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	e002      	b.n	8005b60 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b5e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005b68:	d007      	beq.n	8005b7a <HAL_SPI_Init+0x7a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b72:	d002      	beq.n	8005b7a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10b      	bne.n	8005b9a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b8a:	d903      	bls.n	8005b94 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2202      	movs	r2, #2
 8005b90:	631a      	str	r2, [r3, #48]	; 0x30
 8005b92:	e002      	b.n	8005b9a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	ea42 0103 	orr.w	r1, r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	0c1b      	lsrs	r3, r3, #16
 8005bda:	f003 0204 	and.w	r2, r3, #4
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	431a      	orrs	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be8:	431a      	orrs	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	ea42 0103 	orr.w	r1, r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b088      	sub	sp, #32
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	603b      	str	r3, [r7, #0]
 8005c20:	4613      	mov	r3, r2
 8005c22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d101      	bne.n	8005c36 <HAL_SPI_Transmit+0x22>
 8005c32:	2302      	movs	r3, #2
 8005c34:	e150      	b.n	8005ed8 <HAL_SPI_Transmit+0x2c4>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c3e:	f7fc fe37 	bl	80028b0 <HAL_GetTick>
 8005c42:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c44:	88fb      	ldrh	r3, [r7, #6]
 8005c46:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d002      	beq.n	8005c5a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c54:	2302      	movs	r3, #2
 8005c56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c58:	e135      	b.n	8005ec6 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d002      	beq.n	8005c66 <HAL_SPI_Transmit+0x52>
 8005c60:	88fb      	ldrh	r3, [r7, #6]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d102      	bne.n	8005c6c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c6a:	e12c      	b.n	8005ec6 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2203      	movs	r2, #3
 8005c70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	88fa      	ldrh	r2, [r7, #6]
 8005c84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	88fa      	ldrh	r2, [r7, #6]
 8005c8a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cb6:	d107      	bne.n	8005cc8 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cc6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd2:	2b40      	cmp	r3, #64	; 0x40
 8005cd4:	d007      	beq.n	8005ce6 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ce4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cee:	d94b      	bls.n	8005d88 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d002      	beq.n	8005cfe <HAL_SPI_Transmit+0xea>
 8005cf8:	8afb      	ldrh	r3, [r7, #22]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d13e      	bne.n	8005d7c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d02:	881a      	ldrh	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0e:	1c9a      	adds	r2, r3, #2
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d22:	e02b      	b.n	8005d7c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d112      	bne.n	8005d58 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	881a      	ldrh	r2, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d42:	1c9a      	adds	r2, r3, #2
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d56:	e011      	b.n	8005d7c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d58:	f7fc fdaa 	bl	80028b0 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d803      	bhi.n	8005d70 <HAL_SPI_Transmit+0x15c>
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6e:	d102      	bne.n	8005d76 <HAL_SPI_Transmit+0x162>
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d102      	bne.n	8005d7c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d7a:	e0a4      	b.n	8005ec6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1ce      	bne.n	8005d24 <HAL_SPI_Transmit+0x110>
 8005d86:	e07c      	b.n	8005e82 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d002      	beq.n	8005d96 <HAL_SPI_Transmit+0x182>
 8005d90:	8afb      	ldrh	r3, [r7, #22]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d170      	bne.n	8005e78 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d912      	bls.n	8005dc6 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da4:	881a      	ldrh	r2, [r3, #0]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db0:	1c9a      	adds	r2, r3, #2
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	3b02      	subs	r3, #2
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dc4:	e058      	b.n	8005e78 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	330c      	adds	r3, #12
 8005dd0:	7812      	ldrb	r2, [r2, #0]
 8005dd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005dec:	e044      	b.n	8005e78 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d12b      	bne.n	8005e54 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d912      	bls.n	8005e2c <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0a:	881a      	ldrh	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e16:	1c9a      	adds	r2, r3, #2
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	3b02      	subs	r3, #2
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e2a:	e025      	b.n	8005e78 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	330c      	adds	r3, #12
 8005e36:	7812      	ldrb	r2, [r2, #0]
 8005e38:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3e:	1c5a      	adds	r2, r3, #1
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e52:	e011      	b.n	8005e78 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e54:	f7fc fd2c 	bl	80028b0 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d803      	bhi.n	8005e6c <HAL_SPI_Transmit+0x258>
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6a:	d102      	bne.n	8005e72 <HAL_SPI_Transmit+0x25e>
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d102      	bne.n	8005e78 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e76:	e026      	b.n	8005ec6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1b5      	bne.n	8005dee <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	6839      	ldr	r1, [r7, #0]
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 fc94 	bl	80067b4 <SPI_EndRxTxTransaction>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2220      	movs	r2, #32
 8005e96:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10a      	bne.n	8005eb6 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	613b      	str	r3, [r7, #16]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	613b      	str	r3, [r7, #16]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	613b      	str	r3, [r7, #16]
 8005eb4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d002      	beq.n	8005ec4 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	77fb      	strb	r3, [r7, #31]
 8005ec2:	e000      	b.n	8005ec6 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8005ec4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ed6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3720      	adds	r7, #32
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b088      	sub	sp, #32
 8005ee4:	af02      	add	r7, sp, #8
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	603b      	str	r3, [r7, #0]
 8005eec:	4613      	mov	r3, r2
 8005eee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005efc:	d112      	bne.n	8005f24 <HAL_SPI_Receive+0x44>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10e      	bne.n	8005f24 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2204      	movs	r2, #4
 8005f0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005f0e:	88fa      	ldrh	r2, [r7, #6]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	4613      	mov	r3, r2
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	68b9      	ldr	r1, [r7, #8]
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 f908 	bl	8006130 <HAL_SPI_TransmitReceive>
 8005f20:	4603      	mov	r3, r0
 8005f22:	e101      	b.n	8006128 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d101      	bne.n	8005f32 <HAL_SPI_Receive+0x52>
 8005f2e:	2302      	movs	r3, #2
 8005f30:	e0fa      	b.n	8006128 <HAL_SPI_Receive+0x248>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f3a:	f7fc fcb9 	bl	80028b0 <HAL_GetTick>
 8005f3e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d002      	beq.n	8005f52 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f50:	e0e1      	b.n	8006116 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <HAL_SPI_Receive+0x7e>
 8005f58:	88fb      	ldrh	r3, [r7, #6]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d102      	bne.n	8005f64 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f62:	e0d8      	b.n	8006116 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2204      	movs	r2, #4
 8005f68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	88fa      	ldrh	r2, [r7, #6]
 8005f7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	88fa      	ldrh	r2, [r7, #6]
 8005f84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fae:	d908      	bls.n	8005fc2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005fbe:	605a      	str	r2, [r3, #4]
 8005fc0:	e007      	b.n	8005fd2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005fd0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fda:	d107      	bne.n	8005fec <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005fea:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff6:	2b40      	cmp	r3, #64	; 0x40
 8005ff8:	d007      	beq.n	800600a <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006008:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006012:	d867      	bhi.n	80060e4 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006014:	e030      	b.n	8006078 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b01      	cmp	r3, #1
 8006022:	d117      	bne.n	8006054 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f103 020c 	add.w	r2, r3, #12
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006030:	7812      	ldrb	r2, [r2, #0]
 8006032:	b2d2      	uxtb	r2, r2
 8006034:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006046:	b29b      	uxth	r3, r3
 8006048:	3b01      	subs	r3, #1
 800604a:	b29a      	uxth	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006052:	e011      	b.n	8006078 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006054:	f7fc fc2c 	bl	80028b0 <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	429a      	cmp	r2, r3
 8006062:	d803      	bhi.n	800606c <HAL_SPI_Receive+0x18c>
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606a:	d102      	bne.n	8006072 <HAL_SPI_Receive+0x192>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d102      	bne.n	8006078 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006076:	e04e      	b.n	8006116 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800607e:	b29b      	uxth	r3, r3
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1c8      	bne.n	8006016 <HAL_SPI_Receive+0x136>
 8006084:	e034      	b.n	80060f0 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	2b01      	cmp	r3, #1
 8006092:	d115      	bne.n	80060c0 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68da      	ldr	r2, [r3, #12]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609e:	b292      	uxth	r2, r2
 80060a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	1c9a      	adds	r2, r3, #2
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	3b01      	subs	r3, #1
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80060be:	e011      	b.n	80060e4 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060c0:	f7fc fbf6 	bl	80028b0 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	683a      	ldr	r2, [r7, #0]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d803      	bhi.n	80060d8 <HAL_SPI_Receive+0x1f8>
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d6:	d102      	bne.n	80060de <HAL_SPI_Receive+0x1fe>
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d102      	bne.n	80060e4 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80060e2:	e018      	b.n	8006116 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1ca      	bne.n	8006086 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	6839      	ldr	r1, [r7, #0]
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 fb05 	bl	8006704 <SPI_EndRxTransaction>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2220      	movs	r2, #32
 8006104:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800610a:	2b00      	cmp	r3, #0
 800610c:	d002      	beq.n	8006114 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	75fb      	strb	r3, [r7, #23]
 8006112:	e000      	b.n	8006116 <HAL_SPI_Receive+0x236>
  }

error :
 8006114:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006126:	7dfb      	ldrb	r3, [r7, #23]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3718      	adds	r7, #24
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b08a      	sub	sp, #40	; 0x28
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
 800613c:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800613e:	2301      	movs	r3, #1
 8006140:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006142:	2300      	movs	r3, #0
 8006144:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800614e:	2b01      	cmp	r3, #1
 8006150:	d101      	bne.n	8006156 <HAL_SPI_TransmitReceive+0x26>
 8006152:	2302      	movs	r3, #2
 8006154:	e1fb      	b.n	800654e <HAL_SPI_TransmitReceive+0x41e>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800615e:	f7fc fba7 	bl	80028b0 <HAL_GetTick>
 8006162:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800616a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006172:	887b      	ldrh	r3, [r7, #2]
 8006174:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006176:	887b      	ldrh	r3, [r7, #2]
 8006178:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800617a:	7efb      	ldrb	r3, [r7, #27]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d00e      	beq.n	800619e <HAL_SPI_TransmitReceive+0x6e>
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006186:	d106      	bne.n	8006196 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d102      	bne.n	8006196 <HAL_SPI_TransmitReceive+0x66>
 8006190:	7efb      	ldrb	r3, [r7, #27]
 8006192:	2b04      	cmp	r3, #4
 8006194:	d003      	beq.n	800619e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006196:	2302      	movs	r3, #2
 8006198:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800619c:	e1cd      	b.n	800653a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d005      	beq.n	80061b0 <HAL_SPI_TransmitReceive+0x80>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d002      	beq.n	80061b0 <HAL_SPI_TransmitReceive+0x80>
 80061aa:	887b      	ldrh	r3, [r7, #2]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d103      	bne.n	80061b8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80061b6:	e1c0      	b.n	800653a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b04      	cmp	r3, #4
 80061c2:	d003      	beq.n	80061cc <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2205      	movs	r2, #5
 80061c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	887a      	ldrh	r2, [r7, #2]
 80061dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	887a      	ldrh	r2, [r7, #2]
 80061e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	887a      	ldrh	r2, [r7, #2]
 80061f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	887a      	ldrh	r2, [r7, #2]
 80061f8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800620e:	d802      	bhi.n	8006216 <HAL_SPI_TransmitReceive+0xe6>
 8006210:	8a3b      	ldrh	r3, [r7, #16]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d908      	bls.n	8006228 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006224:	605a      	str	r2, [r3, #4]
 8006226:	e007      	b.n	8006238 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006236:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006242:	2b40      	cmp	r3, #64	; 0x40
 8006244:	d007      	beq.n	8006256 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006254:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800625e:	d97c      	bls.n	800635a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d002      	beq.n	800626e <HAL_SPI_TransmitReceive+0x13e>
 8006268:	8a7b      	ldrh	r3, [r7, #18]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d169      	bne.n	8006342 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006272:	881a      	ldrh	r2, [r3, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627e:	1c9a      	adds	r2, r3, #2
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006288:	b29b      	uxth	r3, r3
 800628a:	3b01      	subs	r3, #1
 800628c:	b29a      	uxth	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006292:	e056      	b.n	8006342 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d11b      	bne.n	80062da <HAL_SPI_TransmitReceive+0x1aa>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d016      	beq.n	80062da <HAL_SPI_TransmitReceive+0x1aa>
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d113      	bne.n	80062da <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b6:	881a      	ldrh	r2, [r3, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c2:	1c9a      	adds	r2, r3, #2
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	3b01      	subs	r3, #1
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d11c      	bne.n	8006322 <HAL_SPI_TransmitReceive+0x1f2>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d016      	beq.n	8006322 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68da      	ldr	r2, [r3, #12]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	b292      	uxth	r2, r2
 8006300:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006306:	1c9a      	adds	r2, r3, #2
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006312:	b29b      	uxth	r3, r3
 8006314:	3b01      	subs	r3, #1
 8006316:	b29a      	uxth	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800631e:	2301      	movs	r3, #1
 8006320:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006322:	f7fc fac5 	bl	80028b0 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800632e:	429a      	cmp	r2, r3
 8006330:	d807      	bhi.n	8006342 <HAL_SPI_TransmitReceive+0x212>
 8006332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006338:	d003      	beq.n	8006342 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006340:	e0fb      	b.n	800653a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006346:	b29b      	uxth	r3, r3
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1a3      	bne.n	8006294 <HAL_SPI_TransmitReceive+0x164>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006352:	b29b      	uxth	r3, r3
 8006354:	2b00      	cmp	r3, #0
 8006356:	d19d      	bne.n	8006294 <HAL_SPI_TransmitReceive+0x164>
 8006358:	e0df      	b.n	800651a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d003      	beq.n	800636a <HAL_SPI_TransmitReceive+0x23a>
 8006362:	8a7b      	ldrh	r3, [r7, #18]
 8006364:	2b01      	cmp	r3, #1
 8006366:	f040 80cb 	bne.w	8006500 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800636e:	b29b      	uxth	r3, r3
 8006370:	2b01      	cmp	r3, #1
 8006372:	d912      	bls.n	800639a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006378:	881a      	ldrh	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006384:	1c9a      	adds	r2, r3, #2
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800638e:	b29b      	uxth	r3, r3
 8006390:	3b02      	subs	r3, #2
 8006392:	b29a      	uxth	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006398:	e0b2      	b.n	8006500 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	330c      	adds	r3, #12
 80063a4:	7812      	ldrb	r2, [r2, #0]
 80063a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ac:	1c5a      	adds	r2, r3, #1
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	3b01      	subs	r3, #1
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063c0:	e09e      	b.n	8006500 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f003 0302 	and.w	r3, r3, #2
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d134      	bne.n	800643a <HAL_SPI_TransmitReceive+0x30a>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d02f      	beq.n	800643a <HAL_SPI_TransmitReceive+0x30a>
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d12c      	bne.n	800643a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d912      	bls.n	8006410 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ee:	881a      	ldrh	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fa:	1c9a      	adds	r2, r3, #2
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006404:	b29b      	uxth	r3, r3
 8006406:	3b02      	subs	r3, #2
 8006408:	b29a      	uxth	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800640e:	e012      	b.n	8006436 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	330c      	adds	r3, #12
 800641a:	7812      	ldrb	r2, [r2, #0]
 800641c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006422:	1c5a      	adds	r2, r3, #1
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800642c:	b29b      	uxth	r3, r3
 800642e:	3b01      	subs	r3, #1
 8006430:	b29a      	uxth	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006436:	2300      	movs	r3, #0
 8006438:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b01      	cmp	r3, #1
 8006446:	d148      	bne.n	80064da <HAL_SPI_TransmitReceive+0x3aa>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800644e:	b29b      	uxth	r3, r3
 8006450:	2b00      	cmp	r3, #0
 8006452:	d042      	beq.n	80064da <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800645a:	b29b      	uxth	r3, r3
 800645c:	2b01      	cmp	r3, #1
 800645e:	d923      	bls.n	80064a8 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68da      	ldr	r2, [r3, #12]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646a:	b292      	uxth	r2, r2
 800646c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006472:	1c9a      	adds	r2, r3, #2
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800647e:	b29b      	uxth	r3, r3
 8006480:	3b02      	subs	r3, #2
 8006482:	b29a      	uxth	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006490:	b29b      	uxth	r3, r3
 8006492:	2b01      	cmp	r3, #1
 8006494:	d81f      	bhi.n	80064d6 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80064a4:	605a      	str	r2, [r3, #4]
 80064a6:	e016      	b.n	80064d6 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f103 020c 	add.w	r2, r3, #12
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b4:	7812      	ldrb	r2, [r2, #0]
 80064b6:	b2d2      	uxtb	r2, r2
 80064b8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	1c5a      	adds	r2, r3, #1
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	3b01      	subs	r3, #1
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064d6:	2301      	movs	r3, #1
 80064d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80064da:	f7fc f9e9 	bl	80028b0 <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d803      	bhi.n	80064f2 <HAL_SPI_TransmitReceive+0x3c2>
 80064ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f0:	d102      	bne.n	80064f8 <HAL_SPI_TransmitReceive+0x3c8>
 80064f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d103      	bne.n	8006500 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80064fe:	e01c      	b.n	800653a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006504:	b29b      	uxth	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	f47f af5b 	bne.w	80063c2 <HAL_SPI_TransmitReceive+0x292>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006512:	b29b      	uxth	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	f47f af54 	bne.w	80063c2 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800651a:	69fa      	ldr	r2, [r7, #28]
 800651c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f000 f948 	bl	80067b4 <SPI_EndRxTxTransaction>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d006      	beq.n	8006538 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2220      	movs	r2, #32
 8006534:	661a      	str	r2, [r3, #96]	; 0x60
 8006536:	e000      	b.n	800653a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006538:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2201      	movs	r2, #1
 800653e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800654a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800654e:	4618      	mov	r0, r3
 8006550:	3728      	adds	r7, #40	; 0x28
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b084      	sub	sp, #16
 800655a:	af00      	add	r7, sp, #0
 800655c:	60f8      	str	r0, [r7, #12]
 800655e:	60b9      	str	r1, [r7, #8]
 8006560:	603b      	str	r3, [r7, #0]
 8006562:	4613      	mov	r3, r2
 8006564:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006566:	e04c      	b.n	8006602 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656e:	d048      	beq.n	8006602 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006570:	f7fc f99e 	bl	80028b0 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	683a      	ldr	r2, [r7, #0]
 800657c:	429a      	cmp	r2, r3
 800657e:	d902      	bls.n	8006586 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d13d      	bne.n	8006602 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006594:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800659e:	d111      	bne.n	80065c4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065a8:	d004      	beq.n	80065b4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065b2:	d107      	bne.n	80065c4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065cc:	d10f      	bne.n	80065ee <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065dc:	601a      	str	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e00f      	b.n	8006622 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689a      	ldr	r2, [r3, #8]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	4013      	ands	r3, r2
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	429a      	cmp	r2, r3
 8006610:	bf0c      	ite	eq
 8006612:	2301      	moveq	r3, #1
 8006614:	2300      	movne	r3, #0
 8006616:	b2db      	uxtb	r3, r3
 8006618:	461a      	mov	r2, r3
 800661a:	79fb      	ldrb	r3, [r7, #7]
 800661c:	429a      	cmp	r2, r3
 800661e:	d1a3      	bne.n	8006568 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b084      	sub	sp, #16
 800662e:	af00      	add	r7, sp, #0
 8006630:	60f8      	str	r0, [r7, #12]
 8006632:	60b9      	str	r1, [r7, #8]
 8006634:	607a      	str	r2, [r7, #4]
 8006636:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006638:	e057      	b.n	80066ea <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006640:	d106      	bne.n	8006650 <SPI_WaitFifoStateUntilTimeout+0x26>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d103      	bne.n	8006650 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	330c      	adds	r3, #12
 800664e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006656:	d048      	beq.n	80066ea <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006658:	f7fc f92a 	bl	80028b0 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	429a      	cmp	r2, r3
 8006666:	d902      	bls.n	800666e <SPI_WaitFifoStateUntilTimeout+0x44>
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d13d      	bne.n	80066ea <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	685a      	ldr	r2, [r3, #4]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800667c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006686:	d111      	bne.n	80066ac <SPI_WaitFifoStateUntilTimeout+0x82>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006690:	d004      	beq.n	800669c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800669a:	d107      	bne.n	80066ac <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066b4:	d10f      	bne.n	80066d6 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066c4:	601a      	str	r2, [r3, #0]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e008      	b.n	80066fc <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689a      	ldr	r2, [r3, #8]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	4013      	ands	r3, r2
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d19f      	bne.n	800663a <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af02      	add	r7, sp, #8
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006718:	d111      	bne.n	800673e <SPI_EndRxTransaction+0x3a>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006722:	d004      	beq.n	800672e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800672c:	d107      	bne.n	800673e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800673c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2200      	movs	r2, #0
 8006746:	2180      	movs	r1, #128	; 0x80
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f7ff ff04 	bl	8006556 <SPI_WaitFlagStateUntilTimeout>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d007      	beq.n	8006764 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006758:	f043 0220 	orr.w	r2, r3, #32
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e023      	b.n	80067ac <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800676c:	d11d      	bne.n	80067aa <SPI_EndRxTransaction+0xa6>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006776:	d004      	beq.n	8006782 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006780:	d113      	bne.n	80067aa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	9300      	str	r3, [sp, #0]
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	2200      	movs	r2, #0
 800678a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f7ff ff4b 	bl	800662a <SPI_WaitFifoStateUntilTimeout>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d007      	beq.n	80067aa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800679e:	f043 0220 	orr.w	r2, r3, #32
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e000      	b.n	80067ac <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af02      	add	r7, sp, #8
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f7ff ff2c 	bl	800662a <SPI_WaitFifoStateUntilTimeout>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d007      	beq.n	80067e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067dc:	f043 0220 	orr.w	r2, r3, #32
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e027      	b.n	8006838 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2200      	movs	r2, #0
 80067f0:	2180      	movs	r1, #128	; 0x80
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f7ff feaf 	bl	8006556 <SPI_WaitFlagStateUntilTimeout>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d007      	beq.n	800680e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006802:	f043 0220 	orr.w	r2, r3, #32
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e014      	b.n	8006838 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	2200      	movs	r2, #0
 8006816:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f7ff ff05 	bl	800662a <SPI_WaitFifoStateUntilTimeout>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d007      	beq.n	8006836 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800682a:	f043 0220 	orr.w	r2, r3, #32
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e000      	b.n	8006838 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e040      	b.n	80068d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006856:	2b00      	cmp	r3, #0
 8006858:	d106      	bne.n	8006868 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7fb ff4c 	bl	8002700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2224      	movs	r2, #36	; 0x24
 800686c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0201 	bic.w	r2, r2, #1
 800687c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fa28 	bl	8006cd4 <UART_SetConfig>
 8006884:	4603      	mov	r3, r0
 8006886:	2b01      	cmp	r3, #1
 8006888:	d101      	bne.n	800688e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e022      	b.n	80068d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006892:	2b00      	cmp	r3, #0
 8006894:	d002      	beq.n	800689c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fd30 	bl	80072fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	689a      	ldr	r2, [r3, #8]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 0201 	orr.w	r2, r2, #1
 80068ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fdb7 	bl	8007440 <UART_CheckIdleState>
 80068d2:	4603      	mov	r3, r0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	4613      	mov	r3, r2
 80068e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068ee:	2b20      	cmp	r3, #32
 80068f0:	f040 808a 	bne.w	8006a08 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d002      	beq.n	8006900 <HAL_UART_Receive_IT+0x24>
 80068fa:	88fb      	ldrh	r3, [r7, #6]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d101      	bne.n	8006904 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e082      	b.n	8006a0a <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800690a:	2b01      	cmp	r3, #1
 800690c:	d101      	bne.n	8006912 <HAL_UART_Receive_IT+0x36>
 800690e:	2302      	movs	r3, #2
 8006910:	e07b      	b.n	8006a0a <HAL_UART_Receive_IT+0x12e>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	88fa      	ldrh	r2, [r7, #6]
 8006924:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	88fa      	ldrh	r2, [r7, #6]
 800692c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800693e:	d10e      	bne.n	800695e <HAL_UART_Receive_IT+0x82>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d105      	bne.n	8006954 <HAL_UART_Receive_IT+0x78>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800694e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006952:	e02d      	b.n	80069b0 <HAL_UART_Receive_IT+0xd4>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	22ff      	movs	r2, #255	; 0xff
 8006958:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800695c:	e028      	b.n	80069b0 <HAL_UART_Receive_IT+0xd4>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10d      	bne.n	8006982 <HAL_UART_Receive_IT+0xa6>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d104      	bne.n	8006978 <HAL_UART_Receive_IT+0x9c>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	22ff      	movs	r2, #255	; 0xff
 8006972:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006976:	e01b      	b.n	80069b0 <HAL_UART_Receive_IT+0xd4>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	227f      	movs	r2, #127	; 0x7f
 800697c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006980:	e016      	b.n	80069b0 <HAL_UART_Receive_IT+0xd4>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800698a:	d10d      	bne.n	80069a8 <HAL_UART_Receive_IT+0xcc>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d104      	bne.n	800699e <HAL_UART_Receive_IT+0xc2>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	227f      	movs	r2, #127	; 0x7f
 8006998:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800699c:	e008      	b.n	80069b0 <HAL_UART_Receive_IT+0xd4>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	223f      	movs	r2, #63	; 0x3f
 80069a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069a6:	e003      	b.n	80069b0 <HAL_UART_Receive_IT+0xd4>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2222      	movs	r2, #34	; 0x22
 80069ba:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	689a      	ldr	r2, [r3, #8]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f042 0201 	orr.w	r2, r2, #1
 80069ca:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d4:	d107      	bne.n	80069e6 <HAL_UART_Receive_IT+0x10a>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d103      	bne.n	80069e6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	4a0d      	ldr	r2, [pc, #52]	; (8006a18 <HAL_UART_Receive_IT+0x13c>)
 80069e2:	661a      	str	r2, [r3, #96]	; 0x60
 80069e4:	e002      	b.n	80069ec <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	4a0c      	ldr	r2, [pc, #48]	; (8006a1c <HAL_UART_Receive_IT+0x140>)
 80069ea:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006a02:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006a04:	2300      	movs	r3, #0
 8006a06:	e000      	b.n	8006a0a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8006a08:	2302      	movs	r3, #2
  }
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	08007709 	.word	0x08007709
 8006a1c:	0800765f 	.word	0x0800765f

08006a20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b088      	sub	sp, #32
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a40:	69fa      	ldr	r2, [r7, #28]
 8006a42:	f640 030f 	movw	r3, #2063	; 0x80f
 8006a46:	4013      	ands	r3, r2
 8006a48:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d113      	bne.n	8006a78 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	f003 0320 	and.w	r3, r3, #32
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00e      	beq.n	8006a78 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	f003 0320 	and.w	r3, r3, #32
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d009      	beq.n	8006a78 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f000 8114 	beq.w	8006c96 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	4798      	blx	r3
      }
      return;
 8006a76:	e10e      	b.n	8006c96 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 80d6 	beq.w	8006c2c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d105      	bne.n	8006a96 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 80cb 	beq.w	8006c2c <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00e      	beq.n	8006abe <HAL_UART_IRQHandler+0x9e>
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d009      	beq.n	8006abe <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ab6:	f043 0201 	orr.w	r2, r3, #1
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	f003 0302 	and.w	r3, r3, #2
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00e      	beq.n	8006ae6 <HAL_UART_IRQHandler+0xc6>
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d009      	beq.n	8006ae6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ade:	f043 0204 	orr.w	r2, r3, #4
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00e      	beq.n	8006b0e <HAL_UART_IRQHandler+0xee>
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d009      	beq.n	8006b0e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2204      	movs	r2, #4
 8006b00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b06:	f043 0202 	orr.w	r2, r3, #2
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	f003 0308 	and.w	r3, r3, #8
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d013      	beq.n	8006b40 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	f003 0320 	and.w	r3, r3, #32
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d104      	bne.n	8006b2c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d009      	beq.n	8006b40 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2208      	movs	r2, #8
 8006b32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b38:	f043 0208 	orr.w	r2, r3, #8
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00f      	beq.n	8006b6a <HAL_UART_IRQHandler+0x14a>
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00a      	beq.n	8006b6a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b62:	f043 0220 	orr.w	r2, r3, #32
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f000 8093 	beq.w	8006c9a <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00c      	beq.n	8006b98 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	f003 0320 	and.w	r3, r3, #32
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d007      	beq.n	8006b98 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d003      	beq.n	8006b98 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b9c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba8:	2b40      	cmp	r3, #64	; 0x40
 8006baa:	d004      	beq.n	8006bb6 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d031      	beq.n	8006c1a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fd02 	bl	80075c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc6:	2b40      	cmp	r3, #64	; 0x40
 8006bc8:	d123      	bne.n	8006c12 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	689a      	ldr	r2, [r3, #8]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bd8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d013      	beq.n	8006c0a <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006be6:	4a30      	ldr	r2, [pc, #192]	; (8006ca8 <HAL_UART_IRQHandler+0x288>)
 8006be8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fb ff9d 	bl	8002b2e <HAL_DMA_Abort_IT>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d016      	beq.n	8006c28 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006c04:	4610      	mov	r0, r2
 8006c06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c08:	e00e      	b.n	8006c28 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f858 	bl	8006cc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c10:	e00a      	b.n	8006c28 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f854 	bl	8006cc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c18:	e006      	b.n	8006c28 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f850 	bl	8006cc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006c26:	e038      	b.n	8006c9a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c28:	bf00      	nop
    return;
 8006c2a:	e036      	b.n	8006c9a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00d      	beq.n	8006c52 <HAL_UART_IRQHandler+0x232>
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d008      	beq.n	8006c52 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006c48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 fdb1 	bl	80077b2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c50:	e026      	b.n	8006ca0 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00d      	beq.n	8006c78 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d008      	beq.n	8006c78 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d017      	beq.n	8006c9e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	4798      	blx	r3
    }
    return;
 8006c76:	e012      	b.n	8006c9e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00e      	beq.n	8006ca0 <HAL_UART_IRQHandler+0x280>
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d009      	beq.n	8006ca0 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fccd 	bl	800762c <UART_EndTransmit_IT>
    return;
 8006c92:	bf00      	nop
 8006c94:	e004      	b.n	8006ca0 <HAL_UART_IRQHandler+0x280>
      return;
 8006c96:	bf00      	nop
 8006c98:	e002      	b.n	8006ca0 <HAL_UART_IRQHandler+0x280>
    return;
 8006c9a:	bf00      	nop
 8006c9c:	e000      	b.n	8006ca0 <HAL_UART_IRQHandler+0x280>
    return;
 8006c9e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006ca0:	3720      	adds	r7, #32
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	08007601 	.word	0x08007601

08006cac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cd4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006cd8:	b08a      	sub	sp, #40	; 0x28
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	689a      	ldr	r2, [r3, #8]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	431a      	orrs	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	69db      	ldr	r3, [r3, #28]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	4bbc      	ldr	r3, [pc, #752]	; (8006ffc <UART_SetConfig+0x328>)
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	6812      	ldr	r2, [r2, #0]
 8006d10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d12:	430b      	orrs	r3, r1
 8006d14:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	68da      	ldr	r2, [r3, #12]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4ab2      	ldr	r2, [pc, #712]	; (8007000 <UART_SetConfig+0x32c>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d004      	beq.n	8006d46 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a1b      	ldr	r3, [r3, #32]
 8006d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d42:	4313      	orrs	r3, r2
 8006d44:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d56:	430a      	orrs	r2, r1
 8006d58:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4aa9      	ldr	r2, [pc, #676]	; (8007004 <UART_SetConfig+0x330>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d126      	bne.n	8006db2 <UART_SetConfig+0xde>
 8006d64:	4ba8      	ldr	r3, [pc, #672]	; (8007008 <UART_SetConfig+0x334>)
 8006d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d6a:	f003 0303 	and.w	r3, r3, #3
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	d81a      	bhi.n	8006da8 <UART_SetConfig+0xd4>
 8006d72:	a201      	add	r2, pc, #4	; (adr r2, 8006d78 <UART_SetConfig+0xa4>)
 8006d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d78:	08006d89 	.word	0x08006d89
 8006d7c:	08006d99 	.word	0x08006d99
 8006d80:	08006d91 	.word	0x08006d91
 8006d84:	08006da1 	.word	0x08006da1
 8006d88:	2301      	movs	r3, #1
 8006d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d8e:	e0ab      	b.n	8006ee8 <UART_SetConfig+0x214>
 8006d90:	2302      	movs	r3, #2
 8006d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d96:	e0a7      	b.n	8006ee8 <UART_SetConfig+0x214>
 8006d98:	2304      	movs	r3, #4
 8006d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d9e:	e0a3      	b.n	8006ee8 <UART_SetConfig+0x214>
 8006da0:	2308      	movs	r3, #8
 8006da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006da6:	e09f      	b.n	8006ee8 <UART_SetConfig+0x214>
 8006da8:	2310      	movs	r3, #16
 8006daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dae:	bf00      	nop
 8006db0:	e09a      	b.n	8006ee8 <UART_SetConfig+0x214>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a95      	ldr	r2, [pc, #596]	; (800700c <UART_SetConfig+0x338>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d138      	bne.n	8006e2e <UART_SetConfig+0x15a>
 8006dbc:	4b92      	ldr	r3, [pc, #584]	; (8007008 <UART_SetConfig+0x334>)
 8006dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc2:	f003 030c 	and.w	r3, r3, #12
 8006dc6:	2b0c      	cmp	r3, #12
 8006dc8:	d82c      	bhi.n	8006e24 <UART_SetConfig+0x150>
 8006dca:	a201      	add	r2, pc, #4	; (adr r2, 8006dd0 <UART_SetConfig+0xfc>)
 8006dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd0:	08006e05 	.word	0x08006e05
 8006dd4:	08006e25 	.word	0x08006e25
 8006dd8:	08006e25 	.word	0x08006e25
 8006ddc:	08006e25 	.word	0x08006e25
 8006de0:	08006e15 	.word	0x08006e15
 8006de4:	08006e25 	.word	0x08006e25
 8006de8:	08006e25 	.word	0x08006e25
 8006dec:	08006e25 	.word	0x08006e25
 8006df0:	08006e0d 	.word	0x08006e0d
 8006df4:	08006e25 	.word	0x08006e25
 8006df8:	08006e25 	.word	0x08006e25
 8006dfc:	08006e25 	.word	0x08006e25
 8006e00:	08006e1d 	.word	0x08006e1d
 8006e04:	2300      	movs	r3, #0
 8006e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e0a:	e06d      	b.n	8006ee8 <UART_SetConfig+0x214>
 8006e0c:	2302      	movs	r3, #2
 8006e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e12:	e069      	b.n	8006ee8 <UART_SetConfig+0x214>
 8006e14:	2304      	movs	r3, #4
 8006e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e1a:	e065      	b.n	8006ee8 <UART_SetConfig+0x214>
 8006e1c:	2308      	movs	r3, #8
 8006e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e22:	e061      	b.n	8006ee8 <UART_SetConfig+0x214>
 8006e24:	2310      	movs	r3, #16
 8006e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e2a:	bf00      	nop
 8006e2c:	e05c      	b.n	8006ee8 <UART_SetConfig+0x214>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a77      	ldr	r2, [pc, #476]	; (8007010 <UART_SetConfig+0x33c>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d125      	bne.n	8006e84 <UART_SetConfig+0x1b0>
 8006e38:	4b73      	ldr	r3, [pc, #460]	; (8007008 <UART_SetConfig+0x334>)
 8006e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e3e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e42:	2b10      	cmp	r3, #16
 8006e44:	d011      	beq.n	8006e6a <UART_SetConfig+0x196>
 8006e46:	2b10      	cmp	r3, #16
 8006e48:	d802      	bhi.n	8006e50 <UART_SetConfig+0x17c>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d005      	beq.n	8006e5a <UART_SetConfig+0x186>
 8006e4e:	e014      	b.n	8006e7a <UART_SetConfig+0x1a6>
 8006e50:	2b20      	cmp	r3, #32
 8006e52:	d006      	beq.n	8006e62 <UART_SetConfig+0x18e>
 8006e54:	2b30      	cmp	r3, #48	; 0x30
 8006e56:	d00c      	beq.n	8006e72 <UART_SetConfig+0x19e>
 8006e58:	e00f      	b.n	8006e7a <UART_SetConfig+0x1a6>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e60:	e042      	b.n	8006ee8 <UART_SetConfig+0x214>
 8006e62:	2302      	movs	r3, #2
 8006e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e68:	e03e      	b.n	8006ee8 <UART_SetConfig+0x214>
 8006e6a:	2304      	movs	r3, #4
 8006e6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e70:	e03a      	b.n	8006ee8 <UART_SetConfig+0x214>
 8006e72:	2308      	movs	r3, #8
 8006e74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e78:	e036      	b.n	8006ee8 <UART_SetConfig+0x214>
 8006e7a:	2310      	movs	r3, #16
 8006e7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e80:	bf00      	nop
 8006e82:	e031      	b.n	8006ee8 <UART_SetConfig+0x214>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a5d      	ldr	r2, [pc, #372]	; (8007000 <UART_SetConfig+0x32c>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d129      	bne.n	8006ee2 <UART_SetConfig+0x20e>
 8006e8e:	4b5e      	ldr	r3, [pc, #376]	; (8007008 <UART_SetConfig+0x334>)
 8006e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e9c:	d014      	beq.n	8006ec8 <UART_SetConfig+0x1f4>
 8006e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ea2:	d802      	bhi.n	8006eaa <UART_SetConfig+0x1d6>
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d007      	beq.n	8006eb8 <UART_SetConfig+0x1e4>
 8006ea8:	e016      	b.n	8006ed8 <UART_SetConfig+0x204>
 8006eaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eae:	d007      	beq.n	8006ec0 <UART_SetConfig+0x1ec>
 8006eb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006eb4:	d00c      	beq.n	8006ed0 <UART_SetConfig+0x1fc>
 8006eb6:	e00f      	b.n	8006ed8 <UART_SetConfig+0x204>
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ebe:	e013      	b.n	8006ee8 <UART_SetConfig+0x214>
 8006ec0:	2302      	movs	r3, #2
 8006ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ec6:	e00f      	b.n	8006ee8 <UART_SetConfig+0x214>
 8006ec8:	2304      	movs	r3, #4
 8006eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ece:	e00b      	b.n	8006ee8 <UART_SetConfig+0x214>
 8006ed0:	2308      	movs	r3, #8
 8006ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ed6:	e007      	b.n	8006ee8 <UART_SetConfig+0x214>
 8006ed8:	2310      	movs	r3, #16
 8006eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ede:	bf00      	nop
 8006ee0:	e002      	b.n	8006ee8 <UART_SetConfig+0x214>
 8006ee2:	2310      	movs	r3, #16
 8006ee4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a44      	ldr	r2, [pc, #272]	; (8007000 <UART_SetConfig+0x32c>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	f040 80fb 	bne.w	80070ea <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ef4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ef8:	2b08      	cmp	r3, #8
 8006efa:	d824      	bhi.n	8006f46 <UART_SetConfig+0x272>
 8006efc:	a201      	add	r2, pc, #4	; (adr r2, 8006f04 <UART_SetConfig+0x230>)
 8006efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f02:	bf00      	nop
 8006f04:	08006f29 	.word	0x08006f29
 8006f08:	08006f47 	.word	0x08006f47
 8006f0c:	08006f31 	.word	0x08006f31
 8006f10:	08006f47 	.word	0x08006f47
 8006f14:	08006f37 	.word	0x08006f37
 8006f18:	08006f47 	.word	0x08006f47
 8006f1c:	08006f47 	.word	0x08006f47
 8006f20:	08006f47 	.word	0x08006f47
 8006f24:	08006f3f 	.word	0x08006f3f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006f28:	f7fe fbd8 	bl	80056dc <HAL_RCC_GetPCLK1Freq>
 8006f2c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f2e:	e00d      	b.n	8006f4c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006f30:	4b38      	ldr	r3, [pc, #224]	; (8007014 <UART_SetConfig+0x340>)
 8006f32:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f34:	e00a      	b.n	8006f4c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8006f36:	f7fe fb3b 	bl	80055b0 <HAL_RCC_GetSysClockFreq>
 8006f3a:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f3c:	e006      	b.n	8006f4c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f42:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f44:	e002      	b.n	8006f4c <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	76fb      	strb	r3, [r7, #27]
        break;
 8006f4a:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f000 81c8 	beq.w	80072e4 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685a      	ldr	r2, [r3, #4]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	005b      	lsls	r3, r3, #1
 8006f5c:	4413      	add	r3, r2
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d305      	bcc.n	8006f70 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d902      	bls.n	8006f76 <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	76fb      	strb	r3, [r7, #27]
 8006f74:	e1b6      	b.n	80072e4 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 8006f76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f7a:	2b08      	cmp	r3, #8
 8006f7c:	f200 80a2 	bhi.w	80070c4 <UART_SetConfig+0x3f0>
 8006f80:	a201      	add	r2, pc, #4	; (adr r2, 8006f88 <UART_SetConfig+0x2b4>)
 8006f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f86:	bf00      	nop
 8006f88:	08006fad 	.word	0x08006fad
 8006f8c:	080070c5 	.word	0x080070c5
 8006f90:	08007019 	.word	0x08007019
 8006f94:	080070c5 	.word	0x080070c5
 8006f98:	0800704d 	.word	0x0800704d
 8006f9c:	080070c5 	.word	0x080070c5
 8006fa0:	080070c5 	.word	0x080070c5
 8006fa4:	080070c5 	.word	0x080070c5
 8006fa8:	0800709b 	.word	0x0800709b
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8006fac:	f7fe fb96 	bl	80056dc <HAL_RCC_GetPCLK1Freq>
 8006fb0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	f04f 0200 	mov.w	r2, #0
 8006fba:	f04f 0300 	mov.w	r3, #0
 8006fbe:	f04f 0400 	mov.w	r4, #0
 8006fc2:	0214      	lsls	r4, r2, #8
 8006fc4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006fc8:	020b      	lsls	r3, r1, #8
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	6852      	ldr	r2, [r2, #4]
 8006fce:	0852      	lsrs	r2, r2, #1
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	f04f 0200 	mov.w	r2, #0
 8006fd6:	eb13 0b01 	adds.w	fp, r3, r1
 8006fda:	eb44 0c02 	adc.w	ip, r4, r2
 8006fde:	4658      	mov	r0, fp
 8006fe0:	4661      	mov	r1, ip
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f04f 0400 	mov.w	r4, #0
 8006fea:	461a      	mov	r2, r3
 8006fec:	4623      	mov	r3, r4
 8006fee:	f7f9 fd95 	bl	8000b1c <__aeabi_uldivmod>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	460c      	mov	r4, r1
 8006ff6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006ff8:	e067      	b.n	80070ca <UART_SetConfig+0x3f6>
 8006ffa:	bf00      	nop
 8006ffc:	efff69f3 	.word	0xefff69f3
 8007000:	40008000 	.word	0x40008000
 8007004:	40013800 	.word	0x40013800
 8007008:	40021000 	.word	0x40021000
 800700c:	40004400 	.word	0x40004400
 8007010:	40004800 	.word	0x40004800
 8007014:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	085b      	lsrs	r3, r3, #1
 800701e:	f04f 0400 	mov.w	r4, #0
 8007022:	49ae      	ldr	r1, [pc, #696]	; (80072dc <UART_SetConfig+0x608>)
 8007024:	f04f 0200 	mov.w	r2, #0
 8007028:	eb13 0b01 	adds.w	fp, r3, r1
 800702c:	eb44 0c02 	adc.w	ip, r4, r2
 8007030:	4658      	mov	r0, fp
 8007032:	4661      	mov	r1, ip
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f04f 0400 	mov.w	r4, #0
 800703c:	461a      	mov	r2, r3
 800703e:	4623      	mov	r3, r4
 8007040:	f7f9 fd6c 	bl	8000b1c <__aeabi_uldivmod>
 8007044:	4603      	mov	r3, r0
 8007046:	460c      	mov	r4, r1
 8007048:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800704a:	e03e      	b.n	80070ca <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800704c:	f7fe fab0 	bl	80055b0 <HAL_RCC_GetSysClockFreq>
 8007050:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	4619      	mov	r1, r3
 8007056:	f04f 0200 	mov.w	r2, #0
 800705a:	f04f 0300 	mov.w	r3, #0
 800705e:	f04f 0400 	mov.w	r4, #0
 8007062:	0214      	lsls	r4, r2, #8
 8007064:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007068:	020b      	lsls	r3, r1, #8
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	6852      	ldr	r2, [r2, #4]
 800706e:	0852      	lsrs	r2, r2, #1
 8007070:	4611      	mov	r1, r2
 8007072:	f04f 0200 	mov.w	r2, #0
 8007076:	eb13 0b01 	adds.w	fp, r3, r1
 800707a:	eb44 0c02 	adc.w	ip, r4, r2
 800707e:	4658      	mov	r0, fp
 8007080:	4661      	mov	r1, ip
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f04f 0400 	mov.w	r4, #0
 800708a:	461a      	mov	r2, r3
 800708c:	4623      	mov	r3, r4
 800708e:	f7f9 fd45 	bl	8000b1c <__aeabi_uldivmod>
 8007092:	4603      	mov	r3, r0
 8007094:	460c      	mov	r4, r1
 8007096:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007098:	e017      	b.n	80070ca <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	085b      	lsrs	r3, r3, #1
 80070a0:	f04f 0400 	mov.w	r4, #0
 80070a4:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80070a8:	f144 0100 	adc.w	r1, r4, #0
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	f04f 0400 	mov.w	r4, #0
 80070b4:	461a      	mov	r2, r3
 80070b6:	4623      	mov	r3, r4
 80070b8:	f7f9 fd30 	bl	8000b1c <__aeabi_uldivmod>
 80070bc:	4603      	mov	r3, r0
 80070be:	460c      	mov	r4, r1
 80070c0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80070c2:	e002      	b.n	80070ca <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	76fb      	strb	r3, [r7, #27]
            break;
 80070c8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070d0:	d308      	bcc.n	80070e4 <UART_SetConfig+0x410>
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070d8:	d204      	bcs.n	80070e4 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	69fa      	ldr	r2, [r7, #28]
 80070e0:	60da      	str	r2, [r3, #12]
 80070e2:	e0ff      	b.n	80072e4 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	76fb      	strb	r3, [r7, #27]
 80070e8:	e0fc      	b.n	80072e4 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070f2:	f040 8083 	bne.w	80071fc <UART_SetConfig+0x528>
  {
    switch (clocksource)
 80070f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070fa:	2b08      	cmp	r3, #8
 80070fc:	d85e      	bhi.n	80071bc <UART_SetConfig+0x4e8>
 80070fe:	a201      	add	r2, pc, #4	; (adr r2, 8007104 <UART_SetConfig+0x430>)
 8007100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007104:	08007129 	.word	0x08007129
 8007108:	08007149 	.word	0x08007149
 800710c:	08007169 	.word	0x08007169
 8007110:	080071bd 	.word	0x080071bd
 8007114:	08007185 	.word	0x08007185
 8007118:	080071bd 	.word	0x080071bd
 800711c:	080071bd 	.word	0x080071bd
 8007120:	080071bd 	.word	0x080071bd
 8007124:	080071a5 	.word	0x080071a5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007128:	f7fe fad8 	bl	80056dc <HAL_RCC_GetPCLK1Freq>
 800712c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	005a      	lsls	r2, r3, #1
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	085b      	lsrs	r3, r3, #1
 8007138:	441a      	add	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007142:	b29b      	uxth	r3, r3
 8007144:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007146:	e03c      	b.n	80071c2 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007148:	f7fe fade 	bl	8005708 <HAL_RCC_GetPCLK2Freq>
 800714c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	005a      	lsls	r2, r3, #1
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	085b      	lsrs	r3, r3, #1
 8007158:	441a      	add	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007162:	b29b      	uxth	r3, r3
 8007164:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007166:	e02c      	b.n	80071c2 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	085b      	lsrs	r3, r3, #1
 800716e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8007172:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	6852      	ldr	r2, [r2, #4]
 800717a:	fbb3 f3f2 	udiv	r3, r3, r2
 800717e:	b29b      	uxth	r3, r3
 8007180:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007182:	e01e      	b.n	80071c2 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007184:	f7fe fa14 	bl	80055b0 <HAL_RCC_GetSysClockFreq>
 8007188:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	005a      	lsls	r2, r3, #1
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	085b      	lsrs	r3, r3, #1
 8007194:	441a      	add	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	fbb2 f3f3 	udiv	r3, r2, r3
 800719e:	b29b      	uxth	r3, r3
 80071a0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80071a2:	e00e      	b.n	80071c2 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	085b      	lsrs	r3, r3, #1
 80071aa:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80071ba:	e002      	b.n	80071c2 <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	76fb      	strb	r3, [r7, #27]
        break;
 80071c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	2b0f      	cmp	r3, #15
 80071c6:	d916      	bls.n	80071f6 <UART_SetConfig+0x522>
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071ce:	d212      	bcs.n	80071f6 <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	f023 030f 	bic.w	r3, r3, #15
 80071d8:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	085b      	lsrs	r3, r3, #1
 80071de:	b29b      	uxth	r3, r3
 80071e0:	f003 0307 	and.w	r3, r3, #7
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	89fb      	ldrh	r3, [r7, #14]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	89fa      	ldrh	r2, [r7, #14]
 80071f2:	60da      	str	r2, [r3, #12]
 80071f4:	e076      	b.n	80072e4 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	76fb      	strb	r3, [r7, #27]
 80071fa:	e073      	b.n	80072e4 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 80071fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007200:	2b08      	cmp	r3, #8
 8007202:	d85c      	bhi.n	80072be <UART_SetConfig+0x5ea>
 8007204:	a201      	add	r2, pc, #4	; (adr r2, 800720c <UART_SetConfig+0x538>)
 8007206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720a:	bf00      	nop
 800720c:	08007231 	.word	0x08007231
 8007210:	0800724f 	.word	0x0800724f
 8007214:	0800726d 	.word	0x0800726d
 8007218:	080072bf 	.word	0x080072bf
 800721c:	08007289 	.word	0x08007289
 8007220:	080072bf 	.word	0x080072bf
 8007224:	080072bf 	.word	0x080072bf
 8007228:	080072bf 	.word	0x080072bf
 800722c:	080072a7 	.word	0x080072a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007230:	f7fe fa54 	bl	80056dc <HAL_RCC_GetPCLK1Freq>
 8007234:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	085a      	lsrs	r2, r3, #1
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	441a      	add	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	fbb2 f3f3 	udiv	r3, r2, r3
 8007248:	b29b      	uxth	r3, r3
 800724a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800724c:	e03a      	b.n	80072c4 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800724e:	f7fe fa5b 	bl	8005708 <HAL_RCC_GetPCLK2Freq>
 8007252:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	085a      	lsrs	r2, r3, #1
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	441a      	add	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	fbb2 f3f3 	udiv	r3, r2, r3
 8007266:	b29b      	uxth	r3, r3
 8007268:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800726a:	e02b      	b.n	80072c4 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	085b      	lsrs	r3, r3, #1
 8007272:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8007276:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	6852      	ldr	r2, [r2, #4]
 800727e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007282:	b29b      	uxth	r3, r3
 8007284:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007286:	e01d      	b.n	80072c4 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007288:	f7fe f992 	bl	80055b0 <HAL_RCC_GetSysClockFreq>
 800728c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	085a      	lsrs	r2, r3, #1
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	441a      	add	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80072a4:	e00e      	b.n	80072c4 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	085b      	lsrs	r3, r3, #1
 80072ac:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80072bc:	e002      	b.n	80072c4 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	76fb      	strb	r3, [r7, #27]
        break;
 80072c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	2b0f      	cmp	r3, #15
 80072c8:	d90a      	bls.n	80072e0 <UART_SetConfig+0x60c>
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072d0:	d206      	bcs.n	80072e0 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	69fa      	ldr	r2, [r7, #28]
 80072d8:	60da      	str	r2, [r3, #12]
 80072da:	e003      	b.n	80072e4 <UART_SetConfig+0x610>
 80072dc:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80072f0:	7efb      	ldrb	r3, [r7, #27]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3728      	adds	r7, #40	; 0x28
 80072f6:	46bd      	mov	sp, r7
 80072f8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080072fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	f003 0301 	and.w	r3, r3, #1
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00a      	beq.n	8007326 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	430a      	orrs	r2, r1
 8007324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732a:	f003 0302 	and.w	r3, r3, #2
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00a      	beq.n	8007348 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	430a      	orrs	r2, r1
 8007346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734c:	f003 0304 	and.w	r3, r3, #4
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00a      	beq.n	800736a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	430a      	orrs	r2, r1
 8007368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736e:	f003 0308 	and.w	r3, r3, #8
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00a      	beq.n	800738c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	430a      	orrs	r2, r1
 800738a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007390:	f003 0310 	and.w	r3, r3, #16
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00a      	beq.n	80073ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	430a      	orrs	r2, r1
 80073ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b2:	f003 0320 	and.w	r3, r3, #32
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00a      	beq.n	80073d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	430a      	orrs	r2, r1
 80073ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d01a      	beq.n	8007412 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	430a      	orrs	r2, r1
 80073f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073fa:	d10a      	bne.n	8007412 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	430a      	orrs	r2, r1
 8007410:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00a      	beq.n	8007434 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	430a      	orrs	r2, r1
 8007432:	605a      	str	r2, [r3, #4]
  }
}
 8007434:	bf00      	nop
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	af02      	add	r7, sp, #8
 8007446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800744e:	f7fb fa2f 	bl	80028b0 <HAL_GetTick>
 8007452:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0308 	and.w	r3, r3, #8
 800745e:	2b08      	cmp	r3, #8
 8007460:	d10e      	bne.n	8007480 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007462:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f82a 	bl	80074ca <UART_WaitOnFlagUntilTimeout>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e020      	b.n	80074c2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 0304 	and.w	r3, r3, #4
 800748a:	2b04      	cmp	r3, #4
 800748c:	d10e      	bne.n	80074ac <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800748e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f814 	bl	80074ca <UART_WaitOnFlagUntilTimeout>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e00a      	b.n	80074c2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2220      	movs	r2, #32
 80074b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2220      	movs	r2, #32
 80074b6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b084      	sub	sp, #16
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	60f8      	str	r0, [r7, #12]
 80074d2:	60b9      	str	r1, [r7, #8]
 80074d4:	603b      	str	r3, [r7, #0]
 80074d6:	4613      	mov	r3, r2
 80074d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074da:	e05d      	b.n	8007598 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e2:	d059      	beq.n	8007598 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074e4:	f7fb f9e4 	bl	80028b0 <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d302      	bcc.n	80074fa <UART_WaitOnFlagUntilTimeout+0x30>
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d11b      	bne.n	8007532 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007508:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	689a      	ldr	r2, [r3, #8]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f022 0201 	bic.w	r2, r2, #1
 8007518:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2220      	movs	r2, #32
 800751e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2220      	movs	r2, #32
 8007524:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800752e:	2303      	movs	r3, #3
 8007530:	e042      	b.n	80075b8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 0304 	and.w	r3, r3, #4
 800753c:	2b00      	cmp	r3, #0
 800753e:	d02b      	beq.n	8007598 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800754a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800754e:	d123      	bne.n	8007598 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007558:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007568:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	689a      	ldr	r2, [r3, #8]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f022 0201 	bic.w	r2, r2, #1
 8007578:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2220      	movs	r2, #32
 800757e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2220      	movs	r2, #32
 8007584:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2220      	movs	r2, #32
 800758a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e00f      	b.n	80075b8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	69da      	ldr	r2, [r3, #28]
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	4013      	ands	r3, r2
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	bf0c      	ite	eq
 80075a8:	2301      	moveq	r3, #1
 80075aa:	2300      	movne	r3, #0
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	461a      	mov	r2, r3
 80075b0:	79fb      	ldrb	r3, [r7, #7]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d092      	beq.n	80074dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80075d6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	689a      	ldr	r2, [r3, #8]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 0201 	bic.w	r2, r2, #1
 80075e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2220      	movs	r2, #32
 80075ec:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	661a      	str	r2, [r3, #96]	; 0x60
}
 80075f4:	bf00      	nop
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f7ff fb4e 	bl	8006cc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007624:	bf00      	nop
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007642:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2220      	movs	r2, #32
 8007648:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f7ff fb2b 	bl	8006cac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007656:	bf00      	nop
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b084      	sub	sp, #16
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800766c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007672:	2b22      	cmp	r3, #34	; 0x22
 8007674:	d13a      	bne.n	80076ec <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800767c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800767e:	89bb      	ldrh	r3, [r7, #12]
 8007680:	b2d9      	uxtb	r1, r3
 8007682:	89fb      	ldrh	r3, [r7, #14]
 8007684:	b2da      	uxtb	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800768a:	400a      	ands	r2, r1
 800768c:	b2d2      	uxtb	r2, r2
 800768e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007694:	1c5a      	adds	r2, r3, #1
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	3b01      	subs	r3, #1
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d123      	bne.n	8007700 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80076c6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	689a      	ldr	r2, [r3, #8]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f022 0201 	bic.w	r2, r2, #1
 80076d6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2220      	movs	r2, #32
 80076dc:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7fa fe7f 	bl	80023e8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076ea:	e009      	b.n	8007700 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	8b1b      	ldrh	r3, [r3, #24]
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f042 0208 	orr.w	r2, r2, #8
 80076fc:	b292      	uxth	r2, r2
 80076fe:	831a      	strh	r2, [r3, #24]
}
 8007700:	bf00      	nop
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007716:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800771c:	2b22      	cmp	r3, #34	; 0x22
 800771e:	d13a      	bne.n	8007796 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007726:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800772c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800772e:	89ba      	ldrh	r2, [r7, #12]
 8007730:	89fb      	ldrh	r3, [r7, #14]
 8007732:	4013      	ands	r3, r2
 8007734:	b29a      	uxth	r2, r3
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800773e:	1c9a      	adds	r2, r3, #2
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800774a:	b29b      	uxth	r3, r3
 800774c:	3b01      	subs	r3, #1
 800774e:	b29a      	uxth	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800775c:	b29b      	uxth	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d123      	bne.n	80077aa <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007770:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	689a      	ldr	r2, [r3, #8]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f022 0201 	bic.w	r2, r2, #1
 8007780:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2220      	movs	r2, #32
 8007786:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7fa fe2a 	bl	80023e8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007794:	e009      	b.n	80077aa <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	8b1b      	ldrh	r3, [r3, #24]
 800779c:	b29a      	uxth	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f042 0208 	orr.w	r2, r2, #8
 80077a6:	b292      	uxth	r2, r2
 80077a8:	831a      	strh	r2, [r3, #24]
}
 80077aa:	bf00      	nop
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b083      	sub	sp, #12
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80077ba:	bf00      	nop
 80077bc:	370c      	adds	r7, #12
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80077c6:	b084      	sub	sp, #16
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	f107 0014 	add.w	r0, r7, #20
 80077d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	b004      	add	sp, #16
 80077e6:	4770      	bx	lr

080077e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80077f0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80077f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	b29b      	uxth	r3, r3
 8007802:	4313      	orrs	r3, r2
 8007804:	b29a      	uxth	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800781a:	b480      	push	{r7}
 800781c:	b085      	sub	sp, #20
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007822:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007826:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800782e:	b29a      	uxth	r2, r3
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	b29b      	uxth	r3, r3
 8007834:	43db      	mvns	r3, r3
 8007836:	b29b      	uxth	r3, r3
 8007838:	4013      	ands	r3, r2
 800783a:	b29a      	uxth	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	460b      	mov	r3, r1
 800785a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800786a:	b084      	sub	sp, #16
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	f107 0014 	add.w	r0, r7, #20
 8007878:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7ff ffa3 	bl	80077e8 <USB_EnableGlobalInt>

  return HAL_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3708      	adds	r7, #8
 80078a8:	46bd      	mov	sp, r7
 80078aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078ae:	b004      	add	sp, #16
 80078b0:	4770      	bx	lr
	...

080078b4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078b4:	b490      	push	{r4, r7}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80078be:	2300      	movs	r3, #0
 80078c0:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4413      	add	r3, r2
 80078cc:	881b      	ldrh	r3, [r3, #0]
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80078d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078d8:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	78db      	ldrb	r3, [r3, #3]
 80078de:	2b03      	cmp	r3, #3
 80078e0:	d819      	bhi.n	8007916 <USB_ActivateEndpoint+0x62>
 80078e2:	a201      	add	r2, pc, #4	; (adr r2, 80078e8 <USB_ActivateEndpoint+0x34>)
 80078e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e8:	080078f9 	.word	0x080078f9
 80078ec:	0800790d 	.word	0x0800790d
 80078f0:	0800791d 	.word	0x0800791d
 80078f4:	08007903 	.word	0x08007903
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80078f8:	89bb      	ldrh	r3, [r7, #12]
 80078fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80078fe:	81bb      	strh	r3, [r7, #12]
      break;
 8007900:	e00d      	b.n	800791e <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007902:	89bb      	ldrh	r3, [r7, #12]
 8007904:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007908:	81bb      	strh	r3, [r7, #12]
      break;
 800790a:	e008      	b.n	800791e <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800790c:	89bb      	ldrh	r3, [r7, #12]
 800790e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007912:	81bb      	strh	r3, [r7, #12]
      break;
 8007914:	e003      	b.n	800791e <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	73fb      	strb	r3, [r7, #15]
      break;
 800791a:	e000      	b.n	800791e <USB_ActivateEndpoint+0x6a>
      break;
 800791c:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	441a      	add	r2, r3
 8007928:	89bb      	ldrh	r3, [r7, #12]
 800792a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800792e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800793a:	b29b      	uxth	r3, r3
 800793c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	881b      	ldrh	r3, [r3, #0]
 800794a:	b29b      	uxth	r3, r3
 800794c:	b21b      	sxth	r3, r3
 800794e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007956:	b21a      	sxth	r2, r3
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	b21b      	sxth	r3, r3
 800795e:	4313      	orrs	r3, r2
 8007960:	b21b      	sxth	r3, r3
 8007962:	b29c      	uxth	r4, r3
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	441a      	add	r2, r3
 800796e:	4b8a      	ldr	r3, [pc, #552]	; (8007b98 <USB_ActivateEndpoint+0x2e4>)
 8007970:	4323      	orrs	r3, r4
 8007972:	b29b      	uxth	r3, r3
 8007974:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	7b1b      	ldrb	r3, [r3, #12]
 800797a:	2b00      	cmp	r3, #0
 800797c:	f040 8112 	bne.w	8007ba4 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	785b      	ldrb	r3, [r3, #1]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d067      	beq.n	8007a58 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007988:	687c      	ldr	r4, [r7, #4]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007990:	b29b      	uxth	r3, r3
 8007992:	441c      	add	r4, r3
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	00db      	lsls	r3, r3, #3
 800799a:	4423      	add	r3, r4
 800799c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079a0:	461c      	mov	r4, r3
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	88db      	ldrh	r3, [r3, #6]
 80079a6:	085b      	lsrs	r3, r3, #1
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	b29c      	uxth	r4, r3
 80079be:	4623      	mov	r3, r4
 80079c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d014      	beq.n	80079f2 <USB_ActivateEndpoint+0x13e>
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4413      	add	r3, r2
 80079d2:	881b      	ldrh	r3, [r3, #0]
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079de:	b29c      	uxth	r4, r3
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	441a      	add	r2, r3
 80079ea:	4b6c      	ldr	r3, [pc, #432]	; (8007b9c <USB_ActivateEndpoint+0x2e8>)
 80079ec:	4323      	orrs	r3, r4
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	78db      	ldrb	r3, [r3, #3]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d018      	beq.n	8007a2c <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	881b      	ldrh	r3, [r3, #0]
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a10:	b29c      	uxth	r4, r3
 8007a12:	f084 0320 	eor.w	r3, r4, #32
 8007a16:	b29c      	uxth	r4, r3
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	441a      	add	r2, r3
 8007a22:	4b5d      	ldr	r3, [pc, #372]	; (8007b98 <USB_ActivateEndpoint+0x2e4>)
 8007a24:	4323      	orrs	r3, r4
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	8013      	strh	r3, [r2, #0]
 8007a2a:	e22b      	b.n	8007e84 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	4413      	add	r3, r2
 8007a36:	881b      	ldrh	r3, [r3, #0]
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a42:	b29c      	uxth	r4, r3
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	441a      	add	r2, r3
 8007a4e:	4b52      	ldr	r3, [pc, #328]	; (8007b98 <USB_ActivateEndpoint+0x2e4>)
 8007a50:	4323      	orrs	r3, r4
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	8013      	strh	r3, [r2, #0]
 8007a56:	e215      	b.n	8007e84 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007a58:	687c      	ldr	r4, [r7, #4]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	441c      	add	r4, r3
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	00db      	lsls	r3, r3, #3
 8007a6a:	4423      	add	r3, r4
 8007a6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a70:	461c      	mov	r4, r3
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	88db      	ldrh	r3, [r3, #6]
 8007a76:	085b      	lsrs	r3, r3, #1
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	005b      	lsls	r3, r3, #1
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007a80:	687c      	ldr	r4, [r7, #4]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	441c      	add	r4, r3
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	00db      	lsls	r3, r3, #3
 8007a92:	4423      	add	r3, r4
 8007a94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a98:	461c      	mov	r4, r3
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10e      	bne.n	8007ac0 <USB_ActivateEndpoint+0x20c>
 8007aa2:	8823      	ldrh	r3, [r4, #0]
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	8023      	strh	r3, [r4, #0]
 8007aae:	8823      	ldrh	r3, [r4, #0]
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	8023      	strh	r3, [r4, #0]
 8007abe:	e02d      	b.n	8007b1c <USB_ActivateEndpoint+0x268>
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	2b3e      	cmp	r3, #62	; 0x3e
 8007ac6:	d812      	bhi.n	8007aee <USB_ActivateEndpoint+0x23a>
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	085b      	lsrs	r3, r3, #1
 8007ace:	60bb      	str	r3, [r7, #8]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	f003 0301 	and.w	r3, r3, #1
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <USB_ActivateEndpoint+0x22e>
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	60bb      	str	r3, [r7, #8]
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	029b      	lsls	r3, r3, #10
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	8023      	strh	r3, [r4, #0]
 8007aec:	e016      	b.n	8007b1c <USB_ActivateEndpoint+0x268>
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	095b      	lsrs	r3, r3, #5
 8007af4:	60bb      	str	r3, [r7, #8]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	f003 031f 	and.w	r3, r3, #31
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d102      	bne.n	8007b08 <USB_ActivateEndpoint+0x254>
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	3b01      	subs	r3, #1
 8007b06:	60bb      	str	r3, [r7, #8]
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	029b      	lsls	r3, r3, #10
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	881b      	ldrh	r3, [r3, #0]
 8007b28:	b29c      	uxth	r4, r3
 8007b2a:	4623      	mov	r3, r4
 8007b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d014      	beq.n	8007b5e <USB_ActivateEndpoint+0x2aa>
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4413      	add	r3, r2
 8007b3e:	881b      	ldrh	r3, [r3, #0]
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b4a:	b29c      	uxth	r4, r3
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	441a      	add	r2, r3
 8007b56:	4b12      	ldr	r3, [pc, #72]	; (8007ba0 <USB_ActivateEndpoint+0x2ec>)
 8007b58:	4323      	orrs	r3, r4
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4413      	add	r3, r2
 8007b68:	881b      	ldrh	r3, [r3, #0]
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b74:	b29c      	uxth	r4, r3
 8007b76:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007b7a:	b29c      	uxth	r4, r3
 8007b7c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007b80:	b29c      	uxth	r4, r3
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	441a      	add	r2, r3
 8007b8c:	4b02      	ldr	r3, [pc, #8]	; (8007b98 <USB_ActivateEndpoint+0x2e4>)
 8007b8e:	4323      	orrs	r3, r4
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	8013      	strh	r3, [r2, #0]
 8007b94:	e176      	b.n	8007e84 <USB_ActivateEndpoint+0x5d0>
 8007b96:	bf00      	nop
 8007b98:	ffff8080 	.word	0xffff8080
 8007b9c:	ffff80c0 	.word	0xffff80c0
 8007ba0:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	4413      	add	r3, r2
 8007bae:	881b      	ldrh	r3, [r3, #0]
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bba:	b29c      	uxth	r4, r3
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	441a      	add	r2, r3
 8007bc6:	4b96      	ldr	r3, [pc, #600]	; (8007e20 <USB_ActivateEndpoint+0x56c>)
 8007bc8:	4323      	orrs	r3, r4
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007bce:	687c      	ldr	r4, [r7, #4]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	441c      	add	r4, r3
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	4423      	add	r3, r4
 8007be2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007be6:	461c      	mov	r4, r3
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	891b      	ldrh	r3, [r3, #8]
 8007bec:	085b      	lsrs	r3, r3, #1
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	005b      	lsls	r3, r3, #1
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	8023      	strh	r3, [r4, #0]
 8007bf6:	687c      	ldr	r4, [r7, #4]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	441c      	add	r4, r3
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	00db      	lsls	r3, r3, #3
 8007c08:	4423      	add	r3, r4
 8007c0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c0e:	461c      	mov	r4, r3
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	895b      	ldrh	r3, [r3, #10]
 8007c14:	085b      	lsrs	r3, r3, #1
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	005b      	lsls	r3, r3, #1
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	785b      	ldrb	r3, [r3, #1]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f040 8088 	bne.w	8007d38 <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4413      	add	r3, r2
 8007c32:	881b      	ldrh	r3, [r3, #0]
 8007c34:	b29c      	uxth	r4, r3
 8007c36:	4623      	mov	r3, r4
 8007c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d014      	beq.n	8007c6a <USB_ActivateEndpoint+0x3b6>
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	881b      	ldrh	r3, [r3, #0]
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c56:	b29c      	uxth	r4, r3
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	441a      	add	r2, r3
 8007c62:	4b70      	ldr	r3, [pc, #448]	; (8007e24 <USB_ActivateEndpoint+0x570>)
 8007c64:	4323      	orrs	r3, r4
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4413      	add	r3, r2
 8007c74:	881b      	ldrh	r3, [r3, #0]
 8007c76:	b29c      	uxth	r4, r3
 8007c78:	4623      	mov	r3, r4
 8007c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d014      	beq.n	8007cac <USB_ActivateEndpoint+0x3f8>
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	881b      	ldrh	r3, [r3, #0]
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c98:	b29c      	uxth	r4, r3
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	441a      	add	r2, r3
 8007ca4:	4b60      	ldr	r3, [pc, #384]	; (8007e28 <USB_ActivateEndpoint+0x574>)
 8007ca6:	4323      	orrs	r3, r4
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4413      	add	r3, r2
 8007cb6:	881b      	ldrh	r3, [r3, #0]
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cc2:	b29c      	uxth	r4, r3
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	441a      	add	r2, r3
 8007cce:	4b56      	ldr	r3, [pc, #344]	; (8007e28 <USB_ActivateEndpoint+0x574>)
 8007cd0:	4323      	orrs	r3, r4
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	4413      	add	r3, r2
 8007ce0:	881b      	ldrh	r3, [r3, #0]
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cec:	b29c      	uxth	r4, r3
 8007cee:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007cf2:	b29c      	uxth	r4, r3
 8007cf4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007cf8:	b29c      	uxth	r4, r3
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	441a      	add	r2, r3
 8007d04:	4b49      	ldr	r3, [pc, #292]	; (8007e2c <USB_ActivateEndpoint+0x578>)
 8007d06:	4323      	orrs	r3, r4
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	4413      	add	r3, r2
 8007d16:	881b      	ldrh	r3, [r3, #0]
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d22:	b29c      	uxth	r4, r3
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	441a      	add	r2, r3
 8007d2e:	4b3f      	ldr	r3, [pc, #252]	; (8007e2c <USB_ActivateEndpoint+0x578>)
 8007d30:	4323      	orrs	r3, r4
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	8013      	strh	r3, [r2, #0]
 8007d36:	e0a5      	b.n	8007e84 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4413      	add	r3, r2
 8007d42:	881b      	ldrh	r3, [r3, #0]
 8007d44:	b29c      	uxth	r4, r3
 8007d46:	4623      	mov	r3, r4
 8007d48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d014      	beq.n	8007d7a <USB_ActivateEndpoint+0x4c6>
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	4413      	add	r3, r2
 8007d5a:	881b      	ldrh	r3, [r3, #0]
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d66:	b29c      	uxth	r4, r3
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	441a      	add	r2, r3
 8007d72:	4b2c      	ldr	r3, [pc, #176]	; (8007e24 <USB_ActivateEndpoint+0x570>)
 8007d74:	4323      	orrs	r3, r4
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	881b      	ldrh	r3, [r3, #0]
 8007d86:	b29c      	uxth	r4, r3
 8007d88:	4623      	mov	r3, r4
 8007d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d014      	beq.n	8007dbc <USB_ActivateEndpoint+0x508>
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	4413      	add	r3, r2
 8007d9c:	881b      	ldrh	r3, [r3, #0]
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007da8:	b29c      	uxth	r4, r3
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	441a      	add	r2, r3
 8007db4:	4b1c      	ldr	r3, [pc, #112]	; (8007e28 <USB_ActivateEndpoint+0x574>)
 8007db6:	4323      	orrs	r3, r4
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4413      	add	r3, r2
 8007dc6:	881b      	ldrh	r3, [r3, #0]
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd2:	b29c      	uxth	r4, r3
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	441a      	add	r2, r3
 8007dde:	4b11      	ldr	r3, [pc, #68]	; (8007e24 <USB_ActivateEndpoint+0x570>)
 8007de0:	4323      	orrs	r3, r4
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	78db      	ldrb	r3, [r3, #3]
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d020      	beq.n	8007e30 <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4413      	add	r3, r2
 8007df8:	881b      	ldrh	r3, [r3, #0]
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e04:	b29c      	uxth	r4, r3
 8007e06:	f084 0320 	eor.w	r3, r4, #32
 8007e0a:	b29c      	uxth	r4, r3
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	441a      	add	r2, r3
 8007e16:	4b05      	ldr	r3, [pc, #20]	; (8007e2c <USB_ActivateEndpoint+0x578>)
 8007e18:	4323      	orrs	r3, r4
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	8013      	strh	r3, [r2, #0]
 8007e1e:	e01c      	b.n	8007e5a <USB_ActivateEndpoint+0x5a6>
 8007e20:	ffff8180 	.word	0xffff8180
 8007e24:	ffffc080 	.word	0xffffc080
 8007e28:	ffff80c0 	.word	0xffff80c0
 8007e2c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4413      	add	r3, r2
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e46:	b29c      	uxth	r4, r3
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	441a      	add	r2, r3
 8007e52:	4b0f      	ldr	r3, [pc, #60]	; (8007e90 <USB_ActivateEndpoint+0x5dc>)
 8007e54:	4323      	orrs	r3, r4
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	4413      	add	r3, r2
 8007e64:	881b      	ldrh	r3, [r3, #0]
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e70:	b29c      	uxth	r4, r3
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	441a      	add	r2, r3
 8007e7c:	4b04      	ldr	r3, [pc, #16]	; (8007e90 <USB_ActivateEndpoint+0x5dc>)
 8007e7e:	4323      	orrs	r3, r4
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bc90      	pop	{r4, r7}
 8007e8e:	4770      	bx	lr
 8007e90:	ffff8080 	.word	0xffff8080

08007e94 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e94:	b490      	push	{r4, r7}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	7b1b      	ldrb	r3, [r3, #12]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d171      	bne.n	8007f8a <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	785b      	ldrb	r3, [r3, #1]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d036      	beq.n	8007f1c <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	881b      	ldrh	r3, [r3, #0]
 8007eba:	b29c      	uxth	r4, r3
 8007ebc:	4623      	mov	r3, r4
 8007ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d014      	beq.n	8007ef0 <USB_DeactivateEndpoint+0x5c>
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	881b      	ldrh	r3, [r3, #0]
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007edc:	b29c      	uxth	r4, r3
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	441a      	add	r2, r3
 8007ee8:	4b6b      	ldr	r3, [pc, #428]	; (8008098 <USB_DeactivateEndpoint+0x204>)
 8007eea:	4323      	orrs	r3, r4
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	881b      	ldrh	r3, [r3, #0]
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f06:	b29c      	uxth	r4, r3
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	441a      	add	r2, r3
 8007f12:	4b62      	ldr	r3, [pc, #392]	; (800809c <USB_DeactivateEndpoint+0x208>)
 8007f14:	4323      	orrs	r3, r4
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	8013      	strh	r3, [r2, #0]
 8007f1a:	e144      	b.n	80081a6 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	4413      	add	r3, r2
 8007f26:	881b      	ldrh	r3, [r3, #0]
 8007f28:	b29c      	uxth	r4, r3
 8007f2a:	4623      	mov	r3, r4
 8007f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d014      	beq.n	8007f5e <USB_DeactivateEndpoint+0xca>
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4413      	add	r3, r2
 8007f3e:	881b      	ldrh	r3, [r3, #0]
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f4a:	b29c      	uxth	r4, r3
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	441a      	add	r2, r3
 8007f56:	4b52      	ldr	r3, [pc, #328]	; (80080a0 <USB_DeactivateEndpoint+0x20c>)
 8007f58:	4323      	orrs	r3, r4
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4413      	add	r3, r2
 8007f68:	881b      	ldrh	r3, [r3, #0]
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f74:	b29c      	uxth	r4, r3
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	441a      	add	r2, r3
 8007f80:	4b46      	ldr	r3, [pc, #280]	; (800809c <USB_DeactivateEndpoint+0x208>)
 8007f82:	4323      	orrs	r3, r4
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	8013      	strh	r3, [r2, #0]
 8007f88:	e10d      	b.n	80081a6 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	785b      	ldrb	r3, [r3, #1]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f040 8088 	bne.w	80080a4 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	4413      	add	r3, r2
 8007f9e:	881b      	ldrh	r3, [r3, #0]
 8007fa0:	b29c      	uxth	r4, r3
 8007fa2:	4623      	mov	r3, r4
 8007fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d014      	beq.n	8007fd6 <USB_DeactivateEndpoint+0x142>
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4413      	add	r3, r2
 8007fb6:	881b      	ldrh	r3, [r3, #0]
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fc2:	b29c      	uxth	r4, r3
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	441a      	add	r2, r3
 8007fce:	4b34      	ldr	r3, [pc, #208]	; (80080a0 <USB_DeactivateEndpoint+0x20c>)
 8007fd0:	4323      	orrs	r3, r4
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	4413      	add	r3, r2
 8007fe0:	881b      	ldrh	r3, [r3, #0]
 8007fe2:	b29c      	uxth	r4, r3
 8007fe4:	4623      	mov	r3, r4
 8007fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d014      	beq.n	8008018 <USB_DeactivateEndpoint+0x184>
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	4413      	add	r3, r2
 8007ff8:	881b      	ldrh	r3, [r3, #0]
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008004:	b29c      	uxth	r4, r3
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	441a      	add	r2, r3
 8008010:	4b21      	ldr	r3, [pc, #132]	; (8008098 <USB_DeactivateEndpoint+0x204>)
 8008012:	4323      	orrs	r3, r4
 8008014:	b29b      	uxth	r3, r3
 8008016:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	4413      	add	r3, r2
 8008022:	881b      	ldrh	r3, [r3, #0]
 8008024:	b29b      	uxth	r3, r3
 8008026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800802a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800802e:	b29c      	uxth	r4, r3
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	441a      	add	r2, r3
 800803a:	4b17      	ldr	r3, [pc, #92]	; (8008098 <USB_DeactivateEndpoint+0x204>)
 800803c:	4323      	orrs	r3, r4
 800803e:	b29b      	uxth	r3, r3
 8008040:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	4413      	add	r3, r2
 800804c:	881b      	ldrh	r3, [r3, #0]
 800804e:	b29b      	uxth	r3, r3
 8008050:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008058:	b29c      	uxth	r4, r3
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	441a      	add	r2, r3
 8008064:	4b0d      	ldr	r3, [pc, #52]	; (800809c <USB_DeactivateEndpoint+0x208>)
 8008066:	4323      	orrs	r3, r4
 8008068:	b29b      	uxth	r3, r3
 800806a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	4413      	add	r3, r2
 8008076:	881b      	ldrh	r3, [r3, #0]
 8008078:	b29b      	uxth	r3, r3
 800807a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800807e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008082:	b29c      	uxth	r4, r3
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	441a      	add	r2, r3
 800808e:	4b03      	ldr	r3, [pc, #12]	; (800809c <USB_DeactivateEndpoint+0x208>)
 8008090:	4323      	orrs	r3, r4
 8008092:	b29b      	uxth	r3, r3
 8008094:	8013      	strh	r3, [r2, #0]
 8008096:	e086      	b.n	80081a6 <USB_DeactivateEndpoint+0x312>
 8008098:	ffff80c0 	.word	0xffff80c0
 800809c:	ffff8080 	.word	0xffff8080
 80080a0:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	4413      	add	r3, r2
 80080ae:	881b      	ldrh	r3, [r3, #0]
 80080b0:	b29c      	uxth	r4, r3
 80080b2:	4623      	mov	r3, r4
 80080b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d014      	beq.n	80080e6 <USB_DeactivateEndpoint+0x252>
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4413      	add	r3, r2
 80080c6:	881b      	ldrh	r3, [r3, #0]
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d2:	b29c      	uxth	r4, r3
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	441a      	add	r2, r3
 80080de:	4b35      	ldr	r3, [pc, #212]	; (80081b4 <USB_DeactivateEndpoint+0x320>)
 80080e0:	4323      	orrs	r3, r4
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	4413      	add	r3, r2
 80080f0:	881b      	ldrh	r3, [r3, #0]
 80080f2:	b29c      	uxth	r4, r3
 80080f4:	4623      	mov	r3, r4
 80080f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d014      	beq.n	8008128 <USB_DeactivateEndpoint+0x294>
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4413      	add	r3, r2
 8008108:	881b      	ldrh	r3, [r3, #0]
 800810a:	b29b      	uxth	r3, r3
 800810c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008114:	b29c      	uxth	r4, r3
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	441a      	add	r2, r3
 8008120:	4b25      	ldr	r3, [pc, #148]	; (80081b8 <USB_DeactivateEndpoint+0x324>)
 8008122:	4323      	orrs	r3, r4
 8008124:	b29b      	uxth	r3, r3
 8008126:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4413      	add	r3, r2
 8008132:	881b      	ldrh	r3, [r3, #0]
 8008134:	b29b      	uxth	r3, r3
 8008136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800813a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800813e:	b29c      	uxth	r4, r3
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	441a      	add	r2, r3
 800814a:	4b1a      	ldr	r3, [pc, #104]	; (80081b4 <USB_DeactivateEndpoint+0x320>)
 800814c:	4323      	orrs	r3, r4
 800814e:	b29b      	uxth	r3, r3
 8008150:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	881b      	ldrh	r3, [r3, #0]
 800815e:	b29b      	uxth	r3, r3
 8008160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008168:	b29c      	uxth	r4, r3
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	441a      	add	r2, r3
 8008174:	4b11      	ldr	r3, [pc, #68]	; (80081bc <USB_DeactivateEndpoint+0x328>)
 8008176:	4323      	orrs	r3, r4
 8008178:	b29b      	uxth	r3, r3
 800817a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	4413      	add	r3, r2
 8008186:	881b      	ldrh	r3, [r3, #0]
 8008188:	b29b      	uxth	r3, r3
 800818a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800818e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008192:	b29c      	uxth	r4, r3
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	441a      	add	r2, r3
 800819e:	4b07      	ldr	r3, [pc, #28]	; (80081bc <USB_DeactivateEndpoint+0x328>)
 80081a0:	4323      	orrs	r3, r4
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bc90      	pop	{r4, r7}
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	ffffc080 	.word	0xffffc080
 80081b8:	ffff80c0 	.word	0xffff80c0
 80081bc:	ffff8080 	.word	0xffff8080

080081c0 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081c0:	b590      	push	{r4, r7, lr}
 80081c2:	b08d      	sub	sp, #52	; 0x34
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	785b      	ldrb	r3, [r3, #1]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	f040 8160 	bne.w	8008494 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	699a      	ldr	r2, [r3, #24]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d909      	bls.n	80081f4 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	699a      	ldr	r2, [r3, #24]
 80081ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ec:	1ad2      	subs	r2, r2, r3
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	619a      	str	r2, [r3, #24]
 80081f2:	e005      	b.n	8008200 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	2200      	movs	r2, #0
 80081fe:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	7b1b      	ldrb	r3, [r3, #12]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d119      	bne.n	800823c <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	6959      	ldr	r1, [r3, #20]
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	88da      	ldrh	r2, [r3, #6]
 8008210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008212:	b29b      	uxth	r3, r3
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fbbd 	bl	8008994 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800821a:	687c      	ldr	r4, [r7, #4]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008222:	b29b      	uxth	r3, r3
 8008224:	441c      	add	r4, r3
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	00db      	lsls	r3, r3, #3
 800822c:	4423      	add	r3, r4
 800822e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008232:	461c      	mov	r4, r3
 8008234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008236:	b29b      	uxth	r3, r3
 8008238:	8023      	strh	r3, [r4, #0]
 800823a:	e10f      	b.n	800845c <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	4413      	add	r3, r2
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	b29b      	uxth	r3, r3
 800824a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800824e:	2b00      	cmp	r3, #0
 8008250:	d065      	beq.n	800831e <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008252:	687c      	ldr	r4, [r7, #4]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	785b      	ldrb	r3, [r3, #1]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d148      	bne.n	80082ee <USB_EPStartXfer+0x12e>
 800825c:	687c      	ldr	r4, [r7, #4]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008264:	b29b      	uxth	r3, r3
 8008266:	441c      	add	r4, r3
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	00db      	lsls	r3, r3, #3
 800826e:	4423      	add	r3, r4
 8008270:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008274:	461c      	mov	r4, r3
 8008276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10e      	bne.n	800829a <USB_EPStartXfer+0xda>
 800827c:	8823      	ldrh	r3, [r4, #0]
 800827e:	b29b      	uxth	r3, r3
 8008280:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008284:	b29b      	uxth	r3, r3
 8008286:	8023      	strh	r3, [r4, #0]
 8008288:	8823      	ldrh	r3, [r4, #0]
 800828a:	b29b      	uxth	r3, r3
 800828c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008294:	b29b      	uxth	r3, r3
 8008296:	8023      	strh	r3, [r4, #0]
 8008298:	e03d      	b.n	8008316 <USB_EPStartXfer+0x156>
 800829a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829c:	2b3e      	cmp	r3, #62	; 0x3e
 800829e:	d810      	bhi.n	80082c2 <USB_EPStartXfer+0x102>
 80082a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a2:	085b      	lsrs	r3, r3, #1
 80082a4:	627b      	str	r3, [r7, #36]	; 0x24
 80082a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d002      	beq.n	80082b6 <USB_EPStartXfer+0xf6>
 80082b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b2:	3301      	adds	r3, #1
 80082b4:	627b      	str	r3, [r7, #36]	; 0x24
 80082b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	029b      	lsls	r3, r3, #10
 80082bc:	b29b      	uxth	r3, r3
 80082be:	8023      	strh	r3, [r4, #0]
 80082c0:	e029      	b.n	8008316 <USB_EPStartXfer+0x156>
 80082c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c4:	095b      	lsrs	r3, r3, #5
 80082c6:	627b      	str	r3, [r7, #36]	; 0x24
 80082c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ca:	f003 031f 	and.w	r3, r3, #31
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d102      	bne.n	80082d8 <USB_EPStartXfer+0x118>
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	3b01      	subs	r3, #1
 80082d6:	627b      	str	r3, [r7, #36]	; 0x24
 80082d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082da:	b29b      	uxth	r3, r3
 80082dc:	029b      	lsls	r3, r3, #10
 80082de:	b29b      	uxth	r3, r3
 80082e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	8023      	strh	r3, [r4, #0]
 80082ec:	e013      	b.n	8008316 <USB_EPStartXfer+0x156>
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	785b      	ldrb	r3, [r3, #1]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d10f      	bne.n	8008316 <USB_EPStartXfer+0x156>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	441c      	add	r4, r3
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	00db      	lsls	r3, r3, #3
 8008306:	4423      	add	r3, r4
 8008308:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800830c:	60fb      	str	r3, [r7, #12]
 800830e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008310:	b29a      	uxth	r2, r3
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	895b      	ldrh	r3, [r3, #10]
 800831a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800831c:	e063      	b.n	80083e6 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	785b      	ldrb	r3, [r3, #1]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d148      	bne.n	80083b8 <USB_EPStartXfer+0x1f8>
 8008326:	687c      	ldr	r4, [r7, #4]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800832e:	b29b      	uxth	r3, r3
 8008330:	441c      	add	r4, r3
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	00db      	lsls	r3, r3, #3
 8008338:	4423      	add	r3, r4
 800833a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800833e:	461c      	mov	r4, r3
 8008340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008342:	2b00      	cmp	r3, #0
 8008344:	d10e      	bne.n	8008364 <USB_EPStartXfer+0x1a4>
 8008346:	8823      	ldrh	r3, [r4, #0]
 8008348:	b29b      	uxth	r3, r3
 800834a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800834e:	b29b      	uxth	r3, r3
 8008350:	8023      	strh	r3, [r4, #0]
 8008352:	8823      	ldrh	r3, [r4, #0]
 8008354:	b29b      	uxth	r3, r3
 8008356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800835a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800835e:	b29b      	uxth	r3, r3
 8008360:	8023      	strh	r3, [r4, #0]
 8008362:	e03d      	b.n	80083e0 <USB_EPStartXfer+0x220>
 8008364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008366:	2b3e      	cmp	r3, #62	; 0x3e
 8008368:	d810      	bhi.n	800838c <USB_EPStartXfer+0x1cc>
 800836a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836c:	085b      	lsrs	r3, r3, #1
 800836e:	623b      	str	r3, [r7, #32]
 8008370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008372:	f003 0301 	and.w	r3, r3, #1
 8008376:	2b00      	cmp	r3, #0
 8008378:	d002      	beq.n	8008380 <USB_EPStartXfer+0x1c0>
 800837a:	6a3b      	ldr	r3, [r7, #32]
 800837c:	3301      	adds	r3, #1
 800837e:	623b      	str	r3, [r7, #32]
 8008380:	6a3b      	ldr	r3, [r7, #32]
 8008382:	b29b      	uxth	r3, r3
 8008384:	029b      	lsls	r3, r3, #10
 8008386:	b29b      	uxth	r3, r3
 8008388:	8023      	strh	r3, [r4, #0]
 800838a:	e029      	b.n	80083e0 <USB_EPStartXfer+0x220>
 800838c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838e:	095b      	lsrs	r3, r3, #5
 8008390:	623b      	str	r3, [r7, #32]
 8008392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008394:	f003 031f 	and.w	r3, r3, #31
 8008398:	2b00      	cmp	r3, #0
 800839a:	d102      	bne.n	80083a2 <USB_EPStartXfer+0x1e2>
 800839c:	6a3b      	ldr	r3, [r7, #32]
 800839e:	3b01      	subs	r3, #1
 80083a0:	623b      	str	r3, [r7, #32]
 80083a2:	6a3b      	ldr	r3, [r7, #32]
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	029b      	lsls	r3, r3, #10
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	8023      	strh	r3, [r4, #0]
 80083b6:	e013      	b.n	80083e0 <USB_EPStartXfer+0x220>
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	785b      	ldrb	r3, [r3, #1]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d10f      	bne.n	80083e0 <USB_EPStartXfer+0x220>
 80083c0:	687c      	ldr	r4, [r7, #4]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	441c      	add	r4, r3
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	00db      	lsls	r3, r3, #3
 80083d2:	4423      	add	r3, r4
 80083d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80083d8:	461c      	mov	r4, r3
 80083da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083dc:	b29b      	uxth	r3, r3
 80083de:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	891b      	ldrh	r3, [r3, #8]
 80083e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	6959      	ldr	r1, [r3, #20]
 80083ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 facf 	bl	8008994 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	785b      	ldrb	r3, [r3, #1]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d115      	bne.n	800842a <USB_EPStartXfer+0x26a>
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	881b      	ldrh	r3, [r3, #0]
 800840a:	b29b      	uxth	r3, r3
 800840c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008414:	b29c      	uxth	r4, r3
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	441a      	add	r2, r3
 8008420:	4b9a      	ldr	r3, [pc, #616]	; (800868c <USB_EPStartXfer+0x4cc>)
 8008422:	4323      	orrs	r3, r4
 8008424:	b29b      	uxth	r3, r3
 8008426:	8013      	strh	r3, [r2, #0]
 8008428:	e018      	b.n	800845c <USB_EPStartXfer+0x29c>
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	785b      	ldrb	r3, [r3, #1]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d114      	bne.n	800845c <USB_EPStartXfer+0x29c>
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4413      	add	r3, r2
 800843c:	881b      	ldrh	r3, [r3, #0]
 800843e:	b29b      	uxth	r3, r3
 8008440:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008448:	b29c      	uxth	r4, r3
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	441a      	add	r2, r3
 8008454:	4b8e      	ldr	r3, [pc, #568]	; (8008690 <USB_EPStartXfer+0x4d0>)
 8008456:	4323      	orrs	r3, r4
 8008458:	b29b      	uxth	r3, r3
 800845a:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	4413      	add	r3, r2
 8008466:	881b      	ldrh	r3, [r3, #0]
 8008468:	b29b      	uxth	r3, r3
 800846a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800846e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008472:	b29c      	uxth	r4, r3
 8008474:	f084 0310 	eor.w	r3, r4, #16
 8008478:	b29c      	uxth	r4, r3
 800847a:	f084 0320 	eor.w	r3, r4, #32
 800847e:	b29c      	uxth	r4, r3
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	441a      	add	r2, r3
 800848a:	4b82      	ldr	r3, [pc, #520]	; (8008694 <USB_EPStartXfer+0x4d4>)
 800848c:	4323      	orrs	r3, r4
 800848e:	b29b      	uxth	r3, r3
 8008490:	8013      	strh	r3, [r2, #0]
 8008492:	e146      	b.n	8008722 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	699a      	ldr	r2, [r3, #24]
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	429a      	cmp	r2, r3
 800849e:	d909      	bls.n	80084b4 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	699a      	ldr	r2, [r3, #24]
 80084aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ac:	1ad2      	subs	r2, r2, r3
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	619a      	str	r2, [r3, #24]
 80084b2:	e005      	b.n	80084c0 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	699b      	ldr	r3, [r3, #24]
 80084b8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	2200      	movs	r2, #0
 80084be:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	7b1b      	ldrb	r3, [r3, #12]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d148      	bne.n	800855a <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80084c8:	687c      	ldr	r4, [r7, #4]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	441c      	add	r4, r3
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	00db      	lsls	r3, r3, #3
 80084da:	4423      	add	r3, r4
 80084dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80084e0:	461c      	mov	r4, r3
 80084e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d10e      	bne.n	8008506 <USB_EPStartXfer+0x346>
 80084e8:	8823      	ldrh	r3, [r4, #0]
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	8023      	strh	r3, [r4, #0]
 80084f4:	8823      	ldrh	r3, [r4, #0]
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008500:	b29b      	uxth	r3, r3
 8008502:	8023      	strh	r3, [r4, #0]
 8008504:	e0f2      	b.n	80086ec <USB_EPStartXfer+0x52c>
 8008506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008508:	2b3e      	cmp	r3, #62	; 0x3e
 800850a:	d810      	bhi.n	800852e <USB_EPStartXfer+0x36e>
 800850c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850e:	085b      	lsrs	r3, r3, #1
 8008510:	61fb      	str	r3, [r7, #28]
 8008512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008514:	f003 0301 	and.w	r3, r3, #1
 8008518:	2b00      	cmp	r3, #0
 800851a:	d002      	beq.n	8008522 <USB_EPStartXfer+0x362>
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	3301      	adds	r3, #1
 8008520:	61fb      	str	r3, [r7, #28]
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	b29b      	uxth	r3, r3
 8008526:	029b      	lsls	r3, r3, #10
 8008528:	b29b      	uxth	r3, r3
 800852a:	8023      	strh	r3, [r4, #0]
 800852c:	e0de      	b.n	80086ec <USB_EPStartXfer+0x52c>
 800852e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008530:	095b      	lsrs	r3, r3, #5
 8008532:	61fb      	str	r3, [r7, #28]
 8008534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008536:	f003 031f 	and.w	r3, r3, #31
 800853a:	2b00      	cmp	r3, #0
 800853c:	d102      	bne.n	8008544 <USB_EPStartXfer+0x384>
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	3b01      	subs	r3, #1
 8008542:	61fb      	str	r3, [r7, #28]
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	b29b      	uxth	r3, r3
 8008548:	029b      	lsls	r3, r3, #10
 800854a:	b29b      	uxth	r3, r3
 800854c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008550:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008554:	b29b      	uxth	r3, r3
 8008556:	8023      	strh	r3, [r4, #0]
 8008558:	e0c8      	b.n	80086ec <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	785b      	ldrb	r3, [r3, #1]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d148      	bne.n	80085f4 <USB_EPStartXfer+0x434>
 8008562:	687c      	ldr	r4, [r7, #4]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800856a:	b29b      	uxth	r3, r3
 800856c:	441c      	add	r4, r3
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	00db      	lsls	r3, r3, #3
 8008574:	4423      	add	r3, r4
 8008576:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800857a:	461c      	mov	r4, r3
 800857c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10e      	bne.n	80085a0 <USB_EPStartXfer+0x3e0>
 8008582:	8823      	ldrh	r3, [r4, #0]
 8008584:	b29b      	uxth	r3, r3
 8008586:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800858a:	b29b      	uxth	r3, r3
 800858c:	8023      	strh	r3, [r4, #0]
 800858e:	8823      	ldrh	r3, [r4, #0]
 8008590:	b29b      	uxth	r3, r3
 8008592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800859a:	b29b      	uxth	r3, r3
 800859c:	8023      	strh	r3, [r4, #0]
 800859e:	e03d      	b.n	800861c <USB_EPStartXfer+0x45c>
 80085a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a2:	2b3e      	cmp	r3, #62	; 0x3e
 80085a4:	d810      	bhi.n	80085c8 <USB_EPStartXfer+0x408>
 80085a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a8:	085b      	lsrs	r3, r3, #1
 80085aa:	61bb      	str	r3, [r7, #24]
 80085ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ae:	f003 0301 	and.w	r3, r3, #1
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d002      	beq.n	80085bc <USB_EPStartXfer+0x3fc>
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	3301      	adds	r3, #1
 80085ba:	61bb      	str	r3, [r7, #24]
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	b29b      	uxth	r3, r3
 80085c0:	029b      	lsls	r3, r3, #10
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	8023      	strh	r3, [r4, #0]
 80085c6:	e029      	b.n	800861c <USB_EPStartXfer+0x45c>
 80085c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ca:	095b      	lsrs	r3, r3, #5
 80085cc:	61bb      	str	r3, [r7, #24]
 80085ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d0:	f003 031f 	and.w	r3, r3, #31
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d102      	bne.n	80085de <USB_EPStartXfer+0x41e>
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	3b01      	subs	r3, #1
 80085dc:	61bb      	str	r3, [r7, #24]
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	029b      	lsls	r3, r3, #10
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	8023      	strh	r3, [r4, #0]
 80085f2:	e013      	b.n	800861c <USB_EPStartXfer+0x45c>
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	785b      	ldrb	r3, [r3, #1]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d10f      	bne.n	800861c <USB_EPStartXfer+0x45c>
 80085fc:	687c      	ldr	r4, [r7, #4]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008604:	b29b      	uxth	r3, r3
 8008606:	441c      	add	r4, r3
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	00db      	lsls	r3, r3, #3
 800860e:	4423      	add	r3, r4
 8008610:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008614:	461c      	mov	r4, r3
 8008616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008618:	b29b      	uxth	r3, r3
 800861a:	8023      	strh	r3, [r4, #0]
 800861c:	687c      	ldr	r4, [r7, #4]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	785b      	ldrb	r3, [r3, #1]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d14e      	bne.n	80086c4 <USB_EPStartXfer+0x504>
 8008626:	687c      	ldr	r4, [r7, #4]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800862e:	b29b      	uxth	r3, r3
 8008630:	441c      	add	r4, r3
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	00db      	lsls	r3, r3, #3
 8008638:	4423      	add	r3, r4
 800863a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800863e:	461c      	mov	r4, r3
 8008640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008642:	2b00      	cmp	r3, #0
 8008644:	d10e      	bne.n	8008664 <USB_EPStartXfer+0x4a4>
 8008646:	8823      	ldrh	r3, [r4, #0]
 8008648:	b29b      	uxth	r3, r3
 800864a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800864e:	b29b      	uxth	r3, r3
 8008650:	8023      	strh	r3, [r4, #0]
 8008652:	8823      	ldrh	r3, [r4, #0]
 8008654:	b29b      	uxth	r3, r3
 8008656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800865a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800865e:	b29b      	uxth	r3, r3
 8008660:	8023      	strh	r3, [r4, #0]
 8008662:	e043      	b.n	80086ec <USB_EPStartXfer+0x52c>
 8008664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008666:	2b3e      	cmp	r3, #62	; 0x3e
 8008668:	d816      	bhi.n	8008698 <USB_EPStartXfer+0x4d8>
 800866a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866c:	085b      	lsrs	r3, r3, #1
 800866e:	617b      	str	r3, [r7, #20]
 8008670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008672:	f003 0301 	and.w	r3, r3, #1
 8008676:	2b00      	cmp	r3, #0
 8008678:	d002      	beq.n	8008680 <USB_EPStartXfer+0x4c0>
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	3301      	adds	r3, #1
 800867e:	617b      	str	r3, [r7, #20]
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	b29b      	uxth	r3, r3
 8008684:	029b      	lsls	r3, r3, #10
 8008686:	b29b      	uxth	r3, r3
 8008688:	8023      	strh	r3, [r4, #0]
 800868a:	e02f      	b.n	80086ec <USB_EPStartXfer+0x52c>
 800868c:	ffff80c0 	.word	0xffff80c0
 8008690:	ffffc080 	.word	0xffffc080
 8008694:	ffff8080 	.word	0xffff8080
 8008698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869a:	095b      	lsrs	r3, r3, #5
 800869c:	617b      	str	r3, [r7, #20]
 800869e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a0:	f003 031f 	and.w	r3, r3, #31
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d102      	bne.n	80086ae <USB_EPStartXfer+0x4ee>
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	3b01      	subs	r3, #1
 80086ac:	617b      	str	r3, [r7, #20]
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	029b      	lsls	r3, r3, #10
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086be:	b29b      	uxth	r3, r3
 80086c0:	8023      	strh	r3, [r4, #0]
 80086c2:	e013      	b.n	80086ec <USB_EPStartXfer+0x52c>
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	785b      	ldrb	r3, [r3, #1]
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d10f      	bne.n	80086ec <USB_EPStartXfer+0x52c>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	441c      	add	r4, r3
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	00db      	lsls	r3, r3, #3
 80086dc:	4423      	add	r3, r4
 80086de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80086e2:	613b      	str	r3, [r7, #16]
 80086e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4413      	add	r3, r2
 80086f6:	881b      	ldrh	r3, [r3, #0]
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008702:	b29c      	uxth	r4, r3
 8008704:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008708:	b29c      	uxth	r4, r3
 800870a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800870e:	b29c      	uxth	r4, r3
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	441a      	add	r2, r3
 800871a:	4b04      	ldr	r3, [pc, #16]	; (800872c <USB_EPStartXfer+0x56c>)
 800871c:	4323      	orrs	r3, r4
 800871e:	b29b      	uxth	r3, r3
 8008720:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3734      	adds	r7, #52	; 0x34
 8008728:	46bd      	mov	sp, r7
 800872a:	bd90      	pop	{r4, r7, pc}
 800872c:	ffff8080 	.word	0xffff8080

08008730 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008730:	b490      	push	{r4, r7}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	785b      	ldrb	r3, [r3, #1]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d018      	beq.n	8008774 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4413      	add	r3, r2
 800874c:	881b      	ldrh	r3, [r3, #0]
 800874e:	b29b      	uxth	r3, r3
 8008750:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008758:	b29c      	uxth	r4, r3
 800875a:	f084 0310 	eor.w	r3, r4, #16
 800875e:	b29c      	uxth	r4, r3
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	441a      	add	r2, r3
 800876a:	4b11      	ldr	r3, [pc, #68]	; (80087b0 <USB_EPSetStall+0x80>)
 800876c:	4323      	orrs	r3, r4
 800876e:	b29b      	uxth	r3, r3
 8008770:	8013      	strh	r3, [r2, #0]
 8008772:	e017      	b.n	80087a4 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	4413      	add	r3, r2
 800877e:	881b      	ldrh	r3, [r3, #0]
 8008780:	b29b      	uxth	r3, r3
 8008782:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800878a:	b29c      	uxth	r4, r3
 800878c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008790:	b29c      	uxth	r4, r3
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	441a      	add	r2, r3
 800879c:	4b04      	ldr	r3, [pc, #16]	; (80087b0 <USB_EPSetStall+0x80>)
 800879e:	4323      	orrs	r3, r4
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3708      	adds	r7, #8
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bc90      	pop	{r4, r7}
 80087ae:	4770      	bx	lr
 80087b0:	ffff8080 	.word	0xffff8080

080087b4 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80087b4:	b490      	push	{r4, r7}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	7b1b      	ldrb	r3, [r3, #12]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d17d      	bne.n	80088c2 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	785b      	ldrb	r3, [r3, #1]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d03d      	beq.n	800884a <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4413      	add	r3, r2
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	b29c      	uxth	r4, r3
 80087dc:	4623      	mov	r3, r4
 80087de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d014      	beq.n	8008810 <USB_EPClearStall+0x5c>
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	881b      	ldrh	r3, [r3, #0]
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087fc:	b29c      	uxth	r4, r3
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	441a      	add	r2, r3
 8008808:	4b31      	ldr	r3, [pc, #196]	; (80088d0 <USB_EPClearStall+0x11c>)
 800880a:	4323      	orrs	r3, r4
 800880c:	b29b      	uxth	r3, r3
 800880e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	78db      	ldrb	r3, [r3, #3]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d054      	beq.n	80088c2 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4413      	add	r3, r2
 8008822:	881b      	ldrh	r3, [r3, #0]
 8008824:	b29b      	uxth	r3, r3
 8008826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800882a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800882e:	b29c      	uxth	r4, r3
 8008830:	f084 0320 	eor.w	r3, r4, #32
 8008834:	b29c      	uxth	r4, r3
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	441a      	add	r2, r3
 8008840:	4b24      	ldr	r3, [pc, #144]	; (80088d4 <USB_EPClearStall+0x120>)
 8008842:	4323      	orrs	r3, r4
 8008844:	b29b      	uxth	r3, r3
 8008846:	8013      	strh	r3, [r2, #0]
 8008848:	e03b      	b.n	80088c2 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	4413      	add	r3, r2
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	b29c      	uxth	r4, r3
 8008858:	4623      	mov	r3, r4
 800885a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800885e:	2b00      	cmp	r3, #0
 8008860:	d014      	beq.n	800888c <USB_EPClearStall+0xd8>
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	4413      	add	r3, r2
 800886c:	881b      	ldrh	r3, [r3, #0]
 800886e:	b29b      	uxth	r3, r3
 8008870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008878:	b29c      	uxth	r4, r3
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	441a      	add	r2, r3
 8008884:	4b14      	ldr	r3, [pc, #80]	; (80088d8 <USB_EPClearStall+0x124>)
 8008886:	4323      	orrs	r3, r4
 8008888:	b29b      	uxth	r3, r3
 800888a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	4413      	add	r3, r2
 8008896:	881b      	ldrh	r3, [r3, #0]
 8008898:	b29b      	uxth	r3, r3
 800889a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800889e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088a2:	b29c      	uxth	r4, r3
 80088a4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80088a8:	b29c      	uxth	r4, r3
 80088aa:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80088ae:	b29c      	uxth	r4, r3
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	441a      	add	r2, r3
 80088ba:	4b06      	ldr	r3, [pc, #24]	; (80088d4 <USB_EPClearStall+0x120>)
 80088bc:	4323      	orrs	r3, r4
 80088be:	b29b      	uxth	r3, r3
 80088c0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3708      	adds	r7, #8
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bc90      	pop	{r4, r7}
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	ffff80c0 	.word	0xffff80c0
 80088d4:	ffff8080 	.word	0xffff8080
 80088d8:	ffffc080 	.word	0xffffc080

080088dc <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	460b      	mov	r3, r1
 80088e6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80088e8:	78fb      	ldrb	r3, [r7, #3]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d103      	bne.n	80088f6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2280      	movs	r2, #128	; 0x80
 80088f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008912:	b29b      	uxth	r3, r3
 8008914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800891c:	b29a      	uxth	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	370c      	adds	r7, #12
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr

08008932 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008932:	b480      	push	{r7}
 8008934:	b083      	sub	sp, #12
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008940:	b29b      	uxth	r3, r3
 8008942:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008946:	b29a      	uxth	r2, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800896a:	b29b      	uxth	r3, r3
 800896c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800896e:	68fb      	ldr	r3, [r7, #12]
}
 8008970:	4618      	mov	r0, r3
 8008972:	3714      	adds	r7, #20
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008994:	b480      	push	{r7}
 8008996:	b08d      	sub	sp, #52	; 0x34
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	4611      	mov	r1, r2
 80089a0:	461a      	mov	r2, r3
 80089a2:	460b      	mov	r3, r1
 80089a4:	80fb      	strh	r3, [r7, #6]
 80089a6:	4613      	mov	r3, r2
 80089a8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80089aa:	88bb      	ldrh	r3, [r7, #4]
 80089ac:	3301      	adds	r3, #1
 80089ae:	085b      	lsrs	r3, r3, #1
 80089b0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80089ba:	88fa      	ldrh	r2, [r7, #6]
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	4413      	add	r3, r2
 80089c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089c4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80089c6:	6a3b      	ldr	r3, [r7, #32]
 80089c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089ca:	e01b      	b.n	8008a04 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80089cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80089d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d4:	3301      	adds	r3, #1
 80089d6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80089d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	b29b      	uxth	r3, r3
 80089de:	021b      	lsls	r3, r3, #8
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	461a      	mov	r2, r3
 80089e4:	69bb      	ldr	r3, [r7, #24]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80089f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f4:	3302      	adds	r3, #2
 80089f6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80089f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fa:	3301      	adds	r3, #1
 80089fc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80089fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a00:	3b01      	subs	r3, #1
 8008a02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1e0      	bne.n	80089cc <USB_WritePMA+0x38>
  }
}
 8008a0a:	bf00      	nop
 8008a0c:	3734      	adds	r7, #52	; 0x34
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr

08008a16 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008a16:	b480      	push	{r7}
 8008a18:	b08b      	sub	sp, #44	; 0x2c
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	60f8      	str	r0, [r7, #12]
 8008a1e:	60b9      	str	r1, [r7, #8]
 8008a20:	4611      	mov	r1, r2
 8008a22:	461a      	mov	r2, r3
 8008a24:	460b      	mov	r3, r1
 8008a26:	80fb      	strh	r3, [r7, #6]
 8008a28:	4613      	mov	r3, r2
 8008a2a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008a2c:	88bb      	ldrh	r3, [r7, #4]
 8008a2e:	085b      	lsrs	r3, r3, #1
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a3c:	88fa      	ldrh	r2, [r7, #6]
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a46:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a4c:	e018      	b.n	8008a80 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008a4e:	6a3b      	ldr	r3, [r7, #32]
 8008a50:	881b      	ldrh	r3, [r3, #0]
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008a56:	6a3b      	ldr	r3, [r7, #32]
 8008a58:	3302      	adds	r3, #2
 8008a5a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	b2da      	uxtb	r2, r3
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	3301      	adds	r3, #1
 8008a68:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	0a1b      	lsrs	r3, r3, #8
 8008a6e:	b2da      	uxtb	r2, r3
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	3301      	adds	r3, #1
 8008a78:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8008a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1e3      	bne.n	8008a4e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008a86:	88bb      	ldrh	r3, [r7, #4]
 8008a88:	f003 0301 	and.w	r3, r3, #1
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d007      	beq.n	8008aa2 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008a92:	6a3b      	ldr	r3, [r7, #32]
 8008a94:	881b      	ldrh	r3, [r3, #0]
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	b2da      	uxtb	r2, r3
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	701a      	strb	r2, [r3, #0]
  }
}
 8008aa2:	bf00      	nop
 8008aa4:	372c      	adds	r7, #44	; 0x2c
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr

08008aae <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b084      	sub	sp, #16
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008aba:	2300      	movs	r3, #0
 8008abc:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	7c1b      	ldrb	r3, [r3, #16]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d115      	bne.n	8008af2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008aca:	2202      	movs	r2, #2
 8008acc:	2181      	movs	r1, #129	; 0x81
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f001 feb0 	bl	800a834 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008ada:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ade:	2202      	movs	r2, #2
 8008ae0:	2101      	movs	r1, #1
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f001 fea6 	bl	800a834 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008af0:	e012      	b.n	8008b18 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008af2:	2340      	movs	r3, #64	; 0x40
 8008af4:	2202      	movs	r2, #2
 8008af6:	2181      	movs	r1, #129	; 0x81
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f001 fe9b 	bl	800a834 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2201      	movs	r2, #1
 8008b02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008b04:	2340      	movs	r3, #64	; 0x40
 8008b06:	2202      	movs	r2, #2
 8008b08:	2101      	movs	r1, #1
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f001 fe92 	bl	800a834 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008b18:	2308      	movs	r3, #8
 8008b1a:	2203      	movs	r2, #3
 8008b1c:	2182      	movs	r1, #130	; 0x82
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f001 fe88 	bl	800a834 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008b2a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008b2e:	f002 f87b 	bl	800ac28 <USBD_static_malloc>
 8008b32:	4602      	mov	r2, r0
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d102      	bne.n	8008b4a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008b44:	2301      	movs	r3, #1
 8008b46:	73fb      	strb	r3, [r7, #15]
 8008b48:	e026      	b.n	8008b98 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b50:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	7c1b      	ldrb	r3, [r3, #16]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d109      	bne.n	8008b88 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b7e:	2101      	movs	r1, #1
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f001 ffcd 	bl	800ab20 <USBD_LL_PrepareReceive>
 8008b86:	e007      	b.n	8008b98 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b8e:	2340      	movs	r3, #64	; 0x40
 8008b90:	2101      	movs	r1, #1
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f001 ffc4 	bl	800ab20 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b084      	sub	sp, #16
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	460b      	mov	r3, r1
 8008bac:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008bb2:	2181      	movs	r1, #129	; 0x81
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f001 fe7b 	bl	800a8b0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008bc0:	2101      	movs	r1, #1
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f001 fe74 	bl	800a8b0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008bd0:	2182      	movs	r1, #130	; 0x82
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f001 fe6c 	bl	800a8b0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00e      	beq.n	8008c06 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f002 f823 	bl	800ac44 <USBD_static_free>
    pdev->pClassData = NULL;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c20:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008c22:	2300      	movs	r3, #0
 8008c24:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008c26:	2300      	movs	r3, #0
 8008c28:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d039      	beq.n	8008cae <USBD_CDC_Setup+0x9e>
 8008c3a:	2b20      	cmp	r3, #32
 8008c3c:	d17c      	bne.n	8008d38 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	88db      	ldrh	r3, [r3, #6]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d029      	beq.n	8008c9a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	b25b      	sxtb	r3, r3
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	da11      	bge.n	8008c74 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	683a      	ldr	r2, [r7, #0]
 8008c5a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008c5c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008c5e:	683a      	ldr	r2, [r7, #0]
 8008c60:	88d2      	ldrh	r2, [r2, #6]
 8008c62:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008c64:	6939      	ldr	r1, [r7, #16]
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	88db      	ldrh	r3, [r3, #6]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f001 f9fb 	bl	800a068 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008c72:	e068      	b.n	8008d46 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	785a      	ldrb	r2, [r3, #1]
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	88db      	ldrh	r3, [r3, #6]
 8008c82:	b2da      	uxtb	r2, r3
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008c8a:	6939      	ldr	r1, [r7, #16]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	88db      	ldrh	r3, [r3, #6]
 8008c90:	461a      	mov	r2, r3
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f001 fa16 	bl	800a0c4 <USBD_CtlPrepareRx>
      break;
 8008c98:	e055      	b.n	8008d46 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	683a      	ldr	r2, [r7, #0]
 8008ca4:	7850      	ldrb	r0, [r2, #1]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	6839      	ldr	r1, [r7, #0]
 8008caa:	4798      	blx	r3
      break;
 8008cac:	e04b      	b.n	8008d46 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	785b      	ldrb	r3, [r3, #1]
 8008cb2:	2b0a      	cmp	r3, #10
 8008cb4:	d017      	beq.n	8008ce6 <USBD_CDC_Setup+0xd6>
 8008cb6:	2b0b      	cmp	r3, #11
 8008cb8:	d029      	beq.n	8008d0e <USBD_CDC_Setup+0xfe>
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d133      	bne.n	8008d26 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cc4:	2b03      	cmp	r3, #3
 8008cc6:	d107      	bne.n	8008cd8 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008cc8:	f107 030c 	add.w	r3, r7, #12
 8008ccc:	2202      	movs	r2, #2
 8008cce:	4619      	mov	r1, r3
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f001 f9c9 	bl	800a068 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008cd6:	e02e      	b.n	8008d36 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008cd8:	6839      	ldr	r1, [r7, #0]
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f001 f959 	bl	8009f92 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	75fb      	strb	r3, [r7, #23]
          break;
 8008ce4:	e027      	b.n	8008d36 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cec:	2b03      	cmp	r3, #3
 8008cee:	d107      	bne.n	8008d00 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008cf0:	f107 030f 	add.w	r3, r7, #15
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f001 f9b5 	bl	800a068 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008cfe:	e01a      	b.n	8008d36 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008d00:	6839      	ldr	r1, [r7, #0]
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f001 f945 	bl	8009f92 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d08:	2302      	movs	r3, #2
 8008d0a:	75fb      	strb	r3, [r7, #23]
          break;
 8008d0c:	e013      	b.n	8008d36 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d14:	2b03      	cmp	r3, #3
 8008d16:	d00d      	beq.n	8008d34 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8008d18:	6839      	ldr	r1, [r7, #0]
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f001 f939 	bl	8009f92 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d20:	2302      	movs	r3, #2
 8008d22:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008d24:	e006      	b.n	8008d34 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8008d26:	6839      	ldr	r1, [r7, #0]
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f001 f932 	bl	8009f92 <USBD_CtlError>
          ret = USBD_FAIL;
 8008d2e:	2302      	movs	r3, #2
 8008d30:	75fb      	strb	r3, [r7, #23]
          break;
 8008d32:	e000      	b.n	8008d36 <USBD_CDC_Setup+0x126>
          break;
 8008d34:	bf00      	nop
      }
      break;
 8008d36:	e006      	b.n	8008d46 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8008d38:	6839      	ldr	r1, [r7, #0]
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f001 f929 	bl	8009f92 <USBD_CtlError>
      ret = USBD_FAIL;
 8008d40:	2302      	movs	r3, #2
 8008d42:	75fb      	strb	r3, [r7, #23]
      break;
 8008d44:	bf00      	nop
  }

  return ret;
 8008d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3718      	adds	r7, #24
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	460b      	mov	r3, r1
 8008d5a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d62:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d6a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d037      	beq.n	8008de6 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008d76:	78fa      	ldrb	r2, [r7, #3]
 8008d78:	6879      	ldr	r1, [r7, #4]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	4413      	add	r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	440b      	add	r3, r1
 8008d84:	331c      	adds	r3, #28
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d026      	beq.n	8008dda <USBD_CDC_DataIn+0x8a>
 8008d8c:	78fa      	ldrb	r2, [r7, #3]
 8008d8e:	6879      	ldr	r1, [r7, #4]
 8008d90:	4613      	mov	r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	440b      	add	r3, r1
 8008d9a:	331c      	adds	r3, #28
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	78fa      	ldrb	r2, [r7, #3]
 8008da0:	68b9      	ldr	r1, [r7, #8]
 8008da2:	0152      	lsls	r2, r2, #5
 8008da4:	440a      	add	r2, r1
 8008da6:	3238      	adds	r2, #56	; 0x38
 8008da8:	6812      	ldr	r2, [r2, #0]
 8008daa:	fbb3 f1f2 	udiv	r1, r3, r2
 8008dae:	fb02 f201 	mul.w	r2, r2, r1
 8008db2:	1a9b      	subs	r3, r3, r2
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d110      	bne.n	8008dda <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008db8:	78fa      	ldrb	r2, [r7, #3]
 8008dba:	6879      	ldr	r1, [r7, #4]
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	4413      	add	r3, r2
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	440b      	add	r3, r1
 8008dc6:	331c      	adds	r3, #28
 8008dc8:	2200      	movs	r2, #0
 8008dca:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008dcc:	78f9      	ldrb	r1, [r7, #3]
 8008dce:	2300      	movs	r3, #0
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f001 fe6a 	bl	800aaac <USBD_LL_Transmit>
 8008dd8:	e003      	b.n	8008de2 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	e000      	b.n	8008de8 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8008de6:	2302      	movs	r3, #2
  }
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	460b      	mov	r3, r1
 8008dfa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e02:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008e04:	78fb      	ldrb	r3, [r7, #3]
 8008e06:	4619      	mov	r1, r3
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f001 fec3 	bl	800ab94 <USBD_LL_GetRxDataSize>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00d      	beq.n	8008e3c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008e2e:	68fa      	ldr	r2, [r7, #12]
 8008e30:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008e34:	4611      	mov	r1, r2
 8008e36:	4798      	blx	r3

    return USBD_OK;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	e000      	b.n	8008e3e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008e3c:	2302      	movs	r3, #2
  }
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b084      	sub	sp, #16
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e54:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d015      	beq.n	8008e8c <USBD_CDC_EP0_RxReady+0x46>
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008e66:	2bff      	cmp	r3, #255	; 0xff
 8008e68:	d010      	beq.n	8008e8c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008e78:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008e80:	b292      	uxth	r2, r2
 8008e82:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	22ff      	movs	r2, #255	; 0xff
 8008e88:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
	...

08008e98 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2243      	movs	r2, #67	; 0x43
 8008ea4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008ea6:	4b03      	ldr	r3, [pc, #12]	; (8008eb4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr
 8008eb4:	20000094 	.word	0x20000094

08008eb8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2243      	movs	r2, #67	; 0x43
 8008ec4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008ec6:	4b03      	ldr	r3, [pc, #12]	; (8008ed4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	20000050 	.word	0x20000050

08008ed8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2243      	movs	r2, #67	; 0x43
 8008ee4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008ee6:	4b03      	ldr	r3, [pc, #12]	; (8008ef4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr
 8008ef4:	200000d8 	.word	0x200000d8

08008ef8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	220a      	movs	r2, #10
 8008f04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008f06:	4b03      	ldr	r3, [pc, #12]	; (8008f14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr
 8008f14:	2000000c 	.word	0x2000000c

08008f18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008f22:	2302      	movs	r3, #2
 8008f24:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d005      	beq.n	8008f38 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	683a      	ldr	r2, [r7, #0]
 8008f30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008f34:	2300      	movs	r3, #0
 8008f36:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3714      	adds	r7, #20
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr

08008f46 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008f46:	b480      	push	{r7}
 8008f48:	b087      	sub	sp, #28
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	60f8      	str	r0, [r7, #12]
 8008f4e:	60b9      	str	r1, [r7, #8]
 8008f50:	4613      	mov	r3, r2
 8008f52:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f5a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008f64:	88fa      	ldrh	r2, [r7, #6]
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	371c      	adds	r7, #28
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr

08008f7a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008f7a:	b480      	push	{r7}
 8008f7c:	b085      	sub	sp, #20
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f8a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	683a      	ldr	r2, [r7, #0]
 8008f90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3714      	adds	r7, #20
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr

08008fa2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b084      	sub	sp, #16
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fb0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d017      	beq.n	8008fec <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	7c1b      	ldrb	r3, [r3, #16]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d109      	bne.n	8008fd8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008fca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fce:	2101      	movs	r1, #1
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f001 fda5 	bl	800ab20 <USBD_LL_PrepareReceive>
 8008fd6:	e007      	b.n	8008fe8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008fde:	2340      	movs	r3, #64	; 0x40
 8008fe0:	2101      	movs	r1, #1
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f001 fd9c 	bl	800ab20 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	e000      	b.n	8008fee <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008fec:	2302      	movs	r3, #2
  }
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b084      	sub	sp, #16
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	60f8      	str	r0, [r7, #12]
 8008ffe:	60b9      	str	r1, [r7, #8]
 8009000:	4613      	mov	r3, r2
 8009002:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d101      	bne.n	800900e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800900a:	2302      	movs	r3, #2
 800900c:	e01a      	b.n	8009044 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009014:	2b00      	cmp	r3, #0
 8009016:	d003      	beq.n	8009020 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d003      	beq.n	800902e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2201      	movs	r2, #1
 8009032:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	79fa      	ldrb	r2, [r7, #7]
 800903a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f001 fb65 	bl	800a70c <USBD_LL_Init>

  return USBD_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800904c:	b480      	push	{r7}
 800904e:	b085      	sub	sp, #20
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009056:	2300      	movs	r3, #0
 8009058:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d006      	beq.n	800906e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	683a      	ldr	r2, [r7, #0]
 8009064:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009068:	2300      	movs	r3, #0
 800906a:	73fb      	strb	r3, [r7, #15]
 800906c:	e001      	b.n	8009072 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800906e:	2302      	movs	r3, #2
 8009070:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009072:	7bfb      	ldrb	r3, [r7, #15]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3714      	adds	r7, #20
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f001 fba1 	bl	800a7d0 <USBD_LL_Start>

  return USBD_OK;
 800908e:	2300      	movs	r3, #0
}
 8009090:	4618      	mov	r0, r3
 8009092:	3708      	adds	r7, #8
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	370c      	adds	r7, #12
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr

080090ae <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b084      	sub	sp, #16
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
 80090b6:	460b      	mov	r3, r1
 80090b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80090ba:	2302      	movs	r3, #2
 80090bc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d00c      	beq.n	80090e2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	78fa      	ldrb	r2, [r7, #3]
 80090d2:	4611      	mov	r1, r2
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	4798      	blx	r3
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80090de:	2300      	movs	r3, #0
 80090e0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80090e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	460b      	mov	r3, r1
 80090f6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	78fa      	ldrb	r2, [r7, #3]
 8009102:	4611      	mov	r1, r2
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	4798      	blx	r3

  return USBD_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3708      	adds	r7, #8
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b082      	sub	sp, #8
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
 800911a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009122:	6839      	ldr	r1, [r7, #0]
 8009124:	4618      	mov	r0, r3
 8009126:	f000 fef7 	bl	8009f18 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2201      	movs	r2, #1
 800912e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009138:	461a      	mov	r2, r3
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009146:	f003 031f 	and.w	r3, r3, #31
 800914a:	2b01      	cmp	r3, #1
 800914c:	d00c      	beq.n	8009168 <USBD_LL_SetupStage+0x56>
 800914e:	2b01      	cmp	r3, #1
 8009150:	d302      	bcc.n	8009158 <USBD_LL_SetupStage+0x46>
 8009152:	2b02      	cmp	r3, #2
 8009154:	d010      	beq.n	8009178 <USBD_LL_SetupStage+0x66>
 8009156:	e017      	b.n	8009188 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800915e:	4619      	mov	r1, r3
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 f9cd 	bl	8009500 <USBD_StdDevReq>
      break;
 8009166:	e01a      	b.n	800919e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800916e:	4619      	mov	r1, r3
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fa2f 	bl	80095d4 <USBD_StdItfReq>
      break;
 8009176:	e012      	b.n	800919e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800917e:	4619      	mov	r1, r3
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 fa6d 	bl	8009660 <USBD_StdEPReq>
      break;
 8009186:	e00a      	b.n	800919e <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800918e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009192:	b2db      	uxtb	r3, r3
 8009194:	4619      	mov	r1, r3
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f001 fbc0 	bl	800a91c <USBD_LL_StallEP>
      break;
 800919c:	bf00      	nop
  }

  return USBD_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b086      	sub	sp, #24
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	460b      	mov	r3, r1
 80091b2:	607a      	str	r2, [r7, #4]
 80091b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80091b6:	7afb      	ldrb	r3, [r7, #11]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d14b      	bne.n	8009254 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80091c2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091ca:	2b03      	cmp	r3, #3
 80091cc:	d134      	bne.n	8009238 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	68da      	ldr	r2, [r3, #12]
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d919      	bls.n	800920e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	68da      	ldr	r2, [r3, #12]
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	691b      	ldr	r3, [r3, #16]
 80091e2:	1ad2      	subs	r2, r2, r3
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	68da      	ldr	r2, [r3, #12]
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d203      	bcs.n	80091fc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	e002      	b.n	8009202 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009200:	b29b      	uxth	r3, r3
 8009202:	461a      	mov	r2, r3
 8009204:	6879      	ldr	r1, [r7, #4]
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f000 ff7a 	bl	800a100 <USBD_CtlContinueRx>
 800920c:	e038      	b.n	8009280 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00a      	beq.n	8009230 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009220:	2b03      	cmp	r3, #3
 8009222:	d105      	bne.n	8009230 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800922a:	691b      	ldr	r3, [r3, #16]
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f000 ff77 	bl	800a124 <USBD_CtlSendStatus>
 8009236:	e023      	b.n	8009280 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800923e:	2b05      	cmp	r3, #5
 8009240:	d11e      	bne.n	8009280 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2200      	movs	r2, #0
 8009246:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800924a:	2100      	movs	r1, #0
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f001 fb65 	bl	800a91c <USBD_LL_StallEP>
 8009252:	e015      	b.n	8009280 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00d      	beq.n	800927c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009266:	2b03      	cmp	r3, #3
 8009268:	d108      	bne.n	800927c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009270:	699b      	ldr	r3, [r3, #24]
 8009272:	7afa      	ldrb	r2, [r7, #11]
 8009274:	4611      	mov	r1, r2
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	4798      	blx	r3
 800927a:	e001      	b.n	8009280 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800927c:	2302      	movs	r3, #2
 800927e:	e000      	b.n	8009282 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	3718      	adds	r7, #24
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b086      	sub	sp, #24
 800928e:	af00      	add	r7, sp, #0
 8009290:	60f8      	str	r0, [r7, #12]
 8009292:	460b      	mov	r3, r1
 8009294:	607a      	str	r2, [r7, #4]
 8009296:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009298:	7afb      	ldrb	r3, [r7, #11]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d17f      	bne.n	800939e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	3314      	adds	r3, #20
 80092a2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d15c      	bne.n	8009368 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	68da      	ldr	r2, [r3, #12]
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d915      	bls.n	80092e6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	68da      	ldr	r2, [r3, #12]
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	1ad2      	subs	r2, r2, r3
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	461a      	mov	r2, r3
 80092d0:	6879      	ldr	r1, [r7, #4]
 80092d2:	68f8      	ldr	r0, [r7, #12]
 80092d4:	f000 fee4 	bl	800a0a0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092d8:	2300      	movs	r3, #0
 80092da:	2200      	movs	r2, #0
 80092dc:	2100      	movs	r1, #0
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f001 fc1e 	bl	800ab20 <USBD_LL_PrepareReceive>
 80092e4:	e04e      	b.n	8009384 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	697a      	ldr	r2, [r7, #20]
 80092ec:	6912      	ldr	r2, [r2, #16]
 80092ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80092f2:	fb02 f201 	mul.w	r2, r2, r1
 80092f6:	1a9b      	subs	r3, r3, r2
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d11c      	bne.n	8009336 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	689a      	ldr	r2, [r3, #8]
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009304:	429a      	cmp	r2, r3
 8009306:	d316      	bcc.n	8009336 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	689a      	ldr	r2, [r3, #8]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009312:	429a      	cmp	r2, r3
 8009314:	d20f      	bcs.n	8009336 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009316:	2200      	movs	r2, #0
 8009318:	2100      	movs	r1, #0
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f000 fec0 	bl	800a0a0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009328:	2300      	movs	r3, #0
 800932a:	2200      	movs	r2, #0
 800932c:	2100      	movs	r1, #0
 800932e:	68f8      	ldr	r0, [r7, #12]
 8009330:	f001 fbf6 	bl	800ab20 <USBD_LL_PrepareReceive>
 8009334:	e026      	b.n	8009384 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00a      	beq.n	8009358 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009348:	2b03      	cmp	r3, #3
 800934a:	d105      	bne.n	8009358 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009358:	2180      	movs	r1, #128	; 0x80
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f001 fade 	bl	800a91c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f000 fef2 	bl	800a14a <USBD_CtlReceiveStatus>
 8009366:	e00d      	b.n	8009384 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800936e:	2b04      	cmp	r3, #4
 8009370:	d004      	beq.n	800937c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009378:	2b00      	cmp	r3, #0
 800937a:	d103      	bne.n	8009384 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800937c:	2180      	movs	r1, #128	; 0x80
 800937e:	68f8      	ldr	r0, [r7, #12]
 8009380:	f001 facc 	bl	800a91c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800938a:	2b01      	cmp	r3, #1
 800938c:	d11d      	bne.n	80093ca <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f7ff fe82 	bl	8009098 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2200      	movs	r2, #0
 8009398:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800939c:	e015      	b.n	80093ca <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093a4:	695b      	ldr	r3, [r3, #20]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00d      	beq.n	80093c6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80093b0:	2b03      	cmp	r3, #3
 80093b2:	d108      	bne.n	80093c6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ba:	695b      	ldr	r3, [r3, #20]
 80093bc:	7afa      	ldrb	r2, [r7, #11]
 80093be:	4611      	mov	r1, r2
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	4798      	blx	r3
 80093c4:	e001      	b.n	80093ca <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80093c6:	2302      	movs	r3, #2
 80093c8:	e000      	b.n	80093cc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3718      	adds	r7, #24
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80093dc:	2340      	movs	r3, #64	; 0x40
 80093de:	2200      	movs	r2, #0
 80093e0:	2100      	movs	r1, #0
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f001 fa26 	bl	800a834 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2240      	movs	r2, #64	; 0x40
 80093f4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80093f8:	2340      	movs	r3, #64	; 0x40
 80093fa:	2200      	movs	r2, #0
 80093fc:	2180      	movs	r1, #128	; 0x80
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f001 fa18 	bl	800a834 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2201      	movs	r2, #1
 8009408:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2240      	movs	r2, #64	; 0x40
 800940e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009434:	2b00      	cmp	r3, #0
 8009436:	d009      	beq.n	800944c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	6852      	ldr	r2, [r2, #4]
 8009444:	b2d2      	uxtb	r2, r2
 8009446:	4611      	mov	r1, r2
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	4798      	blx	r3
  }

  return USBD_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3708      	adds	r7, #8
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009456:	b480      	push	{r7}
 8009458:	b083      	sub	sp, #12
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	460b      	mov	r3, r1
 8009460:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	78fa      	ldrb	r2, [r7, #3]
 8009466:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009468:	2300      	movs	r3, #0
}
 800946a:	4618      	mov	r0, r3
 800946c:	370c      	adds	r7, #12
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr

08009476 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009476:	b480      	push	{r7}
 8009478:	b083      	sub	sp, #12
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2204      	movs	r2, #4
 800948e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094ae:	2b04      	cmp	r3, #4
 80094b0:	d105      	bne.n	80094be <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094da:	2b03      	cmp	r3, #3
 80094dc:	d10b      	bne.n	80094f6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094e4:	69db      	ldr	r3, [r3, #28]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d005      	beq.n	80094f6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094f0:	69db      	ldr	r3, [r3, #28]
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80094f6:	2300      	movs	r3, #0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009516:	2b20      	cmp	r3, #32
 8009518:	d004      	beq.n	8009524 <USBD_StdDevReq+0x24>
 800951a:	2b40      	cmp	r3, #64	; 0x40
 800951c:	d002      	beq.n	8009524 <USBD_StdDevReq+0x24>
 800951e:	2b00      	cmp	r3, #0
 8009520:	d008      	beq.n	8009534 <USBD_StdDevReq+0x34>
 8009522:	e04c      	b.n	80095be <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	6839      	ldr	r1, [r7, #0]
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	4798      	blx	r3
      break;
 8009532:	e049      	b.n	80095c8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	785b      	ldrb	r3, [r3, #1]
 8009538:	2b09      	cmp	r3, #9
 800953a:	d83a      	bhi.n	80095b2 <USBD_StdDevReq+0xb2>
 800953c:	a201      	add	r2, pc, #4	; (adr r2, 8009544 <USBD_StdDevReq+0x44>)
 800953e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009542:	bf00      	nop
 8009544:	08009595 	.word	0x08009595
 8009548:	080095a9 	.word	0x080095a9
 800954c:	080095b3 	.word	0x080095b3
 8009550:	0800959f 	.word	0x0800959f
 8009554:	080095b3 	.word	0x080095b3
 8009558:	08009577 	.word	0x08009577
 800955c:	0800956d 	.word	0x0800956d
 8009560:	080095b3 	.word	0x080095b3
 8009564:	0800958b 	.word	0x0800958b
 8009568:	08009581 	.word	0x08009581
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800956c:	6839      	ldr	r1, [r7, #0]
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 f9d4 	bl	800991c <USBD_GetDescriptor>
          break;
 8009574:	e022      	b.n	80095bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009576:	6839      	ldr	r1, [r7, #0]
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 fb61 	bl	8009c40 <USBD_SetAddress>
          break;
 800957e:	e01d      	b.n	80095bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009580:	6839      	ldr	r1, [r7, #0]
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 fb9e 	bl	8009cc4 <USBD_SetConfig>
          break;
 8009588:	e018      	b.n	80095bc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800958a:	6839      	ldr	r1, [r7, #0]
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fc27 	bl	8009de0 <USBD_GetConfig>
          break;
 8009592:	e013      	b.n	80095bc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009594:	6839      	ldr	r1, [r7, #0]
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 fc56 	bl	8009e48 <USBD_GetStatus>
          break;
 800959c:	e00e      	b.n	80095bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800959e:	6839      	ldr	r1, [r7, #0]
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 fc84 	bl	8009eae <USBD_SetFeature>
          break;
 80095a6:	e009      	b.n	80095bc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80095a8:	6839      	ldr	r1, [r7, #0]
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 fc93 	bl	8009ed6 <USBD_ClrFeature>
          break;
 80095b0:	e004      	b.n	80095bc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80095b2:	6839      	ldr	r1, [r7, #0]
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 fcec 	bl	8009f92 <USBD_CtlError>
          break;
 80095ba:	bf00      	nop
      }
      break;
 80095bc:	e004      	b.n	80095c8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80095be:	6839      	ldr	r1, [r7, #0]
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fce6 	bl	8009f92 <USBD_CtlError>
      break;
 80095c6:	bf00      	nop
  }

  return ret;
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop

080095d4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095de:	2300      	movs	r3, #0
 80095e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095ea:	2b20      	cmp	r3, #32
 80095ec:	d003      	beq.n	80095f6 <USBD_StdItfReq+0x22>
 80095ee:	2b40      	cmp	r3, #64	; 0x40
 80095f0:	d001      	beq.n	80095f6 <USBD_StdItfReq+0x22>
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d12a      	bne.n	800964c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095fc:	3b01      	subs	r3, #1
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d81d      	bhi.n	800963e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	889b      	ldrh	r3, [r3, #4]
 8009606:	b2db      	uxtb	r3, r3
 8009608:	2b01      	cmp	r3, #1
 800960a:	d813      	bhi.n	8009634 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	6839      	ldr	r1, [r7, #0]
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	4798      	blx	r3
 800961a:	4603      	mov	r3, r0
 800961c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	88db      	ldrh	r3, [r3, #6]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d110      	bne.n	8009648 <USBD_StdItfReq+0x74>
 8009626:	7bfb      	ldrb	r3, [r7, #15]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d10d      	bne.n	8009648 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 fd79 	bl	800a124 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009632:	e009      	b.n	8009648 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8009634:	6839      	ldr	r1, [r7, #0]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fcab 	bl	8009f92 <USBD_CtlError>
          break;
 800963c:	e004      	b.n	8009648 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800963e:	6839      	ldr	r1, [r7, #0]
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 fca6 	bl	8009f92 <USBD_CtlError>
          break;
 8009646:	e000      	b.n	800964a <USBD_StdItfReq+0x76>
          break;
 8009648:	bf00      	nop
      }
      break;
 800964a:	e004      	b.n	8009656 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800964c:	6839      	ldr	r1, [r7, #0]
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 fc9f 	bl	8009f92 <USBD_CtlError>
      break;
 8009654:	bf00      	nop
  }

  return USBD_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800966a:	2300      	movs	r3, #0
 800966c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	889b      	ldrh	r3, [r3, #4]
 8009672:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800967c:	2b20      	cmp	r3, #32
 800967e:	d004      	beq.n	800968a <USBD_StdEPReq+0x2a>
 8009680:	2b40      	cmp	r3, #64	; 0x40
 8009682:	d002      	beq.n	800968a <USBD_StdEPReq+0x2a>
 8009684:	2b00      	cmp	r3, #0
 8009686:	d008      	beq.n	800969a <USBD_StdEPReq+0x3a>
 8009688:	e13d      	b.n	8009906 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	6839      	ldr	r1, [r7, #0]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	4798      	blx	r3
      break;
 8009698:	e13a      	b.n	8009910 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096a2:	2b20      	cmp	r3, #32
 80096a4:	d10a      	bne.n	80096bc <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	6839      	ldr	r1, [r7, #0]
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	4798      	blx	r3
 80096b4:	4603      	mov	r3, r0
 80096b6:	73fb      	strb	r3, [r7, #15]

        return ret;
 80096b8:	7bfb      	ldrb	r3, [r7, #15]
 80096ba:	e12a      	b.n	8009912 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	785b      	ldrb	r3, [r3, #1]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d03e      	beq.n	8009742 <USBD_StdEPReq+0xe2>
 80096c4:	2b03      	cmp	r3, #3
 80096c6:	d002      	beq.n	80096ce <USBD_StdEPReq+0x6e>
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d070      	beq.n	80097ae <USBD_StdEPReq+0x14e>
 80096cc:	e115      	b.n	80098fa <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096d4:	2b02      	cmp	r3, #2
 80096d6:	d002      	beq.n	80096de <USBD_StdEPReq+0x7e>
 80096d8:	2b03      	cmp	r3, #3
 80096da:	d015      	beq.n	8009708 <USBD_StdEPReq+0xa8>
 80096dc:	e02b      	b.n	8009736 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096de:	7bbb      	ldrb	r3, [r7, #14]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00c      	beq.n	80096fe <USBD_StdEPReq+0x9e>
 80096e4:	7bbb      	ldrb	r3, [r7, #14]
 80096e6:	2b80      	cmp	r3, #128	; 0x80
 80096e8:	d009      	beq.n	80096fe <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80096ea:	7bbb      	ldrb	r3, [r7, #14]
 80096ec:	4619      	mov	r1, r3
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f001 f914 	bl	800a91c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80096f4:	2180      	movs	r1, #128	; 0x80
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f001 f910 	bl	800a91c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096fc:	e020      	b.n	8009740 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80096fe:	6839      	ldr	r1, [r7, #0]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fc46 	bl	8009f92 <USBD_CtlError>
              break;
 8009706:	e01b      	b.n	8009740 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	885b      	ldrh	r3, [r3, #2]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d10e      	bne.n	800972e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8009710:	7bbb      	ldrb	r3, [r7, #14]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00b      	beq.n	800972e <USBD_StdEPReq+0xce>
 8009716:	7bbb      	ldrb	r3, [r7, #14]
 8009718:	2b80      	cmp	r3, #128	; 0x80
 800971a:	d008      	beq.n	800972e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	88db      	ldrh	r3, [r3, #6]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d104      	bne.n	800972e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009724:	7bbb      	ldrb	r3, [r7, #14]
 8009726:	4619      	mov	r1, r3
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f001 f8f7 	bl	800a91c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 fcf8 	bl	800a124 <USBD_CtlSendStatus>

              break;
 8009734:	e004      	b.n	8009740 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 fc2a 	bl	8009f92 <USBD_CtlError>
              break;
 800973e:	bf00      	nop
          }
          break;
 8009740:	e0e0      	b.n	8009904 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009748:	2b02      	cmp	r3, #2
 800974a:	d002      	beq.n	8009752 <USBD_StdEPReq+0xf2>
 800974c:	2b03      	cmp	r3, #3
 800974e:	d015      	beq.n	800977c <USBD_StdEPReq+0x11c>
 8009750:	e026      	b.n	80097a0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009752:	7bbb      	ldrb	r3, [r7, #14]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d00c      	beq.n	8009772 <USBD_StdEPReq+0x112>
 8009758:	7bbb      	ldrb	r3, [r7, #14]
 800975a:	2b80      	cmp	r3, #128	; 0x80
 800975c:	d009      	beq.n	8009772 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800975e:	7bbb      	ldrb	r3, [r7, #14]
 8009760:	4619      	mov	r1, r3
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f001 f8da 	bl	800a91c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009768:	2180      	movs	r1, #128	; 0x80
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f001 f8d6 	bl	800a91c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009770:	e01c      	b.n	80097ac <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8009772:	6839      	ldr	r1, [r7, #0]
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 fc0c 	bl	8009f92 <USBD_CtlError>
              break;
 800977a:	e017      	b.n	80097ac <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	885b      	ldrh	r3, [r3, #2]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d112      	bne.n	80097aa <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009784:	7bbb      	ldrb	r3, [r7, #14]
 8009786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800978a:	2b00      	cmp	r3, #0
 800978c:	d004      	beq.n	8009798 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800978e:	7bbb      	ldrb	r3, [r7, #14]
 8009790:	4619      	mov	r1, r3
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f001 f8f8 	bl	800a988 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 fcc3 	bl	800a124 <USBD_CtlSendStatus>
              }
              break;
 800979e:	e004      	b.n	80097aa <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80097a0:	6839      	ldr	r1, [r7, #0]
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 fbf5 	bl	8009f92 <USBD_CtlError>
              break;
 80097a8:	e000      	b.n	80097ac <USBD_StdEPReq+0x14c>
              break;
 80097aa:	bf00      	nop
          }
          break;
 80097ac:	e0aa      	b.n	8009904 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097b4:	2b02      	cmp	r3, #2
 80097b6:	d002      	beq.n	80097be <USBD_StdEPReq+0x15e>
 80097b8:	2b03      	cmp	r3, #3
 80097ba:	d032      	beq.n	8009822 <USBD_StdEPReq+0x1c2>
 80097bc:	e097      	b.n	80098ee <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097be:	7bbb      	ldrb	r3, [r7, #14]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d007      	beq.n	80097d4 <USBD_StdEPReq+0x174>
 80097c4:	7bbb      	ldrb	r3, [r7, #14]
 80097c6:	2b80      	cmp	r3, #128	; 0x80
 80097c8:	d004      	beq.n	80097d4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80097ca:	6839      	ldr	r1, [r7, #0]
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 fbe0 	bl	8009f92 <USBD_CtlError>
                break;
 80097d2:	e091      	b.n	80098f8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	da0b      	bge.n	80097f4 <USBD_StdEPReq+0x194>
 80097dc:	7bbb      	ldrb	r3, [r7, #14]
 80097de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097e2:	4613      	mov	r3, r2
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	4413      	add	r3, r2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	3310      	adds	r3, #16
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	4413      	add	r3, r2
 80097f0:	3304      	adds	r3, #4
 80097f2:	e00b      	b.n	800980c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80097f4:	7bbb      	ldrb	r3, [r7, #14]
 80097f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097fa:	4613      	mov	r3, r2
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	4413      	add	r3, r2
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	4413      	add	r3, r2
 800980a:	3304      	adds	r3, #4
 800980c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	2200      	movs	r2, #0
 8009812:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	2202      	movs	r2, #2
 8009818:	4619      	mov	r1, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 fc24 	bl	800a068 <USBD_CtlSendData>
              break;
 8009820:	e06a      	b.n	80098f8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009822:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009826:	2b00      	cmp	r3, #0
 8009828:	da11      	bge.n	800984e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800982a:	7bbb      	ldrb	r3, [r7, #14]
 800982c:	f003 020f 	and.w	r2, r3, #15
 8009830:	6879      	ldr	r1, [r7, #4]
 8009832:	4613      	mov	r3, r2
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	4413      	add	r3, r2
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	440b      	add	r3, r1
 800983c:	3318      	adds	r3, #24
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d117      	bne.n	8009874 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fba3 	bl	8009f92 <USBD_CtlError>
                  break;
 800984c:	e054      	b.n	80098f8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800984e:	7bbb      	ldrb	r3, [r7, #14]
 8009850:	f003 020f 	and.w	r2, r3, #15
 8009854:	6879      	ldr	r1, [r7, #4]
 8009856:	4613      	mov	r3, r2
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	4413      	add	r3, r2
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	440b      	add	r3, r1
 8009860:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d104      	bne.n	8009874 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800986a:	6839      	ldr	r1, [r7, #0]
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 fb90 	bl	8009f92 <USBD_CtlError>
                  break;
 8009872:	e041      	b.n	80098f8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009874:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009878:	2b00      	cmp	r3, #0
 800987a:	da0b      	bge.n	8009894 <USBD_StdEPReq+0x234>
 800987c:	7bbb      	ldrb	r3, [r7, #14]
 800987e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009882:	4613      	mov	r3, r2
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	4413      	add	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	3310      	adds	r3, #16
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	4413      	add	r3, r2
 8009890:	3304      	adds	r3, #4
 8009892:	e00b      	b.n	80098ac <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009894:	7bbb      	ldrb	r3, [r7, #14]
 8009896:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800989a:	4613      	mov	r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4413      	add	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	4413      	add	r3, r2
 80098aa:	3304      	adds	r3, #4
 80098ac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80098ae:	7bbb      	ldrb	r3, [r7, #14]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d002      	beq.n	80098ba <USBD_StdEPReq+0x25a>
 80098b4:	7bbb      	ldrb	r3, [r7, #14]
 80098b6:	2b80      	cmp	r3, #128	; 0x80
 80098b8:	d103      	bne.n	80098c2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	2200      	movs	r2, #0
 80098be:	601a      	str	r2, [r3, #0]
 80098c0:	e00e      	b.n	80098e0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80098c2:	7bbb      	ldrb	r3, [r7, #14]
 80098c4:	4619      	mov	r1, r3
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f001 f894 	bl	800a9f4 <USBD_LL_IsStallEP>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d003      	beq.n	80098da <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	2201      	movs	r2, #1
 80098d6:	601a      	str	r2, [r3, #0]
 80098d8:	e002      	b.n	80098e0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	2200      	movs	r2, #0
 80098de:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	2202      	movs	r2, #2
 80098e4:	4619      	mov	r1, r3
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fbbe 	bl	800a068 <USBD_CtlSendData>
              break;
 80098ec:	e004      	b.n	80098f8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80098ee:	6839      	ldr	r1, [r7, #0]
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 fb4e 	bl	8009f92 <USBD_CtlError>
              break;
 80098f6:	bf00      	nop
          }
          break;
 80098f8:	e004      	b.n	8009904 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80098fa:	6839      	ldr	r1, [r7, #0]
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 fb48 	bl	8009f92 <USBD_CtlError>
          break;
 8009902:	bf00      	nop
      }
      break;
 8009904:	e004      	b.n	8009910 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8009906:	6839      	ldr	r1, [r7, #0]
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 fb42 	bl	8009f92 <USBD_CtlError>
      break;
 800990e:	bf00      	nop
  }

  return ret;
 8009910:	7bfb      	ldrb	r3, [r7, #15]
}
 8009912:	4618      	mov	r0, r3
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
	...

0800991c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009926:	2300      	movs	r3, #0
 8009928:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800992a:	2300      	movs	r3, #0
 800992c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800992e:	2300      	movs	r3, #0
 8009930:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	885b      	ldrh	r3, [r3, #2]
 8009936:	0a1b      	lsrs	r3, r3, #8
 8009938:	b29b      	uxth	r3, r3
 800993a:	3b01      	subs	r3, #1
 800993c:	2b0e      	cmp	r3, #14
 800993e:	f200 8152 	bhi.w	8009be6 <USBD_GetDescriptor+0x2ca>
 8009942:	a201      	add	r2, pc, #4	; (adr r2, 8009948 <USBD_GetDescriptor+0x2c>)
 8009944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009948:	080099b9 	.word	0x080099b9
 800994c:	080099d1 	.word	0x080099d1
 8009950:	08009a11 	.word	0x08009a11
 8009954:	08009be7 	.word	0x08009be7
 8009958:	08009be7 	.word	0x08009be7
 800995c:	08009b87 	.word	0x08009b87
 8009960:	08009bb3 	.word	0x08009bb3
 8009964:	08009be7 	.word	0x08009be7
 8009968:	08009be7 	.word	0x08009be7
 800996c:	08009be7 	.word	0x08009be7
 8009970:	08009be7 	.word	0x08009be7
 8009974:	08009be7 	.word	0x08009be7
 8009978:	08009be7 	.word	0x08009be7
 800997c:	08009be7 	.word	0x08009be7
 8009980:	08009985 	.word	0x08009985
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800998a:	69db      	ldr	r3, [r3, #28]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d00b      	beq.n	80099a8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009996:	69db      	ldr	r3, [r3, #28]
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	7c12      	ldrb	r2, [r2, #16]
 800999c:	f107 0108 	add.w	r1, r7, #8
 80099a0:	4610      	mov	r0, r2
 80099a2:	4798      	blx	r3
 80099a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099a6:	e126      	b.n	8009bf6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80099a8:	6839      	ldr	r1, [r7, #0]
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 faf1 	bl	8009f92 <USBD_CtlError>
        err++;
 80099b0:	7afb      	ldrb	r3, [r7, #11]
 80099b2:	3301      	adds	r3, #1
 80099b4:	72fb      	strb	r3, [r7, #11]
      break;
 80099b6:	e11e      	b.n	8009bf6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	7c12      	ldrb	r2, [r2, #16]
 80099c4:	f107 0108 	add.w	r1, r7, #8
 80099c8:	4610      	mov	r0, r2
 80099ca:	4798      	blx	r3
 80099cc:	60f8      	str	r0, [r7, #12]
      break;
 80099ce:	e112      	b.n	8009bf6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	7c1b      	ldrb	r3, [r3, #16]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d10d      	bne.n	80099f4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e0:	f107 0208 	add.w	r2, r7, #8
 80099e4:	4610      	mov	r0, r2
 80099e6:	4798      	blx	r3
 80099e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	3301      	adds	r3, #1
 80099ee:	2202      	movs	r2, #2
 80099f0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80099f2:	e100      	b.n	8009bf6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099fc:	f107 0208 	add.w	r2, r7, #8
 8009a00:	4610      	mov	r0, r2
 8009a02:	4798      	blx	r3
 8009a04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	2202      	movs	r2, #2
 8009a0c:	701a      	strb	r2, [r3, #0]
      break;
 8009a0e:	e0f2      	b.n	8009bf6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	885b      	ldrh	r3, [r3, #2]
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	2b05      	cmp	r3, #5
 8009a18:	f200 80ac 	bhi.w	8009b74 <USBD_GetDescriptor+0x258>
 8009a1c:	a201      	add	r2, pc, #4	; (adr r2, 8009a24 <USBD_GetDescriptor+0x108>)
 8009a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a22:	bf00      	nop
 8009a24:	08009a3d 	.word	0x08009a3d
 8009a28:	08009a71 	.word	0x08009a71
 8009a2c:	08009aa5 	.word	0x08009aa5
 8009a30:	08009ad9 	.word	0x08009ad9
 8009a34:	08009b0d 	.word	0x08009b0d
 8009a38:	08009b41 	.word	0x08009b41
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00b      	beq.n	8009a60 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	7c12      	ldrb	r2, [r2, #16]
 8009a54:	f107 0108 	add.w	r1, r7, #8
 8009a58:	4610      	mov	r0, r2
 8009a5a:	4798      	blx	r3
 8009a5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a5e:	e091      	b.n	8009b84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a60:	6839      	ldr	r1, [r7, #0]
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fa95 	bl	8009f92 <USBD_CtlError>
            err++;
 8009a68:	7afb      	ldrb	r3, [r7, #11]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a6e:	e089      	b.n	8009b84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d00b      	beq.n	8009a94 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	7c12      	ldrb	r2, [r2, #16]
 8009a88:	f107 0108 	add.w	r1, r7, #8
 8009a8c:	4610      	mov	r0, r2
 8009a8e:	4798      	blx	r3
 8009a90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a92:	e077      	b.n	8009b84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a94:	6839      	ldr	r1, [r7, #0]
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 fa7b 	bl	8009f92 <USBD_CtlError>
            err++;
 8009a9c:	7afb      	ldrb	r3, [r7, #11]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	72fb      	strb	r3, [r7, #11]
          break;
 8009aa2:	e06f      	b.n	8009b84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00b      	beq.n	8009ac8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	7c12      	ldrb	r2, [r2, #16]
 8009abc:	f107 0108 	add.w	r1, r7, #8
 8009ac0:	4610      	mov	r0, r2
 8009ac2:	4798      	blx	r3
 8009ac4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ac6:	e05d      	b.n	8009b84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ac8:	6839      	ldr	r1, [r7, #0]
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 fa61 	bl	8009f92 <USBD_CtlError>
            err++;
 8009ad0:	7afb      	ldrb	r3, [r7, #11]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ad6:	e055      	b.n	8009b84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ade:	691b      	ldr	r3, [r3, #16]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00b      	beq.n	8009afc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	7c12      	ldrb	r2, [r2, #16]
 8009af0:	f107 0108 	add.w	r1, r7, #8
 8009af4:	4610      	mov	r0, r2
 8009af6:	4798      	blx	r3
 8009af8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009afa:	e043      	b.n	8009b84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009afc:	6839      	ldr	r1, [r7, #0]
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 fa47 	bl	8009f92 <USBD_CtlError>
            err++;
 8009b04:	7afb      	ldrb	r3, [r7, #11]
 8009b06:	3301      	adds	r3, #1
 8009b08:	72fb      	strb	r3, [r7, #11]
          break;
 8009b0a:	e03b      	b.n	8009b84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b12:	695b      	ldr	r3, [r3, #20]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00b      	beq.n	8009b30 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b1e:	695b      	ldr	r3, [r3, #20]
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	7c12      	ldrb	r2, [r2, #16]
 8009b24:	f107 0108 	add.w	r1, r7, #8
 8009b28:	4610      	mov	r0, r2
 8009b2a:	4798      	blx	r3
 8009b2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b2e:	e029      	b.n	8009b84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b30:	6839      	ldr	r1, [r7, #0]
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 fa2d 	bl	8009f92 <USBD_CtlError>
            err++;
 8009b38:	7afb      	ldrb	r3, [r7, #11]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b3e:	e021      	b.n	8009b84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b46:	699b      	ldr	r3, [r3, #24]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00b      	beq.n	8009b64 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	7c12      	ldrb	r2, [r2, #16]
 8009b58:	f107 0108 	add.w	r1, r7, #8
 8009b5c:	4610      	mov	r0, r2
 8009b5e:	4798      	blx	r3
 8009b60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b62:	e00f      	b.n	8009b84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b64:	6839      	ldr	r1, [r7, #0]
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 fa13 	bl	8009f92 <USBD_CtlError>
            err++;
 8009b6c:	7afb      	ldrb	r3, [r7, #11]
 8009b6e:	3301      	adds	r3, #1
 8009b70:	72fb      	strb	r3, [r7, #11]
          break;
 8009b72:	e007      	b.n	8009b84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fa0b 	bl	8009f92 <USBD_CtlError>
          err++;
 8009b7c:	7afb      	ldrb	r3, [r7, #11]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009b82:	e038      	b.n	8009bf6 <USBD_GetDescriptor+0x2da>
 8009b84:	e037      	b.n	8009bf6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	7c1b      	ldrb	r3, [r3, #16]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d109      	bne.n	8009ba2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b96:	f107 0208 	add.w	r2, r7, #8
 8009b9a:	4610      	mov	r0, r2
 8009b9c:	4798      	blx	r3
 8009b9e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ba0:	e029      	b.n	8009bf6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009ba2:	6839      	ldr	r1, [r7, #0]
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 f9f4 	bl	8009f92 <USBD_CtlError>
        err++;
 8009baa:	7afb      	ldrb	r3, [r7, #11]
 8009bac:	3301      	adds	r3, #1
 8009bae:	72fb      	strb	r3, [r7, #11]
      break;
 8009bb0:	e021      	b.n	8009bf6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	7c1b      	ldrb	r3, [r3, #16]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d10d      	bne.n	8009bd6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bc2:	f107 0208 	add.w	r2, r7, #8
 8009bc6:	4610      	mov	r0, r2
 8009bc8:	4798      	blx	r3
 8009bca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	2207      	movs	r2, #7
 8009bd2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009bd4:	e00f      	b.n	8009bf6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009bd6:	6839      	ldr	r1, [r7, #0]
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f9da 	bl	8009f92 <USBD_CtlError>
        err++;
 8009bde:	7afb      	ldrb	r3, [r7, #11]
 8009be0:	3301      	adds	r3, #1
 8009be2:	72fb      	strb	r3, [r7, #11]
      break;
 8009be4:	e007      	b.n	8009bf6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009be6:	6839      	ldr	r1, [r7, #0]
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 f9d2 	bl	8009f92 <USBD_CtlError>
      err++;
 8009bee:	7afb      	ldrb	r3, [r7, #11]
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	72fb      	strb	r3, [r7, #11]
      break;
 8009bf4:	bf00      	nop
  }

  if (err != 0U)
 8009bf6:	7afb      	ldrb	r3, [r7, #11]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d11c      	bne.n	8009c36 <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009bfc:	893b      	ldrh	r3, [r7, #8]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d011      	beq.n	8009c26 <USBD_GetDescriptor+0x30a>
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	88db      	ldrh	r3, [r3, #6]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00d      	beq.n	8009c26 <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	88da      	ldrh	r2, [r3, #6]
 8009c0e:	893b      	ldrh	r3, [r7, #8]
 8009c10:	4293      	cmp	r3, r2
 8009c12:	bf28      	it	cs
 8009c14:	4613      	movcs	r3, r2
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009c1a:	893b      	ldrh	r3, [r7, #8]
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	68f9      	ldr	r1, [r7, #12]
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 fa21 	bl	800a068 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	88db      	ldrh	r3, [r3, #6]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d104      	bne.n	8009c38 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 fa78 	bl	800a124 <USBD_CtlSendStatus>
 8009c34:	e000      	b.n	8009c38 <USBD_GetDescriptor+0x31c>
    return;
 8009c36:	bf00      	nop
    }
  }
}
 8009c38:	3710      	adds	r7, #16
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop

08009c40 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	889b      	ldrh	r3, [r3, #4]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d130      	bne.n	8009cb4 <USBD_SetAddress+0x74>
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	88db      	ldrh	r3, [r3, #6]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d12c      	bne.n	8009cb4 <USBD_SetAddress+0x74>
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	885b      	ldrh	r3, [r3, #2]
 8009c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8009c60:	d828      	bhi.n	8009cb4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	885b      	ldrh	r3, [r3, #2]
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c74:	2b03      	cmp	r3, #3
 8009c76:	d104      	bne.n	8009c82 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009c78:	6839      	ldr	r1, [r7, #0]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 f989 	bl	8009f92 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c80:	e01c      	b.n	8009cbc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	7bfa      	ldrb	r2, [r7, #15]
 8009c86:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c8a:	7bfb      	ldrb	r3, [r7, #15]
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 fed6 	bl	800aa40 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fa45 	bl	800a124 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c9a:	7bfb      	ldrb	r3, [r7, #15]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d004      	beq.n	8009caa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2202      	movs	r2, #2
 8009ca4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ca8:	e008      	b.n	8009cbc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2201      	movs	r2, #1
 8009cae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cb2:	e003      	b.n	8009cbc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009cb4:	6839      	ldr	r1, [r7, #0]
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 f96b 	bl	8009f92 <USBD_CtlError>
  }
}
 8009cbc:	bf00      	nop
 8009cbe:	3710      	adds	r7, #16
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	885b      	ldrh	r3, [r3, #2]
 8009cd2:	b2da      	uxtb	r2, r3
 8009cd4:	4b41      	ldr	r3, [pc, #260]	; (8009ddc <USBD_SetConfig+0x118>)
 8009cd6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009cd8:	4b40      	ldr	r3, [pc, #256]	; (8009ddc <USBD_SetConfig+0x118>)
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d904      	bls.n	8009cea <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009ce0:	6839      	ldr	r1, [r7, #0]
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 f955 	bl	8009f92 <USBD_CtlError>
 8009ce8:	e075      	b.n	8009dd6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	d002      	beq.n	8009cfa <USBD_SetConfig+0x36>
 8009cf4:	2b03      	cmp	r3, #3
 8009cf6:	d023      	beq.n	8009d40 <USBD_SetConfig+0x7c>
 8009cf8:	e062      	b.n	8009dc0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009cfa:	4b38      	ldr	r3, [pc, #224]	; (8009ddc <USBD_SetConfig+0x118>)
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d01a      	beq.n	8009d38 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009d02:	4b36      	ldr	r3, [pc, #216]	; (8009ddc <USBD_SetConfig+0x118>)
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	461a      	mov	r2, r3
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2203      	movs	r2, #3
 8009d10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009d14:	4b31      	ldr	r3, [pc, #196]	; (8009ddc <USBD_SetConfig+0x118>)
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	4619      	mov	r1, r3
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f7ff f9c7 	bl	80090ae <USBD_SetClassConfig>
 8009d20:	4603      	mov	r3, r0
 8009d22:	2b02      	cmp	r3, #2
 8009d24:	d104      	bne.n	8009d30 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009d26:	6839      	ldr	r1, [r7, #0]
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 f932 	bl	8009f92 <USBD_CtlError>
            return;
 8009d2e:	e052      	b.n	8009dd6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 f9f7 	bl	800a124 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009d36:	e04e      	b.n	8009dd6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 f9f3 	bl	800a124 <USBD_CtlSendStatus>
        break;
 8009d3e:	e04a      	b.n	8009dd6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009d40:	4b26      	ldr	r3, [pc, #152]	; (8009ddc <USBD_SetConfig+0x118>)
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d112      	bne.n	8009d6e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2202      	movs	r2, #2
 8009d4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009d50:	4b22      	ldr	r3, [pc, #136]	; (8009ddc <USBD_SetConfig+0x118>)
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	461a      	mov	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009d5a:	4b20      	ldr	r3, [pc, #128]	; (8009ddc <USBD_SetConfig+0x118>)
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	4619      	mov	r1, r3
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f7ff f9c3 	bl	80090ec <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 f9dc 	bl	800a124 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009d6c:	e033      	b.n	8009dd6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009d6e:	4b1b      	ldr	r3, [pc, #108]	; (8009ddc <USBD_SetConfig+0x118>)
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	461a      	mov	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d01d      	beq.n	8009db8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	4619      	mov	r1, r3
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f7ff f9b1 	bl	80090ec <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009d8a:	4b14      	ldr	r3, [pc, #80]	; (8009ddc <USBD_SetConfig+0x118>)
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009d94:	4b11      	ldr	r3, [pc, #68]	; (8009ddc <USBD_SetConfig+0x118>)
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	4619      	mov	r1, r3
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7ff f987 	bl	80090ae <USBD_SetClassConfig>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d104      	bne.n	8009db0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009da6:	6839      	ldr	r1, [r7, #0]
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 f8f2 	bl	8009f92 <USBD_CtlError>
            return;
 8009dae:	e012      	b.n	8009dd6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 f9b7 	bl	800a124 <USBD_CtlSendStatus>
        break;
 8009db6:	e00e      	b.n	8009dd6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f9b3 	bl	800a124 <USBD_CtlSendStatus>
        break;
 8009dbe:	e00a      	b.n	8009dd6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009dc0:	6839      	ldr	r1, [r7, #0]
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 f8e5 	bl	8009f92 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009dc8:	4b04      	ldr	r3, [pc, #16]	; (8009ddc <USBD_SetConfig+0x118>)
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	4619      	mov	r1, r3
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f7ff f98c 	bl	80090ec <USBD_ClrClassConfig>
        break;
 8009dd4:	bf00      	nop
    }
  }
}
 8009dd6:	3708      	adds	r7, #8
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	2000031d 	.word	0x2000031d

08009de0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	88db      	ldrh	r3, [r3, #6]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d004      	beq.n	8009dfc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009df2:	6839      	ldr	r1, [r7, #0]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 f8cc 	bl	8009f92 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009dfa:	e021      	b.n	8009e40 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	db17      	blt.n	8009e36 <USBD_GetConfig+0x56>
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	dd02      	ble.n	8009e10 <USBD_GetConfig+0x30>
 8009e0a:	2b03      	cmp	r3, #3
 8009e0c:	d00b      	beq.n	8009e26 <USBD_GetConfig+0x46>
 8009e0e:	e012      	b.n	8009e36 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	3308      	adds	r3, #8
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 f922 	bl	800a068 <USBD_CtlSendData>
        break;
 8009e24:	e00c      	b.n	8009e40 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	3304      	adds	r3, #4
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 f91a 	bl	800a068 <USBD_CtlSendData>
        break;
 8009e34:	e004      	b.n	8009e40 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8009e36:	6839      	ldr	r1, [r7, #0]
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 f8aa 	bl	8009f92 <USBD_CtlError>
        break;
 8009e3e:	bf00      	nop
}
 8009e40:	bf00      	nop
 8009e42:	3708      	adds	r7, #8
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	d81e      	bhi.n	8009e9c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	88db      	ldrh	r3, [r3, #6]
 8009e62:	2b02      	cmp	r3, #2
 8009e64:	d004      	beq.n	8009e70 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009e66:	6839      	ldr	r1, [r7, #0]
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 f892 	bl	8009f92 <USBD_CtlError>
        break;
 8009e6e:	e01a      	b.n	8009ea6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d005      	beq.n	8009e8c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	f043 0202 	orr.w	r2, r3, #2
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	330c      	adds	r3, #12
 8009e90:	2202      	movs	r2, #2
 8009e92:	4619      	mov	r1, r3
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 f8e7 	bl	800a068 <USBD_CtlSendData>
      break;
 8009e9a:	e004      	b.n	8009ea6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009e9c:	6839      	ldr	r1, [r7, #0]
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 f877 	bl	8009f92 <USBD_CtlError>
      break;
 8009ea4:	bf00      	nop
  }
}
 8009ea6:	bf00      	nop
 8009ea8:	3708      	adds	r7, #8
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b082      	sub	sp, #8
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
 8009eb6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	885b      	ldrh	r3, [r3, #2]
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d106      	bne.n	8009ece <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 f92b 	bl	800a124 <USBD_CtlSendStatus>
  }
}
 8009ece:	bf00      	nop
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b082      	sub	sp, #8
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
 8009ede:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ee6:	3b01      	subs	r3, #1
 8009ee8:	2b02      	cmp	r3, #2
 8009eea:	d80b      	bhi.n	8009f04 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	885b      	ldrh	r3, [r3, #2]
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d10c      	bne.n	8009f0e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 f911 	bl	800a124 <USBD_CtlSendStatus>
      }
      break;
 8009f02:	e004      	b.n	8009f0e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009f04:	6839      	ldr	r1, [r7, #0]
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 f843 	bl	8009f92 <USBD_CtlError>
      break;
 8009f0c:	e000      	b.n	8009f10 <USBD_ClrFeature+0x3a>
      break;
 8009f0e:	bf00      	nop
  }
}
 8009f10:	bf00      	nop
 8009f12:	3708      	adds	r7, #8
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	781a      	ldrb	r2, [r3, #0]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	785a      	ldrb	r2, [r3, #1]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	3302      	adds	r3, #2
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	b29a      	uxth	r2, r3
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	3303      	adds	r3, #3
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	021b      	lsls	r3, r3, #8
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	4413      	add	r3, r2
 8009f48:	b29a      	uxth	r2, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	3304      	adds	r3, #4
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	b29a      	uxth	r2, r3
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	3305      	adds	r3, #5
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	021b      	lsls	r3, r3, #8
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	4413      	add	r3, r2
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	3306      	adds	r3, #6
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	3307      	adds	r3, #7
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	021b      	lsls	r3, r3, #8
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	4413      	add	r3, r2
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	80da      	strh	r2, [r3, #6]

}
 8009f86:	bf00      	nop
 8009f88:	370c      	adds	r7, #12
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr

08009f92 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b082      	sub	sp, #8
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
 8009f9a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009f9c:	2180      	movs	r1, #128	; 0x80
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 fcbc 	bl	800a91c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009fa4:	2100      	movs	r1, #0
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 fcb8 	bl	800a91c <USBD_LL_StallEP>
}
 8009fac:	bf00      	nop
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b086      	sub	sp, #24
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d032      	beq.n	800a030 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009fca:	68f8      	ldr	r0, [r7, #12]
 8009fcc:	f000 f834 	bl	800a038 <USBD_GetLen>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	005b      	lsls	r3, r3, #1
 8009fd8:	b29a      	uxth	r2, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009fde:	7dfb      	ldrb	r3, [r7, #23]
 8009fe0:	1c5a      	adds	r2, r3, #1
 8009fe2:	75fa      	strb	r2, [r7, #23]
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	4413      	add	r3, r2
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	7812      	ldrb	r2, [r2, #0]
 8009fee:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009ff0:	7dfb      	ldrb	r3, [r7, #23]
 8009ff2:	1c5a      	adds	r2, r3, #1
 8009ff4:	75fa      	strb	r2, [r7, #23]
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	2203      	movs	r2, #3
 8009ffe:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a000:	e012      	b.n	800a028 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	1c5a      	adds	r2, r3, #1
 800a006:	60fa      	str	r2, [r7, #12]
 800a008:	7dfa      	ldrb	r2, [r7, #23]
 800a00a:	1c51      	adds	r1, r2, #1
 800a00c:	75f9      	strb	r1, [r7, #23]
 800a00e:	4611      	mov	r1, r2
 800a010:	68ba      	ldr	r2, [r7, #8]
 800a012:	440a      	add	r2, r1
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a018:	7dfb      	ldrb	r3, [r7, #23]
 800a01a:	1c5a      	adds	r2, r3, #1
 800a01c:	75fa      	strb	r2, [r7, #23]
 800a01e:	461a      	mov	r2, r3
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	4413      	add	r3, r2
 800a024:	2200      	movs	r2, #0
 800a026:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d1e8      	bne.n	800a002 <USBD_GetString+0x4e>
    }
  }
}
 800a030:	bf00      	nop
 800a032:	3718      	adds	r7, #24
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a040:	2300      	movs	r3, #0
 800a042:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a044:	e005      	b.n	800a052 <USBD_GetLen+0x1a>
  {
    len++;
 800a046:	7bfb      	ldrb	r3, [r7, #15]
 800a048:	3301      	adds	r3, #1
 800a04a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	3301      	adds	r3, #1
 800a050:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d1f5      	bne.n	800a046 <USBD_GetLen+0xe>
  }

  return len;
 800a05a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3714      	adds	r7, #20
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	4613      	mov	r3, r2
 800a074:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2202      	movs	r2, #2
 800a07a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a07e:	88fa      	ldrh	r2, [r7, #6]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a084:	88fa      	ldrh	r2, [r7, #6]
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a08a:	88fb      	ldrh	r3, [r7, #6]
 800a08c:	68ba      	ldr	r2, [r7, #8]
 800a08e:	2100      	movs	r1, #0
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f000 fd0b 	bl	800aaac <USBD_LL_Transmit>

  return USBD_OK;
 800a096:	2300      	movs	r3, #0
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3710      	adds	r7, #16
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a0ae:	88fb      	ldrh	r3, [r7, #6]
 800a0b0:	68ba      	ldr	r2, [r7, #8]
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	68f8      	ldr	r0, [r7, #12]
 800a0b6:	f000 fcf9 	bl	800aaac <USBD_LL_Transmit>

  return USBD_OK;
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	4613      	mov	r3, r2
 800a0d0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2203      	movs	r2, #3
 800a0d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a0da:	88fa      	ldrh	r2, [r7, #6]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a0e2:	88fa      	ldrh	r2, [r7, #6]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a0ea:	88fb      	ldrh	r3, [r7, #6]
 800a0ec:	68ba      	ldr	r2, [r7, #8]
 800a0ee:	2100      	movs	r1, #0
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f000 fd15 	bl	800ab20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3710      	adds	r7, #16
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	4613      	mov	r3, r2
 800a10c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a10e:	88fb      	ldrh	r3, [r7, #6]
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	2100      	movs	r1, #0
 800a114:	68f8      	ldr	r0, [r7, #12]
 800a116:	f000 fd03 	bl	800ab20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a11a:	2300      	movs	r3, #0
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3710      	adds	r7, #16
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2204      	movs	r2, #4
 800a130:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a134:	2300      	movs	r3, #0
 800a136:	2200      	movs	r2, #0
 800a138:	2100      	movs	r1, #0
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 fcb6 	bl	800aaac <USBD_LL_Transmit>

  return USBD_OK;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3708      	adds	r7, #8
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b082      	sub	sp, #8
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2205      	movs	r2, #5
 800a156:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a15a:	2300      	movs	r3, #0
 800a15c:	2200      	movs	r2, #0
 800a15e:	2100      	movs	r1, #0
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 fcdd 	bl	800ab20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3708      	adds	r7, #8
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a174:	2200      	movs	r2, #0
 800a176:	4912      	ldr	r1, [pc, #72]	; (800a1c0 <MX_USB_DEVICE_Init+0x50>)
 800a178:	4812      	ldr	r0, [pc, #72]	; (800a1c4 <MX_USB_DEVICE_Init+0x54>)
 800a17a:	f7fe ff3c 	bl	8008ff6 <USBD_Init>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d001      	beq.n	800a188 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a184:	f7f8 f94a 	bl	800241c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a188:	490f      	ldr	r1, [pc, #60]	; (800a1c8 <MX_USB_DEVICE_Init+0x58>)
 800a18a:	480e      	ldr	r0, [pc, #56]	; (800a1c4 <MX_USB_DEVICE_Init+0x54>)
 800a18c:	f7fe ff5e 	bl	800904c <USBD_RegisterClass>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d001      	beq.n	800a19a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a196:	f7f8 f941 	bl	800241c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a19a:	490c      	ldr	r1, [pc, #48]	; (800a1cc <MX_USB_DEVICE_Init+0x5c>)
 800a19c:	4809      	ldr	r0, [pc, #36]	; (800a1c4 <MX_USB_DEVICE_Init+0x54>)
 800a19e:	f7fe febb 	bl	8008f18 <USBD_CDC_RegisterInterface>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d001      	beq.n	800a1ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a1a8:	f7f8 f938 	bl	800241c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a1ac:	4805      	ldr	r0, [pc, #20]	; (800a1c4 <MX_USB_DEVICE_Init+0x54>)
 800a1ae:	f7fe ff67 	bl	8009080 <USBD_Start>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d001      	beq.n	800a1bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a1b8:	f7f8 f930 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a1bc:	bf00      	nop
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	2000012c 	.word	0x2000012c
 800a1c4:	20000674 	.word	0x20000674
 800a1c8:	20000018 	.word	0x20000018
 800a1cc:	2000011c 	.word	0x2000011c

0800a1d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	4905      	ldr	r1, [pc, #20]	; (800a1ec <CDC_Init_FS+0x1c>)
 800a1d8:	4805      	ldr	r0, [pc, #20]	; (800a1f0 <CDC_Init_FS+0x20>)
 800a1da:	f7fe feb4 	bl	8008f46 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a1de:	4905      	ldr	r1, [pc, #20]	; (800a1f4 <CDC_Init_FS+0x24>)
 800a1e0:	4803      	ldr	r0, [pc, #12]	; (800a1f0 <CDC_Init_FS+0x20>)
 800a1e2:	f7fe feca 	bl	8008f7a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a1e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	20000d20 	.word	0x20000d20
 800a1f0:	20000674 	.word	0x20000674
 800a1f4:	20000938 	.word	0x20000938

0800a1f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a1fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	4603      	mov	r3, r0
 800a210:	6039      	str	r1, [r7, #0]
 800a212:	71fb      	strb	r3, [r7, #7]
 800a214:	4613      	mov	r3, r2
 800a216:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a218:	79fb      	ldrb	r3, [r7, #7]
 800a21a:	2b23      	cmp	r3, #35	; 0x23
 800a21c:	d84a      	bhi.n	800a2b4 <CDC_Control_FS+0xac>
 800a21e:	a201      	add	r2, pc, #4	; (adr r2, 800a224 <CDC_Control_FS+0x1c>)
 800a220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a224:	0800a2b5 	.word	0x0800a2b5
 800a228:	0800a2b5 	.word	0x0800a2b5
 800a22c:	0800a2b5 	.word	0x0800a2b5
 800a230:	0800a2b5 	.word	0x0800a2b5
 800a234:	0800a2b5 	.word	0x0800a2b5
 800a238:	0800a2b5 	.word	0x0800a2b5
 800a23c:	0800a2b5 	.word	0x0800a2b5
 800a240:	0800a2b5 	.word	0x0800a2b5
 800a244:	0800a2b5 	.word	0x0800a2b5
 800a248:	0800a2b5 	.word	0x0800a2b5
 800a24c:	0800a2b5 	.word	0x0800a2b5
 800a250:	0800a2b5 	.word	0x0800a2b5
 800a254:	0800a2b5 	.word	0x0800a2b5
 800a258:	0800a2b5 	.word	0x0800a2b5
 800a25c:	0800a2b5 	.word	0x0800a2b5
 800a260:	0800a2b5 	.word	0x0800a2b5
 800a264:	0800a2b5 	.word	0x0800a2b5
 800a268:	0800a2b5 	.word	0x0800a2b5
 800a26c:	0800a2b5 	.word	0x0800a2b5
 800a270:	0800a2b5 	.word	0x0800a2b5
 800a274:	0800a2b5 	.word	0x0800a2b5
 800a278:	0800a2b5 	.word	0x0800a2b5
 800a27c:	0800a2b5 	.word	0x0800a2b5
 800a280:	0800a2b5 	.word	0x0800a2b5
 800a284:	0800a2b5 	.word	0x0800a2b5
 800a288:	0800a2b5 	.word	0x0800a2b5
 800a28c:	0800a2b5 	.word	0x0800a2b5
 800a290:	0800a2b5 	.word	0x0800a2b5
 800a294:	0800a2b5 	.word	0x0800a2b5
 800a298:	0800a2b5 	.word	0x0800a2b5
 800a29c:	0800a2b5 	.word	0x0800a2b5
 800a2a0:	0800a2b5 	.word	0x0800a2b5
 800a2a4:	0800a2b5 	.word	0x0800a2b5
 800a2a8:	0800a2b5 	.word	0x0800a2b5
 800a2ac:	0800a2b5 	.word	0x0800a2b5
 800a2b0:	0800a2b5 	.word	0x0800a2b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a2b4:	bf00      	nop
  }

  return (USBD_OK);
 800a2b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a2ce:	6879      	ldr	r1, [r7, #4]
 800a2d0:	4805      	ldr	r0, [pc, #20]	; (800a2e8 <CDC_Receive_FS+0x24>)
 800a2d2:	f7fe fe52 	bl	8008f7a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a2d6:	4804      	ldr	r0, [pc, #16]	; (800a2e8 <CDC_Receive_FS+0x24>)
 800a2d8:	f7fe fe63 	bl	8008fa2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a2dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	20000674 	.word	0x20000674

0800a2ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	6039      	str	r1, [r7, #0]
 800a2f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	2212      	movs	r2, #18
 800a2fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a2fe:	4b03      	ldr	r3, [pc, #12]	; (800a30c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a300:	4618      	mov	r0, r3
 800a302:	370c      	adds	r7, #12
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr
 800a30c:	2000014c 	.word	0x2000014c

0800a310 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	4603      	mov	r3, r0
 800a318:	6039      	str	r1, [r7, #0]
 800a31a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	2204      	movs	r2, #4
 800a320:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a322:	4b03      	ldr	r3, [pc, #12]	; (800a330 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a324:	4618      	mov	r0, r3
 800a326:	370c      	adds	r7, #12
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr
 800a330:	2000016c 	.word	0x2000016c

0800a334 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	4603      	mov	r3, r0
 800a33c:	6039      	str	r1, [r7, #0]
 800a33e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a340:	79fb      	ldrb	r3, [r7, #7]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d105      	bne.n	800a352 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a346:	683a      	ldr	r2, [r7, #0]
 800a348:	4907      	ldr	r1, [pc, #28]	; (800a368 <USBD_FS_ProductStrDescriptor+0x34>)
 800a34a:	4808      	ldr	r0, [pc, #32]	; (800a36c <USBD_FS_ProductStrDescriptor+0x38>)
 800a34c:	f7ff fe32 	bl	8009fb4 <USBD_GetString>
 800a350:	e004      	b.n	800a35c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a352:	683a      	ldr	r2, [r7, #0]
 800a354:	4904      	ldr	r1, [pc, #16]	; (800a368 <USBD_FS_ProductStrDescriptor+0x34>)
 800a356:	4805      	ldr	r0, [pc, #20]	; (800a36c <USBD_FS_ProductStrDescriptor+0x38>)
 800a358:	f7ff fe2c 	bl	8009fb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a35c:	4b02      	ldr	r3, [pc, #8]	; (800a368 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3708      	adds	r7, #8
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	20001108 	.word	0x20001108
 800a36c:	0800ad04 	.word	0x0800ad04

0800a370 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	4603      	mov	r3, r0
 800a378:	6039      	str	r1, [r7, #0]
 800a37a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a37c:	683a      	ldr	r2, [r7, #0]
 800a37e:	4904      	ldr	r1, [pc, #16]	; (800a390 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a380:	4804      	ldr	r0, [pc, #16]	; (800a394 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a382:	f7ff fe17 	bl	8009fb4 <USBD_GetString>
  return USBD_StrDesc;
 800a386:	4b02      	ldr	r3, [pc, #8]	; (800a390 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3708      	adds	r7, #8
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	20001108 	.word	0x20001108
 800a394:	0800ad1c 	.word	0x0800ad1c

0800a398 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	4603      	mov	r3, r0
 800a3a0:	6039      	str	r1, [r7, #0]
 800a3a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	221a      	movs	r2, #26
 800a3a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a3aa:	f000 f855 	bl	800a458 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a3ae:	4b02      	ldr	r3, [pc, #8]	; (800a3b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3708      	adds	r7, #8
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	20000170 	.word	0x20000170

0800a3bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	6039      	str	r1, [r7, #0]
 800a3c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a3c8:	79fb      	ldrb	r3, [r7, #7]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d105      	bne.n	800a3da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a3ce:	683a      	ldr	r2, [r7, #0]
 800a3d0:	4907      	ldr	r1, [pc, #28]	; (800a3f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a3d2:	4808      	ldr	r0, [pc, #32]	; (800a3f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a3d4:	f7ff fdee 	bl	8009fb4 <USBD_GetString>
 800a3d8:	e004      	b.n	800a3e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a3da:	683a      	ldr	r2, [r7, #0]
 800a3dc:	4904      	ldr	r1, [pc, #16]	; (800a3f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a3de:	4805      	ldr	r0, [pc, #20]	; (800a3f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a3e0:	f7ff fde8 	bl	8009fb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3e4:	4b02      	ldr	r3, [pc, #8]	; (800a3f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20001108 	.word	0x20001108
 800a3f4:	0800ad30 	.word	0x0800ad30

0800a3f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	4603      	mov	r3, r0
 800a400:	6039      	str	r1, [r7, #0]
 800a402:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a404:	79fb      	ldrb	r3, [r7, #7]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d105      	bne.n	800a416 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a40a:	683a      	ldr	r2, [r7, #0]
 800a40c:	4907      	ldr	r1, [pc, #28]	; (800a42c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a40e:	4808      	ldr	r0, [pc, #32]	; (800a430 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a410:	f7ff fdd0 	bl	8009fb4 <USBD_GetString>
 800a414:	e004      	b.n	800a420 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a416:	683a      	ldr	r2, [r7, #0]
 800a418:	4904      	ldr	r1, [pc, #16]	; (800a42c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a41a:	4805      	ldr	r0, [pc, #20]	; (800a430 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a41c:	f7ff fdca 	bl	8009fb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a420:	4b02      	ldr	r3, [pc, #8]	; (800a42c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a422:	4618      	mov	r0, r3
 800a424:	3708      	adds	r7, #8
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	20001108 	.word	0x20001108
 800a430:	0800ad3c 	.word	0x0800ad3c

0800a434 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	4603      	mov	r3, r0
 800a43c:	6039      	str	r1, [r7, #0]
 800a43e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	220c      	movs	r2, #12
 800a444:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a446:	4b03      	ldr	r3, [pc, #12]	; (800a454 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a448:	4618      	mov	r0, r3
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr
 800a454:	20000160 	.word	0x20000160

0800a458 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a45e:	4b0f      	ldr	r3, [pc, #60]	; (800a49c <Get_SerialNum+0x44>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a464:	4b0e      	ldr	r3, [pc, #56]	; (800a4a0 <Get_SerialNum+0x48>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a46a:	4b0e      	ldr	r3, [pc, #56]	; (800a4a4 <Get_SerialNum+0x4c>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a470:	68fa      	ldr	r2, [r7, #12]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4413      	add	r3, r2
 800a476:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d009      	beq.n	800a492 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a47e:	2208      	movs	r2, #8
 800a480:	4909      	ldr	r1, [pc, #36]	; (800a4a8 <Get_SerialNum+0x50>)
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	f000 f814 	bl	800a4b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a488:	2204      	movs	r2, #4
 800a48a:	4908      	ldr	r1, [pc, #32]	; (800a4ac <Get_SerialNum+0x54>)
 800a48c:	68b8      	ldr	r0, [r7, #8]
 800a48e:	f000 f80f 	bl	800a4b0 <IntToUnicode>
  }
}
 800a492:	bf00      	nop
 800a494:	3710      	adds	r7, #16
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	1fff7590 	.word	0x1fff7590
 800a4a0:	1fff7594 	.word	0x1fff7594
 800a4a4:	1fff7598 	.word	0x1fff7598
 800a4a8:	20000172 	.word	0x20000172
 800a4ac:	20000182 	.word	0x20000182

0800a4b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b087      	sub	sp, #28
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	60f8      	str	r0, [r7, #12]
 800a4b8:	60b9      	str	r1, [r7, #8]
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	75fb      	strb	r3, [r7, #23]
 800a4c6:	e027      	b.n	800a518 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	0f1b      	lsrs	r3, r3, #28
 800a4cc:	2b09      	cmp	r3, #9
 800a4ce:	d80b      	bhi.n	800a4e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	0f1b      	lsrs	r3, r3, #28
 800a4d4:	b2da      	uxtb	r2, r3
 800a4d6:	7dfb      	ldrb	r3, [r7, #23]
 800a4d8:	005b      	lsls	r3, r3, #1
 800a4da:	4619      	mov	r1, r3
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	440b      	add	r3, r1
 800a4e0:	3230      	adds	r2, #48	; 0x30
 800a4e2:	b2d2      	uxtb	r2, r2
 800a4e4:	701a      	strb	r2, [r3, #0]
 800a4e6:	e00a      	b.n	800a4fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	0f1b      	lsrs	r3, r3, #28
 800a4ec:	b2da      	uxtb	r2, r3
 800a4ee:	7dfb      	ldrb	r3, [r7, #23]
 800a4f0:	005b      	lsls	r3, r3, #1
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	440b      	add	r3, r1
 800a4f8:	3237      	adds	r2, #55	; 0x37
 800a4fa:	b2d2      	uxtb	r2, r2
 800a4fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	011b      	lsls	r3, r3, #4
 800a502:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a504:	7dfb      	ldrb	r3, [r7, #23]
 800a506:	005b      	lsls	r3, r3, #1
 800a508:	3301      	adds	r3, #1
 800a50a:	68ba      	ldr	r2, [r7, #8]
 800a50c:	4413      	add	r3, r2
 800a50e:	2200      	movs	r2, #0
 800a510:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a512:	7dfb      	ldrb	r3, [r7, #23]
 800a514:	3301      	adds	r3, #1
 800a516:	75fb      	strb	r3, [r7, #23]
 800a518:	7dfa      	ldrb	r2, [r7, #23]
 800a51a:	79fb      	ldrb	r3, [r7, #7]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d3d3      	bcc.n	800a4c8 <IntToUnicode+0x18>
  }
}
 800a520:	bf00      	nop
 800a522:	371c      	adds	r7, #28
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b08a      	sub	sp, #40	; 0x28
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a534:	f107 0314 	add.w	r3, r7, #20
 800a538:	2200      	movs	r2, #0
 800a53a:	601a      	str	r2, [r3, #0]
 800a53c:	605a      	str	r2, [r3, #4]
 800a53e:	609a      	str	r2, [r3, #8]
 800a540:	60da      	str	r2, [r3, #12]
 800a542:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a1c      	ldr	r2, [pc, #112]	; (800a5bc <HAL_PCD_MspInit+0x90>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d131      	bne.n	800a5b2 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a54e:	4b1c      	ldr	r3, [pc, #112]	; (800a5c0 <HAL_PCD_MspInit+0x94>)
 800a550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a552:	4a1b      	ldr	r2, [pc, #108]	; (800a5c0 <HAL_PCD_MspInit+0x94>)
 800a554:	f043 0301 	orr.w	r3, r3, #1
 800a558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a55a:	4b19      	ldr	r3, [pc, #100]	; (800a5c0 <HAL_PCD_MspInit+0x94>)
 800a55c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a55e:	f003 0301 	and.w	r3, r3, #1
 800a562:	613b      	str	r3, [r7, #16]
 800a564:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a566:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a56a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a56c:	2302      	movs	r3, #2
 800a56e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a570:	2300      	movs	r3, #0
 800a572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a574:	2303      	movs	r3, #3
 800a576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800a578:	230a      	movs	r3, #10
 800a57a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a57c:	f107 0314 	add.w	r3, r7, #20
 800a580:	4619      	mov	r1, r3
 800a582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a586:	f7f8 fb13 	bl	8002bb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a58a:	4b0d      	ldr	r3, [pc, #52]	; (800a5c0 <HAL_PCD_MspInit+0x94>)
 800a58c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a58e:	4a0c      	ldr	r2, [pc, #48]	; (800a5c0 <HAL_PCD_MspInit+0x94>)
 800a590:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a594:	6593      	str	r3, [r2, #88]	; 0x58
 800a596:	4b0a      	ldr	r3, [pc, #40]	; (800a5c0 <HAL_PCD_MspInit+0x94>)
 800a598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a59a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a59e:	60fb      	str	r3, [r7, #12]
 800a5a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	2100      	movs	r1, #0
 800a5a6:	2043      	movs	r0, #67	; 0x43
 800a5a8:	f7f8 fa8b 	bl	8002ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800a5ac:	2043      	movs	r0, #67	; 0x43
 800a5ae:	f7f8 faa4 	bl	8002afa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a5b2:	bf00      	nop
 800a5b4:	3728      	adds	r7, #40	; 0x28
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop
 800a5bc:	40006800 	.word	0x40006800
 800a5c0:	40021000 	.word	0x40021000

0800a5c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800a5d8:	4619      	mov	r1, r3
 800a5da:	4610      	mov	r0, r2
 800a5dc:	f7fe fd99 	bl	8009112 <USBD_LL_SetupStage>
}
 800a5e0:	bf00      	nop
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800a5fa:	78fb      	ldrb	r3, [r7, #3]
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	015b      	lsls	r3, r3, #5
 800a600:	4413      	add	r3, r2
 800a602:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	78fb      	ldrb	r3, [r7, #3]
 800a60a:	4619      	mov	r1, r3
 800a60c:	f7fe fdcc 	bl	80091a8 <USBD_LL_DataOutStage>
}
 800a610:	bf00      	nop
 800a612:	3708      	adds	r7, #8
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	460b      	mov	r3, r1
 800a622:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800a62a:	78fb      	ldrb	r3, [r7, #3]
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	015b      	lsls	r3, r3, #5
 800a630:	4413      	add	r3, r2
 800a632:	333c      	adds	r3, #60	; 0x3c
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	78fb      	ldrb	r3, [r7, #3]
 800a638:	4619      	mov	r1, r3
 800a63a:	f7fe fe26 	bl	800928a <USBD_LL_DataInStage>
}
 800a63e:	bf00      	nop
 800a640:	3708      	adds	r7, #8
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}

0800a646 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a646:	b580      	push	{r7, lr}
 800a648:	b082      	sub	sp, #8
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a654:	4618      	mov	r0, r3
 800a656:	f7fe ff39 	bl	80094cc <USBD_LL_SOF>
}
 800a65a:	bf00      	nop
 800a65c:	3708      	adds	r7, #8
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800a662:	b580      	push	{r7, lr}
 800a664:	b084      	sub	sp, #16
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a66a:	2301      	movs	r3, #1
 800a66c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	2b02      	cmp	r3, #2
 800a674:	d001      	beq.n	800a67a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a676:	f7f7 fed1 	bl	800241c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a680:	7bfa      	ldrb	r2, [r7, #15]
 800a682:	4611      	mov	r1, r2
 800a684:	4618      	mov	r0, r3
 800a686:	f7fe fee6 	bl	8009456 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a690:	4618      	mov	r0, r3
 800a692:	f7fe fe9f 	bl	80093d4 <USBD_LL_Reset>
}
 800a696:	bf00      	nop
 800a698:	3710      	adds	r7, #16
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
	...

0800a6a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7fe fee1 	bl	8009476 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	699b      	ldr	r3, [r3, #24]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d005      	beq.n	800a6c8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a6bc:	4b04      	ldr	r3, [pc, #16]	; (800a6d0 <HAL_PCD_SuspendCallback+0x30>)
 800a6be:	691b      	ldr	r3, [r3, #16]
 800a6c0:	4a03      	ldr	r2, [pc, #12]	; (800a6d0 <HAL_PCD_SuspendCallback+0x30>)
 800a6c2:	f043 0306 	orr.w	r3, r3, #6
 800a6c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a6c8:	bf00      	nop
 800a6ca:	3708      	adds	r7, #8
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	e000ed00 	.word	0xe000ed00

0800a6d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	699b      	ldr	r3, [r3, #24]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d007      	beq.n	800a6f4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a6e4:	4b08      	ldr	r3, [pc, #32]	; (800a708 <HAL_PCD_ResumeCallback+0x34>)
 800a6e6:	691b      	ldr	r3, [r3, #16]
 800a6e8:	4a07      	ldr	r2, [pc, #28]	; (800a708 <HAL_PCD_ResumeCallback+0x34>)
 800a6ea:	f023 0306 	bic.w	r3, r3, #6
 800a6ee:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a6f0:	f000 fab2 	bl	800ac58 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7fe fed0 	bl	80094a0 <USBD_LL_Resume>
}
 800a700:	bf00      	nop
 800a702:	3708      	adds	r7, #8
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	e000ed00 	.word	0xe000ed00

0800a70c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800a714:	f7fa f9f4 	bl	8004b00 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a718:	4a2b      	ldr	r2, [pc, #172]	; (800a7c8 <USBD_LL_Init+0xbc>)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  pdev->pData = &hpcd_USB_FS;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	4a29      	ldr	r2, [pc, #164]	; (800a7c8 <USBD_LL_Init+0xbc>)
 800a724:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a728:	4b27      	ldr	r3, [pc, #156]	; (800a7c8 <USBD_LL_Init+0xbc>)
 800a72a:	4a28      	ldr	r2, [pc, #160]	; (800a7cc <USBD_LL_Init+0xc0>)
 800a72c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a72e:	4b26      	ldr	r3, [pc, #152]	; (800a7c8 <USBD_LL_Init+0xbc>)
 800a730:	2208      	movs	r2, #8
 800a732:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a734:	4b24      	ldr	r3, [pc, #144]	; (800a7c8 <USBD_LL_Init+0xbc>)
 800a736:	2202      	movs	r2, #2
 800a738:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a73a:	4b23      	ldr	r3, [pc, #140]	; (800a7c8 <USBD_LL_Init+0xbc>)
 800a73c:	2202      	movs	r2, #2
 800a73e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a740:	4b21      	ldr	r3, [pc, #132]	; (800a7c8 <USBD_LL_Init+0xbc>)
 800a742:	2200      	movs	r2, #0
 800a744:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a746:	4b20      	ldr	r3, [pc, #128]	; (800a7c8 <USBD_LL_Init+0xbc>)
 800a748:	2200      	movs	r2, #0
 800a74a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a74c:	4b1e      	ldr	r3, [pc, #120]	; (800a7c8 <USBD_LL_Init+0xbc>)
 800a74e:	2200      	movs	r2, #0
 800a750:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a752:	4b1d      	ldr	r3, [pc, #116]	; (800a7c8 <USBD_LL_Init+0xbc>)
 800a754:	2200      	movs	r2, #0
 800a756:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a758:	481b      	ldr	r0, [pc, #108]	; (800a7c8 <USBD_LL_Init+0xbc>)
 800a75a:	f7f9 fa2a 	bl	8003bb2 <HAL_PCD_Init>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d001      	beq.n	800a768 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800a764:	f7f7 fe5a 	bl	800241c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a76e:	2318      	movs	r3, #24
 800a770:	2200      	movs	r2, #0
 800a772:	2100      	movs	r1, #0
 800a774:	f7fa f8f8 	bl	8004968 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a77e:	2358      	movs	r3, #88	; 0x58
 800a780:	2200      	movs	r2, #0
 800a782:	2180      	movs	r1, #128	; 0x80
 800a784:	f7fa f8f0 	bl	8004968 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a78e:	23c0      	movs	r3, #192	; 0xc0
 800a790:	2200      	movs	r2, #0
 800a792:	2181      	movs	r1, #129	; 0x81
 800a794:	f7fa f8e8 	bl	8004968 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a79e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	2101      	movs	r1, #1
 800a7a6:	f7fa f8df 	bl	8004968 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a7b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	2182      	movs	r1, #130	; 0x82
 800a7b8:	f7fa f8d6 	bl	8004968 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a7bc:	2300      	movs	r3, #0
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3708      	adds	r7, #8
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	20001308 	.word	0x20001308
 800a7cc:	40006800 	.word	0x40006800

0800a7d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7f9 facb 	bl	8003d82 <HAL_PCD_Start>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800a7f0:	7bbb      	ldrb	r3, [r7, #14]
 800a7f2:	2b03      	cmp	r3, #3
 800a7f4:	d816      	bhi.n	800a824 <USBD_LL_Start+0x54>
 800a7f6:	a201      	add	r2, pc, #4	; (adr r2, 800a7fc <USBD_LL_Start+0x2c>)
 800a7f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7fc:	0800a80d 	.word	0x0800a80d
 800a800:	0800a813 	.word	0x0800a813
 800a804:	0800a819 	.word	0x0800a819
 800a808:	0800a81f 	.word	0x0800a81f
    case HAL_OK :
      usb_status = USBD_OK;
 800a80c:	2300      	movs	r3, #0
 800a80e:	73fb      	strb	r3, [r7, #15]
    break;
 800a810:	e00b      	b.n	800a82a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a812:	2302      	movs	r3, #2
 800a814:	73fb      	strb	r3, [r7, #15]
    break;
 800a816:	e008      	b.n	800a82a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a818:	2301      	movs	r3, #1
 800a81a:	73fb      	strb	r3, [r7, #15]
    break;
 800a81c:	e005      	b.n	800a82a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a81e:	2302      	movs	r3, #2
 800a820:	73fb      	strb	r3, [r7, #15]
    break;
 800a822:	e002      	b.n	800a82a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800a824:	2302      	movs	r3, #2
 800a826:	73fb      	strb	r3, [r7, #15]
    break;
 800a828:	bf00      	nop
  }
  return usb_status;
 800a82a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3710      	adds	r7, #16
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	4608      	mov	r0, r1
 800a83e:	4611      	mov	r1, r2
 800a840:	461a      	mov	r2, r3
 800a842:	4603      	mov	r3, r0
 800a844:	70fb      	strb	r3, [r7, #3]
 800a846:	460b      	mov	r3, r1
 800a848:	70bb      	strb	r3, [r7, #2]
 800a84a:	4613      	mov	r3, r2
 800a84c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a84e:	2300      	movs	r3, #0
 800a850:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a852:	2300      	movs	r3, #0
 800a854:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a85c:	78bb      	ldrb	r3, [r7, #2]
 800a85e:	883a      	ldrh	r2, [r7, #0]
 800a860:	78f9      	ldrb	r1, [r7, #3]
 800a862:	f7f9 fc23 	bl	80040ac <HAL_PCD_EP_Open>
 800a866:	4603      	mov	r3, r0
 800a868:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a86a:	7bbb      	ldrb	r3, [r7, #14]
 800a86c:	2b03      	cmp	r3, #3
 800a86e:	d817      	bhi.n	800a8a0 <USBD_LL_OpenEP+0x6c>
 800a870:	a201      	add	r2, pc, #4	; (adr r2, 800a878 <USBD_LL_OpenEP+0x44>)
 800a872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a876:	bf00      	nop
 800a878:	0800a889 	.word	0x0800a889
 800a87c:	0800a88f 	.word	0x0800a88f
 800a880:	0800a895 	.word	0x0800a895
 800a884:	0800a89b 	.word	0x0800a89b
    case HAL_OK :
      usb_status = USBD_OK;
 800a888:	2300      	movs	r3, #0
 800a88a:	73fb      	strb	r3, [r7, #15]
    break;
 800a88c:	e00b      	b.n	800a8a6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a88e:	2302      	movs	r3, #2
 800a890:	73fb      	strb	r3, [r7, #15]
    break;
 800a892:	e008      	b.n	800a8a6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a894:	2301      	movs	r3, #1
 800a896:	73fb      	strb	r3, [r7, #15]
    break;
 800a898:	e005      	b.n	800a8a6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a89a:	2302      	movs	r3, #2
 800a89c:	73fb      	strb	r3, [r7, #15]
    break;
 800a89e:	e002      	b.n	800a8a6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800a8a0:	2302      	movs	r3, #2
 800a8a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a8a4:	bf00      	nop
  }
  return usb_status;
 800a8a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3710      	adds	r7, #16
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8ca:	78fa      	ldrb	r2, [r7, #3]
 800a8cc:	4611      	mov	r1, r2
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7f9 fc4c 	bl	800416c <HAL_PCD_EP_Close>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800a8d8:	7bbb      	ldrb	r3, [r7, #14]
 800a8da:	2b03      	cmp	r3, #3
 800a8dc:	d816      	bhi.n	800a90c <USBD_LL_CloseEP+0x5c>
 800a8de:	a201      	add	r2, pc, #4	; (adr r2, 800a8e4 <USBD_LL_CloseEP+0x34>)
 800a8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8e4:	0800a8f5 	.word	0x0800a8f5
 800a8e8:	0800a8fb 	.word	0x0800a8fb
 800a8ec:	0800a901 	.word	0x0800a901
 800a8f0:	0800a907 	.word	0x0800a907
    case HAL_OK :
      usb_status = USBD_OK;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	73fb      	strb	r3, [r7, #15]
    break;
 800a8f8:	e00b      	b.n	800a912 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a8fa:	2302      	movs	r3, #2
 800a8fc:	73fb      	strb	r3, [r7, #15]
    break;
 800a8fe:	e008      	b.n	800a912 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a900:	2301      	movs	r3, #1
 800a902:	73fb      	strb	r3, [r7, #15]
    break;
 800a904:	e005      	b.n	800a912 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a906:	2302      	movs	r3, #2
 800a908:	73fb      	strb	r3, [r7, #15]
    break;
 800a90a:	e002      	b.n	800a912 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a90c:	2302      	movs	r3, #2
 800a90e:	73fb      	strb	r3, [r7, #15]
    break;
 800a910:	bf00      	nop
  }
  return usb_status;  
 800a912:	7bfb      	ldrb	r3, [r7, #15]
}
 800a914:	4618      	mov	r0, r3
 800a916:	3710      	adds	r7, #16
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	460b      	mov	r3, r1
 800a926:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a928:	2300      	movs	r3, #0
 800a92a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a92c:	2300      	movs	r3, #0
 800a92e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a936:	78fa      	ldrb	r2, [r7, #3]
 800a938:	4611      	mov	r1, r2
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7f9 fce0 	bl	8004300 <HAL_PCD_EP_SetStall>
 800a940:	4603      	mov	r3, r0
 800a942:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a944:	7bbb      	ldrb	r3, [r7, #14]
 800a946:	2b03      	cmp	r3, #3
 800a948:	d816      	bhi.n	800a978 <USBD_LL_StallEP+0x5c>
 800a94a:	a201      	add	r2, pc, #4	; (adr r2, 800a950 <USBD_LL_StallEP+0x34>)
 800a94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a950:	0800a961 	.word	0x0800a961
 800a954:	0800a967 	.word	0x0800a967
 800a958:	0800a96d 	.word	0x0800a96d
 800a95c:	0800a973 	.word	0x0800a973
    case HAL_OK :
      usb_status = USBD_OK;
 800a960:	2300      	movs	r3, #0
 800a962:	73fb      	strb	r3, [r7, #15]
    break;
 800a964:	e00b      	b.n	800a97e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a966:	2302      	movs	r3, #2
 800a968:	73fb      	strb	r3, [r7, #15]
    break;
 800a96a:	e008      	b.n	800a97e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a96c:	2301      	movs	r3, #1
 800a96e:	73fb      	strb	r3, [r7, #15]
    break;
 800a970:	e005      	b.n	800a97e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a972:	2302      	movs	r3, #2
 800a974:	73fb      	strb	r3, [r7, #15]
    break;
 800a976:	e002      	b.n	800a97e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a978:	2302      	movs	r3, #2
 800a97a:	73fb      	strb	r3, [r7, #15]
    break;
 800a97c:	bf00      	nop
  }
  return usb_status;  
 800a97e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a980:	4618      	mov	r0, r3
 800a982:	3710      	adds	r7, #16
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	460b      	mov	r3, r1
 800a992:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a994:	2300      	movs	r3, #0
 800a996:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a998:	2300      	movs	r3, #0
 800a99a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9a2:	78fa      	ldrb	r2, [r7, #3]
 800a9a4:	4611      	mov	r1, r2
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7f9 fd04 	bl	80043b4 <HAL_PCD_EP_ClrStall>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800a9b0:	7bbb      	ldrb	r3, [r7, #14]
 800a9b2:	2b03      	cmp	r3, #3
 800a9b4:	d816      	bhi.n	800a9e4 <USBD_LL_ClearStallEP+0x5c>
 800a9b6:	a201      	add	r2, pc, #4	; (adr r2, 800a9bc <USBD_LL_ClearStallEP+0x34>)
 800a9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9bc:	0800a9cd 	.word	0x0800a9cd
 800a9c0:	0800a9d3 	.word	0x0800a9d3
 800a9c4:	0800a9d9 	.word	0x0800a9d9
 800a9c8:	0800a9df 	.word	0x0800a9df
    case HAL_OK :
      usb_status = USBD_OK;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a9d0:	e00b      	b.n	800a9ea <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a9d2:	2302      	movs	r3, #2
 800a9d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a9d6:	e008      	b.n	800a9ea <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	73fb      	strb	r3, [r7, #15]
    break;
 800a9dc:	e005      	b.n	800a9ea <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a9de:	2302      	movs	r3, #2
 800a9e0:	73fb      	strb	r3, [r7, #15]
    break;
 800a9e2:	e002      	b.n	800a9ea <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a9e4:	2302      	movs	r3, #2
 800a9e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a9e8:	bf00      	nop
  }
  return usb_status; 
 800a9ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3710      	adds	r7, #16
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa06:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800aa08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	da08      	bge.n	800aa22 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800aa10:	78fb      	ldrb	r3, [r7, #3]
 800aa12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	015b      	lsls	r3, r3, #5
 800aa1a:	4413      	add	r3, r2
 800aa1c:	332a      	adds	r3, #42	; 0x2a
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	e008      	b.n	800aa34 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800aa22:	78fb      	ldrb	r3, [r7, #3]
 800aa24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa28:	68fa      	ldr	r2, [r7, #12]
 800aa2a:	015b      	lsls	r3, r3, #5
 800aa2c:	4413      	add	r3, r2
 800aa2e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800aa32:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3714      	adds	r7, #20
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	460b      	mov	r3, r1
 800aa4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa50:	2300      	movs	r3, #0
 800aa52:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa5a:	78fa      	ldrb	r2, [r7, #3]
 800aa5c:	4611      	mov	r1, r2
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7f9 faff 	bl	8004062 <HAL_PCD_SetAddress>
 800aa64:	4603      	mov	r3, r0
 800aa66:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800aa68:	7bbb      	ldrb	r3, [r7, #14]
 800aa6a:	2b03      	cmp	r3, #3
 800aa6c:	d816      	bhi.n	800aa9c <USBD_LL_SetUSBAddress+0x5c>
 800aa6e:	a201      	add	r2, pc, #4	; (adr r2, 800aa74 <USBD_LL_SetUSBAddress+0x34>)
 800aa70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa74:	0800aa85 	.word	0x0800aa85
 800aa78:	0800aa8b 	.word	0x0800aa8b
 800aa7c:	0800aa91 	.word	0x0800aa91
 800aa80:	0800aa97 	.word	0x0800aa97
    case HAL_OK :
      usb_status = USBD_OK;
 800aa84:	2300      	movs	r3, #0
 800aa86:	73fb      	strb	r3, [r7, #15]
    break;
 800aa88:	e00b      	b.n	800aaa2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aa8a:	2302      	movs	r3, #2
 800aa8c:	73fb      	strb	r3, [r7, #15]
    break;
 800aa8e:	e008      	b.n	800aaa2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aa90:	2301      	movs	r3, #1
 800aa92:	73fb      	strb	r3, [r7, #15]
    break;
 800aa94:	e005      	b.n	800aaa2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aa96:	2302      	movs	r3, #2
 800aa98:	73fb      	strb	r3, [r7, #15]
    break;
 800aa9a:	e002      	b.n	800aaa2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800aa9c:	2302      	movs	r3, #2
 800aa9e:	73fb      	strb	r3, [r7, #15]
    break;
 800aaa0:	bf00      	nop
  }
  return usb_status;  
 800aaa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3710      	adds	r7, #16
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b086      	sub	sp, #24
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	607a      	str	r2, [r7, #4]
 800aab6:	461a      	mov	r2, r3
 800aab8:	460b      	mov	r3, r1
 800aaba:	72fb      	strb	r3, [r7, #11]
 800aabc:	4613      	mov	r3, r2
 800aabe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aac0:	2300      	movs	r3, #0
 800aac2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aac4:	2300      	movs	r3, #0
 800aac6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aace:	893b      	ldrh	r3, [r7, #8]
 800aad0:	7af9      	ldrb	r1, [r7, #11]
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	f7f9 fbdb 	bl	800428e <HAL_PCD_EP_Transmit>
 800aad8:	4603      	mov	r3, r0
 800aada:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800aadc:	7dbb      	ldrb	r3, [r7, #22]
 800aade:	2b03      	cmp	r3, #3
 800aae0:	d816      	bhi.n	800ab10 <USBD_LL_Transmit+0x64>
 800aae2:	a201      	add	r2, pc, #4	; (adr r2, 800aae8 <USBD_LL_Transmit+0x3c>)
 800aae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae8:	0800aaf9 	.word	0x0800aaf9
 800aaec:	0800aaff 	.word	0x0800aaff
 800aaf0:	0800ab05 	.word	0x0800ab05
 800aaf4:	0800ab0b 	.word	0x0800ab0b
    case HAL_OK :
      usb_status = USBD_OK;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	75fb      	strb	r3, [r7, #23]
    break;
 800aafc:	e00b      	b.n	800ab16 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aafe:	2302      	movs	r3, #2
 800ab00:	75fb      	strb	r3, [r7, #23]
    break;
 800ab02:	e008      	b.n	800ab16 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ab04:	2301      	movs	r3, #1
 800ab06:	75fb      	strb	r3, [r7, #23]
    break;
 800ab08:	e005      	b.n	800ab16 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ab0a:	2302      	movs	r3, #2
 800ab0c:	75fb      	strb	r3, [r7, #23]
    break;
 800ab0e:	e002      	b.n	800ab16 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800ab10:	2302      	movs	r3, #2
 800ab12:	75fb      	strb	r3, [r7, #23]
    break;
 800ab14:	bf00      	nop
  }
  return usb_status;    
 800ab16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3718      	adds	r7, #24
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b086      	sub	sp, #24
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	607a      	str	r2, [r7, #4]
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	72fb      	strb	r3, [r7, #11]
 800ab30:	4613      	mov	r3, r2
 800ab32:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab34:	2300      	movs	r3, #0
 800ab36:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab42:	893b      	ldrh	r3, [r7, #8]
 800ab44:	7af9      	ldrb	r1, [r7, #11]
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	f7f9 fb52 	bl	80041f0 <HAL_PCD_EP_Receive>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800ab50:	7dbb      	ldrb	r3, [r7, #22]
 800ab52:	2b03      	cmp	r3, #3
 800ab54:	d816      	bhi.n	800ab84 <USBD_LL_PrepareReceive+0x64>
 800ab56:	a201      	add	r2, pc, #4	; (adr r2, 800ab5c <USBD_LL_PrepareReceive+0x3c>)
 800ab58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab5c:	0800ab6d 	.word	0x0800ab6d
 800ab60:	0800ab73 	.word	0x0800ab73
 800ab64:	0800ab79 	.word	0x0800ab79
 800ab68:	0800ab7f 	.word	0x0800ab7f
    case HAL_OK :
      usb_status = USBD_OK;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	75fb      	strb	r3, [r7, #23]
    break;
 800ab70:	e00b      	b.n	800ab8a <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ab72:	2302      	movs	r3, #2
 800ab74:	75fb      	strb	r3, [r7, #23]
    break;
 800ab76:	e008      	b.n	800ab8a <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	75fb      	strb	r3, [r7, #23]
    break;
 800ab7c:	e005      	b.n	800ab8a <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ab7e:	2302      	movs	r3, #2
 800ab80:	75fb      	strb	r3, [r7, #23]
    break;
 800ab82:	e002      	b.n	800ab8a <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800ab84:	2302      	movs	r3, #2
 800ab86:	75fb      	strb	r3, [r7, #23]
    break;
 800ab88:	bf00      	nop
  }
  return usb_status; 
 800ab8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3718      	adds	r7, #24
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aba6:	78fa      	ldrb	r2, [r7, #3]
 800aba8:	4611      	mov	r1, r2
 800abaa:	4618      	mov	r0, r3
 800abac:	f7f9 fb5a 	bl	8004264 <HAL_PCD_EP_GetRxCount>
 800abb0:	4603      	mov	r3, r0
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3708      	adds	r7, #8
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
	...

0800abbc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b082      	sub	sp, #8
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	460b      	mov	r3, r1
 800abc6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800abc8:	78fb      	ldrb	r3, [r7, #3]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d002      	beq.n	800abd4 <HAL_PCDEx_LPM_Callback+0x18>
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d013      	beq.n	800abfa <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800abd2:	e023      	b.n	800ac1c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	699b      	ldr	r3, [r3, #24]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d007      	beq.n	800abec <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800abdc:	f000 f83c 	bl	800ac58 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800abe0:	4b10      	ldr	r3, [pc, #64]	; (800ac24 <HAL_PCDEx_LPM_Callback+0x68>)
 800abe2:	691b      	ldr	r3, [r3, #16]
 800abe4:	4a0f      	ldr	r2, [pc, #60]	; (800ac24 <HAL_PCDEx_LPM_Callback+0x68>)
 800abe6:	f023 0306 	bic.w	r3, r3, #6
 800abea:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7fe fc54 	bl	80094a0 <USBD_LL_Resume>
    break;
 800abf8:	e010      	b.n	800ac1c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7fe fc38 	bl	8009476 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	699b      	ldr	r3, [r3, #24]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d005      	beq.n	800ac1a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ac0e:	4b05      	ldr	r3, [pc, #20]	; (800ac24 <HAL_PCDEx_LPM_Callback+0x68>)
 800ac10:	691b      	ldr	r3, [r3, #16]
 800ac12:	4a04      	ldr	r2, [pc, #16]	; (800ac24 <HAL_PCDEx_LPM_Callback+0x68>)
 800ac14:	f043 0306 	orr.w	r3, r3, #6
 800ac18:	6113      	str	r3, [r2, #16]
    break;   
 800ac1a:	bf00      	nop
}
 800ac1c:	bf00      	nop
 800ac1e:	3708      	adds	r7, #8
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	e000ed00 	.word	0xe000ed00

0800ac28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ac30:	4b03      	ldr	r3, [pc, #12]	; (800ac40 <USBD_static_malloc+0x18>)
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	370c      	adds	r7, #12
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	20000320 	.word	0x20000320

0800ac44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]

}
 800ac4c:	bf00      	nop
 800ac4e:	370c      	adds	r7, #12
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800ac5c:	bf00      	nop
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr
	...

0800ac68 <__libc_init_array>:
 800ac68:	b570      	push	{r4, r5, r6, lr}
 800ac6a:	4e0d      	ldr	r6, [pc, #52]	; (800aca0 <__libc_init_array+0x38>)
 800ac6c:	4c0d      	ldr	r4, [pc, #52]	; (800aca4 <__libc_init_array+0x3c>)
 800ac6e:	1ba4      	subs	r4, r4, r6
 800ac70:	10a4      	asrs	r4, r4, #2
 800ac72:	2500      	movs	r5, #0
 800ac74:	42a5      	cmp	r5, r4
 800ac76:	d109      	bne.n	800ac8c <__libc_init_array+0x24>
 800ac78:	4e0b      	ldr	r6, [pc, #44]	; (800aca8 <__libc_init_array+0x40>)
 800ac7a:	4c0c      	ldr	r4, [pc, #48]	; (800acac <__libc_init_array+0x44>)
 800ac7c:	f000 f836 	bl	800acec <_init>
 800ac80:	1ba4      	subs	r4, r4, r6
 800ac82:	10a4      	asrs	r4, r4, #2
 800ac84:	2500      	movs	r5, #0
 800ac86:	42a5      	cmp	r5, r4
 800ac88:	d105      	bne.n	800ac96 <__libc_init_array+0x2e>
 800ac8a:	bd70      	pop	{r4, r5, r6, pc}
 800ac8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac90:	4798      	blx	r3
 800ac92:	3501      	adds	r5, #1
 800ac94:	e7ee      	b.n	800ac74 <__libc_init_array+0xc>
 800ac96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac9a:	4798      	blx	r3
 800ac9c:	3501      	adds	r5, #1
 800ac9e:	e7f2      	b.n	800ac86 <__libc_init_array+0x1e>
 800aca0:	0800adb8 	.word	0x0800adb8
 800aca4:	0800adb8 	.word	0x0800adb8
 800aca8:	0800adb8 	.word	0x0800adb8
 800acac:	0800adc0 	.word	0x0800adc0

0800acb0 <memset>:
 800acb0:	4402      	add	r2, r0
 800acb2:	4603      	mov	r3, r0
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d100      	bne.n	800acba <memset+0xa>
 800acb8:	4770      	bx	lr
 800acba:	f803 1b01 	strb.w	r1, [r3], #1
 800acbe:	e7f9      	b.n	800acb4 <memset+0x4>

0800acc0 <strncpy>:
 800acc0:	b570      	push	{r4, r5, r6, lr}
 800acc2:	3901      	subs	r1, #1
 800acc4:	4604      	mov	r4, r0
 800acc6:	b902      	cbnz	r2, 800acca <strncpy+0xa>
 800acc8:	bd70      	pop	{r4, r5, r6, pc}
 800acca:	4623      	mov	r3, r4
 800accc:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800acd0:	f803 5b01 	strb.w	r5, [r3], #1
 800acd4:	1e56      	subs	r6, r2, #1
 800acd6:	b92d      	cbnz	r5, 800ace4 <strncpy+0x24>
 800acd8:	4414      	add	r4, r2
 800acda:	42a3      	cmp	r3, r4
 800acdc:	d0f4      	beq.n	800acc8 <strncpy+0x8>
 800acde:	f803 5b01 	strb.w	r5, [r3], #1
 800ace2:	e7fa      	b.n	800acda <strncpy+0x1a>
 800ace4:	461c      	mov	r4, r3
 800ace6:	4632      	mov	r2, r6
 800ace8:	e7ed      	b.n	800acc6 <strncpy+0x6>
	...

0800acec <_init>:
 800acec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acee:	bf00      	nop
 800acf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acf2:	bc08      	pop	{r3}
 800acf4:	469e      	mov	lr, r3
 800acf6:	4770      	bx	lr

0800acf8 <_fini>:
 800acf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acfa:	bf00      	nop
 800acfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acfe:	bc08      	pop	{r3}
 800ad00:	469e      	mov	lr, r3
 800ad02:	4770      	bx	lr
