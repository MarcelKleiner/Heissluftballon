
Heissluftballon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab34  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800acc4  0800acc4  0001acc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad70  0800ad70  0002018c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad70  0800ad70  0001ad70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad78  0800ad78  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ad78  0800ad78  0001ad78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad80  0800ad80  0001ad80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  0800ad84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001408  2000018c  0800af10  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001594  0800af10  00021594  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c2f6  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000598a  00000000  00000000  0004c4b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001840  00000000  00000000  00051e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015c8  00000000  00000000  00053680  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000229f4  00000000  00000000  00054c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c3ce  00000000  00000000  0007763c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000abb7a  00000000  00000000  00093a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013f584  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063bc  00000000  00000000  0013f600  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000018c 	.word	0x2000018c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800acac 	.word	0x0800acac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000190 	.word	0x20000190
 80001cc:	0800acac 	.word	0x0800acac

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b30:	f000 b972 	b.w	8000e18 <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f806 	bl	8000b4c <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__udivmoddi4>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	9e08      	ldr	r6, [sp, #32]
 8000b52:	4604      	mov	r4, r0
 8000b54:	4688      	mov	r8, r1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d14b      	bne.n	8000bf2 <__udivmoddi4+0xa6>
 8000b5a:	428a      	cmp	r2, r1
 8000b5c:	4615      	mov	r5, r2
 8000b5e:	d967      	bls.n	8000c30 <__udivmoddi4+0xe4>
 8000b60:	fab2 f282 	clz	r2, r2
 8000b64:	b14a      	cbz	r2, 8000b7a <__udivmoddi4+0x2e>
 8000b66:	f1c2 0720 	rsb	r7, r2, #32
 8000b6a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b6e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b72:	4095      	lsls	r5, r2
 8000b74:	ea47 0803 	orr.w	r8, r7, r3
 8000b78:	4094      	lsls	r4, r2
 8000b7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b7e:	0c23      	lsrs	r3, r4, #16
 8000b80:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b84:	fa1f fc85 	uxth.w	ip, r5
 8000b88:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b8c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b90:	fb07 f10c 	mul.w	r1, r7, ip
 8000b94:	4299      	cmp	r1, r3
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x60>
 8000b98:	18eb      	adds	r3, r5, r3
 8000b9a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b9e:	f080 811b 	bcs.w	8000dd8 <__udivmoddi4+0x28c>
 8000ba2:	4299      	cmp	r1, r3
 8000ba4:	f240 8118 	bls.w	8000dd8 <__udivmoddi4+0x28c>
 8000ba8:	3f02      	subs	r7, #2
 8000baa:	442b      	add	r3, r5
 8000bac:	1a5b      	subs	r3, r3, r1
 8000bae:	b2a4      	uxth	r4, r4
 8000bb0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bb4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bbc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bc0:	45a4      	cmp	ip, r4
 8000bc2:	d909      	bls.n	8000bd8 <__udivmoddi4+0x8c>
 8000bc4:	192c      	adds	r4, r5, r4
 8000bc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bca:	f080 8107 	bcs.w	8000ddc <__udivmoddi4+0x290>
 8000bce:	45a4      	cmp	ip, r4
 8000bd0:	f240 8104 	bls.w	8000ddc <__udivmoddi4+0x290>
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	442c      	add	r4, r5
 8000bd8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bdc:	eba4 040c 	sub.w	r4, r4, ip
 8000be0:	2700      	movs	r7, #0
 8000be2:	b11e      	cbz	r6, 8000bec <__udivmoddi4+0xa0>
 8000be4:	40d4      	lsrs	r4, r2
 8000be6:	2300      	movs	r3, #0
 8000be8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bec:	4639      	mov	r1, r7
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d909      	bls.n	8000c0a <__udivmoddi4+0xbe>
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	f000 80eb 	beq.w	8000dd2 <__udivmoddi4+0x286>
 8000bfc:	2700      	movs	r7, #0
 8000bfe:	e9c6 0100 	strd	r0, r1, [r6]
 8000c02:	4638      	mov	r0, r7
 8000c04:	4639      	mov	r1, r7
 8000c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0a:	fab3 f783 	clz	r7, r3
 8000c0e:	2f00      	cmp	r7, #0
 8000c10:	d147      	bne.n	8000ca2 <__udivmoddi4+0x156>
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d302      	bcc.n	8000c1c <__udivmoddi4+0xd0>
 8000c16:	4282      	cmp	r2, r0
 8000c18:	f200 80fa 	bhi.w	8000e10 <__udivmoddi4+0x2c4>
 8000c1c:	1a84      	subs	r4, r0, r2
 8000c1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	4698      	mov	r8, r3
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	d0e0      	beq.n	8000bec <__udivmoddi4+0xa0>
 8000c2a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c2e:	e7dd      	b.n	8000bec <__udivmoddi4+0xa0>
 8000c30:	b902      	cbnz	r2, 8000c34 <__udivmoddi4+0xe8>
 8000c32:	deff      	udf	#255	; 0xff
 8000c34:	fab2 f282 	clz	r2, r2
 8000c38:	2a00      	cmp	r2, #0
 8000c3a:	f040 808f 	bne.w	8000d5c <__udivmoddi4+0x210>
 8000c3e:	1b49      	subs	r1, r1, r5
 8000c40:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c44:	fa1f f885 	uxth.w	r8, r5
 8000c48:	2701      	movs	r7, #1
 8000c4a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c4e:	0c23      	lsrs	r3, r4, #16
 8000c50:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c58:	fb08 f10c 	mul.w	r1, r8, ip
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x124>
 8000c60:	18eb      	adds	r3, r5, r3
 8000c62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x122>
 8000c68:	4299      	cmp	r1, r3
 8000c6a:	f200 80cd 	bhi.w	8000e08 <__udivmoddi4+0x2bc>
 8000c6e:	4684      	mov	ip, r0
 8000c70:	1a59      	subs	r1, r3, r1
 8000c72:	b2a3      	uxth	r3, r4
 8000c74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c78:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c7c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c80:	fb08 f800 	mul.w	r8, r8, r0
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x14c>
 8000c88:	192c      	adds	r4, r5, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x14a>
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	f200 80b6 	bhi.w	8000e02 <__udivmoddi4+0x2b6>
 8000c96:	4618      	mov	r0, r3
 8000c98:	eba4 0408 	sub.w	r4, r4, r8
 8000c9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca0:	e79f      	b.n	8000be2 <__udivmoddi4+0x96>
 8000ca2:	f1c7 0c20 	rsb	ip, r7, #32
 8000ca6:	40bb      	lsls	r3, r7
 8000ca8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cac:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cb0:	fa01 f407 	lsl.w	r4, r1, r7
 8000cb4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cb8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cbc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cc0:	4325      	orrs	r5, r4
 8000cc2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cc6:	0c2c      	lsrs	r4, r5, #16
 8000cc8:	fb08 3319 	mls	r3, r8, r9, r3
 8000ccc:	fa1f fa8e 	uxth.w	sl, lr
 8000cd0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cd4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cd8:	429c      	cmp	r4, r3
 8000cda:	fa02 f207 	lsl.w	r2, r2, r7
 8000cde:	fa00 f107 	lsl.w	r1, r0, r7
 8000ce2:	d90b      	bls.n	8000cfc <__udivmoddi4+0x1b0>
 8000ce4:	eb1e 0303 	adds.w	r3, lr, r3
 8000ce8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cec:	f080 8087 	bcs.w	8000dfe <__udivmoddi4+0x2b2>
 8000cf0:	429c      	cmp	r4, r3
 8000cf2:	f240 8084 	bls.w	8000dfe <__udivmoddi4+0x2b2>
 8000cf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cfa:	4473      	add	r3, lr
 8000cfc:	1b1b      	subs	r3, r3, r4
 8000cfe:	b2ad      	uxth	r5, r5
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d0c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d10:	45a2      	cmp	sl, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x1da>
 8000d14:	eb1e 0404 	adds.w	r4, lr, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	d26b      	bcs.n	8000df6 <__udivmoddi4+0x2aa>
 8000d1e:	45a2      	cmp	sl, r4
 8000d20:	d969      	bls.n	8000df6 <__udivmoddi4+0x2aa>
 8000d22:	3802      	subs	r0, #2
 8000d24:	4474      	add	r4, lr
 8000d26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d2e:	eba4 040a 	sub.w	r4, r4, sl
 8000d32:	454c      	cmp	r4, r9
 8000d34:	46c2      	mov	sl, r8
 8000d36:	464b      	mov	r3, r9
 8000d38:	d354      	bcc.n	8000de4 <__udivmoddi4+0x298>
 8000d3a:	d051      	beq.n	8000de0 <__udivmoddi4+0x294>
 8000d3c:	2e00      	cmp	r6, #0
 8000d3e:	d069      	beq.n	8000e14 <__udivmoddi4+0x2c8>
 8000d40:	ebb1 050a 	subs.w	r5, r1, sl
 8000d44:	eb64 0403 	sbc.w	r4, r4, r3
 8000d48:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d4c:	40fd      	lsrs	r5, r7
 8000d4e:	40fc      	lsrs	r4, r7
 8000d50:	ea4c 0505 	orr.w	r5, ip, r5
 8000d54:	e9c6 5400 	strd	r5, r4, [r6]
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e747      	b.n	8000bec <__udivmoddi4+0xa0>
 8000d5c:	f1c2 0320 	rsb	r3, r2, #32
 8000d60:	fa20 f703 	lsr.w	r7, r0, r3
 8000d64:	4095      	lsls	r5, r2
 8000d66:	fa01 f002 	lsl.w	r0, r1, r2
 8000d6a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d72:	4338      	orrs	r0, r7
 8000d74:	0c01      	lsrs	r1, r0, #16
 8000d76:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d7a:	fa1f f885 	uxth.w	r8, r5
 8000d7e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d86:	fb07 f308 	mul.w	r3, r7, r8
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d90:	d907      	bls.n	8000da2 <__udivmoddi4+0x256>
 8000d92:	1869      	adds	r1, r5, r1
 8000d94:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d98:	d22f      	bcs.n	8000dfa <__udivmoddi4+0x2ae>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d92d      	bls.n	8000dfa <__udivmoddi4+0x2ae>
 8000d9e:	3f02      	subs	r7, #2
 8000da0:	4429      	add	r1, r5
 8000da2:	1acb      	subs	r3, r1, r3
 8000da4:	b281      	uxth	r1, r0
 8000da6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000daa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db2:	fb00 f308 	mul.w	r3, r0, r8
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x27e>
 8000dba:	1869      	adds	r1, r5, r1
 8000dbc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dc0:	d217      	bcs.n	8000df2 <__udivmoddi4+0x2a6>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d915      	bls.n	8000df2 <__udivmoddi4+0x2a6>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4429      	add	r1, r5
 8000dca:	1ac9      	subs	r1, r1, r3
 8000dcc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dd0:	e73b      	b.n	8000c4a <__udivmoddi4+0xfe>
 8000dd2:	4637      	mov	r7, r6
 8000dd4:	4630      	mov	r0, r6
 8000dd6:	e709      	b.n	8000bec <__udivmoddi4+0xa0>
 8000dd8:	4607      	mov	r7, r0
 8000dda:	e6e7      	b.n	8000bac <__udivmoddi4+0x60>
 8000ddc:	4618      	mov	r0, r3
 8000dde:	e6fb      	b.n	8000bd8 <__udivmoddi4+0x8c>
 8000de0:	4541      	cmp	r1, r8
 8000de2:	d2ab      	bcs.n	8000d3c <__udivmoddi4+0x1f0>
 8000de4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000de8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dec:	3801      	subs	r0, #1
 8000dee:	4613      	mov	r3, r2
 8000df0:	e7a4      	b.n	8000d3c <__udivmoddi4+0x1f0>
 8000df2:	4660      	mov	r0, ip
 8000df4:	e7e9      	b.n	8000dca <__udivmoddi4+0x27e>
 8000df6:	4618      	mov	r0, r3
 8000df8:	e795      	b.n	8000d26 <__udivmoddi4+0x1da>
 8000dfa:	4667      	mov	r7, ip
 8000dfc:	e7d1      	b.n	8000da2 <__udivmoddi4+0x256>
 8000dfe:	4681      	mov	r9, r0
 8000e00:	e77c      	b.n	8000cfc <__udivmoddi4+0x1b0>
 8000e02:	3802      	subs	r0, #2
 8000e04:	442c      	add	r4, r5
 8000e06:	e747      	b.n	8000c98 <__udivmoddi4+0x14c>
 8000e08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e0c:	442b      	add	r3, r5
 8000e0e:	e72f      	b.n	8000c70 <__udivmoddi4+0x124>
 8000e10:	4638      	mov	r0, r7
 8000e12:	e708      	b.n	8000c26 <__udivmoddi4+0xda>
 8000e14:	4637      	mov	r7, r6
 8000e16:	e6e9      	b.n	8000bec <__udivmoddi4+0xa0>

08000e18 <__aeabi_idiv0>:
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <_ZN7AppMainC1Ev>:
 *      Author: marce
 */

#include "AppMain.h"

AppMain::AppMain() {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 fbba 	bl	80015a0 <_ZN5ModelC1Ev>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	33ac      	adds	r3, #172	; 0xac
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	4611      	mov	r1, r2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 f92a 	bl	800108e <_ZN8FXPS7115C1EP5Model>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	33b0      	adds	r3, #176	; 0xb0
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 fa38 	bl	80012b8 <_ZN13MAX31865_TEMPC1EP5Model>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	33b4      	adds	r3, #180	; 0xb4
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	4611      	mov	r1, r2
 8000e50:	4618      	mov	r0, r3
 8000e52:	f001 f844 	bl	8001ede <_ZN5SHT21C1EP5Model>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	33b8      	adds	r3, #184	; 0xb8
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 fc66 	bl	800172c <_ZN10RFM95_LoRaC1Ev>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	33d8      	adds	r3, #216	; 0xd8
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 f95d 	bl	8001128 <_ZN3GPSC1EP5Model>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000e74:	4618      	mov	r0, r3
 8000e76:	f001 f8bd 	bl	8001ff4 <_ZN7USB_ComC1Ev>

}
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <_ZN7AppMain7initRFMEv>:

void AppMain::initRFM() {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	rfm95.setFrequency(868000000);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	33b8      	adds	r3, #184	; 0xb8
 8000e90:	491a      	ldr	r1, [pc, #104]	; (8000efc <_ZN7AppMain7initRFMEv+0x78>)
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 fe80 	bl	8001b98 <_ZN10RFM95_LoRa12setFrequencyEl>
	rfm95.setTxPower(17, PA_OUTPUT_PA_BOOST_PIN);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	33b8      	adds	r3, #184	; 0xb8
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2111      	movs	r1, #17
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 fe3c 	bl	8001b1e <_ZN10RFM95_LoRa10setTxPowerEii>
	rfm95.setSignalBandwidth(31.25E3);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	33b8      	adds	r3, #184	; 0xb8
 8000eaa:	f647 2112 	movw	r1, #31250	; 0x7a12
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 fef6 	bl	8001ca0 <_ZN10RFM95_LoRa18setSignalBandwidthEl>
	rfm95.setSpreadingFactor(12);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	33b8      	adds	r3, #184	; 0xb8
 8000eb8:	210c      	movs	r1, #12
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 feb0 	bl	8001c20 <_ZN10RFM95_LoRa18setSpreadingFactorEi>
	rfm95.setCodingRate4(5);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	33b8      	adds	r3, #184	; 0xb8
 8000ec4:	2105      	movs	r1, #5
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 ffae 	bl	8001e28 <_ZN10RFM95_LoRa14setCodingRate4Ei>
	if (!rfm95.begin(866E6)) {
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	33b8      	adds	r3, #184	; 0xb8
 8000ed0:	490b      	ldr	r1, [pc, #44]	; (8000f00 <_ZN7AppMain7initRFMEv+0x7c>)
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 fcd2 	bl	800187c <_ZN10RFM95_LoRa5beginEl>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	bf0c      	ite	eq
 8000ede:	2301      	moveq	r3, #1
 8000ee0:	2300      	movne	r3, #0
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d005      	beq.n	8000ef4 <_ZN7AppMain7initRFMEv+0x70>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2102      	movs	r1, #2
 8000eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef0:	f001 ffb0 	bl	8002e54 <HAL_GPIO_WritePin>
	}

}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	33bca100 	.word	0x33bca100
 8000f00:	339e1c80 	.word	0x339e1c80

08000f04 <_ZN7AppMain8mainProgEv>:

void AppMain::mainProg() {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b09e      	sub	sp, #120	; 0x78
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

	uint8_t transmitData[TRANSMIT_DATA_LENGTH];
	uint16_t transmitBuffer = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

	for (int counter = 0; counter < TRANSMIT_DATA_LENGTH; counter++) {
 8000f12:	2300      	movs	r3, #0
 8000f14:	677b      	str	r3, [r7, #116]	; 0x74
 8000f16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f18:	2b63      	cmp	r3, #99	; 0x63
 8000f1a:	dc09      	bgt.n	8000f30 <_ZN7AppMain8mainProgEv+0x2c>
		transmitData[counter] = 0;
 8000f1c:	f107 0208 	add.w	r2, r7, #8
 8000f20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f22:	4413      	add	r3, r2
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
	for (int counter = 0; counter < TRANSMIT_DATA_LENGTH; counter++) {
 8000f28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	677b      	str	r3, [r7, #116]	; 0x74
 8000f2e:	e7f2      	b.n	8000f16 <_ZN7AppMain8mainProgEv+0x12>
	}

	HAL_Delay(100);
 8000f30:	2064      	movs	r0, #100	; 0x64
 8000f32:	f001 fca9 	bl	8002888 <HAL_Delay>
	max31865.init(2);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	33b0      	adds	r3, #176	; 0xb0
 8000f3a:	2102      	movs	r1, #2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 f9ca 	bl	80012d6 <_ZN13MAX31865_TEMP4initEh>
	fxps7115.fxpInit();
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	33ac      	adds	r3, #172	; 0xac
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f8b0 	bl	80010ac <_ZN8FXPS71157fxpInitEv>
	gps.init();
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	33d8      	adds	r3, #216	; 0xd8
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 f90b 	bl	800116c <_ZN3GPS4initEv>

	initRFM();
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ff94 	bl	8000e84 <_ZN7AppMain7initRFMEv>

	while (1) {
		/*read Sensor Data*/
		sht21.readSHT21Humidity();		//Humidity
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	33b4      	adds	r3, #180	; 0xb4
 8000f60:	4618      	mov	r0, r3
 8000f62:	f001 f815 	bl	8001f90 <_ZN5SHT2117readSHT21HumidityEv>
		sht21.readSHT21Temp();			//TempOutside
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	33b4      	adds	r3, #180	; 0xb4
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 ffde 	bl	8001f2c <_ZN5SHT2113readSHT21TempEv>
		fxps7115.fxpReadPressure();		//Pressure
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	33ac      	adds	r3, #172	; 0xac
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 f8a3 	bl	80010c0 <_ZN8FXPS711515fxpReadPressureEv>
		max31865.readTemp();			//TempInside
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	33b0      	adds	r3, #176	; 0xb0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 f9ce 	bl	8001320 <_ZN13MAX31865_TEMP8readTempEv>

		/*Prepare for Transmit*/

		transmitData[0] = '%';
 8000f84:	2325      	movs	r3, #37	; 0x25
 8000f86:	723b      	strb	r3, [r7, #8]
		transmitData[1] = '*';
 8000f88:	232a      	movs	r3, #42	; 0x2a
 8000f8a:	727b      	strb	r3, [r7, #9]
		transmitData[2] = '!';
 8000f8c:	2321      	movs	r3, #33	; 0x21
 8000f8e:	72bb      	strb	r3, [r7, #10]
		/*-------------Humidity Balloon----------------*/
		transmitBuffer = model.getHumidity();
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 fb62 	bl	800165c <_ZN5Model11getHumidityEv>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		transmitData[3] = transmitBuffer;
 8000f9e:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	72fb      	strb	r3, [r7, #11]
		transmitData[4] = transmitBuffer >> 8;
 8000fa6:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000faa:	121b      	asrs	r3, r3, #8
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	733b      	strb	r3, [r7, #12]
		/*-------------Temp Outside----------------*/
		transmitBuffer = model.getTempOutside();
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fb8f 	bl	80016d6 <_ZN5Model14getTempOutsideEv>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		transmitData[5] = transmitBuffer;
 8000fbe:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	737b      	strb	r3, [r7, #13]
		transmitData[6] = transmitBuffer >> 8;
 8000fc6:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000fca:	121b      	asrs	r3, r3, #8
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	73bb      	strb	r3, [r7, #14]
		/*-------------Pressure----------------*/
		transmitBuffer = model.getPressure();
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 fb62 	bl	800169c <_ZN5Model11getPressureEv>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		transmitData[7] = transmitBuffer;
 8000fde:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	73fb      	strb	r3, [r7, #15]
		transmitData[8] = transmitBuffer >> 8;
 8000fe6:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000fea:	121b      	asrs	r3, r3, #8
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	743b      	strb	r3, [r7, #16]
		/*-------------Temp Balloon----------------*/
		transmitBuffer = model.getTempInsed();
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fb8c 	bl	8001710 <_ZN5Model12getTempInsedEv>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		transmitData[9] = transmitBuffer;
 8000ffe:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8001002:	b2db      	uxtb	r3, r3
 8001004:	747b      	strb	r3, [r7, #17]
		transmitData[10] = transmitBuffer >> 8;
 8001006:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800100a:	121b      	asrs	r3, r3, #8
 800100c:	b2db      	uxtb	r3, r3
 800100e:	74bb      	strb	r3, [r7, #18]
		uint8_t offset = 11;	//Fortlaufend zu vorheriger index
 8001010:	230b      	movs	r3, #11
 8001012:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		/*-------------GPS Data----------------*/
		char *gpsDeviceTemp = model.getGPS_Device();
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4618      	mov	r0, r3
 800101a:	f000 fb03 	bl	8001624 <_ZN5Model13getGPS_DeviceEv>
 800101e:	66f8      	str	r0, [r7, #108]	; 0x6c
		for (uint8_t counter = 0; counter < GPS_DATA_SIZE; counter++) {
 8001020:	2300      	movs	r3, #0
 8001022:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8001026:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800102a:	2b4f      	cmp	r3, #79	; 0x4f
 800102c:	d816      	bhi.n	800105c <_ZN7AppMain8mainProgEv+0x158>
			transmitData[offset] = gpsDeviceTemp[counter];
 800102e:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8001032:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001034:	441a      	add	r2, r3
 8001036:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800103a:	7812      	ldrb	r2, [r2, #0]
 800103c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001040:	440b      	add	r3, r1
 8001042:	f803 2c70 	strb.w	r2, [r3, #-112]
			offset++;
 8001046:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800104a:	3301      	adds	r3, #1
 800104c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		for (uint8_t counter = 0; counter < GPS_DATA_SIZE; counter++) {
 8001050:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8001054:	3301      	adds	r3, #1
 8001056:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 800105a:	e7e4      	b.n	8001026 <_ZN7AppMain8mainProgEv+0x122>
		}

		/*Transmit over USB - use only in GCS*/
		//usbCom.usbTransmit(transmitData, offset);
		//rfm95.rfmTransmit(transmitData);
		rfm95.beginPacket();
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	33b8      	adds	r3, #184	; 0xb8
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f000 fc4d 	bl	8001902 <_ZN10RFM95_LoRa11beginPacketEi>
		rfm95.write(transmitData, offset);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	33b8      	adds	r3, #184	; 0xb8
 800106c:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8001070:	f107 0108 	add.w	r1, r7, #8
 8001074:	4618      	mov	r0, r3
 8001076:	f000 fc9f 	bl	80019b8 <_ZN10RFM95_LoRa5writeEPKhj>
		rfm95.endPacket();
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	33b8      	adds	r3, #184	; 0xb8
 800107e:	4618      	mov	r0, r3
 8001080:	f000 fc60 	bl	8001944 <_ZN10RFM95_LoRa9endPacketEv>
		HAL_Delay(1000);
 8001084:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001088:	f001 fbfe 	bl	8002888 <HAL_Delay>
	}
 800108c:	e766      	b.n	8000f5c <_ZN7AppMain8mainProgEv+0x58>

0800108e <_ZN8FXPS7115C1EP5Model>:

#include "FXPS7115.h"



FXPS7115::FXPS7115(Model *model) {
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	6039      	str	r1, [r7, #0]
	// TODO Auto-generated constructor stub
	this->model = model;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	601a      	str	r2, [r3, #0]
}
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <_ZN8FXPS71157fxpInitEv>:



void FXPS7115::fxpInit(){
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]


}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <_ZN8FXPS711515fxpReadPressureEv>:
	return(HAL_I2C_Master_Transmit(&hi2c1,FXP_SLAVE_ADDR<<1,(uint8_t*)txBuffer,1,I2C_Timeout));
}



bool FXPS7115::fxpReadPressure(){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af04      	add	r7, sp, #16
 80010c6:	6078      	str	r0, [r7, #4]
	uint8_t data[2] = {0,0};
 80010c8:	2300      	movs	r3, #0
 80010ca:	733b      	strb	r3, [r7, #12]
 80010cc:	2300      	movs	r3, #0
 80010ce:	737b      	strb	r3, [r7, #13]

	if(HAL_I2C_Mem_Read(&hi2c1, FXP_SLAVE_ADDR<<1, FXP_SNSDATA0_L_REG, 1, data, 2, I2C_Timeout) != HAL_OK){
 80010d0:	2364      	movs	r3, #100	; 0x64
 80010d2:	9302      	str	r3, [sp, #8]
 80010d4:	2302      	movs	r3, #2
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2301      	movs	r3, #1
 80010e0:	2262      	movs	r2, #98	; 0x62
 80010e2:	21c0      	movs	r1, #192	; 0xc0
 80010e4:	480f      	ldr	r0, [pc, #60]	; (8001124 <_ZN8FXPS711515fxpReadPressureEv+0x64>)
 80010e6:	f002 f95f 	bl	80033a8 <HAL_I2C_Mem_Read>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	bf14      	ite	ne
 80010f0:	2301      	movne	r3, #1
 80010f2:	2300      	moveq	r3, #0
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <_ZN8FXPS711515fxpReadPressureEv+0x3e>
		return 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e00d      	b.n	800111a <_ZN8FXPS711515fxpReadPressureEv+0x5a>
	}

	model->setPressure((data[1]<<8) + data[0]);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	7b7b      	ldrb	r3, [r7, #13]
 8001104:	b29b      	uxth	r3, r3
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	b29a      	uxth	r2, r3
 800110a:	7b3b      	ldrb	r3, [r7, #12]
 800110c:	b29b      	uxth	r3, r3
 800110e:	4413      	add	r3, r2
 8001110:	b29b      	uxth	r3, r3
 8001112:	4619      	mov	r1, r3
 8001114:	f000 faaf 	bl	8001676 <_ZN5Model11setPressureEt>
	return 1;
 8001118:	2301      	movs	r3, #1
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000558 	.word	0x20000558

08001128 <_ZN3GPSC1EP5Model>:


	//extern UART_HandleTypeDef huart2;


GPS::GPS(Model* model) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	711a      	strb	r2, [r3, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	715a      	strb	r2, [r3, #5]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	this->model = model;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	601a      	str	r2, [r3, #0]
	init();
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 f805 	bl	800116c <_ZN3GPS4initEv>
}
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <_ZN3GPS4initEv>:
 *
 * @param none
 * @return none
 *
 */
void GPS::init(){
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < GPS_DATA_SIZE; i++) {
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2b4f      	cmp	r3, #79	; 0x4f
 800117c:	dc0f      	bgt.n	800119e <_ZN3GPS4initEv+0x32>
		data[i] = '0';
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4413      	add	r3, r2
 8001184:	3356      	adds	r3, #86	; 0x56
 8001186:	2230      	movs	r2, #48	; 0x30
 8001188:	701a      	strb	r2, [r3, #0]
		GPS_Data[i] = '0';
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	3306      	adds	r3, #6
 8001192:	2230      	movs	r2, #48	; 0x30
 8001194:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < GPS_DATA_SIZE; i++) {
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3301      	adds	r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	e7ec      	b.n	8001178 <_ZN3GPS4initEv+0xc>
	}
}
 800119e:	bf00      	nop
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <_ZN3GPS12gpsInterruptEh>:
*
*
* @param huart UART handle.
* @return None
 */
void GPS::gpsInterrupt(uint8_t rxData) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	70fb      	strb	r3, [r7, #3]
	static uint8_t i = 0;
		/* Receive one byte in interrupt mode */


		/*Check if received byte is a '$' (begin of record) */
		if ((char) rxData == '$') {
 80011b8:	78fb      	ldrb	r3, [r7, #3]
 80011ba:	2b24      	cmp	r3, #36	; 0x24
 80011bc:	d105      	bne.n	80011ca <_ZN3GPS12gpsInterruptEh+0x1e>
			recordStart = true;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	711a      	strb	r2, [r3, #4]
			i = 0;
 80011c4:	4b3b      	ldr	r3, [pc, #236]	; (80012b4 <_ZN3GPS12gpsInterruptEh+0x108>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
		}
		/*Check if received byte is a '\n' (end of record)*/
		if ((char) rxData == '\n') {
 80011ca:	78fb      	ldrb	r3, [r7, #3]
 80011cc:	2b0a      	cmp	r3, #10
 80011ce:	d15a      	bne.n	8001286 <_ZN3GPS12gpsInterruptEh+0xda>
			recordStart = false;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	711a      	strb	r2, [r3, #4]

			if (i > GPS_DATA_SIZE-10) {
 80011d6:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <_ZN3GPS12gpsInterruptEh+0x108>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b46      	cmp	r3, #70	; 0x46
 80011dc:	d939      	bls.n	8001252 <_ZN3GPS12gpsInterruptEh+0xa6>
				copyCounter = 0;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
				for (int i = 0; i < GPS_DATA_SIZE; i++) {
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2b4f      	cmp	r3, #79	; 0x4f
 80011ee:	dc09      	bgt.n	8001204 <_ZN3GPS12gpsInterruptEh+0x58>
					GPS_Data[i] = '0';
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	4413      	add	r3, r2
 80011f6:	3306      	adds	r3, #6
 80011f8:	2230      	movs	r2, #48	; 0x30
 80011fa:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < GPS_DATA_SIZE; i++) {
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	3301      	adds	r3, #1
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	e7f2      	b.n	80011ea <_ZN3GPS12gpsInterruptEh+0x3e>
				}
				while (data[copyCounter] != '\r' && copyCounter <= 80) {
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800120a:	461a      	mov	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4413      	add	r3, r2
 8001210:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001214:	2b0d      	cmp	r3, #13
 8001216:	d01c      	beq.n	8001252 <_ZN3GPS12gpsInterruptEh+0xa6>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800121e:	2b50      	cmp	r3, #80	; 0x50
 8001220:	d817      	bhi.n	8001252 <_ZN3GPS12gpsInterruptEh+0xa6>
					GPS_Data[copyCounter] = data[copyCounter];
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8001228:	461a      	mov	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8001230:	4619      	mov	r1, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	440b      	add	r3, r1
 800123e:	719a      	strb	r2, [r3, #6]
					copyCounter++;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8001246:	3301      	adds	r3, #1
 8001248:	b2da      	uxtb	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
				while (data[copyCounter] != '\r' && copyCounter <= 80) {
 8001250:	e7d8      	b.n	8001204 <_ZN3GPS12gpsInterruptEh+0x58>
				}
			}
			model->setGPS_Device(GPS_Data);	//set GPS data in Model
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3306      	adds	r3, #6
 800125a:	4619      	mov	r1, r3
 800125c:	4610      	mov	r0, r2
 800125e:	f000 f9d1 	bl	8001604 <_ZN5Model13setGPS_DeviceEPc>
			for (int count = 0; count < GPS_DATA_SIZE; count++) {
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	2b4f      	cmp	r3, #79	; 0x4f
 800126a:	dc09      	bgt.n	8001280 <_ZN3GPS12gpsInterruptEh+0xd4>
				data[count] = '0';
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	4413      	add	r3, r2
 8001272:	3356      	adds	r3, #86	; 0x56
 8001274:	2230      	movs	r2, #48	; 0x30
 8001276:	701a      	strb	r2, [r3, #0]
			for (int count = 0; count < GPS_DATA_SIZE; count++) {
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	3301      	adds	r3, #1
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	e7f2      	b.n	8001266 <_ZN3GPS12gpsInterruptEh+0xba>
			}
			i = 0;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <_ZN3GPS12gpsInterruptEh+0x108>)
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
		}

		if (recordStart) {
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	791b      	ldrb	r3, [r3, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00d      	beq.n	80012aa <_ZN3GPS12gpsInterruptEh+0xfe>
			data[i] = rxData;
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <_ZN3GPS12gpsInterruptEh+0x108>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4413      	add	r3, r2
 8001298:	78fa      	ldrb	r2, [r7, #3]
 800129a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
			i++;
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <_ZN3GPS12gpsInterruptEh+0x108>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	3301      	adds	r3, #1
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <_ZN3GPS12gpsInterruptEh+0x108>)
 80012a8:	701a      	strb	r2, [r3, #0]
		}



	}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200001a8 	.word	0x200001a8

080012b8 <_ZN13MAX31865_TEMPC1EP5Model>:

#include "MAX31865TEMP.h"

HAL_StatusTypeDef def;

MAX31865_TEMP::MAX31865_TEMP(Model *model) {
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
	// TODO Auto-generated constructor stub
	this->model = model;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	601a      	str	r2, [r3, #0]
}
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <_ZN13MAX31865_TEMP4initEh>:

void MAX31865_TEMP::init(uint8_t wires){
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b084      	sub	sp, #16
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	460b      	mov	r3, r1
 80012e0:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[1];
 HAL_Delay(100);
 80012e2:	2064      	movs	r0, #100	; 0x64
 80012e4:	f001 fad0 	bl	8002888 <HAL_Delay>
  setWires(wires);           // Set 2,3 or 4 wire sensor
 80012e8:	78fb      	ldrb	r3, [r7, #3]
 80012ea:	4619      	mov	r1, r3
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 f922 	bl	8001536 <_ZN13MAX31865_TEMP8setWiresEh>
  HAL_Delay(100);
 80012f2:	2064      	movs	r0, #100	; 0x64
 80012f4:	f001 fac8 	bl	8002888 <HAL_Delay>
  enableBias(OFF);           // Disable bias voltage
 80012f8:	2100      	movs	r1, #0
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 f8e4 	bl	80014c8 <_ZN13MAX31865_TEMP10enableBiasEh>
  HAL_Delay(100);
 8001300:	2064      	movs	r0, #100	; 0x64
 8001302:	f001 fac1 	bl	8002888 <HAL_Delay>
  autoConvert(OFF);          // Disable auto conversion
 8001306:	2100      	movs	r1, #0
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 f8ef 	bl	80014ec <_ZN13MAX31865_TEMP11autoConvertEh>
  HAL_Delay(100);
 800130e:	2064      	movs	r0, #100	; 0x64
 8001310:	f001 faba 	bl	8002888 <HAL_Delay>

}
 8001314:	bf00      	nop
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	0000      	movs	r0, r0
	...

08001320 <_ZN13MAX31865_TEMP8readTempEv>:


bool MAX31865_TEMP::readTemp(){
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b089      	sub	sp, #36	; 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

	uint8_t error;
	uint8_t buff[1];
	MAX31865_read(0x07, buff, 1);
 8001328:	f107 0210 	add.w	r2, r7, #16
 800132c:	2301      	movs	r3, #1
 800132e:	2107      	movs	r1, #7
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 f867 	bl	8001404 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh>

    // Activate bias voltage to read sensor data, and wait for the capacitors to fill
    enableBias(ON);
 8001336:	2101      	movs	r1, #1
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f000 f8c5 	bl	80014c8 <_ZN13MAX31865_TEMP10enableBiasEh>
    HAL_Delay(20);
 800133e:	2014      	movs	r0, #20
 8001340:	f001 faa2 	bl	8002888 <HAL_Delay>
    // Perform a single conversion, and wait for the result
    single_shot();
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 f91b 	bl	8001580 <_ZN13MAX31865_TEMP11single_shotEv>
    HAL_Delay(100);
 800134a:	2064      	movs	r0, #100	; 0x64
 800134c:	f001 fa9c 	bl	8002888 <HAL_Delay>
    // Read data from max31865 data registers
    uint8_t buffer[2];
     MAX31865_read(MAX31856_RTDMSB_REG, buffer,2);
 8001350:	f107 020c 	add.w	r2, r7, #12
 8001354:	2302      	movs	r3, #2
 8001356:	2101      	movs	r1, #1
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 f853 	bl	8001404 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh>
    // Combine 2 bytes into 1 number, and shift 1 down to remove fault bit
    uint16_t data = buffer[0] << 8;
 800135e:	7b3b      	ldrb	r3, [r7, #12]
 8001360:	b29b      	uxth	r3, r3
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	83fb      	strh	r3, [r7, #30]
    data |= buffer[1];
 8001366:	7b7b      	ldrb	r3, [r7, #13]
 8001368:	b29a      	uxth	r2, r3
 800136a:	8bfb      	ldrh	r3, [r7, #30]
 800136c:	4313      	orrs	r3, r2
 800136e:	83fb      	strh	r3, [r7, #30]
    data >>= 1;
 8001370:	8bfb      	ldrh	r3, [r7, #30]
 8001372:	105b      	asrs	r3, r3, #1
 8001374:	83fb      	strh	r3, [r7, #30]

    // Disable bias voltage to reduce power usage
    enableBias(OFF);
 8001376:	2100      	movs	r1, #0
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 f8a5 	bl	80014c8 <_ZN13MAX31865_TEMP10enableBiasEh>


    // Calculate the actual resistance of the sensor
    float resistance = ((float) data * RREF) / FACTOR;
 800137e:	8bfb      	ldrh	r3, [r7, #30]
 8001380:	ee07 3a90 	vmov	s15, r3
 8001384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001388:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80013f8 <_ZN13MAX31865_TEMP8readTempEv+0xd8>
 800138c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001390:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80013fc <_ZN13MAX31865_TEMP8readTempEv+0xdc>
 8001394:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001398:	edc7 7a06 	vstr	s15, [r7, #24]
    // Calculate the temperature from the measured resistance
    float temp = ((resistance / 100) - 1) / ALPHA;
 800139c:	ed97 7a06 	vldr	s14, [r7, #24]
 80013a0:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001400 <_ZN13MAX31865_TEMP8readTempEv+0xe0>
 80013a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013b0:	ee17 0a90 	vmov	r0, s15
 80013b4:	f7ff f870 	bl	8000498 <__aeabi_f2d>
 80013b8:	a30d      	add	r3, pc, #52	; (adr r3, 80013f0 <_ZN13MAX31865_TEMP8readTempEv+0xd0>)
 80013ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013be:	f7ff f9ed 	bl	800079c <__aeabi_ddiv>
 80013c2:	4603      	mov	r3, r0
 80013c4:	460c      	mov	r4, r1
 80013c6:	4618      	mov	r0, r3
 80013c8:	4621      	mov	r1, r4
 80013ca:	f7ff fb57 	bl	8000a7c <__aeabi_d2f>
 80013ce:	4603      	mov	r3, r0
 80013d0:	617b      	str	r3, [r7, #20]



	model->setTempInside(data);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	8bfa      	ldrh	r2, [r7, #30]
 80013d8:	4611      	mov	r1, r2
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 f988 	bl	80016f0 <_ZN5Model13setTempInsideEt>
	return true;
 80013e0:	2301      	movs	r3, #1
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3724      	adds	r7, #36	; 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd90      	pop	{r4, r7, pc}
 80013ea:	bf00      	nop
 80013ec:	f3af 8000 	nop.w
 80013f0:	e1d2178f 	.word	0xe1d2178f
 80013f4:	3f6f8c21 	.word	0x3f6f8c21
 80013f8:	43d70000 	.word	0x43d70000
 80013fc:	47000000 	.word	0x47000000
 8001400:	42c80000 	.word	0x42c80000

08001404 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh>:
 * @param addr      Register addr to read from
 * @param buffer    Pointer to rx buffer
 * @param len       Amount of bytes to read
 */
void MAX31865_TEMP::MAX31865_read(uint8_t addr, uint8_t *buffer, uint8_t size)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	461a      	mov	r2, r3
 8001410:	460b      	mov	r3, r1
 8001412:	72fb      	strb	r3, [r7, #11]
 8001414:	4613      	mov	r3, r2
 8001416:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef test;
	uint8_t txBuffer[1];
    addr &= ~MAX31865_READ;                             		// Force read bit on address
    txBuffer[0] = addr;
 8001418:	7afb      	ldrb	r3, [r7, #11]
 800141a:	753b      	strb	r3, [r7, #20]
    CLEAR_MAX_CS;          										// Enable CE
 800141c:	2200      	movs	r2, #0
 800141e:	2101      	movs	r1, #1
 8001420:	480f      	ldr	r0, [pc, #60]	; (8001460 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh+0x5c>)
 8001422:	f001 fd17 	bl	8002e54 <HAL_GPIO_WritePin>
    test = HAL_SPI_Transmit(&hspi1,(uint8_t*)txBuffer,1,500);	//write addr
 8001426:	f107 0114 	add.w	r1, r7, #20
 800142a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800142e:	2201      	movs	r2, #1
 8001430:	480c      	ldr	r0, [pc, #48]	; (8001464 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh+0x60>)
 8001432:	f004 fbcf 	bl	8005bd4 <HAL_SPI_Transmit>
 8001436:	4603      	mov	r3, r0
 8001438:	75fb      	strb	r3, [r7, #23]
    test =HAL_SPI_Receive(&hspi1,(uint8_t*)buffer,size,500);	// Read data
 800143a:	7abb      	ldrb	r3, [r7, #10]
 800143c:	b29a      	uxth	r2, r3
 800143e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	4807      	ldr	r0, [pc, #28]	; (8001464 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh+0x60>)
 8001446:	f004 fd2b 	bl	8005ea0 <HAL_SPI_Receive>
 800144a:	4603      	mov	r3, r0
 800144c:	75fb      	strb	r3, [r7, #23]
    SET_MAX_CS;          										// Disable CE
 800144e:	2201      	movs	r2, #1
 8001450:	2101      	movs	r1, #1
 8001452:	4803      	ldr	r0, [pc, #12]	; (8001460 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh+0x5c>)
 8001454:	f001 fcfe 	bl	8002e54 <HAL_GPIO_WritePin>
}
 8001458:	bf00      	nop
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	48000400 	.word	0x48000400
 8001464:	200005a4 	.word	0x200005a4

08001468 <_ZN13MAX31865_TEMP14MAX31865_writeEhh>:
 * Write a byte in a MAX13865 register
 *
 * @param addr      Register addr to write to
 * @param buffer    Tx data
 */
void MAX31865_TEMP::MAX31865_write(uint8_t addr, uint8_t data){
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	70fb      	strb	r3, [r7, #3]
 8001474:	4613      	mov	r3, r2
 8001476:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef test;

	uint8_t txBuffer[2];

	addr |= MAX31865_WRITE;                             // Force write bit on address
 8001478:	78fb      	ldrb	r3, [r7, #3]
 800147a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800147e:	70fb      	strb	r3, [r7, #3]
    txBuffer[0] = addr;
 8001480:	78fb      	ldrb	r3, [r7, #3]
 8001482:	733b      	strb	r3, [r7, #12]
    txBuffer[1] = data;
 8001484:	78bb      	ldrb	r3, [r7, #2]
 8001486:	737b      	strb	r3, [r7, #13]
    CLEAR_MAX_CS; 									    // Enable CE
 8001488:	2200      	movs	r2, #0
 800148a:	2101      	movs	r1, #1
 800148c:	480c      	ldr	r0, [pc, #48]	; (80014c0 <_ZN13MAX31865_TEMP14MAX31865_writeEhh+0x58>)
 800148e:	f001 fce1 	bl	8002e54 <HAL_GPIO_WritePin>
    test = HAL_SPI_Transmit(&hspi1,(uint8_t*)txBuffer,2,500);				//write addr
 8001492:	f107 010c 	add.w	r1, r7, #12
 8001496:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800149a:	2202      	movs	r2, #2
 800149c:	4809      	ldr	r0, [pc, #36]	; (80014c4 <_ZN13MAX31865_TEMP14MAX31865_writeEhh+0x5c>)
 800149e:	f004 fb99 	bl	8005bd4 <HAL_SPI_Transmit>
 80014a2:	4603      	mov	r3, r0
 80014a4:	73fb      	strb	r3, [r7, #15]

    SET_MAX_CS;          								// Disable CE
 80014a6:	2201      	movs	r2, #1
 80014a8:	2101      	movs	r1, #1
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <_ZN13MAX31865_TEMP14MAX31865_writeEhh+0x58>)
 80014ac:	f001 fcd2 	bl	8002e54 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80014b0:	200a      	movs	r0, #10
 80014b2:	f001 f9e9 	bl	8002888 <HAL_Delay>
}
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	48000400 	.word	0x48000400
 80014c4:	200005a4 	.word	0x200005a4

080014c8 <_ZN13MAX31865_TEMP10enableBiasEh>:
/**
 * Enable of disable MAX831865 bias voltage
 * @param enable Enable of disable
 */
void MAX31865_TEMP::enableBias(uint8_t enable)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	70fb      	strb	r3, [r7, #3]
        status |= MAX31856_CONFIG_BIAS;
    } else
    {
        status &= ~MAX31856_CONFIG_BIAS;
    }*/
    status = 0x80;
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	73fb      	strb	r3, [r7, #15]
    MAX31865_write(MAX31856_CONFIG_REG, status);
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	461a      	mov	r2, r3
 80014dc:	2100      	movs	r1, #0
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ffc2 	bl	8001468 <_ZN13MAX31865_TEMP14MAX31865_writeEhh>
}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <_ZN13MAX31865_TEMP11autoConvertEh>:
/**
 * Enable of disable MAX831865 auto convert
 * @param enable Enable of disable
 */
void MAX31865_TEMP::autoConvert(uint8_t enable)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	70fb      	strb	r3, [r7, #3]
    uint8_t status;
    MAX31865_read(MAX31856_CONFIG_REG, &status,1);
 80014f8:	f107 020f 	add.w	r2, r7, #15
 80014fc:	2301      	movs	r3, #1
 80014fe:	2100      	movs	r1, #0
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ff7f 	bl	8001404 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh>
    if (enable)
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <_ZN13MAX31865_TEMP11autoConvertEh+0x2c>
    {
        status |= MAX31856_CONFIG_MODEAUTO;
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001512:	b2db      	uxtb	r3, r3
 8001514:	73fb      	strb	r3, [r7, #15]
 8001516:	e004      	b.n	8001522 <_ZN13MAX31865_TEMP11autoConvertEh+0x36>
    } else
    {
        status &= ~MAX31856_CONFIG_MODEAUTO;
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800151e:	b2db      	uxtb	r3, r3
 8001520:	73fb      	strb	r3, [r7, #15]
    }
    MAX31865_write(MAX31856_CONFIG_REG, status);
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	461a      	mov	r2, r3
 8001526:	2100      	movs	r1, #0
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ff9d 	bl	8001468 <_ZN13MAX31865_TEMP14MAX31865_writeEhh>
}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <_ZN13MAX31865_TEMP8setWiresEh>:
/**
 * Set the amount of wires the temperature sensor uses
 * @param numwires 2,3 or 4 wires
 */
void MAX31865_TEMP::setWires(uint8_t numwires)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b084      	sub	sp, #16
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	460b      	mov	r3, r1
 8001540:	70fb      	strb	r3, [r7, #3]
    uint8_t status;
    MAX31865_read(MAX31856_CONFIG_REG, &status,1);
 8001542:	f107 020f 	add.w	r2, r7, #15
 8001546:	2301      	movs	r3, #1
 8001548:	2100      	movs	r1, #0
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff ff5a 	bl	8001404 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh>
    if (numwires == 3) // 3-wire
 8001550:	78fb      	ldrb	r3, [r7, #3]
 8001552:	2b03      	cmp	r3, #3
 8001554:	d105      	bne.n	8001562 <_ZN13MAX31865_TEMP8setWiresEh+0x2c>
    {
        status |= MAX31856_CONFIG_3WIRE;
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	f043 0310 	orr.w	r3, r3, #16
 800155c:	b2db      	uxtb	r3, r3
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e004      	b.n	800156c <_ZN13MAX31865_TEMP8setWiresEh+0x36>
    } else // 2-4 wire
    {
        status &= ~MAX31856_CONFIG_3WIRE;
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	f023 0310 	bic.w	r3, r3, #16
 8001568:	b2db      	uxtb	r3, r3
 800156a:	73fb      	strb	r3, [r7, #15]
    }
    MAX31865_write(MAX31856_CONFIG_REG, status);
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	461a      	mov	r2, r3
 8001570:	2100      	movs	r1, #0
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff ff78 	bl	8001468 <_ZN13MAX31865_TEMP14MAX31865_writeEhh>
}
 8001578:	bf00      	nop
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <_ZN13MAX31865_TEMP11single_shotEv>:

/**
 * Perform a single shot conversion
 */
void MAX31865_TEMP::single_shot(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
    uint8_t status;
    // Read config register
   // MAX31865_read(MAX31856_CONFIG_REG, &status,1);
    // Enable 1shot bit, and write back
    //status = MAX31856_CONFIG_1SHOT;
    status = 0xA0;
 8001588:	23a0      	movs	r3, #160	; 0xa0
 800158a:	73fb      	strb	r3, [r7, #15]
    MAX31865_write(MAX31856_CONFIG_REG, status);
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	461a      	mov	r2, r3
 8001590:	2100      	movs	r1, #0
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ff68 	bl	8001468 <_ZN13MAX31865_TEMP14MAX31865_writeEhh>
}
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <_ZN5ModelC1Ev>:
 *      Author: marce
 */

#include "Model.h"

Model::Model() {
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

	for(uint8_t counter = 0; counter<GPS_DATA_SIZE; counter++){
 80015a8:	2300      	movs	r3, #0
 80015aa:	73fb      	strb	r3, [r7, #15]
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	2b4f      	cmp	r3, #79	; 0x4f
 80015b0:	d80d      	bhi.n	80015ce <_ZN5ModelC1Ev+0x2e>
		 gpsGCS[counter] = 11;
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	210b      	movs	r1, #11
 80015b8:	54d1      	strb	r1, [r2, r3]
		 gpsDevice[counter] = 22;
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	4413      	add	r3, r2
 80015c0:	2216      	movs	r2, #22
 80015c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	for(uint8_t counter = 0; counter<GPS_DATA_SIZE; counter++){
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	3301      	adds	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	e7ee      	b.n	80015ac <_ZN5ModelC1Ev+0xc>
	}
	 humidity = 0;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	 pressure = 0;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	 tempOutisde = 0;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	 tempOutisde8Bit = 0;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
	 tempInside = 0;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4618      	mov	r0, r3
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <_ZN5Model13setGPS_DeviceEPc>:
	//not implemented in Device
	return gpsGCS;
}

//get/set GPS_Device Data
void Model::setGPS_Device(char* data){
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
	strncpy(gpsDevice, data, GPS_DATA_SIZE);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3350      	adds	r3, #80	; 0x50
 8001612:	2250      	movs	r2, #80	; 0x50
 8001614:	6839      	ldr	r1, [r7, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f009 fb32 	bl	800ac80 <strncpy>
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <_ZN5Model13getGPS_DeviceEv>:
char* Model::getGPS_Device(void){
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	return gpsDevice;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3350      	adds	r3, #80	; 0x50
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <_ZN5Model11setHumidityEt>:

//get/set Humidity
void Model::setHumidity(uint16_t data){
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]
	humidity = data;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	887a      	ldrh	r2, [r7, #2]
 800164c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <_ZN5Model11getHumidityEv>:
uint16_t Model::getHumidity(void){
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	return humidity;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <_ZN5Model11setPressureEt>:

//get/set Pressure
void Model::setPressure(uint16_t data){
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	460b      	mov	r3, r1
 8001680:	807b      	strh	r3, [r7, #2]
	pressure = (data -32768);
 8001682:	887b      	ldrh	r3, [r7, #2]
 8001684:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001688:	b29a      	uxth	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <_ZN5Model11getPressureEv>:
uint16_t Model::getPressure(void){
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	return pressure;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <_ZN5Model14setTempOutsideEt>:

//get/set TempOutise
void Model::setTempOutside(uint16_t data){
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	460b      	mov	r3, r1
 80016c0:	807b      	strh	r3, [r7, #2]
	tempOutisde = data;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	887a      	ldrh	r2, [r7, #2]
 80016c6:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <_ZN5Model14getTempOutsideEv>:
uint16_t Model::getTempOutside(void){
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
	return tempOutisde;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <_ZN5Model13setTempInsideEt>:
uint8_t  Model::getTempOutside8Bit(){
	return tempOutisde8Bit;
}

//get/set TempInside
void Model::setTempInside(uint16_t data){
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	807b      	strh	r3, [r7, #2]
	tempInside = data;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	887a      	ldrh	r2, [r7, #2]
 8001700:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <_ZN5Model12getTempInsedEv>:
uint16_t Model::getTempInsed(void){
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	return tempInside;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <_ZN10RFM95_LoRaC1Ev>:
 */

#include "RFM95LoRa.h"
#include "../../AppMain/AppMain.h"

RFM95_LoRa::RFM95_LoRa() :
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  _frequency(0),
  _packetIndex(0),
  _implicitHeaderMode(0),
  _onReceive(0)
 8001734:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <_ZN10RFM95_LoRaC1Ev+0x34>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	615a      	str	r2, [r3, #20]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
{

}
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	0800ad14 	.word	0x0800ad14

08001764 <_ZN10RFM95_LoRa9selectRFMEv>:
 * @brief RFM95 chip select
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::selectRFM(){
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_RESET);
 800176c:	2200      	movs	r2, #0
 800176e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001776:	f001 fb6d 	bl	8002e54 <HAL_GPIO_WritePin>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <_ZN10RFM95_LoRa11deselectRFMEv>:
 * @brief RFM95 chip deselect
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::deselectRFM(){
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_SET);
 800178a:	2201      	movs	r2, #1
 800178c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001794:	f001 fb5e 	bl	8002e54 <HAL_GPIO_WritePin>
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <_ZN10RFM95_LoRa8resetRFMEv>:

void RFM95_LoRa::resetRFM(){
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_RESET);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2108      	movs	r1, #8
 80017ac:	4808      	ldr	r0, [pc, #32]	; (80017d0 <_ZN10RFM95_LoRa8resetRFMEv+0x30>)
 80017ae:	f001 fb51 	bl	8002e54 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80017b2:	2001      	movs	r0, #1
 80017b4:	f001 f868 	bl	8002888 <HAL_Delay>
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_SET);
 80017b8:	2201      	movs	r2, #1
 80017ba:	2108      	movs	r1, #8
 80017bc:	4804      	ldr	r0, [pc, #16]	; (80017d0 <_ZN10RFM95_LoRa8resetRFMEv+0x30>)
 80017be:	f001 fb49 	bl	8002e54 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80017c2:	2005      	movs	r0, #5
 80017c4:	f001 f860 	bl	8002888 <HAL_Delay>
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	48000400 	.word	0x48000400

080017d4 <_ZN10RFM95_LoRa13writeRegisterEhh>:

bool RFM95_LoRa::writeRegister(uint8_t addr, uint8_t data){
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	70fb      	strb	r3, [r7, #3]
 80017e0:	4613      	mov	r3, r2
 80017e2:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2] = {(uint8_t)(addr | 0x80), data};
 80017e4:	78fb      	ldrb	r3, [r7, #3]
 80017e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	733b      	strb	r3, [r7, #12]
 80017ee:	78bb      	ldrb	r3, [r7, #2]
 80017f0:	737b      	strb	r3, [r7, #13]
	selectRFM();
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ffb6 	bl	8001764 <_ZN10RFM95_LoRa9selectRFMEv>
	if(HAL_SPI_Transmit(&hspi1, (uint8_t*)buff, 2, 100) != HAL_OK){
 80017f8:	f107 010c 	add.w	r1, r7, #12
 80017fc:	2364      	movs	r3, #100	; 0x64
 80017fe:	2202      	movs	r2, #2
 8001800:	480b      	ldr	r0, [pc, #44]	; (8001830 <_ZN10RFM95_LoRa13writeRegisterEhh+0x5c>)
 8001802:	f004 f9e7 	bl	8005bd4 <HAL_SPI_Transmit>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	bf14      	ite	ne
 800180c:	2301      	movne	r3, #1
 800180e:	2300      	moveq	r3, #0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d004      	beq.n	8001820 <_ZN10RFM95_LoRa13writeRegisterEhh+0x4c>
		deselectRFM();
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff ffb3 	bl	8001782 <_ZN10RFM95_LoRa11deselectRFMEv>
		return false;
 800181c:	2300      	movs	r3, #0
 800181e:	e003      	b.n	8001828 <_ZN10RFM95_LoRa13writeRegisterEhh+0x54>
	}
	deselectRFM();
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ffae 	bl	8001782 <_ZN10RFM95_LoRa11deselectRFMEv>
	return true;
 8001826:	2301      	movs	r3, #1
}
 8001828:	4618      	mov	r0, r3
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	200005a4 	.word	0x200005a4

08001834 <_ZN10RFM95_LoRa12readRegisterEh>:

uint8_t RFM95_LoRa::readRegister(uint8_t addr){
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af02      	add	r7, sp, #8
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	70fb      	strb	r3, [r7, #3]
	uint8_t rxData[2] = {0,0};
 8001840:	2300      	movs	r3, #0
 8001842:	733b      	strb	r3, [r7, #12]
 8001844:	2300      	movs	r3, #0
 8001846:	737b      	strb	r3, [r7, #13]
	uint8_t txData[1] = {addr};
 8001848:	78fb      	ldrb	r3, [r7, #3]
 800184a:	723b      	strb	r3, [r7, #8]

	selectRFM();
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ff89 	bl	8001764 <_ZN10RFM95_LoRa9selectRFMEv>
		HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)txData,(uint8_t*)rxData,2,100);
 8001852:	f107 020c 	add.w	r2, r7, #12
 8001856:	f107 0108 	add.w	r1, r7, #8
 800185a:	2364      	movs	r3, #100	; 0x64
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	2302      	movs	r3, #2
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <_ZN10RFM95_LoRa12readRegisterEh+0x44>)
 8001862:	f004 fc45 	bl	80060f0 <HAL_SPI_TransmitReceive>
	deselectRFM();
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff ff8b 	bl	8001782 <_ZN10RFM95_LoRa11deselectRFMEv>
	return rxData[1];
 800186c:	7b7b      	ldrb	r3, [r7, #13]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200005a4 	.word	0x200005a4

0800187c <_ZN10RFM95_LoRa5beginEl>:


int RFM95_LoRa::begin(long frequency){
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
 resetRFM();
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ff8a 	bl	80017a0 <_ZN10RFM95_LoRa8resetRFMEv>
  // check version
  uint8_t version = readRegister(REG_VERSION);
 800188c:	2142      	movs	r1, #66	; 0x42
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff ffd0 	bl	8001834 <_ZN10RFM95_LoRa12readRegisterEh>
 8001894:	4603      	mov	r3, r0
 8001896:	73fb      	strb	r3, [r7, #15]
  if (version != 0x12) {
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	2b12      	cmp	r3, #18
 800189c:	d001      	beq.n	80018a2 <_ZN10RFM95_LoRa5beginEl+0x26>
    return 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	e02b      	b.n	80018fa <_ZN10RFM95_LoRa5beginEl+0x7e>
  }
  // put in sleep mode
  sleep();
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f92e 	bl	8001b04 <_ZN10RFM95_LoRa5sleepEv>
  // set frequency
  setFrequency(frequency);
 80018a8:	6839      	ldr	r1, [r7, #0]
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 f974 	bl	8001b98 <_ZN10RFM95_LoRa12setFrequencyEl>
  // set base addresses
  writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
 80018b0:	2200      	movs	r2, #0
 80018b2:	210e      	movs	r1, #14
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ff8d 	bl	80017d4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FIFO_RX_BASE_ADDR, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	210f      	movs	r1, #15
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff ff88 	bl	80017d4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set LNA boost
  writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 80018c4:	210c      	movs	r1, #12
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff ffb4 	bl	8001834 <_ZN10RFM95_LoRa12readRegisterEh>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f043 0303 	orr.w	r3, r3, #3
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	461a      	mov	r2, r3
 80018d6:	210c      	movs	r1, #12
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ff7b 	bl	80017d4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set auto AGC
  writeRegister(REG_MODEM_CONFIG_3, 0x04);
 80018de:	2204      	movs	r2, #4
 80018e0:	2126      	movs	r1, #38	; 0x26
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ff76 	bl	80017d4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set output power to 17 dBm
  setTxPower(20);
 80018e8:	2201      	movs	r2, #1
 80018ea:	2114      	movs	r1, #20
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f916 	bl	8001b1e <_ZN10RFM95_LoRa10setTxPowerEii>
  // put in standby mode
  idle();
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f8f9 	bl	8001aea <_ZN10RFM95_LoRa4idleEv>
  return 1;
 80018f8:	2301      	movs	r3, #1
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_ZN10RFM95_LoRa11beginPacketEi>:
  sleep();
}



int RFM95_LoRa::beginPacket(int implicitHeader){
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
  // put in standby mode
  idle();
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 f8ec 	bl	8001aea <_ZN10RFM95_LoRa4idleEv>

  if (implicitHeader) {
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <_ZN10RFM95_LoRa11beginPacketEi+0x1e>
    implicitHeaderMode();
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 fac8 	bl	8001eae <_ZN10RFM95_LoRa18implicitHeaderModeEv>
 800191e:	e002      	b.n	8001926 <_ZN10RFM95_LoRa11beginPacketEi+0x24>
  } else {
    explicitHeaderMode();
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 faac 	bl	8001e7e <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }

  // reset FIFO address and paload length
  writeRegister(REG_FIFO_ADDR_PTR, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	210d      	movs	r1, #13
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff ff52 	bl	80017d4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_PAYLOAD_LENGTH, 0);
 8001930:	2200      	movs	r2, #0
 8001932:	2122      	movs	r1, #34	; 0x22
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff4d 	bl	80017d4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return 1;
 800193a:	2301      	movs	r3, #1
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <_ZN10RFM95_LoRa9endPacketEv>:



int RFM95_LoRa::endPacket(){
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  // put in TX mode
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 800194c:	2283      	movs	r2, #131	; 0x83
 800194e:	2101      	movs	r1, #1
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ff3f 	bl	80017d4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // wait for TX done
  while ((readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 8001956:	2112      	movs	r1, #18
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ff6b 	bl	8001834 <_ZN10RFM95_LoRa12readRegisterEh>
 800195e:	4603      	mov	r3, r0
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	2b00      	cmp	r3, #0
 8001966:	bf0c      	ite	eq
 8001968:	2301      	moveq	r3, #1
 800196a:	2300      	movne	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d000      	beq.n	8001974 <_ZN10RFM95_LoRa9endPacketEv+0x30>
 8001972:	e7f0      	b.n	8001956 <_ZN10RFM95_LoRa9endPacketEv+0x12>

  }
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001974:	2102      	movs	r1, #2
 8001976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197a:	f001 fa83 	bl	8002e84 <HAL_GPIO_TogglePin>
  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 800197e:	2208      	movs	r2, #8
 8001980:	2112      	movs	r1, #18
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ff26 	bl	80017d4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return 1;
 8001988:	2301      	movs	r3, #1
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <_ZN10RFM95_LoRa5writeEh>:

float RFM95_LoRa::packetSnr(){
  return ((int8_t)readRegister(REG_PKT_SNR_VALUE)) * 0.25;
}

size_t RFM95_LoRa::write(uint8_t byte){
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	460b      	mov	r3, r1
 800199c:	70fb      	strb	r3, [r7, #3]
  return write(&byte, sizeof(byte));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	3304      	adds	r3, #4
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	1cf9      	adds	r1, r7, #3
 80019a8:	2201      	movs	r2, #1
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	4798      	blx	r3
 80019ae:	4603      	mov	r3, r0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <_ZN10RFM95_LoRa5writeEPKhj>:



size_t RFM95_LoRa::write(const uint8_t *buffer, size_t size){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  int currentLength = readRegister(REG_PAYLOAD_LENGTH);
 80019c4:	2122      	movs	r1, #34	; 0x22
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f7ff ff34 	bl	8001834 <_ZN10RFM95_LoRa12readRegisterEh>
 80019cc:	4603      	mov	r3, r0
 80019ce:	613b      	str	r3, [r7, #16]
  // check size
  if ((currentLength + size) > MAX_PKT_LENGTH) {
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	2bff      	cmp	r3, #255	; 0xff
 80019d8:	d903      	bls.n	80019e2 <_ZN10RFM95_LoRa5writeEPKhj+0x2a>
    size = MAX_PKT_LENGTH - currentLength;
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80019e0:	607b      	str	r3, [r7, #4]
  }
  // write data
  for (size_t i = 0; i < size; i++) {
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d20c      	bcs.n	8001a08 <_ZN10RFM95_LoRa5writeEPKhj+0x50>
    writeRegister(REG_FIFO, buffer[i]);
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	4413      	add	r3, r2
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	2100      	movs	r1, #0
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f7ff feea 	bl	80017d4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  for (size_t i = 0; i < size; i++) {
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	3301      	adds	r3, #1
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	e7ee      	b.n	80019e6 <_ZN10RFM95_LoRa5writeEPKhj+0x2e>
  }

  // update length
  writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	4413      	add	r3, r2
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	461a      	mov	r2, r3
 8001a16:	2122      	movs	r1, #34	; 0x22
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f7ff fedb 	bl	80017d4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return size;
 8001a1e:	687b      	ldr	r3, [r7, #4]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <_ZN10RFM95_LoRa9availableEv>:


int RFM95_LoRa::available()
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8001a30:	2113      	movs	r1, #19
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff fefe 	bl	8001834 <_ZN10RFM95_LoRa12readRegisterEh>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	1ad3      	subs	r3, r2, r3
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <_ZN10RFM95_LoRa4readEv>:



int RFM95_LoRa::read(){
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	3308      	adds	r3, #8
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	4798      	blx	r3
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	bf0c      	ite	eq
 8001a64:	2301      	moveq	r3, #1
 8001a66:	2300      	movne	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <_ZN10RFM95_LoRa4readEv+0x2a>
    return -1;
 8001a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a72:	e009      	b.n	8001a88 <_ZN10RFM95_LoRa4readEv+0x3e>
  }
  _packetIndex++;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	615a      	str	r2, [r3, #20]
  return readRegister(REG_FIFO);
 8001a7e:	2100      	movs	r1, #0
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff fed7 	bl	8001834 <_ZN10RFM95_LoRa12readRegisterEh>
 8001a86:	4603      	mov	r3, r0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <_ZN10RFM95_LoRa4peekEv>:



int RFM95_LoRa::peek(){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	3308      	adds	r3, #8
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	4798      	blx	r3
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	bf0c      	ite	eq
 8001aaa:	2301      	moveq	r3, #1
 8001aac:	2300      	movne	r3, #0
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <_ZN10RFM95_LoRa4peekEv+0x2a>
    return -1;
 8001ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab8:	e013      	b.n	8001ae2 <_ZN10RFM95_LoRa4peekEv+0x52>
  }
  // store current FIFO address
  int currentAddress = readRegister(REG_FIFO_ADDR_PTR);
 8001aba:	210d      	movs	r1, #13
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff feb9 	bl	8001834 <_ZN10RFM95_LoRa12readRegisterEh>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	60fb      	str	r3, [r7, #12]
  // read
  uint8_t b = readRegister(REG_FIFO);
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff feb3 	bl	8001834 <_ZN10RFM95_LoRa12readRegisterEh>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	72fb      	strb	r3, [r7, #11]
  // restore FIFO address
  writeRegister(REG_FIFO_ADDR_PTR, currentAddress);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	210d      	movs	r1, #13
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fe7a 	bl	80017d4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return b;
 8001ae0:	7afb      	ldrb	r3, [r7, #11]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <_ZN10RFM95_LoRa4idleEv>:
    explicitHeaderMode();
  }
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
}

void RFM95_LoRa::idle(){
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8001af2:	2281      	movs	r2, #129	; 0x81
 8001af4:	2101      	movs	r1, #1
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff fe6c 	bl	80017d4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <_ZN10RFM95_LoRa5sleepEv>:

void RFM95_LoRa::sleep(){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8001b0c:	2280      	movs	r2, #128	; 0x80
 8001b0e:	2101      	movs	r1, #1
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff fe5f 	bl	80017d4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <_ZN10RFM95_LoRa10setTxPowerEii>:



void RFM95_LoRa::setTxPower(int level, int outputPin){
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b084      	sub	sp, #16
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	60f8      	str	r0, [r7, #12]
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
  if (PA_OUTPUT_RFO_PIN == outputPin) {
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d116      	bne.n	8001b5e <_ZN10RFM95_LoRa10setTxPowerEii+0x40>
    // RFO
    if (level < 0) {
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	da02      	bge.n	8001b3c <_ZN10RFM95_LoRa10setTxPowerEii+0x1e>
      level = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	e004      	b.n	8001b46 <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
    } else if (level > 14) {
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b0e      	cmp	r3, #14
 8001b40:	dd01      	ble.n	8001b46 <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
      level = 14;
 8001b42:	230e      	movs	r3, #14
 8001b44:	60bb      	str	r3, [r7, #8]
    }
    writeRegister(REG_PA_CONFIG, 0x70 | level);
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	b25b      	sxtb	r3, r3
 8001b4a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001b4e:	b25b      	sxtb	r3, r3
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	461a      	mov	r2, r3
 8001b54:	2109      	movs	r1, #9
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f7ff fe3c 	bl	80017d4 <_ZN10RFM95_LoRa13writeRegisterEhh>
    } else if (level > 17) {
      level = 17;
    }
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
  }
}
 8001b5c:	e018      	b.n	8001b90 <_ZN10RFM95_LoRa10setTxPowerEii+0x72>
    if (level < 2) {
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	dc02      	bgt.n	8001b6a <_ZN10RFM95_LoRa10setTxPowerEii+0x4c>
      level = 2;
 8001b64:	2302      	movs	r3, #2
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	e004      	b.n	8001b74 <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
    } else if (level > 17) {
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b11      	cmp	r3, #17
 8001b6e:	dd01      	ble.n	8001b74 <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
      level = 17;
 8001b70:	2311      	movs	r3, #17
 8001b72:	60bb      	str	r3, [r7, #8]
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	3b02      	subs	r3, #2
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	b25b      	sxtb	r3, r3
 8001b7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b82:	b25b      	sxtb	r3, r3
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	461a      	mov	r2, r3
 8001b88:	2109      	movs	r1, #9
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f7ff fe22 	bl	80017d4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001b90:	bf00      	nop
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <_ZN10RFM95_LoRa12setFrequencyEl>:



void RFM95_LoRa::setFrequency(long frequency){
 8001b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  _frequency = frequency;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	611a      	str	r2, [r3, #16]
  uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001bae:	135e      	asrs	r6, r3, #13
 8001bb0:	04dd      	lsls	r5, r3, #19
 8001bb2:	4a1a      	ldr	r2, [pc, #104]	; (8001c1c <_ZN10RFM95_LoRa12setFrequencyEl+0x84>)
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	4628      	mov	r0, r5
 8001bba:	4631      	mov	r1, r6
 8001bbc:	f7fe ffae 	bl	8000b1c <__aeabi_uldivmod>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	460c      	mov	r4, r1
 8001bc4:	e9c7 3402 	strd	r3, r4, [r7, #8]
  writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8001bc8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	f04f 0400 	mov.w	r4, #0
 8001bd4:	0c0b      	lsrs	r3, r1, #16
 8001bd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001bda:	0c14      	lsrs	r4, r2, #16
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	461a      	mov	r2, r3
 8001be0:	2106      	movs	r1, #6
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff fdf6 	bl	80017d4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 8001be8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	f04f 0400 	mov.w	r4, #0
 8001bf4:	0a0b      	lsrs	r3, r1, #8
 8001bf6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001bfa:	0a14      	lsrs	r4, r2, #8
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	461a      	mov	r2, r3
 8001c00:	2107      	movs	r1, #7
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff fde6 	bl	80017d4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8001c08:	7a3b      	ldrb	r3, [r7, #8]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	2108      	movs	r1, #8
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff fde0 	bl	80017d4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001c14:	bf00      	nop
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c1c:	01e84800 	.word	0x01e84800

08001c20 <_ZN10RFM95_LoRa18setSpreadingFactorEi>:



void RFM95_LoRa::setSpreadingFactor(int sf){
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  if (sf < 6) {
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2b05      	cmp	r3, #5
 8001c2e:	dc02      	bgt.n	8001c36 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x16>
    sf = 6;
 8001c30:	2306      	movs	r3, #6
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	e004      	b.n	8001c40 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
  } else if (sf > 12) {
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	2b0c      	cmp	r3, #12
 8001c3a:	dd01      	ble.n	8001c40 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
    sf = 12;
 8001c3c:	230c      	movs	r3, #12
 8001c3e:	603b      	str	r3, [r7, #0]
  }

  if (sf == 6) {
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d10a      	bne.n	8001c5c <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x3c>
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc5);
 8001c46:	22c5      	movs	r2, #197	; 0xc5
 8001c48:	2131      	movs	r1, #49	; 0x31
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff fdc2 	bl	80017d4 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0c);
 8001c50:	220c      	movs	r2, #12
 8001c52:	2137      	movs	r1, #55	; 0x37
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff fdbd 	bl	80017d4 <_ZN10RFM95_LoRa13writeRegisterEhh>
 8001c5a:	e009      	b.n	8001c70 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x50>
  } else {
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
 8001c5c:	22c3      	movs	r2, #195	; 0xc3
 8001c5e:	2131      	movs	r1, #49	; 0x31
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff fdb7 	bl	80017d4 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
 8001c66:	220a      	movs	r2, #10
 8001c68:	2137      	movs	r1, #55	; 0x37
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff fdb2 	bl	80017d4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  writeRegister(REG_MODEM_CONFIG_2, (readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 8001c70:	211e      	movs	r1, #30
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff fdde 	bl	8001834 <_ZN10RFM95_LoRa12readRegisterEh>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	b25b      	sxtb	r3, r3
 8001c7c:	f003 030f 	and.w	r3, r3, #15
 8001c80:	b25a      	sxtb	r2, r3
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	011b      	lsls	r3, r3, #4
 8001c86:	b25b      	sxtb	r3, r3
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	b25b      	sxtb	r3, r3
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	461a      	mov	r2, r3
 8001c90:	211e      	movs	r1, #30
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff fd9e 	bl	80017d4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <_ZN10RFM95_LoRa18setSignalBandwidthEl>:


void RFM95_LoRa::setSignalBandwidth(long sbw){
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  int bw;
  if (sbw <= 7.8E3) {
 8001caa:	6838      	ldr	r0, [r7, #0]
 8001cac:	f7fe fbe2 	bl	8000474 <__aeabi_i2d>
 8001cb0:	a34b      	add	r3, pc, #300	; (adr r3, 8001de0 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x140>)
 8001cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb6:	f7fe fec3 	bl	8000a40 <__aeabi_dcmple>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d002      	beq.n	8001cc6 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x26>
    bw = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	e071      	b.n	8001daa <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 10.4E3) {
 8001cc6:	6838      	ldr	r0, [r7, #0]
 8001cc8:	f7fe fbd4 	bl	8000474 <__aeabi_i2d>
 8001ccc:	a346      	add	r3, pc, #280	; (adr r3, 8001de8 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x148>)
 8001cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd2:	f7fe feb5 	bl	8000a40 <__aeabi_dcmple>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d002      	beq.n	8001ce2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x42>
    bw = 1;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	e063      	b.n	8001daa <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 15.6E3) {
 8001ce2:	6838      	ldr	r0, [r7, #0]
 8001ce4:	f7fe fbc6 	bl	8000474 <__aeabi_i2d>
 8001ce8:	a341      	add	r3, pc, #260	; (adr r3, 8001df0 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x150>)
 8001cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cee:	f7fe fea7 	bl	8000a40 <__aeabi_dcmple>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x5e>
    bw = 2;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	e055      	b.n	8001daa <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 20.8E3) {
 8001cfe:	6838      	ldr	r0, [r7, #0]
 8001d00:	f7fe fbb8 	bl	8000474 <__aeabi_i2d>
 8001d04:	a33c      	add	r3, pc, #240	; (adr r3, 8001df8 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x158>)
 8001d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0a:	f7fe fe99 	bl	8000a40 <__aeabi_dcmple>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d002      	beq.n	8001d1a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x7a>
    bw = 3;
 8001d14:	2303      	movs	r3, #3
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	e047      	b.n	8001daa <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 31.25E3) {
 8001d1a:	6838      	ldr	r0, [r7, #0]
 8001d1c:	f7fe fbaa 	bl	8000474 <__aeabi_i2d>
 8001d20:	a337      	add	r3, pc, #220	; (adr r3, 8001e00 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x160>)
 8001d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d26:	f7fe fe8b 	bl	8000a40 <__aeabi_dcmple>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x96>
    bw = 4;
 8001d30:	2304      	movs	r3, #4
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	e039      	b.n	8001daa <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 41.7E3) {
 8001d36:	6838      	ldr	r0, [r7, #0]
 8001d38:	f7fe fb9c 	bl	8000474 <__aeabi_i2d>
 8001d3c:	a332      	add	r3, pc, #200	; (adr r3, 8001e08 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x168>)
 8001d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d42:	f7fe fe7d 	bl	8000a40 <__aeabi_dcmple>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d002      	beq.n	8001d52 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xb2>
    bw = 5;
 8001d4c:	2305      	movs	r3, #5
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	e02b      	b.n	8001daa <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 62.5E3) {
 8001d52:	6838      	ldr	r0, [r7, #0]
 8001d54:	f7fe fb8e 	bl	8000474 <__aeabi_i2d>
 8001d58:	a32d      	add	r3, pc, #180	; (adr r3, 8001e10 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x170>)
 8001d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5e:	f7fe fe6f 	bl	8000a40 <__aeabi_dcmple>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d002      	beq.n	8001d6e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xce>
    bw = 6;
 8001d68:	2306      	movs	r3, #6
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	e01d      	b.n	8001daa <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 125E3) {
 8001d6e:	6838      	ldr	r0, [r7, #0]
 8001d70:	f7fe fb80 	bl	8000474 <__aeabi_i2d>
 8001d74:	a328      	add	r3, pc, #160	; (adr r3, 8001e18 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x178>)
 8001d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7a:	f7fe fe61 	bl	8000a40 <__aeabi_dcmple>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xea>
    bw = 7;
 8001d84:	2307      	movs	r3, #7
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	e00f      	b.n	8001daa <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 250E3) {
 8001d8a:	6838      	ldr	r0, [r7, #0]
 8001d8c:	f7fe fb72 	bl	8000474 <__aeabi_i2d>
 8001d90:	a323      	add	r3, pc, #140	; (adr r3, 8001e20 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x180>)
 8001d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d96:	f7fe fe53 	bl	8000a40 <__aeabi_dcmple>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x106>
    bw = 8;
 8001da0:	2308      	movs	r3, #8
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	e001      	b.n	8001daa <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x10a>
  } else /*if (sbw <= 250E3)*/ {
    bw = 9;
 8001da6:	2309      	movs	r3, #9
 8001da8:	60fb      	str	r3, [r7, #12]
  }

  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 8001daa:	211d      	movs	r1, #29
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff fd41 	bl	8001834 <_ZN10RFM95_LoRa12readRegisterEh>
 8001db2:	4603      	mov	r3, r0
 8001db4:	b25b      	sxtb	r3, r3
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	b25a      	sxtb	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	011b      	lsls	r3, r3, #4
 8001dc0:	b25b      	sxtb	r3, r3
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	b25b      	sxtb	r3, r3
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	461a      	mov	r2, r3
 8001dca:	211d      	movs	r1, #29
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff fd01 	bl	80017d4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	f3af 8000 	nop.w
 8001de0:	00000000 	.word	0x00000000
 8001de4:	40be7800 	.word	0x40be7800
 8001de8:	00000000 	.word	0x00000000
 8001dec:	40c45000 	.word	0x40c45000
 8001df0:	00000000 	.word	0x00000000
 8001df4:	40ce7800 	.word	0x40ce7800
 8001df8:	00000000 	.word	0x00000000
 8001dfc:	40d45000 	.word	0x40d45000
 8001e00:	00000000 	.word	0x00000000
 8001e04:	40de8480 	.word	0x40de8480
 8001e08:	00000000 	.word	0x00000000
 8001e0c:	40e45c80 	.word	0x40e45c80
 8001e10:	00000000 	.word	0x00000000
 8001e14:	40ee8480 	.word	0x40ee8480
 8001e18:	00000000 	.word	0x00000000
 8001e1c:	40fe8480 	.word	0x40fe8480
 8001e20:	00000000 	.word	0x00000000
 8001e24:	410e8480 	.word	0x410e8480

08001e28 <_ZN10RFM95_LoRa14setCodingRate4Ei>:



void RFM95_LoRa::setCodingRate4(int denominator){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  if (denominator < 5) {
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	dc02      	bgt.n	8001e3e <_ZN10RFM95_LoRa14setCodingRate4Ei+0x16>
    denominator = 5;
 8001e38:	2305      	movs	r3, #5
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	e004      	b.n	8001e48 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
  } else if (denominator > 8) {
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	dd01      	ble.n	8001e48 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
	  denominator = 8;
 8001e44:	2308      	movs	r3, #8
 8001e46:	603b      	str	r3, [r7, #0]
  }
  int cr = denominator - 4;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	3b04      	subs	r3, #4
 8001e4c:	60fb      	str	r3, [r7, #12]
  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0xf1) | (cr << 1));
 8001e4e:	211d      	movs	r1, #29
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff fcef 	bl	8001834 <_ZN10RFM95_LoRa12readRegisterEh>
 8001e56:	4603      	mov	r3, r0
 8001e58:	b25b      	sxtb	r3, r3
 8001e5a:	f023 030e 	bic.w	r3, r3, #14
 8001e5e:	b25a      	sxtb	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	b25b      	sxtb	r3, r3
 8001e66:	4313      	orrs	r3, r2
 8001e68:	b25b      	sxtb	r3, r3
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	211d      	movs	r1, #29
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7ff fcaf 	bl	80017d4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <_ZN10RFM95_LoRa18explicitHeaderModeEv>:
uint8_t RFM95_LoRa::random(){
  return readRegister(REG_RSSI_WIDEBAND);
}


void RFM95_LoRa::explicitHeaderMode(){
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 0;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 8001e8c:	211d      	movs	r1, #29
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff fcd0 	bl	8001834 <_ZN10RFM95_LoRa12readRegisterEh>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	211d      	movs	r1, #29
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff fc97 	bl	80017d4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <_ZN10RFM95_LoRa18implicitHeaderModeEv>:


void RFM95_LoRa::implicitHeaderMode(){
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 1;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 8001ebc:	211d      	movs	r1, #29
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff fcb8 	bl	8001834 <_ZN10RFM95_LoRa12readRegisterEh>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	461a      	mov	r2, r3
 8001ece:	211d      	movs	r1, #29
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff fc7f 	bl	80017d4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <_ZN5SHT21C1EP5Model>:
 *      Author: marce
 */

#include "SHT21.h"

SHT21::SHT21(Model *model) {
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]
	this->model = model;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	601a      	str	r2, [r3, #0]

}
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <_ZN5SHT219writeByteEh>:

void SHT21::initSHT21(){

}

HAL_StatusTypeDef SHT21::writeByte(uint8_t addr){
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af02      	add	r7, sp, #8
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	70fb      	strb	r3, [r7, #3]
	uint8_t txBuffer[1];
	txBuffer[0] = addr;
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	733b      	strb	r3, [r7, #12]
	return(HAL_I2C_Master_Transmit(&hi2c1,SHT21_SLAVE_ADDR<<1,(uint8_t*)txBuffer,1,I2C_Timeout));
 8001f0c:	f107 020c 	add.w	r2, r7, #12
 8001f10:	2364      	movs	r3, #100	; 0x64
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	2301      	movs	r3, #1
 8001f16:	2180      	movs	r1, #128	; 0x80
 8001f18:	4803      	ldr	r0, [pc, #12]	; (8001f28 <_ZN5SHT219writeByteEh+0x2c>)
 8001f1a:	f001 f85b 	bl	8002fd4 <HAL_I2C_Master_Transmit>
 8001f1e:	4603      	mov	r3, r0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000558 	.word	0x20000558

08001f2c <_ZN5SHT2113readSHT21TempEv>:


uint32_t SHT21::readSHT21Temp(){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af02      	add	r7, sp, #8
 8001f32:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2];
	writeByte(SHT21_TEMP_REG);
 8001f34:	21e3      	movs	r1, #227	; 0xe3
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ffe0 	bl	8001efc <_ZN5SHT219writeByteEh>
	/*Warten bis Messung beendet*/
	while(HAL_I2C_Master_Receive(&hi2c1,SHT21_SLAVE_ADDR<<1,buffer,2,I2C_Timeout) != HAL_OK);
 8001f3c:	f107 020c 	add.w	r2, r7, #12
 8001f40:	2364      	movs	r3, #100	; 0x64
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	2302      	movs	r3, #2
 8001f46:	2180      	movs	r1, #128	; 0x80
 8001f48:	4810      	ldr	r0, [pc, #64]	; (8001f8c <_ZN5SHT2113readSHT21TempEv+0x60>)
 8001f4a:	f001 f937 	bl	80031bc <HAL_I2C_Master_Receive>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	bf14      	ite	ne
 8001f54:	2301      	movne	r3, #1
 8001f56:	2300      	moveq	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d000      	beq.n	8001f60 <_ZN5SHT2113readSHT21TempEv+0x34>
 8001f5e:	e7ed      	b.n	8001f3c <_ZN5SHT2113readSHT21TempEv+0x10>
	model->setTempOutside((buffer[0]<<8)+buffer[1]);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	7b3b      	ldrb	r3, [r7, #12]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	7b7b      	ldrb	r3, [r7, #13]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	4413      	add	r3, r2
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	4619      	mov	r1, r3
 8001f76:	f7ff fb9e 	bl	80016b6 <_ZN5Model14setTempOutsideEt>
	return((buffer[0]<<8)+buffer[1]);
 8001f7a:	7b3b      	ldrb	r3, [r7, #12]
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	7b7a      	ldrb	r2, [r7, #13]
 8001f80:	4413      	add	r3, r2
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000558 	.word	0x20000558

08001f90 <_ZN5SHT2117readSHT21HumidityEv>:

uint32_t SHT21::readSHT21Humidity(){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af02      	add	r7, sp, #8
 8001f96:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2];
	writeByte(SHT21_HUMIDITY_REG);
 8001f98:	21e5      	movs	r1, #229	; 0xe5
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ffae 	bl	8001efc <_ZN5SHT219writeByteEh>
	while(HAL_I2C_Master_Receive(&hi2c1,SHT21_SLAVE_ADDR<<1,buffer,2,I2C_Timeout) != HAL_OK);
 8001fa0:	f107 020c 	add.w	r2, r7, #12
 8001fa4:	2364      	movs	r3, #100	; 0x64
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	2302      	movs	r3, #2
 8001faa:	2180      	movs	r1, #128	; 0x80
 8001fac:	4810      	ldr	r0, [pc, #64]	; (8001ff0 <_ZN5SHT2117readSHT21HumidityEv+0x60>)
 8001fae:	f001 f905 	bl	80031bc <HAL_I2C_Master_Receive>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	bf14      	ite	ne
 8001fb8:	2301      	movne	r3, #1
 8001fba:	2300      	moveq	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d000      	beq.n	8001fc4 <_ZN5SHT2117readSHT21HumidityEv+0x34>
 8001fc2:	e7ed      	b.n	8001fa0 <_ZN5SHT2117readSHT21HumidityEv+0x10>
	model->setHumidity((buffer[0]<<8)+buffer[1]);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6818      	ldr	r0, [r3, #0]
 8001fc8:	7b3b      	ldrb	r3, [r7, #12]
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	7b7b      	ldrb	r3, [r7, #13]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	4619      	mov	r1, r3
 8001fda:	f7ff fb2f 	bl	800163c <_ZN5Model11setHumidityEt>
	return((buffer[0]<<8)+buffer[1]);
 8001fde:	7b3b      	ldrb	r3, [r7, #12]
 8001fe0:	021b      	lsls	r3, r3, #8
 8001fe2:	7b7a      	ldrb	r2, [r7, #13]
 8001fe4:	4413      	add	r3, r2
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000558 	.word	0x20000558

08001ff4 <_ZN7USB_ComC1Ev>:
 *      Author: marce
 */

#include "USBCom.h"

USB_Com::USB_Com() {
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub

}
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4618      	mov	r0, r3
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
	...

0800200c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002012:	f107 030c 	add.w	r3, r7, #12
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	60da      	str	r2, [r3, #12]
 8002020:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002022:	4b43      	ldr	r3, [pc, #268]	; (8002130 <MX_GPIO_Init+0x124>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002026:	4a42      	ldr	r2, [pc, #264]	; (8002130 <MX_GPIO_Init+0x124>)
 8002028:	f043 0304 	orr.w	r3, r3, #4
 800202c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800202e:	4b40      	ldr	r3, [pc, #256]	; (8002130 <MX_GPIO_Init+0x124>)
 8002030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800203a:	4b3d      	ldr	r3, [pc, #244]	; (8002130 <MX_GPIO_Init+0x124>)
 800203c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203e:	4a3c      	ldr	r2, [pc, #240]	; (8002130 <MX_GPIO_Init+0x124>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002046:	4b3a      	ldr	r3, [pc, #232]	; (8002130 <MX_GPIO_Init+0x124>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002052:	4b37      	ldr	r3, [pc, #220]	; (8002130 <MX_GPIO_Init+0x124>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002056:	4a36      	ldr	r2, [pc, #216]	; (8002130 <MX_GPIO_Init+0x124>)
 8002058:	f043 0302 	orr.w	r3, r3, #2
 800205c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800205e:	4b34      	ldr	r3, [pc, #208]	; (8002130 <MX_GPIO_Init+0x124>)
 8002060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	603b      	str	r3, [r7, #0]
 8002068:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|RFM_NSS_Pin, GPIO_PIN_RESET);
 800206a:	2200      	movs	r2, #0
 800206c:	f248 0102 	movw	r1, #32770	; 0x8002
 8002070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002074:	f000 feee 	bl	8002e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAX_CS_Pin|MAX_DRDY_Pin|RFM_RST_Pin, GPIO_PIN_RESET);
 8002078:	2200      	movs	r2, #0
 800207a:	210b      	movs	r1, #11
 800207c:	482d      	ldr	r0, [pc, #180]	; (8002134 <MX_GPIO_Init+0x128>)
 800207e:	f000 fee9 	bl	8002e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RFM_DIO2_Pin|RFM_DIO1_Pin;
 8002082:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002086:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002088:	2300      	movs	r3, #0
 800208a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002090:	f107 030c 	add.w	r3, r7, #12
 8002094:	4619      	mov	r1, r3
 8002096:	4828      	ldr	r0, [pc, #160]	; (8002138 <MX_GPIO_Init+0x12c>)
 8002098:	f000 fd6a 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NC_Pin|NCA8_Pin;
 800209c:	f240 1301 	movw	r3, #257	; 0x101
 80020a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020a2:	2303      	movs	r3, #3
 80020a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020aa:	f107 030c 	add.w	r3, r7, #12
 80020ae:	4619      	mov	r1, r3
 80020b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b4:	f000 fd5c 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Pin|RFM_NSS_Pin;
 80020b8:	f248 0302 	movw	r3, #32770	; 0x8002
 80020bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020be:	2301      	movs	r3, #1
 80020c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ca:	f107 030c 	add.w	r3, r7, #12
 80020ce:	4619      	mov	r1, r3
 80020d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d4:	f000 fd4c 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PRESSURE_INT_Pin;
 80020d8:	2310      	movs	r3, #16
 80020da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020dc:	4b17      	ldr	r3, [pc, #92]	; (800213c <MX_GPIO_Init+0x130>)
 80020de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PRESSURE_INT_GPIO_Port, &GPIO_InitStruct);
 80020e4:	f107 030c 	add.w	r3, r7, #12
 80020e8:	4619      	mov	r1, r3
 80020ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ee:	f000 fd3f 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MAX_CS_Pin|MAX_DRDY_Pin|RFM_RST_Pin;
 80020f2:	230b      	movs	r3, #11
 80020f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f6:	2301      	movs	r3, #1
 80020f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fe:	2300      	movs	r3, #0
 8002100:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002102:	f107 030c 	add.w	r3, r7, #12
 8002106:	4619      	mov	r1, r3
 8002108:	480a      	ldr	r0, [pc, #40]	; (8002134 <MX_GPIO_Init+0x128>)
 800210a:	f000 fd31 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RFM_DIO5_Pin|RFM_DIO3_Pin|RFM_DIO4_Pin|RFM_DIO0_Pin;
 800210e:	23f0      	movs	r3, #240	; 0xf0
 8002110:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211a:	f107 030c 	add.w	r3, r7, #12
 800211e:	4619      	mov	r1, r3
 8002120:	4804      	ldr	r0, [pc, #16]	; (8002134 <MX_GPIO_Init+0x128>)
 8002122:	f000 fd25 	bl	8002b70 <HAL_GPIO_Init>

}
 8002126:	bf00      	nop
 8002128:	3720      	adds	r7, #32
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000
 8002134:	48000400 	.word	0x48000400
 8002138:	48000800 	.word	0x48000800
 800213c:	10110000 	.word	0x10110000

08002140 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002144:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <MX_I2C1_Init+0x74>)
 8002146:	4a1c      	ldr	r2, [pc, #112]	; (80021b8 <MX_I2C1_Init+0x78>)
 8002148:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800214a:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <MX_I2C1_Init+0x74>)
 800214c:	4a1b      	ldr	r2, [pc, #108]	; (80021bc <MX_I2C1_Init+0x7c>)
 800214e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002150:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <MX_I2C1_Init+0x74>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002156:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <MX_I2C1_Init+0x74>)
 8002158:	2201      	movs	r2, #1
 800215a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800215c:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <MX_I2C1_Init+0x74>)
 800215e:	2200      	movs	r2, #0
 8002160:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002162:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <MX_I2C1_Init+0x74>)
 8002164:	2200      	movs	r2, #0
 8002166:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <MX_I2C1_Init+0x74>)
 800216a:	2200      	movs	r2, #0
 800216c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800216e:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <MX_I2C1_Init+0x74>)
 8002170:	2200      	movs	r2, #0
 8002172:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <MX_I2C1_Init+0x74>)
 8002176:	2200      	movs	r2, #0
 8002178:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800217a:	480e      	ldr	r0, [pc, #56]	; (80021b4 <MX_I2C1_Init+0x74>)
 800217c:	f000 fe9b 	bl	8002eb6 <HAL_I2C_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002186:	f000 f929 	bl	80023dc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800218a:	2100      	movs	r1, #0
 800218c:	4809      	ldr	r0, [pc, #36]	; (80021b4 <MX_I2C1_Init+0x74>)
 800218e:	f001 fc59 	bl	8003a44 <HAL_I2CEx_ConfigAnalogFilter>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002198:	f000 f920 	bl	80023dc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800219c:	2100      	movs	r1, #0
 800219e:	4805      	ldr	r0, [pc, #20]	; (80021b4 <MX_I2C1_Init+0x74>)
 80021a0:	f001 fc9b 	bl	8003ada <HAL_I2CEx_ConfigDigitalFilter>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80021aa:	f000 f917 	bl	80023dc <Error_Handler>
  }

}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000558 	.word	0x20000558
 80021b8:	40005400 	.word	0x40005400
 80021bc:	00707cbb 	.word	0x00707cbb

080021c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08a      	sub	sp, #40	; 0x28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a18      	ldr	r2, [pc, #96]	; (8002240 <HAL_I2C_MspInit+0x80>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d129      	bne.n	8002236 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e2:	4b18      	ldr	r3, [pc, #96]	; (8002244 <HAL_I2C_MspInit+0x84>)
 80021e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e6:	4a17      	ldr	r2, [pc, #92]	; (8002244 <HAL_I2C_MspInit+0x84>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <HAL_I2C_MspInit+0x84>)
 80021f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002200:	2312      	movs	r3, #18
 8002202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002204:	2301      	movs	r3, #1
 8002206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002208:	2303      	movs	r3, #3
 800220a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800220c:	2304      	movs	r3, #4
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	4619      	mov	r1, r3
 8002216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800221a:	f000 fca9 	bl	8002b70 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <HAL_I2C_MspInit+0x84>)
 8002220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002222:	4a08      	ldr	r2, [pc, #32]	; (8002244 <HAL_I2C_MspInit+0x84>)
 8002224:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002228:	6593      	str	r3, [r2, #88]	; 0x58
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_I2C_MspInit+0x84>)
 800222c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002236:	bf00      	nop
 8002238:	3728      	adds	r7, #40	; 0x28
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40005400 	.word	0x40005400
 8002244:	40021000 	.word	0x40021000

08002248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800224c:	f000 faab 	bl	80027a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002250:	f000 f826 	bl	80022a0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002254:	f7ff feda 	bl	800200c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002258:	f7ff ff72 	bl	8002140 <MX_I2C1_Init>
  MX_SPI1_Init();
 800225c:	f000 f8e4 	bl	8002428 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002260:	f000 f9fe 	bl	8002660 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8002264:	f007 ff64 	bl	800a130 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_MspInit(&huart2);		//UART init
 8002268:	4808      	ldr	r0, [pc, #32]	; (800228c <main+0x44>)
 800226a:	f000 fa29 	bl	80026c0 <HAL_UART_MspInit>
  HAL_SPI_MspInit(&hspi1);		//SPI init
 800226e:	4808      	ldr	r0, [pc, #32]	; (8002290 <main+0x48>)
 8002270:	f000 f918 	bl	80024a4 <HAL_SPI_MspInit>
  HAL_I2C_MspInit(&hi2c1);		//I2C init
 8002274:	4807      	ldr	r0, [pc, #28]	; (8002294 <main+0x4c>)
 8002276:	f7ff ffa3 	bl	80021c0 <HAL_I2C_MspInit>
  HAL_UART_Receive_IT(&huart2, rxData, 1);
 800227a:	2201      	movs	r2, #1
 800227c:	4906      	ldr	r1, [pc, #24]	; (8002298 <main+0x50>)
 800227e:	4803      	ldr	r0, [pc, #12]	; (800228c <main+0x44>)
 8002280:	f004 fb0c 	bl	800689c <HAL_UART_Receive_IT>
  appMain.mainProg();
 8002284:	4805      	ldr	r0, [pc, #20]	; (800229c <main+0x54>)
 8002286:	f7fe fe3d 	bl	8000f04 <_ZN7AppMain8mainProgEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800228a:	e7fe      	b.n	800228a <main+0x42>
 800228c:	20000608 	.word	0x20000608
 8002290:	200005a4 	.word	0x200005a4
 8002294:	20000558 	.word	0x20000558
 8002298:	20000334 	.word	0x20000334
 800229c:	200001ac 	.word	0x200001ac

080022a0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b0a4      	sub	sp, #144	; 0x90
 80022a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022aa:	2244      	movs	r2, #68	; 0x44
 80022ac:	2100      	movs	r1, #0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f008 fcde 	bl	800ac70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022c4:	1d3b      	adds	r3, r7, #4
 80022c6:	2234      	movs	r2, #52	; 0x34
 80022c8:	2100      	movs	r1, #0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f008 fcd0 	bl	800ac70 <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80022d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80022d4:	f002 fb9e 	bl	8004a14 <HAL_PWREx_ControlVoltageScaling>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	bf14      	ite	ne
 80022de:	2301      	movne	r3, #1
 80022e0:	2300      	moveq	r3, #0
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <_Z18SystemClock_Configv+0x4c>
  {
    Error_Handler();
 80022e8:	f000 f878 	bl	80023dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80022ec:	2322      	movs	r3, #34	; 0x22
 80022ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022f4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80022f6:	2301      	movs	r3, #1
 80022f8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022fa:	2340      	movs	r3, #64	; 0x40
 80022fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022fe:	2302      	movs	r3, #2
 8002300:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002302:	2302      	movs	r3, #2
 8002304:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8002306:	2302      	movs	r3, #2
 8002308:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 8;
 800230c:	2308      	movs	r3, #8
 800230e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002312:	2302      	movs	r3, #2
 8002314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002318:	2302      	movs	r3, #2
 800231a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800231e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002322:	4618      	mov	r0, r3
 8002324:	f002 fbdc 	bl	8004ae0 <HAL_RCC_OscConfig>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	bf14      	ite	ne
 800232e:	2301      	movne	r3, #1
 8002330:	2300      	moveq	r3, #0
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <_Z18SystemClock_Configv+0x9c>
  {
    Error_Handler();
 8002338:	f000 f850 	bl	80023dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800233c:	230f      	movs	r3, #15
 800233e:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002340:	2303      	movs	r3, #3
 8002342:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002344:	2300      	movs	r3, #0
 8002346:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002348:	2300      	movs	r3, #0
 800234a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800234c:	2300      	movs	r3, #0
 800234e:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002350:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002354:	2101      	movs	r1, #1
 8002356:	4618      	mov	r0, r3
 8002358:	f003 f828 	bl	80053ac <HAL_RCC_ClockConfig>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	bf14      	ite	ne
 8002362:	2301      	movne	r3, #1
 8002364:	2300      	moveq	r3, #0
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <_Z18SystemClock_Configv+0xd0>
  {
    Error_Handler();
 800236c:	f000 f836 	bl	80023dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8002370:	f242 0342 	movw	r3, #8258	; 0x2042
 8002374:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800237a:	2300      	movs	r3, #0
 800237c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800237e:	2300      	movs	r3, #0
 8002380:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	4618      	mov	r0, r3
 8002386:	f003 fa15 	bl	80057b4 <HAL_RCCEx_PeriphCLKConfig>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	bf14      	ite	ne
 8002390:	2301      	movne	r3, #1
 8002392:	2300      	moveq	r3, #0
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <_Z18SystemClock_Configv+0xfe>
  {
    Error_Handler();
 800239a:	f000 f81f 	bl	80023dc <Error_Handler>
  }
}
 800239e:	bf00      	nop
 80023a0:	3790      	adds	r7, #144	; 0x90
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, rxData, 1);
 80023b0:	2201      	movs	r2, #1
 80023b2:	4907      	ldr	r1, [pc, #28]	; (80023d0 <HAL_UART_RxCpltCallback+0x28>)
 80023b4:	4807      	ldr	r0, [pc, #28]	; (80023d4 <HAL_UART_RxCpltCallback+0x2c>)
 80023b6:	f004 fa71 	bl	800689c <HAL_UART_Receive_IT>
	appMain.gps.gpsInterrupt(rxData[0]);
 80023ba:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <HAL_UART_RxCpltCallback+0x28>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	4619      	mov	r1, r3
 80023c0:	4805      	ldr	r0, [pc, #20]	; (80023d8 <HAL_UART_RxCpltCallback+0x30>)
 80023c2:	f7fe fef3 	bl	80011ac <_ZN3GPS12gpsInterruptEh>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000334 	.word	0x20000334
 80023d4:	20000608 	.word	0x20000608
 80023d8:	20000284 	.word	0x20000284

080023dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <_Z41__static_initialization_and_destruction_0ii>:
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d107      	bne.n	800240c <_Z41__static_initialization_and_destruction_0ii+0x20>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002402:	4293      	cmp	r3, r2
 8002404:	d102      	bne.n	800240c <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain;
 8002406:	4803      	ldr	r0, [pc, #12]	; (8002414 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002408:	f7fe fd08 	bl	8000e1c <_ZN7AppMainC1Ev>
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	200001ac 	.word	0x200001ac

08002418 <_GLOBAL__sub_I_appMain>:
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
 800241c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002420:	2001      	movs	r0, #1
 8002422:	f7ff ffe3 	bl	80023ec <_Z41__static_initialization_and_destruction_0ii>
 8002426:	bd80      	pop	{r7, pc}

08002428 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800242c:	4b1b      	ldr	r3, [pc, #108]	; (800249c <MX_SPI1_Init+0x74>)
 800242e:	4a1c      	ldr	r2, [pc, #112]	; (80024a0 <MX_SPI1_Init+0x78>)
 8002430:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002432:	4b1a      	ldr	r3, [pc, #104]	; (800249c <MX_SPI1_Init+0x74>)
 8002434:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002438:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800243a:	4b18      	ldr	r3, [pc, #96]	; (800249c <MX_SPI1_Init+0x74>)
 800243c:	2200      	movs	r2, #0
 800243e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002440:	4b16      	ldr	r3, [pc, #88]	; (800249c <MX_SPI1_Init+0x74>)
 8002442:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002446:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002448:	4b14      	ldr	r3, [pc, #80]	; (800249c <MX_SPI1_Init+0x74>)
 800244a:	2200      	movs	r2, #0
 800244c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800244e:	4b13      	ldr	r3, [pc, #76]	; (800249c <MX_SPI1_Init+0x74>)
 8002450:	2200      	movs	r2, #0
 8002452:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <MX_SPI1_Init+0x74>)
 8002456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800245a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800245c:	4b0f      	ldr	r3, [pc, #60]	; (800249c <MX_SPI1_Init+0x74>)
 800245e:	2218      	movs	r2, #24
 8002460:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002462:	4b0e      	ldr	r3, [pc, #56]	; (800249c <MX_SPI1_Init+0x74>)
 8002464:	2200      	movs	r2, #0
 8002466:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <MX_SPI1_Init+0x74>)
 800246a:	2200      	movs	r2, #0
 800246c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800246e:	4b0b      	ldr	r3, [pc, #44]	; (800249c <MX_SPI1_Init+0x74>)
 8002470:	2200      	movs	r2, #0
 8002472:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <MX_SPI1_Init+0x74>)
 8002476:	2207      	movs	r2, #7
 8002478:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <MX_SPI1_Init+0x74>)
 800247c:	2200      	movs	r2, #0
 800247e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <MX_SPI1_Init+0x74>)
 8002482:	2200      	movs	r2, #0
 8002484:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002486:	4805      	ldr	r0, [pc, #20]	; (800249c <MX_SPI1_Init+0x74>)
 8002488:	f003 fb1a 	bl	8005ac0 <HAL_SPI_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002492:	f7ff ffa3 	bl	80023dc <Error_Handler>
  }

}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	200005a4 	.word	0x200005a4
 80024a0:	40013000 	.word	0x40013000

080024a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08a      	sub	sp, #40	; 0x28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 0314 	add.w	r3, r7, #20
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a17      	ldr	r2, [pc, #92]	; (8002520 <HAL_SPI_MspInit+0x7c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d128      	bne.n	8002518 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024c6:	4b17      	ldr	r3, [pc, #92]	; (8002524 <HAL_SPI_MspInit+0x80>)
 80024c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ca:	4a16      	ldr	r2, [pc, #88]	; (8002524 <HAL_SPI_MspInit+0x80>)
 80024cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024d0:	6613      	str	r3, [r2, #96]	; 0x60
 80024d2:	4b14      	ldr	r3, [pc, #80]	; (8002524 <HAL_SPI_MspInit+0x80>)
 80024d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024de:	4b11      	ldr	r3, [pc, #68]	; (8002524 <HAL_SPI_MspInit+0x80>)
 80024e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e2:	4a10      	ldr	r2, [pc, #64]	; (8002524 <HAL_SPI_MspInit+0x80>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ea:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <HAL_SPI_MspInit+0x80>)
 80024ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80024f6:	23e0      	movs	r3, #224	; 0xe0
 80024f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fa:	2302      	movs	r3, #2
 80024fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002502:	2303      	movs	r3, #3
 8002504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002506:	2305      	movs	r3, #5
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250a:	f107 0314 	add.w	r3, r7, #20
 800250e:	4619      	mov	r1, r3
 8002510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002514:	f000 fb2c 	bl	8002b70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002518:	bf00      	nop
 800251a:	3728      	adds	r7, #40	; 0x28
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40013000 	.word	0x40013000
 8002524:	40021000 	.word	0x40021000

08002528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252e:	4b0f      	ldr	r3, [pc, #60]	; (800256c <HAL_MspInit+0x44>)
 8002530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002532:	4a0e      	ldr	r2, [pc, #56]	; (800256c <HAL_MspInit+0x44>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6613      	str	r3, [r2, #96]	; 0x60
 800253a:	4b0c      	ldr	r3, [pc, #48]	; (800256c <HAL_MspInit+0x44>)
 800253c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	607b      	str	r3, [r7, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <HAL_MspInit+0x44>)
 8002548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254a:	4a08      	ldr	r2, [pc, #32]	; (800256c <HAL_MspInit+0x44>)
 800254c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002550:	6593      	str	r3, [r2, #88]	; 0x58
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_MspInit+0x44>)
 8002554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255a:	603b      	str	r3, [r7, #0]
 800255c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40021000 	.word	0x40021000

08002570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002582:	e7fe      	b.n	8002582 <HardFault_Handler+0x4>

08002584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002588:	e7fe      	b.n	8002588 <MemManage_Handler+0x4>

0800258a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800258a:	b480      	push	{r7}
 800258c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800258e:	e7fe      	b.n	800258e <BusFault_Handler+0x4>

08002590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002594:	e7fe      	b.n	8002594 <UsageFault_Handler+0x4>

08002596 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025b2:	b480      	push	{r7}
 80025b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025c4:	f000 f942 	bl	800284c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025c8:	bf00      	nop
 80025ca:	bd80      	pop	{r7, pc}

080025cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025d0:	4802      	ldr	r0, [pc, #8]	; (80025dc <USART2_IRQHandler+0x10>)
 80025d2:	f004 fa05 	bl	80069e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000608 	.word	0x20000608

080025e0 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80025e4:	4802      	ldr	r0, [pc, #8]	; (80025f0 <USB_IRQHandler+0x10>)
 80025e6:	f001 fbce 	bl	8003d86 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20001320 	.word	0x20001320

080025f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025f8:	4b17      	ldr	r3, [pc, #92]	; (8002658 <SystemInit+0x64>)
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fe:	4a16      	ldr	r2, [pc, #88]	; (8002658 <SystemInit+0x64>)
 8002600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002608:	4b14      	ldr	r3, [pc, #80]	; (800265c <SystemInit+0x68>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a13      	ldr	r2, [pc, #76]	; (800265c <SystemInit+0x68>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002614:	4b11      	ldr	r3, [pc, #68]	; (800265c <SystemInit+0x68>)
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800261a:	4b10      	ldr	r3, [pc, #64]	; (800265c <SystemInit+0x68>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a0f      	ldr	r2, [pc, #60]	; (800265c <SystemInit+0x68>)
 8002620:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002624:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002628:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800262a:	4b0c      	ldr	r3, [pc, #48]	; (800265c <SystemInit+0x68>)
 800262c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002630:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002632:	4b0a      	ldr	r3, [pc, #40]	; (800265c <SystemInit+0x68>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a09      	ldr	r2, [pc, #36]	; (800265c <SystemInit+0x68>)
 8002638:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800263e:	4b07      	ldr	r3, [pc, #28]	; (800265c <SystemInit+0x68>)
 8002640:	2200      	movs	r2, #0
 8002642:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002644:	4b04      	ldr	r3, [pc, #16]	; (8002658 <SystemInit+0x64>)
 8002646:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800264a:	609a      	str	r2, [r3, #8]
#endif
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000ed00 	.word	0xe000ed00
 800265c:	40021000 	.word	0x40021000

08002660 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002664:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <MX_USART2_UART_Init+0x58>)
 8002666:	4a15      	ldr	r2, [pc, #84]	; (80026bc <MX_USART2_UART_Init+0x5c>)
 8002668:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800266a:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <MX_USART2_UART_Init+0x58>)
 800266c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002670:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002672:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <MX_USART2_UART_Init+0x58>)
 8002674:	2200      	movs	r2, #0
 8002676:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002678:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <MX_USART2_UART_Init+0x58>)
 800267a:	2200      	movs	r2, #0
 800267c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800267e:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <MX_USART2_UART_Init+0x58>)
 8002680:	2200      	movs	r2, #0
 8002682:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <MX_USART2_UART_Init+0x58>)
 8002686:	2204      	movs	r2, #4
 8002688:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800268a:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <MX_USART2_UART_Init+0x58>)
 800268c:	2200      	movs	r2, #0
 800268e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002690:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <MX_USART2_UART_Init+0x58>)
 8002692:	2200      	movs	r2, #0
 8002694:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002696:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <MX_USART2_UART_Init+0x58>)
 8002698:	2200      	movs	r2, #0
 800269a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <MX_USART2_UART_Init+0x58>)
 800269e:	2200      	movs	r2, #0
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026a2:	4805      	ldr	r0, [pc, #20]	; (80026b8 <MX_USART2_UART_Init+0x58>)
 80026a4:	f004 f8ac 	bl	8006800 <HAL_UART_Init>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80026ae:	f7ff fe95 	bl	80023dc <Error_Handler>
  }

}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000608 	.word	0x20000608
 80026bc:	40004400 	.word	0x40004400

080026c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	; 0x28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a1b      	ldr	r2, [pc, #108]	; (800274c <HAL_UART_MspInit+0x8c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d130      	bne.n	8002744 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026e2:	4b1b      	ldr	r3, [pc, #108]	; (8002750 <HAL_UART_MspInit+0x90>)
 80026e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e6:	4a1a      	ldr	r2, [pc, #104]	; (8002750 <HAL_UART_MspInit+0x90>)
 80026e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ec:	6593      	str	r3, [r2, #88]	; 0x58
 80026ee:	4b18      	ldr	r3, [pc, #96]	; (8002750 <HAL_UART_MspInit+0x90>)
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fa:	4b15      	ldr	r3, [pc, #84]	; (8002750 <HAL_UART_MspInit+0x90>)
 80026fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fe:	4a14      	ldr	r2, [pc, #80]	; (8002750 <HAL_UART_MspInit+0x90>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002706:	4b12      	ldr	r3, [pc, #72]	; (8002750 <HAL_UART_MspInit+0x90>)
 8002708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002712:	230c      	movs	r3, #12
 8002714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002716:	2302      	movs	r3, #2
 8002718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271e:	2303      	movs	r3, #3
 8002720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002722:	2307      	movs	r3, #7
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002726:	f107 0314 	add.w	r3, r7, #20
 800272a:	4619      	mov	r1, r3
 800272c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002730:	f000 fa1e 	bl	8002b70 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002734:	2200      	movs	r2, #0
 8002736:	2100      	movs	r1, #0
 8002738:	2026      	movs	r0, #38	; 0x26
 800273a:	f000 f9a2 	bl	8002a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800273e:	2026      	movs	r0, #38	; 0x26
 8002740:	f000 f9bb 	bl	8002aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002744:	bf00      	nop
 8002746:	3728      	adds	r7, #40	; 0x28
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40004400 	.word	0x40004400
 8002750:	40021000 	.word	0x40021000

08002754 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800278c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002758:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800275a:	e003      	b.n	8002764 <LoopCopyDataInit>

0800275c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800275c:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800275e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002760:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002762:	3104      	adds	r1, #4

08002764 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002764:	480b      	ldr	r0, [pc, #44]	; (8002794 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002766:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002768:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800276a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800276c:	d3f6      	bcc.n	800275c <CopyDataInit>
	ldr	r2, =_sbss
 800276e:	4a0b      	ldr	r2, [pc, #44]	; (800279c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002770:	e002      	b.n	8002778 <LoopFillZerobss>

08002772 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002772:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002774:	f842 3b04 	str.w	r3, [r2], #4

08002778 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002778:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <LoopForever+0x16>)
	cmp	r2, r3
 800277a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800277c:	d3f9      	bcc.n	8002772 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800277e:	f7ff ff39 	bl	80025f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002782:	f008 fa51 	bl	800ac28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002786:	f7ff fd5f 	bl	8002248 <main>

0800278a <LoopForever>:

LoopForever:
    b LoopForever
 800278a:	e7fe      	b.n	800278a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800278c:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8002790:	0800ad84 	.word	0x0800ad84
	ldr	r0, =_sdata
 8002794:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002798:	2000018c 	.word	0x2000018c
	ldr	r2, =_sbss
 800279c:	2000018c 	.word	0x2000018c
	ldr	r3, = _ebss
 80027a0:	20001594 	.word	0x20001594

080027a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027a4:	e7fe      	b.n	80027a4 <ADC1_2_IRQHandler>

080027a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027b0:	2003      	movs	r0, #3
 80027b2:	f000 f95b 	bl	8002a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027b6:	2000      	movs	r0, #0
 80027b8:	f000 f80e 	bl	80027d8 <HAL_InitTick>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d002      	beq.n	80027c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	71fb      	strb	r3, [r7, #7]
 80027c6:	e001      	b.n	80027cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027c8:	f7ff feae 	bl	8002528 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027cc:	79fb      	ldrb	r3, [r7, #7]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80027e4:	4b16      	ldr	r3, [pc, #88]	; (8002840 <HAL_InitTick+0x68>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d022      	beq.n	8002832 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80027ec:	4b15      	ldr	r3, [pc, #84]	; (8002844 <HAL_InitTick+0x6c>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	4b13      	ldr	r3, [pc, #76]	; (8002840 <HAL_InitTick+0x68>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80027fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002800:	4618      	mov	r0, r3
 8002802:	f000 f968 	bl	8002ad6 <HAL_SYSTICK_Config>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10f      	bne.n	800282c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b0f      	cmp	r3, #15
 8002810:	d809      	bhi.n	8002826 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002812:	2200      	movs	r2, #0
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	f04f 30ff 	mov.w	r0, #4294967295
 800281a:	f000 f932 	bl	8002a82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800281e:	4a0a      	ldr	r2, [pc, #40]	; (8002848 <HAL_InitTick+0x70>)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	e007      	b.n	8002836 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	73fb      	strb	r3, [r7, #15]
 800282a:	e004      	b.n	8002836 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
 8002830:	e001      	b.n	8002836 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002836:	7bfb      	ldrb	r3, [r7, #15]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20000008 	.word	0x20000008
 8002844:	20000000 	.word	0x20000000
 8002848:	20000004 	.word	0x20000004

0800284c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_IncTick+0x1c>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_IncTick+0x20>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4413      	add	r3, r2
 800285a:	4a03      	ldr	r2, [pc, #12]	; (8002868 <HAL_IncTick+0x1c>)
 800285c:	6013      	str	r3, [r2, #0]
}
 800285e:	bf00      	nop
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	20000688 	.word	0x20000688
 800286c:	20000008 	.word	0x20000008

08002870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return uwTick;
 8002874:	4b03      	ldr	r3, [pc, #12]	; (8002884 <HAL_GetTick+0x14>)
 8002876:	681b      	ldr	r3, [r3, #0]
}
 8002878:	4618      	mov	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	20000688 	.word	0x20000688

08002888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002890:	f7ff ffee 	bl	8002870 <HAL_GetTick>
 8002894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d004      	beq.n	80028ac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80028a2:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <HAL_Delay+0x40>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4413      	add	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028ac:	bf00      	nop
 80028ae:	f7ff ffdf 	bl	8002870 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d8f7      	bhi.n	80028ae <HAL_Delay+0x26>
  {
  }
}
 80028be:	bf00      	nop
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000008 	.word	0x20000008

080028cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <__NVIC_SetPriorityGrouping+0x44>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028e8:	4013      	ands	r3, r2
 80028ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fe:	4a04      	ldr	r2, [pc, #16]	; (8002910 <__NVIC_SetPriorityGrouping+0x44>)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	60d3      	str	r3, [r2, #12]
}
 8002904:	bf00      	nop
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <__NVIC_GetPriorityGrouping+0x18>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	0a1b      	lsrs	r3, r3, #8
 800291e:	f003 0307 	and.w	r3, r3, #7
}
 8002922:	4618      	mov	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800293a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293e:	2b00      	cmp	r3, #0
 8002940:	db0b      	blt.n	800295a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	f003 021f 	and.w	r2, r3, #31
 8002948:	4907      	ldr	r1, [pc, #28]	; (8002968 <__NVIC_EnableIRQ+0x38>)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	2001      	movs	r0, #1
 8002952:	fa00 f202 	lsl.w	r2, r0, r2
 8002956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	e000e100 	.word	0xe000e100

0800296c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	6039      	str	r1, [r7, #0]
 8002976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297c:	2b00      	cmp	r3, #0
 800297e:	db0a      	blt.n	8002996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	b2da      	uxtb	r2, r3
 8002984:	490c      	ldr	r1, [pc, #48]	; (80029b8 <__NVIC_SetPriority+0x4c>)
 8002986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298a:	0112      	lsls	r2, r2, #4
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	440b      	add	r3, r1
 8002990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002994:	e00a      	b.n	80029ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4908      	ldr	r1, [pc, #32]	; (80029bc <__NVIC_SetPriority+0x50>)
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	3b04      	subs	r3, #4
 80029a4:	0112      	lsls	r2, r2, #4
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	440b      	add	r3, r1
 80029aa:	761a      	strb	r2, [r3, #24]
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	e000e100 	.word	0xe000e100
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b089      	sub	sp, #36	; 0x24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f1c3 0307 	rsb	r3, r3, #7
 80029da:	2b04      	cmp	r3, #4
 80029dc:	bf28      	it	cs
 80029de:	2304      	movcs	r3, #4
 80029e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3304      	adds	r3, #4
 80029e6:	2b06      	cmp	r3, #6
 80029e8:	d902      	bls.n	80029f0 <NVIC_EncodePriority+0x30>
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3b03      	subs	r3, #3
 80029ee:	e000      	b.n	80029f2 <NVIC_EncodePriority+0x32>
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	f04f 32ff 	mov.w	r2, #4294967295
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43da      	mvns	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	401a      	ands	r2, r3
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a08:	f04f 31ff 	mov.w	r1, #4294967295
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a12:	43d9      	mvns	r1, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a18:	4313      	orrs	r3, r2
         );
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3724      	adds	r7, #36	; 0x24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a38:	d301      	bcc.n	8002a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e00f      	b.n	8002a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a3e:	4a0a      	ldr	r2, [pc, #40]	; (8002a68 <SysTick_Config+0x40>)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a46:	210f      	movs	r1, #15
 8002a48:	f04f 30ff 	mov.w	r0, #4294967295
 8002a4c:	f7ff ff8e 	bl	800296c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <SysTick_Config+0x40>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a56:	4b04      	ldr	r3, [pc, #16]	; (8002a68 <SysTick_Config+0x40>)
 8002a58:	2207      	movs	r2, #7
 8002a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	e000e010 	.word	0xe000e010

08002a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7ff ff29 	bl	80028cc <__NVIC_SetPriorityGrouping>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b086      	sub	sp, #24
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	4603      	mov	r3, r0
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a94:	f7ff ff3e 	bl	8002914 <__NVIC_GetPriorityGrouping>
 8002a98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68b9      	ldr	r1, [r7, #8]
 8002a9e:	6978      	ldr	r0, [r7, #20]
 8002aa0:	f7ff ff8e 	bl	80029c0 <NVIC_EncodePriority>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff5d 	bl	800296c <__NVIC_SetPriority>
}
 8002ab2:	bf00      	nop
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff ff31 	bl	8002930 <__NVIC_EnableIRQ>
}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b082      	sub	sp, #8
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7ff ffa2 	bl	8002a28 <SysTick_Config>
 8002ae4:	4603      	mov	r3, r0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b084      	sub	sp, #16
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002af6:	2300      	movs	r3, #0
 8002af8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d005      	beq.n	8002b12 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2204      	movs	r2, #4
 8002b0a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
 8002b10:	e029      	b.n	8002b66 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 020e 	bic.w	r2, r2, #14
 8002b20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0201 	bic.w	r2, r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	f003 021c 	and.w	r2, r3, #28
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	2101      	movs	r1, #1
 8002b40:	fa01 f202 	lsl.w	r2, r1, r2
 8002b44:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	4798      	blx	r3
    }
  }
  return status;
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b7e:	e14e      	b.n	8002e1e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	2101      	movs	r1, #1
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8140 	beq.w	8002e18 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d00b      	beq.n	8002bb8 <HAL_GPIO_Init+0x48>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d007      	beq.n	8002bb8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bac:	2b11      	cmp	r3, #17
 8002bae:	d003      	beq.n	8002bb8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b12      	cmp	r3, #18
 8002bb6:	d130      	bne.n	8002c1a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bee:	2201      	movs	r2, #1
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	f003 0201 	and.w	r2, r3, #1
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	2203      	movs	r2, #3
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d003      	beq.n	8002c5a <HAL_GPIO_Init+0xea>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b12      	cmp	r3, #18
 8002c58:	d123      	bne.n	8002ca2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	08da      	lsrs	r2, r3, #3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3208      	adds	r2, #8
 8002c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	220f      	movs	r2, #15
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43db      	mvns	r3, r3
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	691a      	ldr	r2, [r3, #16]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	08da      	lsrs	r2, r3, #3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3208      	adds	r2, #8
 8002c9c:	6939      	ldr	r1, [r7, #16]
 8002c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	2203      	movs	r2, #3
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f003 0203 	and.w	r2, r3, #3
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 809a 	beq.w	8002e18 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce4:	4b55      	ldr	r3, [pc, #340]	; (8002e3c <HAL_GPIO_Init+0x2cc>)
 8002ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce8:	4a54      	ldr	r2, [pc, #336]	; (8002e3c <HAL_GPIO_Init+0x2cc>)
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	6613      	str	r3, [r2, #96]	; 0x60
 8002cf0:	4b52      	ldr	r3, [pc, #328]	; (8002e3c <HAL_GPIO_Init+0x2cc>)
 8002cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cfc:	4a50      	ldr	r2, [pc, #320]	; (8002e40 <HAL_GPIO_Init+0x2d0>)
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	089b      	lsrs	r3, r3, #2
 8002d02:	3302      	adds	r3, #2
 8002d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f003 0303 	and.w	r3, r3, #3
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	220f      	movs	r2, #15
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d26:	d013      	beq.n	8002d50 <HAL_GPIO_Init+0x1e0>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a46      	ldr	r2, [pc, #280]	; (8002e44 <HAL_GPIO_Init+0x2d4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d00d      	beq.n	8002d4c <HAL_GPIO_Init+0x1dc>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a45      	ldr	r2, [pc, #276]	; (8002e48 <HAL_GPIO_Init+0x2d8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d007      	beq.n	8002d48 <HAL_GPIO_Init+0x1d8>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a44      	ldr	r2, [pc, #272]	; (8002e4c <HAL_GPIO_Init+0x2dc>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d101      	bne.n	8002d44 <HAL_GPIO_Init+0x1d4>
 8002d40:	2303      	movs	r3, #3
 8002d42:	e006      	b.n	8002d52 <HAL_GPIO_Init+0x1e2>
 8002d44:	2307      	movs	r3, #7
 8002d46:	e004      	b.n	8002d52 <HAL_GPIO_Init+0x1e2>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e002      	b.n	8002d52 <HAL_GPIO_Init+0x1e2>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <HAL_GPIO_Init+0x1e2>
 8002d50:	2300      	movs	r3, #0
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	f002 0203 	and.w	r2, r2, #3
 8002d58:	0092      	lsls	r2, r2, #2
 8002d5a:	4093      	lsls	r3, r2
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d62:	4937      	ldr	r1, [pc, #220]	; (8002e40 <HAL_GPIO_Init+0x2d0>)
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	089b      	lsrs	r3, r3, #2
 8002d68:	3302      	adds	r3, #2
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d70:	4b37      	ldr	r3, [pc, #220]	; (8002e50 <HAL_GPIO_Init+0x2e0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d94:	4a2e      	ldr	r2, [pc, #184]	; (8002e50 <HAL_GPIO_Init+0x2e0>)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002d9a:	4b2d      	ldr	r3, [pc, #180]	; (8002e50 <HAL_GPIO_Init+0x2e0>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	43db      	mvns	r3, r3
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4013      	ands	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dbe:	4a24      	ldr	r2, [pc, #144]	; (8002e50 <HAL_GPIO_Init+0x2e0>)
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dc4:	4b22      	ldr	r3, [pc, #136]	; (8002e50 <HAL_GPIO_Init+0x2e0>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002de8:	4a19      	ldr	r2, [pc, #100]	; (8002e50 <HAL_GPIO_Init+0x2e0>)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002dee:	4b18      	ldr	r3, [pc, #96]	; (8002e50 <HAL_GPIO_Init+0x2e0>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e12:	4a0f      	ldr	r2, [pc, #60]	; (8002e50 <HAL_GPIO_Init+0x2e0>)
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f47f aea9 	bne.w	8002b80 <HAL_GPIO_Init+0x10>
  }
}
 8002e2e:	bf00      	nop
 8002e30:	371c      	adds	r7, #28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40010000 	.word	0x40010000
 8002e44:	48000400 	.word	0x48000400
 8002e48:	48000800 	.word	0x48000800
 8002e4c:	48000c00 	.word	0x48000c00
 8002e50:	40010400 	.word	0x40010400

08002e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	807b      	strh	r3, [r7, #2]
 8002e60:	4613      	mov	r3, r2
 8002e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e64:	787b      	ldrb	r3, [r7, #1]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e6a:	887a      	ldrh	r2, [r7, #2]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e70:	e002      	b.n	8002e78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e72:	887a      	ldrh	r2, [r7, #2]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	695a      	ldr	r2, [r3, #20]
 8002e94:	887b      	ldrh	r3, [r7, #2]
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e9c:	887a      	ldrh	r2, [r7, #2]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002ea2:	e002      	b.n	8002eaa <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ea4:	887a      	ldrh	r2, [r7, #2]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	619a      	str	r2, [r3, #24]
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e081      	b.n	8002fcc <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d106      	bne.n	8002ee2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7ff f96f 	bl	80021c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2224      	movs	r2, #36	; 0x24
 8002ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0201 	bic.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f06:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f16:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d107      	bne.n	8002f30 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f2c:	609a      	str	r2, [r3, #8]
 8002f2e:	e006      	b.n	8002f3e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f3c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d104      	bne.n	8002f50 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f4e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6812      	ldr	r2, [r2, #0]
 8002f5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f62:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f72:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691a      	ldr	r2, [r3, #16]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	ea42 0103 	orr.w	r1, r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	021a      	lsls	r2, r3, #8
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69d9      	ldr	r1, [r3, #28]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1a      	ldr	r2, [r3, #32]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0201 	orr.w	r2, r2, #1
 8002fac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	607a      	str	r2, [r7, #4]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	817b      	strh	r3, [r7, #10]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	f040 80da 	bne.w	80031aa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_I2C_Master_Transmit+0x30>
 8003000:	2302      	movs	r3, #2
 8003002:	e0d3      	b.n	80031ac <HAL_I2C_Master_Transmit+0x1d8>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800300c:	f7ff fc30 	bl	8002870 <HAL_GetTick>
 8003010:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	2319      	movs	r3, #25
 8003018:	2201      	movs	r2, #1
 800301a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 fb54 	bl	80036cc <I2C_WaitOnFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e0be      	b.n	80031ac <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2221      	movs	r2, #33	; 0x21
 8003032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2210      	movs	r2, #16
 800303a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	893a      	ldrh	r2, [r7, #8]
 800304e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305a:	b29b      	uxth	r3, r3
 800305c:	2bff      	cmp	r3, #255	; 0xff
 800305e:	d90e      	bls.n	800307e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	22ff      	movs	r2, #255	; 0xff
 8003064:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306a:	b2da      	uxtb	r2, r3
 800306c:	8979      	ldrh	r1, [r7, #10]
 800306e:	4b51      	ldr	r3, [pc, #324]	; (80031b4 <HAL_I2C_Master_Transmit+0x1e0>)
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 fcb6 	bl	80039e8 <I2C_TransferConfig>
 800307c:	e06c      	b.n	8003158 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308c:	b2da      	uxtb	r2, r3
 800308e:	8979      	ldrh	r1, [r7, #10]
 8003090:	4b48      	ldr	r3, [pc, #288]	; (80031b4 <HAL_I2C_Master_Transmit+0x1e0>)
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 fca5 	bl	80039e8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800309e:	e05b      	b.n	8003158 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	6a39      	ldr	r1, [r7, #32]
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 fb51 	bl	800374c <I2C_WaitOnTXISFlagUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e07b      	b.n	80031ac <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	781a      	ldrb	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d034      	beq.n	8003158 <HAL_I2C_Master_Transmit+0x184>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d130      	bne.n	8003158 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	2200      	movs	r2, #0
 80030fe:	2180      	movs	r1, #128	; 0x80
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 fae3 	bl	80036cc <I2C_WaitOnFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e04d      	b.n	80031ac <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003114:	b29b      	uxth	r3, r3
 8003116:	2bff      	cmp	r3, #255	; 0xff
 8003118:	d90e      	bls.n	8003138 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	22ff      	movs	r2, #255	; 0xff
 800311e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003124:	b2da      	uxtb	r2, r3
 8003126:	8979      	ldrh	r1, [r7, #10]
 8003128:	2300      	movs	r3, #0
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 fc59 	bl	80039e8 <I2C_TransferConfig>
 8003136:	e00f      	b.n	8003158 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003146:	b2da      	uxtb	r2, r3
 8003148:	8979      	ldrh	r1, [r7, #10]
 800314a:	2300      	movs	r3, #0
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 fc48 	bl	80039e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315c:	b29b      	uxth	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d19e      	bne.n	80030a0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	6a39      	ldr	r1, [r7, #32]
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 fb30 	bl	80037cc <I2C_WaitOnSTOPFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e01a      	b.n	80031ac <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2220      	movs	r2, #32
 800317c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6859      	ldr	r1, [r3, #4]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <HAL_I2C_Master_Transmit+0x1e4>)
 800318a:	400b      	ands	r3, r1
 800318c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2220      	movs	r2, #32
 8003192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	e000      	b.n	80031ac <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80031aa:	2302      	movs	r3, #2
  }
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	80002000 	.word	0x80002000
 80031b8:	fe00e800 	.word	0xfe00e800

080031bc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af02      	add	r7, sp, #8
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	607a      	str	r2, [r7, #4]
 80031c6:	461a      	mov	r2, r3
 80031c8:	460b      	mov	r3, r1
 80031ca:	817b      	strh	r3, [r7, #10]
 80031cc:	4613      	mov	r3, r2
 80031ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b20      	cmp	r3, #32
 80031da:	f040 80db 	bne.w	8003394 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_I2C_Master_Receive+0x30>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e0d4      	b.n	8003396 <HAL_I2C_Master_Receive+0x1da>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031f4:	f7ff fb3c 	bl	8002870 <HAL_GetTick>
 80031f8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	2319      	movs	r3, #25
 8003200:	2201      	movs	r2, #1
 8003202:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 fa60 	bl	80036cc <I2C_WaitOnFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e0bf      	b.n	8003396 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2222      	movs	r2, #34	; 0x22
 800321a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2210      	movs	r2, #16
 8003222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	893a      	ldrh	r2, [r7, #8]
 8003236:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003242:	b29b      	uxth	r3, r3
 8003244:	2bff      	cmp	r3, #255	; 0xff
 8003246:	d90e      	bls.n	8003266 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	22ff      	movs	r2, #255	; 0xff
 800324c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003252:	b2da      	uxtb	r2, r3
 8003254:	8979      	ldrh	r1, [r7, #10]
 8003256:	4b52      	ldr	r3, [pc, #328]	; (80033a0 <HAL_I2C_Master_Receive+0x1e4>)
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 fbc2 	bl	80039e8 <I2C_TransferConfig>
 8003264:	e06d      	b.n	8003342 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003274:	b2da      	uxtb	r2, r3
 8003276:	8979      	ldrh	r1, [r7, #10]
 8003278:	4b49      	ldr	r3, [pc, #292]	; (80033a0 <HAL_I2C_Master_Receive+0x1e4>)
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 fbb1 	bl	80039e8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003286:	e05c      	b.n	8003342 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	6a39      	ldr	r1, [r7, #32]
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 fad9 	bl	8003844 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e07c      	b.n	8003396 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d034      	beq.n	8003342 <HAL_I2C_Master_Receive+0x186>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d130      	bne.n	8003342 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	2200      	movs	r2, #0
 80032e8:	2180      	movs	r1, #128	; 0x80
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 f9ee 	bl	80036cc <I2C_WaitOnFlagUntilTimeout>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e04d      	b.n	8003396 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2bff      	cmp	r3, #255	; 0xff
 8003302:	d90e      	bls.n	8003322 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	22ff      	movs	r2, #255	; 0xff
 8003308:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330e:	b2da      	uxtb	r2, r3
 8003310:	8979      	ldrh	r1, [r7, #10]
 8003312:	2300      	movs	r3, #0
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 fb64 	bl	80039e8 <I2C_TransferConfig>
 8003320:	e00f      	b.n	8003342 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003330:	b2da      	uxtb	r2, r3
 8003332:	8979      	ldrh	r1, [r7, #10]
 8003334:	2300      	movs	r3, #0
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 fb53 	bl	80039e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003346:	b29b      	uxth	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d19d      	bne.n	8003288 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	6a39      	ldr	r1, [r7, #32]
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 fa3b 	bl	80037cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e01a      	b.n	8003396 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2220      	movs	r2, #32
 8003366:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6859      	ldr	r1, [r3, #4]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <HAL_I2C_Master_Receive+0x1e8>)
 8003374:	400b      	ands	r3, r1
 8003376:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003390:	2300      	movs	r3, #0
 8003392:	e000      	b.n	8003396 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003394:	2302      	movs	r3, #2
  }
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	80002400 	.word	0x80002400
 80033a4:	fe00e800 	.word	0xfe00e800

080033a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af02      	add	r7, sp, #8
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	4608      	mov	r0, r1
 80033b2:	4611      	mov	r1, r2
 80033b4:	461a      	mov	r2, r3
 80033b6:	4603      	mov	r3, r0
 80033b8:	817b      	strh	r3, [r7, #10]
 80033ba:	460b      	mov	r3, r1
 80033bc:	813b      	strh	r3, [r7, #8]
 80033be:	4613      	mov	r3, r2
 80033c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b20      	cmp	r3, #32
 80033cc:	f040 80fd 	bne.w	80035ca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_I2C_Mem_Read+0x34>
 80033d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0f1      	b.n	80035cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_I2C_Mem_Read+0x4e>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e0ea      	b.n	80035cc <HAL_I2C_Mem_Read+0x224>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033fe:	f7ff fa37 	bl	8002870 <HAL_GetTick>
 8003402:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	2319      	movs	r3, #25
 800340a:	2201      	movs	r2, #1
 800340c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 f95b 	bl	80036cc <I2C_WaitOnFlagUntilTimeout>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e0d5      	b.n	80035cc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2222      	movs	r2, #34	; 0x22
 8003424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2240      	movs	r2, #64	; 0x40
 800342c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a3a      	ldr	r2, [r7, #32]
 800343a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003440:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003448:	88f8      	ldrh	r0, [r7, #6]
 800344a:	893a      	ldrh	r2, [r7, #8]
 800344c:	8979      	ldrh	r1, [r7, #10]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	9301      	str	r3, [sp, #4]
 8003452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	4603      	mov	r3, r0
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 f8bf 	bl	80035dc <I2C_RequestMemoryRead>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0ad      	b.n	80035cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003474:	b29b      	uxth	r3, r3
 8003476:	2bff      	cmp	r3, #255	; 0xff
 8003478:	d90e      	bls.n	8003498 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	22ff      	movs	r2, #255	; 0xff
 800347e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003484:	b2da      	uxtb	r2, r3
 8003486:	8979      	ldrh	r1, [r7, #10]
 8003488:	4b52      	ldr	r3, [pc, #328]	; (80035d4 <HAL_I2C_Mem_Read+0x22c>)
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 faa9 	bl	80039e8 <I2C_TransferConfig>
 8003496:	e00f      	b.n	80034b8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	8979      	ldrh	r1, [r7, #10]
 80034aa:	4b4a      	ldr	r3, [pc, #296]	; (80035d4 <HAL_I2C_Mem_Read+0x22c>)
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 fa98 	bl	80039e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034be:	2200      	movs	r2, #0
 80034c0:	2104      	movs	r1, #4
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 f902 	bl	80036cc <I2C_WaitOnFlagUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e07c      	b.n	80035cc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d034      	beq.n	8003578 <HAL_I2C_Mem_Read+0x1d0>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003512:	2b00      	cmp	r3, #0
 8003514:	d130      	bne.n	8003578 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351c:	2200      	movs	r2, #0
 800351e:	2180      	movs	r1, #128	; 0x80
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f8d3 	bl	80036cc <I2C_WaitOnFlagUntilTimeout>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e04d      	b.n	80035cc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003534:	b29b      	uxth	r3, r3
 8003536:	2bff      	cmp	r3, #255	; 0xff
 8003538:	d90e      	bls.n	8003558 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	22ff      	movs	r2, #255	; 0xff
 800353e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003544:	b2da      	uxtb	r2, r3
 8003546:	8979      	ldrh	r1, [r7, #10]
 8003548:	2300      	movs	r3, #0
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 fa49 	bl	80039e8 <I2C_TransferConfig>
 8003556:	e00f      	b.n	8003578 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003566:	b2da      	uxtb	r2, r3
 8003568:	8979      	ldrh	r1, [r7, #10]
 800356a:	2300      	movs	r3, #0
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 fa38 	bl	80039e8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d19a      	bne.n	80034b8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 f920 	bl	80037cc <I2C_WaitOnSTOPFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e01a      	b.n	80035cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2220      	movs	r2, #32
 800359c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6859      	ldr	r1, [r3, #4]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <HAL_I2C_Mem_Read+0x230>)
 80035aa:	400b      	ands	r3, r1
 80035ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2220      	movs	r2, #32
 80035b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	e000      	b.n	80035cc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80035ca:	2302      	movs	r3, #2
  }
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	80002400 	.word	0x80002400
 80035d8:	fe00e800 	.word	0xfe00e800

080035dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	4608      	mov	r0, r1
 80035e6:	4611      	mov	r1, r2
 80035e8:	461a      	mov	r2, r3
 80035ea:	4603      	mov	r3, r0
 80035ec:	817b      	strh	r3, [r7, #10]
 80035ee:	460b      	mov	r3, r1
 80035f0:	813b      	strh	r3, [r7, #8]
 80035f2:	4613      	mov	r3, r2
 80035f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80035f6:	88fb      	ldrh	r3, [r7, #6]
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	8979      	ldrh	r1, [r7, #10]
 80035fc:	4b20      	ldr	r3, [pc, #128]	; (8003680 <I2C_RequestMemoryRead+0xa4>)
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	2300      	movs	r3, #0
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 f9f0 	bl	80039e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003608:	69fa      	ldr	r2, [r7, #28]
 800360a:	69b9      	ldr	r1, [r7, #24]
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 f89d 	bl	800374c <I2C_WaitOnTXISFlagUntilTimeout>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e02c      	b.n	8003676 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800361c:	88fb      	ldrh	r3, [r7, #6]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d105      	bne.n	800362e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003622:	893b      	ldrh	r3, [r7, #8]
 8003624:	b2da      	uxtb	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	629a      	str	r2, [r3, #40]	; 0x28
 800362c:	e015      	b.n	800365a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800362e:	893b      	ldrh	r3, [r7, #8]
 8003630:	0a1b      	lsrs	r3, r3, #8
 8003632:	b29b      	uxth	r3, r3
 8003634:	b2da      	uxtb	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800363c:	69fa      	ldr	r2, [r7, #28]
 800363e:	69b9      	ldr	r1, [r7, #24]
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 f883 	bl	800374c <I2C_WaitOnTXISFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e012      	b.n	8003676 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003650:	893b      	ldrh	r3, [r7, #8]
 8003652:	b2da      	uxtb	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	2200      	movs	r2, #0
 8003662:	2140      	movs	r1, #64	; 0x40
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 f831 	bl	80036cc <I2C_WaitOnFlagUntilTimeout>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e000      	b.n	8003676 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	80002000 	.word	0x80002000

08003684 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b02      	cmp	r3, #2
 8003698:	d103      	bne.n	80036a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2200      	movs	r2, #0
 80036a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d007      	beq.n	80036c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699a      	ldr	r2, [r3, #24]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0201 	orr.w	r2, r2, #1
 80036be:	619a      	str	r2, [r3, #24]
  }
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	603b      	str	r3, [r7, #0]
 80036d8:	4613      	mov	r3, r2
 80036da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036dc:	e022      	b.n	8003724 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e4:	d01e      	beq.n	8003724 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e6:	f7ff f8c3 	bl	8002870 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d302      	bcc.n	80036fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d113      	bne.n	8003724 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003700:	f043 0220 	orr.w	r2, r3, #32
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e00f      	b.n	8003744 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699a      	ldr	r2, [r3, #24]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	4013      	ands	r3, r2
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	429a      	cmp	r2, r3
 8003732:	bf0c      	ite	eq
 8003734:	2301      	moveq	r3, #1
 8003736:	2300      	movne	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	461a      	mov	r2, r3
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	429a      	cmp	r2, r3
 8003740:	d0cd      	beq.n	80036de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003758:	e02c      	b.n	80037b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	68b9      	ldr	r1, [r7, #8]
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 f8dc 	bl	800391c <I2C_IsAcknowledgeFailed>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e02a      	b.n	80037c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003774:	d01e      	beq.n	80037b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003776:	f7ff f87b 	bl	8002870 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	429a      	cmp	r2, r3
 8003784:	d302      	bcc.n	800378c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d113      	bne.n	80037b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003790:	f043 0220 	orr.w	r2, r3, #32
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e007      	b.n	80037c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d1cb      	bne.n	800375a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037d8:	e028      	b.n	800382c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	68b9      	ldr	r1, [r7, #8]
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 f89c 	bl	800391c <I2C_IsAcknowledgeFailed>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e026      	b.n	800383c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ee:	f7ff f83f 	bl	8002870 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d302      	bcc.n	8003804 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d113      	bne.n	800382c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003808:	f043 0220 	orr.w	r2, r3, #32
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e007      	b.n	800383c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	f003 0320 	and.w	r3, r3, #32
 8003836:	2b20      	cmp	r3, #32
 8003838:	d1cf      	bne.n	80037da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003850:	e055      	b.n	80038fe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	68b9      	ldr	r1, [r7, #8]
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 f860 	bl	800391c <I2C_IsAcknowledgeFailed>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e053      	b.n	800390e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b20      	cmp	r3, #32
 8003872:	d129      	bne.n	80038c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	2b04      	cmp	r3, #4
 8003880:	d105      	bne.n	800388e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	e03f      	b.n	800390e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2220      	movs	r2, #32
 8003894:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6859      	ldr	r1, [r3, #4]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80038a2:	400b      	ands	r3, r1
 80038a4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e022      	b.n	800390e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c8:	f7fe ffd2 	bl	8002870 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d302      	bcc.n	80038de <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10f      	bne.n	80038fe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	f043 0220 	orr.w	r2, r3, #32
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e007      	b.n	800390e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b04      	cmp	r3, #4
 800390a:	d1a2      	bne.n	8003852 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	fe00e800 	.word	0xfe00e800

0800391c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	f003 0310 	and.w	r3, r3, #16
 8003932:	2b10      	cmp	r3, #16
 8003934:	d151      	bne.n	80039da <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003936:	e022      	b.n	800397e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393e:	d01e      	beq.n	800397e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003940:	f7fe ff96 	bl	8002870 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	429a      	cmp	r2, r3
 800394e:	d302      	bcc.n	8003956 <I2C_IsAcknowledgeFailed+0x3a>
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d113      	bne.n	800397e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395a:	f043 0220 	orr.w	r2, r3, #32
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2220      	movs	r2, #32
 8003966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e02e      	b.n	80039dc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	f003 0320 	and.w	r3, r3, #32
 8003988:	2b20      	cmp	r3, #32
 800398a:	d1d5      	bne.n	8003938 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2210      	movs	r2, #16
 8003992:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2220      	movs	r2, #32
 800399a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f7ff fe71 	bl	8003684 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6859      	ldr	r1, [r3, #4]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	4b0d      	ldr	r3, [pc, #52]	; (80039e4 <I2C_IsAcknowledgeFailed+0xc8>)
 80039ae:	400b      	ands	r3, r1
 80039b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	f043 0204 	orr.w	r2, r3, #4
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	fe00e800 	.word	0xfe00e800

080039e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	607b      	str	r3, [r7, #4]
 80039f2:	460b      	mov	r3, r1
 80039f4:	817b      	strh	r3, [r7, #10]
 80039f6:	4613      	mov	r3, r2
 80039f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	0d5b      	lsrs	r3, r3, #21
 8003a04:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003a08:	4b0d      	ldr	r3, [pc, #52]	; (8003a40 <I2C_TransferConfig+0x58>)
 8003a0a:	430b      	orrs	r3, r1
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	ea02 0103 	and.w	r1, r2, r3
 8003a12:	897b      	ldrh	r3, [r7, #10]
 8003a14:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a18:	7a7b      	ldrb	r3, [r7, #9]
 8003a1a:	041b      	lsls	r3, r3, #16
 8003a1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	431a      	orrs	r2, r3
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003a32:	bf00      	nop
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	03ff63ff 	.word	0x03ff63ff

08003a44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b20      	cmp	r3, #32
 8003a58:	d138      	bne.n	8003acc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e032      	b.n	8003ace <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2224      	movs	r2, #36	; 0x24
 8003a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0201 	bic.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6819      	ldr	r1, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	e000      	b.n	8003ace <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003acc:	2302      	movs	r3, #2
  }
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b085      	sub	sp, #20
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	d139      	bne.n	8003b64 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d101      	bne.n	8003afe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003afa:	2302      	movs	r3, #2
 8003afc:	e033      	b.n	8003b66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2224      	movs	r2, #36	; 0x24
 8003b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0201 	bic.w	r2, r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	021b      	lsls	r3, r3, #8
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	e000      	b.n	8003b66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b64:	2302      	movs	r3, #2
  }
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b74:	b08b      	sub	sp, #44	; 0x2c
 8003b76:	af06      	add	r7, sp, #24
 8003b78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0da      	b.n	8003d3a <HAL_PCD_Init+0x1c8>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d106      	bne.n	8003b9e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f006 fca7 	bl	800a4ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2203      	movs	r2, #3
 8003ba2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f003 fe15 	bl	80077da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	603b      	str	r3, [r7, #0]
 8003bb6:	687e      	ldr	r6, [r7, #4]
 8003bb8:	466d      	mov	r5, sp
 8003bba:	f106 0410 	add.w	r4, r6, #16
 8003bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	602b      	str	r3, [r5, #0]
 8003bc6:	1d33      	adds	r3, r6, #4
 8003bc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bca:	6838      	ldr	r0, [r7, #0]
 8003bcc:	f003 fddb 	bl	8007786 <USB_CoreInit>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d005      	beq.n	8003be2 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2202      	movs	r2, #2
 8003bda:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e0ab      	b.n	8003d3a <HAL_PCD_Init+0x1c8>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2100      	movs	r1, #0
 8003be8:	4618      	mov	r0, r3
 8003bea:	f003 fe11 	bl	8007810 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bee:	2300      	movs	r3, #0
 8003bf0:	73fb      	strb	r3, [r7, #15]
 8003bf2:	e035      	b.n	8003c60 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	015b      	lsls	r3, r3, #5
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3329      	adds	r3, #41	; 0x29
 8003bfe:	2201      	movs	r2, #1
 8003c00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c02:	7bfb      	ldrb	r3, [r7, #15]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	015b      	lsls	r3, r3, #5
 8003c08:	4413      	add	r3, r2
 8003c0a:	3328      	adds	r3, #40	; 0x28
 8003c0c:	7bfa      	ldrb	r2, [r7, #15]
 8003c0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	7bfa      	ldrb	r2, [r7, #15]
 8003c14:	b291      	uxth	r1, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	015b      	lsls	r3, r3, #5
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3336      	adds	r3, #54	; 0x36
 8003c1e:	460a      	mov	r2, r1
 8003c20:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c22:	7bfb      	ldrb	r3, [r7, #15]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	015b      	lsls	r3, r3, #5
 8003c28:	4413      	add	r3, r2
 8003c2a:	332b      	adds	r3, #43	; 0x2b
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	015b      	lsls	r3, r3, #5
 8003c36:	4413      	add	r3, r2
 8003c38:	3338      	adds	r3, #56	; 0x38
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	015b      	lsls	r3, r3, #5
 8003c44:	4413      	add	r3, r2
 8003c46:	333c      	adds	r3, #60	; 0x3c
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	3302      	adds	r3, #2
 8003c52:	015b      	lsls	r3, r3, #5
 8003c54:	4413      	add	r3, r2
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	73fb      	strb	r3, [r7, #15]
 8003c60:	7bfa      	ldrb	r2, [r7, #15]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d3c4      	bcc.n	8003bf4 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	73fb      	strb	r3, [r7, #15]
 8003c6e:	e031      	b.n	8003cd4 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	015b      	lsls	r3, r3, #5
 8003c76:	4413      	add	r3, r2
 8003c78:	f203 1329 	addw	r3, r3, #297	; 0x129
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	015b      	lsls	r3, r3, #5
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003c8c:	7bfa      	ldrb	r2, [r7, #15]
 8003c8e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	015b      	lsls	r3, r3, #5
 8003c96:	4413      	add	r3, r2
 8003c98:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	015b      	lsls	r3, r3, #5
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	015b      	lsls	r3, r3, #5
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	330a      	adds	r3, #10
 8003cc6:	015b      	lsls	r3, r3, #5
 8003cc8:	4413      	add	r3, r2
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	73fb      	strb	r3, [r7, #15]
 8003cd4:	7bfa      	ldrb	r2, [r7, #15]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d3c8      	bcc.n	8003c70 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	603b      	str	r3, [r7, #0]
 8003ce4:	687e      	ldr	r6, [r7, #4]
 8003ce6:	466d      	mov	r5, sp
 8003ce8:	f106 0410 	add.w	r4, r6, #16
 8003cec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cf0:	6823      	ldr	r3, [r4, #0]
 8003cf2:	602b      	str	r3, [r5, #0]
 8003cf4:	1d33      	adds	r3, r6, #4
 8003cf6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cf8:	6838      	ldr	r0, [r7, #0]
 8003cfa:	f003 fd96 	bl	800782a <USB_DevInit>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e014      	b.n	8003d3a <HAL_PCD_Init+0x1c8>
  }

  hpcd->USB_Address = 0U;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d102      	bne.n	8003d2e <HAL_PCD_Init+0x1bc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 fe3a 	bl	80049a2 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f004 fddd 	bl	80088f2 <USB_DevDisconnect>

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d42 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b082      	sub	sp, #8
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_PCD_Start+0x16>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e012      	b.n	8003d7e <HAL_PCD_Start+0x3c>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f004 fdad 	bl	80088c4 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f003 fd1a 	bl	80077a8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b082      	sub	sp, #8
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f004 fdc2 	bl	800891c <USB_ReadInterrupts>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da2:	d102      	bne.n	8003daa <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 fb33 	bl	8004410 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f004 fdb4 	bl	800891c <USB_ReadInterrupts>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dbe:	d112      	bne.n	8003de6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dd2:	b292      	uxth	r2, r2
 8003dd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f006 fc22 	bl	800a622 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003dde:	2100      	movs	r1, #0
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f91e 	bl	8004022 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f004 fd96 	bl	800891c <USB_ReadInterrupts>
 8003df0:	4603      	mov	r3, r0
 8003df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003df6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dfa:	d10b      	bne.n	8003e14 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e0e:	b292      	uxth	r2, r2
 8003e10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f004 fd7f 	bl	800891c <USB_ReadInterrupts>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e28:	d10b      	bne.n	8003e42 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e3c:	b292      	uxth	r2, r2
 8003e3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f004 fd68 	bl	800891c <USB_ReadInterrupts>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e56:	d133      	bne.n	8003ec0 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0204 	bic.w	r2, r2, #4
 8003e6a:	b292      	uxth	r2, r2
 8003e6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0208 	bic.w	r2, r2, #8
 8003e82:	b292      	uxth	r2, r2
 8003e84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d107      	bne.n	8003ea2 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f006 fe6d 	bl	800ab7c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f006 fbf6 	bl	800a694 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003eba:	b292      	uxth	r2, r2
 8003ebc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f004 fd29 	bl	800891c <USB_ReadInterrupts>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ed0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ed4:	d126      	bne.n	8003f24 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 0208 	orr.w	r2, r2, #8
 8003ee8:	b292      	uxth	r2, r2
 8003eea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f00:	b292      	uxth	r2, r2
 8003f02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 0204 	orr.w	r2, r2, #4
 8003f18:	b292      	uxth	r2, r2
 8003f1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f006 fb9e 	bl	800a660 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f004 fcf7 	bl	800891c <USB_ReadInterrupts>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f34:	2b80      	cmp	r3, #128	; 0x80
 8003f36:	d13f      	bne.n	8003fb8 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f4a:	b292      	uxth	r2, r2
 8003f4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d12b      	bne.n	8003fb2 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f042 0204 	orr.w	r2, r2, #4
 8003f6c:	b292      	uxth	r2, r2
 8003f6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 0208 	orr.w	r2, r2, #8
 8003f84:	b292      	uxth	r2, r2
 8003f86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	089b      	lsrs	r3, r3, #2
 8003f9e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003fa8:	2101      	movs	r1, #1
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f006 fde6 	bl	800ab7c <HAL_PCDEx_LPM_Callback>
 8003fb0:	e002      	b.n	8003fb8 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f006 fb54 	bl	800a660 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f004 fcad 	bl	800891c <USB_ReadInterrupts>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fcc:	d10e      	bne.n	8003fec <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003fe0:	b292      	uxth	r2, r2
 8003fe2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f006 fb0d 	bl	800a606 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f004 fc93 	bl	800891c <USB_ReadInterrupts>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004000:	d10b      	bne.n	800401a <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800400a:	b29a      	uxth	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004014:	b292      	uxth	r2, r2
 8004016:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800401a:	bf00      	nop
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b082      	sub	sp, #8
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
 800402a:	460b      	mov	r3, r1
 800402c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_PCD_SetAddress+0x1a>
 8004038:	2302      	movs	r3, #2
 800403a:	e013      	b.n	8004064 <HAL_PCD_SetAddress+0x42>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	78fa      	ldrb	r2, [r7, #3]
 8004048:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	78fa      	ldrb	r2, [r7, #3]
 8004052:	4611      	mov	r1, r2
 8004054:	4618      	mov	r0, r3
 8004056:	f004 fc21 	bl	800889c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	4608      	mov	r0, r1
 8004076:	4611      	mov	r1, r2
 8004078:	461a      	mov	r2, r3
 800407a:	4603      	mov	r3, r0
 800407c:	70fb      	strb	r3, [r7, #3]
 800407e:	460b      	mov	r3, r1
 8004080:	803b      	strh	r3, [r7, #0]
 8004082:	4613      	mov	r3, r2
 8004084:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800408a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800408e:	2b00      	cmp	r3, #0
 8004090:	da0b      	bge.n	80040aa <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	015b      	lsls	r3, r3, #5
 800409a:	3328      	adds	r3, #40	; 0x28
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	4413      	add	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2201      	movs	r2, #1
 80040a6:	705a      	strb	r2, [r3, #1]
 80040a8:	e00b      	b.n	80040c2 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040aa:	78fb      	ldrb	r3, [r7, #3]
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	015b      	lsls	r3, r3, #5
 80040b2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	4413      	add	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80040c2:	78fb      	ldrb	r3, [r7, #3]
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80040ce:	883a      	ldrh	r2, [r7, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	78ba      	ldrb	r2, [r7, #2]
 80040d8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	785b      	ldrb	r3, [r3, #1]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d004      	beq.n	80040ec <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80040ec:	78bb      	ldrb	r3, [r7, #2]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d102      	bne.n	80040f8 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d101      	bne.n	8004106 <HAL_PCD_EP_Open+0x9a>
 8004102:	2302      	movs	r3, #2
 8004104:	e00e      	b.n	8004124 <HAL_PCD_EP_Open+0xb8>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68f9      	ldr	r1, [r7, #12]
 8004114:	4618      	mov	r0, r3
 8004116:	f003 fbad 	bl	8007874 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8004122:	7afb      	ldrb	r3, [r7, #11]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	460b      	mov	r3, r1
 8004136:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004138:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800413c:	2b00      	cmp	r3, #0
 800413e:	da0b      	bge.n	8004158 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004140:	78fb      	ldrb	r3, [r7, #3]
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	015b      	lsls	r3, r3, #5
 8004148:	3328      	adds	r3, #40	; 0x28
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	4413      	add	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2201      	movs	r2, #1
 8004154:	705a      	strb	r2, [r3, #1]
 8004156:	e00b      	b.n	8004170 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	015b      	lsls	r3, r3, #5
 8004160:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	4413      	add	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004170:	78fb      	ldrb	r3, [r7, #3]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	b2da      	uxtb	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004182:	2b01      	cmp	r3, #1
 8004184:	d101      	bne.n	800418a <HAL_PCD_EP_Close+0x5e>
 8004186:	2302      	movs	r3, #2
 8004188:	e00e      	b.n	80041a8 <HAL_PCD_EP_Close+0x7c>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68f9      	ldr	r1, [r7, #12]
 8004198:	4618      	mov	r0, r3
 800419a:	f003 fe5b 	bl	8007e54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	607a      	str	r2, [r7, #4]
 80041ba:	603b      	str	r3, [r7, #0]
 80041bc:	460b      	mov	r3, r1
 80041be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041c0:	7afb      	ldrb	r3, [r7, #11]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	015b      	lsls	r3, r3, #5
 80041c8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	4413      	add	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2200      	movs	r2, #0
 80041e2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	2200      	movs	r2, #0
 80041e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041ea:	7afb      	ldrb	r3, [r7, #11]
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041f6:	7afb      	ldrb	r3, [r7, #11]
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d106      	bne.n	800420e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6979      	ldr	r1, [r7, #20]
 8004206:	4618      	mov	r0, r3
 8004208:	f003 ffba 	bl	8008180 <USB_EPStartXfer>
 800420c:	e005      	b.n	800421a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6979      	ldr	r1, [r7, #20]
 8004214:	4618      	mov	r0, r3
 8004216:	f003 ffb3 	bl	8008180 <USB_EPStartXfer>
  }

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	460b      	mov	r3, r1
 800422e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	330a      	adds	r3, #10
 800423a:	015b      	lsls	r3, r3, #5
 800423c:	4413      	add	r3, r2
 800423e:	3304      	adds	r3, #4
 8004240:	681b      	ldr	r3, [r3, #0]
}
 8004242:	4618      	mov	r0, r3
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b086      	sub	sp, #24
 8004252:	af00      	add	r7, sp, #0
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]
 800425a:	460b      	mov	r3, r1
 800425c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800425e:	7afb      	ldrb	r3, [r7, #11]
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	015b      	lsls	r3, r3, #5
 8004266:	3328      	adds	r3, #40	; 0x28
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	4413      	add	r3, r2
 800426c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2200      	movs	r2, #0
 800427e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2201      	movs	r2, #1
 8004284:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004286:	7afb      	ldrb	r3, [r7, #11]
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	b2da      	uxtb	r2, r3
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004292:	7afb      	ldrb	r3, [r7, #11]
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	2b00      	cmp	r3, #0
 800429a:	d106      	bne.n	80042aa <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6979      	ldr	r1, [r7, #20]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f003 ff6c 	bl	8008180 <USB_EPStartXfer>
 80042a8:	e005      	b.n	80042b6 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6979      	ldr	r1, [r7, #20]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f003 ff65 	bl	8008180 <USB_EPStartXfer>
  }

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	460b      	mov	r3, r1
 80042ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042cc:	78fb      	ldrb	r3, [r7, #3]
 80042ce:	f003 0207 	and.w	r2, r3, #7
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d901      	bls.n	80042de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e046      	b.n	800436c <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	da0b      	bge.n	80042fe <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042e6:	78fb      	ldrb	r3, [r7, #3]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	015b      	lsls	r3, r3, #5
 80042ee:	3328      	adds	r3, #40	; 0x28
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	4413      	add	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2201      	movs	r2, #1
 80042fa:	705a      	strb	r2, [r3, #1]
 80042fc:	e009      	b.n	8004312 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042fe:	78fb      	ldrb	r3, [r7, #3]
 8004300:	015b      	lsls	r3, r3, #5
 8004302:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	4413      	add	r3, r2
 800430a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2201      	movs	r2, #1
 8004316:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004318:	78fb      	ldrb	r3, [r7, #3]
 800431a:	f003 0307 	and.w	r3, r3, #7
 800431e:	b2da      	uxtb	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800432a:	2b01      	cmp	r3, #1
 800432c:	d101      	bne.n	8004332 <HAL_PCD_EP_SetStall+0x72>
 800432e:	2302      	movs	r3, #2
 8004330:	e01c      	b.n	800436c <HAL_PCD_EP_SetStall+0xac>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68f9      	ldr	r1, [r7, #12]
 8004340:	4618      	mov	r0, r3
 8004342:	f004 f9d5 	bl	80086f0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004346:	78fb      	ldrb	r3, [r7, #3]
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	2b00      	cmp	r3, #0
 800434e:	d108      	bne.n	8004362 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800435a:	4619      	mov	r1, r3
 800435c:	4610      	mov	r0, r2
 800435e:	f004 faed 	bl	800893c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	460b      	mov	r3, r1
 800437e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	f003 020f 	and.w	r2, r3, #15
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	429a      	cmp	r2, r3
 800438c:	d901      	bls.n	8004392 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e03a      	b.n	8004408 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004392:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004396:	2b00      	cmp	r3, #0
 8004398:	da0b      	bge.n	80043b2 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800439a:	78fb      	ldrb	r3, [r7, #3]
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	015b      	lsls	r3, r3, #5
 80043a2:	3328      	adds	r3, #40	; 0x28
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	4413      	add	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2201      	movs	r2, #1
 80043ae:	705a      	strb	r2, [r3, #1]
 80043b0:	e00b      	b.n	80043ca <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043b2:	78fb      	ldrb	r3, [r7, #3]
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	015b      	lsls	r3, r3, #5
 80043ba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	4413      	add	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043d0:	78fb      	ldrb	r3, [r7, #3]
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <HAL_PCD_EP_ClrStall+0x76>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e00e      	b.n	8004408 <HAL_PCD_EP_ClrStall+0x94>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68f9      	ldr	r1, [r7, #12]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f004 f9bb 	bl	8008774 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004410:	b590      	push	{r4, r7, lr}
 8004412:	b089      	sub	sp, #36	; 0x24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004418:	e274      	b.n	8004904 <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004422:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004424:	8afb      	ldrh	r3, [r7, #22]
 8004426:	b2db      	uxtb	r3, r3
 8004428:	f003 030f 	and.w	r3, r3, #15
 800442c:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800442e:	7d7b      	ldrb	r3, [r7, #21]
 8004430:	2b00      	cmp	r3, #0
 8004432:	f040 813c 	bne.w	80046ae <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004436:	8afb      	ldrh	r3, [r7, #22]
 8004438:	f003 0310 	and.w	r3, r3, #16
 800443c:	2b00      	cmp	r3, #0
 800443e:	d14f      	bne.n	80044e0 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	b29b      	uxth	r3, r3
 8004448:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800444c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004450:	b29c      	uxth	r4, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800445a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800445e:	b29b      	uxth	r3, r3
 8004460:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3328      	adds	r3, #40	; 0x28
 8004466:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004470:	b29b      	uxth	r3, r3
 8004472:	461a      	mov	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	4413      	add	r3, r2
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	4413      	add	r3, r2
 8004482:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004486:	881b      	ldrh	r3, [r3, #0]
 8004488:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	695a      	ldr	r2, [r3, #20]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	441a      	add	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800449e:	2100      	movs	r1, #0
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f006 f899 	bl	800a5d8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 8228 	beq.w	8004904 <PCD_EP_ISR_Handler+0x4f4>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f040 8223 	bne.w	8004904 <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	b292      	uxth	r2, r2
 80044d2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80044de:	e211      	b.n	8004904 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80044e6:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	881b      	ldrh	r3, [r3, #0]
 80044ee:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80044f0:	8a7b      	ldrh	r3, [r7, #18]
 80044f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d031      	beq.n	800455e <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004502:	b29b      	uxth	r3, r3
 8004504:	461a      	mov	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	4413      	add	r3, r2
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	6812      	ldr	r2, [r2, #0]
 8004512:	4413      	add	r3, r2
 8004514:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004534:	b29b      	uxth	r3, r3
 8004536:	f004 fa4e 	bl	80089d6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	b29a      	uxth	r2, r3
 8004542:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004546:	4013      	ands	r3, r2
 8004548:	b29c      	uxth	r4, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004552:	b292      	uxth	r2, r2
 8004554:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f006 f814 	bl	800a584 <HAL_PCD_SetupStageCallback>
 800455c:	e1d2      	b.n	8004904 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800455e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004562:	2b00      	cmp	r3, #0
 8004564:	f280 81ce 	bge.w	8004904 <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	b29a      	uxth	r2, r3
 8004570:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004574:	4013      	ands	r3, r2
 8004576:	b29c      	uxth	r4, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004580:	b292      	uxth	r2, r2
 8004582:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800458c:	b29b      	uxth	r3, r3
 800458e:	461a      	mov	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	4413      	add	r3, r2
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6812      	ldr	r2, [r2, #0]
 800459c:	4413      	add	r3, r2
 800459e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80045a2:	881b      	ldrh	r3, [r3, #0]
 80045a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d019      	beq.n	80045e8 <PCD_EP_ISR_Handler+0x1d8>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d015      	beq.n	80045e8 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6818      	ldr	r0, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6959      	ldr	r1, [r3, #20]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	f004 fa02 	bl	80089d6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	695a      	ldr	r2, [r3, #20]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	441a      	add	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80045e0:	2100      	movs	r1, #0
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f005 ffe0 	bl	800a5a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	461c      	mov	r4, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	441c      	add	r4, r3
 80045fa:	f204 4306 	addw	r3, r4, #1030	; 0x406
 80045fe:	461c      	mov	r4, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10e      	bne.n	8004626 <PCD_EP_ISR_Handler+0x216>
 8004608:	8823      	ldrh	r3, [r4, #0]
 800460a:	b29b      	uxth	r3, r3
 800460c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004610:	b29b      	uxth	r3, r3
 8004612:	8023      	strh	r3, [r4, #0]
 8004614:	8823      	ldrh	r3, [r4, #0]
 8004616:	b29b      	uxth	r3, r3
 8004618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800461c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004620:	b29b      	uxth	r3, r3
 8004622:	8023      	strh	r3, [r4, #0]
 8004624:	e02d      	b.n	8004682 <PCD_EP_ISR_Handler+0x272>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	2b3e      	cmp	r3, #62	; 0x3e
 800462c:	d812      	bhi.n	8004654 <PCD_EP_ISR_Handler+0x244>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	085b      	lsrs	r3, r3, #1
 8004634:	61bb      	str	r3, [r7, #24]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <PCD_EP_ISR_Handler+0x238>
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	3301      	adds	r3, #1
 8004646:	61bb      	str	r3, [r7, #24]
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	b29b      	uxth	r3, r3
 800464c:	029b      	lsls	r3, r3, #10
 800464e:	b29b      	uxth	r3, r3
 8004650:	8023      	strh	r3, [r4, #0]
 8004652:	e016      	b.n	8004682 <PCD_EP_ISR_Handler+0x272>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	095b      	lsrs	r3, r3, #5
 800465a:	61bb      	str	r3, [r7, #24]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	f003 031f 	and.w	r3, r3, #31
 8004664:	2b00      	cmp	r3, #0
 8004666:	d102      	bne.n	800466e <PCD_EP_ISR_Handler+0x25e>
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	3b01      	subs	r3, #1
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	b29b      	uxth	r3, r3
 8004672:	029b      	lsls	r3, r3, #10
 8004674:	b29b      	uxth	r3, r3
 8004676:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800467a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800467e:	b29b      	uxth	r3, r3
 8004680:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	b29b      	uxth	r3, r3
 800468a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800468e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004692:	b29c      	uxth	r4, r3
 8004694:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004698:	b29c      	uxth	r4, r3
 800469a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800469e:	b29c      	uxth	r4, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	4b9e      	ldr	r3, [pc, #632]	; (8004920 <PCD_EP_ISR_Handler+0x510>)
 80046a6:	4323      	orrs	r3, r4
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	8013      	strh	r3, [r2, #0]
 80046ac:	e12a      	b.n	8004904 <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	7d7b      	ldrb	r3, [r7, #21]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80046be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f280 80cb 	bge.w	800485e <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	461a      	mov	r2, r3
 80046ce:	7d7b      	ldrb	r3, [r7, #21]
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80046dc:	4013      	ands	r3, r2
 80046de:	b29c      	uxth	r4, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	461a      	mov	r2, r3
 80046e6:	7d7b      	ldrb	r3, [r7, #21]
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80046f0:	b292      	uxth	r2, r2
 80046f2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80046f4:	7d7b      	ldrb	r3, [r7, #21]
 80046f6:	015b      	lsls	r3, r3, #5
 80046f8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	4413      	add	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	7b1b      	ldrb	r3, [r3, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d11f      	bne.n	800474a <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004712:	b29b      	uxth	r3, r3
 8004714:	461a      	mov	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	4413      	add	r3, r2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6812      	ldr	r2, [r2, #0]
 8004722:	4413      	add	r3, r2
 8004724:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800472e:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8004730:	8bfb      	ldrh	r3, [r7, #30]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d06e      	beq.n	8004814 <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6959      	ldr	r1, [r3, #20]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	88da      	ldrh	r2, [r3, #6]
 8004742:	8bfb      	ldrh	r3, [r7, #30]
 8004744:	f004 f947 	bl	80089d6 <USB_ReadPMA>
 8004748:	e064      	b.n	8004814 <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	461a      	mov	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	b29b      	uxth	r3, r3
 800475c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004764:	b29c      	uxth	r4, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	461a      	mov	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	441a      	add	r2, r3
 8004774:	4b6b      	ldr	r3, [pc, #428]	; (8004924 <PCD_EP_ISR_Handler+0x514>)
 8004776:	4323      	orrs	r3, r4
 8004778:	b29b      	uxth	r3, r3
 800477a:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	461a      	mov	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	b29b      	uxth	r3, r3
 800478e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d01f      	beq.n	80047d6 <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800479e:	b29b      	uxth	r3, r3
 80047a0:	461a      	mov	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	4413      	add	r3, r2
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6812      	ldr	r2, [r2, #0]
 80047ae:	4413      	add	r3, r2
 80047b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047ba:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80047bc:	8bfb      	ldrh	r3, [r7, #30]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d028      	beq.n	8004814 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6818      	ldr	r0, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6959      	ldr	r1, [r3, #20]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	891a      	ldrh	r2, [r3, #8]
 80047ce:	8bfb      	ldrh	r3, [r7, #30]
 80047d0:	f004 f901 	bl	80089d6 <USB_ReadPMA>
 80047d4:	e01e      	b.n	8004814 <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047de:	b29b      	uxth	r3, r3
 80047e0:	461a      	mov	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	4413      	add	r3, r2
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6812      	ldr	r2, [r2, #0]
 80047ee:	4413      	add	r3, r2
 80047f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047fa:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80047fc:	8bfb      	ldrh	r3, [r7, #30]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d008      	beq.n	8004814 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6818      	ldr	r0, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6959      	ldr	r1, [r3, #20]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	895a      	ldrh	r2, [r3, #10]
 800480e:	8bfb      	ldrh	r3, [r7, #30]
 8004810:	f004 f8e1 	bl	80089d6 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	69da      	ldr	r2, [r3, #28]
 8004818:	8bfb      	ldrh	r3, [r7, #30]
 800481a:	441a      	add	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	695a      	ldr	r2, [r3, #20]
 8004824:	8bfb      	ldrh	r3, [r7, #30]
 8004826:	441a      	add	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d004      	beq.n	800483e <PCD_EP_ISR_Handler+0x42e>
 8004834:	8bfa      	ldrh	r2, [r7, #30]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	429a      	cmp	r2, r3
 800483c:	d206      	bcs.n	800484c <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	4619      	mov	r1, r3
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f005 feaf 	bl	800a5a8 <HAL_PCD_DataOutStageCallback>
 800484a:	e008      	b.n	800485e <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	7819      	ldrb	r1, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	695a      	ldr	r2, [r3, #20]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7ff fca9 	bl	80041b0 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800485e:	8a7b      	ldrh	r3, [r7, #18]
 8004860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004864:	2b00      	cmp	r3, #0
 8004866:	d04d      	beq.n	8004904 <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004868:	7d7b      	ldrb	r3, [r7, #21]
 800486a:	015b      	lsls	r3, r3, #5
 800486c:	3328      	adds	r3, #40	; 0x28
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	4413      	add	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	461a      	mov	r2, r3
 800487a:	7d7b      	ldrb	r3, [r7, #21]
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	b29b      	uxth	r3, r3
 8004884:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488c:	b29c      	uxth	r4, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	461a      	mov	r2, r3
 8004894:	7d7b      	ldrb	r3, [r7, #21]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	441a      	add	r2, r3
 800489a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800489e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	461a      	mov	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	4413      	add	r3, r2
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6812      	ldr	r2, [r2, #0]
 80048be:	4413      	add	r3, r2
 80048c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	695a      	ldr	r2, [r3, #20]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	441a      	add	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d106      	bne.n	80048f2 <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	4619      	mov	r1, r3
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f005 fe74 	bl	800a5d8 <HAL_PCD_DataInStageCallback>
 80048f0:	e008      	b.n	8004904 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	7819      	ldrb	r1, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	695a      	ldr	r2, [r3, #20]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7ff fca5 	bl	800424e <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800490c:	b29b      	uxth	r3, r3
 800490e:	b21b      	sxth	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	f6ff ad82 	blt.w	800441a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3724      	adds	r7, #36	; 0x24
 800491c:	46bd      	mov	sp, r7
 800491e:	bd90      	pop	{r4, r7, pc}
 8004920:	ffff8080 	.word	0xffff8080
 8004924:	ffff80c0 	.word	0xffff80c0

08004928 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	607b      	str	r3, [r7, #4]
 8004932:	460b      	mov	r3, r1
 8004934:	817b      	strh	r3, [r7, #10]
 8004936:	4613      	mov	r3, r2
 8004938:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800493a:	897b      	ldrh	r3, [r7, #10]
 800493c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d008      	beq.n	8004958 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004946:	897b      	ldrh	r3, [r7, #10]
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	015b      	lsls	r3, r3, #5
 800494e:	3328      	adds	r3, #40	; 0x28
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4413      	add	r3, r2
 8004954:	617b      	str	r3, [r7, #20]
 8004956:	e006      	b.n	8004966 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004958:	897b      	ldrh	r3, [r7, #10]
 800495a:	015b      	lsls	r3, r3, #5
 800495c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	4413      	add	r3, r2
 8004964:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004966:	893b      	ldrh	r3, [r7, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d107      	bne.n	800497c <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	2200      	movs	r2, #0
 8004970:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	b29a      	uxth	r2, r3
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	80da      	strh	r2, [r3, #6]
 800497a:	e00b      	b.n	8004994 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	2201      	movs	r2, #1
 8004980:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	b29a      	uxth	r2, r3
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	0c1b      	lsrs	r3, r3, #16
 800498e:	b29a      	uxth	r2, r3
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	371c      	adds	r7, #28
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b085      	sub	sp, #20
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	f043 0301 	orr.w	r3, r3, #1
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80049da:	b29b      	uxth	r3, r3
 80049dc:	f043 0302 	orr.w	r3, r3, #2
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
	...

080049f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80049fc:	4b04      	ldr	r3, [pc, #16]	; (8004a10 <HAL_PWREx_GetVoltageRange+0x18>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	40007000 	.word	0x40007000

08004a14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a22:	d130      	bne.n	8004a86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a24:	4b23      	ldr	r3, [pc, #140]	; (8004ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a30:	d038      	beq.n	8004aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a32:	4b20      	ldr	r3, [pc, #128]	; (8004ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a3a:	4a1e      	ldr	r2, [pc, #120]	; (8004ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a42:	4b1d      	ldr	r3, [pc, #116]	; (8004ab8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2232      	movs	r2, #50	; 0x32
 8004a48:	fb02 f303 	mul.w	r3, r2, r3
 8004a4c:	4a1b      	ldr	r2, [pc, #108]	; (8004abc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a52:	0c9b      	lsrs	r3, r3, #18
 8004a54:	3301      	adds	r3, #1
 8004a56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a58:	e002      	b.n	8004a60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a60:	4b14      	ldr	r3, [pc, #80]	; (8004ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a6c:	d102      	bne.n	8004a74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1f2      	bne.n	8004a5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a74:	4b0f      	ldr	r3, [pc, #60]	; (8004ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a80:	d110      	bne.n	8004aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e00f      	b.n	8004aa6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a86:	4b0b      	ldr	r3, [pc, #44]	; (8004ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a92:	d007      	beq.n	8004aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a94:	4b07      	ldr	r3, [pc, #28]	; (8004ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a9c:	4a05      	ldr	r2, [pc, #20]	; (8004ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004aa2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	40007000 	.word	0x40007000
 8004ab8:	20000000 	.word	0x20000000
 8004abc:	431bde83 	.word	0x431bde83

08004ac0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004ac4:	4b05      	ldr	r3, [pc, #20]	; (8004adc <HAL_PWREx_EnableVddUSB+0x1c>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	4a04      	ldr	r2, [pc, #16]	; (8004adc <HAL_PWREx_EnableVddUSB+0x1c>)
 8004aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ace:	6053      	str	r3, [r2, #4]
}
 8004ad0:	bf00      	nop
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	40007000 	.word	0x40007000

08004ae0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b08a      	sub	sp, #40	; 0x28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d102      	bne.n	8004af4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	f000 bc56 	b.w	80053a0 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004af4:	4ba1      	ldr	r3, [pc, #644]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 030c 	and.w	r3, r3, #12
 8004afc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004afe:	4b9f      	ldr	r3, [pc, #636]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0310 	and.w	r3, r3, #16
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 80e6 	beq.w	8004ce2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d007      	beq.n	8004b2c <HAL_RCC_OscConfig+0x4c>
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	2b0c      	cmp	r3, #12
 8004b20:	f040 808d 	bne.w	8004c3e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	f040 8089 	bne.w	8004c3e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b2c:	4b93      	ldr	r3, [pc, #588]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d006      	beq.n	8004b46 <HAL_RCC_OscConfig+0x66>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d102      	bne.n	8004b46 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	f000 bc2d 	b.w	80053a0 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b4a:	4b8c      	ldr	r3, [pc, #560]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0308 	and.w	r3, r3, #8
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d004      	beq.n	8004b60 <HAL_RCC_OscConfig+0x80>
 8004b56:	4b89      	ldr	r3, [pc, #548]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b5e:	e005      	b.n	8004b6c <HAL_RCC_OscConfig+0x8c>
 8004b60:	4b86      	ldr	r3, [pc, #536]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b66:	091b      	lsrs	r3, r3, #4
 8004b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d224      	bcs.n	8004bba <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 fdbd 	bl	80056f4 <RCC_SetFlashLatencyFromMSIRange>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	f000 bc0d 	b.w	80053a0 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b86:	4b7d      	ldr	r3, [pc, #500]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a7c      	ldr	r2, [pc, #496]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004b8c:	f043 0308 	orr.w	r3, r3, #8
 8004b90:	6013      	str	r3, [r2, #0]
 8004b92:	4b7a      	ldr	r3, [pc, #488]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	4977      	ldr	r1, [pc, #476]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ba4:	4b75      	ldr	r3, [pc, #468]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	021b      	lsls	r3, r3, #8
 8004bb2:	4972      	ldr	r1, [pc, #456]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	604b      	str	r3, [r1, #4]
 8004bb8:	e025      	b.n	8004c06 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bba:	4b70      	ldr	r3, [pc, #448]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a6f      	ldr	r2, [pc, #444]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004bc0:	f043 0308 	orr.w	r3, r3, #8
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	4b6d      	ldr	r3, [pc, #436]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	496a      	ldr	r1, [pc, #424]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bd8:	4b68      	ldr	r3, [pc, #416]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	021b      	lsls	r3, r3, #8
 8004be6:	4965      	ldr	r1, [pc, #404]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d109      	bne.n	8004c06 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fd7c 	bl	80056f4 <RCC_SetFlashLatencyFromMSIRange>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e3cc      	b.n	80053a0 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c06:	f000 fcb3 	bl	8005570 <HAL_RCC_GetSysClockFreq>
 8004c0a:	4601      	mov	r1, r0
 8004c0c:	4b5b      	ldr	r3, [pc, #364]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	091b      	lsrs	r3, r3, #4
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	4a5a      	ldr	r2, [pc, #360]	; (8004d80 <HAL_RCC_OscConfig+0x2a0>)
 8004c18:	5cd3      	ldrb	r3, [r2, r3]
 8004c1a:	f003 031f 	and.w	r3, r3, #31
 8004c1e:	fa21 f303 	lsr.w	r3, r1, r3
 8004c22:	4a58      	ldr	r2, [pc, #352]	; (8004d84 <HAL_RCC_OscConfig+0x2a4>)
 8004c24:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c26:	4b58      	ldr	r3, [pc, #352]	; (8004d88 <HAL_RCC_OscConfig+0x2a8>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fd fdd4 	bl	80027d8 <HAL_InitTick>
 8004c30:	4603      	mov	r3, r0
 8004c32:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8004c34:	7dfb      	ldrb	r3, [r7, #23]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d052      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8004c3a:	7dfb      	ldrb	r3, [r7, #23]
 8004c3c:	e3b0      	b.n	80053a0 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d032      	beq.n	8004cac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c46:	4b4d      	ldr	r3, [pc, #308]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a4c      	ldr	r2, [pc, #304]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004c4c:	f043 0301 	orr.w	r3, r3, #1
 8004c50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c52:	f7fd fe0d 	bl	8002870 <HAL_GetTick>
 8004c56:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c58:	e008      	b.n	8004c6c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c5a:	f7fd fe09 	bl	8002870 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e399      	b.n	80053a0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c6c:	4b43      	ldr	r3, [pc, #268]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0f0      	beq.n	8004c5a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c78:	4b40      	ldr	r3, [pc, #256]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a3f      	ldr	r2, [pc, #252]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004c7e:	f043 0308 	orr.w	r3, r3, #8
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	4b3d      	ldr	r3, [pc, #244]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	493a      	ldr	r1, [pc, #232]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c96:	4b39      	ldr	r3, [pc, #228]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	021b      	lsls	r3, r3, #8
 8004ca4:	4935      	ldr	r1, [pc, #212]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	604b      	str	r3, [r1, #4]
 8004caa:	e01a      	b.n	8004ce2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004cac:	4b33      	ldr	r3, [pc, #204]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a32      	ldr	r2, [pc, #200]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004cb2:	f023 0301 	bic.w	r3, r3, #1
 8004cb6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cb8:	f7fd fdda 	bl	8002870 <HAL_GetTick>
 8004cbc:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cc0:	f7fd fdd6 	bl	8002870 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e366      	b.n	80053a0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004cd2:	4b2a      	ldr	r3, [pc, #168]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1f0      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x1e0>
 8004cde:	e000      	b.n	8004ce2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ce0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d073      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d005      	beq.n	8004d00 <HAL_RCC_OscConfig+0x220>
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	2b0c      	cmp	r3, #12
 8004cf8:	d10e      	bne.n	8004d18 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	2b03      	cmp	r3, #3
 8004cfe:	d10b      	bne.n	8004d18 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d00:	4b1e      	ldr	r3, [pc, #120]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d063      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x2f4>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d15f      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e343      	b.n	80053a0 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d20:	d106      	bne.n	8004d30 <HAL_RCC_OscConfig+0x250>
 8004d22:	4b16      	ldr	r3, [pc, #88]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a15      	ldr	r2, [pc, #84]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	e01d      	b.n	8004d6c <HAL_RCC_OscConfig+0x28c>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d38:	d10c      	bne.n	8004d54 <HAL_RCC_OscConfig+0x274>
 8004d3a:	4b10      	ldr	r3, [pc, #64]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a0f      	ldr	r2, [pc, #60]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d44:	6013      	str	r3, [r2, #0]
 8004d46:	4b0d      	ldr	r3, [pc, #52]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a0c      	ldr	r2, [pc, #48]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	e00b      	b.n	8004d6c <HAL_RCC_OscConfig+0x28c>
 8004d54:	4b09      	ldr	r3, [pc, #36]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a08      	ldr	r2, [pc, #32]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a05      	ldr	r2, [pc, #20]	; (8004d7c <HAL_RCC_OscConfig+0x29c>)
 8004d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01b      	beq.n	8004dac <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d74:	f7fd fd7c 	bl	8002870 <HAL_GetTick>
 8004d78:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d7a:	e010      	b.n	8004d9e <HAL_RCC_OscConfig+0x2be>
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	0800ad28 	.word	0x0800ad28
 8004d84:	20000000 	.word	0x20000000
 8004d88:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d8c:	f7fd fd70 	bl	8002870 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b64      	cmp	r3, #100	; 0x64
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e300      	b.n	80053a0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d9e:	4ba0      	ldr	r3, [pc, #640]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0f0      	beq.n	8004d8c <HAL_RCC_OscConfig+0x2ac>
 8004daa:	e014      	b.n	8004dd6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dac:	f7fd fd60 	bl	8002870 <HAL_GetTick>
 8004db0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004db4:	f7fd fd5c 	bl	8002870 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b64      	cmp	r3, #100	; 0x64
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e2ec      	b.n	80053a0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dc6:	4b96      	ldr	r3, [pc, #600]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f0      	bne.n	8004db4 <HAL_RCC_OscConfig+0x2d4>
 8004dd2:	e000      	b.n	8004dd6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d060      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	d005      	beq.n	8004df4 <HAL_RCC_OscConfig+0x314>
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	2b0c      	cmp	r3, #12
 8004dec:	d119      	bne.n	8004e22 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d116      	bne.n	8004e22 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004df4:	4b8a      	ldr	r3, [pc, #552]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <HAL_RCC_OscConfig+0x32c>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e2c9      	b.n	80053a0 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e0c:	4b84      	ldr	r3, [pc, #528]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	061b      	lsls	r3, r3, #24
 8004e1a:	4981      	ldr	r1, [pc, #516]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e20:	e040      	b.n	8004ea4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d023      	beq.n	8004e72 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e2a:	4b7d      	ldr	r3, [pc, #500]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a7c      	ldr	r2, [pc, #496]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e36:	f7fd fd1b 	bl	8002870 <HAL_GetTick>
 8004e3a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e3c:	e008      	b.n	8004e50 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e3e:	f7fd fd17 	bl	8002870 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e2a7      	b.n	80053a0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e50:	4b73      	ldr	r3, [pc, #460]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0f0      	beq.n	8004e3e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e5c:	4b70      	ldr	r3, [pc, #448]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	061b      	lsls	r3, r3, #24
 8004e6a:	496d      	ldr	r1, [pc, #436]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	604b      	str	r3, [r1, #4]
 8004e70:	e018      	b.n	8004ea4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e72:	4b6b      	ldr	r3, [pc, #428]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a6a      	ldr	r2, [pc, #424]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7e:	f7fd fcf7 	bl	8002870 <HAL_GetTick>
 8004e82:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e84:	e008      	b.n	8004e98 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e86:	f7fd fcf3 	bl	8002870 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d901      	bls.n	8004e98 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e283      	b.n	80053a0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e98:	4b61      	ldr	r3, [pc, #388]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1f0      	bne.n	8004e86 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0308 	and.w	r3, r3, #8
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d07f      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d05f      	beq.n	8004f78 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8004eb8:	4b59      	ldr	r3, [pc, #356]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ebe:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	699a      	ldr	r2, [r3, #24]
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f003 0310 	and.w	r3, r3, #16
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d037      	beq.n	8004f3e <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d006      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e25c      	b.n	80053a0 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d01b      	beq.n	8004f28 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8004ef0:	4b4b      	ldr	r3, [pc, #300]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ef6:	4a4a      	ldr	r2, [pc, #296]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004ef8:	f023 0301 	bic.w	r3, r3, #1
 8004efc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f00:	f7fd fcb6 	bl	8002870 <HAL_GetTick>
 8004f04:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f08:	f7fd fcb2 	bl	8002870 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b11      	cmp	r3, #17
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e242      	b.n	80053a0 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f1a:	4b41      	ldr	r3, [pc, #260]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1ef      	bne.n	8004f08 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8004f28:	4b3d      	ldr	r3, [pc, #244]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f2e:	f023 0210 	bic.w	r2, r3, #16
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	493a      	ldr	r1, [pc, #232]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f3e:	4b38      	ldr	r3, [pc, #224]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f44:	4a36      	ldr	r2, [pc, #216]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004f46:	f043 0301 	orr.w	r3, r3, #1
 8004f4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4e:	f7fd fc8f 	bl	8002870 <HAL_GetTick>
 8004f52:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f56:	f7fd fc8b 	bl	8002870 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b11      	cmp	r3, #17
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e21b      	b.n	80053a0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f68:	4b2d      	ldr	r3, [pc, #180]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0ef      	beq.n	8004f56 <HAL_RCC_OscConfig+0x476>
 8004f76:	e01b      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f78:	4b29      	ldr	r3, [pc, #164]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f7e:	4a28      	ldr	r2, [pc, #160]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004f80:	f023 0301 	bic.w	r3, r3, #1
 8004f84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f88:	f7fd fc72 	bl	8002870 <HAL_GetTick>
 8004f8c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f90:	f7fd fc6e 	bl	8002870 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b11      	cmp	r3, #17
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e1fe      	b.n	80053a0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fa2:	4b1f      	ldr	r3, [pc, #124]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1ef      	bne.n	8004f90 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 80c1 	beq.w	8005140 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004fc4:	4b16      	ldr	r3, [pc, #88]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10e      	bne.n	8004fee <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fd0:	4b13      	ldr	r3, [pc, #76]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd4:	4a12      	ldr	r2, [pc, #72]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fda:	6593      	str	r3, [r2, #88]	; 0x58
 8004fdc:	4b10      	ldr	r3, [pc, #64]	; (8005020 <HAL_RCC_OscConfig+0x540>)
 8004fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe4:	60fb      	str	r3, [r7, #12]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fee:	4b0d      	ldr	r3, [pc, #52]	; (8005024 <HAL_RCC_OscConfig+0x544>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d11c      	bne.n	8005034 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ffa:	4b0a      	ldr	r3, [pc, #40]	; (8005024 <HAL_RCC_OscConfig+0x544>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a09      	ldr	r2, [pc, #36]	; (8005024 <HAL_RCC_OscConfig+0x544>)
 8005000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005006:	f7fd fc33 	bl	8002870 <HAL_GetTick>
 800500a:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800500c:	e00c      	b.n	8005028 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800500e:	f7fd fc2f 	bl	8002870 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d905      	bls.n	8005028 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e1bf      	b.n	80053a0 <HAL_RCC_OscConfig+0x8c0>
 8005020:	40021000 	.word	0x40021000
 8005024:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005028:	4bb1      	ldr	r3, [pc, #708]	; (80052f0 <HAL_RCC_OscConfig+0x810>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0ec      	beq.n	800500e <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d02c      	beq.n	800509a <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8005040:	4bac      	ldr	r3, [pc, #688]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 8005042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005052:	49a8      	ldr	r1, [pc, #672]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 0304 	and.w	r3, r3, #4
 8005062:	2b00      	cmp	r3, #0
 8005064:	d010      	beq.n	8005088 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005066:	4ba3      	ldr	r3, [pc, #652]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 8005068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506c:	4aa1      	ldr	r2, [pc, #644]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 800506e:	f043 0304 	orr.w	r3, r3, #4
 8005072:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005076:	4b9f      	ldr	r3, [pc, #636]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 8005078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507c:	4a9d      	ldr	r2, [pc, #628]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 800507e:	f043 0301 	orr.w	r3, r3, #1
 8005082:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005086:	e018      	b.n	80050ba <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005088:	4b9a      	ldr	r3, [pc, #616]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 800508a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508e:	4a99      	ldr	r2, [pc, #612]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 8005090:	f043 0301 	orr.w	r3, r3, #1
 8005094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005098:	e00f      	b.n	80050ba <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800509a:	4b96      	ldr	r3, [pc, #600]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 800509c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a0:	4a94      	ldr	r2, [pc, #592]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 80050a2:	f023 0301 	bic.w	r3, r3, #1
 80050a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80050aa:	4b92      	ldr	r3, [pc, #584]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 80050ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b0:	4a90      	ldr	r2, [pc, #576]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 80050b2:	f023 0304 	bic.w	r3, r3, #4
 80050b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d016      	beq.n	80050f0 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c2:	f7fd fbd5 	bl	8002870 <HAL_GetTick>
 80050c6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050c8:	e00a      	b.n	80050e0 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ca:	f7fd fbd1 	bl	8002870 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d8:	4293      	cmp	r3, r2
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e15f      	b.n	80053a0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050e0:	4b84      	ldr	r3, [pc, #528]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 80050e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0ed      	beq.n	80050ca <HAL_RCC_OscConfig+0x5ea>
 80050ee:	e01d      	b.n	800512c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f0:	f7fd fbbe 	bl	8002870 <HAL_GetTick>
 80050f4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050f6:	e00a      	b.n	800510e <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f8:	f7fd fbba 	bl	8002870 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	f241 3288 	movw	r2, #5000	; 0x1388
 8005106:	4293      	cmp	r3, r2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e148      	b.n	80053a0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800510e:	4b79      	ldr	r3, [pc, #484]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 8005110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1ed      	bne.n	80050f8 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800511c:	4b75      	ldr	r3, [pc, #468]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 800511e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005122:	4a74      	ldr	r2, [pc, #464]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 8005124:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800512c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005130:	2b01      	cmp	r3, #1
 8005132:	d105      	bne.n	8005140 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005134:	4b6f      	ldr	r3, [pc, #444]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 8005136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005138:	4a6e      	ldr	r2, [pc, #440]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 800513a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800513e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0320 	and.w	r3, r3, #32
 8005148:	2b00      	cmp	r3, #0
 800514a:	d03c      	beq.n	80051c6 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005150:	2b00      	cmp	r3, #0
 8005152:	d01c      	beq.n	800518e <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005154:	4b67      	ldr	r3, [pc, #412]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 8005156:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800515a:	4a66      	ldr	r2, [pc, #408]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 800515c:	f043 0301 	orr.w	r3, r3, #1
 8005160:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005164:	f7fd fb84 	bl	8002870 <HAL_GetTick>
 8005168:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800516c:	f7fd fb80 	bl	8002870 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e110      	b.n	80053a0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800517e:	4b5d      	ldr	r3, [pc, #372]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 8005180:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0ef      	beq.n	800516c <HAL_RCC_OscConfig+0x68c>
 800518c:	e01b      	b.n	80051c6 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800518e:	4b59      	ldr	r3, [pc, #356]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 8005190:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005194:	4a57      	ldr	r2, [pc, #348]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 8005196:	f023 0301 	bic.w	r3, r3, #1
 800519a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800519e:	f7fd fb67 	bl	8002870 <HAL_GetTick>
 80051a2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051a4:	e008      	b.n	80051b8 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051a6:	f7fd fb63 	bl	8002870 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e0f3      	b.n	80053a0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051b8:	4b4e      	ldr	r3, [pc, #312]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 80051ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1ef      	bne.n	80051a6 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 80e7 	beq.w	800539e <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	f040 80b7 	bne.w	8005348 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80051da:	4b46      	ldr	r3, [pc, #280]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	f003 0203 	and.w	r2, r3, #3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d124      	bne.n	8005238 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f8:	3b01      	subs	r3, #1
 80051fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d11b      	bne.n	8005238 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800520c:	429a      	cmp	r2, r3
 800520e:	d113      	bne.n	8005238 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521a:	085b      	lsrs	r3, r3, #1
 800521c:	3b01      	subs	r3, #1
 800521e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005220:	429a      	cmp	r2, r3
 8005222:	d109      	bne.n	8005238 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	085b      	lsrs	r3, r3, #1
 8005230:	3b01      	subs	r3, #1
 8005232:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005234:	429a      	cmp	r2, r3
 8005236:	d061      	beq.n	80052fc <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	2b0c      	cmp	r3, #12
 800523c:	d056      	beq.n	80052ec <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800523e:	4b2d      	ldr	r3, [pc, #180]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a2c      	ldr	r2, [pc, #176]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 8005244:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005248:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800524a:	f7fd fb11 	bl	8002870 <HAL_GetTick>
 800524e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005250:	e008      	b.n	8005264 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005252:	f7fd fb0d 	bl	8002870 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d901      	bls.n	8005264 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e09d      	b.n	80053a0 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005264:	4b23      	ldr	r3, [pc, #140]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1f0      	bne.n	8005252 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005270:	4b20      	ldr	r3, [pc, #128]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 8005272:	68da      	ldr	r2, [r3, #12]
 8005274:	4b20      	ldr	r3, [pc, #128]	; (80052f8 <HAL_RCC_OscConfig+0x818>)
 8005276:	4013      	ands	r3, r2
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005280:	3a01      	subs	r2, #1
 8005282:	0112      	lsls	r2, r2, #4
 8005284:	4311      	orrs	r1, r2
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800528a:	0212      	lsls	r2, r2, #8
 800528c:	4311      	orrs	r1, r2
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005292:	0852      	lsrs	r2, r2, #1
 8005294:	3a01      	subs	r2, #1
 8005296:	0552      	lsls	r2, r2, #21
 8005298:	4311      	orrs	r1, r2
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800529e:	0852      	lsrs	r2, r2, #1
 80052a0:	3a01      	subs	r2, #1
 80052a2:	0652      	lsls	r2, r2, #25
 80052a4:	430a      	orrs	r2, r1
 80052a6:	4913      	ldr	r1, [pc, #76]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80052ac:	4b11      	ldr	r3, [pc, #68]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a10      	ldr	r2, [pc, #64]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 80052b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052b8:	4b0e      	ldr	r3, [pc, #56]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	4a0d      	ldr	r2, [pc, #52]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 80052be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80052c4:	f7fd fad4 	bl	8002870 <HAL_GetTick>
 80052c8:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052cc:	f7fd fad0 	bl	8002870 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e060      	b.n	80053a0 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052de:	4b05      	ldr	r3, [pc, #20]	; (80052f4 <HAL_RCC_OscConfig+0x814>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0f0      	beq.n	80052cc <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052ea:	e058      	b.n	800539e <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e057      	b.n	80053a0 <HAL_RCC_OscConfig+0x8c0>
 80052f0:	40007000 	.word	0x40007000
 80052f4:	40021000 	.word	0x40021000
 80052f8:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052fc:	4b2a      	ldr	r3, [pc, #168]	; (80053a8 <HAL_RCC_OscConfig+0x8c8>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d14a      	bne.n	800539e <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005308:	4b27      	ldr	r3, [pc, #156]	; (80053a8 <HAL_RCC_OscConfig+0x8c8>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a26      	ldr	r2, [pc, #152]	; (80053a8 <HAL_RCC_OscConfig+0x8c8>)
 800530e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005312:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005314:	4b24      	ldr	r3, [pc, #144]	; (80053a8 <HAL_RCC_OscConfig+0x8c8>)
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	4a23      	ldr	r2, [pc, #140]	; (80053a8 <HAL_RCC_OscConfig+0x8c8>)
 800531a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800531e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005320:	f7fd faa6 	bl	8002870 <HAL_GetTick>
 8005324:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005328:	f7fd faa2 	bl	8002870 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e032      	b.n	80053a0 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800533a:	4b1b      	ldr	r3, [pc, #108]	; (80053a8 <HAL_RCC_OscConfig+0x8c8>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d0f0      	beq.n	8005328 <HAL_RCC_OscConfig+0x848>
 8005346:	e02a      	b.n	800539e <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	2b0c      	cmp	r3, #12
 800534c:	d025      	beq.n	800539a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800534e:	4b16      	ldr	r3, [pc, #88]	; (80053a8 <HAL_RCC_OscConfig+0x8c8>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a15      	ldr	r2, [pc, #84]	; (80053a8 <HAL_RCC_OscConfig+0x8c8>)
 8005354:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005358:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800535a:	4b13      	ldr	r3, [pc, #76]	; (80053a8 <HAL_RCC_OscConfig+0x8c8>)
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	4a12      	ldr	r2, [pc, #72]	; (80053a8 <HAL_RCC_OscConfig+0x8c8>)
 8005360:	f023 0303 	bic.w	r3, r3, #3
 8005364:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8005366:	4b10      	ldr	r3, [pc, #64]	; (80053a8 <HAL_RCC_OscConfig+0x8c8>)
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	4a0f      	ldr	r2, [pc, #60]	; (80053a8 <HAL_RCC_OscConfig+0x8c8>)
 800536c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005370:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005372:	f7fd fa7d 	bl	8002870 <HAL_GetTick>
 8005376:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005378:	e008      	b.n	800538c <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800537a:	f7fd fa79 	bl	8002870 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e009      	b.n	80053a0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800538c:	4b06      	ldr	r3, [pc, #24]	; (80053a8 <HAL_RCC_OscConfig+0x8c8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1f0      	bne.n	800537a <HAL_RCC_OscConfig+0x89a>
 8005398:	e001      	b.n	800539e <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e000      	b.n	80053a0 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3728      	adds	r7, #40	; 0x28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40021000 	.word	0x40021000

080053ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e0c8      	b.n	8005552 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053c0:	4b66      	ldr	r3, [pc, #408]	; (800555c <HAL_RCC_ClockConfig+0x1b0>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d910      	bls.n	80053f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ce:	4b63      	ldr	r3, [pc, #396]	; (800555c <HAL_RCC_ClockConfig+0x1b0>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f023 0207 	bic.w	r2, r3, #7
 80053d6:	4961      	ldr	r1, [pc, #388]	; (800555c <HAL_RCC_ClockConfig+0x1b0>)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	4313      	orrs	r3, r2
 80053dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053de:	4b5f      	ldr	r3, [pc, #380]	; (800555c <HAL_RCC_ClockConfig+0x1b0>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0307 	and.w	r3, r3, #7
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d001      	beq.n	80053f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e0b0      	b.n	8005552 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d04c      	beq.n	8005496 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b03      	cmp	r3, #3
 8005402:	d107      	bne.n	8005414 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005404:	4b56      	ldr	r3, [pc, #344]	; (8005560 <HAL_RCC_ClockConfig+0x1b4>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d121      	bne.n	8005454 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e09e      	b.n	8005552 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b02      	cmp	r3, #2
 800541a:	d107      	bne.n	800542c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800541c:	4b50      	ldr	r3, [pc, #320]	; (8005560 <HAL_RCC_ClockConfig+0x1b4>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d115      	bne.n	8005454 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e092      	b.n	8005552 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d107      	bne.n	8005444 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005434:	4b4a      	ldr	r3, [pc, #296]	; (8005560 <HAL_RCC_ClockConfig+0x1b4>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d109      	bne.n	8005454 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e086      	b.n	8005552 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005444:	4b46      	ldr	r3, [pc, #280]	; (8005560 <HAL_RCC_ClockConfig+0x1b4>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e07e      	b.n	8005552 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005454:	4b42      	ldr	r3, [pc, #264]	; (8005560 <HAL_RCC_ClockConfig+0x1b4>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f023 0203 	bic.w	r2, r3, #3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	493f      	ldr	r1, [pc, #252]	; (8005560 <HAL_RCC_ClockConfig+0x1b4>)
 8005462:	4313      	orrs	r3, r2
 8005464:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005466:	f7fd fa03 	bl	8002870 <HAL_GetTick>
 800546a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546c:	e00a      	b.n	8005484 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800546e:	f7fd f9ff 	bl	8002870 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	f241 3288 	movw	r2, #5000	; 0x1388
 800547c:	4293      	cmp	r3, r2
 800547e:	d901      	bls.n	8005484 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e066      	b.n	8005552 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005484:	4b36      	ldr	r3, [pc, #216]	; (8005560 <HAL_RCC_ClockConfig+0x1b4>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f003 020c 	and.w	r2, r3, #12
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	429a      	cmp	r2, r3
 8005494:	d1eb      	bne.n	800546e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d008      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054a2:	4b2f      	ldr	r3, [pc, #188]	; (8005560 <HAL_RCC_ClockConfig+0x1b4>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	492c      	ldr	r1, [pc, #176]	; (8005560 <HAL_RCC_ClockConfig+0x1b4>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054b4:	4b29      	ldr	r3, [pc, #164]	; (800555c <HAL_RCC_ClockConfig+0x1b0>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d210      	bcs.n	80054e4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054c2:	4b26      	ldr	r3, [pc, #152]	; (800555c <HAL_RCC_ClockConfig+0x1b0>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f023 0207 	bic.w	r2, r3, #7
 80054ca:	4924      	ldr	r1, [pc, #144]	; (800555c <HAL_RCC_ClockConfig+0x1b0>)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054d2:	4b22      	ldr	r3, [pc, #136]	; (800555c <HAL_RCC_ClockConfig+0x1b0>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	683a      	ldr	r2, [r7, #0]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d001      	beq.n	80054e4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e036      	b.n	8005552 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d008      	beq.n	8005502 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054f0:	4b1b      	ldr	r3, [pc, #108]	; (8005560 <HAL_RCC_ClockConfig+0x1b4>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	4918      	ldr	r1, [pc, #96]	; (8005560 <HAL_RCC_ClockConfig+0x1b4>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0308 	and.w	r3, r3, #8
 800550a:	2b00      	cmp	r3, #0
 800550c:	d009      	beq.n	8005522 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800550e:	4b14      	ldr	r3, [pc, #80]	; (8005560 <HAL_RCC_ClockConfig+0x1b4>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	4910      	ldr	r1, [pc, #64]	; (8005560 <HAL_RCC_ClockConfig+0x1b4>)
 800551e:	4313      	orrs	r3, r2
 8005520:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005522:	f000 f825 	bl	8005570 <HAL_RCC_GetSysClockFreq>
 8005526:	4601      	mov	r1, r0
 8005528:	4b0d      	ldr	r3, [pc, #52]	; (8005560 <HAL_RCC_ClockConfig+0x1b4>)
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	091b      	lsrs	r3, r3, #4
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	4a0c      	ldr	r2, [pc, #48]	; (8005564 <HAL_RCC_ClockConfig+0x1b8>)
 8005534:	5cd3      	ldrb	r3, [r2, r3]
 8005536:	f003 031f 	and.w	r3, r3, #31
 800553a:	fa21 f303 	lsr.w	r3, r1, r3
 800553e:	4a0a      	ldr	r2, [pc, #40]	; (8005568 <HAL_RCC_ClockConfig+0x1bc>)
 8005540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005542:	4b0a      	ldr	r3, [pc, #40]	; (800556c <HAL_RCC_ClockConfig+0x1c0>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4618      	mov	r0, r3
 8005548:	f7fd f946 	bl	80027d8 <HAL_InitTick>
 800554c:	4603      	mov	r3, r0
 800554e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005550:	7afb      	ldrb	r3, [r7, #11]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	40022000 	.word	0x40022000
 8005560:	40021000 	.word	0x40021000
 8005564:	0800ad28 	.word	0x0800ad28
 8005568:	20000000 	.word	0x20000000
 800556c:	20000004 	.word	0x20000004

08005570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005570:	b480      	push	{r7}
 8005572:	b089      	sub	sp, #36	; 0x24
 8005574:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005576:	2300      	movs	r3, #0
 8005578:	61fb      	str	r3, [r7, #28]
 800557a:	2300      	movs	r3, #0
 800557c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800557e:	4b3d      	ldr	r3, [pc, #244]	; (8005674 <HAL_RCC_GetSysClockFreq+0x104>)
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f003 030c 	and.w	r3, r3, #12
 8005586:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005588:	4b3a      	ldr	r3, [pc, #232]	; (8005674 <HAL_RCC_GetSysClockFreq+0x104>)
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f003 0303 	and.w	r3, r3, #3
 8005590:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d005      	beq.n	80055a4 <HAL_RCC_GetSysClockFreq+0x34>
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	2b0c      	cmp	r3, #12
 800559c:	d121      	bne.n	80055e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d11e      	bne.n	80055e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80055a4:	4b33      	ldr	r3, [pc, #204]	; (8005674 <HAL_RCC_GetSysClockFreq+0x104>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d107      	bne.n	80055c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80055b0:	4b30      	ldr	r3, [pc, #192]	; (8005674 <HAL_RCC_GetSysClockFreq+0x104>)
 80055b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055b6:	0a1b      	lsrs	r3, r3, #8
 80055b8:	f003 030f 	and.w	r3, r3, #15
 80055bc:	61fb      	str	r3, [r7, #28]
 80055be:	e005      	b.n	80055cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80055c0:	4b2c      	ldr	r3, [pc, #176]	; (8005674 <HAL_RCC_GetSysClockFreq+0x104>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	091b      	lsrs	r3, r3, #4
 80055c6:	f003 030f 	and.w	r3, r3, #15
 80055ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80055cc:	4a2a      	ldr	r2, [pc, #168]	; (8005678 <HAL_RCC_GetSysClockFreq+0x108>)
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10d      	bne.n	80055f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055e0:	e00a      	b.n	80055f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	2b04      	cmp	r3, #4
 80055e6:	d102      	bne.n	80055ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055e8:	4b24      	ldr	r3, [pc, #144]	; (800567c <HAL_RCC_GetSysClockFreq+0x10c>)
 80055ea:	61bb      	str	r3, [r7, #24]
 80055ec:	e004      	b.n	80055f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d101      	bne.n	80055f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055f4:	4b22      	ldr	r3, [pc, #136]	; (8005680 <HAL_RCC_GetSysClockFreq+0x110>)
 80055f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	2b0c      	cmp	r3, #12
 80055fc:	d133      	bne.n	8005666 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055fe:	4b1d      	ldr	r3, [pc, #116]	; (8005674 <HAL_RCC_GetSysClockFreq+0x104>)
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2b02      	cmp	r3, #2
 800560c:	d002      	beq.n	8005614 <HAL_RCC_GetSysClockFreq+0xa4>
 800560e:	2b03      	cmp	r3, #3
 8005610:	d003      	beq.n	800561a <HAL_RCC_GetSysClockFreq+0xaa>
 8005612:	e005      	b.n	8005620 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005614:	4b19      	ldr	r3, [pc, #100]	; (800567c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005616:	617b      	str	r3, [r7, #20]
      break;
 8005618:	e005      	b.n	8005626 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800561a:	4b19      	ldr	r3, [pc, #100]	; (8005680 <HAL_RCC_GetSysClockFreq+0x110>)
 800561c:	617b      	str	r3, [r7, #20]
      break;
 800561e:	e002      	b.n	8005626 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	617b      	str	r3, [r7, #20]
      break;
 8005624:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005626:	4b13      	ldr	r3, [pc, #76]	; (8005674 <HAL_RCC_GetSysClockFreq+0x104>)
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	091b      	lsrs	r3, r3, #4
 800562c:	f003 0307 	and.w	r3, r3, #7
 8005630:	3301      	adds	r3, #1
 8005632:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005634:	4b0f      	ldr	r3, [pc, #60]	; (8005674 <HAL_RCC_GetSysClockFreq+0x104>)
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	0a1b      	lsrs	r3, r3, #8
 800563a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	fb02 f203 	mul.w	r2, r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	fbb2 f3f3 	udiv	r3, r2, r3
 800564a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800564c:	4b09      	ldr	r3, [pc, #36]	; (8005674 <HAL_RCC_GetSysClockFreq+0x104>)
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	0e5b      	lsrs	r3, r3, #25
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	3301      	adds	r3, #1
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	fbb2 f3f3 	udiv	r3, r2, r3
 8005664:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005666:	69bb      	ldr	r3, [r7, #24]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3724      	adds	r7, #36	; 0x24
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	40021000 	.word	0x40021000
 8005678:	0800ad40 	.word	0x0800ad40
 800567c:	00f42400 	.word	0x00f42400
 8005680:	007a1200 	.word	0x007a1200

08005684 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005688:	4b03      	ldr	r3, [pc, #12]	; (8005698 <HAL_RCC_GetHCLKFreq+0x14>)
 800568a:	681b      	ldr	r3, [r3, #0]
}
 800568c:	4618      	mov	r0, r3
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	20000000 	.word	0x20000000

0800569c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80056a0:	f7ff fff0 	bl	8005684 <HAL_RCC_GetHCLKFreq>
 80056a4:	4601      	mov	r1, r0
 80056a6:	4b06      	ldr	r3, [pc, #24]	; (80056c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	0a1b      	lsrs	r3, r3, #8
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	4a04      	ldr	r2, [pc, #16]	; (80056c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80056b2:	5cd3      	ldrb	r3, [r2, r3]
 80056b4:	f003 031f 	and.w	r3, r3, #31
 80056b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80056bc:	4618      	mov	r0, r3
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	40021000 	.word	0x40021000
 80056c4:	0800ad38 	.word	0x0800ad38

080056c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80056cc:	f7ff ffda 	bl	8005684 <HAL_RCC_GetHCLKFreq>
 80056d0:	4601      	mov	r1, r0
 80056d2:	4b06      	ldr	r3, [pc, #24]	; (80056ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	0adb      	lsrs	r3, r3, #11
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	4a04      	ldr	r2, [pc, #16]	; (80056f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056de:	5cd3      	ldrb	r3, [r2, r3]
 80056e0:	f003 031f 	and.w	r3, r3, #31
 80056e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	40021000 	.word	0x40021000
 80056f0:	0800ad38 	.word	0x0800ad38

080056f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80056fc:	2300      	movs	r3, #0
 80056fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005700:	4b2a      	ldr	r3, [pc, #168]	; (80057ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800570c:	f7ff f974 	bl	80049f8 <HAL_PWREx_GetVoltageRange>
 8005710:	6178      	str	r0, [r7, #20]
 8005712:	e014      	b.n	800573e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005714:	4b25      	ldr	r3, [pc, #148]	; (80057ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005718:	4a24      	ldr	r2, [pc, #144]	; (80057ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800571a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800571e:	6593      	str	r3, [r2, #88]	; 0x58
 8005720:	4b22      	ldr	r3, [pc, #136]	; (80057ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800572c:	f7ff f964 	bl	80049f8 <HAL_PWREx_GetVoltageRange>
 8005730:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005732:	4b1e      	ldr	r3, [pc, #120]	; (80057ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005736:	4a1d      	ldr	r2, [pc, #116]	; (80057ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800573c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005744:	d10b      	bne.n	800575e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b80      	cmp	r3, #128	; 0x80
 800574a:	d919      	bls.n	8005780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2ba0      	cmp	r3, #160	; 0xa0
 8005750:	d902      	bls.n	8005758 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005752:	2302      	movs	r3, #2
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	e013      	b.n	8005780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005758:	2301      	movs	r3, #1
 800575a:	613b      	str	r3, [r7, #16]
 800575c:	e010      	b.n	8005780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b80      	cmp	r3, #128	; 0x80
 8005762:	d902      	bls.n	800576a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005764:	2303      	movs	r3, #3
 8005766:	613b      	str	r3, [r7, #16]
 8005768:	e00a      	b.n	8005780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b80      	cmp	r3, #128	; 0x80
 800576e:	d102      	bne.n	8005776 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005770:	2302      	movs	r3, #2
 8005772:	613b      	str	r3, [r7, #16]
 8005774:	e004      	b.n	8005780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b70      	cmp	r3, #112	; 0x70
 800577a:	d101      	bne.n	8005780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800577c:	2301      	movs	r3, #1
 800577e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005780:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f023 0207 	bic.w	r2, r3, #7
 8005788:	4909      	ldr	r1, [pc, #36]	; (80057b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	4313      	orrs	r3, r2
 800578e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005790:	4b07      	ldr	r3, [pc, #28]	; (80057b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0307 	and.w	r3, r3, #7
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	429a      	cmp	r2, r3
 800579c:	d001      	beq.n	80057a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e000      	b.n	80057a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3718      	adds	r7, #24
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	40021000 	.word	0x40021000
 80057b0:	40022000 	.word	0x40022000

080057b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057bc:	2300      	movs	r3, #0
 80057be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057c0:	2300      	movs	r3, #0
 80057c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 809e 	beq.w	800590e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057d2:	2300      	movs	r3, #0
 80057d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057d6:	4b46      	ldr	r3, [pc, #280]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80057d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80057e2:	2301      	movs	r3, #1
 80057e4:	e000      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80057e6:	2300      	movs	r3, #0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00d      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057ec:	4b40      	ldr	r3, [pc, #256]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80057ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f0:	4a3f      	ldr	r2, [pc, #252]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80057f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057f6:	6593      	str	r3, [r2, #88]	; 0x58
 80057f8:	4b3d      	ldr	r3, [pc, #244]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80057fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005800:	60bb      	str	r3, [r7, #8]
 8005802:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005804:	2301      	movs	r3, #1
 8005806:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005808:	4b3a      	ldr	r3, [pc, #232]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a39      	ldr	r2, [pc, #228]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800580e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005812:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005814:	f7fd f82c 	bl	8002870 <HAL_GetTick>
 8005818:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800581a:	e009      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800581c:	f7fd f828 	bl	8002870 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d902      	bls.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	74fb      	strb	r3, [r7, #19]
        break;
 800582e:	e005      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005830:	4b30      	ldr	r3, [pc, #192]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005838:	2b00      	cmp	r3, #0
 800583a:	d0ef      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 800583c:	7cfb      	ldrb	r3, [r7, #19]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d15a      	bne.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005842:	4b2b      	ldr	r3, [pc, #172]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005848:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800584c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d01e      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	429a      	cmp	r2, r3
 800585c:	d019      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800585e:	4b24      	ldr	r3, [pc, #144]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005868:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800586a:	4b21      	ldr	r3, [pc, #132]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800586c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005870:	4a1f      	ldr	r2, [pc, #124]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005876:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800587a:	4b1d      	ldr	r3, [pc, #116]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800587c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005880:	4a1b      	ldr	r2, [pc, #108]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800588a:	4a19      	ldr	r2, [pc, #100]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d016      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589c:	f7fc ffe8 	bl	8002870 <HAL_GetTick>
 80058a0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058a2:	e00b      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058a4:	f7fc ffe4 	bl	8002870 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d902      	bls.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	74fb      	strb	r3, [r7, #19]
            break;
 80058ba:	e006      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058bc:	4b0c      	ldr	r3, [pc, #48]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80058be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d0ec      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80058ca:	7cfb      	ldrb	r3, [r7, #19]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10b      	bne.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058d0:	4b07      	ldr	r3, [pc, #28]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80058d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058de:	4904      	ldr	r1, [pc, #16]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80058e6:	e009      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058e8:	7cfb      	ldrb	r3, [r7, #19]
 80058ea:	74bb      	strb	r3, [r7, #18]
 80058ec:	e006      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x148>
 80058ee:	bf00      	nop
 80058f0:	40021000 	.word	0x40021000
 80058f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f8:	7cfb      	ldrb	r3, [r7, #19]
 80058fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058fc:	7c7b      	ldrb	r3, [r7, #17]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d105      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005902:	4b6e      	ldr	r3, [pc, #440]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005906:	4a6d      	ldr	r2, [pc, #436]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800590c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00a      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800591a:	4b68      	ldr	r3, [pc, #416]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800591c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005920:	f023 0203 	bic.w	r2, r3, #3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	4964      	ldr	r1, [pc, #400]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800592a:	4313      	orrs	r3, r2
 800592c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00a      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800593c:	4b5f      	ldr	r3, [pc, #380]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800593e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005942:	f023 020c 	bic.w	r2, r3, #12
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	495c      	ldr	r1, [pc, #368]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800594c:	4313      	orrs	r3, r2
 800594e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0304 	and.w	r3, r3, #4
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00a      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800595e:	4b57      	ldr	r3, [pc, #348]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005964:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	4953      	ldr	r1, [pc, #332]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800596e:	4313      	orrs	r3, r2
 8005970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0320 	and.w	r3, r3, #32
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00a      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005980:	4b4e      	ldr	r3, [pc, #312]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005986:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	494b      	ldr	r1, [pc, #300]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005990:	4313      	orrs	r3, r2
 8005992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00a      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059a2:	4b46      	ldr	r3, [pc, #280]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	4942      	ldr	r1, [pc, #264]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00a      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059c4:	4b3d      	ldr	r3, [pc, #244]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	493a      	ldr	r1, [pc, #232]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00a      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059e6:	4b35      	ldr	r3, [pc, #212]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	4931      	ldr	r1, [pc, #196]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00a      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a08:	4b2c      	ldr	r3, [pc, #176]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	4929      	ldr	r1, [pc, #164]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a2a:	4b24      	ldr	r3, [pc, #144]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	4920      	ldr	r1, [pc, #128]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d015      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a4c:	4b1b      	ldr	r3, [pc, #108]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5a:	4918      	ldr	r1, [pc, #96]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a6a:	d105      	bne.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a6c:	4b13      	ldr	r3, [pc, #76]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	4a12      	ldr	r2, [pc, #72]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a76:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d015      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a84:	4b0d      	ldr	r3, [pc, #52]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a92:	490a      	ldr	r1, [pc, #40]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005aa2:	d105      	bne.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005aa4:	4b05      	ldr	r3, [pc, #20]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	4a04      	ldr	r2, [pc, #16]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005aaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005ab0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	40021000 	.word	0x40021000

08005ac0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d101      	bne.n	8005ad2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e07c      	b.n	8005bcc <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d106      	bne.n	8005af2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7fc fcd9 	bl	80024a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2202      	movs	r2, #2
 8005af6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b08:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b12:	d902      	bls.n	8005b1a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b14:	2300      	movs	r3, #0
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	e002      	b.n	8005b20 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b1e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005b28:	d007      	beq.n	8005b3a <HAL_SPI_Init+0x7a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b32:	d002      	beq.n	8005b3a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10b      	bne.n	8005b5a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b4a:	d903      	bls.n	8005b54 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	631a      	str	r2, [r3, #48]	; 0x30
 8005b52:	e002      	b.n	8005b5a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	431a      	orrs	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	431a      	orrs	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	ea42 0103 	orr.w	r1, r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	0c1b      	lsrs	r3, r3, #16
 8005b9a:	f003 0204 	and.w	r2, r3, #4
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	ea42 0103 	orr.w	r1, r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	603b      	str	r3, [r7, #0]
 8005be0:	4613      	mov	r3, r2
 8005be2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005be4:	2300      	movs	r3, #0
 8005be6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d101      	bne.n	8005bf6 <HAL_SPI_Transmit+0x22>
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	e150      	b.n	8005e98 <HAL_SPI_Transmit+0x2c4>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bfe:	f7fc fe37 	bl	8002870 <HAL_GetTick>
 8005c02:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c04:	88fb      	ldrh	r3, [r7, #6]
 8005c06:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d002      	beq.n	8005c1a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c14:	2302      	movs	r3, #2
 8005c16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c18:	e135      	b.n	8005e86 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <HAL_SPI_Transmit+0x52>
 8005c20:	88fb      	ldrh	r3, [r7, #6]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d102      	bne.n	8005c2c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c2a:	e12c      	b.n	8005e86 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2203      	movs	r2, #3
 8005c30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	88fa      	ldrh	r2, [r7, #6]
 8005c44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	88fa      	ldrh	r2, [r7, #6]
 8005c4a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c76:	d107      	bne.n	8005c88 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c86:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c92:	2b40      	cmp	r3, #64	; 0x40
 8005c94:	d007      	beq.n	8005ca6 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ca4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cae:	d94b      	bls.n	8005d48 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <HAL_SPI_Transmit+0xea>
 8005cb8:	8afb      	ldrh	r3, [r7, #22]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d13e      	bne.n	8005d3c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc2:	881a      	ldrh	r2, [r3, #0]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cce:	1c9a      	adds	r2, r3, #2
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ce2:	e02b      	b.n	8005d3c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d112      	bne.n	8005d18 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf6:	881a      	ldrh	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d02:	1c9a      	adds	r2, r3, #2
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d16:	e011      	b.n	8005d3c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d18:	f7fc fdaa 	bl	8002870 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d803      	bhi.n	8005d30 <HAL_SPI_Transmit+0x15c>
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2e:	d102      	bne.n	8005d36 <HAL_SPI_Transmit+0x162>
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d102      	bne.n	8005d3c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d3a:	e0a4      	b.n	8005e86 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1ce      	bne.n	8005ce4 <HAL_SPI_Transmit+0x110>
 8005d46:	e07c      	b.n	8005e42 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <HAL_SPI_Transmit+0x182>
 8005d50:	8afb      	ldrh	r3, [r7, #22]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d170      	bne.n	8005e38 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d912      	bls.n	8005d86 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d64:	881a      	ldrh	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d70:	1c9a      	adds	r2, r3, #2
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	3b02      	subs	r3, #2
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d84:	e058      	b.n	8005e38 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	330c      	adds	r3, #12
 8005d90:	7812      	ldrb	r2, [r2, #0]
 8005d92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005dac:	e044      	b.n	8005e38 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d12b      	bne.n	8005e14 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d912      	bls.n	8005dec <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dca:	881a      	ldrh	r2, [r3, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd6:	1c9a      	adds	r2, r3, #2
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	3b02      	subs	r3, #2
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dea:	e025      	b.n	8005e38 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	330c      	adds	r3, #12
 8005df6:	7812      	ldrb	r2, [r2, #0]
 8005df8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e12:	e011      	b.n	8005e38 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e14:	f7fc fd2c 	bl	8002870 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d803      	bhi.n	8005e2c <HAL_SPI_Transmit+0x258>
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2a:	d102      	bne.n	8005e32 <HAL_SPI_Transmit+0x25e>
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d102      	bne.n	8005e38 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e36:	e026      	b.n	8005e86 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1b5      	bne.n	8005dae <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e42:	69ba      	ldr	r2, [r7, #24]
 8005e44:	6839      	ldr	r1, [r7, #0]
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f000 fc94 	bl	8006774 <SPI_EndRxTxTransaction>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2220      	movs	r2, #32
 8005e56:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10a      	bne.n	8005e76 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e60:	2300      	movs	r3, #0
 8005e62:	613b      	str	r3, [r7, #16]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	613b      	str	r3, [r7, #16]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	613b      	str	r3, [r7, #16]
 8005e74:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d002      	beq.n	8005e84 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	77fb      	strb	r3, [r7, #31]
 8005e82:	e000      	b.n	8005e86 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8005e84:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e96:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3720      	adds	r7, #32
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af02      	add	r7, sp, #8
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	603b      	str	r3, [r7, #0]
 8005eac:	4613      	mov	r3, r2
 8005eae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ebc:	d112      	bne.n	8005ee4 <HAL_SPI_Receive+0x44>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10e      	bne.n	8005ee4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2204      	movs	r2, #4
 8005eca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005ece:	88fa      	ldrh	r2, [r7, #6]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	68b9      	ldr	r1, [r7, #8]
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 f908 	bl	80060f0 <HAL_SPI_TransmitReceive>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	e101      	b.n	80060e8 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d101      	bne.n	8005ef2 <HAL_SPI_Receive+0x52>
 8005eee:	2302      	movs	r3, #2
 8005ef0:	e0fa      	b.n	80060e8 <HAL_SPI_Receive+0x248>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005efa:	f7fc fcb9 	bl	8002870 <HAL_GetTick>
 8005efe:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d002      	beq.n	8005f12 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f10:	e0e1      	b.n	80060d6 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d002      	beq.n	8005f1e <HAL_SPI_Receive+0x7e>
 8005f18:	88fb      	ldrh	r3, [r7, #6]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d102      	bne.n	8005f24 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f22:	e0d8      	b.n	80060d6 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2204      	movs	r2, #4
 8005f28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	88fa      	ldrh	r2, [r7, #6]
 8005f3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	88fa      	ldrh	r2, [r7, #6]
 8005f44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f6e:	d908      	bls.n	8005f82 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f7e:	605a      	str	r2, [r3, #4]
 8005f80:	e007      	b.n	8005f92 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f90:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f9a:	d107      	bne.n	8005fac <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005faa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb6:	2b40      	cmp	r3, #64	; 0x40
 8005fb8:	d007      	beq.n	8005fca <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fc8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fd2:	d867      	bhi.n	80060a4 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005fd4:	e030      	b.n	8006038 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d117      	bne.n	8006014 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f103 020c 	add.w	r2, r3, #12
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff0:	7812      	ldrb	r2, [r2, #0]
 8005ff2:	b2d2      	uxtb	r2, r2
 8005ff4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffa:	1c5a      	adds	r2, r3, #1
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006006:	b29b      	uxth	r3, r3
 8006008:	3b01      	subs	r3, #1
 800600a:	b29a      	uxth	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006012:	e011      	b.n	8006038 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006014:	f7fc fc2c 	bl	8002870 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	429a      	cmp	r2, r3
 8006022:	d803      	bhi.n	800602c <HAL_SPI_Receive+0x18c>
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602a:	d102      	bne.n	8006032 <HAL_SPI_Receive+0x192>
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d102      	bne.n	8006038 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006036:	e04e      	b.n	80060d6 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800603e:	b29b      	uxth	r3, r3
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1c8      	bne.n	8005fd6 <HAL_SPI_Receive+0x136>
 8006044:	e034      	b.n	80060b0 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	2b01      	cmp	r3, #1
 8006052:	d115      	bne.n	8006080 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605e:	b292      	uxth	r2, r2
 8006060:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	1c9a      	adds	r2, r3, #2
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006072:	b29b      	uxth	r3, r3
 8006074:	3b01      	subs	r3, #1
 8006076:	b29a      	uxth	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800607e:	e011      	b.n	80060a4 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006080:	f7fc fbf6 	bl	8002870 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	429a      	cmp	r2, r3
 800608e:	d803      	bhi.n	8006098 <HAL_SPI_Receive+0x1f8>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006096:	d102      	bne.n	800609e <HAL_SPI_Receive+0x1fe>
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d102      	bne.n	80060a4 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80060a2:	e018      	b.n	80060d6 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1ca      	bne.n	8006046 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	6839      	ldr	r1, [r7, #0]
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 fb05 	bl	80066c4 <SPI_EndRxTransaction>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d002      	beq.n	80060c6 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2220      	movs	r2, #32
 80060c4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d002      	beq.n	80060d4 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	75fb      	strb	r3, [r7, #23]
 80060d2:	e000      	b.n	80060d6 <HAL_SPI_Receive+0x236>
  }

error :
 80060d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80060e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3718      	adds	r7, #24
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08a      	sub	sp, #40	; 0x28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80060fe:	2301      	movs	r3, #1
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006102:	2300      	movs	r3, #0
 8006104:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800610e:	2b01      	cmp	r3, #1
 8006110:	d101      	bne.n	8006116 <HAL_SPI_TransmitReceive+0x26>
 8006112:	2302      	movs	r3, #2
 8006114:	e1fb      	b.n	800650e <HAL_SPI_TransmitReceive+0x41e>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800611e:	f7fc fba7 	bl	8002870 <HAL_GetTick>
 8006122:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800612a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006132:	887b      	ldrh	r3, [r7, #2]
 8006134:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006136:	887b      	ldrh	r3, [r7, #2]
 8006138:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800613a:	7efb      	ldrb	r3, [r7, #27]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d00e      	beq.n	800615e <HAL_SPI_TransmitReceive+0x6e>
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006146:	d106      	bne.n	8006156 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d102      	bne.n	8006156 <HAL_SPI_TransmitReceive+0x66>
 8006150:	7efb      	ldrb	r3, [r7, #27]
 8006152:	2b04      	cmp	r3, #4
 8006154:	d003      	beq.n	800615e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006156:	2302      	movs	r3, #2
 8006158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800615c:	e1cd      	b.n	80064fa <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d005      	beq.n	8006170 <HAL_SPI_TransmitReceive+0x80>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d002      	beq.n	8006170 <HAL_SPI_TransmitReceive+0x80>
 800616a:	887b      	ldrh	r3, [r7, #2]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d103      	bne.n	8006178 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006176:	e1c0      	b.n	80064fa <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b04      	cmp	r3, #4
 8006182:	d003      	beq.n	800618c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2205      	movs	r2, #5
 8006188:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	887a      	ldrh	r2, [r7, #2]
 800619c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	887a      	ldrh	r2, [r7, #2]
 80061a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	887a      	ldrh	r2, [r7, #2]
 80061b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	887a      	ldrh	r2, [r7, #2]
 80061b8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061ce:	d802      	bhi.n	80061d6 <HAL_SPI_TransmitReceive+0xe6>
 80061d0:	8a3b      	ldrh	r3, [r7, #16]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d908      	bls.n	80061e8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80061e4:	605a      	str	r2, [r3, #4]
 80061e6:	e007      	b.n	80061f8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061f6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006202:	2b40      	cmp	r3, #64	; 0x40
 8006204:	d007      	beq.n	8006216 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006214:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800621e:	d97c      	bls.n	800631a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d002      	beq.n	800622e <HAL_SPI_TransmitReceive+0x13e>
 8006228:	8a7b      	ldrh	r3, [r7, #18]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d169      	bne.n	8006302 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006232:	881a      	ldrh	r2, [r3, #0]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623e:	1c9a      	adds	r2, r3, #2
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006248:	b29b      	uxth	r3, r3
 800624a:	3b01      	subs	r3, #1
 800624c:	b29a      	uxth	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006252:	e056      	b.n	8006302 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b02      	cmp	r3, #2
 8006260:	d11b      	bne.n	800629a <HAL_SPI_TransmitReceive+0x1aa>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006266:	b29b      	uxth	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	d016      	beq.n	800629a <HAL_SPI_TransmitReceive+0x1aa>
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	2b01      	cmp	r3, #1
 8006270:	d113      	bne.n	800629a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006276:	881a      	ldrh	r2, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006282:	1c9a      	adds	r2, r3, #2
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800628c:	b29b      	uxth	r3, r3
 800628e:	3b01      	subs	r3, #1
 8006290:	b29a      	uxth	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006296:	2300      	movs	r3, #0
 8006298:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d11c      	bne.n	80062e2 <HAL_SPI_TransmitReceive+0x1f2>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d016      	beq.n	80062e2 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68da      	ldr	r2, [r3, #12]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	b292      	uxth	r2, r2
 80062c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c6:	1c9a      	adds	r2, r3, #2
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	3b01      	subs	r3, #1
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062de:	2301      	movs	r3, #1
 80062e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80062e2:	f7fc fac5 	bl	8002870 <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d807      	bhi.n	8006302 <HAL_SPI_TransmitReceive+0x212>
 80062f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f8:	d003      	beq.n	8006302 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006300:	e0fb      	b.n	80064fa <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006306:	b29b      	uxth	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1a3      	bne.n	8006254 <HAL_SPI_TransmitReceive+0x164>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006312:	b29b      	uxth	r3, r3
 8006314:	2b00      	cmp	r3, #0
 8006316:	d19d      	bne.n	8006254 <HAL_SPI_TransmitReceive+0x164>
 8006318:	e0df      	b.n	80064da <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d003      	beq.n	800632a <HAL_SPI_TransmitReceive+0x23a>
 8006322:	8a7b      	ldrh	r3, [r7, #18]
 8006324:	2b01      	cmp	r3, #1
 8006326:	f040 80cb 	bne.w	80064c0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800632e:	b29b      	uxth	r3, r3
 8006330:	2b01      	cmp	r3, #1
 8006332:	d912      	bls.n	800635a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006338:	881a      	ldrh	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006344:	1c9a      	adds	r2, r3, #2
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800634e:	b29b      	uxth	r3, r3
 8006350:	3b02      	subs	r3, #2
 8006352:	b29a      	uxth	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006358:	e0b2      	b.n	80064c0 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	330c      	adds	r3, #12
 8006364:	7812      	ldrb	r2, [r2, #0]
 8006366:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006376:	b29b      	uxth	r3, r3
 8006378:	3b01      	subs	r3, #1
 800637a:	b29a      	uxth	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006380:	e09e      	b.n	80064c0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b02      	cmp	r3, #2
 800638e:	d134      	bne.n	80063fa <HAL_SPI_TransmitReceive+0x30a>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006394:	b29b      	uxth	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d02f      	beq.n	80063fa <HAL_SPI_TransmitReceive+0x30a>
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	2b01      	cmp	r3, #1
 800639e:	d12c      	bne.n	80063fa <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d912      	bls.n	80063d0 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ae:	881a      	ldrh	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ba:	1c9a      	adds	r2, r3, #2
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	3b02      	subs	r3, #2
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063ce:	e012      	b.n	80063f6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	330c      	adds	r3, #12
 80063da:	7812      	ldrb	r2, [r2, #0]
 80063dc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	3b01      	subs	r3, #1
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b01      	cmp	r3, #1
 8006406:	d148      	bne.n	800649a <HAL_SPI_TransmitReceive+0x3aa>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800640e:	b29b      	uxth	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	d042      	beq.n	800649a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800641a:	b29b      	uxth	r3, r3
 800641c:	2b01      	cmp	r3, #1
 800641e:	d923      	bls.n	8006468 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68da      	ldr	r2, [r3, #12]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	b292      	uxth	r2, r2
 800642c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	1c9a      	adds	r2, r3, #2
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800643e:	b29b      	uxth	r3, r3
 8006440:	3b02      	subs	r3, #2
 8006442:	b29a      	uxth	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006450:	b29b      	uxth	r3, r3
 8006452:	2b01      	cmp	r3, #1
 8006454:	d81f      	bhi.n	8006496 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006464:	605a      	str	r2, [r3, #4]
 8006466:	e016      	b.n	8006496 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f103 020c 	add.w	r2, r3, #12
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006474:	7812      	ldrb	r2, [r2, #0]
 8006476:	b2d2      	uxtb	r2, r2
 8006478:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800648a:	b29b      	uxth	r3, r3
 800648c:	3b01      	subs	r3, #1
 800648e:	b29a      	uxth	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006496:	2301      	movs	r3, #1
 8006498:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800649a:	f7fc f9e9 	bl	8002870 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d803      	bhi.n	80064b2 <HAL_SPI_TransmitReceive+0x3c2>
 80064aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b0:	d102      	bne.n	80064b8 <HAL_SPI_TransmitReceive+0x3c8>
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d103      	bne.n	80064c0 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80064be:	e01c      	b.n	80064fa <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f47f af5b 	bne.w	8006382 <HAL_SPI_TransmitReceive+0x292>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f47f af54 	bne.w	8006382 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064da:	69fa      	ldr	r2, [r7, #28]
 80064dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f000 f948 	bl	8006774 <SPI_EndRxTxTransaction>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d006      	beq.n	80064f8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2220      	movs	r2, #32
 80064f4:	661a      	str	r2, [r3, #96]	; 0x60
 80064f6:	e000      	b.n	80064fa <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80064f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800650a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800650e:	4618      	mov	r0, r3
 8006510:	3728      	adds	r7, #40	; 0x28
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b084      	sub	sp, #16
 800651a:	af00      	add	r7, sp, #0
 800651c:	60f8      	str	r0, [r7, #12]
 800651e:	60b9      	str	r1, [r7, #8]
 8006520:	603b      	str	r3, [r7, #0]
 8006522:	4613      	mov	r3, r2
 8006524:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006526:	e04c      	b.n	80065c2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652e:	d048      	beq.n	80065c2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006530:	f7fc f99e 	bl	8002870 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	429a      	cmp	r2, r3
 800653e:	d902      	bls.n	8006546 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d13d      	bne.n	80065c2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006554:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800655e:	d111      	bne.n	8006584 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006568:	d004      	beq.n	8006574 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006572:	d107      	bne.n	8006584 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006582:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800658c:	d10f      	bne.n	80065ae <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e00f      	b.n	80065e2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689a      	ldr	r2, [r3, #8]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	4013      	ands	r3, r2
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	bf0c      	ite	eq
 80065d2:	2301      	moveq	r3, #1
 80065d4:	2300      	movne	r3, #0
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	461a      	mov	r2, r3
 80065da:	79fb      	ldrb	r3, [r7, #7]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d1a3      	bne.n	8006528 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	60f8      	str	r0, [r7, #12]
 80065f2:	60b9      	str	r1, [r7, #8]
 80065f4:	607a      	str	r2, [r7, #4]
 80065f6:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80065f8:	e057      	b.n	80066aa <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006600:	d106      	bne.n	8006610 <SPI_WaitFifoStateUntilTimeout+0x26>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d103      	bne.n	8006610 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	330c      	adds	r3, #12
 800660e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006616:	d048      	beq.n	80066aa <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006618:	f7fc f92a 	bl	8002870 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	429a      	cmp	r2, r3
 8006626:	d902      	bls.n	800662e <SPI_WaitFifoStateUntilTimeout+0x44>
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d13d      	bne.n	80066aa <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800663c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006646:	d111      	bne.n	800666c <SPI_WaitFifoStateUntilTimeout+0x82>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006650:	d004      	beq.n	800665c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800665a:	d107      	bne.n	800666c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800666a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006674:	d10f      	bne.n	8006696 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006694:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e008      	b.n	80066bc <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	4013      	ands	r3, r2
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d19f      	bne.n	80065fa <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af02      	add	r7, sp, #8
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066d8:	d111      	bne.n	80066fe <SPI_EndRxTransaction+0x3a>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066e2:	d004      	beq.n	80066ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ec:	d107      	bne.n	80066fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066fc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	2200      	movs	r2, #0
 8006706:	2180      	movs	r1, #128	; 0x80
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f7ff ff04 	bl	8006516 <SPI_WaitFlagStateUntilTimeout>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d007      	beq.n	8006724 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006718:	f043 0220 	orr.w	r2, r3, #32
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e023      	b.n	800676c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800672c:	d11d      	bne.n	800676a <SPI_EndRxTransaction+0xa6>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006736:	d004      	beq.n	8006742 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006740:	d113      	bne.n	800676a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	2200      	movs	r2, #0
 800674a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f7ff ff4b 	bl	80065ea <SPI_WaitFifoStateUntilTimeout>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d007      	beq.n	800676a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800675e:	f043 0220 	orr.w	r2, r3, #32
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e000      	b.n	800676c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af02      	add	r7, sp, #8
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	9300      	str	r3, [sp, #0]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2200      	movs	r2, #0
 8006788:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f7ff ff2c 	bl	80065ea <SPI_WaitFifoStateUntilTimeout>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d007      	beq.n	80067a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800679c:	f043 0220 	orr.w	r2, r3, #32
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e027      	b.n	80067f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2200      	movs	r2, #0
 80067b0:	2180      	movs	r1, #128	; 0x80
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f7ff feaf 	bl	8006516 <SPI_WaitFlagStateUntilTimeout>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d007      	beq.n	80067ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c2:	f043 0220 	orr.w	r2, r3, #32
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e014      	b.n	80067f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f7ff ff05 	bl	80065ea <SPI_WaitFifoStateUntilTimeout>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d007      	beq.n	80067f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ea:	f043 0220 	orr.w	r2, r3, #32
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e000      	b.n	80067f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e040      	b.n	8006894 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006816:	2b00      	cmp	r3, #0
 8006818:	d106      	bne.n	8006828 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7fb ff4c 	bl	80026c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2224      	movs	r2, #36	; 0x24
 800682c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f022 0201 	bic.w	r2, r2, #1
 800683c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fa28 	bl	8006c94 <UART_SetConfig>
 8006844:	4603      	mov	r3, r0
 8006846:	2b01      	cmp	r3, #1
 8006848:	d101      	bne.n	800684e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e022      	b.n	8006894 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 fd30 	bl	80072bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800686a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689a      	ldr	r2, [r3, #8]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800687a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f042 0201 	orr.w	r2, r2, #1
 800688a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 fdb7 	bl	8007400 <UART_CheckIdleState>
 8006892:	4603      	mov	r3, r0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	4613      	mov	r3, r2
 80068a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068ae:	2b20      	cmp	r3, #32
 80068b0:	f040 808a 	bne.w	80069c8 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d002      	beq.n	80068c0 <HAL_UART_Receive_IT+0x24>
 80068ba:	88fb      	ldrh	r3, [r7, #6]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d101      	bne.n	80068c4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e082      	b.n	80069ca <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d101      	bne.n	80068d2 <HAL_UART_Receive_IT+0x36>
 80068ce:	2302      	movs	r3, #2
 80068d0:	e07b      	b.n	80069ca <HAL_UART_Receive_IT+0x12e>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	88fa      	ldrh	r2, [r7, #6]
 80068e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	88fa      	ldrh	r2, [r7, #6]
 80068ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068fe:	d10e      	bne.n	800691e <HAL_UART_Receive_IT+0x82>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d105      	bne.n	8006914 <HAL_UART_Receive_IT+0x78>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800690e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006912:	e02d      	b.n	8006970 <HAL_UART_Receive_IT+0xd4>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	22ff      	movs	r2, #255	; 0xff
 8006918:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800691c:	e028      	b.n	8006970 <HAL_UART_Receive_IT+0xd4>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10d      	bne.n	8006942 <HAL_UART_Receive_IT+0xa6>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d104      	bne.n	8006938 <HAL_UART_Receive_IT+0x9c>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	22ff      	movs	r2, #255	; 0xff
 8006932:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006936:	e01b      	b.n	8006970 <HAL_UART_Receive_IT+0xd4>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	227f      	movs	r2, #127	; 0x7f
 800693c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006940:	e016      	b.n	8006970 <HAL_UART_Receive_IT+0xd4>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800694a:	d10d      	bne.n	8006968 <HAL_UART_Receive_IT+0xcc>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d104      	bne.n	800695e <HAL_UART_Receive_IT+0xc2>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	227f      	movs	r2, #127	; 0x7f
 8006958:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800695c:	e008      	b.n	8006970 <HAL_UART_Receive_IT+0xd4>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	223f      	movs	r2, #63	; 0x3f
 8006962:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006966:	e003      	b.n	8006970 <HAL_UART_Receive_IT+0xd4>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2222      	movs	r2, #34	; 0x22
 800697a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689a      	ldr	r2, [r3, #8]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f042 0201 	orr.w	r2, r2, #1
 800698a:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006994:	d107      	bne.n	80069a6 <HAL_UART_Receive_IT+0x10a>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d103      	bne.n	80069a6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	4a0d      	ldr	r2, [pc, #52]	; (80069d8 <HAL_UART_Receive_IT+0x13c>)
 80069a2:	661a      	str	r2, [r3, #96]	; 0x60
 80069a4:	e002      	b.n	80069ac <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	4a0c      	ldr	r2, [pc, #48]	; (80069dc <HAL_UART_Receive_IT+0x140>)
 80069aa:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80069c2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80069c4:	2300      	movs	r3, #0
 80069c6:	e000      	b.n	80069ca <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80069c8:	2302      	movs	r3, #2
  }
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3714      	adds	r7, #20
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	080076c9 	.word	0x080076c9
 80069dc:	0800761f 	.word	0x0800761f

080069e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b088      	sub	sp, #32
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a00:	69fa      	ldr	r2, [r7, #28]
 8006a02:	f640 030f 	movw	r3, #2063	; 0x80f
 8006a06:	4013      	ands	r3, r2
 8006a08:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d113      	bne.n	8006a38 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	f003 0320 	and.w	r3, r3, #32
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00e      	beq.n	8006a38 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	f003 0320 	and.w	r3, r3, #32
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d009      	beq.n	8006a38 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 8114 	beq.w	8006c56 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	4798      	blx	r3
      }
      return;
 8006a36:	e10e      	b.n	8006c56 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f000 80d6 	beq.w	8006bec <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d105      	bne.n	8006a56 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 80cb 	beq.w	8006bec <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	f003 0301 	and.w	r3, r3, #1
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00e      	beq.n	8006a7e <HAL_UART_IRQHandler+0x9e>
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d009      	beq.n	8006a7e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a76:	f043 0201 	orr.w	r2, r3, #1
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	f003 0302 	and.w	r3, r3, #2
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00e      	beq.n	8006aa6 <HAL_UART_IRQHandler+0xc6>
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d009      	beq.n	8006aa6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2202      	movs	r2, #2
 8006a98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a9e:	f043 0204 	orr.w	r2, r3, #4
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	f003 0304 	and.w	r3, r3, #4
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00e      	beq.n	8006ace <HAL_UART_IRQHandler+0xee>
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f003 0301 	and.w	r3, r3, #1
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d009      	beq.n	8006ace <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2204      	movs	r2, #4
 8006ac0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ac6:	f043 0202 	orr.w	r2, r3, #2
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	f003 0308 	and.w	r3, r3, #8
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d013      	beq.n	8006b00 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	f003 0320 	and.w	r3, r3, #32
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d104      	bne.n	8006aec <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d009      	beq.n	8006b00 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2208      	movs	r2, #8
 8006af2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006af8:	f043 0208 	orr.w	r2, r3, #8
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00f      	beq.n	8006b2a <HAL_UART_IRQHandler+0x14a>
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00a      	beq.n	8006b2a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b22:	f043 0220 	orr.w	r2, r3, #32
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 8093 	beq.w	8006c5a <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	f003 0320 	and.w	r3, r3, #32
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00c      	beq.n	8006b58 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	f003 0320 	and.w	r3, r3, #32
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d007      	beq.n	8006b58 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d003      	beq.n	8006b58 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b5c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b68:	2b40      	cmp	r3, #64	; 0x40
 8006b6a:	d004      	beq.n	8006b76 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d031      	beq.n	8006bda <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fd02 	bl	8007580 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b86:	2b40      	cmp	r3, #64	; 0x40
 8006b88:	d123      	bne.n	8006bd2 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689a      	ldr	r2, [r3, #8]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b98:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d013      	beq.n	8006bca <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ba6:	4a30      	ldr	r2, [pc, #192]	; (8006c68 <HAL_UART_IRQHandler+0x288>)
 8006ba8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7fb ff9d 	bl	8002aee <HAL_DMA_Abort_IT>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d016      	beq.n	8006be8 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bc8:	e00e      	b.n	8006be8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f858 	bl	8006c80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd0:	e00a      	b.n	8006be8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f854 	bl	8006c80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd8:	e006      	b.n	8006be8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f850 	bl	8006c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006be6:	e038      	b.n	8006c5a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be8:	bf00      	nop
    return;
 8006bea:	e036      	b.n	8006c5a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00d      	beq.n	8006c12 <HAL_UART_IRQHandler+0x232>
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d008      	beq.n	8006c12 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006c08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fdb1 	bl	8007772 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c10:	e026      	b.n	8006c60 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00d      	beq.n	8006c38 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d008      	beq.n	8006c38 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d017      	beq.n	8006c5e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	4798      	blx	r3
    }
    return;
 8006c36:	e012      	b.n	8006c5e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00e      	beq.n	8006c60 <HAL_UART_IRQHandler+0x280>
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d009      	beq.n	8006c60 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 fccd 	bl	80075ec <UART_EndTransmit_IT>
    return;
 8006c52:	bf00      	nop
 8006c54:	e004      	b.n	8006c60 <HAL_UART_IRQHandler+0x280>
      return;
 8006c56:	bf00      	nop
 8006c58:	e002      	b.n	8006c60 <HAL_UART_IRQHandler+0x280>
    return;
 8006c5a:	bf00      	nop
 8006c5c:	e000      	b.n	8006c60 <HAL_UART_IRQHandler+0x280>
    return;
 8006c5e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006c60:	3720      	adds	r7, #32
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	080075c1 	.word	0x080075c1

08006c6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c94:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006c98:	b08a      	sub	sp, #40	; 0x28
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	689a      	ldr	r2, [r3, #8]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	431a      	orrs	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	695b      	ldr	r3, [r3, #20]
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	4bbc      	ldr	r3, [pc, #752]	; (8006fbc <UART_SetConfig+0x328>)
 8006cca:	4013      	ands	r3, r2
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	6812      	ldr	r2, [r2, #0]
 8006cd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006cd2:	430b      	orrs	r3, r1
 8006cd4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68da      	ldr	r2, [r3, #12]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4ab2      	ldr	r2, [pc, #712]	; (8006fc0 <UART_SetConfig+0x32c>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d004      	beq.n	8006d06 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d02:	4313      	orrs	r3, r2
 8006d04:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d16:	430a      	orrs	r2, r1
 8006d18:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4aa9      	ldr	r2, [pc, #676]	; (8006fc4 <UART_SetConfig+0x330>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d126      	bne.n	8006d72 <UART_SetConfig+0xde>
 8006d24:	4ba8      	ldr	r3, [pc, #672]	; (8006fc8 <UART_SetConfig+0x334>)
 8006d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d2a:	f003 0303 	and.w	r3, r3, #3
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d81a      	bhi.n	8006d68 <UART_SetConfig+0xd4>
 8006d32:	a201      	add	r2, pc, #4	; (adr r2, 8006d38 <UART_SetConfig+0xa4>)
 8006d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d38:	08006d49 	.word	0x08006d49
 8006d3c:	08006d59 	.word	0x08006d59
 8006d40:	08006d51 	.word	0x08006d51
 8006d44:	08006d61 	.word	0x08006d61
 8006d48:	2301      	movs	r3, #1
 8006d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d4e:	e0ab      	b.n	8006ea8 <UART_SetConfig+0x214>
 8006d50:	2302      	movs	r3, #2
 8006d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d56:	e0a7      	b.n	8006ea8 <UART_SetConfig+0x214>
 8006d58:	2304      	movs	r3, #4
 8006d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d5e:	e0a3      	b.n	8006ea8 <UART_SetConfig+0x214>
 8006d60:	2308      	movs	r3, #8
 8006d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d66:	e09f      	b.n	8006ea8 <UART_SetConfig+0x214>
 8006d68:	2310      	movs	r3, #16
 8006d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d6e:	bf00      	nop
 8006d70:	e09a      	b.n	8006ea8 <UART_SetConfig+0x214>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a95      	ldr	r2, [pc, #596]	; (8006fcc <UART_SetConfig+0x338>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d138      	bne.n	8006dee <UART_SetConfig+0x15a>
 8006d7c:	4b92      	ldr	r3, [pc, #584]	; (8006fc8 <UART_SetConfig+0x334>)
 8006d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d82:	f003 030c 	and.w	r3, r3, #12
 8006d86:	2b0c      	cmp	r3, #12
 8006d88:	d82c      	bhi.n	8006de4 <UART_SetConfig+0x150>
 8006d8a:	a201      	add	r2, pc, #4	; (adr r2, 8006d90 <UART_SetConfig+0xfc>)
 8006d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d90:	08006dc5 	.word	0x08006dc5
 8006d94:	08006de5 	.word	0x08006de5
 8006d98:	08006de5 	.word	0x08006de5
 8006d9c:	08006de5 	.word	0x08006de5
 8006da0:	08006dd5 	.word	0x08006dd5
 8006da4:	08006de5 	.word	0x08006de5
 8006da8:	08006de5 	.word	0x08006de5
 8006dac:	08006de5 	.word	0x08006de5
 8006db0:	08006dcd 	.word	0x08006dcd
 8006db4:	08006de5 	.word	0x08006de5
 8006db8:	08006de5 	.word	0x08006de5
 8006dbc:	08006de5 	.word	0x08006de5
 8006dc0:	08006ddd 	.word	0x08006ddd
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dca:	e06d      	b.n	8006ea8 <UART_SetConfig+0x214>
 8006dcc:	2302      	movs	r3, #2
 8006dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dd2:	e069      	b.n	8006ea8 <UART_SetConfig+0x214>
 8006dd4:	2304      	movs	r3, #4
 8006dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dda:	e065      	b.n	8006ea8 <UART_SetConfig+0x214>
 8006ddc:	2308      	movs	r3, #8
 8006dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006de2:	e061      	b.n	8006ea8 <UART_SetConfig+0x214>
 8006de4:	2310      	movs	r3, #16
 8006de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dea:	bf00      	nop
 8006dec:	e05c      	b.n	8006ea8 <UART_SetConfig+0x214>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a77      	ldr	r2, [pc, #476]	; (8006fd0 <UART_SetConfig+0x33c>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d125      	bne.n	8006e44 <UART_SetConfig+0x1b0>
 8006df8:	4b73      	ldr	r3, [pc, #460]	; (8006fc8 <UART_SetConfig+0x334>)
 8006dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dfe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e02:	2b10      	cmp	r3, #16
 8006e04:	d011      	beq.n	8006e2a <UART_SetConfig+0x196>
 8006e06:	2b10      	cmp	r3, #16
 8006e08:	d802      	bhi.n	8006e10 <UART_SetConfig+0x17c>
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d005      	beq.n	8006e1a <UART_SetConfig+0x186>
 8006e0e:	e014      	b.n	8006e3a <UART_SetConfig+0x1a6>
 8006e10:	2b20      	cmp	r3, #32
 8006e12:	d006      	beq.n	8006e22 <UART_SetConfig+0x18e>
 8006e14:	2b30      	cmp	r3, #48	; 0x30
 8006e16:	d00c      	beq.n	8006e32 <UART_SetConfig+0x19e>
 8006e18:	e00f      	b.n	8006e3a <UART_SetConfig+0x1a6>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e20:	e042      	b.n	8006ea8 <UART_SetConfig+0x214>
 8006e22:	2302      	movs	r3, #2
 8006e24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e28:	e03e      	b.n	8006ea8 <UART_SetConfig+0x214>
 8006e2a:	2304      	movs	r3, #4
 8006e2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e30:	e03a      	b.n	8006ea8 <UART_SetConfig+0x214>
 8006e32:	2308      	movs	r3, #8
 8006e34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e38:	e036      	b.n	8006ea8 <UART_SetConfig+0x214>
 8006e3a:	2310      	movs	r3, #16
 8006e3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e40:	bf00      	nop
 8006e42:	e031      	b.n	8006ea8 <UART_SetConfig+0x214>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a5d      	ldr	r2, [pc, #372]	; (8006fc0 <UART_SetConfig+0x32c>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d129      	bne.n	8006ea2 <UART_SetConfig+0x20e>
 8006e4e:	4b5e      	ldr	r3, [pc, #376]	; (8006fc8 <UART_SetConfig+0x334>)
 8006e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e5c:	d014      	beq.n	8006e88 <UART_SetConfig+0x1f4>
 8006e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e62:	d802      	bhi.n	8006e6a <UART_SetConfig+0x1d6>
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d007      	beq.n	8006e78 <UART_SetConfig+0x1e4>
 8006e68:	e016      	b.n	8006e98 <UART_SetConfig+0x204>
 8006e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e6e:	d007      	beq.n	8006e80 <UART_SetConfig+0x1ec>
 8006e70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e74:	d00c      	beq.n	8006e90 <UART_SetConfig+0x1fc>
 8006e76:	e00f      	b.n	8006e98 <UART_SetConfig+0x204>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e7e:	e013      	b.n	8006ea8 <UART_SetConfig+0x214>
 8006e80:	2302      	movs	r3, #2
 8006e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e86:	e00f      	b.n	8006ea8 <UART_SetConfig+0x214>
 8006e88:	2304      	movs	r3, #4
 8006e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e8e:	e00b      	b.n	8006ea8 <UART_SetConfig+0x214>
 8006e90:	2308      	movs	r3, #8
 8006e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e96:	e007      	b.n	8006ea8 <UART_SetConfig+0x214>
 8006e98:	2310      	movs	r3, #16
 8006e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e9e:	bf00      	nop
 8006ea0:	e002      	b.n	8006ea8 <UART_SetConfig+0x214>
 8006ea2:	2310      	movs	r3, #16
 8006ea4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a44      	ldr	r2, [pc, #272]	; (8006fc0 <UART_SetConfig+0x32c>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	f040 80fb 	bne.w	80070aa <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006eb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006eb8:	2b08      	cmp	r3, #8
 8006eba:	d824      	bhi.n	8006f06 <UART_SetConfig+0x272>
 8006ebc:	a201      	add	r2, pc, #4	; (adr r2, 8006ec4 <UART_SetConfig+0x230>)
 8006ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec2:	bf00      	nop
 8006ec4:	08006ee9 	.word	0x08006ee9
 8006ec8:	08006f07 	.word	0x08006f07
 8006ecc:	08006ef1 	.word	0x08006ef1
 8006ed0:	08006f07 	.word	0x08006f07
 8006ed4:	08006ef7 	.word	0x08006ef7
 8006ed8:	08006f07 	.word	0x08006f07
 8006edc:	08006f07 	.word	0x08006f07
 8006ee0:	08006f07 	.word	0x08006f07
 8006ee4:	08006eff 	.word	0x08006eff
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006ee8:	f7fe fbd8 	bl	800569c <HAL_RCC_GetPCLK1Freq>
 8006eec:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006eee:	e00d      	b.n	8006f0c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006ef0:	4b38      	ldr	r3, [pc, #224]	; (8006fd4 <UART_SetConfig+0x340>)
 8006ef2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006ef4:	e00a      	b.n	8006f0c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8006ef6:	f7fe fb3b 	bl	8005570 <HAL_RCC_GetSysClockFreq>
 8006efa:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006efc:	e006      	b.n	8006f0c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f02:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f04:	e002      	b.n	8006f0c <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	76fb      	strb	r3, [r7, #27]
        break;
 8006f0a:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 81c8 	beq.w	80072a4 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	005b      	lsls	r3, r3, #1
 8006f1c:	4413      	add	r3, r2
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d305      	bcc.n	8006f30 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d902      	bls.n	8006f36 <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	76fb      	strb	r3, [r7, #27]
 8006f34:	e1b6      	b.n	80072a4 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 8006f36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f3a:	2b08      	cmp	r3, #8
 8006f3c:	f200 80a2 	bhi.w	8007084 <UART_SetConfig+0x3f0>
 8006f40:	a201      	add	r2, pc, #4	; (adr r2, 8006f48 <UART_SetConfig+0x2b4>)
 8006f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f46:	bf00      	nop
 8006f48:	08006f6d 	.word	0x08006f6d
 8006f4c:	08007085 	.word	0x08007085
 8006f50:	08006fd9 	.word	0x08006fd9
 8006f54:	08007085 	.word	0x08007085
 8006f58:	0800700d 	.word	0x0800700d
 8006f5c:	08007085 	.word	0x08007085
 8006f60:	08007085 	.word	0x08007085
 8006f64:	08007085 	.word	0x08007085
 8006f68:	0800705b 	.word	0x0800705b
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8006f6c:	f7fe fb96 	bl	800569c <HAL_RCC_GetPCLK1Freq>
 8006f70:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	4619      	mov	r1, r3
 8006f76:	f04f 0200 	mov.w	r2, #0
 8006f7a:	f04f 0300 	mov.w	r3, #0
 8006f7e:	f04f 0400 	mov.w	r4, #0
 8006f82:	0214      	lsls	r4, r2, #8
 8006f84:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006f88:	020b      	lsls	r3, r1, #8
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	6852      	ldr	r2, [r2, #4]
 8006f8e:	0852      	lsrs	r2, r2, #1
 8006f90:	4611      	mov	r1, r2
 8006f92:	f04f 0200 	mov.w	r2, #0
 8006f96:	eb13 0b01 	adds.w	fp, r3, r1
 8006f9a:	eb44 0c02 	adc.w	ip, r4, r2
 8006f9e:	4658      	mov	r0, fp
 8006fa0:	4661      	mov	r1, ip
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f04f 0400 	mov.w	r4, #0
 8006faa:	461a      	mov	r2, r3
 8006fac:	4623      	mov	r3, r4
 8006fae:	f7f9 fdb5 	bl	8000b1c <__aeabi_uldivmod>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	460c      	mov	r4, r1
 8006fb6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006fb8:	e067      	b.n	800708a <UART_SetConfig+0x3f6>
 8006fba:	bf00      	nop
 8006fbc:	efff69f3 	.word	0xefff69f3
 8006fc0:	40008000 	.word	0x40008000
 8006fc4:	40013800 	.word	0x40013800
 8006fc8:	40021000 	.word	0x40021000
 8006fcc:	40004400 	.word	0x40004400
 8006fd0:	40004800 	.word	0x40004800
 8006fd4:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	085b      	lsrs	r3, r3, #1
 8006fde:	f04f 0400 	mov.w	r4, #0
 8006fe2:	49ae      	ldr	r1, [pc, #696]	; (800729c <UART_SetConfig+0x608>)
 8006fe4:	f04f 0200 	mov.w	r2, #0
 8006fe8:	eb13 0b01 	adds.w	fp, r3, r1
 8006fec:	eb44 0c02 	adc.w	ip, r4, r2
 8006ff0:	4658      	mov	r0, fp
 8006ff2:	4661      	mov	r1, ip
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	f04f 0400 	mov.w	r4, #0
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	4623      	mov	r3, r4
 8007000:	f7f9 fd8c 	bl	8000b1c <__aeabi_uldivmod>
 8007004:	4603      	mov	r3, r0
 8007006:	460c      	mov	r4, r1
 8007008:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800700a:	e03e      	b.n	800708a <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800700c:	f7fe fab0 	bl	8005570 <HAL_RCC_GetSysClockFreq>
 8007010:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	4619      	mov	r1, r3
 8007016:	f04f 0200 	mov.w	r2, #0
 800701a:	f04f 0300 	mov.w	r3, #0
 800701e:	f04f 0400 	mov.w	r4, #0
 8007022:	0214      	lsls	r4, r2, #8
 8007024:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007028:	020b      	lsls	r3, r1, #8
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	6852      	ldr	r2, [r2, #4]
 800702e:	0852      	lsrs	r2, r2, #1
 8007030:	4611      	mov	r1, r2
 8007032:	f04f 0200 	mov.w	r2, #0
 8007036:	eb13 0b01 	adds.w	fp, r3, r1
 800703a:	eb44 0c02 	adc.w	ip, r4, r2
 800703e:	4658      	mov	r0, fp
 8007040:	4661      	mov	r1, ip
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f04f 0400 	mov.w	r4, #0
 800704a:	461a      	mov	r2, r3
 800704c:	4623      	mov	r3, r4
 800704e:	f7f9 fd65 	bl	8000b1c <__aeabi_uldivmod>
 8007052:	4603      	mov	r3, r0
 8007054:	460c      	mov	r4, r1
 8007056:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007058:	e017      	b.n	800708a <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	085b      	lsrs	r3, r3, #1
 8007060:	f04f 0400 	mov.w	r4, #0
 8007064:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8007068:	f144 0100 	adc.w	r1, r4, #0
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f04f 0400 	mov.w	r4, #0
 8007074:	461a      	mov	r2, r3
 8007076:	4623      	mov	r3, r4
 8007078:	f7f9 fd50 	bl	8000b1c <__aeabi_uldivmod>
 800707c:	4603      	mov	r3, r0
 800707e:	460c      	mov	r4, r1
 8007080:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007082:	e002      	b.n	800708a <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	76fb      	strb	r3, [r7, #27]
            break;
 8007088:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007090:	d308      	bcc.n	80070a4 <UART_SetConfig+0x410>
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007098:	d204      	bcs.n	80070a4 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	69fa      	ldr	r2, [r7, #28]
 80070a0:	60da      	str	r2, [r3, #12]
 80070a2:	e0ff      	b.n	80072a4 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	76fb      	strb	r3, [r7, #27]
 80070a8:	e0fc      	b.n	80072a4 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070b2:	f040 8083 	bne.w	80071bc <UART_SetConfig+0x528>
  {
    switch (clocksource)
 80070b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070ba:	2b08      	cmp	r3, #8
 80070bc:	d85e      	bhi.n	800717c <UART_SetConfig+0x4e8>
 80070be:	a201      	add	r2, pc, #4	; (adr r2, 80070c4 <UART_SetConfig+0x430>)
 80070c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c4:	080070e9 	.word	0x080070e9
 80070c8:	08007109 	.word	0x08007109
 80070cc:	08007129 	.word	0x08007129
 80070d0:	0800717d 	.word	0x0800717d
 80070d4:	08007145 	.word	0x08007145
 80070d8:	0800717d 	.word	0x0800717d
 80070dc:	0800717d 	.word	0x0800717d
 80070e0:	0800717d 	.word	0x0800717d
 80070e4:	08007165 	.word	0x08007165
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070e8:	f7fe fad8 	bl	800569c <HAL_RCC_GetPCLK1Freq>
 80070ec:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	005a      	lsls	r2, r3, #1
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	085b      	lsrs	r3, r3, #1
 80070f8:	441a      	add	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007102:	b29b      	uxth	r3, r3
 8007104:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007106:	e03c      	b.n	8007182 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007108:	f7fe fade 	bl	80056c8 <HAL_RCC_GetPCLK2Freq>
 800710c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	005a      	lsls	r2, r3, #1
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	085b      	lsrs	r3, r3, #1
 8007118:	441a      	add	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007122:	b29b      	uxth	r3, r3
 8007124:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007126:	e02c      	b.n	8007182 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	085b      	lsrs	r3, r3, #1
 800712e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8007132:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	6852      	ldr	r2, [r2, #4]
 800713a:	fbb3 f3f2 	udiv	r3, r3, r2
 800713e:	b29b      	uxth	r3, r3
 8007140:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007142:	e01e      	b.n	8007182 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007144:	f7fe fa14 	bl	8005570 <HAL_RCC_GetSysClockFreq>
 8007148:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	005a      	lsls	r2, r3, #1
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	085b      	lsrs	r3, r3, #1
 8007154:	441a      	add	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	fbb2 f3f3 	udiv	r3, r2, r3
 800715e:	b29b      	uxth	r3, r3
 8007160:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007162:	e00e      	b.n	8007182 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	085b      	lsrs	r3, r3, #1
 800716a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	fbb2 f3f3 	udiv	r3, r2, r3
 8007176:	b29b      	uxth	r3, r3
 8007178:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800717a:	e002      	b.n	8007182 <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	76fb      	strb	r3, [r7, #27]
        break;
 8007180:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	2b0f      	cmp	r3, #15
 8007186:	d916      	bls.n	80071b6 <UART_SetConfig+0x522>
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800718e:	d212      	bcs.n	80071b6 <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	b29b      	uxth	r3, r3
 8007194:	f023 030f 	bic.w	r3, r3, #15
 8007198:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	085b      	lsrs	r3, r3, #1
 800719e:	b29b      	uxth	r3, r3
 80071a0:	f003 0307 	and.w	r3, r3, #7
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	89fb      	ldrh	r3, [r7, #14]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	89fa      	ldrh	r2, [r7, #14]
 80071b2:	60da      	str	r2, [r3, #12]
 80071b4:	e076      	b.n	80072a4 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	76fb      	strb	r3, [r7, #27]
 80071ba:	e073      	b.n	80072a4 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 80071bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071c0:	2b08      	cmp	r3, #8
 80071c2:	d85c      	bhi.n	800727e <UART_SetConfig+0x5ea>
 80071c4:	a201      	add	r2, pc, #4	; (adr r2, 80071cc <UART_SetConfig+0x538>)
 80071c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ca:	bf00      	nop
 80071cc:	080071f1 	.word	0x080071f1
 80071d0:	0800720f 	.word	0x0800720f
 80071d4:	0800722d 	.word	0x0800722d
 80071d8:	0800727f 	.word	0x0800727f
 80071dc:	08007249 	.word	0x08007249
 80071e0:	0800727f 	.word	0x0800727f
 80071e4:	0800727f 	.word	0x0800727f
 80071e8:	0800727f 	.word	0x0800727f
 80071ec:	08007267 	.word	0x08007267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071f0:	f7fe fa54 	bl	800569c <HAL_RCC_GetPCLK1Freq>
 80071f4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	085a      	lsrs	r2, r3, #1
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	441a      	add	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	fbb2 f3f3 	udiv	r3, r2, r3
 8007208:	b29b      	uxth	r3, r3
 800720a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800720c:	e03a      	b.n	8007284 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800720e:	f7fe fa5b 	bl	80056c8 <HAL_RCC_GetPCLK2Freq>
 8007212:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	085a      	lsrs	r2, r3, #1
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	441a      	add	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	fbb2 f3f3 	udiv	r3, r2, r3
 8007226:	b29b      	uxth	r3, r3
 8007228:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800722a:	e02b      	b.n	8007284 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	085b      	lsrs	r3, r3, #1
 8007232:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8007236:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	6852      	ldr	r2, [r2, #4]
 800723e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007242:	b29b      	uxth	r3, r3
 8007244:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007246:	e01d      	b.n	8007284 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007248:	f7fe f992 	bl	8005570 <HAL_RCC_GetSysClockFreq>
 800724c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	085a      	lsrs	r2, r3, #1
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	441a      	add	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007260:	b29b      	uxth	r3, r3
 8007262:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007264:	e00e      	b.n	8007284 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	085b      	lsrs	r3, r3, #1
 800726c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	fbb2 f3f3 	udiv	r3, r2, r3
 8007278:	b29b      	uxth	r3, r3
 800727a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800727c:	e002      	b.n	8007284 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	76fb      	strb	r3, [r7, #27]
        break;
 8007282:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	2b0f      	cmp	r3, #15
 8007288:	d90a      	bls.n	80072a0 <UART_SetConfig+0x60c>
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007290:	d206      	bcs.n	80072a0 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	69fa      	ldr	r2, [r7, #28]
 8007298:	60da      	str	r2, [r3, #12]
 800729a:	e003      	b.n	80072a4 <UART_SetConfig+0x610>
 800729c:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80072b0:	7efb      	ldrb	r3, [r7, #27]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3728      	adds	r7, #40	; 0x28
 80072b6:	46bd      	mov	sp, r7
 80072b8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080072bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00a      	beq.n	80072e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ea:	f003 0302 	and.w	r3, r3, #2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00a      	beq.n	8007308 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	430a      	orrs	r2, r1
 8007306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730c:	f003 0304 	and.w	r3, r3, #4
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00a      	beq.n	800732a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	430a      	orrs	r2, r1
 8007328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732e:	f003 0308 	and.w	r3, r3, #8
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00a      	beq.n	800734c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	430a      	orrs	r2, r1
 800734a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	f003 0310 	and.w	r3, r3, #16
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00a      	beq.n	800736e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007372:	f003 0320 	and.w	r3, r3, #32
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00a      	beq.n	8007390 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	430a      	orrs	r2, r1
 800738e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007398:	2b00      	cmp	r3, #0
 800739a:	d01a      	beq.n	80073d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073ba:	d10a      	bne.n	80073d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00a      	beq.n	80073f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	430a      	orrs	r2, r1
 80073f2:	605a      	str	r2, [r3, #4]
  }
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af02      	add	r7, sp, #8
 8007406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800740e:	f7fb fa2f 	bl	8002870 <HAL_GetTick>
 8007412:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0308 	and.w	r3, r3, #8
 800741e:	2b08      	cmp	r3, #8
 8007420:	d10e      	bne.n	8007440 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007422:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f82a 	bl	800748a <UART_WaitOnFlagUntilTimeout>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e020      	b.n	8007482 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0304 	and.w	r3, r3, #4
 800744a:	2b04      	cmp	r3, #4
 800744c:	d10e      	bne.n	800746c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800744e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f814 	bl	800748a <UART_WaitOnFlagUntilTimeout>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d001      	beq.n	800746c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	e00a      	b.n	8007482 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2220      	movs	r2, #32
 8007470:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2220      	movs	r2, #32
 8007476:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b084      	sub	sp, #16
 800748e:	af00      	add	r7, sp, #0
 8007490:	60f8      	str	r0, [r7, #12]
 8007492:	60b9      	str	r1, [r7, #8]
 8007494:	603b      	str	r3, [r7, #0]
 8007496:	4613      	mov	r3, r2
 8007498:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800749a:	e05d      	b.n	8007558 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a2:	d059      	beq.n	8007558 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074a4:	f7fb f9e4 	bl	8002870 <HAL_GetTick>
 80074a8:	4602      	mov	r2, r0
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	69ba      	ldr	r2, [r7, #24]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d302      	bcc.n	80074ba <UART_WaitOnFlagUntilTimeout+0x30>
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d11b      	bne.n	80074f2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80074c8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	689a      	ldr	r2, [r3, #8]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f022 0201 	bic.w	r2, r2, #1
 80074d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2220      	movs	r2, #32
 80074de:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2220      	movs	r2, #32
 80074e4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e042      	b.n	8007578 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0304 	and.w	r3, r3, #4
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d02b      	beq.n	8007558 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	69db      	ldr	r3, [r3, #28]
 8007506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800750a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800750e:	d123      	bne.n	8007558 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007518:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007528:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	689a      	ldr	r2, [r3, #8]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f022 0201 	bic.w	r2, r2, #1
 8007538:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2220      	movs	r2, #32
 800753e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2220      	movs	r2, #32
 8007544:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2220      	movs	r2, #32
 800754a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e00f      	b.n	8007578 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	69da      	ldr	r2, [r3, #28]
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	4013      	ands	r3, r2
 8007562:	68ba      	ldr	r2, [r7, #8]
 8007564:	429a      	cmp	r2, r3
 8007566:	bf0c      	ite	eq
 8007568:	2301      	moveq	r3, #1
 800756a:	2300      	movne	r3, #0
 800756c:	b2db      	uxtb	r3, r3
 800756e:	461a      	mov	r2, r3
 8007570:	79fb      	ldrb	r3, [r7, #7]
 8007572:	429a      	cmp	r2, r3
 8007574:	d092      	beq.n	800749c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007596:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	689a      	ldr	r2, [r3, #8]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f022 0201 	bic.w	r2, r2, #1
 80075a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2220      	movs	r2, #32
 80075ac:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	661a      	str	r2, [r3, #96]	; 0x60
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f7ff fb4e 	bl	8006c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075e4:	bf00      	nop
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007602:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2220      	movs	r2, #32
 8007608:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7ff fb2b 	bl	8006c6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007616:	bf00      	nop
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b084      	sub	sp, #16
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800762c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007632:	2b22      	cmp	r3, #34	; 0x22
 8007634:	d13a      	bne.n	80076ac <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800763c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800763e:	89bb      	ldrh	r3, [r7, #12]
 8007640:	b2d9      	uxtb	r1, r3
 8007642:	89fb      	ldrh	r3, [r7, #14]
 8007644:	b2da      	uxtb	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800764a:	400a      	ands	r2, r1
 800764c:	b2d2      	uxtb	r2, r2
 800764e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007654:	1c5a      	adds	r2, r3, #1
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007660:	b29b      	uxth	r3, r3
 8007662:	3b01      	subs	r3, #1
 8007664:	b29a      	uxth	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007672:	b29b      	uxth	r3, r3
 8007674:	2b00      	cmp	r3, #0
 8007676:	d123      	bne.n	80076c0 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007686:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	689a      	ldr	r2, [r3, #8]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f022 0201 	bic.w	r2, r2, #1
 8007696:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2220      	movs	r2, #32
 800769c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f7fa fe7f 	bl	80023a8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076aa:	e009      	b.n	80076c0 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	8b1b      	ldrh	r3, [r3, #24]
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f042 0208 	orr.w	r2, r2, #8
 80076bc:	b292      	uxth	r2, r2
 80076be:	831a      	strh	r2, [r3, #24]
}
 80076c0:	bf00      	nop
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076d6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076dc:	2b22      	cmp	r3, #34	; 0x22
 80076de:	d13a      	bne.n	8007756 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80076e6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ec:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80076ee:	89ba      	ldrh	r2, [r7, #12]
 80076f0:	89fb      	ldrh	r3, [r7, #14]
 80076f2:	4013      	ands	r3, r2
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076fe:	1c9a      	adds	r2, r3, #2
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800770a:	b29b      	uxth	r3, r3
 800770c:	3b01      	subs	r3, #1
 800770e:	b29a      	uxth	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800771c:	b29b      	uxth	r3, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d123      	bne.n	800776a <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007730:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	689a      	ldr	r2, [r3, #8]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f022 0201 	bic.w	r2, r2, #1
 8007740:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2220      	movs	r2, #32
 8007746:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f7fa fe2a 	bl	80023a8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007754:	e009      	b.n	800776a <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	8b1b      	ldrh	r3, [r3, #24]
 800775c:	b29a      	uxth	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f042 0208 	orr.w	r2, r2, #8
 8007766:	b292      	uxth	r2, r2
 8007768:	831a      	strh	r2, [r3, #24]
}
 800776a:	bf00      	nop
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007772:	b480      	push	{r7}
 8007774:	b083      	sub	sp, #12
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800777a:	bf00      	nop
 800777c:	370c      	adds	r7, #12
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007786:	b084      	sub	sp, #16
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	f107 0014 	add.w	r0, r7, #20
 8007794:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	370c      	adds	r7, #12
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	b004      	add	sp, #16
 80077a6:	4770      	bx	lr

080077a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80077b0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80077b4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80077bc:	b29a      	uxth	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	4313      	orrs	r3, r2
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80077da:	b480      	push	{r7}
 80077dc:	b085      	sub	sp, #20
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80077e2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80077e6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	43db      	mvns	r3, r3
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	4013      	ands	r3, r2
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	460b      	mov	r3, r1
 800781a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800782a:	b084      	sub	sp, #16
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	f107 0014 	add.w	r0, r7, #20
 8007838:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f7ff ffa3 	bl	80077a8 <USB_EnableGlobalInt>

  return HAL_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800786e:	b004      	add	sp, #16
 8007870:	4770      	bx	lr
	...

08007874 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007874:	b490      	push	{r4, r7}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4413      	add	r3, r2
 800788c:	881b      	ldrh	r3, [r3, #0]
 800788e:	b29b      	uxth	r3, r3
 8007890:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007898:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	78db      	ldrb	r3, [r3, #3]
 800789e:	2b03      	cmp	r3, #3
 80078a0:	d819      	bhi.n	80078d6 <USB_ActivateEndpoint+0x62>
 80078a2:	a201      	add	r2, pc, #4	; (adr r2, 80078a8 <USB_ActivateEndpoint+0x34>)
 80078a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a8:	080078b9 	.word	0x080078b9
 80078ac:	080078cd 	.word	0x080078cd
 80078b0:	080078dd 	.word	0x080078dd
 80078b4:	080078c3 	.word	0x080078c3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80078b8:	89bb      	ldrh	r3, [r7, #12]
 80078ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80078be:	81bb      	strh	r3, [r7, #12]
      break;
 80078c0:	e00d      	b.n	80078de <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80078c2:	89bb      	ldrh	r3, [r7, #12]
 80078c4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80078c8:	81bb      	strh	r3, [r7, #12]
      break;
 80078ca:	e008      	b.n	80078de <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80078cc:	89bb      	ldrh	r3, [r7, #12]
 80078ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80078d2:	81bb      	strh	r3, [r7, #12]
      break;
 80078d4:	e003      	b.n	80078de <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	73fb      	strb	r3, [r7, #15]
      break;
 80078da:	e000      	b.n	80078de <USB_ActivateEndpoint+0x6a>
      break;
 80078dc:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	441a      	add	r2, r3
 80078e8:	89bb      	ldrh	r3, [r7, #12]
 80078ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	881b      	ldrh	r3, [r3, #0]
 800790a:	b29b      	uxth	r3, r3
 800790c:	b21b      	sxth	r3, r3
 800790e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007916:	b21a      	sxth	r2, r3
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	b21b      	sxth	r3, r3
 800791e:	4313      	orrs	r3, r2
 8007920:	b21b      	sxth	r3, r3
 8007922:	b29c      	uxth	r4, r3
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	441a      	add	r2, r3
 800792e:	4b8a      	ldr	r3, [pc, #552]	; (8007b58 <USB_ActivateEndpoint+0x2e4>)
 8007930:	4323      	orrs	r3, r4
 8007932:	b29b      	uxth	r3, r3
 8007934:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	7b1b      	ldrb	r3, [r3, #12]
 800793a:	2b00      	cmp	r3, #0
 800793c:	f040 8112 	bne.w	8007b64 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	785b      	ldrb	r3, [r3, #1]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d067      	beq.n	8007a18 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007948:	687c      	ldr	r4, [r7, #4]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007950:	b29b      	uxth	r3, r3
 8007952:	441c      	add	r4, r3
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	00db      	lsls	r3, r3, #3
 800795a:	4423      	add	r3, r4
 800795c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007960:	461c      	mov	r4, r3
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	88db      	ldrh	r3, [r3, #6]
 8007966:	085b      	lsrs	r3, r3, #1
 8007968:	b29b      	uxth	r3, r3
 800796a:	005b      	lsls	r3, r3, #1
 800796c:	b29b      	uxth	r3, r3
 800796e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4413      	add	r3, r2
 800797a:	881b      	ldrh	r3, [r3, #0]
 800797c:	b29c      	uxth	r4, r3
 800797e:	4623      	mov	r3, r4
 8007980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007984:	2b00      	cmp	r3, #0
 8007986:	d014      	beq.n	80079b2 <USB_ActivateEndpoint+0x13e>
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4413      	add	r3, r2
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	b29b      	uxth	r3, r3
 8007996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800799a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800799e:	b29c      	uxth	r4, r3
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	441a      	add	r2, r3
 80079aa:	4b6c      	ldr	r3, [pc, #432]	; (8007b5c <USB_ActivateEndpoint+0x2e8>)
 80079ac:	4323      	orrs	r3, r4
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	78db      	ldrb	r3, [r3, #3]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d018      	beq.n	80079ec <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4413      	add	r3, r2
 80079c4:	881b      	ldrh	r3, [r3, #0]
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079d0:	b29c      	uxth	r4, r3
 80079d2:	f084 0320 	eor.w	r3, r4, #32
 80079d6:	b29c      	uxth	r4, r3
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	441a      	add	r2, r3
 80079e2:	4b5d      	ldr	r3, [pc, #372]	; (8007b58 <USB_ActivateEndpoint+0x2e4>)
 80079e4:	4323      	orrs	r3, r4
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	8013      	strh	r3, [r2, #0]
 80079ea:	e22b      	b.n	8007e44 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	4413      	add	r3, r2
 80079f6:	881b      	ldrh	r3, [r3, #0]
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a02:	b29c      	uxth	r4, r3
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	441a      	add	r2, r3
 8007a0e:	4b52      	ldr	r3, [pc, #328]	; (8007b58 <USB_ActivateEndpoint+0x2e4>)
 8007a10:	4323      	orrs	r3, r4
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	8013      	strh	r3, [r2, #0]
 8007a16:	e215      	b.n	8007e44 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007a18:	687c      	ldr	r4, [r7, #4]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	441c      	add	r4, r3
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	00db      	lsls	r3, r3, #3
 8007a2a:	4423      	add	r3, r4
 8007a2c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a30:	461c      	mov	r4, r3
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	88db      	ldrh	r3, [r3, #6]
 8007a36:	085b      	lsrs	r3, r3, #1
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	005b      	lsls	r3, r3, #1
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007a40:	687c      	ldr	r4, [r7, #4]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	441c      	add	r4, r3
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	00db      	lsls	r3, r3, #3
 8007a52:	4423      	add	r3, r4
 8007a54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a58:	461c      	mov	r4, r3
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10e      	bne.n	8007a80 <USB_ActivateEndpoint+0x20c>
 8007a62:	8823      	ldrh	r3, [r4, #0]
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	8023      	strh	r3, [r4, #0]
 8007a6e:	8823      	ldrh	r3, [r4, #0]
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	8023      	strh	r3, [r4, #0]
 8007a7e:	e02d      	b.n	8007adc <USB_ActivateEndpoint+0x268>
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	2b3e      	cmp	r3, #62	; 0x3e
 8007a86:	d812      	bhi.n	8007aae <USB_ActivateEndpoint+0x23a>
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	085b      	lsrs	r3, r3, #1
 8007a8e:	60bb      	str	r3, [r7, #8]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	f003 0301 	and.w	r3, r3, #1
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d002      	beq.n	8007aa2 <USB_ActivateEndpoint+0x22e>
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	60bb      	str	r3, [r7, #8]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	029b      	lsls	r3, r3, #10
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	8023      	strh	r3, [r4, #0]
 8007aac:	e016      	b.n	8007adc <USB_ActivateEndpoint+0x268>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	095b      	lsrs	r3, r3, #5
 8007ab4:	60bb      	str	r3, [r7, #8]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	f003 031f 	and.w	r3, r3, #31
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d102      	bne.n	8007ac8 <USB_ActivateEndpoint+0x254>
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	60bb      	str	r3, [r7, #8]
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	029b      	lsls	r3, r3, #10
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	4413      	add	r3, r2
 8007ae6:	881b      	ldrh	r3, [r3, #0]
 8007ae8:	b29c      	uxth	r4, r3
 8007aea:	4623      	mov	r3, r4
 8007aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d014      	beq.n	8007b1e <USB_ActivateEndpoint+0x2aa>
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4413      	add	r3, r2
 8007afe:	881b      	ldrh	r3, [r3, #0]
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b0a:	b29c      	uxth	r4, r3
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	441a      	add	r2, r3
 8007b16:	4b12      	ldr	r3, [pc, #72]	; (8007b60 <USB_ActivateEndpoint+0x2ec>)
 8007b18:	4323      	orrs	r3, r4
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	881b      	ldrh	r3, [r3, #0]
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b34:	b29c      	uxth	r4, r3
 8007b36:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007b3a:	b29c      	uxth	r4, r3
 8007b3c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007b40:	b29c      	uxth	r4, r3
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	441a      	add	r2, r3
 8007b4c:	4b02      	ldr	r3, [pc, #8]	; (8007b58 <USB_ActivateEndpoint+0x2e4>)
 8007b4e:	4323      	orrs	r3, r4
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	8013      	strh	r3, [r2, #0]
 8007b54:	e176      	b.n	8007e44 <USB_ActivateEndpoint+0x5d0>
 8007b56:	bf00      	nop
 8007b58:	ffff8080 	.word	0xffff8080
 8007b5c:	ffff80c0 	.word	0xffff80c0
 8007b60:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	881b      	ldrh	r3, [r3, #0]
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b7a:	b29c      	uxth	r4, r3
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	441a      	add	r2, r3
 8007b86:	4b96      	ldr	r3, [pc, #600]	; (8007de0 <USB_ActivateEndpoint+0x56c>)
 8007b88:	4323      	orrs	r3, r4
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007b8e:	687c      	ldr	r4, [r7, #4]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	441c      	add	r4, r3
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	00db      	lsls	r3, r3, #3
 8007ba0:	4423      	add	r3, r4
 8007ba2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ba6:	461c      	mov	r4, r3
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	891b      	ldrh	r3, [r3, #8]
 8007bac:	085b      	lsrs	r3, r3, #1
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	005b      	lsls	r3, r3, #1
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	8023      	strh	r3, [r4, #0]
 8007bb6:	687c      	ldr	r4, [r7, #4]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	441c      	add	r4, r3
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	00db      	lsls	r3, r3, #3
 8007bc8:	4423      	add	r3, r4
 8007bca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007bce:	461c      	mov	r4, r3
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	895b      	ldrh	r3, [r3, #10]
 8007bd4:	085b      	lsrs	r3, r3, #1
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	005b      	lsls	r3, r3, #1
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	785b      	ldrb	r3, [r3, #1]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f040 8088 	bne.w	8007cf8 <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	881b      	ldrh	r3, [r3, #0]
 8007bf4:	b29c      	uxth	r4, r3
 8007bf6:	4623      	mov	r3, r4
 8007bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d014      	beq.n	8007c2a <USB_ActivateEndpoint+0x3b6>
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4413      	add	r3, r2
 8007c0a:	881b      	ldrh	r3, [r3, #0]
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c16:	b29c      	uxth	r4, r3
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	441a      	add	r2, r3
 8007c22:	4b70      	ldr	r3, [pc, #448]	; (8007de4 <USB_ActivateEndpoint+0x570>)
 8007c24:	4323      	orrs	r3, r4
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	b29c      	uxth	r4, r3
 8007c38:	4623      	mov	r3, r4
 8007c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d014      	beq.n	8007c6c <USB_ActivateEndpoint+0x3f8>
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	4413      	add	r3, r2
 8007c4c:	881b      	ldrh	r3, [r3, #0]
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c58:	b29c      	uxth	r4, r3
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	441a      	add	r2, r3
 8007c64:	4b60      	ldr	r3, [pc, #384]	; (8007de8 <USB_ActivateEndpoint+0x574>)
 8007c66:	4323      	orrs	r3, r4
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	4413      	add	r3, r2
 8007c76:	881b      	ldrh	r3, [r3, #0]
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c82:	b29c      	uxth	r4, r3
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	441a      	add	r2, r3
 8007c8e:	4b56      	ldr	r3, [pc, #344]	; (8007de8 <USB_ActivateEndpoint+0x574>)
 8007c90:	4323      	orrs	r3, r4
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4413      	add	r3, r2
 8007ca0:	881b      	ldrh	r3, [r3, #0]
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cac:	b29c      	uxth	r4, r3
 8007cae:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007cb2:	b29c      	uxth	r4, r3
 8007cb4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007cb8:	b29c      	uxth	r4, r3
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	441a      	add	r2, r3
 8007cc4:	4b49      	ldr	r3, [pc, #292]	; (8007dec <USB_ActivateEndpoint+0x578>)
 8007cc6:	4323      	orrs	r3, r4
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	881b      	ldrh	r3, [r3, #0]
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ce2:	b29c      	uxth	r4, r3
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	441a      	add	r2, r3
 8007cee:	4b3f      	ldr	r3, [pc, #252]	; (8007dec <USB_ActivateEndpoint+0x578>)
 8007cf0:	4323      	orrs	r3, r4
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	8013      	strh	r3, [r2, #0]
 8007cf6:	e0a5      	b.n	8007e44 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4413      	add	r3, r2
 8007d02:	881b      	ldrh	r3, [r3, #0]
 8007d04:	b29c      	uxth	r4, r3
 8007d06:	4623      	mov	r3, r4
 8007d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d014      	beq.n	8007d3a <USB_ActivateEndpoint+0x4c6>
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	881b      	ldrh	r3, [r3, #0]
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d26:	b29c      	uxth	r4, r3
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	441a      	add	r2, r3
 8007d32:	4b2c      	ldr	r3, [pc, #176]	; (8007de4 <USB_ActivateEndpoint+0x570>)
 8007d34:	4323      	orrs	r3, r4
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4413      	add	r3, r2
 8007d44:	881b      	ldrh	r3, [r3, #0]
 8007d46:	b29c      	uxth	r4, r3
 8007d48:	4623      	mov	r3, r4
 8007d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d014      	beq.n	8007d7c <USB_ActivateEndpoint+0x508>
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	4413      	add	r3, r2
 8007d5c:	881b      	ldrh	r3, [r3, #0]
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d68:	b29c      	uxth	r4, r3
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	441a      	add	r2, r3
 8007d74:	4b1c      	ldr	r3, [pc, #112]	; (8007de8 <USB_ActivateEndpoint+0x574>)
 8007d76:	4323      	orrs	r3, r4
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	4413      	add	r3, r2
 8007d86:	881b      	ldrh	r3, [r3, #0]
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d92:	b29c      	uxth	r4, r3
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	441a      	add	r2, r3
 8007d9e:	4b11      	ldr	r3, [pc, #68]	; (8007de4 <USB_ActivateEndpoint+0x570>)
 8007da0:	4323      	orrs	r3, r4
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	78db      	ldrb	r3, [r3, #3]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d020      	beq.n	8007df0 <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4413      	add	r3, r2
 8007db8:	881b      	ldrh	r3, [r3, #0]
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dc4:	b29c      	uxth	r4, r3
 8007dc6:	f084 0320 	eor.w	r3, r4, #32
 8007dca:	b29c      	uxth	r4, r3
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	441a      	add	r2, r3
 8007dd6:	4b05      	ldr	r3, [pc, #20]	; (8007dec <USB_ActivateEndpoint+0x578>)
 8007dd8:	4323      	orrs	r3, r4
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	8013      	strh	r3, [r2, #0]
 8007dde:	e01c      	b.n	8007e1a <USB_ActivateEndpoint+0x5a6>
 8007de0:	ffff8180 	.word	0xffff8180
 8007de4:	ffffc080 	.word	0xffffc080
 8007de8:	ffff80c0 	.word	0xffff80c0
 8007dec:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4413      	add	r3, r2
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e06:	b29c      	uxth	r4, r3
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	441a      	add	r2, r3
 8007e12:	4b0f      	ldr	r3, [pc, #60]	; (8007e50 <USB_ActivateEndpoint+0x5dc>)
 8007e14:	4323      	orrs	r3, r4
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4413      	add	r3, r2
 8007e24:	881b      	ldrh	r3, [r3, #0]
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e30:	b29c      	uxth	r4, r3
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	441a      	add	r2, r3
 8007e3c:	4b04      	ldr	r3, [pc, #16]	; (8007e50 <USB_ActivateEndpoint+0x5dc>)
 8007e3e:	4323      	orrs	r3, r4
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bc90      	pop	{r4, r7}
 8007e4e:	4770      	bx	lr
 8007e50:	ffff8080 	.word	0xffff8080

08007e54 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e54:	b490      	push	{r4, r7}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	7b1b      	ldrb	r3, [r3, #12]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d171      	bne.n	8007f4a <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	785b      	ldrb	r3, [r3, #1]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d036      	beq.n	8007edc <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	4413      	add	r3, r2
 8007e78:	881b      	ldrh	r3, [r3, #0]
 8007e7a:	b29c      	uxth	r4, r3
 8007e7c:	4623      	mov	r3, r4
 8007e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d014      	beq.n	8007eb0 <USB_DeactivateEndpoint+0x5c>
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4413      	add	r3, r2
 8007e90:	881b      	ldrh	r3, [r3, #0]
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e9c:	b29c      	uxth	r4, r3
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	441a      	add	r2, r3
 8007ea8:	4b6b      	ldr	r3, [pc, #428]	; (8008058 <USB_DeactivateEndpoint+0x204>)
 8007eaa:	4323      	orrs	r3, r4
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	4413      	add	r3, r2
 8007eba:	881b      	ldrh	r3, [r3, #0]
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ec6:	b29c      	uxth	r4, r3
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	441a      	add	r2, r3
 8007ed2:	4b62      	ldr	r3, [pc, #392]	; (800805c <USB_DeactivateEndpoint+0x208>)
 8007ed4:	4323      	orrs	r3, r4
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	8013      	strh	r3, [r2, #0]
 8007eda:	e144      	b.n	8008166 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4413      	add	r3, r2
 8007ee6:	881b      	ldrh	r3, [r3, #0]
 8007ee8:	b29c      	uxth	r4, r3
 8007eea:	4623      	mov	r3, r4
 8007eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d014      	beq.n	8007f1e <USB_DeactivateEndpoint+0xca>
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4413      	add	r3, r2
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f0a:	b29c      	uxth	r4, r3
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	441a      	add	r2, r3
 8007f16:	4b52      	ldr	r3, [pc, #328]	; (8008060 <USB_DeactivateEndpoint+0x20c>)
 8007f18:	4323      	orrs	r3, r4
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	881b      	ldrh	r3, [r3, #0]
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f34:	b29c      	uxth	r4, r3
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	441a      	add	r2, r3
 8007f40:	4b46      	ldr	r3, [pc, #280]	; (800805c <USB_DeactivateEndpoint+0x208>)
 8007f42:	4323      	orrs	r3, r4
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	8013      	strh	r3, [r2, #0]
 8007f48:	e10d      	b.n	8008166 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	785b      	ldrb	r3, [r3, #1]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f040 8088 	bne.w	8008064 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	4413      	add	r3, r2
 8007f5e:	881b      	ldrh	r3, [r3, #0]
 8007f60:	b29c      	uxth	r4, r3
 8007f62:	4623      	mov	r3, r4
 8007f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d014      	beq.n	8007f96 <USB_DeactivateEndpoint+0x142>
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4413      	add	r3, r2
 8007f76:	881b      	ldrh	r3, [r3, #0]
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f82:	b29c      	uxth	r4, r3
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	441a      	add	r2, r3
 8007f8e:	4b34      	ldr	r3, [pc, #208]	; (8008060 <USB_DeactivateEndpoint+0x20c>)
 8007f90:	4323      	orrs	r3, r4
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	881b      	ldrh	r3, [r3, #0]
 8007fa2:	b29c      	uxth	r4, r3
 8007fa4:	4623      	mov	r3, r4
 8007fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d014      	beq.n	8007fd8 <USB_DeactivateEndpoint+0x184>
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4413      	add	r3, r2
 8007fb8:	881b      	ldrh	r3, [r3, #0]
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fc4:	b29c      	uxth	r4, r3
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	441a      	add	r2, r3
 8007fd0:	4b21      	ldr	r3, [pc, #132]	; (8008058 <USB_DeactivateEndpoint+0x204>)
 8007fd2:	4323      	orrs	r3, r4
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fee:	b29c      	uxth	r4, r3
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	441a      	add	r2, r3
 8007ffa:	4b17      	ldr	r3, [pc, #92]	; (8008058 <USB_DeactivateEndpoint+0x204>)
 8007ffc:	4323      	orrs	r3, r4
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4413      	add	r3, r2
 800800c:	881b      	ldrh	r3, [r3, #0]
 800800e:	b29b      	uxth	r3, r3
 8008010:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008018:	b29c      	uxth	r4, r3
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	441a      	add	r2, r3
 8008024:	4b0d      	ldr	r3, [pc, #52]	; (800805c <USB_DeactivateEndpoint+0x208>)
 8008026:	4323      	orrs	r3, r4
 8008028:	b29b      	uxth	r3, r3
 800802a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	4413      	add	r3, r2
 8008036:	881b      	ldrh	r3, [r3, #0]
 8008038:	b29b      	uxth	r3, r3
 800803a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800803e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008042:	b29c      	uxth	r4, r3
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	441a      	add	r2, r3
 800804e:	4b03      	ldr	r3, [pc, #12]	; (800805c <USB_DeactivateEndpoint+0x208>)
 8008050:	4323      	orrs	r3, r4
 8008052:	b29b      	uxth	r3, r3
 8008054:	8013      	strh	r3, [r2, #0]
 8008056:	e086      	b.n	8008166 <USB_DeactivateEndpoint+0x312>
 8008058:	ffff80c0 	.word	0xffff80c0
 800805c:	ffff8080 	.word	0xffff8080
 8008060:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4413      	add	r3, r2
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	b29c      	uxth	r4, r3
 8008072:	4623      	mov	r3, r4
 8008074:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008078:	2b00      	cmp	r3, #0
 800807a:	d014      	beq.n	80080a6 <USB_DeactivateEndpoint+0x252>
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4413      	add	r3, r2
 8008086:	881b      	ldrh	r3, [r3, #0]
 8008088:	b29b      	uxth	r3, r3
 800808a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800808e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008092:	b29c      	uxth	r4, r3
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	441a      	add	r2, r3
 800809e:	4b35      	ldr	r3, [pc, #212]	; (8008174 <USB_DeactivateEndpoint+0x320>)
 80080a0:	4323      	orrs	r3, r4
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	881b      	ldrh	r3, [r3, #0]
 80080b2:	b29c      	uxth	r4, r3
 80080b4:	4623      	mov	r3, r4
 80080b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d014      	beq.n	80080e8 <USB_DeactivateEndpoint+0x294>
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	4413      	add	r3, r2
 80080c8:	881b      	ldrh	r3, [r3, #0]
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d4:	b29c      	uxth	r4, r3
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	441a      	add	r2, r3
 80080e0:	4b25      	ldr	r3, [pc, #148]	; (8008178 <USB_DeactivateEndpoint+0x324>)
 80080e2:	4323      	orrs	r3, r4
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4413      	add	r3, r2
 80080f2:	881b      	ldrh	r3, [r3, #0]
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080fe:	b29c      	uxth	r4, r3
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	441a      	add	r2, r3
 800810a:	4b1a      	ldr	r3, [pc, #104]	; (8008174 <USB_DeactivateEndpoint+0x320>)
 800810c:	4323      	orrs	r3, r4
 800810e:	b29b      	uxth	r3, r3
 8008110:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	b29b      	uxth	r3, r3
 8008120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008128:	b29c      	uxth	r4, r3
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	441a      	add	r2, r3
 8008134:	4b11      	ldr	r3, [pc, #68]	; (800817c <USB_DeactivateEndpoint+0x328>)
 8008136:	4323      	orrs	r3, r4
 8008138:	b29b      	uxth	r3, r3
 800813a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	4413      	add	r3, r2
 8008146:	881b      	ldrh	r3, [r3, #0]
 8008148:	b29b      	uxth	r3, r3
 800814a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800814e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008152:	b29c      	uxth	r4, r3
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	441a      	add	r2, r3
 800815e:	4b07      	ldr	r3, [pc, #28]	; (800817c <USB_DeactivateEndpoint+0x328>)
 8008160:	4323      	orrs	r3, r4
 8008162:	b29b      	uxth	r3, r3
 8008164:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bc90      	pop	{r4, r7}
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	ffffc080 	.word	0xffffc080
 8008178:	ffff80c0 	.word	0xffff80c0
 800817c:	ffff8080 	.word	0xffff8080

08008180 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008180:	b590      	push	{r4, r7, lr}
 8008182:	b08d      	sub	sp, #52	; 0x34
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	785b      	ldrb	r3, [r3, #1]
 800818e:	2b01      	cmp	r3, #1
 8008190:	f040 8160 	bne.w	8008454 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	699a      	ldr	r2, [r3, #24]
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	429a      	cmp	r2, r3
 800819e:	d909      	bls.n	80081b4 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	699a      	ldr	r2, [r3, #24]
 80081aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ac:	1ad2      	subs	r2, r2, r3
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	619a      	str	r2, [r3, #24]
 80081b2:	e005      	b.n	80081c0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	2200      	movs	r2, #0
 80081be:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	7b1b      	ldrb	r3, [r3, #12]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d119      	bne.n	80081fc <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	6959      	ldr	r1, [r3, #20]
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	88da      	ldrh	r2, [r3, #6]
 80081d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fbbd 	bl	8008954 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80081da:	687c      	ldr	r4, [r7, #4]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	441c      	add	r4, r3
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	00db      	lsls	r3, r3, #3
 80081ec:	4423      	add	r3, r4
 80081ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80081f2:	461c      	mov	r4, r3
 80081f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	8023      	strh	r3, [r4, #0]
 80081fa:	e10f      	b.n	800841c <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4413      	add	r3, r2
 8008206:	881b      	ldrh	r3, [r3, #0]
 8008208:	b29b      	uxth	r3, r3
 800820a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800820e:	2b00      	cmp	r3, #0
 8008210:	d065      	beq.n	80082de <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008212:	687c      	ldr	r4, [r7, #4]
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	785b      	ldrb	r3, [r3, #1]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d148      	bne.n	80082ae <USB_EPStartXfer+0x12e>
 800821c:	687c      	ldr	r4, [r7, #4]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008224:	b29b      	uxth	r3, r3
 8008226:	441c      	add	r4, r3
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	00db      	lsls	r3, r3, #3
 800822e:	4423      	add	r3, r4
 8008230:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008234:	461c      	mov	r4, r3
 8008236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10e      	bne.n	800825a <USB_EPStartXfer+0xda>
 800823c:	8823      	ldrh	r3, [r4, #0]
 800823e:	b29b      	uxth	r3, r3
 8008240:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008244:	b29b      	uxth	r3, r3
 8008246:	8023      	strh	r3, [r4, #0]
 8008248:	8823      	ldrh	r3, [r4, #0]
 800824a:	b29b      	uxth	r3, r3
 800824c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008250:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008254:	b29b      	uxth	r3, r3
 8008256:	8023      	strh	r3, [r4, #0]
 8008258:	e03d      	b.n	80082d6 <USB_EPStartXfer+0x156>
 800825a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825c:	2b3e      	cmp	r3, #62	; 0x3e
 800825e:	d810      	bhi.n	8008282 <USB_EPStartXfer+0x102>
 8008260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008262:	085b      	lsrs	r3, r3, #1
 8008264:	627b      	str	r3, [r7, #36]	; 0x24
 8008266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008268:	f003 0301 	and.w	r3, r3, #1
 800826c:	2b00      	cmp	r3, #0
 800826e:	d002      	beq.n	8008276 <USB_EPStartXfer+0xf6>
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	3301      	adds	r3, #1
 8008274:	627b      	str	r3, [r7, #36]	; 0x24
 8008276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008278:	b29b      	uxth	r3, r3
 800827a:	029b      	lsls	r3, r3, #10
 800827c:	b29b      	uxth	r3, r3
 800827e:	8023      	strh	r3, [r4, #0]
 8008280:	e029      	b.n	80082d6 <USB_EPStartXfer+0x156>
 8008282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008284:	095b      	lsrs	r3, r3, #5
 8008286:	627b      	str	r3, [r7, #36]	; 0x24
 8008288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828a:	f003 031f 	and.w	r3, r3, #31
 800828e:	2b00      	cmp	r3, #0
 8008290:	d102      	bne.n	8008298 <USB_EPStartXfer+0x118>
 8008292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008294:	3b01      	subs	r3, #1
 8008296:	627b      	str	r3, [r7, #36]	; 0x24
 8008298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829a:	b29b      	uxth	r3, r3
 800829c:	029b      	lsls	r3, r3, #10
 800829e:	b29b      	uxth	r3, r3
 80082a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	8023      	strh	r3, [r4, #0]
 80082ac:	e013      	b.n	80082d6 <USB_EPStartXfer+0x156>
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	785b      	ldrb	r3, [r3, #1]
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d10f      	bne.n	80082d6 <USB_EPStartXfer+0x156>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082bc:	b29b      	uxth	r3, r3
 80082be:	441c      	add	r4, r3
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	00db      	lsls	r3, r3, #3
 80082c6:	4423      	add	r3, r4
 80082c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80082cc:	60fb      	str	r3, [r7, #12]
 80082ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	895b      	ldrh	r3, [r3, #10]
 80082da:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80082dc:	e063      	b.n	80083a6 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	785b      	ldrb	r3, [r3, #1]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d148      	bne.n	8008378 <USB_EPStartXfer+0x1f8>
 80082e6:	687c      	ldr	r4, [r7, #4]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	441c      	add	r4, r3
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	00db      	lsls	r3, r3, #3
 80082f8:	4423      	add	r3, r4
 80082fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80082fe:	461c      	mov	r4, r3
 8008300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10e      	bne.n	8008324 <USB_EPStartXfer+0x1a4>
 8008306:	8823      	ldrh	r3, [r4, #0]
 8008308:	b29b      	uxth	r3, r3
 800830a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800830e:	b29b      	uxth	r3, r3
 8008310:	8023      	strh	r3, [r4, #0]
 8008312:	8823      	ldrh	r3, [r4, #0]
 8008314:	b29b      	uxth	r3, r3
 8008316:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800831a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800831e:	b29b      	uxth	r3, r3
 8008320:	8023      	strh	r3, [r4, #0]
 8008322:	e03d      	b.n	80083a0 <USB_EPStartXfer+0x220>
 8008324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008326:	2b3e      	cmp	r3, #62	; 0x3e
 8008328:	d810      	bhi.n	800834c <USB_EPStartXfer+0x1cc>
 800832a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832c:	085b      	lsrs	r3, r3, #1
 800832e:	623b      	str	r3, [r7, #32]
 8008330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008332:	f003 0301 	and.w	r3, r3, #1
 8008336:	2b00      	cmp	r3, #0
 8008338:	d002      	beq.n	8008340 <USB_EPStartXfer+0x1c0>
 800833a:	6a3b      	ldr	r3, [r7, #32]
 800833c:	3301      	adds	r3, #1
 800833e:	623b      	str	r3, [r7, #32]
 8008340:	6a3b      	ldr	r3, [r7, #32]
 8008342:	b29b      	uxth	r3, r3
 8008344:	029b      	lsls	r3, r3, #10
 8008346:	b29b      	uxth	r3, r3
 8008348:	8023      	strh	r3, [r4, #0]
 800834a:	e029      	b.n	80083a0 <USB_EPStartXfer+0x220>
 800834c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834e:	095b      	lsrs	r3, r3, #5
 8008350:	623b      	str	r3, [r7, #32]
 8008352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008354:	f003 031f 	and.w	r3, r3, #31
 8008358:	2b00      	cmp	r3, #0
 800835a:	d102      	bne.n	8008362 <USB_EPStartXfer+0x1e2>
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	3b01      	subs	r3, #1
 8008360:	623b      	str	r3, [r7, #32]
 8008362:	6a3b      	ldr	r3, [r7, #32]
 8008364:	b29b      	uxth	r3, r3
 8008366:	029b      	lsls	r3, r3, #10
 8008368:	b29b      	uxth	r3, r3
 800836a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800836e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008372:	b29b      	uxth	r3, r3
 8008374:	8023      	strh	r3, [r4, #0]
 8008376:	e013      	b.n	80083a0 <USB_EPStartXfer+0x220>
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	785b      	ldrb	r3, [r3, #1]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d10f      	bne.n	80083a0 <USB_EPStartXfer+0x220>
 8008380:	687c      	ldr	r4, [r7, #4]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008388:	b29b      	uxth	r3, r3
 800838a:	441c      	add	r4, r3
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	00db      	lsls	r3, r3, #3
 8008392:	4423      	add	r3, r4
 8008394:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008398:	461c      	mov	r4, r3
 800839a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839c:	b29b      	uxth	r3, r3
 800839e:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	891b      	ldrh	r3, [r3, #8]
 80083a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	6959      	ldr	r1, [r3, #20]
 80083aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 facf 	bl	8008954 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	785b      	ldrb	r3, [r3, #1]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d115      	bne.n	80083ea <USB_EPStartXfer+0x26a>
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	4413      	add	r3, r2
 80083c8:	881b      	ldrh	r3, [r3, #0]
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083d4:	b29c      	uxth	r4, r3
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	441a      	add	r2, r3
 80083e0:	4b9a      	ldr	r3, [pc, #616]	; (800864c <USB_EPStartXfer+0x4cc>)
 80083e2:	4323      	orrs	r3, r4
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	8013      	strh	r3, [r2, #0]
 80083e8:	e018      	b.n	800841c <USB_EPStartXfer+0x29c>
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	785b      	ldrb	r3, [r3, #1]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d114      	bne.n	800841c <USB_EPStartXfer+0x29c>
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	881b      	ldrh	r3, [r3, #0]
 80083fe:	b29b      	uxth	r3, r3
 8008400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008408:	b29c      	uxth	r4, r3
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	441a      	add	r2, r3
 8008414:	4b8e      	ldr	r3, [pc, #568]	; (8008650 <USB_EPStartXfer+0x4d0>)
 8008416:	4323      	orrs	r3, r4
 8008418:	b29b      	uxth	r3, r3
 800841a:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	4413      	add	r3, r2
 8008426:	881b      	ldrh	r3, [r3, #0]
 8008428:	b29b      	uxth	r3, r3
 800842a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800842e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008432:	b29c      	uxth	r4, r3
 8008434:	f084 0310 	eor.w	r3, r4, #16
 8008438:	b29c      	uxth	r4, r3
 800843a:	f084 0320 	eor.w	r3, r4, #32
 800843e:	b29c      	uxth	r4, r3
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	441a      	add	r2, r3
 800844a:	4b82      	ldr	r3, [pc, #520]	; (8008654 <USB_EPStartXfer+0x4d4>)
 800844c:	4323      	orrs	r3, r4
 800844e:	b29b      	uxth	r3, r3
 8008450:	8013      	strh	r3, [r2, #0]
 8008452:	e146      	b.n	80086e2 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	699a      	ldr	r2, [r3, #24]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	429a      	cmp	r2, r3
 800845e:	d909      	bls.n	8008474 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	699a      	ldr	r2, [r3, #24]
 800846a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846c:	1ad2      	subs	r2, r2, r3
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	619a      	str	r2, [r3, #24]
 8008472:	e005      	b.n	8008480 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	699b      	ldr	r3, [r3, #24]
 8008478:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	2200      	movs	r2, #0
 800847e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	7b1b      	ldrb	r3, [r3, #12]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d148      	bne.n	800851a <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008488:	687c      	ldr	r4, [r7, #4]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008490:	b29b      	uxth	r3, r3
 8008492:	441c      	add	r4, r3
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	00db      	lsls	r3, r3, #3
 800849a:	4423      	add	r3, r4
 800849c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80084a0:	461c      	mov	r4, r3
 80084a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d10e      	bne.n	80084c6 <USB_EPStartXfer+0x346>
 80084a8:	8823      	ldrh	r3, [r4, #0]
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	8023      	strh	r3, [r4, #0]
 80084b4:	8823      	ldrh	r3, [r4, #0]
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	8023      	strh	r3, [r4, #0]
 80084c4:	e0f2      	b.n	80086ac <USB_EPStartXfer+0x52c>
 80084c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c8:	2b3e      	cmp	r3, #62	; 0x3e
 80084ca:	d810      	bhi.n	80084ee <USB_EPStartXfer+0x36e>
 80084cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ce:	085b      	lsrs	r3, r3, #1
 80084d0:	61fb      	str	r3, [r7, #28]
 80084d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d002      	beq.n	80084e2 <USB_EPStartXfer+0x362>
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	3301      	adds	r3, #1
 80084e0:	61fb      	str	r3, [r7, #28]
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	029b      	lsls	r3, r3, #10
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	8023      	strh	r3, [r4, #0]
 80084ec:	e0de      	b.n	80086ac <USB_EPStartXfer+0x52c>
 80084ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f0:	095b      	lsrs	r3, r3, #5
 80084f2:	61fb      	str	r3, [r7, #28]
 80084f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f6:	f003 031f 	and.w	r3, r3, #31
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d102      	bne.n	8008504 <USB_EPStartXfer+0x384>
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	3b01      	subs	r3, #1
 8008502:	61fb      	str	r3, [r7, #28]
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	b29b      	uxth	r3, r3
 8008508:	029b      	lsls	r3, r3, #10
 800850a:	b29b      	uxth	r3, r3
 800850c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008510:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008514:	b29b      	uxth	r3, r3
 8008516:	8023      	strh	r3, [r4, #0]
 8008518:	e0c8      	b.n	80086ac <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	785b      	ldrb	r3, [r3, #1]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d148      	bne.n	80085b4 <USB_EPStartXfer+0x434>
 8008522:	687c      	ldr	r4, [r7, #4]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800852a:	b29b      	uxth	r3, r3
 800852c:	441c      	add	r4, r3
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	00db      	lsls	r3, r3, #3
 8008534:	4423      	add	r3, r4
 8008536:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800853a:	461c      	mov	r4, r3
 800853c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853e:	2b00      	cmp	r3, #0
 8008540:	d10e      	bne.n	8008560 <USB_EPStartXfer+0x3e0>
 8008542:	8823      	ldrh	r3, [r4, #0]
 8008544:	b29b      	uxth	r3, r3
 8008546:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800854a:	b29b      	uxth	r3, r3
 800854c:	8023      	strh	r3, [r4, #0]
 800854e:	8823      	ldrh	r3, [r4, #0]
 8008550:	b29b      	uxth	r3, r3
 8008552:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008556:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800855a:	b29b      	uxth	r3, r3
 800855c:	8023      	strh	r3, [r4, #0]
 800855e:	e03d      	b.n	80085dc <USB_EPStartXfer+0x45c>
 8008560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008562:	2b3e      	cmp	r3, #62	; 0x3e
 8008564:	d810      	bhi.n	8008588 <USB_EPStartXfer+0x408>
 8008566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008568:	085b      	lsrs	r3, r3, #1
 800856a:	61bb      	str	r3, [r7, #24]
 800856c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856e:	f003 0301 	and.w	r3, r3, #1
 8008572:	2b00      	cmp	r3, #0
 8008574:	d002      	beq.n	800857c <USB_EPStartXfer+0x3fc>
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	3301      	adds	r3, #1
 800857a:	61bb      	str	r3, [r7, #24]
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	b29b      	uxth	r3, r3
 8008580:	029b      	lsls	r3, r3, #10
 8008582:	b29b      	uxth	r3, r3
 8008584:	8023      	strh	r3, [r4, #0]
 8008586:	e029      	b.n	80085dc <USB_EPStartXfer+0x45c>
 8008588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858a:	095b      	lsrs	r3, r3, #5
 800858c:	61bb      	str	r3, [r7, #24]
 800858e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008590:	f003 031f 	and.w	r3, r3, #31
 8008594:	2b00      	cmp	r3, #0
 8008596:	d102      	bne.n	800859e <USB_EPStartXfer+0x41e>
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	3b01      	subs	r3, #1
 800859c:	61bb      	str	r3, [r7, #24]
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	029b      	lsls	r3, r3, #10
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	8023      	strh	r3, [r4, #0]
 80085b2:	e013      	b.n	80085dc <USB_EPStartXfer+0x45c>
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	785b      	ldrb	r3, [r3, #1]
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d10f      	bne.n	80085dc <USB_EPStartXfer+0x45c>
 80085bc:	687c      	ldr	r4, [r7, #4]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	441c      	add	r4, r3
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	00db      	lsls	r3, r3, #3
 80085ce:	4423      	add	r3, r4
 80085d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80085d4:	461c      	mov	r4, r3
 80085d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d8:	b29b      	uxth	r3, r3
 80085da:	8023      	strh	r3, [r4, #0]
 80085dc:	687c      	ldr	r4, [r7, #4]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	785b      	ldrb	r3, [r3, #1]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d14e      	bne.n	8008684 <USB_EPStartXfer+0x504>
 80085e6:	687c      	ldr	r4, [r7, #4]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	441c      	add	r4, r3
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	00db      	lsls	r3, r3, #3
 80085f8:	4423      	add	r3, r4
 80085fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80085fe:	461c      	mov	r4, r3
 8008600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10e      	bne.n	8008624 <USB_EPStartXfer+0x4a4>
 8008606:	8823      	ldrh	r3, [r4, #0]
 8008608:	b29b      	uxth	r3, r3
 800860a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800860e:	b29b      	uxth	r3, r3
 8008610:	8023      	strh	r3, [r4, #0]
 8008612:	8823      	ldrh	r3, [r4, #0]
 8008614:	b29b      	uxth	r3, r3
 8008616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800861a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800861e:	b29b      	uxth	r3, r3
 8008620:	8023      	strh	r3, [r4, #0]
 8008622:	e043      	b.n	80086ac <USB_EPStartXfer+0x52c>
 8008624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008626:	2b3e      	cmp	r3, #62	; 0x3e
 8008628:	d816      	bhi.n	8008658 <USB_EPStartXfer+0x4d8>
 800862a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862c:	085b      	lsrs	r3, r3, #1
 800862e:	617b      	str	r3, [r7, #20]
 8008630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008632:	f003 0301 	and.w	r3, r3, #1
 8008636:	2b00      	cmp	r3, #0
 8008638:	d002      	beq.n	8008640 <USB_EPStartXfer+0x4c0>
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	3301      	adds	r3, #1
 800863e:	617b      	str	r3, [r7, #20]
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	b29b      	uxth	r3, r3
 8008644:	029b      	lsls	r3, r3, #10
 8008646:	b29b      	uxth	r3, r3
 8008648:	8023      	strh	r3, [r4, #0]
 800864a:	e02f      	b.n	80086ac <USB_EPStartXfer+0x52c>
 800864c:	ffff80c0 	.word	0xffff80c0
 8008650:	ffffc080 	.word	0xffffc080
 8008654:	ffff8080 	.word	0xffff8080
 8008658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865a:	095b      	lsrs	r3, r3, #5
 800865c:	617b      	str	r3, [r7, #20]
 800865e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008660:	f003 031f 	and.w	r3, r3, #31
 8008664:	2b00      	cmp	r3, #0
 8008666:	d102      	bne.n	800866e <USB_EPStartXfer+0x4ee>
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	3b01      	subs	r3, #1
 800866c:	617b      	str	r3, [r7, #20]
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	b29b      	uxth	r3, r3
 8008672:	029b      	lsls	r3, r3, #10
 8008674:	b29b      	uxth	r3, r3
 8008676:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800867a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800867e:	b29b      	uxth	r3, r3
 8008680:	8023      	strh	r3, [r4, #0]
 8008682:	e013      	b.n	80086ac <USB_EPStartXfer+0x52c>
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	785b      	ldrb	r3, [r3, #1]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d10f      	bne.n	80086ac <USB_EPStartXfer+0x52c>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008692:	b29b      	uxth	r3, r3
 8008694:	441c      	add	r4, r3
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	00db      	lsls	r3, r3, #3
 800869c:	4423      	add	r3, r4
 800869e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80086a2:	613b      	str	r3, [r7, #16]
 80086a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086c2:	b29c      	uxth	r4, r3
 80086c4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80086c8:	b29c      	uxth	r4, r3
 80086ca:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80086ce:	b29c      	uxth	r4, r3
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	441a      	add	r2, r3
 80086da:	4b04      	ldr	r3, [pc, #16]	; (80086ec <USB_EPStartXfer+0x56c>)
 80086dc:	4323      	orrs	r3, r4
 80086de:	b29b      	uxth	r3, r3
 80086e0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3734      	adds	r7, #52	; 0x34
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd90      	pop	{r4, r7, pc}
 80086ec:	ffff8080 	.word	0xffff8080

080086f0 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80086f0:	b490      	push	{r4, r7}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	785b      	ldrb	r3, [r3, #1]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d018      	beq.n	8008734 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	881b      	ldrh	r3, [r3, #0]
 800870e:	b29b      	uxth	r3, r3
 8008710:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008718:	b29c      	uxth	r4, r3
 800871a:	f084 0310 	eor.w	r3, r4, #16
 800871e:	b29c      	uxth	r4, r3
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	441a      	add	r2, r3
 800872a:	4b11      	ldr	r3, [pc, #68]	; (8008770 <USB_EPSetStall+0x80>)
 800872c:	4323      	orrs	r3, r4
 800872e:	b29b      	uxth	r3, r3
 8008730:	8013      	strh	r3, [r2, #0]
 8008732:	e017      	b.n	8008764 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	881b      	ldrh	r3, [r3, #0]
 8008740:	b29b      	uxth	r3, r3
 8008742:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800874a:	b29c      	uxth	r4, r3
 800874c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008750:	b29c      	uxth	r4, r3
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	441a      	add	r2, r3
 800875c:	4b04      	ldr	r3, [pc, #16]	; (8008770 <USB_EPSetStall+0x80>)
 800875e:	4323      	orrs	r3, r4
 8008760:	b29b      	uxth	r3, r3
 8008762:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bc90      	pop	{r4, r7}
 800876e:	4770      	bx	lr
 8008770:	ffff8080 	.word	0xffff8080

08008774 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008774:	b490      	push	{r4, r7}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	7b1b      	ldrb	r3, [r3, #12]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d17d      	bne.n	8008882 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	785b      	ldrb	r3, [r3, #1]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d03d      	beq.n	800880a <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	4413      	add	r3, r2
 8008798:	881b      	ldrh	r3, [r3, #0]
 800879a:	b29c      	uxth	r4, r3
 800879c:	4623      	mov	r3, r4
 800879e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d014      	beq.n	80087d0 <USB_EPClearStall+0x5c>
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	4413      	add	r3, r2
 80087b0:	881b      	ldrh	r3, [r3, #0]
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087bc:	b29c      	uxth	r4, r3
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	441a      	add	r2, r3
 80087c8:	4b31      	ldr	r3, [pc, #196]	; (8008890 <USB_EPClearStall+0x11c>)
 80087ca:	4323      	orrs	r3, r4
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	78db      	ldrb	r3, [r3, #3]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d054      	beq.n	8008882 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	4413      	add	r3, r2
 80087e2:	881b      	ldrh	r3, [r3, #0]
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087ee:	b29c      	uxth	r4, r3
 80087f0:	f084 0320 	eor.w	r3, r4, #32
 80087f4:	b29c      	uxth	r4, r3
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	441a      	add	r2, r3
 8008800:	4b24      	ldr	r3, [pc, #144]	; (8008894 <USB_EPClearStall+0x120>)
 8008802:	4323      	orrs	r3, r4
 8008804:	b29b      	uxth	r3, r3
 8008806:	8013      	strh	r3, [r2, #0]
 8008808:	e03b      	b.n	8008882 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	4413      	add	r3, r2
 8008814:	881b      	ldrh	r3, [r3, #0]
 8008816:	b29c      	uxth	r4, r3
 8008818:	4623      	mov	r3, r4
 800881a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800881e:	2b00      	cmp	r3, #0
 8008820:	d014      	beq.n	800884c <USB_EPClearStall+0xd8>
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	4413      	add	r3, r2
 800882c:	881b      	ldrh	r3, [r3, #0]
 800882e:	b29b      	uxth	r3, r3
 8008830:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008838:	b29c      	uxth	r4, r3
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	441a      	add	r2, r3
 8008844:	4b14      	ldr	r3, [pc, #80]	; (8008898 <USB_EPClearStall+0x124>)
 8008846:	4323      	orrs	r3, r4
 8008848:	b29b      	uxth	r3, r3
 800884a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	4413      	add	r3, r2
 8008856:	881b      	ldrh	r3, [r3, #0]
 8008858:	b29b      	uxth	r3, r3
 800885a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800885e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008862:	b29c      	uxth	r4, r3
 8008864:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008868:	b29c      	uxth	r4, r3
 800886a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800886e:	b29c      	uxth	r4, r3
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	441a      	add	r2, r3
 800887a:	4b06      	ldr	r3, [pc, #24]	; (8008894 <USB_EPClearStall+0x120>)
 800887c:	4323      	orrs	r3, r4
 800887e:	b29b      	uxth	r3, r3
 8008880:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bc90      	pop	{r4, r7}
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	ffff80c0 	.word	0xffff80c0
 8008894:	ffff8080 	.word	0xffff8080
 8008898:	ffffc080 	.word	0xffffc080

0800889c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	460b      	mov	r3, r1
 80088a6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80088a8:	78fb      	ldrb	r3, [r7, #3]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d103      	bne.n	80088b6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2280      	movs	r2, #128	; 0x80
 80088b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	370c      	adds	r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088dc:	b29a      	uxth	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	370c      	adds	r7, #12
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr

080088f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80088f2:	b480      	push	{r7}
 80088f4:	b083      	sub	sp, #12
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008900:	b29b      	uxth	r3, r3
 8008902:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008906:	b29a      	uxth	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800891c:	b480      	push	{r7}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800892a:	b29b      	uxth	r3, r3
 800892c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800892e:	68fb      	ldr	r3, [r7, #12]
}
 8008930:	4618      	mov	r0, r3
 8008932:	3714      	adds	r7, #20
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008954:	b480      	push	{r7}
 8008956:	b08d      	sub	sp, #52	; 0x34
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	4611      	mov	r1, r2
 8008960:	461a      	mov	r2, r3
 8008962:	460b      	mov	r3, r1
 8008964:	80fb      	strh	r3, [r7, #6]
 8008966:	4613      	mov	r3, r2
 8008968:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800896a:	88bb      	ldrh	r3, [r7, #4]
 800896c:	3301      	adds	r3, #1
 800896e:	085b      	lsrs	r3, r3, #1
 8008970:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800897a:	88fa      	ldrh	r2, [r7, #6]
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	4413      	add	r3, r2
 8008980:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008984:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008986:	6a3b      	ldr	r3, [r7, #32]
 8008988:	62fb      	str	r3, [r7, #44]	; 0x2c
 800898a:	e01b      	b.n	80089c4 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800898c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008994:	3301      	adds	r3, #1
 8008996:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	b29b      	uxth	r3, r3
 800899e:	021b      	lsls	r3, r3, #8
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	461a      	mov	r2, r3
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80089b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b4:	3302      	adds	r3, #2
 80089b6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80089b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ba:	3301      	adds	r3, #1
 80089bc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80089be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c0:	3b01      	subs	r3, #1
 80089c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1e0      	bne.n	800898c <USB_WritePMA+0x38>
  }
}
 80089ca:	bf00      	nop
 80089cc:	3734      	adds	r7, #52	; 0x34
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr

080089d6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80089d6:	b480      	push	{r7}
 80089d8:	b08b      	sub	sp, #44	; 0x2c
 80089da:	af00      	add	r7, sp, #0
 80089dc:	60f8      	str	r0, [r7, #12]
 80089de:	60b9      	str	r1, [r7, #8]
 80089e0:	4611      	mov	r1, r2
 80089e2:	461a      	mov	r2, r3
 80089e4:	460b      	mov	r3, r1
 80089e6:	80fb      	strh	r3, [r7, #6]
 80089e8:	4613      	mov	r3, r2
 80089ea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80089ec:	88bb      	ldrh	r3, [r7, #4]
 80089ee:	085b      	lsrs	r3, r3, #1
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80089fc:	88fa      	ldrh	r2, [r7, #6]
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	4413      	add	r3, r2
 8008a02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a06:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a0c:	e018      	b.n	8008a40 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008a0e:	6a3b      	ldr	r3, [r7, #32]
 8008a10:	881b      	ldrh	r3, [r3, #0]
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008a16:	6a3b      	ldr	r3, [r7, #32]
 8008a18:	3302      	adds	r3, #2
 8008a1a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	3301      	adds	r3, #1
 8008a28:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	0a1b      	lsrs	r3, r3, #8
 8008a2e:	b2da      	uxtb	r2, r3
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	3301      	adds	r3, #1
 8008a38:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1e3      	bne.n	8008a0e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008a46:	88bb      	ldrh	r3, [r7, #4]
 8008a48:	f003 0301 	and.w	r3, r3, #1
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d007      	beq.n	8008a62 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008a52:	6a3b      	ldr	r3, [r7, #32]
 8008a54:	881b      	ldrh	r3, [r3, #0]
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	701a      	strb	r2, [r3, #0]
  }
}
 8008a62:	bf00      	nop
 8008a64:	372c      	adds	r7, #44	; 0x2c
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr

08008a6e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b084      	sub	sp, #16
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
 8008a76:	460b      	mov	r3, r1
 8008a78:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	7c1b      	ldrb	r3, [r3, #16]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d115      	bne.n	8008ab2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008a86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a8a:	2202      	movs	r2, #2
 8008a8c:	2181      	movs	r1, #129	; 0x81
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f001 feb0 	bl	800a7f4 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008a9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	2101      	movs	r1, #1
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f001 fea6 	bl	800a7f4 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008ab0:	e012      	b.n	8008ad8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008ab2:	2340      	movs	r3, #64	; 0x40
 8008ab4:	2202      	movs	r2, #2
 8008ab6:	2181      	movs	r1, #129	; 0x81
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f001 fe9b 	bl	800a7f4 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008ac4:	2340      	movs	r3, #64	; 0x40
 8008ac6:	2202      	movs	r2, #2
 8008ac8:	2101      	movs	r1, #1
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f001 fe92 	bl	800a7f4 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008ad8:	2308      	movs	r3, #8
 8008ada:	2203      	movs	r2, #3
 8008adc:	2182      	movs	r1, #130	; 0x82
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f001 fe88 	bl	800a7f4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008aea:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008aee:	f002 f87b 	bl	800abe8 <USBD_static_malloc>
 8008af2:	4602      	mov	r2, r0
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d102      	bne.n	8008b0a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008b04:	2301      	movs	r3, #1
 8008b06:	73fb      	strb	r3, [r7, #15]
 8008b08:	e026      	b.n	8008b58 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b10:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	7c1b      	ldrb	r3, [r3, #16]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d109      	bne.n	8008b48 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b3e:	2101      	movs	r1, #1
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f001 ffcd 	bl	800aae0 <USBD_LL_PrepareReceive>
 8008b46:	e007      	b.n	8008b58 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b4e:	2340      	movs	r3, #64	; 0x40
 8008b50:	2101      	movs	r1, #1
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f001 ffc4 	bl	800aae0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b084      	sub	sp, #16
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008b72:	2181      	movs	r1, #129	; 0x81
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f001 fe7b 	bl	800a870 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008b80:	2101      	movs	r1, #1
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f001 fe74 	bl	800a870 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008b90:	2182      	movs	r1, #130	; 0x82
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f001 fe6c 	bl	800a870 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00e      	beq.n	8008bc6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f002 f823 	bl	800ac04 <USBD_static_free>
    pdev->pClassData = NULL;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008be0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008be2:	2300      	movs	r3, #0
 8008be4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008be6:	2300      	movs	r3, #0
 8008be8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d039      	beq.n	8008c6e <USBD_CDC_Setup+0x9e>
 8008bfa:	2b20      	cmp	r3, #32
 8008bfc:	d17c      	bne.n	8008cf8 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	88db      	ldrh	r3, [r3, #6]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d029      	beq.n	8008c5a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	b25b      	sxtb	r3, r3
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	da11      	bge.n	8008c34 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	683a      	ldr	r2, [r7, #0]
 8008c1a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008c1c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	88d2      	ldrh	r2, [r2, #6]
 8008c22:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008c24:	6939      	ldr	r1, [r7, #16]
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	88db      	ldrh	r3, [r3, #6]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f001 f9fb 	bl	800a028 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008c32:	e068      	b.n	8008d06 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	785a      	ldrb	r2, [r3, #1]
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	88db      	ldrh	r3, [r3, #6]
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008c4a:	6939      	ldr	r1, [r7, #16]
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	88db      	ldrh	r3, [r3, #6]
 8008c50:	461a      	mov	r2, r3
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f001 fa16 	bl	800a084 <USBD_CtlPrepareRx>
      break;
 8008c58:	e055      	b.n	8008d06 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	7850      	ldrb	r0, [r2, #1]
 8008c66:	2200      	movs	r2, #0
 8008c68:	6839      	ldr	r1, [r7, #0]
 8008c6a:	4798      	blx	r3
      break;
 8008c6c:	e04b      	b.n	8008d06 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	785b      	ldrb	r3, [r3, #1]
 8008c72:	2b0a      	cmp	r3, #10
 8008c74:	d017      	beq.n	8008ca6 <USBD_CDC_Setup+0xd6>
 8008c76:	2b0b      	cmp	r3, #11
 8008c78:	d029      	beq.n	8008cce <USBD_CDC_Setup+0xfe>
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d133      	bne.n	8008ce6 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c84:	2b03      	cmp	r3, #3
 8008c86:	d107      	bne.n	8008c98 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008c88:	f107 030c 	add.w	r3, r7, #12
 8008c8c:	2202      	movs	r2, #2
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f001 f9c9 	bl	800a028 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c96:	e02e      	b.n	8008cf6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008c98:	6839      	ldr	r1, [r7, #0]
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f001 f959 	bl	8009f52 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	75fb      	strb	r3, [r7, #23]
          break;
 8008ca4:	e027      	b.n	8008cf6 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cac:	2b03      	cmp	r3, #3
 8008cae:	d107      	bne.n	8008cc0 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008cb0:	f107 030f 	add.w	r3, r7, #15
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f001 f9b5 	bl	800a028 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008cbe:	e01a      	b.n	8008cf6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008cc0:	6839      	ldr	r1, [r7, #0]
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f001 f945 	bl	8009f52 <USBD_CtlError>
            ret = USBD_FAIL;
 8008cc8:	2302      	movs	r3, #2
 8008cca:	75fb      	strb	r3, [r7, #23]
          break;
 8008ccc:	e013      	b.n	8008cf6 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cd4:	2b03      	cmp	r3, #3
 8008cd6:	d00d      	beq.n	8008cf4 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8008cd8:	6839      	ldr	r1, [r7, #0]
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f001 f939 	bl	8009f52 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008ce4:	e006      	b.n	8008cf4 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8008ce6:	6839      	ldr	r1, [r7, #0]
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f001 f932 	bl	8009f52 <USBD_CtlError>
          ret = USBD_FAIL;
 8008cee:	2302      	movs	r3, #2
 8008cf0:	75fb      	strb	r3, [r7, #23]
          break;
 8008cf2:	e000      	b.n	8008cf6 <USBD_CDC_Setup+0x126>
          break;
 8008cf4:	bf00      	nop
      }
      break;
 8008cf6:	e006      	b.n	8008d06 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8008cf8:	6839      	ldr	r1, [r7, #0]
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f001 f929 	bl	8009f52 <USBD_CtlError>
      ret = USBD_FAIL;
 8008d00:	2302      	movs	r3, #2
 8008d02:	75fb      	strb	r3, [r7, #23]
      break;
 8008d04:	bf00      	nop
  }

  return ret;
 8008d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3718      	adds	r7, #24
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d22:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d2a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d037      	beq.n	8008da6 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008d36:	78fa      	ldrb	r2, [r7, #3]
 8008d38:	6879      	ldr	r1, [r7, #4]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	4413      	add	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	440b      	add	r3, r1
 8008d44:	331c      	adds	r3, #28
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d026      	beq.n	8008d9a <USBD_CDC_DataIn+0x8a>
 8008d4c:	78fa      	ldrb	r2, [r7, #3]
 8008d4e:	6879      	ldr	r1, [r7, #4]
 8008d50:	4613      	mov	r3, r2
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	4413      	add	r3, r2
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	440b      	add	r3, r1
 8008d5a:	331c      	adds	r3, #28
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	78fa      	ldrb	r2, [r7, #3]
 8008d60:	68b9      	ldr	r1, [r7, #8]
 8008d62:	0152      	lsls	r2, r2, #5
 8008d64:	440a      	add	r2, r1
 8008d66:	3238      	adds	r2, #56	; 0x38
 8008d68:	6812      	ldr	r2, [r2, #0]
 8008d6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d6e:	fb02 f201 	mul.w	r2, r2, r1
 8008d72:	1a9b      	subs	r3, r3, r2
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d110      	bne.n	8008d9a <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008d78:	78fa      	ldrb	r2, [r7, #3]
 8008d7a:	6879      	ldr	r1, [r7, #4]
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	4413      	add	r3, r2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	440b      	add	r3, r1
 8008d86:	331c      	adds	r3, #28
 8008d88:	2200      	movs	r2, #0
 8008d8a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008d8c:	78f9      	ldrb	r1, [r7, #3]
 8008d8e:	2300      	movs	r3, #0
 8008d90:	2200      	movs	r2, #0
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f001 fe6a 	bl	800aa6c <USBD_LL_Transmit>
 8008d98:	e003      	b.n	8008da2 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008da2:	2300      	movs	r3, #0
 8008da4:	e000      	b.n	8008da8 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8008da6:	2302      	movs	r3, #2
  }
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	460b      	mov	r3, r1
 8008dba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dc2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008dc4:	78fb      	ldrb	r3, [r7, #3]
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f001 fec3 	bl	800ab54 <USBD_LL_GetRxDataSize>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00d      	beq.n	8008dfc <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008dee:	68fa      	ldr	r2, [r7, #12]
 8008df0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008df4:	4611      	mov	r1, r2
 8008df6:	4798      	blx	r3

    return USBD_OK;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	e000      	b.n	8008dfe <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008dfc:	2302      	movs	r3, #2
  }
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b084      	sub	sp, #16
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e14:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d015      	beq.n	8008e4c <USBD_CDC_EP0_RxReady+0x46>
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008e26:	2bff      	cmp	r3, #255	; 0xff
 8008e28:	d010      	beq.n	8008e4c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008e38:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008e40:	b292      	uxth	r2, r2
 8008e42:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	22ff      	movs	r2, #255	; 0xff
 8008e48:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
	...

08008e58 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2243      	movs	r2, #67	; 0x43
 8008e64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008e66:	4b03      	ldr	r3, [pc, #12]	; (8008e74 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr
 8008e74:	20000094 	.word	0x20000094

08008e78 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2243      	movs	r2, #67	; 0x43
 8008e84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008e86:	4b03      	ldr	r3, [pc, #12]	; (8008e94 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	370c      	adds	r7, #12
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	20000050 	.word	0x20000050

08008e98 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2243      	movs	r2, #67	; 0x43
 8008ea4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008ea6:	4b03      	ldr	r3, [pc, #12]	; (8008eb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr
 8008eb4:	200000d8 	.word	0x200000d8

08008eb8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	220a      	movs	r2, #10
 8008ec4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008ec6:	4b03      	ldr	r3, [pc, #12]	; (8008ed4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	2000000c 	.word	0x2000000c

08008ed8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b085      	sub	sp, #20
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008ee2:	2302      	movs	r3, #2
 8008ee4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d005      	beq.n	8008ef8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	683a      	ldr	r2, [r7, #0]
 8008ef0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3714      	adds	r7, #20
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr

08008f06 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008f06:	b480      	push	{r7}
 8008f08:	b087      	sub	sp, #28
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	60f8      	str	r0, [r7, #12]
 8008f0e:	60b9      	str	r1, [r7, #8]
 8008f10:	4613      	mov	r3, r2
 8008f12:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f1a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008f24:	88fa      	ldrh	r2, [r7, #6]
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	371c      	adds	r7, #28
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr

08008f3a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008f3a:	b480      	push	{r7}
 8008f3c:	b085      	sub	sp, #20
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f4a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3714      	adds	r7, #20
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b084      	sub	sp, #16
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f70:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d017      	beq.n	8008fac <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	7c1b      	ldrb	r3, [r3, #16]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d109      	bne.n	8008f98 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f8e:	2101      	movs	r1, #1
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f001 fda5 	bl	800aae0 <USBD_LL_PrepareReceive>
 8008f96:	e007      	b.n	8008fa8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f9e:	2340      	movs	r3, #64	; 0x40
 8008fa0:	2101      	movs	r1, #1
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f001 fd9c 	bl	800aae0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	e000      	b.n	8008fae <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008fac:	2302      	movs	r3, #2
  }
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b084      	sub	sp, #16
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	60f8      	str	r0, [r7, #12]
 8008fbe:	60b9      	str	r1, [r7, #8]
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d101      	bne.n	8008fce <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008fca:	2302      	movs	r3, #2
 8008fcc:	e01a      	b.n	8009004 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d003      	beq.n	8008fe0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d003      	beq.n	8008fee <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	79fa      	ldrb	r2, [r7, #7]
 8008ffa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f001 fb65 	bl	800a6cc <USBD_LL_Init>

  return USBD_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800900c:	b480      	push	{r7}
 800900e:	b085      	sub	sp, #20
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009016:	2300      	movs	r3, #0
 8009018:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d006      	beq.n	800902e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	683a      	ldr	r2, [r7, #0]
 8009024:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009028:	2300      	movs	r3, #0
 800902a:	73fb      	strb	r3, [r7, #15]
 800902c:	e001      	b.n	8009032 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800902e:	2302      	movs	r3, #2
 8009030:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009032:	7bfb      	ldrb	r3, [r7, #15]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3714      	adds	r7, #20
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f001 fba1 	bl	800a790 <USBD_LL_Start>

  return USBD_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009060:	2300      	movs	r3, #0
}
 8009062:	4618      	mov	r0, r3
 8009064:	370c      	adds	r7, #12
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr

0800906e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b084      	sub	sp, #16
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
 8009076:	460b      	mov	r3, r1
 8009078:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800907a:	2302      	movs	r3, #2
 800907c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009084:	2b00      	cmp	r3, #0
 8009086:	d00c      	beq.n	80090a2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	78fa      	ldrb	r2, [r7, #3]
 8009092:	4611      	mov	r1, r2
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	4798      	blx	r3
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d101      	bne.n	80090a2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800909e:	2300      	movs	r3, #0
 80090a0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80090a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3710      	adds	r7, #16
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	460b      	mov	r3, r1
 80090b6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	78fa      	ldrb	r2, [r7, #3]
 80090c2:	4611      	mov	r1, r2
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	4798      	blx	r3

  return USBD_OK;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3708      	adds	r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b082      	sub	sp, #8
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80090e2:	6839      	ldr	r1, [r7, #0]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f000 fef7 	bl	8009ed8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2201      	movs	r2, #1
 80090ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80090f8:	461a      	mov	r2, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009106:	f003 031f 	and.w	r3, r3, #31
 800910a:	2b01      	cmp	r3, #1
 800910c:	d00c      	beq.n	8009128 <USBD_LL_SetupStage+0x56>
 800910e:	2b01      	cmp	r3, #1
 8009110:	d302      	bcc.n	8009118 <USBD_LL_SetupStage+0x46>
 8009112:	2b02      	cmp	r3, #2
 8009114:	d010      	beq.n	8009138 <USBD_LL_SetupStage+0x66>
 8009116:	e017      	b.n	8009148 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800911e:	4619      	mov	r1, r3
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 f9cd 	bl	80094c0 <USBD_StdDevReq>
      break;
 8009126:	e01a      	b.n	800915e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800912e:	4619      	mov	r1, r3
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 fa2f 	bl	8009594 <USBD_StdItfReq>
      break;
 8009136:	e012      	b.n	800915e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800913e:	4619      	mov	r1, r3
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 fa6d 	bl	8009620 <USBD_StdEPReq>
      break;
 8009146:	e00a      	b.n	800915e <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800914e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009152:	b2db      	uxtb	r3, r3
 8009154:	4619      	mov	r1, r3
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f001 fbc0 	bl	800a8dc <USBD_LL_StallEP>
      break;
 800915c:	bf00      	nop
  }

  return USBD_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3708      	adds	r7, #8
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b086      	sub	sp, #24
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	460b      	mov	r3, r1
 8009172:	607a      	str	r2, [r7, #4]
 8009174:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009176:	7afb      	ldrb	r3, [r7, #11]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d14b      	bne.n	8009214 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009182:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800918a:	2b03      	cmp	r3, #3
 800918c:	d134      	bne.n	80091f8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	68da      	ldr	r2, [r3, #12]
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	429a      	cmp	r2, r3
 8009198:	d919      	bls.n	80091ce <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	68da      	ldr	r2, [r3, #12]
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	1ad2      	subs	r2, r2, r3
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	68da      	ldr	r2, [r3, #12]
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d203      	bcs.n	80091bc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	e002      	b.n	80091c2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	461a      	mov	r2, r3
 80091c4:	6879      	ldr	r1, [r7, #4]
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f000 ff7a 	bl	800a0c0 <USBD_CtlContinueRx>
 80091cc:	e038      	b.n	8009240 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00a      	beq.n	80091f0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80091e0:	2b03      	cmp	r3, #3
 80091e2:	d105      	bne.n	80091f0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	f000 ff77 	bl	800a0e4 <USBD_CtlSendStatus>
 80091f6:	e023      	b.n	8009240 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091fe:	2b05      	cmp	r3, #5
 8009200:	d11e      	bne.n	8009240 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2200      	movs	r2, #0
 8009206:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800920a:	2100      	movs	r1, #0
 800920c:	68f8      	ldr	r0, [r7, #12]
 800920e:	f001 fb65 	bl	800a8dc <USBD_LL_StallEP>
 8009212:	e015      	b.n	8009240 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800921a:	699b      	ldr	r3, [r3, #24]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00d      	beq.n	800923c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009226:	2b03      	cmp	r3, #3
 8009228:	d108      	bne.n	800923c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009230:	699b      	ldr	r3, [r3, #24]
 8009232:	7afa      	ldrb	r2, [r7, #11]
 8009234:	4611      	mov	r1, r2
 8009236:	68f8      	ldr	r0, [r7, #12]
 8009238:	4798      	blx	r3
 800923a:	e001      	b.n	8009240 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800923c:	2302      	movs	r3, #2
 800923e:	e000      	b.n	8009242 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3718      	adds	r7, #24
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b086      	sub	sp, #24
 800924e:	af00      	add	r7, sp, #0
 8009250:	60f8      	str	r0, [r7, #12]
 8009252:	460b      	mov	r3, r1
 8009254:	607a      	str	r2, [r7, #4]
 8009256:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009258:	7afb      	ldrb	r3, [r7, #11]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d17f      	bne.n	800935e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	3314      	adds	r3, #20
 8009262:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800926a:	2b02      	cmp	r3, #2
 800926c:	d15c      	bne.n	8009328 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	68da      	ldr	r2, [r3, #12]
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	429a      	cmp	r2, r3
 8009278:	d915      	bls.n	80092a6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	68da      	ldr	r2, [r3, #12]
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	691b      	ldr	r3, [r3, #16]
 8009282:	1ad2      	subs	r2, r2, r3
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	68db      	ldr	r3, [r3, #12]
 800928c:	b29b      	uxth	r3, r3
 800928e:	461a      	mov	r2, r3
 8009290:	6879      	ldr	r1, [r7, #4]
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f000 fee4 	bl	800a060 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009298:	2300      	movs	r3, #0
 800929a:	2200      	movs	r2, #0
 800929c:	2100      	movs	r1, #0
 800929e:	68f8      	ldr	r0, [r7, #12]
 80092a0:	f001 fc1e 	bl	800aae0 <USBD_LL_PrepareReceive>
 80092a4:	e04e      	b.n	8009344 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	697a      	ldr	r2, [r7, #20]
 80092ac:	6912      	ldr	r2, [r2, #16]
 80092ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80092b2:	fb02 f201 	mul.w	r2, r2, r1
 80092b6:	1a9b      	subs	r3, r3, r2
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d11c      	bne.n	80092f6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	689a      	ldr	r2, [r3, #8]
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d316      	bcc.n	80092f6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	689a      	ldr	r2, [r3, #8]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d20f      	bcs.n	80092f6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80092d6:	2200      	movs	r2, #0
 80092d8:	2100      	movs	r1, #0
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f000 fec0 	bl	800a060 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092e8:	2300      	movs	r3, #0
 80092ea:	2200      	movs	r2, #0
 80092ec:	2100      	movs	r1, #0
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f001 fbf6 	bl	800aae0 <USBD_LL_PrepareReceive>
 80092f4:	e026      	b.n	8009344 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00a      	beq.n	8009318 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009308:	2b03      	cmp	r3, #3
 800930a:	d105      	bne.n	8009318 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009318:	2180      	movs	r1, #128	; 0x80
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f001 fade 	bl	800a8dc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009320:	68f8      	ldr	r0, [r7, #12]
 8009322:	f000 fef2 	bl	800a10a <USBD_CtlReceiveStatus>
 8009326:	e00d      	b.n	8009344 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800932e:	2b04      	cmp	r3, #4
 8009330:	d004      	beq.n	800933c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009338:	2b00      	cmp	r3, #0
 800933a:	d103      	bne.n	8009344 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800933c:	2180      	movs	r1, #128	; 0x80
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f001 facc 	bl	800a8dc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800934a:	2b01      	cmp	r3, #1
 800934c:	d11d      	bne.n	800938a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	f7ff fe82 	bl	8009058 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800935c:	e015      	b.n	800938a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009364:	695b      	ldr	r3, [r3, #20]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00d      	beq.n	8009386 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009370:	2b03      	cmp	r3, #3
 8009372:	d108      	bne.n	8009386 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800937a:	695b      	ldr	r3, [r3, #20]
 800937c:	7afa      	ldrb	r2, [r7, #11]
 800937e:	4611      	mov	r1, r2
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	4798      	blx	r3
 8009384:	e001      	b.n	800938a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009386:	2302      	movs	r3, #2
 8009388:	e000      	b.n	800938c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3718      	adds	r7, #24
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800939c:	2340      	movs	r3, #64	; 0x40
 800939e:	2200      	movs	r2, #0
 80093a0:	2100      	movs	r1, #0
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f001 fa26 	bl	800a7f4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2240      	movs	r2, #64	; 0x40
 80093b4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80093b8:	2340      	movs	r3, #64	; 0x40
 80093ba:	2200      	movs	r2, #0
 80093bc:	2180      	movs	r1, #128	; 0x80
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f001 fa18 	bl	800a7f4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2240      	movs	r2, #64	; 0x40
 80093ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d009      	beq.n	800940c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	6852      	ldr	r2, [r2, #4]
 8009404:	b2d2      	uxtb	r2, r2
 8009406:	4611      	mov	r1, r2
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	4798      	blx	r3
  }

  return USBD_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	3708      	adds	r7, #8
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009416:	b480      	push	{r7}
 8009418:	b083      	sub	sp, #12
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
 800941e:	460b      	mov	r3, r1
 8009420:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	78fa      	ldrb	r2, [r7, #3]
 8009426:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	370c      	adds	r7, #12
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr

08009436 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009436:	b480      	push	{r7}
 8009438:	b083      	sub	sp, #12
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2204      	movs	r2, #4
 800944e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800946e:	2b04      	cmp	r3, #4
 8009470:	d105      	bne.n	800947e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800947e:	2300      	movs	r3, #0
}
 8009480:	4618      	mov	r0, r3
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800949a:	2b03      	cmp	r3, #3
 800949c:	d10b      	bne.n	80094b6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094a4:	69db      	ldr	r3, [r3, #28]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d005      	beq.n	80094b6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094b0:	69db      	ldr	r3, [r3, #28]
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80094b6:	2300      	movs	r3, #0
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3708      	adds	r7, #8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094ca:	2300      	movs	r3, #0
 80094cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094d6:	2b20      	cmp	r3, #32
 80094d8:	d004      	beq.n	80094e4 <USBD_StdDevReq+0x24>
 80094da:	2b40      	cmp	r3, #64	; 0x40
 80094dc:	d002      	beq.n	80094e4 <USBD_StdDevReq+0x24>
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d008      	beq.n	80094f4 <USBD_StdDevReq+0x34>
 80094e2:	e04c      	b.n	800957e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	4798      	blx	r3
      break;
 80094f2:	e049      	b.n	8009588 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	785b      	ldrb	r3, [r3, #1]
 80094f8:	2b09      	cmp	r3, #9
 80094fa:	d83a      	bhi.n	8009572 <USBD_StdDevReq+0xb2>
 80094fc:	a201      	add	r2, pc, #4	; (adr r2, 8009504 <USBD_StdDevReq+0x44>)
 80094fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009502:	bf00      	nop
 8009504:	08009555 	.word	0x08009555
 8009508:	08009569 	.word	0x08009569
 800950c:	08009573 	.word	0x08009573
 8009510:	0800955f 	.word	0x0800955f
 8009514:	08009573 	.word	0x08009573
 8009518:	08009537 	.word	0x08009537
 800951c:	0800952d 	.word	0x0800952d
 8009520:	08009573 	.word	0x08009573
 8009524:	0800954b 	.word	0x0800954b
 8009528:	08009541 	.word	0x08009541
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800952c:	6839      	ldr	r1, [r7, #0]
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f9d4 	bl	80098dc <USBD_GetDescriptor>
          break;
 8009534:	e022      	b.n	800957c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009536:	6839      	ldr	r1, [r7, #0]
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fb61 	bl	8009c00 <USBD_SetAddress>
          break;
 800953e:	e01d      	b.n	800957c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009540:	6839      	ldr	r1, [r7, #0]
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 fb9e 	bl	8009c84 <USBD_SetConfig>
          break;
 8009548:	e018      	b.n	800957c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800954a:	6839      	ldr	r1, [r7, #0]
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 fc27 	bl	8009da0 <USBD_GetConfig>
          break;
 8009552:	e013      	b.n	800957c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009554:	6839      	ldr	r1, [r7, #0]
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fc56 	bl	8009e08 <USBD_GetStatus>
          break;
 800955c:	e00e      	b.n	800957c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800955e:	6839      	ldr	r1, [r7, #0]
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 fc84 	bl	8009e6e <USBD_SetFeature>
          break;
 8009566:	e009      	b.n	800957c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009568:	6839      	ldr	r1, [r7, #0]
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 fc93 	bl	8009e96 <USBD_ClrFeature>
          break;
 8009570:	e004      	b.n	800957c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 fcec 	bl	8009f52 <USBD_CtlError>
          break;
 800957a:	bf00      	nop
      }
      break;
 800957c:	e004      	b.n	8009588 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800957e:	6839      	ldr	r1, [r7, #0]
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 fce6 	bl	8009f52 <USBD_CtlError>
      break;
 8009586:	bf00      	nop
  }

  return ret;
 8009588:	7bfb      	ldrb	r3, [r7, #15]
}
 800958a:	4618      	mov	r0, r3
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop

08009594 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800959e:	2300      	movs	r3, #0
 80095a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095aa:	2b20      	cmp	r3, #32
 80095ac:	d003      	beq.n	80095b6 <USBD_StdItfReq+0x22>
 80095ae:	2b40      	cmp	r3, #64	; 0x40
 80095b0:	d001      	beq.n	80095b6 <USBD_StdItfReq+0x22>
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d12a      	bne.n	800960c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095bc:	3b01      	subs	r3, #1
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d81d      	bhi.n	80095fe <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	889b      	ldrh	r3, [r3, #4]
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d813      	bhi.n	80095f4 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	6839      	ldr	r1, [r7, #0]
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	4798      	blx	r3
 80095da:	4603      	mov	r3, r0
 80095dc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	88db      	ldrh	r3, [r3, #6]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d110      	bne.n	8009608 <USBD_StdItfReq+0x74>
 80095e6:	7bfb      	ldrb	r3, [r7, #15]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d10d      	bne.n	8009608 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 fd79 	bl	800a0e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80095f2:	e009      	b.n	8009608 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80095f4:	6839      	ldr	r1, [r7, #0]
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 fcab 	bl	8009f52 <USBD_CtlError>
          break;
 80095fc:	e004      	b.n	8009608 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80095fe:	6839      	ldr	r1, [r7, #0]
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 fca6 	bl	8009f52 <USBD_CtlError>
          break;
 8009606:	e000      	b.n	800960a <USBD_StdItfReq+0x76>
          break;
 8009608:	bf00      	nop
      }
      break;
 800960a:	e004      	b.n	8009616 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800960c:	6839      	ldr	r1, [r7, #0]
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 fc9f 	bl	8009f52 <USBD_CtlError>
      break;
 8009614:	bf00      	nop
  }

  return USBD_OK;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	3710      	adds	r7, #16
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800962a:	2300      	movs	r3, #0
 800962c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	889b      	ldrh	r3, [r3, #4]
 8009632:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800963c:	2b20      	cmp	r3, #32
 800963e:	d004      	beq.n	800964a <USBD_StdEPReq+0x2a>
 8009640:	2b40      	cmp	r3, #64	; 0x40
 8009642:	d002      	beq.n	800964a <USBD_StdEPReq+0x2a>
 8009644:	2b00      	cmp	r3, #0
 8009646:	d008      	beq.n	800965a <USBD_StdEPReq+0x3a>
 8009648:	e13d      	b.n	80098c6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	6839      	ldr	r1, [r7, #0]
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	4798      	blx	r3
      break;
 8009658:	e13a      	b.n	80098d0 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009662:	2b20      	cmp	r3, #32
 8009664:	d10a      	bne.n	800967c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	6839      	ldr	r1, [r7, #0]
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	4798      	blx	r3
 8009674:	4603      	mov	r3, r0
 8009676:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009678:	7bfb      	ldrb	r3, [r7, #15]
 800967a:	e12a      	b.n	80098d2 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	785b      	ldrb	r3, [r3, #1]
 8009680:	2b01      	cmp	r3, #1
 8009682:	d03e      	beq.n	8009702 <USBD_StdEPReq+0xe2>
 8009684:	2b03      	cmp	r3, #3
 8009686:	d002      	beq.n	800968e <USBD_StdEPReq+0x6e>
 8009688:	2b00      	cmp	r3, #0
 800968a:	d070      	beq.n	800976e <USBD_StdEPReq+0x14e>
 800968c:	e115      	b.n	80098ba <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009694:	2b02      	cmp	r3, #2
 8009696:	d002      	beq.n	800969e <USBD_StdEPReq+0x7e>
 8009698:	2b03      	cmp	r3, #3
 800969a:	d015      	beq.n	80096c8 <USBD_StdEPReq+0xa8>
 800969c:	e02b      	b.n	80096f6 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800969e:	7bbb      	ldrb	r3, [r7, #14]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00c      	beq.n	80096be <USBD_StdEPReq+0x9e>
 80096a4:	7bbb      	ldrb	r3, [r7, #14]
 80096a6:	2b80      	cmp	r3, #128	; 0x80
 80096a8:	d009      	beq.n	80096be <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80096aa:	7bbb      	ldrb	r3, [r7, #14]
 80096ac:	4619      	mov	r1, r3
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f001 f914 	bl	800a8dc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80096b4:	2180      	movs	r1, #128	; 0x80
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f001 f910 	bl	800a8dc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096bc:	e020      	b.n	8009700 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80096be:	6839      	ldr	r1, [r7, #0]
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 fc46 	bl	8009f52 <USBD_CtlError>
              break;
 80096c6:	e01b      	b.n	8009700 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	885b      	ldrh	r3, [r3, #2]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10e      	bne.n	80096ee <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80096d0:	7bbb      	ldrb	r3, [r7, #14]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d00b      	beq.n	80096ee <USBD_StdEPReq+0xce>
 80096d6:	7bbb      	ldrb	r3, [r7, #14]
 80096d8:	2b80      	cmp	r3, #128	; 0x80
 80096da:	d008      	beq.n	80096ee <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	88db      	ldrh	r3, [r3, #6]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d104      	bne.n	80096ee <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80096e4:	7bbb      	ldrb	r3, [r7, #14]
 80096e6:	4619      	mov	r1, r3
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f001 f8f7 	bl	800a8dc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 fcf8 	bl	800a0e4 <USBD_CtlSendStatus>

              break;
 80096f4:	e004      	b.n	8009700 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80096f6:	6839      	ldr	r1, [r7, #0]
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 fc2a 	bl	8009f52 <USBD_CtlError>
              break;
 80096fe:	bf00      	nop
          }
          break;
 8009700:	e0e0      	b.n	80098c4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009708:	2b02      	cmp	r3, #2
 800970a:	d002      	beq.n	8009712 <USBD_StdEPReq+0xf2>
 800970c:	2b03      	cmp	r3, #3
 800970e:	d015      	beq.n	800973c <USBD_StdEPReq+0x11c>
 8009710:	e026      	b.n	8009760 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009712:	7bbb      	ldrb	r3, [r7, #14]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00c      	beq.n	8009732 <USBD_StdEPReq+0x112>
 8009718:	7bbb      	ldrb	r3, [r7, #14]
 800971a:	2b80      	cmp	r3, #128	; 0x80
 800971c:	d009      	beq.n	8009732 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800971e:	7bbb      	ldrb	r3, [r7, #14]
 8009720:	4619      	mov	r1, r3
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f001 f8da 	bl	800a8dc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009728:	2180      	movs	r1, #128	; 0x80
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f001 f8d6 	bl	800a8dc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009730:	e01c      	b.n	800976c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8009732:	6839      	ldr	r1, [r7, #0]
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 fc0c 	bl	8009f52 <USBD_CtlError>
              break;
 800973a:	e017      	b.n	800976c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	885b      	ldrh	r3, [r3, #2]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d112      	bne.n	800976a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009744:	7bbb      	ldrb	r3, [r7, #14]
 8009746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800974a:	2b00      	cmp	r3, #0
 800974c:	d004      	beq.n	8009758 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800974e:	7bbb      	ldrb	r3, [r7, #14]
 8009750:	4619      	mov	r1, r3
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f001 f8f8 	bl	800a948 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 fcc3 	bl	800a0e4 <USBD_CtlSendStatus>
              }
              break;
 800975e:	e004      	b.n	800976a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8009760:	6839      	ldr	r1, [r7, #0]
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 fbf5 	bl	8009f52 <USBD_CtlError>
              break;
 8009768:	e000      	b.n	800976c <USBD_StdEPReq+0x14c>
              break;
 800976a:	bf00      	nop
          }
          break;
 800976c:	e0aa      	b.n	80098c4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009774:	2b02      	cmp	r3, #2
 8009776:	d002      	beq.n	800977e <USBD_StdEPReq+0x15e>
 8009778:	2b03      	cmp	r3, #3
 800977a:	d032      	beq.n	80097e2 <USBD_StdEPReq+0x1c2>
 800977c:	e097      	b.n	80098ae <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800977e:	7bbb      	ldrb	r3, [r7, #14]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d007      	beq.n	8009794 <USBD_StdEPReq+0x174>
 8009784:	7bbb      	ldrb	r3, [r7, #14]
 8009786:	2b80      	cmp	r3, #128	; 0x80
 8009788:	d004      	beq.n	8009794 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800978a:	6839      	ldr	r1, [r7, #0]
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 fbe0 	bl	8009f52 <USBD_CtlError>
                break;
 8009792:	e091      	b.n	80098b8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009794:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009798:	2b00      	cmp	r3, #0
 800979a:	da0b      	bge.n	80097b4 <USBD_StdEPReq+0x194>
 800979c:	7bbb      	ldrb	r3, [r7, #14]
 800979e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097a2:	4613      	mov	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	4413      	add	r3, r2
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	3310      	adds	r3, #16
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	4413      	add	r3, r2
 80097b0:	3304      	adds	r3, #4
 80097b2:	e00b      	b.n	80097cc <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80097b4:	7bbb      	ldrb	r3, [r7, #14]
 80097b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097ba:	4613      	mov	r3, r2
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4413      	add	r3, r2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	4413      	add	r3, r2
 80097ca:	3304      	adds	r3, #4
 80097cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	2200      	movs	r2, #0
 80097d2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	2202      	movs	r2, #2
 80097d8:	4619      	mov	r1, r3
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 fc24 	bl	800a028 <USBD_CtlSendData>
              break;
 80097e0:	e06a      	b.n	80098b8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80097e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	da11      	bge.n	800980e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80097ea:	7bbb      	ldrb	r3, [r7, #14]
 80097ec:	f003 020f 	and.w	r2, r3, #15
 80097f0:	6879      	ldr	r1, [r7, #4]
 80097f2:	4613      	mov	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4413      	add	r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	440b      	add	r3, r1
 80097fc:	3318      	adds	r3, #24
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d117      	bne.n	8009834 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8009804:	6839      	ldr	r1, [r7, #0]
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 fba3 	bl	8009f52 <USBD_CtlError>
                  break;
 800980c:	e054      	b.n	80098b8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800980e:	7bbb      	ldrb	r3, [r7, #14]
 8009810:	f003 020f 	and.w	r2, r3, #15
 8009814:	6879      	ldr	r1, [r7, #4]
 8009816:	4613      	mov	r3, r2
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	440b      	add	r3, r1
 8009820:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d104      	bne.n	8009834 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800982a:	6839      	ldr	r1, [r7, #0]
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fb90 	bl	8009f52 <USBD_CtlError>
                  break;
 8009832:	e041      	b.n	80098b8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009834:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009838:	2b00      	cmp	r3, #0
 800983a:	da0b      	bge.n	8009854 <USBD_StdEPReq+0x234>
 800983c:	7bbb      	ldrb	r3, [r7, #14]
 800983e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009842:	4613      	mov	r3, r2
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	4413      	add	r3, r2
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	3310      	adds	r3, #16
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	4413      	add	r3, r2
 8009850:	3304      	adds	r3, #4
 8009852:	e00b      	b.n	800986c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009854:	7bbb      	ldrb	r3, [r7, #14]
 8009856:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800985a:	4613      	mov	r3, r2
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	4413      	add	r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	4413      	add	r3, r2
 800986a:	3304      	adds	r3, #4
 800986c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800986e:	7bbb      	ldrb	r3, [r7, #14]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d002      	beq.n	800987a <USBD_StdEPReq+0x25a>
 8009874:	7bbb      	ldrb	r3, [r7, #14]
 8009876:	2b80      	cmp	r3, #128	; 0x80
 8009878:	d103      	bne.n	8009882 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	2200      	movs	r2, #0
 800987e:	601a      	str	r2, [r3, #0]
 8009880:	e00e      	b.n	80098a0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009882:	7bbb      	ldrb	r3, [r7, #14]
 8009884:	4619      	mov	r1, r3
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f001 f894 	bl	800a9b4 <USBD_LL_IsStallEP>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d003      	beq.n	800989a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	2201      	movs	r2, #1
 8009896:	601a      	str	r2, [r3, #0]
 8009898:	e002      	b.n	80098a0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	2200      	movs	r2, #0
 800989e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	2202      	movs	r2, #2
 80098a4:	4619      	mov	r1, r3
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 fbbe 	bl	800a028 <USBD_CtlSendData>
              break;
 80098ac:	e004      	b.n	80098b8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80098ae:	6839      	ldr	r1, [r7, #0]
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 fb4e 	bl	8009f52 <USBD_CtlError>
              break;
 80098b6:	bf00      	nop
          }
          break;
 80098b8:	e004      	b.n	80098c4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80098ba:	6839      	ldr	r1, [r7, #0]
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 fb48 	bl	8009f52 <USBD_CtlError>
          break;
 80098c2:	bf00      	nop
      }
      break;
 80098c4:	e004      	b.n	80098d0 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80098c6:	6839      	ldr	r1, [r7, #0]
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 fb42 	bl	8009f52 <USBD_CtlError>
      break;
 80098ce:	bf00      	nop
  }

  return ret;
 80098d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
	...

080098dc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b084      	sub	sp, #16
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80098e6:	2300      	movs	r3, #0
 80098e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80098ea:	2300      	movs	r3, #0
 80098ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80098ee:	2300      	movs	r3, #0
 80098f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	885b      	ldrh	r3, [r3, #2]
 80098f6:	0a1b      	lsrs	r3, r3, #8
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	3b01      	subs	r3, #1
 80098fc:	2b0e      	cmp	r3, #14
 80098fe:	f200 8152 	bhi.w	8009ba6 <USBD_GetDescriptor+0x2ca>
 8009902:	a201      	add	r2, pc, #4	; (adr r2, 8009908 <USBD_GetDescriptor+0x2c>)
 8009904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009908:	08009979 	.word	0x08009979
 800990c:	08009991 	.word	0x08009991
 8009910:	080099d1 	.word	0x080099d1
 8009914:	08009ba7 	.word	0x08009ba7
 8009918:	08009ba7 	.word	0x08009ba7
 800991c:	08009b47 	.word	0x08009b47
 8009920:	08009b73 	.word	0x08009b73
 8009924:	08009ba7 	.word	0x08009ba7
 8009928:	08009ba7 	.word	0x08009ba7
 800992c:	08009ba7 	.word	0x08009ba7
 8009930:	08009ba7 	.word	0x08009ba7
 8009934:	08009ba7 	.word	0x08009ba7
 8009938:	08009ba7 	.word	0x08009ba7
 800993c:	08009ba7 	.word	0x08009ba7
 8009940:	08009945 	.word	0x08009945
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800994a:	69db      	ldr	r3, [r3, #28]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d00b      	beq.n	8009968 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009956:	69db      	ldr	r3, [r3, #28]
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	7c12      	ldrb	r2, [r2, #16]
 800995c:	f107 0108 	add.w	r1, r7, #8
 8009960:	4610      	mov	r0, r2
 8009962:	4798      	blx	r3
 8009964:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009966:	e126      	b.n	8009bb6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009968:	6839      	ldr	r1, [r7, #0]
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 faf1 	bl	8009f52 <USBD_CtlError>
        err++;
 8009970:	7afb      	ldrb	r3, [r7, #11]
 8009972:	3301      	adds	r3, #1
 8009974:	72fb      	strb	r3, [r7, #11]
      break;
 8009976:	e11e      	b.n	8009bb6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	7c12      	ldrb	r2, [r2, #16]
 8009984:	f107 0108 	add.w	r1, r7, #8
 8009988:	4610      	mov	r0, r2
 800998a:	4798      	blx	r3
 800998c:	60f8      	str	r0, [r7, #12]
      break;
 800998e:	e112      	b.n	8009bb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	7c1b      	ldrb	r3, [r3, #16]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d10d      	bne.n	80099b4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800999e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a0:	f107 0208 	add.w	r2, r7, #8
 80099a4:	4610      	mov	r0, r2
 80099a6:	4798      	blx	r3
 80099a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	3301      	adds	r3, #1
 80099ae:	2202      	movs	r2, #2
 80099b0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80099b2:	e100      	b.n	8009bb6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099bc:	f107 0208 	add.w	r2, r7, #8
 80099c0:	4610      	mov	r0, r2
 80099c2:	4798      	blx	r3
 80099c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	3301      	adds	r3, #1
 80099ca:	2202      	movs	r2, #2
 80099cc:	701a      	strb	r2, [r3, #0]
      break;
 80099ce:	e0f2      	b.n	8009bb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	885b      	ldrh	r3, [r3, #2]
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	2b05      	cmp	r3, #5
 80099d8:	f200 80ac 	bhi.w	8009b34 <USBD_GetDescriptor+0x258>
 80099dc:	a201      	add	r2, pc, #4	; (adr r2, 80099e4 <USBD_GetDescriptor+0x108>)
 80099de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e2:	bf00      	nop
 80099e4:	080099fd 	.word	0x080099fd
 80099e8:	08009a31 	.word	0x08009a31
 80099ec:	08009a65 	.word	0x08009a65
 80099f0:	08009a99 	.word	0x08009a99
 80099f4:	08009acd 	.word	0x08009acd
 80099f8:	08009b01 	.word	0x08009b01
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d00b      	beq.n	8009a20 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	7c12      	ldrb	r2, [r2, #16]
 8009a14:	f107 0108 	add.w	r1, r7, #8
 8009a18:	4610      	mov	r0, r2
 8009a1a:	4798      	blx	r3
 8009a1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a1e:	e091      	b.n	8009b44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a20:	6839      	ldr	r1, [r7, #0]
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fa95 	bl	8009f52 <USBD_CtlError>
            err++;
 8009a28:	7afb      	ldrb	r3, [r7, #11]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a2e:	e089      	b.n	8009b44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00b      	beq.n	8009a54 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	7c12      	ldrb	r2, [r2, #16]
 8009a48:	f107 0108 	add.w	r1, r7, #8
 8009a4c:	4610      	mov	r0, r2
 8009a4e:	4798      	blx	r3
 8009a50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a52:	e077      	b.n	8009b44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a54:	6839      	ldr	r1, [r7, #0]
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 fa7b 	bl	8009f52 <USBD_CtlError>
            err++;
 8009a5c:	7afb      	ldrb	r3, [r7, #11]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	72fb      	strb	r3, [r7, #11]
          break;
 8009a62:	e06f      	b.n	8009b44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d00b      	beq.n	8009a88 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	7c12      	ldrb	r2, [r2, #16]
 8009a7c:	f107 0108 	add.w	r1, r7, #8
 8009a80:	4610      	mov	r0, r2
 8009a82:	4798      	blx	r3
 8009a84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a86:	e05d      	b.n	8009b44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a88:	6839      	ldr	r1, [r7, #0]
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fa61 	bl	8009f52 <USBD_CtlError>
            err++;
 8009a90:	7afb      	ldrb	r3, [r7, #11]
 8009a92:	3301      	adds	r3, #1
 8009a94:	72fb      	strb	r3, [r7, #11]
          break;
 8009a96:	e055      	b.n	8009b44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a9e:	691b      	ldr	r3, [r3, #16]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00b      	beq.n	8009abc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009aaa:	691b      	ldr	r3, [r3, #16]
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	7c12      	ldrb	r2, [r2, #16]
 8009ab0:	f107 0108 	add.w	r1, r7, #8
 8009ab4:	4610      	mov	r0, r2
 8009ab6:	4798      	blx	r3
 8009ab8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aba:	e043      	b.n	8009b44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009abc:	6839      	ldr	r1, [r7, #0]
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fa47 	bl	8009f52 <USBD_CtlError>
            err++;
 8009ac4:	7afb      	ldrb	r3, [r7, #11]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	72fb      	strb	r3, [r7, #11]
          break;
 8009aca:	e03b      	b.n	8009b44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ad2:	695b      	ldr	r3, [r3, #20]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00b      	beq.n	8009af0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ade:	695b      	ldr	r3, [r3, #20]
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	7c12      	ldrb	r2, [r2, #16]
 8009ae4:	f107 0108 	add.w	r1, r7, #8
 8009ae8:	4610      	mov	r0, r2
 8009aea:	4798      	blx	r3
 8009aec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aee:	e029      	b.n	8009b44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009af0:	6839      	ldr	r1, [r7, #0]
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 fa2d 	bl	8009f52 <USBD_CtlError>
            err++;
 8009af8:	7afb      	ldrb	r3, [r7, #11]
 8009afa:	3301      	adds	r3, #1
 8009afc:	72fb      	strb	r3, [r7, #11]
          break;
 8009afe:	e021      	b.n	8009b44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b06:	699b      	ldr	r3, [r3, #24]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00b      	beq.n	8009b24 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b12:	699b      	ldr	r3, [r3, #24]
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	7c12      	ldrb	r2, [r2, #16]
 8009b18:	f107 0108 	add.w	r1, r7, #8
 8009b1c:	4610      	mov	r0, r2
 8009b1e:	4798      	blx	r3
 8009b20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b22:	e00f      	b.n	8009b44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b24:	6839      	ldr	r1, [r7, #0]
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 fa13 	bl	8009f52 <USBD_CtlError>
            err++;
 8009b2c:	7afb      	ldrb	r3, [r7, #11]
 8009b2e:	3301      	adds	r3, #1
 8009b30:	72fb      	strb	r3, [r7, #11]
          break;
 8009b32:	e007      	b.n	8009b44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009b34:	6839      	ldr	r1, [r7, #0]
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 fa0b 	bl	8009f52 <USBD_CtlError>
          err++;
 8009b3c:	7afb      	ldrb	r3, [r7, #11]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009b42:	e038      	b.n	8009bb6 <USBD_GetDescriptor+0x2da>
 8009b44:	e037      	b.n	8009bb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	7c1b      	ldrb	r3, [r3, #16]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d109      	bne.n	8009b62 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b56:	f107 0208 	add.w	r2, r7, #8
 8009b5a:	4610      	mov	r0, r2
 8009b5c:	4798      	blx	r3
 8009b5e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b60:	e029      	b.n	8009bb6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009b62:	6839      	ldr	r1, [r7, #0]
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 f9f4 	bl	8009f52 <USBD_CtlError>
        err++;
 8009b6a:	7afb      	ldrb	r3, [r7, #11]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	72fb      	strb	r3, [r7, #11]
      break;
 8009b70:	e021      	b.n	8009bb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	7c1b      	ldrb	r3, [r3, #16]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d10d      	bne.n	8009b96 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b82:	f107 0208 	add.w	r2, r7, #8
 8009b86:	4610      	mov	r0, r2
 8009b88:	4798      	blx	r3
 8009b8a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	3301      	adds	r3, #1
 8009b90:	2207      	movs	r2, #7
 8009b92:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b94:	e00f      	b.n	8009bb6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009b96:	6839      	ldr	r1, [r7, #0]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 f9da 	bl	8009f52 <USBD_CtlError>
        err++;
 8009b9e:	7afb      	ldrb	r3, [r7, #11]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	72fb      	strb	r3, [r7, #11]
      break;
 8009ba4:	e007      	b.n	8009bb6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009ba6:	6839      	ldr	r1, [r7, #0]
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f9d2 	bl	8009f52 <USBD_CtlError>
      err++;
 8009bae:	7afb      	ldrb	r3, [r7, #11]
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	72fb      	strb	r3, [r7, #11]
      break;
 8009bb4:	bf00      	nop
  }

  if (err != 0U)
 8009bb6:	7afb      	ldrb	r3, [r7, #11]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d11c      	bne.n	8009bf6 <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009bbc:	893b      	ldrh	r3, [r7, #8]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d011      	beq.n	8009be6 <USBD_GetDescriptor+0x30a>
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	88db      	ldrh	r3, [r3, #6]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00d      	beq.n	8009be6 <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	88da      	ldrh	r2, [r3, #6]
 8009bce:	893b      	ldrh	r3, [r7, #8]
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	bf28      	it	cs
 8009bd4:	4613      	movcs	r3, r2
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009bda:	893b      	ldrh	r3, [r7, #8]
 8009bdc:	461a      	mov	r2, r3
 8009bde:	68f9      	ldr	r1, [r7, #12]
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 fa21 	bl	800a028 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	88db      	ldrh	r3, [r3, #6]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d104      	bne.n	8009bf8 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 fa78 	bl	800a0e4 <USBD_CtlSendStatus>
 8009bf4:	e000      	b.n	8009bf8 <USBD_GetDescriptor+0x31c>
    return;
 8009bf6:	bf00      	nop
    }
  }
}
 8009bf8:	3710      	adds	r7, #16
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop

08009c00 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	889b      	ldrh	r3, [r3, #4]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d130      	bne.n	8009c74 <USBD_SetAddress+0x74>
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	88db      	ldrh	r3, [r3, #6]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d12c      	bne.n	8009c74 <USBD_SetAddress+0x74>
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	885b      	ldrh	r3, [r3, #2]
 8009c1e:	2b7f      	cmp	r3, #127	; 0x7f
 8009c20:	d828      	bhi.n	8009c74 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	885b      	ldrh	r3, [r3, #2]
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c34:	2b03      	cmp	r3, #3
 8009c36:	d104      	bne.n	8009c42 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009c38:	6839      	ldr	r1, [r7, #0]
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 f989 	bl	8009f52 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c40:	e01c      	b.n	8009c7c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	7bfa      	ldrb	r2, [r7, #15]
 8009c46:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c4a:	7bfb      	ldrb	r3, [r7, #15]
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 fed6 	bl	800aa00 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fa45 	bl	800a0e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c5a:	7bfb      	ldrb	r3, [r7, #15]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d004      	beq.n	8009c6a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2202      	movs	r2, #2
 8009c64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c68:	e008      	b.n	8009c7c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c72:	e003      	b.n	8009c7c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c74:	6839      	ldr	r1, [r7, #0]
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 f96b 	bl	8009f52 <USBD_CtlError>
  }
}
 8009c7c:	bf00      	nop
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	885b      	ldrh	r3, [r3, #2]
 8009c92:	b2da      	uxtb	r2, r3
 8009c94:	4b41      	ldr	r3, [pc, #260]	; (8009d9c <USBD_SetConfig+0x118>)
 8009c96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009c98:	4b40      	ldr	r3, [pc, #256]	; (8009d9c <USBD_SetConfig+0x118>)
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d904      	bls.n	8009caa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009ca0:	6839      	ldr	r1, [r7, #0]
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 f955 	bl	8009f52 <USBD_CtlError>
 8009ca8:	e075      	b.n	8009d96 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	d002      	beq.n	8009cba <USBD_SetConfig+0x36>
 8009cb4:	2b03      	cmp	r3, #3
 8009cb6:	d023      	beq.n	8009d00 <USBD_SetConfig+0x7c>
 8009cb8:	e062      	b.n	8009d80 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009cba:	4b38      	ldr	r3, [pc, #224]	; (8009d9c <USBD_SetConfig+0x118>)
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d01a      	beq.n	8009cf8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009cc2:	4b36      	ldr	r3, [pc, #216]	; (8009d9c <USBD_SetConfig+0x118>)
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2203      	movs	r2, #3
 8009cd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009cd4:	4b31      	ldr	r3, [pc, #196]	; (8009d9c <USBD_SetConfig+0x118>)
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	4619      	mov	r1, r3
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f7ff f9c7 	bl	800906e <USBD_SetClassConfig>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d104      	bne.n	8009cf0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009ce6:	6839      	ldr	r1, [r7, #0]
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 f932 	bl	8009f52 <USBD_CtlError>
            return;
 8009cee:	e052      	b.n	8009d96 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 f9f7 	bl	800a0e4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009cf6:	e04e      	b.n	8009d96 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f9f3 	bl	800a0e4 <USBD_CtlSendStatus>
        break;
 8009cfe:	e04a      	b.n	8009d96 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009d00:	4b26      	ldr	r3, [pc, #152]	; (8009d9c <USBD_SetConfig+0x118>)
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d112      	bne.n	8009d2e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2202      	movs	r2, #2
 8009d0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009d10:	4b22      	ldr	r3, [pc, #136]	; (8009d9c <USBD_SetConfig+0x118>)
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	461a      	mov	r2, r3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009d1a:	4b20      	ldr	r3, [pc, #128]	; (8009d9c <USBD_SetConfig+0x118>)
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f7ff f9c3 	bl	80090ac <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 f9dc 	bl	800a0e4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009d2c:	e033      	b.n	8009d96 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009d2e:	4b1b      	ldr	r3, [pc, #108]	; (8009d9c <USBD_SetConfig+0x118>)
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	461a      	mov	r2, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d01d      	beq.n	8009d78 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	4619      	mov	r1, r3
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f7ff f9b1 	bl	80090ac <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009d4a:	4b14      	ldr	r3, [pc, #80]	; (8009d9c <USBD_SetConfig+0x118>)
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	461a      	mov	r2, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009d54:	4b11      	ldr	r3, [pc, #68]	; (8009d9c <USBD_SetConfig+0x118>)
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	4619      	mov	r1, r3
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f7ff f987 	bl	800906e <USBD_SetClassConfig>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	d104      	bne.n	8009d70 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009d66:	6839      	ldr	r1, [r7, #0]
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 f8f2 	bl	8009f52 <USBD_CtlError>
            return;
 8009d6e:	e012      	b.n	8009d96 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 f9b7 	bl	800a0e4 <USBD_CtlSendStatus>
        break;
 8009d76:	e00e      	b.n	8009d96 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 f9b3 	bl	800a0e4 <USBD_CtlSendStatus>
        break;
 8009d7e:	e00a      	b.n	8009d96 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009d80:	6839      	ldr	r1, [r7, #0]
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 f8e5 	bl	8009f52 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009d88:	4b04      	ldr	r3, [pc, #16]	; (8009d9c <USBD_SetConfig+0x118>)
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f7ff f98c 	bl	80090ac <USBD_ClrClassConfig>
        break;
 8009d94:	bf00      	nop
    }
  }
}
 8009d96:	3708      	adds	r7, #8
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	20000335 	.word	0x20000335

08009da0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	88db      	ldrh	r3, [r3, #6]
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d004      	beq.n	8009dbc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009db2:	6839      	ldr	r1, [r7, #0]
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 f8cc 	bl	8009f52 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009dba:	e021      	b.n	8009e00 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	db17      	blt.n	8009df6 <USBD_GetConfig+0x56>
 8009dc6:	2b02      	cmp	r3, #2
 8009dc8:	dd02      	ble.n	8009dd0 <USBD_GetConfig+0x30>
 8009dca:	2b03      	cmp	r3, #3
 8009dcc:	d00b      	beq.n	8009de6 <USBD_GetConfig+0x46>
 8009dce:	e012      	b.n	8009df6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	3308      	adds	r3, #8
 8009dda:	2201      	movs	r2, #1
 8009ddc:	4619      	mov	r1, r3
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 f922 	bl	800a028 <USBD_CtlSendData>
        break;
 8009de4:	e00c      	b.n	8009e00 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	3304      	adds	r3, #4
 8009dea:	2201      	movs	r2, #1
 8009dec:	4619      	mov	r1, r3
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 f91a 	bl	800a028 <USBD_CtlSendData>
        break;
 8009df4:	e004      	b.n	8009e00 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8009df6:	6839      	ldr	r1, [r7, #0]
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 f8aa 	bl	8009f52 <USBD_CtlError>
        break;
 8009dfe:	bf00      	nop
}
 8009e00:	bf00      	nop
 8009e02:	3708      	adds	r7, #8
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	2b02      	cmp	r3, #2
 8009e1c:	d81e      	bhi.n	8009e5c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	88db      	ldrh	r3, [r3, #6]
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	d004      	beq.n	8009e30 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009e26:	6839      	ldr	r1, [r7, #0]
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 f892 	bl	8009f52 <USBD_CtlError>
        break;
 8009e2e:	e01a      	b.n	8009e66 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d005      	beq.n	8009e4c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	f043 0202 	orr.w	r2, r3, #2
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	330c      	adds	r3, #12
 8009e50:	2202      	movs	r2, #2
 8009e52:	4619      	mov	r1, r3
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 f8e7 	bl	800a028 <USBD_CtlSendData>
      break;
 8009e5a:	e004      	b.n	8009e66 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009e5c:	6839      	ldr	r1, [r7, #0]
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 f877 	bl	8009f52 <USBD_CtlError>
      break;
 8009e64:	bf00      	nop
  }
}
 8009e66:	bf00      	nop
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b082      	sub	sp, #8
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
 8009e76:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	885b      	ldrh	r3, [r3, #2]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d106      	bne.n	8009e8e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f92b 	bl	800a0e4 <USBD_CtlSendStatus>
  }
}
 8009e8e:	bf00      	nop
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b082      	sub	sp, #8
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	d80b      	bhi.n	8009ec4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	885b      	ldrh	r3, [r3, #2]
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d10c      	bne.n	8009ece <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 f911 	bl	800a0e4 <USBD_CtlSendStatus>
      }
      break;
 8009ec2:	e004      	b.n	8009ece <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009ec4:	6839      	ldr	r1, [r7, #0]
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 f843 	bl	8009f52 <USBD_CtlError>
      break;
 8009ecc:	e000      	b.n	8009ed0 <USBD_ClrFeature+0x3a>
      break;
 8009ece:	bf00      	nop
  }
}
 8009ed0:	bf00      	nop
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	781a      	ldrb	r2, [r3, #0]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	785a      	ldrb	r2, [r3, #1]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	3302      	adds	r3, #2
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	b29a      	uxth	r2, r3
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	3303      	adds	r3, #3
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	021b      	lsls	r3, r3, #8
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	4413      	add	r3, r2
 8009f08:	b29a      	uxth	r2, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	3304      	adds	r3, #4
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	b29a      	uxth	r2, r3
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	3305      	adds	r3, #5
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	021b      	lsls	r3, r3, #8
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	4413      	add	r3, r2
 8009f24:	b29a      	uxth	r2, r3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	3306      	adds	r3, #6
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	b29a      	uxth	r2, r3
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	3307      	adds	r3, #7
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	021b      	lsls	r3, r3, #8
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	4413      	add	r3, r2
 8009f40:	b29a      	uxth	r2, r3
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	80da      	strh	r2, [r3, #6]

}
 8009f46:	bf00      	nop
 8009f48:	370c      	adds	r7, #12
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr

08009f52 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b082      	sub	sp, #8
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
 8009f5a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009f5c:	2180      	movs	r1, #128	; 0x80
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 fcbc 	bl	800a8dc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009f64:	2100      	movs	r1, #0
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 fcb8 	bl	800a8dc <USBD_LL_StallEP>
}
 8009f6c:	bf00      	nop
 8009f6e:	3708      	adds	r7, #8
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b086      	sub	sp, #24
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009f80:	2300      	movs	r3, #0
 8009f82:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d032      	beq.n	8009ff0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009f8a:	68f8      	ldr	r0, [r7, #12]
 8009f8c:	f000 f834 	bl	8009ff8 <USBD_GetLen>
 8009f90:	4603      	mov	r3, r0
 8009f92:	3301      	adds	r3, #1
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	005b      	lsls	r3, r3, #1
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009f9e:	7dfb      	ldrb	r3, [r7, #23]
 8009fa0:	1c5a      	adds	r2, r3, #1
 8009fa2:	75fa      	strb	r2, [r7, #23]
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	4413      	add	r3, r2
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	7812      	ldrb	r2, [r2, #0]
 8009fae:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009fb0:	7dfb      	ldrb	r3, [r7, #23]
 8009fb2:	1c5a      	adds	r2, r3, #1
 8009fb4:	75fa      	strb	r2, [r7, #23]
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	4413      	add	r3, r2
 8009fbc:	2203      	movs	r2, #3
 8009fbe:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009fc0:	e012      	b.n	8009fe8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	1c5a      	adds	r2, r3, #1
 8009fc6:	60fa      	str	r2, [r7, #12]
 8009fc8:	7dfa      	ldrb	r2, [r7, #23]
 8009fca:	1c51      	adds	r1, r2, #1
 8009fcc:	75f9      	strb	r1, [r7, #23]
 8009fce:	4611      	mov	r1, r2
 8009fd0:	68ba      	ldr	r2, [r7, #8]
 8009fd2:	440a      	add	r2, r1
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009fd8:	7dfb      	ldrb	r3, [r7, #23]
 8009fda:	1c5a      	adds	r2, r3, #1
 8009fdc:	75fa      	strb	r2, [r7, #23]
 8009fde:	461a      	mov	r2, r3
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	4413      	add	r3, r2
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d1e8      	bne.n	8009fc2 <USBD_GetString+0x4e>
    }
  }
}
 8009ff0:	bf00      	nop
 8009ff2:	3718      	adds	r7, #24
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a000:	2300      	movs	r3, #0
 800a002:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a004:	e005      	b.n	800a012 <USBD_GetLen+0x1a>
  {
    len++;
 800a006:	7bfb      	ldrb	r3, [r7, #15]
 800a008:	3301      	adds	r3, #1
 800a00a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	3301      	adds	r3, #1
 800a010:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d1f5      	bne.n	800a006 <USBD_GetLen+0xe>
  }

  return len;
 800a01a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3714      	adds	r7, #20
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	4613      	mov	r3, r2
 800a034:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2202      	movs	r2, #2
 800a03a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a03e:	88fa      	ldrh	r2, [r7, #6]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a044:	88fa      	ldrh	r2, [r7, #6]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a04a:	88fb      	ldrh	r3, [r7, #6]
 800a04c:	68ba      	ldr	r2, [r7, #8]
 800a04e:	2100      	movs	r1, #0
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f000 fd0b 	bl	800aa6c <USBD_LL_Transmit>

  return USBD_OK;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3710      	adds	r7, #16
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	60b9      	str	r1, [r7, #8]
 800a06a:	4613      	mov	r3, r2
 800a06c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a06e:	88fb      	ldrh	r3, [r7, #6]
 800a070:	68ba      	ldr	r2, [r7, #8]
 800a072:	2100      	movs	r1, #0
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f000 fcf9 	bl	800aa6c <USBD_LL_Transmit>

  return USBD_OK;
 800a07a:	2300      	movs	r3, #0
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3710      	adds	r7, #16
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	4613      	mov	r3, r2
 800a090:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2203      	movs	r2, #3
 800a096:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a09a:	88fa      	ldrh	r2, [r7, #6]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a0a2:	88fa      	ldrh	r2, [r7, #6]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a0aa:	88fb      	ldrh	r3, [r7, #6]
 800a0ac:	68ba      	ldr	r2, [r7, #8]
 800a0ae:	2100      	movs	r1, #0
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f000 fd15 	bl	800aae0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3710      	adds	r7, #16
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	4613      	mov	r3, r2
 800a0cc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a0ce:	88fb      	ldrh	r3, [r7, #6]
 800a0d0:	68ba      	ldr	r2, [r7, #8]
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f000 fd03 	bl	800aae0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2204      	movs	r2, #4
 800a0f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	2100      	movs	r1, #0
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 fcb6 	bl	800aa6c <USBD_LL_Transmit>

  return USBD_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3708      	adds	r7, #8
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b082      	sub	sp, #8
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2205      	movs	r2, #5
 800a116:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a11a:	2300      	movs	r3, #0
 800a11c:	2200      	movs	r2, #0
 800a11e:	2100      	movs	r1, #0
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 fcdd 	bl	800aae0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a126:	2300      	movs	r3, #0
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3708      	adds	r7, #8
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a134:	2200      	movs	r2, #0
 800a136:	4912      	ldr	r1, [pc, #72]	; (800a180 <MX_USB_DEVICE_Init+0x50>)
 800a138:	4812      	ldr	r0, [pc, #72]	; (800a184 <MX_USB_DEVICE_Init+0x54>)
 800a13a:	f7fe ff3c 	bl	8008fb6 <USBD_Init>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d001      	beq.n	800a148 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a144:	f7f8 f94a 	bl	80023dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a148:	490f      	ldr	r1, [pc, #60]	; (800a188 <MX_USB_DEVICE_Init+0x58>)
 800a14a:	480e      	ldr	r0, [pc, #56]	; (800a184 <MX_USB_DEVICE_Init+0x54>)
 800a14c:	f7fe ff5e 	bl	800900c <USBD_RegisterClass>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d001      	beq.n	800a15a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a156:	f7f8 f941 	bl	80023dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a15a:	490c      	ldr	r1, [pc, #48]	; (800a18c <MX_USB_DEVICE_Init+0x5c>)
 800a15c:	4809      	ldr	r0, [pc, #36]	; (800a184 <MX_USB_DEVICE_Init+0x54>)
 800a15e:	f7fe febb 	bl	8008ed8 <USBD_CDC_RegisterInterface>
 800a162:	4603      	mov	r3, r0
 800a164:	2b00      	cmp	r3, #0
 800a166:	d001      	beq.n	800a16c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a168:	f7f8 f938 	bl	80023dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a16c:	4805      	ldr	r0, [pc, #20]	; (800a184 <MX_USB_DEVICE_Init+0x54>)
 800a16e:	f7fe ff67 	bl	8009040 <USBD_Start>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d001      	beq.n	800a17c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a178:	f7f8 f930 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a17c:	bf00      	nop
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	2000012c 	.word	0x2000012c
 800a184:	2000068c 	.word	0x2000068c
 800a188:	20000018 	.word	0x20000018
 800a18c:	2000011c 	.word	0x2000011c

0800a190 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a194:	2200      	movs	r2, #0
 800a196:	4905      	ldr	r1, [pc, #20]	; (800a1ac <CDC_Init_FS+0x1c>)
 800a198:	4805      	ldr	r0, [pc, #20]	; (800a1b0 <CDC_Init_FS+0x20>)
 800a19a:	f7fe feb4 	bl	8008f06 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a19e:	4905      	ldr	r1, [pc, #20]	; (800a1b4 <CDC_Init_FS+0x24>)
 800a1a0:	4803      	ldr	r0, [pc, #12]	; (800a1b0 <CDC_Init_FS+0x20>)
 800a1a2:	f7fe feca 	bl	8008f3a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a1a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	20000d38 	.word	0x20000d38
 800a1b0:	2000068c 	.word	0x2000068c
 800a1b4:	20000950 	.word	0x20000950

0800a1b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a1bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b083      	sub	sp, #12
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	6039      	str	r1, [r7, #0]
 800a1d2:	71fb      	strb	r3, [r7, #7]
 800a1d4:	4613      	mov	r3, r2
 800a1d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a1d8:	79fb      	ldrb	r3, [r7, #7]
 800a1da:	2b23      	cmp	r3, #35	; 0x23
 800a1dc:	d84a      	bhi.n	800a274 <CDC_Control_FS+0xac>
 800a1de:	a201      	add	r2, pc, #4	; (adr r2, 800a1e4 <CDC_Control_FS+0x1c>)
 800a1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e4:	0800a275 	.word	0x0800a275
 800a1e8:	0800a275 	.word	0x0800a275
 800a1ec:	0800a275 	.word	0x0800a275
 800a1f0:	0800a275 	.word	0x0800a275
 800a1f4:	0800a275 	.word	0x0800a275
 800a1f8:	0800a275 	.word	0x0800a275
 800a1fc:	0800a275 	.word	0x0800a275
 800a200:	0800a275 	.word	0x0800a275
 800a204:	0800a275 	.word	0x0800a275
 800a208:	0800a275 	.word	0x0800a275
 800a20c:	0800a275 	.word	0x0800a275
 800a210:	0800a275 	.word	0x0800a275
 800a214:	0800a275 	.word	0x0800a275
 800a218:	0800a275 	.word	0x0800a275
 800a21c:	0800a275 	.word	0x0800a275
 800a220:	0800a275 	.word	0x0800a275
 800a224:	0800a275 	.word	0x0800a275
 800a228:	0800a275 	.word	0x0800a275
 800a22c:	0800a275 	.word	0x0800a275
 800a230:	0800a275 	.word	0x0800a275
 800a234:	0800a275 	.word	0x0800a275
 800a238:	0800a275 	.word	0x0800a275
 800a23c:	0800a275 	.word	0x0800a275
 800a240:	0800a275 	.word	0x0800a275
 800a244:	0800a275 	.word	0x0800a275
 800a248:	0800a275 	.word	0x0800a275
 800a24c:	0800a275 	.word	0x0800a275
 800a250:	0800a275 	.word	0x0800a275
 800a254:	0800a275 	.word	0x0800a275
 800a258:	0800a275 	.word	0x0800a275
 800a25c:	0800a275 	.word	0x0800a275
 800a260:	0800a275 	.word	0x0800a275
 800a264:	0800a275 	.word	0x0800a275
 800a268:	0800a275 	.word	0x0800a275
 800a26c:	0800a275 	.word	0x0800a275
 800a270:	0800a275 	.word	0x0800a275
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a274:	bf00      	nop
  }

  return (USBD_OK);
 800a276:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a278:	4618      	mov	r0, r3
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a28e:	6879      	ldr	r1, [r7, #4]
 800a290:	4805      	ldr	r0, [pc, #20]	; (800a2a8 <CDC_Receive_FS+0x24>)
 800a292:	f7fe fe52 	bl	8008f3a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a296:	4804      	ldr	r0, [pc, #16]	; (800a2a8 <CDC_Receive_FS+0x24>)
 800a298:	f7fe fe63 	bl	8008f62 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a29c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3708      	adds	r7, #8
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	2000068c 	.word	0x2000068c

0800a2ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	6039      	str	r1, [r7, #0]
 800a2b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	2212      	movs	r2, #18
 800a2bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a2be:	4b03      	ldr	r3, [pc, #12]	; (800a2cc <USBD_FS_DeviceDescriptor+0x20>)
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr
 800a2cc:	2000014c 	.word	0x2000014c

0800a2d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	6039      	str	r1, [r7, #0]
 800a2da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	2204      	movs	r2, #4
 800a2e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a2e2:	4b03      	ldr	r3, [pc, #12]	; (800a2f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	370c      	adds	r7, #12
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr
 800a2f0:	2000016c 	.word	0x2000016c

0800a2f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	6039      	str	r1, [r7, #0]
 800a2fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a300:	79fb      	ldrb	r3, [r7, #7]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d105      	bne.n	800a312 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a306:	683a      	ldr	r2, [r7, #0]
 800a308:	4907      	ldr	r1, [pc, #28]	; (800a328 <USBD_FS_ProductStrDescriptor+0x34>)
 800a30a:	4808      	ldr	r0, [pc, #32]	; (800a32c <USBD_FS_ProductStrDescriptor+0x38>)
 800a30c:	f7ff fe32 	bl	8009f74 <USBD_GetString>
 800a310:	e004      	b.n	800a31c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a312:	683a      	ldr	r2, [r7, #0]
 800a314:	4904      	ldr	r1, [pc, #16]	; (800a328 <USBD_FS_ProductStrDescriptor+0x34>)
 800a316:	4805      	ldr	r0, [pc, #20]	; (800a32c <USBD_FS_ProductStrDescriptor+0x38>)
 800a318:	f7ff fe2c 	bl	8009f74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a31c:	4b02      	ldr	r3, [pc, #8]	; (800a328 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3708      	adds	r7, #8
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	20001120 	.word	0x20001120
 800a32c:	0800acc4 	.word	0x0800acc4

0800a330 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	4603      	mov	r3, r0
 800a338:	6039      	str	r1, [r7, #0]
 800a33a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a33c:	683a      	ldr	r2, [r7, #0]
 800a33e:	4904      	ldr	r1, [pc, #16]	; (800a350 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a340:	4804      	ldr	r0, [pc, #16]	; (800a354 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a342:	f7ff fe17 	bl	8009f74 <USBD_GetString>
  return USBD_StrDesc;
 800a346:	4b02      	ldr	r3, [pc, #8]	; (800a350 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3708      	adds	r7, #8
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	20001120 	.word	0x20001120
 800a354:	0800acdc 	.word	0x0800acdc

0800a358 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	4603      	mov	r3, r0
 800a360:	6039      	str	r1, [r7, #0]
 800a362:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	221a      	movs	r2, #26
 800a368:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a36a:	f000 f855 	bl	800a418 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a36e:	4b02      	ldr	r3, [pc, #8]	; (800a378 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a370:	4618      	mov	r0, r3
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}
 800a378:	20000170 	.word	0x20000170

0800a37c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	4603      	mov	r3, r0
 800a384:	6039      	str	r1, [r7, #0]
 800a386:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a388:	79fb      	ldrb	r3, [r7, #7]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d105      	bne.n	800a39a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a38e:	683a      	ldr	r2, [r7, #0]
 800a390:	4907      	ldr	r1, [pc, #28]	; (800a3b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a392:	4808      	ldr	r0, [pc, #32]	; (800a3b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a394:	f7ff fdee 	bl	8009f74 <USBD_GetString>
 800a398:	e004      	b.n	800a3a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a39a:	683a      	ldr	r2, [r7, #0]
 800a39c:	4904      	ldr	r1, [pc, #16]	; (800a3b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a39e:	4805      	ldr	r0, [pc, #20]	; (800a3b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a3a0:	f7ff fde8 	bl	8009f74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3a4:	4b02      	ldr	r3, [pc, #8]	; (800a3b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3708      	adds	r7, #8
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	20001120 	.word	0x20001120
 800a3b4:	0800acf0 	.word	0x0800acf0

0800a3b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	4603      	mov	r3, r0
 800a3c0:	6039      	str	r1, [r7, #0]
 800a3c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a3c4:	79fb      	ldrb	r3, [r7, #7]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d105      	bne.n	800a3d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a3ca:	683a      	ldr	r2, [r7, #0]
 800a3cc:	4907      	ldr	r1, [pc, #28]	; (800a3ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a3ce:	4808      	ldr	r0, [pc, #32]	; (800a3f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a3d0:	f7ff fdd0 	bl	8009f74 <USBD_GetString>
 800a3d4:	e004      	b.n	800a3e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a3d6:	683a      	ldr	r2, [r7, #0]
 800a3d8:	4904      	ldr	r1, [pc, #16]	; (800a3ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a3da:	4805      	ldr	r0, [pc, #20]	; (800a3f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a3dc:	f7ff fdca 	bl	8009f74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3e0:	4b02      	ldr	r3, [pc, #8]	; (800a3ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	20001120 	.word	0x20001120
 800a3f0:	0800acfc 	.word	0x0800acfc

0800a3f4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	6039      	str	r1, [r7, #0]
 800a3fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	220c      	movs	r2, #12
 800a404:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a406:	4b03      	ldr	r3, [pc, #12]	; (800a414 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a408:	4618      	mov	r0, r3
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr
 800a414:	20000160 	.word	0x20000160

0800a418 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a41e:	4b0f      	ldr	r3, [pc, #60]	; (800a45c <Get_SerialNum+0x44>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a424:	4b0e      	ldr	r3, [pc, #56]	; (800a460 <Get_SerialNum+0x48>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a42a:	4b0e      	ldr	r3, [pc, #56]	; (800a464 <Get_SerialNum+0x4c>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4413      	add	r3, r2
 800a436:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d009      	beq.n	800a452 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a43e:	2208      	movs	r2, #8
 800a440:	4909      	ldr	r1, [pc, #36]	; (800a468 <Get_SerialNum+0x50>)
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f000 f814 	bl	800a470 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a448:	2204      	movs	r2, #4
 800a44a:	4908      	ldr	r1, [pc, #32]	; (800a46c <Get_SerialNum+0x54>)
 800a44c:	68b8      	ldr	r0, [r7, #8]
 800a44e:	f000 f80f 	bl	800a470 <IntToUnicode>
  }
}
 800a452:	bf00      	nop
 800a454:	3710      	adds	r7, #16
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	bf00      	nop
 800a45c:	1fff7590 	.word	0x1fff7590
 800a460:	1fff7594 	.word	0x1fff7594
 800a464:	1fff7598 	.word	0x1fff7598
 800a468:	20000172 	.word	0x20000172
 800a46c:	20000182 	.word	0x20000182

0800a470 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a470:	b480      	push	{r7}
 800a472:	b087      	sub	sp, #28
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	4613      	mov	r3, r2
 800a47c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a47e:	2300      	movs	r3, #0
 800a480:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a482:	2300      	movs	r3, #0
 800a484:	75fb      	strb	r3, [r7, #23]
 800a486:	e027      	b.n	800a4d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	0f1b      	lsrs	r3, r3, #28
 800a48c:	2b09      	cmp	r3, #9
 800a48e:	d80b      	bhi.n	800a4a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	0f1b      	lsrs	r3, r3, #28
 800a494:	b2da      	uxtb	r2, r3
 800a496:	7dfb      	ldrb	r3, [r7, #23]
 800a498:	005b      	lsls	r3, r3, #1
 800a49a:	4619      	mov	r1, r3
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	440b      	add	r3, r1
 800a4a0:	3230      	adds	r2, #48	; 0x30
 800a4a2:	b2d2      	uxtb	r2, r2
 800a4a4:	701a      	strb	r2, [r3, #0]
 800a4a6:	e00a      	b.n	800a4be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	0f1b      	lsrs	r3, r3, #28
 800a4ac:	b2da      	uxtb	r2, r3
 800a4ae:	7dfb      	ldrb	r3, [r7, #23]
 800a4b0:	005b      	lsls	r3, r3, #1
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	440b      	add	r3, r1
 800a4b8:	3237      	adds	r2, #55	; 0x37
 800a4ba:	b2d2      	uxtb	r2, r2
 800a4bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	011b      	lsls	r3, r3, #4
 800a4c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a4c4:	7dfb      	ldrb	r3, [r7, #23]
 800a4c6:	005b      	lsls	r3, r3, #1
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	68ba      	ldr	r2, [r7, #8]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a4d2:	7dfb      	ldrb	r3, [r7, #23]
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	75fb      	strb	r3, [r7, #23]
 800a4d8:	7dfa      	ldrb	r2, [r7, #23]
 800a4da:	79fb      	ldrb	r3, [r7, #7]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d3d3      	bcc.n	800a488 <IntToUnicode+0x18>
  }
}
 800a4e0:	bf00      	nop
 800a4e2:	371c      	adds	r7, #28
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b08a      	sub	sp, #40	; 0x28
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4f4:	f107 0314 	add.w	r3, r7, #20
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	601a      	str	r2, [r3, #0]
 800a4fc:	605a      	str	r2, [r3, #4]
 800a4fe:	609a      	str	r2, [r3, #8]
 800a500:	60da      	str	r2, [r3, #12]
 800a502:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a1c      	ldr	r2, [pc, #112]	; (800a57c <HAL_PCD_MspInit+0x90>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d131      	bne.n	800a572 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a50e:	4b1c      	ldr	r3, [pc, #112]	; (800a580 <HAL_PCD_MspInit+0x94>)
 800a510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a512:	4a1b      	ldr	r2, [pc, #108]	; (800a580 <HAL_PCD_MspInit+0x94>)
 800a514:	f043 0301 	orr.w	r3, r3, #1
 800a518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a51a:	4b19      	ldr	r3, [pc, #100]	; (800a580 <HAL_PCD_MspInit+0x94>)
 800a51c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a51e:	f003 0301 	and.w	r3, r3, #1
 800a522:	613b      	str	r3, [r7, #16]
 800a524:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a526:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a52a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a52c:	2302      	movs	r3, #2
 800a52e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a530:	2300      	movs	r3, #0
 800a532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a534:	2303      	movs	r3, #3
 800a536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800a538:	230a      	movs	r3, #10
 800a53a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a53c:	f107 0314 	add.w	r3, r7, #20
 800a540:	4619      	mov	r1, r3
 800a542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a546:	f7f8 fb13 	bl	8002b70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a54a:	4b0d      	ldr	r3, [pc, #52]	; (800a580 <HAL_PCD_MspInit+0x94>)
 800a54c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a54e:	4a0c      	ldr	r2, [pc, #48]	; (800a580 <HAL_PCD_MspInit+0x94>)
 800a550:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a554:	6593      	str	r3, [r2, #88]	; 0x58
 800a556:	4b0a      	ldr	r3, [pc, #40]	; (800a580 <HAL_PCD_MspInit+0x94>)
 800a558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a55a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a55e:	60fb      	str	r3, [r7, #12]
 800a560:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800a562:	2200      	movs	r2, #0
 800a564:	2100      	movs	r1, #0
 800a566:	2043      	movs	r0, #67	; 0x43
 800a568:	f7f8 fa8b 	bl	8002a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800a56c:	2043      	movs	r0, #67	; 0x43
 800a56e:	f7f8 faa4 	bl	8002aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a572:	bf00      	nop
 800a574:	3728      	adds	r7, #40	; 0x28
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	40006800 	.word	0x40006800
 800a580:	40021000 	.word	0x40021000

0800a584 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800a598:	4619      	mov	r1, r3
 800a59a:	4610      	mov	r0, r2
 800a59c:	f7fe fd99 	bl	80090d2 <USBD_LL_SetupStage>
}
 800a5a0:	bf00      	nop
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800a5ba:	78fb      	ldrb	r3, [r7, #3]
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	015b      	lsls	r3, r3, #5
 800a5c0:	4413      	add	r3, r2
 800a5c2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	78fb      	ldrb	r3, [r7, #3]
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	f7fe fdcc 	bl	8009168 <USBD_LL_DataOutStage>
}
 800a5d0:	bf00      	nop
 800a5d2:	3708      	adds	r7, #8
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800a5ea:	78fb      	ldrb	r3, [r7, #3]
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	015b      	lsls	r3, r3, #5
 800a5f0:	4413      	add	r3, r2
 800a5f2:	333c      	adds	r3, #60	; 0x3c
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	78fb      	ldrb	r3, [r7, #3]
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	f7fe fe26 	bl	800924a <USBD_LL_DataInStage>
}
 800a5fe:	bf00      	nop
 800a600:	3708      	adds	r7, #8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b082      	sub	sp, #8
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a614:	4618      	mov	r0, r3
 800a616:	f7fe ff39 	bl	800948c <USBD_LL_SOF>
}
 800a61a:	bf00      	nop
 800a61c:	3708      	adds	r7, #8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800a622:	b580      	push	{r7, lr}
 800a624:	b084      	sub	sp, #16
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a62a:	2301      	movs	r3, #1
 800a62c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	689b      	ldr	r3, [r3, #8]
 800a632:	2b02      	cmp	r3, #2
 800a634:	d001      	beq.n	800a63a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a636:	f7f7 fed1 	bl	80023dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a640:	7bfa      	ldrb	r2, [r7, #15]
 800a642:	4611      	mov	r1, r2
 800a644:	4618      	mov	r0, r3
 800a646:	f7fe fee6 	bl	8009416 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a650:	4618      	mov	r0, r3
 800a652:	f7fe fe9f 	bl	8009394 <USBD_LL_Reset>
}
 800a656:	bf00      	nop
 800a658:	3710      	adds	r7, #16
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
	...

0800a660 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a66e:	4618      	mov	r0, r3
 800a670:	f7fe fee1 	bl	8009436 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	699b      	ldr	r3, [r3, #24]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d005      	beq.n	800a688 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a67c:	4b04      	ldr	r3, [pc, #16]	; (800a690 <HAL_PCD_SuspendCallback+0x30>)
 800a67e:	691b      	ldr	r3, [r3, #16]
 800a680:	4a03      	ldr	r2, [pc, #12]	; (800a690 <HAL_PCD_SuspendCallback+0x30>)
 800a682:	f043 0306 	orr.w	r3, r3, #6
 800a686:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a688:	bf00      	nop
 800a68a:	3708      	adds	r7, #8
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	e000ed00 	.word	0xe000ed00

0800a694 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d007      	beq.n	800a6b4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a6a4:	4b08      	ldr	r3, [pc, #32]	; (800a6c8 <HAL_PCD_ResumeCallback+0x34>)
 800a6a6:	691b      	ldr	r3, [r3, #16]
 800a6a8:	4a07      	ldr	r2, [pc, #28]	; (800a6c8 <HAL_PCD_ResumeCallback+0x34>)
 800a6aa:	f023 0306 	bic.w	r3, r3, #6
 800a6ae:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a6b0:	f000 fab2 	bl	800ac18 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7fe fed0 	bl	8009460 <USBD_LL_Resume>
}
 800a6c0:	bf00      	nop
 800a6c2:	3708      	adds	r7, #8
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	e000ed00 	.word	0xe000ed00

0800a6cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800a6d4:	f7fa f9f4 	bl	8004ac0 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a6d8:	4a2b      	ldr	r2, [pc, #172]	; (800a788 <USBD_LL_Init+0xbc>)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  pdev->pData = &hpcd_USB_FS;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	4a29      	ldr	r2, [pc, #164]	; (800a788 <USBD_LL_Init+0xbc>)
 800a6e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a6e8:	4b27      	ldr	r3, [pc, #156]	; (800a788 <USBD_LL_Init+0xbc>)
 800a6ea:	4a28      	ldr	r2, [pc, #160]	; (800a78c <USBD_LL_Init+0xc0>)
 800a6ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a6ee:	4b26      	ldr	r3, [pc, #152]	; (800a788 <USBD_LL_Init+0xbc>)
 800a6f0:	2208      	movs	r2, #8
 800a6f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a6f4:	4b24      	ldr	r3, [pc, #144]	; (800a788 <USBD_LL_Init+0xbc>)
 800a6f6:	2202      	movs	r2, #2
 800a6f8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a6fa:	4b23      	ldr	r3, [pc, #140]	; (800a788 <USBD_LL_Init+0xbc>)
 800a6fc:	2202      	movs	r2, #2
 800a6fe:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a700:	4b21      	ldr	r3, [pc, #132]	; (800a788 <USBD_LL_Init+0xbc>)
 800a702:	2200      	movs	r2, #0
 800a704:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a706:	4b20      	ldr	r3, [pc, #128]	; (800a788 <USBD_LL_Init+0xbc>)
 800a708:	2200      	movs	r2, #0
 800a70a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a70c:	4b1e      	ldr	r3, [pc, #120]	; (800a788 <USBD_LL_Init+0xbc>)
 800a70e:	2200      	movs	r2, #0
 800a710:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a712:	4b1d      	ldr	r3, [pc, #116]	; (800a788 <USBD_LL_Init+0xbc>)
 800a714:	2200      	movs	r2, #0
 800a716:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a718:	481b      	ldr	r0, [pc, #108]	; (800a788 <USBD_LL_Init+0xbc>)
 800a71a:	f7f9 fa2a 	bl	8003b72 <HAL_PCD_Init>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d001      	beq.n	800a728 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800a724:	f7f7 fe5a 	bl	80023dc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a72e:	2318      	movs	r3, #24
 800a730:	2200      	movs	r2, #0
 800a732:	2100      	movs	r1, #0
 800a734:	f7fa f8f8 	bl	8004928 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a73e:	2358      	movs	r3, #88	; 0x58
 800a740:	2200      	movs	r2, #0
 800a742:	2180      	movs	r1, #128	; 0x80
 800a744:	f7fa f8f0 	bl	8004928 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a74e:	23c0      	movs	r3, #192	; 0xc0
 800a750:	2200      	movs	r2, #0
 800a752:	2181      	movs	r1, #129	; 0x81
 800a754:	f7fa f8e8 	bl	8004928 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a75e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a762:	2200      	movs	r2, #0
 800a764:	2101      	movs	r1, #1
 800a766:	f7fa f8df 	bl	8004928 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a770:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a774:	2200      	movs	r2, #0
 800a776:	2182      	movs	r1, #130	; 0x82
 800a778:	f7fa f8d6 	bl	8004928 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a77c:	2300      	movs	r3, #0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3708      	adds	r7, #8
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	20001320 	.word	0x20001320
 800a78c:	40006800 	.word	0x40006800

0800a790 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a798:	2300      	movs	r3, #0
 800a79a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a79c:	2300      	movs	r3, #0
 800a79e:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7f9 facb 	bl	8003d42 <HAL_PCD_Start>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800a7b0:	7bbb      	ldrb	r3, [r7, #14]
 800a7b2:	2b03      	cmp	r3, #3
 800a7b4:	d816      	bhi.n	800a7e4 <USBD_LL_Start+0x54>
 800a7b6:	a201      	add	r2, pc, #4	; (adr r2, 800a7bc <USBD_LL_Start+0x2c>)
 800a7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7bc:	0800a7cd 	.word	0x0800a7cd
 800a7c0:	0800a7d3 	.word	0x0800a7d3
 800a7c4:	0800a7d9 	.word	0x0800a7d9
 800a7c8:	0800a7df 	.word	0x0800a7df
    case HAL_OK :
      usb_status = USBD_OK;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a7d0:	e00b      	b.n	800a7ea <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a7d2:	2302      	movs	r3, #2
 800a7d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a7d6:	e008      	b.n	800a7ea <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	73fb      	strb	r3, [r7, #15]
    break;
 800a7dc:	e005      	b.n	800a7ea <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a7de:	2302      	movs	r3, #2
 800a7e0:	73fb      	strb	r3, [r7, #15]
    break;
 800a7e2:	e002      	b.n	800a7ea <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800a7e4:	2302      	movs	r3, #2
 800a7e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a7e8:	bf00      	nop
  }
  return usb_status;
 800a7ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3710      	adds	r7, #16
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	4608      	mov	r0, r1
 800a7fe:	4611      	mov	r1, r2
 800a800:	461a      	mov	r2, r3
 800a802:	4603      	mov	r3, r0
 800a804:	70fb      	strb	r3, [r7, #3]
 800a806:	460b      	mov	r3, r1
 800a808:	70bb      	strb	r3, [r7, #2]
 800a80a:	4613      	mov	r3, r2
 800a80c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a80e:	2300      	movs	r3, #0
 800a810:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a812:	2300      	movs	r3, #0
 800a814:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a81c:	78bb      	ldrb	r3, [r7, #2]
 800a81e:	883a      	ldrh	r2, [r7, #0]
 800a820:	78f9      	ldrb	r1, [r7, #3]
 800a822:	f7f9 fc23 	bl	800406c <HAL_PCD_EP_Open>
 800a826:	4603      	mov	r3, r0
 800a828:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a82a:	7bbb      	ldrb	r3, [r7, #14]
 800a82c:	2b03      	cmp	r3, #3
 800a82e:	d817      	bhi.n	800a860 <USBD_LL_OpenEP+0x6c>
 800a830:	a201      	add	r2, pc, #4	; (adr r2, 800a838 <USBD_LL_OpenEP+0x44>)
 800a832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a836:	bf00      	nop
 800a838:	0800a849 	.word	0x0800a849
 800a83c:	0800a84f 	.word	0x0800a84f
 800a840:	0800a855 	.word	0x0800a855
 800a844:	0800a85b 	.word	0x0800a85b
    case HAL_OK :
      usb_status = USBD_OK;
 800a848:	2300      	movs	r3, #0
 800a84a:	73fb      	strb	r3, [r7, #15]
    break;
 800a84c:	e00b      	b.n	800a866 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a84e:	2302      	movs	r3, #2
 800a850:	73fb      	strb	r3, [r7, #15]
    break;
 800a852:	e008      	b.n	800a866 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a854:	2301      	movs	r3, #1
 800a856:	73fb      	strb	r3, [r7, #15]
    break;
 800a858:	e005      	b.n	800a866 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a85a:	2302      	movs	r3, #2
 800a85c:	73fb      	strb	r3, [r7, #15]
    break;
 800a85e:	e002      	b.n	800a866 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800a860:	2302      	movs	r3, #2
 800a862:	73fb      	strb	r3, [r7, #15]
    break;
 800a864:	bf00      	nop
  }
  return usb_status;
 800a866:	7bfb      	ldrb	r3, [r7, #15]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3710      	adds	r7, #16
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	460b      	mov	r3, r1
 800a87a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a87c:	2300      	movs	r3, #0
 800a87e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a880:	2300      	movs	r3, #0
 800a882:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a88a:	78fa      	ldrb	r2, [r7, #3]
 800a88c:	4611      	mov	r1, r2
 800a88e:	4618      	mov	r0, r3
 800a890:	f7f9 fc4c 	bl	800412c <HAL_PCD_EP_Close>
 800a894:	4603      	mov	r3, r0
 800a896:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800a898:	7bbb      	ldrb	r3, [r7, #14]
 800a89a:	2b03      	cmp	r3, #3
 800a89c:	d816      	bhi.n	800a8cc <USBD_LL_CloseEP+0x5c>
 800a89e:	a201      	add	r2, pc, #4	; (adr r2, 800a8a4 <USBD_LL_CloseEP+0x34>)
 800a8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a4:	0800a8b5 	.word	0x0800a8b5
 800a8a8:	0800a8bb 	.word	0x0800a8bb
 800a8ac:	0800a8c1 	.word	0x0800a8c1
 800a8b0:	0800a8c7 	.word	0x0800a8c7
    case HAL_OK :
      usb_status = USBD_OK;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a8b8:	e00b      	b.n	800a8d2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a8ba:	2302      	movs	r3, #2
 800a8bc:	73fb      	strb	r3, [r7, #15]
    break;
 800a8be:	e008      	b.n	800a8d2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a8c4:	e005      	b.n	800a8d2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a8c6:	2302      	movs	r3, #2
 800a8c8:	73fb      	strb	r3, [r7, #15]
    break;
 800a8ca:	e002      	b.n	800a8d2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a8cc:	2302      	movs	r3, #2
 800a8ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a8d0:	bf00      	nop
  }
  return usb_status;  
 800a8d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3710      	adds	r7, #16
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8f6:	78fa      	ldrb	r2, [r7, #3]
 800a8f8:	4611      	mov	r1, r2
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7f9 fce0 	bl	80042c0 <HAL_PCD_EP_SetStall>
 800a900:	4603      	mov	r3, r0
 800a902:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a904:	7bbb      	ldrb	r3, [r7, #14]
 800a906:	2b03      	cmp	r3, #3
 800a908:	d816      	bhi.n	800a938 <USBD_LL_StallEP+0x5c>
 800a90a:	a201      	add	r2, pc, #4	; (adr r2, 800a910 <USBD_LL_StallEP+0x34>)
 800a90c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a910:	0800a921 	.word	0x0800a921
 800a914:	0800a927 	.word	0x0800a927
 800a918:	0800a92d 	.word	0x0800a92d
 800a91c:	0800a933 	.word	0x0800a933
    case HAL_OK :
      usb_status = USBD_OK;
 800a920:	2300      	movs	r3, #0
 800a922:	73fb      	strb	r3, [r7, #15]
    break;
 800a924:	e00b      	b.n	800a93e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a926:	2302      	movs	r3, #2
 800a928:	73fb      	strb	r3, [r7, #15]
    break;
 800a92a:	e008      	b.n	800a93e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a92c:	2301      	movs	r3, #1
 800a92e:	73fb      	strb	r3, [r7, #15]
    break;
 800a930:	e005      	b.n	800a93e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a932:	2302      	movs	r3, #2
 800a934:	73fb      	strb	r3, [r7, #15]
    break;
 800a936:	e002      	b.n	800a93e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a938:	2302      	movs	r3, #2
 800a93a:	73fb      	strb	r3, [r7, #15]
    break;
 800a93c:	bf00      	nop
  }
  return usb_status;  
 800a93e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a940:	4618      	mov	r0, r3
 800a942:	3710      	adds	r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	460b      	mov	r3, r1
 800a952:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a954:	2300      	movs	r3, #0
 800a956:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a958:	2300      	movs	r3, #0
 800a95a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a962:	78fa      	ldrb	r2, [r7, #3]
 800a964:	4611      	mov	r1, r2
 800a966:	4618      	mov	r0, r3
 800a968:	f7f9 fd04 	bl	8004374 <HAL_PCD_EP_ClrStall>
 800a96c:	4603      	mov	r3, r0
 800a96e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800a970:	7bbb      	ldrb	r3, [r7, #14]
 800a972:	2b03      	cmp	r3, #3
 800a974:	d816      	bhi.n	800a9a4 <USBD_LL_ClearStallEP+0x5c>
 800a976:	a201      	add	r2, pc, #4	; (adr r2, 800a97c <USBD_LL_ClearStallEP+0x34>)
 800a978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a97c:	0800a98d 	.word	0x0800a98d
 800a980:	0800a993 	.word	0x0800a993
 800a984:	0800a999 	.word	0x0800a999
 800a988:	0800a99f 	.word	0x0800a99f
    case HAL_OK :
      usb_status = USBD_OK;
 800a98c:	2300      	movs	r3, #0
 800a98e:	73fb      	strb	r3, [r7, #15]
    break;
 800a990:	e00b      	b.n	800a9aa <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a992:	2302      	movs	r3, #2
 800a994:	73fb      	strb	r3, [r7, #15]
    break;
 800a996:	e008      	b.n	800a9aa <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a998:	2301      	movs	r3, #1
 800a99a:	73fb      	strb	r3, [r7, #15]
    break;
 800a99c:	e005      	b.n	800a9aa <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a99e:	2302      	movs	r3, #2
 800a9a0:	73fb      	strb	r3, [r7, #15]
    break;
 800a9a2:	e002      	b.n	800a9aa <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a9a4:	2302      	movs	r3, #2
 800a9a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a9a8:	bf00      	nop
  }
  return usb_status; 
 800a9aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3710      	adds	r7, #16
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b085      	sub	sp, #20
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	460b      	mov	r3, r1
 800a9be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9c6:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800a9c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	da08      	bge.n	800a9e2 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800a9d0:	78fb      	ldrb	r3, [r7, #3]
 800a9d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9d6:	68fa      	ldr	r2, [r7, #12]
 800a9d8:	015b      	lsls	r3, r3, #5
 800a9da:	4413      	add	r3, r2
 800a9dc:	332a      	adds	r3, #42	; 0x2a
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	e008      	b.n	800a9f4 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800a9e2:	78fb      	ldrb	r3, [r7, #3]
 800a9e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	015b      	lsls	r3, r3, #5
 800a9ec:	4413      	add	r3, r2
 800a9ee:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800a9f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3714      	adds	r7, #20
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	460b      	mov	r3, r1
 800aa0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa10:	2300      	movs	r3, #0
 800aa12:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa1a:	78fa      	ldrb	r2, [r7, #3]
 800aa1c:	4611      	mov	r1, r2
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7f9 faff 	bl	8004022 <HAL_PCD_SetAddress>
 800aa24:	4603      	mov	r3, r0
 800aa26:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800aa28:	7bbb      	ldrb	r3, [r7, #14]
 800aa2a:	2b03      	cmp	r3, #3
 800aa2c:	d816      	bhi.n	800aa5c <USBD_LL_SetUSBAddress+0x5c>
 800aa2e:	a201      	add	r2, pc, #4	; (adr r2, 800aa34 <USBD_LL_SetUSBAddress+0x34>)
 800aa30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa34:	0800aa45 	.word	0x0800aa45
 800aa38:	0800aa4b 	.word	0x0800aa4b
 800aa3c:	0800aa51 	.word	0x0800aa51
 800aa40:	0800aa57 	.word	0x0800aa57
    case HAL_OK :
      usb_status = USBD_OK;
 800aa44:	2300      	movs	r3, #0
 800aa46:	73fb      	strb	r3, [r7, #15]
    break;
 800aa48:	e00b      	b.n	800aa62 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aa4a:	2302      	movs	r3, #2
 800aa4c:	73fb      	strb	r3, [r7, #15]
    break;
 800aa4e:	e008      	b.n	800aa62 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aa50:	2301      	movs	r3, #1
 800aa52:	73fb      	strb	r3, [r7, #15]
    break;
 800aa54:	e005      	b.n	800aa62 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aa56:	2302      	movs	r3, #2
 800aa58:	73fb      	strb	r3, [r7, #15]
    break;
 800aa5a:	e002      	b.n	800aa62 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800aa5c:	2302      	movs	r3, #2
 800aa5e:	73fb      	strb	r3, [r7, #15]
    break;
 800aa60:	bf00      	nop
  }
  return usb_status;  
 800aa62:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3710      	adds	r7, #16
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b086      	sub	sp, #24
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	607a      	str	r2, [r7, #4]
 800aa76:	461a      	mov	r2, r3
 800aa78:	460b      	mov	r3, r1
 800aa7a:	72fb      	strb	r3, [r7, #11]
 800aa7c:	4613      	mov	r3, r2
 800aa7e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa80:	2300      	movs	r3, #0
 800aa82:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa84:	2300      	movs	r3, #0
 800aa86:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aa8e:	893b      	ldrh	r3, [r7, #8]
 800aa90:	7af9      	ldrb	r1, [r7, #11]
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	f7f9 fbdb 	bl	800424e <HAL_PCD_EP_Transmit>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800aa9c:	7dbb      	ldrb	r3, [r7, #22]
 800aa9e:	2b03      	cmp	r3, #3
 800aaa0:	d816      	bhi.n	800aad0 <USBD_LL_Transmit+0x64>
 800aaa2:	a201      	add	r2, pc, #4	; (adr r2, 800aaa8 <USBD_LL_Transmit+0x3c>)
 800aaa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa8:	0800aab9 	.word	0x0800aab9
 800aaac:	0800aabf 	.word	0x0800aabf
 800aab0:	0800aac5 	.word	0x0800aac5
 800aab4:	0800aacb 	.word	0x0800aacb
    case HAL_OK :
      usb_status = USBD_OK;
 800aab8:	2300      	movs	r3, #0
 800aaba:	75fb      	strb	r3, [r7, #23]
    break;
 800aabc:	e00b      	b.n	800aad6 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aabe:	2302      	movs	r3, #2
 800aac0:	75fb      	strb	r3, [r7, #23]
    break;
 800aac2:	e008      	b.n	800aad6 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aac4:	2301      	movs	r3, #1
 800aac6:	75fb      	strb	r3, [r7, #23]
    break;
 800aac8:	e005      	b.n	800aad6 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aaca:	2302      	movs	r3, #2
 800aacc:	75fb      	strb	r3, [r7, #23]
    break;
 800aace:	e002      	b.n	800aad6 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800aad0:	2302      	movs	r3, #2
 800aad2:	75fb      	strb	r3, [r7, #23]
    break;
 800aad4:	bf00      	nop
  }
  return usb_status;    
 800aad6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3718      	adds	r7, #24
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b086      	sub	sp, #24
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	607a      	str	r2, [r7, #4]
 800aaea:	461a      	mov	r2, r3
 800aaec:	460b      	mov	r3, r1
 800aaee:	72fb      	strb	r3, [r7, #11]
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab02:	893b      	ldrh	r3, [r7, #8]
 800ab04:	7af9      	ldrb	r1, [r7, #11]
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	f7f9 fb52 	bl	80041b0 <HAL_PCD_EP_Receive>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800ab10:	7dbb      	ldrb	r3, [r7, #22]
 800ab12:	2b03      	cmp	r3, #3
 800ab14:	d816      	bhi.n	800ab44 <USBD_LL_PrepareReceive+0x64>
 800ab16:	a201      	add	r2, pc, #4	; (adr r2, 800ab1c <USBD_LL_PrepareReceive+0x3c>)
 800ab18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab1c:	0800ab2d 	.word	0x0800ab2d
 800ab20:	0800ab33 	.word	0x0800ab33
 800ab24:	0800ab39 	.word	0x0800ab39
 800ab28:	0800ab3f 	.word	0x0800ab3f
    case HAL_OK :
      usb_status = USBD_OK;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	75fb      	strb	r3, [r7, #23]
    break;
 800ab30:	e00b      	b.n	800ab4a <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ab32:	2302      	movs	r3, #2
 800ab34:	75fb      	strb	r3, [r7, #23]
    break;
 800ab36:	e008      	b.n	800ab4a <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ab38:	2301      	movs	r3, #1
 800ab3a:	75fb      	strb	r3, [r7, #23]
    break;
 800ab3c:	e005      	b.n	800ab4a <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ab3e:	2302      	movs	r3, #2
 800ab40:	75fb      	strb	r3, [r7, #23]
    break;
 800ab42:	e002      	b.n	800ab4a <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800ab44:	2302      	movs	r3, #2
 800ab46:	75fb      	strb	r3, [r7, #23]
    break;
 800ab48:	bf00      	nop
  }
  return usb_status; 
 800ab4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3718      	adds	r7, #24
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}

0800ab54 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab66:	78fa      	ldrb	r2, [r7, #3]
 800ab68:	4611      	mov	r1, r2
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7f9 fb5a 	bl	8004224 <HAL_PCD_EP_GetRxCount>
 800ab70:	4603      	mov	r3, r0
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3708      	adds	r7, #8
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
	...

0800ab7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	460b      	mov	r3, r1
 800ab86:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ab88:	78fb      	ldrb	r3, [r7, #3]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d002      	beq.n	800ab94 <HAL_PCDEx_LPM_Callback+0x18>
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d013      	beq.n	800abba <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800ab92:	e023      	b.n	800abdc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	699b      	ldr	r3, [r3, #24]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d007      	beq.n	800abac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ab9c:	f000 f83c 	bl	800ac18 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aba0:	4b10      	ldr	r3, [pc, #64]	; (800abe4 <HAL_PCDEx_LPM_Callback+0x68>)
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	4a0f      	ldr	r2, [pc, #60]	; (800abe4 <HAL_PCDEx_LPM_Callback+0x68>)
 800aba6:	f023 0306 	bic.w	r3, r3, #6
 800abaa:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7fe fc54 	bl	8009460 <USBD_LL_Resume>
    break;
 800abb8:	e010      	b.n	800abdc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7fe fc38 	bl	8009436 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	699b      	ldr	r3, [r3, #24]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d005      	beq.n	800abda <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800abce:	4b05      	ldr	r3, [pc, #20]	; (800abe4 <HAL_PCDEx_LPM_Callback+0x68>)
 800abd0:	691b      	ldr	r3, [r3, #16]
 800abd2:	4a04      	ldr	r2, [pc, #16]	; (800abe4 <HAL_PCDEx_LPM_Callback+0x68>)
 800abd4:	f043 0306 	orr.w	r3, r3, #6
 800abd8:	6113      	str	r3, [r2, #16]
    break;   
 800abda:	bf00      	nop
}
 800abdc:	bf00      	nop
 800abde:	3708      	adds	r7, #8
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	e000ed00 	.word	0xe000ed00

0800abe8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800abf0:	4b03      	ldr	r3, [pc, #12]	; (800ac00 <USBD_static_malloc+0x18>)
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	370c      	adds	r7, #12
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr
 800abfe:	bf00      	nop
 800ac00:	20000338 	.word	0x20000338

0800ac04 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]

}
 800ac0c:	bf00      	nop
 800ac0e:	370c      	adds	r7, #12
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr

0800ac18 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800ac1c:	bf00      	nop
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr
	...

0800ac28 <__libc_init_array>:
 800ac28:	b570      	push	{r4, r5, r6, lr}
 800ac2a:	4e0d      	ldr	r6, [pc, #52]	; (800ac60 <__libc_init_array+0x38>)
 800ac2c:	4c0d      	ldr	r4, [pc, #52]	; (800ac64 <__libc_init_array+0x3c>)
 800ac2e:	1ba4      	subs	r4, r4, r6
 800ac30:	10a4      	asrs	r4, r4, #2
 800ac32:	2500      	movs	r5, #0
 800ac34:	42a5      	cmp	r5, r4
 800ac36:	d109      	bne.n	800ac4c <__libc_init_array+0x24>
 800ac38:	4e0b      	ldr	r6, [pc, #44]	; (800ac68 <__libc_init_array+0x40>)
 800ac3a:	4c0c      	ldr	r4, [pc, #48]	; (800ac6c <__libc_init_array+0x44>)
 800ac3c:	f000 f836 	bl	800acac <_init>
 800ac40:	1ba4      	subs	r4, r4, r6
 800ac42:	10a4      	asrs	r4, r4, #2
 800ac44:	2500      	movs	r5, #0
 800ac46:	42a5      	cmp	r5, r4
 800ac48:	d105      	bne.n	800ac56 <__libc_init_array+0x2e>
 800ac4a:	bd70      	pop	{r4, r5, r6, pc}
 800ac4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac50:	4798      	blx	r3
 800ac52:	3501      	adds	r5, #1
 800ac54:	e7ee      	b.n	800ac34 <__libc_init_array+0xc>
 800ac56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac5a:	4798      	blx	r3
 800ac5c:	3501      	adds	r5, #1
 800ac5e:	e7f2      	b.n	800ac46 <__libc_init_array+0x1e>
 800ac60:	0800ad78 	.word	0x0800ad78
 800ac64:	0800ad78 	.word	0x0800ad78
 800ac68:	0800ad78 	.word	0x0800ad78
 800ac6c:	0800ad80 	.word	0x0800ad80

0800ac70 <memset>:
 800ac70:	4402      	add	r2, r0
 800ac72:	4603      	mov	r3, r0
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d100      	bne.n	800ac7a <memset+0xa>
 800ac78:	4770      	bx	lr
 800ac7a:	f803 1b01 	strb.w	r1, [r3], #1
 800ac7e:	e7f9      	b.n	800ac74 <memset+0x4>

0800ac80 <strncpy>:
 800ac80:	b570      	push	{r4, r5, r6, lr}
 800ac82:	3901      	subs	r1, #1
 800ac84:	4604      	mov	r4, r0
 800ac86:	b902      	cbnz	r2, 800ac8a <strncpy+0xa>
 800ac88:	bd70      	pop	{r4, r5, r6, pc}
 800ac8a:	4623      	mov	r3, r4
 800ac8c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800ac90:	f803 5b01 	strb.w	r5, [r3], #1
 800ac94:	1e56      	subs	r6, r2, #1
 800ac96:	b92d      	cbnz	r5, 800aca4 <strncpy+0x24>
 800ac98:	4414      	add	r4, r2
 800ac9a:	42a3      	cmp	r3, r4
 800ac9c:	d0f4      	beq.n	800ac88 <strncpy+0x8>
 800ac9e:	f803 5b01 	strb.w	r5, [r3], #1
 800aca2:	e7fa      	b.n	800ac9a <strncpy+0x1a>
 800aca4:	461c      	mov	r4, r3
 800aca6:	4632      	mov	r2, r6
 800aca8:	e7ed      	b.n	800ac86 <strncpy+0x6>
	...

0800acac <_init>:
 800acac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acae:	bf00      	nop
 800acb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acb2:	bc08      	pop	{r3}
 800acb4:	469e      	mov	lr, r3
 800acb6:	4770      	bx	lr

0800acb8 <_fini>:
 800acb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acba:	bf00      	nop
 800acbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acbe:	bc08      	pop	{r3}
 800acc0:	469e      	mov	lr, r3
 800acc2:	4770      	bx	lr
