
Heissluftballon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007524  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080076b0  080076b0  000176b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007740  08007740  0002018c  2**0
                  CONTENTS
  4 .ARM          00000008  08007740  08007740  00017740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007748  08007748  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007748  08007748  00017748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007750  08007750  00017750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08007754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d0  2000018c  080078e0  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000155c  080078e0  0002155c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fdd8  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004208  00000000  00000000  0003ff94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014f8  00000000  00000000  000441a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012f0  00000000  00000000  00045698  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000206ea  00000000  00000000  00046988  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001612b  00000000  00000000  00067072  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a8b0f  00000000  00000000  0007d19d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00125cac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054f4  00000000  00000000  00125d28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000018c 	.word	0x2000018c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08007698 	.word	0x08007698

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000190 	.word	0x20000190
 80001c8:	08007698 	.word	0x08007698

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <_Z41__static_initialization_and_destruction_0ii>:

AppMain::AppMain() {

	model.getGPS_Device();

}
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d10b      	bne.n	80004f4 <_Z41__static_initialization_and_destruction_0ii+0x28>
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d106      	bne.n	80004f4 <_Z41__static_initialization_and_destruction_0ii+0x28>
	static Model model;
 80004e6:	4805      	ldr	r0, [pc, #20]	; (80004fc <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80004e8:	f000 f85c 	bl	80005a4 <_ZN5ModelC1Ev>
	static GPS gps(&model);
 80004ec:	4903      	ldr	r1, [pc, #12]	; (80004fc <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80004ee:	4804      	ldr	r0, [pc, #16]	; (8000500 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80004f0:	f000 f810 	bl	8000514 <_ZN3GPSC1EP5Model>
}
 80004f4:	bf00      	nop
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	200001a8 	.word	0x200001a8
 8000500:	20000250 	.word	0x20000250

08000504 <_GLOBAL__sub_I__ZN7AppMainC2Ev>:
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
 8000508:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800050c:	2001      	movs	r0, #1
 800050e:	f7ff ffdd 	bl	80004cc <_Z41__static_initialization_and_destruction_0ii>
 8000512:	bd80      	pop	{r7, pc}

08000514 <_ZN3GPSC1EP5Model>:


	extern UART_HandleTypeDef huart2;


GPS::GPS(Model* model) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2200      	movs	r2, #0
 8000522:	711a      	strb	r2, [r3, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2200      	movs	r2, #0
 8000528:	715a      	strb	r2, [r3, #5]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2200      	movs	r2, #0
 800052e:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2200      	movs	r2, #0
 8000536:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2200      	movs	r2, #0
 800053e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	this->model = model;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	683a      	ldr	r2, [r7, #0]
 8000546:	601a      	str	r2, [r3, #0]
	init();
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f000 f805 	bl	8000558 <_ZN3GPS4initEv>
}
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4618      	mov	r0, r3
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <_ZN3GPS4initEv>:
 *
 * @param none
 * @return none
 *
 */
void GPS::init(){
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < GPS_DATA_SIZE; i++) {
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	2b4f      	cmp	r3, #79	; 0x4f
 8000568:	dc0f      	bgt.n	800058a <_ZN3GPS4initEv+0x32>
		data[i] = '0';
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	4413      	add	r3, r2
 8000570:	3356      	adds	r3, #86	; 0x56
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	701a      	strb	r2, [r3, #0]
		GPS_Data[i] = '0';
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	4413      	add	r3, r2
 800057c:	3306      	adds	r3, #6
 800057e:	2230      	movs	r2, #48	; 0x30
 8000580:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < GPS_DATA_SIZE; i++) {
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	3301      	adds	r3, #1
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	e7ec      	b.n	8000564 <_ZN3GPS4initEv+0xc>
	}
	HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3305      	adds	r3, #5
 800058e:	2201      	movs	r2, #1
 8000590:	4619      	mov	r1, r3
 8000592:	4803      	ldr	r0, [pc, #12]	; (80005a0 <_ZN3GPS4initEv+0x48>)
 8000594:	f003 f83a 	bl	800360c <HAL_UART_Receive_IT>
}
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	200005d0 	.word	0x200005d0

080005a4 <_ZN5ModelC1Ev>:
 *      Author: marce
 */

#include "Model.h"

Model::Model() {
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

	for(uint8_t counter = 0; counter<GPS_DATA_SIZE; counter++){
 80005ac:	2300      	movs	r3, #0
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	2b4f      	cmp	r3, #79	; 0x4f
 80005b4:	d80d      	bhi.n	80005d2 <_ZN5ModelC1Ev+0x2e>
		 gpsGCS[counter] = 0;
 80005b6:	7bfb      	ldrb	r3, [r7, #15]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	2100      	movs	r1, #0
 80005bc:	54d1      	strb	r1, [r2, r3]
		 gpsDevice[counter] = 0;
 80005be:	7bfb      	ldrb	r3, [r7, #15]
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	4413      	add	r3, r2
 80005c4:	2200      	movs	r2, #0
 80005c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	for(uint8_t counter = 0; counter<GPS_DATA_SIZE; counter++){
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	3301      	adds	r3, #1
 80005ce:	73fb      	strb	r3, [r7, #15]
 80005d0:	e7ee      	b.n	80005b0 <_ZN5ModelC1Ev+0xc>
	}
	 humidity = 0;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2200      	movs	r2, #0
 80005d6:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	 pressure = 0;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2200      	movs	r2, #0
 80005de:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	 tempOutisde = 0;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2200      	movs	r2, #0
 80005e6:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	 tempInside = 0;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2200      	movs	r2, #0
 80005ee:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
}
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4618      	mov	r0, r3
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000616:	4b43      	ldr	r3, [pc, #268]	; (8000724 <MX_GPIO_Init+0x124>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	4a42      	ldr	r2, [pc, #264]	; (8000724 <MX_GPIO_Init+0x124>)
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000622:	4b40      	ldr	r3, [pc, #256]	; (8000724 <MX_GPIO_Init+0x124>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	f003 0304 	and.w	r3, r3, #4
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b3d      	ldr	r3, [pc, #244]	; (8000724 <MX_GPIO_Init+0x124>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	4a3c      	ldr	r2, [pc, #240]	; (8000724 <MX_GPIO_Init+0x124>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800063a:	4b3a      	ldr	r3, [pc, #232]	; (8000724 <MX_GPIO_Init+0x124>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	4b37      	ldr	r3, [pc, #220]	; (8000724 <MX_GPIO_Init+0x124>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	4a36      	ldr	r2, [pc, #216]	; (8000724 <MX_GPIO_Init+0x124>)
 800064c:	f043 0302 	orr.w	r3, r3, #2
 8000650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000652:	4b34      	ldr	r3, [pc, #208]	; (8000724 <MX_GPIO_Init+0x124>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|RFM_NSS_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f248 0102 	movw	r1, #32770	; 0x8002
 8000664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000668:	f000 fe12 	bl	8001290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAX_CS_Pin|MAX_DRDY_Pin|RFM_RST_Pin, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	210b      	movs	r1, #11
 8000670:	482d      	ldr	r0, [pc, #180]	; (8000728 <MX_GPIO_Init+0x128>)
 8000672:	f000 fe0d 	bl	8001290 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RFM_DIO2_Pin|RFM_DIO1_Pin;
 8000676:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800067a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	4619      	mov	r1, r3
 800068a:	4828      	ldr	r0, [pc, #160]	; (800072c <MX_GPIO_Init+0x12c>)
 800068c:	f000 fc8e 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NC_Pin|NCA8_Pin;
 8000690:	f240 1301 	movw	r3, #257	; 0x101
 8000694:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000696:	2303      	movs	r3, #3
 8000698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	4619      	mov	r1, r3
 80006a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a8:	f000 fc80 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Pin|RFM_NSS_Pin;
 80006ac:	f248 0302 	movw	r3, #32770	; 0x8002
 80006b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	2301      	movs	r3, #1
 80006b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	4619      	mov	r1, r3
 80006c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c8:	f000 fc70 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PRESSURE_INT_Pin;
 80006cc:	2310      	movs	r3, #16
 80006ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006d0:	4b17      	ldr	r3, [pc, #92]	; (8000730 <MX_GPIO_Init+0x130>)
 80006d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PRESSURE_INT_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	4619      	mov	r1, r3
 80006de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e2:	f000 fc63 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MAX_CS_Pin|MAX_DRDY_Pin|RFM_RST_Pin;
 80006e6:	230b      	movs	r3, #11
 80006e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	2301      	movs	r3, #1
 80006ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	4619      	mov	r1, r3
 80006fc:	480a      	ldr	r0, [pc, #40]	; (8000728 <MX_GPIO_Init+0x128>)
 80006fe:	f000 fc55 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RFM_DIO5_Pin|RFM_DIO3_Pin|RFM_DIO4_Pin|RFM_DIO0_Pin;
 8000702:	23f0      	movs	r3, #240	; 0xf0
 8000704:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	4619      	mov	r1, r3
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_GPIO_Init+0x128>)
 8000716:	f000 fc49 	bl	8000fac <HAL_GPIO_Init>

}
 800071a:	bf00      	nop
 800071c:	3720      	adds	r7, #32
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40021000 	.word	0x40021000
 8000728:	48000400 	.word	0x48000400
 800072c:	48000800 	.word	0x48000800
 8000730:	10110000 	.word	0x10110000

08000734 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000738:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <MX_I2C1_Init+0x74>)
 800073a:	4a1c      	ldr	r2, [pc, #112]	; (80007ac <MX_I2C1_Init+0x78>)
 800073c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800073e:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <MX_I2C1_Init+0x74>)
 8000740:	4a1b      	ldr	r2, [pc, #108]	; (80007b0 <MX_I2C1_Init+0x7c>)
 8000742:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_I2C1_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_I2C1_Init+0x74>)
 800074c:	2201      	movs	r2, #1
 800074e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_I2C1_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_I2C1_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_I2C1_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_I2C1_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_I2C1_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800076e:	480e      	ldr	r0, [pc, #56]	; (80007a8 <MX_I2C1_Init+0x74>)
 8000770:	f000 fda6 	bl	80012c0 <HAL_I2C_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800077a:	f000 f8df 	bl	800093c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800077e:	2100      	movs	r1, #0
 8000780:	4809      	ldr	r0, [pc, #36]	; (80007a8 <MX_I2C1_Init+0x74>)
 8000782:	f000 fe2c 	bl	80013de <HAL_I2CEx_ConfigAnalogFilter>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800078c:	f000 f8d6 	bl	800093c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000790:	2100      	movs	r1, #0
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_I2C1_Init+0x74>)
 8000794:	f000 fe6e 	bl	8001474 <HAL_I2CEx_ConfigDigitalFilter>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800079e:	f000 f8cd 	bl	800093c <Error_Handler>
  }

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000520 	.word	0x20000520
 80007ac:	40005400 	.word	0x40005400
 80007b0:	00707cbb 	.word	0x00707cbb

080007b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a18      	ldr	r2, [pc, #96]	; (8000834 <HAL_I2C_MspInit+0x80>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d129      	bne.n	800082a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <HAL_I2C_MspInit+0x84>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	4a17      	ldr	r2, [pc, #92]	; (8000838 <HAL_I2C_MspInit+0x84>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <HAL_I2C_MspInit+0x84>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007f4:	2312      	movs	r3, #18
 80007f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fc:	2303      	movs	r3, #3
 80007fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000800:	2304      	movs	r3, #4
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080e:	f000 fbcd 	bl	8000fac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <HAL_I2C_MspInit+0x84>)
 8000814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000816:	4a08      	ldr	r2, [pc, #32]	; (8000838 <HAL_I2C_MspInit+0x84>)
 8000818:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800081c:	6593      	str	r3, [r2, #88]	; 0x58
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <HAL_I2C_MspInit+0x84>)
 8000820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000822:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800082a:	bf00      	nop
 800082c:	3728      	adds	r7, #40	; 0x28
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40005400 	.word	0x40005400
 8000838:	40021000 	.word	0x40021000

0800083c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000840:	f000 fa31 	bl	8000ca6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000844:	f000 f80b 	bl	800085e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000848:	f7ff feda 	bl	8000600 <MX_GPIO_Init>
  MX_I2C1_Init();
 800084c:	f7ff ff72 	bl	8000734 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000850:	f000 f87c 	bl	800094c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000854:	f000 f98c 	bl	8000b70 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000858:	f006 f978 	bl	8006b4c <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800085c:	e7fe      	b.n	800085c <main+0x20>

0800085e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b0a4      	sub	sp, #144	; 0x90
 8000862:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000864:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000868:	2244      	movs	r2, #68	; 0x44
 800086a:	2100      	movs	r1, #0
 800086c:	4618      	mov	r0, r3
 800086e:	f006 ff0b 	bl	8007688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000872:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2234      	movs	r2, #52	; 0x34
 8000886:	2100      	movs	r1, #0
 8000888:	4618      	mov	r0, r3
 800088a:	f006 fefd 	bl	8007688 <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800088e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000892:	f001 fd8d 	bl	80023b0 <HAL_PWREx_ControlVoltageScaling>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0x42>
  {
    Error_Handler();
 800089c:	f000 f84e 	bl	800093c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80008a0:	2322      	movs	r3, #34	; 0x22
 80008a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008aa:	2301      	movs	r3, #1
 80008ac:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ae:	2340      	movs	r3, #64	; 0x40
 80008b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b2:	2302      	movs	r3, #2
 80008b4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008b6:	2302      	movs	r3, #2
 80008b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 8;
 80008c0:	2308      	movs	r3, #8
 80008c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 fdd0 	bl	800247c <HAL_RCC_OscConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80008e2:	f000 f82b 	bl	800093c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e6:	230f      	movs	r3, #15
 80008e8:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ea:	2303      	movs	r3, #3
 80008ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008fe:	2101      	movs	r1, #1
 8000900:	4618      	mov	r0, r3
 8000902:	f002 fa21 	bl	8002d48 <HAL_RCC_ClockConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800090c:	f000 f816 	bl	800093c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000910:	f242 0342 	movw	r3, #8258	; 0x2042
 8000914:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800091a:	2300      	movs	r3, #0
 800091c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800091e:	2300      	movs	r3, #0
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	4618      	mov	r0, r3
 8000926:	f002 fc13 	bl	8003150 <HAL_RCCEx_PeriphCLKConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000930:	f000 f804 	bl	800093c <Error_Handler>
  }
}
 8000934:	bf00      	nop
 8000936:	3790      	adds	r7, #144	; 0x90
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
	...

0800094c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000950:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <MX_SPI1_Init+0x74>)
 8000952:	4a1c      	ldr	r2, [pc, #112]	; (80009c4 <MX_SPI1_Init+0x78>)
 8000954:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000956:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <MX_SPI1_Init+0x74>)
 8000958:	f44f 7282 	mov.w	r2, #260	; 0x104
 800095c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800095e:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <MX_SPI1_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <MX_SPI1_Init+0x74>)
 8000966:	f44f 7240 	mov.w	r2, #768	; 0x300
 800096a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_SPI1_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <MX_SPI1_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_SPI1_Init+0x74>)
 800097a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800097e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <MX_SPI1_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_SPI1_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_SPI1_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_SPI1_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_SPI1_Init+0x74>)
 800099a:	2207      	movs	r2, #7
 800099c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_SPI1_Init+0x74>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_SPI1_Init+0x74>)
 80009a6:	2208      	movs	r2, #8
 80009a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_SPI1_Init+0x74>)
 80009ac:	f002 fd56 	bl	800345c <HAL_SPI_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009b6:	f7ff ffc1 	bl	800093c <Error_Handler>
  }

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	2000056c 	.word	0x2000056c
 80009c4:	40013000 	.word	0x40013000

080009c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a17      	ldr	r2, [pc, #92]	; (8000a44 <HAL_SPI_MspInit+0x7c>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d128      	bne.n	8000a3c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009ea:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <HAL_SPI_MspInit+0x80>)
 80009ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ee:	4a16      	ldr	r2, [pc, #88]	; (8000a48 <HAL_SPI_MspInit+0x80>)
 80009f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009f4:	6613      	str	r3, [r2, #96]	; 0x60
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <HAL_SPI_MspInit+0x80>)
 80009f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <HAL_SPI_MspInit+0x80>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	4a10      	ldr	r2, [pc, #64]	; (8000a48 <HAL_SPI_MspInit+0x80>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <HAL_SPI_MspInit+0x80>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a1a:	23e0      	movs	r3, #224	; 0xe0
 8000a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a2a:	2305      	movs	r3, #5
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a38:	f000 fab8 	bl	8000fac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	3728      	adds	r7, #40	; 0x28
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40013000 	.word	0x40013000
 8000a48:	40021000 	.word	0x40021000

08000a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <HAL_MspInit+0x44>)
 8000a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a56:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <HAL_MspInit+0x44>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <HAL_MspInit+0x44>)
 8000a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_MspInit+0x44>)
 8000a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <HAL_MspInit+0x44>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	6593      	str	r3, [r2, #88]	; 0x58
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_MspInit+0x44>)
 8000a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40021000 	.word	0x40021000

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <HardFault_Handler+0x4>

08000aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <MemManage_Handler+0x4>

08000aae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae8:	f000 f930 	bl	8000d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <USB_IRQHandler+0x10>)
 8000af6:	f000 fe13 	bl	8001720 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200012e8 	.word	0x200012e8

08000b04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <SystemInit+0x64>)
 8000b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0e:	4a16      	ldr	r2, [pc, #88]	; (8000b68 <SystemInit+0x64>)
 8000b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <SystemInit+0x68>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a13      	ldr	r2, [pc, #76]	; (8000b6c <SystemInit+0x68>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <SystemInit+0x68>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <SystemInit+0x68>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a0f      	ldr	r2, [pc, #60]	; (8000b6c <SystemInit+0x68>)
 8000b30:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b34:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b38:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <SystemInit+0x68>)
 8000b3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b40:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <SystemInit+0x68>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a09      	ldr	r2, [pc, #36]	; (8000b6c <SystemInit+0x68>)
 8000b48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b4c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <SystemInit+0x68>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <SystemInit+0x64>)
 8000b56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b5a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00
 8000b6c:	40021000 	.word	0x40021000

08000b70 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_USART2_UART_Init+0x58>)
 8000b76:	4a15      	ldr	r2, [pc, #84]	; (8000bcc <MX_USART2_UART_Init+0x5c>)
 8000b78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <MX_USART2_UART_Init+0x58>)
 8000b7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_USART2_UART_Init+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_USART2_UART_Init+0x58>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_USART2_UART_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_USART2_UART_Init+0x58>)
 8000b96:	220c      	movs	r2, #12
 8000b98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_USART2_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_USART2_UART_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_USART2_UART_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_USART2_UART_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_USART2_UART_Init+0x58>)
 8000bb4:	f002 fcdc 	bl	8003570 <HAL_UART_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bbe:	f7ff febd 	bl	800093c <Error_Handler>
  }

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200005d0 	.word	0x200005d0
 8000bcc:	40004400 	.word	0x40004400

08000bd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a17      	ldr	r2, [pc, #92]	; (8000c4c <HAL_UART_MspInit+0x7c>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d128      	bne.n	8000c44 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf2:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <HAL_UART_MspInit+0x80>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf6:	4a16      	ldr	r2, [pc, #88]	; (8000c50 <HAL_UART_MspInit+0x80>)
 8000bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8000bfe:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <HAL_UART_MspInit+0x80>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <HAL_UART_MspInit+0x80>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	4a10      	ldr	r2, [pc, #64]	; (8000c50 <HAL_UART_MspInit+0x80>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_UART_MspInit+0x80>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c22:	230c      	movs	r3, #12
 8000c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c32:	2307      	movs	r3, #7
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c40:	f000 f9b4 	bl	8000fac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c44:	bf00      	nop
 8000c46:	3728      	adds	r7, #40	; 0x28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40004400 	.word	0x40004400
 8000c50:	40021000 	.word	0x40021000

08000c54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c8c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c5a:	e003      	b.n	8000c64 <LoopCopyDataInit>

08000c5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c62:	3104      	adds	r1, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c64:	480b      	ldr	r0, [pc, #44]	; (8000c94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c6c:	d3f6      	bcc.n	8000c5c <CopyDataInit>
	ldr	r2, =_sbss
 8000c6e:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c70:	e002      	b.n	8000c78 <LoopFillZerobss>

08000c72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c74:	f842 3b04 	str.w	r3, [r2], #4

08000c78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <LoopForever+0x16>)
	cmp	r2, r3
 8000c7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c7c:	d3f9      	bcc.n	8000c72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c7e:	f7ff ff41 	bl	8000b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c82:	f006 fcdd 	bl	8007640 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c86:	f7ff fdd9 	bl	800083c <main>

08000c8a <LoopForever>:

LoopForever:
    b LoopForever
 8000c8a:	e7fe      	b.n	8000c8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c8c:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000c90:	08007754 	.word	0x08007754
	ldr	r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c98:	2000018c 	.word	0x2000018c
	ldr	r2, =_sbss
 8000c9c:	2000018c 	.word	0x2000018c
	ldr	r3, = _ebss
 8000ca0:	2000155c 	.word	0x2000155c

08000ca4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC1_2_IRQHandler>

08000ca6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cac:	2300      	movs	r3, #0
 8000cae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 f939 	bl	8000f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f000 f80e 	bl	8000cd8 <HAL_InitTick>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d002      	beq.n	8000cc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	71fb      	strb	r3, [r7, #7]
 8000cc6:	e001      	b.n	8000ccc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cc8:	f7ff fec0 	bl	8000a4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ce4:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <HAL_InitTick+0x68>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d022      	beq.n	8000d32 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cec:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <HAL_InitTick+0x6c>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <HAL_InitTick+0x68>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 f946 	bl	8000f92 <HAL_SYSTICK_Config>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d10f      	bne.n	8000d2c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b0f      	cmp	r3, #15
 8000d10:	d809      	bhi.n	8000d26 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d12:	2200      	movs	r2, #0
 8000d14:	6879      	ldr	r1, [r7, #4]
 8000d16:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1a:	f000 f910 	bl	8000f3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <HAL_InitTick+0x70>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	e007      	b.n	8000d36 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	73fb      	strb	r3, [r7, #15]
 8000d2a:	e004      	b.n	8000d36 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	73fb      	strb	r3, [r7, #15]
 8000d30:	e001      	b.n	8000d36 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000000 	.word	0x20000000
 8000d48:	20000004 	.word	0x20000004

08000d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <HAL_IncTick+0x1c>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <HAL_IncTick+0x20>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4413      	add	r3, r2
 8000d5a:	4a03      	ldr	r2, [pc, #12]	; (8000d68 <HAL_IncTick+0x1c>)
 8000d5c:	6013      	str	r3, [r2, #0]
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	20000650 	.word	0x20000650
 8000d6c:	20000008 	.word	0x20000008

08000d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <HAL_GetTick+0x14>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000650 	.word	0x20000650

08000d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da4:	4013      	ands	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dba:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	60d3      	str	r3, [r2, #12]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	f003 0307 	and.w	r3, r3, #7
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	db0b      	blt.n	8000e16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	f003 021f 	and.w	r2, r3, #31
 8000e04:	4907      	ldr	r1, [pc, #28]	; (8000e24 <__NVIC_EnableIRQ+0x38>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	095b      	lsrs	r3, r3, #5
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000e100 	.word	0xe000e100

08000e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db0a      	blt.n	8000e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	490c      	ldr	r1, [pc, #48]	; (8000e74 <__NVIC_SetPriority+0x4c>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e50:	e00a      	b.n	8000e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4908      	ldr	r1, [pc, #32]	; (8000e78 <__NVIC_SetPriority+0x50>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	0112      	lsls	r2, r2, #4
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	440b      	add	r3, r1
 8000e66:	761a      	strb	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f1c3 0307 	rsb	r3, r3, #7
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	bf28      	it	cs
 8000e9a:	2304      	movcs	r3, #4
 8000e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d902      	bls.n	8000eac <NVIC_EncodePriority+0x30>
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3b03      	subs	r3, #3
 8000eaa:	e000      	b.n	8000eae <NVIC_EncodePriority+0x32>
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43d9      	mvns	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	4313      	orrs	r3, r2
         );
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	; 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef4:	d301      	bcc.n	8000efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00f      	b.n	8000f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <SysTick_Config+0x40>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f02:	210f      	movs	r1, #15
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f7ff ff8e 	bl	8000e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <SysTick_Config+0x40>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f12:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <SysTick_Config+0x40>)
 8000f14:	2207      	movs	r2, #7
 8000f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	e000e010 	.word	0xe000e010

08000f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ff29 	bl	8000d88 <__NVIC_SetPriorityGrouping>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f50:	f7ff ff3e 	bl	8000dd0 <__NVIC_GetPriorityGrouping>
 8000f54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	6978      	ldr	r0, [r7, #20]
 8000f5c:	f7ff ff8e 	bl	8000e7c <NVIC_EncodePriority>
 8000f60:	4602      	mov	r2, r0
 8000f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff5d 	bl	8000e28 <__NVIC_SetPriority>
}
 8000f6e:	bf00      	nop
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff31 	bl	8000dec <__NVIC_EnableIRQ>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ffa2 	bl	8000ee4 <SysTick_Config>
 8000fa0:	4603      	mov	r3, r0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b087      	sub	sp, #28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fba:	e14e      	b.n	800125a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f000 8140 	beq.w	8001254 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d00b      	beq.n	8000ff4 <HAL_GPIO_Init+0x48>
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d007      	beq.n	8000ff4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fe8:	2b11      	cmp	r3, #17
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b12      	cmp	r3, #18
 8000ff2:	d130      	bne.n	8001056 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2203      	movs	r2, #3
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800102a:	2201      	movs	r2, #1
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	f003 0201 	and.w	r2, r3, #1
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	2203      	movs	r2, #3
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4013      	ands	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b02      	cmp	r3, #2
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0xea>
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b12      	cmp	r3, #18
 8001094:	d123      	bne.n	80010de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	08da      	lsrs	r2, r3, #3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3208      	adds	r2, #8
 800109e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	220f      	movs	r2, #15
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	691a      	ldr	r2, [r3, #16]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	08da      	lsrs	r2, r3, #3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3208      	adds	r2, #8
 80010d8:	6939      	ldr	r1, [r7, #16]
 80010da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	2203      	movs	r2, #3
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0203 	and.w	r2, r3, #3
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 809a 	beq.w	8001254 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001120:	4b55      	ldr	r3, [pc, #340]	; (8001278 <HAL_GPIO_Init+0x2cc>)
 8001122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001124:	4a54      	ldr	r2, [pc, #336]	; (8001278 <HAL_GPIO_Init+0x2cc>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	6613      	str	r3, [r2, #96]	; 0x60
 800112c:	4b52      	ldr	r3, [pc, #328]	; (8001278 <HAL_GPIO_Init+0x2cc>)
 800112e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001138:	4a50      	ldr	r2, [pc, #320]	; (800127c <HAL_GPIO_Init+0x2d0>)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	220f      	movs	r2, #15
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001162:	d013      	beq.n	800118c <HAL_GPIO_Init+0x1e0>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a46      	ldr	r2, [pc, #280]	; (8001280 <HAL_GPIO_Init+0x2d4>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d00d      	beq.n	8001188 <HAL_GPIO_Init+0x1dc>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a45      	ldr	r2, [pc, #276]	; (8001284 <HAL_GPIO_Init+0x2d8>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d007      	beq.n	8001184 <HAL_GPIO_Init+0x1d8>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a44      	ldr	r2, [pc, #272]	; (8001288 <HAL_GPIO_Init+0x2dc>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d101      	bne.n	8001180 <HAL_GPIO_Init+0x1d4>
 800117c:	2303      	movs	r3, #3
 800117e:	e006      	b.n	800118e <HAL_GPIO_Init+0x1e2>
 8001180:	2307      	movs	r3, #7
 8001182:	e004      	b.n	800118e <HAL_GPIO_Init+0x1e2>
 8001184:	2302      	movs	r3, #2
 8001186:	e002      	b.n	800118e <HAL_GPIO_Init+0x1e2>
 8001188:	2301      	movs	r3, #1
 800118a:	e000      	b.n	800118e <HAL_GPIO_Init+0x1e2>
 800118c:	2300      	movs	r3, #0
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	f002 0203 	and.w	r2, r2, #3
 8001194:	0092      	lsls	r2, r2, #2
 8001196:	4093      	lsls	r3, r2
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800119e:	4937      	ldr	r1, [pc, #220]	; (800127c <HAL_GPIO_Init+0x2d0>)
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3302      	adds	r3, #2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011ac:	4b37      	ldr	r3, [pc, #220]	; (800128c <HAL_GPIO_Init+0x2e0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011d0:	4a2e      	ldr	r2, [pc, #184]	; (800128c <HAL_GPIO_Init+0x2e0>)
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80011d6:	4b2d      	ldr	r3, [pc, #180]	; (800128c <HAL_GPIO_Init+0x2e0>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	43db      	mvns	r3, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011fa:	4a24      	ldr	r2, [pc, #144]	; (800128c <HAL_GPIO_Init+0x2e0>)
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001200:	4b22      	ldr	r3, [pc, #136]	; (800128c <HAL_GPIO_Init+0x2e0>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	43db      	mvns	r3, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001224:	4a19      	ldr	r2, [pc, #100]	; (800128c <HAL_GPIO_Init+0x2e0>)
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800122a:	4b18      	ldr	r3, [pc, #96]	; (800128c <HAL_GPIO_Init+0x2e0>)
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	43db      	mvns	r3, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4313      	orrs	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800124e:	4a0f      	ldr	r2, [pc, #60]	; (800128c <HAL_GPIO_Init+0x2e0>)
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	3301      	adds	r3, #1
 8001258:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	fa22 f303 	lsr.w	r3, r2, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	f47f aea9 	bne.w	8000fbc <HAL_GPIO_Init+0x10>
  }
}
 800126a:	bf00      	nop
 800126c:	371c      	adds	r7, #28
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000
 800127c:	40010000 	.word	0x40010000
 8001280:	48000400 	.word	0x48000400
 8001284:	48000800 	.word	0x48000800
 8001288:	48000c00 	.word	0x48000c00
 800128c:	40010400 	.word	0x40010400

08001290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]
 800129c:	4613      	mov	r3, r2
 800129e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a0:	787b      	ldrb	r3, [r7, #1]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012a6:	887a      	ldrh	r2, [r7, #2]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012ac:	e002      	b.n	80012b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ae:	887a      	ldrh	r2, [r7, #2]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e081      	b.n	80013d6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d106      	bne.n	80012ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff fa64 	bl	80007b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2224      	movs	r2, #36	; 0x24
 80012f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0201 	bic.w	r2, r2, #1
 8001302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001310:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001320:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d107      	bne.n	800133a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	e006      	b.n	8001348 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001346:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	2b02      	cmp	r3, #2
 800134e:	d104      	bne.n	800135a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001358:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	6812      	ldr	r2, [r2, #0]
 8001364:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800136c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800137c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691a      	ldr	r2, [r3, #16]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	ea42 0103 	orr.w	r1, r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	021a      	lsls	r2, r3, #8
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	430a      	orrs	r2, r1
 8001396:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69d9      	ldr	r1, [r3, #28]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a1a      	ldr	r2, [r3, #32]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	430a      	orrs	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f042 0201 	orr.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2220      	movs	r2, #32
 80013c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b20      	cmp	r3, #32
 80013f2:	d138      	bne.n	8001466 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d101      	bne.n	8001402 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80013fe:	2302      	movs	r3, #2
 8001400:	e032      	b.n	8001468 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2201      	movs	r2, #1
 8001406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2224      	movs	r2, #36	; 0x24
 800140e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 0201 	bic.w	r2, r2, #1
 8001420:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001430:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6819      	ldr	r1, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	430a      	orrs	r2, r1
 8001440:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f042 0201 	orr.w	r2, r2, #1
 8001450:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2220      	movs	r2, #32
 8001456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	e000      	b.n	8001468 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001466:	2302      	movs	r3, #2
  }
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b20      	cmp	r3, #32
 8001488:	d139      	bne.n	80014fe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001490:	2b01      	cmp	r3, #1
 8001492:	d101      	bne.n	8001498 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001494:	2302      	movs	r3, #2
 8001496:	e033      	b.n	8001500 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2224      	movs	r2, #36	; 0x24
 80014a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 0201 	bic.w	r2, r2, #1
 80014b6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014c6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f042 0201 	orr.w	r2, r2, #1
 80014e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2220      	movs	r2, #32
 80014ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e000      	b.n	8001500 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80014fe:	2302      	movs	r3, #2
  }
}
 8001500:	4618      	mov	r0, r3
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800150c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150e:	b08b      	sub	sp, #44	; 0x2c
 8001510:	af06      	add	r7, sp, #24
 8001512:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e0da      	b.n	80016d4 <HAL_PCD_Init+0x1c8>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d106      	bne.n	8001538 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f005 fce8 	bl	8006f08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2203      	movs	r2, #3
 800153c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f002 fe57 	bl	80041f8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	687e      	ldr	r6, [r7, #4]
 8001552:	466d      	mov	r5, sp
 8001554:	f106 0410 	add.w	r4, r6, #16
 8001558:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800155a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800155c:	6823      	ldr	r3, [r4, #0]
 800155e:	602b      	str	r3, [r5, #0]
 8001560:	1d33      	adds	r3, r6, #4
 8001562:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001564:	6838      	ldr	r0, [r7, #0]
 8001566:	f002 fe1d 	bl	80041a4 <USB_CoreInit>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2202      	movs	r2, #2
 8001574:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e0ab      	b.n	80016d4 <HAL_PCD_Init+0x1c8>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f002 fe53 	bl	800422e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001588:	2300      	movs	r3, #0
 800158a:	73fb      	strb	r3, [r7, #15]
 800158c:	e035      	b.n	80015fa <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	015b      	lsls	r3, r3, #5
 8001594:	4413      	add	r3, r2
 8001596:	3329      	adds	r3, #41	; 0x29
 8001598:	2201      	movs	r2, #1
 800159a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	015b      	lsls	r3, r3, #5
 80015a2:	4413      	add	r3, r2
 80015a4:	3328      	adds	r3, #40	; 0x28
 80015a6:	7bfa      	ldrb	r2, [r7, #15]
 80015a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	7bfa      	ldrb	r2, [r7, #15]
 80015ae:	b291      	uxth	r1, r2
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	015b      	lsls	r3, r3, #5
 80015b4:	4413      	add	r3, r2
 80015b6:	3336      	adds	r3, #54	; 0x36
 80015b8:	460a      	mov	r2, r1
 80015ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	015b      	lsls	r3, r3, #5
 80015c2:	4413      	add	r3, r2
 80015c4:	332b      	adds	r3, #43	; 0x2b
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	015b      	lsls	r3, r3, #5
 80015d0:	4413      	add	r3, r2
 80015d2:	3338      	adds	r3, #56	; 0x38
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	015b      	lsls	r3, r3, #5
 80015de:	4413      	add	r3, r2
 80015e0:	333c      	adds	r3, #60	; 0x3c
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	3302      	adds	r3, #2
 80015ec:	015b      	lsls	r3, r3, #5
 80015ee:	4413      	add	r3, r2
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	3301      	adds	r3, #1
 80015f8:	73fb      	strb	r3, [r7, #15]
 80015fa:	7bfa      	ldrb	r2, [r7, #15]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	429a      	cmp	r2, r3
 8001602:	d3c4      	bcc.n	800158e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001604:	2300      	movs	r3, #0
 8001606:	73fb      	strb	r3, [r7, #15]
 8001608:	e031      	b.n	800166e <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	015b      	lsls	r3, r3, #5
 8001610:	4413      	add	r3, r2
 8001612:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	015b      	lsls	r3, r3, #5
 8001620:	4413      	add	r3, r2
 8001622:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001626:	7bfa      	ldrb	r2, [r7, #15]
 8001628:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	015b      	lsls	r3, r3, #5
 8001630:	4413      	add	r3, r2
 8001632:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	015b      	lsls	r3, r3, #5
 8001640:	4413      	add	r3, r2
 8001642:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	015b      	lsls	r3, r3, #5
 8001650:	4413      	add	r3, r2
 8001652:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	330a      	adds	r3, #10
 8001660:	015b      	lsls	r3, r3, #5
 8001662:	4413      	add	r3, r2
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	3301      	adds	r3, #1
 800166c:	73fb      	strb	r3, [r7, #15]
 800166e:	7bfa      	ldrb	r2, [r7, #15]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	429a      	cmp	r2, r3
 8001676:	d3c8      	bcc.n	800160a <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	603b      	str	r3, [r7, #0]
 800167e:	687e      	ldr	r6, [r7, #4]
 8001680:	466d      	mov	r5, sp
 8001682:	f106 0410 	add.w	r4, r6, #16
 8001686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001688:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800168a:	6823      	ldr	r3, [r4, #0]
 800168c:	602b      	str	r3, [r5, #0]
 800168e:	1d33      	adds	r3, r6, #4
 8001690:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001692:	6838      	ldr	r0, [r7, #0]
 8001694:	f002 fdd8 	bl	8004248 <USB_DevInit>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d005      	beq.n	80016aa <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2202      	movs	r2, #2
 80016a2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e014      	b.n	80016d4 <HAL_PCD_Init+0x1c8>
  }

  hpcd->USB_Address = 0U;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d102      	bne.n	80016c8 <HAL_PCD_Init+0x1bc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 fe3b 	bl	800233e <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f003 fe1e 	bl	800530e <USB_DevDisconnect>

  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d101      	bne.n	80016f2 <HAL_PCD_Start+0x16>
 80016ee:	2302      	movs	r3, #2
 80016f0:	e012      	b.n	8001718 <HAL_PCD_Start+0x3c>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f003 fdee 	bl	80052e0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f002 fd5c 	bl	80041c6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f003 fe03 	bl	8005338 <USB_ReadInterrupts>
 8001732:	4603      	mov	r3, r0
 8001734:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800173c:	d102      	bne.n	8001744 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 fb34 	bl	8001dac <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f003 fdf5 	bl	8005338 <USB_ReadInterrupts>
 800174e:	4603      	mov	r3, r0
 8001750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001758:	d112      	bne.n	8001780 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001762:	b29a      	uxth	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800176c:	b292      	uxth	r2, r2
 800176e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f005 fc63 	bl	800703e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001778:	2100      	movs	r1, #0
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f91e 	bl	80019bc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f003 fdd7 	bl	8005338 <USB_ReadInterrupts>
 800178a:	4603      	mov	r3, r0
 800178c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001794:	d10b      	bne.n	80017ae <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800179e:	b29a      	uxth	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017a8:	b292      	uxth	r2, r2
 80017aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f003 fdc0 	bl	8005338 <USB_ReadInterrupts>
 80017b8:	4603      	mov	r3, r0
 80017ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017c2:	d10b      	bne.n	80017dc <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017d6:	b292      	uxth	r2, r2
 80017d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f003 fda9 	bl	8005338 <USB_ReadInterrupts>
 80017e6:	4603      	mov	r3, r0
 80017e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017f0:	d133      	bne.n	800185a <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 0204 	bic.w	r2, r2, #4
 8001804:	b292      	uxth	r2, r2
 8001806:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001812:	b29a      	uxth	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0208 	bic.w	r2, r2, #8
 800181c:	b292      	uxth	r2, r2
 800181e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8001828:	2b01      	cmp	r3, #1
 800182a:	d107      	bne.n	800183c <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001834:	2100      	movs	r1, #0
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f005 feae 	bl	8007598 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f005 fc37 	bl	80070b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800184a:	b29a      	uxth	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001854:	b292      	uxth	r2, r2
 8001856:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f003 fd6a 	bl	8005338 <USB_ReadInterrupts>
 8001864:	4603      	mov	r3, r0
 8001866:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800186a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800186e:	d126      	bne.n	80018be <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001878:	b29a      	uxth	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0208 	orr.w	r2, r2, #8
 8001882:	b292      	uxth	r2, r2
 8001884:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001890:	b29a      	uxth	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800189a:	b292      	uxth	r2, r2
 800189c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0204 	orr.w	r2, r2, #4
 80018b2:	b292      	uxth	r2, r2
 80018b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f005 fbdf 	bl	800707c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f003 fd38 	bl	8005338 <USB_ReadInterrupts>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ce:	2b80      	cmp	r3, #128	; 0x80
 80018d0:	d13f      	bne.n	8001952 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018da:	b29a      	uxth	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018e4:	b292      	uxth	r2, r2
 80018e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d12b      	bne.n	800194c <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0204 	orr.w	r2, r2, #4
 8001906:	b292      	uxth	r2, r2
 8001908:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001914:	b29a      	uxth	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 0208 	orr.w	r2, r2, #8
 800191e:	b292      	uxth	r2, r2
 8001920:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001934:	b29b      	uxth	r3, r3
 8001936:	089b      	lsrs	r3, r3, #2
 8001938:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001942:	2101      	movs	r1, #1
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f005 fe27 	bl	8007598 <HAL_PCDEx_LPM_Callback>
 800194a:	e002      	b.n	8001952 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f005 fb95 	bl	800707c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f003 fcee 	bl	8005338 <USB_ReadInterrupts>
 800195c:	4603      	mov	r3, r0
 800195e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001966:	d10e      	bne.n	8001986 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001970:	b29a      	uxth	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800197a:	b292      	uxth	r2, r2
 800197c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f005 fb4e 	bl	8007022 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f003 fcd4 	bl	8005338 <USB_ReadInterrupts>
 8001990:	4603      	mov	r3, r0
 8001992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800199a:	d10b      	bne.n	80019b4 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019ae:	b292      	uxth	r2, r2
 80019b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80019b4:	bf00      	nop
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d101      	bne.n	80019d6 <HAL_PCD_SetAddress+0x1a>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e013      	b.n	80019fe <HAL_PCD_SetAddress+0x42>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	78fa      	ldrb	r2, [r7, #3]
 80019e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	78fa      	ldrb	r2, [r7, #3]
 80019ec:	4611      	mov	r1, r2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f003 fc62 	bl	80052b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b084      	sub	sp, #16
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	4608      	mov	r0, r1
 8001a10:	4611      	mov	r1, r2
 8001a12:	461a      	mov	r2, r3
 8001a14:	4603      	mov	r3, r0
 8001a16:	70fb      	strb	r3, [r7, #3]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	803b      	strh	r3, [r7, #0]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	da0b      	bge.n	8001a44 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	015b      	lsls	r3, r3, #5
 8001a34:	3328      	adds	r3, #40	; 0x28
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	705a      	strb	r2, [r3, #1]
 8001a42:	e00b      	b.n	8001a5c <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	015b      	lsls	r3, r3, #5
 8001a4c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	4413      	add	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a68:	883a      	ldrh	r2, [r7, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	78ba      	ldrb	r2, [r7, #2]
 8001a72:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	785b      	ldrb	r3, [r3, #1]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d004      	beq.n	8001a86 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a86:	78bb      	ldrb	r3, [r7, #2]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d102      	bne.n	8001a92 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <HAL_PCD_EP_Open+0x9a>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e00e      	b.n	8001abe <HAL_PCD_EP_Open+0xb8>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68f9      	ldr	r1, [r7, #12]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f002 fbee 	bl	8004290 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001abc:	7afb      	ldrb	r3, [r7, #11]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b084      	sub	sp, #16
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
 8001ace:	460b      	mov	r3, r1
 8001ad0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ad2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	da0b      	bge.n	8001af2 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ada:	78fb      	ldrb	r3, [r7, #3]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	015b      	lsls	r3, r3, #5
 8001ae2:	3328      	adds	r3, #40	; 0x28
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2201      	movs	r2, #1
 8001aee:	705a      	strb	r2, [r3, #1]
 8001af0:	e00b      	b.n	8001b0a <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001af2:	78fb      	ldrb	r3, [r7, #3]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	015b      	lsls	r3, r3, #5
 8001afa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_PCD_EP_Close+0x5e>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e00e      	b.n	8001b42 <HAL_PCD_EP_Close+0x7c>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68f9      	ldr	r1, [r7, #12]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f002 fe9c 	bl	8004870 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b086      	sub	sp, #24
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	607a      	str	r2, [r7, #4]
 8001b54:	603b      	str	r3, [r7, #0]
 8001b56:	460b      	mov	r3, r1
 8001b58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b5a:	7afb      	ldrb	r3, [r7, #11]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	015b      	lsls	r3, r3, #5
 8001b62:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	4413      	add	r3, r2
 8001b6a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	2200      	movs	r2, #0
 8001b82:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b84:	7afb      	ldrb	r3, [r7, #11]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b90:	7afb      	ldrb	r3, [r7, #11]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d106      	bne.n	8001ba8 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6979      	ldr	r1, [r7, #20]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f002 fffb 	bl	8004b9c <USB_EPStartXfer>
 8001ba6:	e005      	b.n	8001bb4 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6979      	ldr	r1, [r7, #20]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f002 fff4 	bl	8004b9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001bca:	78fb      	ldrb	r3, [r7, #3]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	330a      	adds	r3, #10
 8001bd4:	015b      	lsls	r3, r3, #5
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3304      	adds	r3, #4
 8001bda:	681b      	ldr	r3, [r3, #0]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	607a      	str	r2, [r7, #4]
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bf8:	7afb      	ldrb	r3, [r7, #11]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	015b      	lsls	r3, r3, #5
 8001c00:	3328      	adds	r3, #40	; 0x28
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	4413      	add	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c20:	7afb      	ldrb	r3, [r7, #11]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c2c:	7afb      	ldrb	r3, [r7, #11]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d106      	bne.n	8001c44 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6979      	ldr	r1, [r7, #20]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f002 ffad 	bl	8004b9c <USB_EPStartXfer>
 8001c42:	e005      	b.n	8001c50 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6979      	ldr	r1, [r7, #20]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f002 ffa6 	bl	8004b9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b084      	sub	sp, #16
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	460b      	mov	r3, r1
 8001c64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c66:	78fb      	ldrb	r3, [r7, #3]
 8001c68:	f003 0207 	and.w	r2, r3, #7
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d901      	bls.n	8001c78 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e046      	b.n	8001d06 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	da0b      	bge.n	8001c98 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c80:	78fb      	ldrb	r3, [r7, #3]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	015b      	lsls	r3, r3, #5
 8001c88:	3328      	adds	r3, #40	; 0x28
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2201      	movs	r2, #1
 8001c94:	705a      	strb	r2, [r3, #1]
 8001c96:	e009      	b.n	8001cac <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	015b      	lsls	r3, r3, #5
 8001c9c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cb2:	78fb      	ldrb	r3, [r7, #3]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_PCD_EP_SetStall+0x72>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e01c      	b.n	8001d06 <HAL_PCD_EP_SetStall+0xac>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68f9      	ldr	r1, [r7, #12]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f003 fa16 	bl	800510c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ce0:	78fb      	ldrb	r3, [r7, #3]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d108      	bne.n	8001cfc <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	f003 fb2e 	bl	8005358 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b084      	sub	sp, #16
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	460b      	mov	r3, r1
 8001d18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	f003 020f 	and.w	r2, r3, #15
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d901      	bls.n	8001d2c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e03a      	b.n	8001da2 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	da0b      	bge.n	8001d4c <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d34:	78fb      	ldrb	r3, [r7, #3]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	015b      	lsls	r3, r3, #5
 8001d3c:	3328      	adds	r3, #40	; 0x28
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2201      	movs	r2, #1
 8001d48:	705a      	strb	r2, [r3, #1]
 8001d4a:	e00b      	b.n	8001d64 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	015b      	lsls	r3, r3, #5
 8001d54:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d6a:	78fb      	ldrb	r3, [r7, #3]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d101      	bne.n	8001d84 <HAL_PCD_EP_ClrStall+0x76>
 8001d80:	2302      	movs	r3, #2
 8001d82:	e00e      	b.n	8001da2 <HAL_PCD_EP_ClrStall+0x94>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68f9      	ldr	r1, [r7, #12]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f003 f9fc 	bl	8005190 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001dac:	b590      	push	{r4, r7, lr}
 8001dae:	b089      	sub	sp, #36	; 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001db4:	e274      	b.n	80022a0 <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dbe:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001dc0:	8afb      	ldrh	r3, [r7, #22]
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	f003 030f 	and.w	r3, r3, #15
 8001dc8:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001dca:	7d7b      	ldrb	r3, [r7, #21]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f040 813c 	bne.w	800204a <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001dd2:	8afb      	ldrh	r3, [r7, #22]
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d14f      	bne.n	8001e7c <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dec:	b29c      	uxth	r4, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001df6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3328      	adds	r3, #40	; 0x28
 8001e02:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4413      	add	r3, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	695a      	ldr	r2, [r3, #20]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	441a      	add	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f005 f8d9 	bl	8006ff4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 8228 	beq.w	80022a0 <PCD_EP_ISR_Handler+0x4f4>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f040 8223 	bne.w	80022a0 <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	b292      	uxth	r2, r2
 8001e6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e7a:	e211      	b.n	80022a0 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e82:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001e8c:	8a7b      	ldrh	r3, [r7, #18]
 8001e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d031      	beq.n	8001efa <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	f003 fa8e 	bl	80053f2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	b29c      	uxth	r4, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001eee:	b292      	uxth	r2, r2
 8001ef0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f005 f854 	bl	8006fa0 <HAL_PCD_SetupStageCallback>
 8001ef8:	e1d2      	b.n	80022a0 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001efa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f280 81ce 	bge.w	80022a0 <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f10:	4013      	ands	r3, r2
 8001f12:	b29c      	uxth	r4, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001f1c:	b292      	uxth	r2, r2
 8001f1e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4413      	add	r3, r2
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d019      	beq.n	8001f84 <PCD_EP_ISR_Handler+0x1d8>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d015      	beq.n	8001f84 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6818      	ldr	r0, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6959      	ldr	r1, [r3, #20]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	f003 fa42 	bl	80053f2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	695a      	ldr	r2, [r3, #20]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	441a      	add	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f005 f820 	bl	8006fc4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	461c      	mov	r4, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	441c      	add	r4, r3
 8001f96:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8001f9a:	461c      	mov	r4, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10e      	bne.n	8001fc2 <PCD_EP_ISR_Handler+0x216>
 8001fa4:	8823      	ldrh	r3, [r4, #0]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	8023      	strh	r3, [r4, #0]
 8001fb0:	8823      	ldrh	r3, [r4, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	8023      	strh	r3, [r4, #0]
 8001fc0:	e02d      	b.n	800201e <PCD_EP_ISR_Handler+0x272>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	2b3e      	cmp	r3, #62	; 0x3e
 8001fc8:	d812      	bhi.n	8001ff0 <PCD_EP_ISR_Handler+0x244>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	085b      	lsrs	r3, r3, #1
 8001fd0:	61bb      	str	r3, [r7, #24]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <PCD_EP_ISR_Handler+0x238>
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	61bb      	str	r3, [r7, #24]
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	029b      	lsls	r3, r3, #10
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	8023      	strh	r3, [r4, #0]
 8001fee:	e016      	b.n	800201e <PCD_EP_ISR_Handler+0x272>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	095b      	lsrs	r3, r3, #5
 8001ff6:	61bb      	str	r3, [r7, #24]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	f003 031f 	and.w	r3, r3, #31
 8002000:	2b00      	cmp	r3, #0
 8002002:	d102      	bne.n	800200a <PCD_EP_ISR_Handler+0x25e>
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	3b01      	subs	r3, #1
 8002008:	61bb      	str	r3, [r7, #24]
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	b29b      	uxth	r3, r3
 800200e:	029b      	lsls	r3, r3, #10
 8002010:	b29b      	uxth	r3, r3
 8002012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800201a:	b29b      	uxth	r3, r3
 800201c:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	b29b      	uxth	r3, r3
 8002026:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800202a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800202e:	b29c      	uxth	r4, r3
 8002030:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002034:	b29c      	uxth	r4, r3
 8002036:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800203a:	b29c      	uxth	r4, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b9e      	ldr	r3, [pc, #632]	; (80022bc <PCD_EP_ISR_Handler+0x510>)
 8002042:	4323      	orrs	r3, r4
 8002044:	b29b      	uxth	r3, r3
 8002046:	8013      	strh	r3, [r2, #0]
 8002048:	e12a      	b.n	80022a0 <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	7d7b      	ldrb	r3, [r7, #21]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800205a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800205e:	2b00      	cmp	r3, #0
 8002060:	f280 80cb 	bge.w	80021fa <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	7d7b      	ldrb	r3, [r7, #21]
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	b29a      	uxth	r2, r3
 8002074:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002078:	4013      	ands	r3, r2
 800207a:	b29c      	uxth	r4, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	461a      	mov	r2, r3
 8002082:	7d7b      	ldrb	r3, [r7, #21]
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800208c:	b292      	uxth	r2, r2
 800208e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002090:	7d7b      	ldrb	r3, [r7, #21]
 8002092:	015b      	lsls	r3, r3, #5
 8002094:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	4413      	add	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	7b1b      	ldrb	r3, [r3, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d11f      	bne.n	80020e6 <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	461a      	mov	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ca:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80020cc:	8bfb      	ldrh	r3, [r7, #30]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d06e      	beq.n	80021b0 <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6959      	ldr	r1, [r3, #20]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	88da      	ldrh	r2, [r3, #6]
 80020de:	8bfb      	ldrh	r3, [r7, #30]
 80020e0:	f003 f987 	bl	80053f2 <USB_ReadPMA>
 80020e4:	e064      	b.n	80021b0 <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002100:	b29c      	uxth	r4, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	461a      	mov	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	441a      	add	r2, r3
 8002110:	4b6b      	ldr	r3, [pc, #428]	; (80022c0 <PCD_EP_ISR_Handler+0x514>)
 8002112:	4323      	orrs	r3, r4
 8002114:	b29b      	uxth	r3, r3
 8002116:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	b29b      	uxth	r3, r3
 800212a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d01f      	beq.n	8002172 <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800213a:	b29b      	uxth	r3, r3
 800213c:	461a      	mov	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4413      	add	r3, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	4413      	add	r3, r2
 800214c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002156:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002158:	8bfb      	ldrh	r3, [r7, #30]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d028      	beq.n	80021b0 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6959      	ldr	r1, [r3, #20]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	891a      	ldrh	r2, [r3, #8]
 800216a:	8bfb      	ldrh	r3, [r7, #30]
 800216c:	f003 f941 	bl	80053f2 <USB_ReadPMA>
 8002170:	e01e      	b.n	80021b0 <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800217a:	b29b      	uxth	r3, r3
 800217c:	461a      	mov	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6812      	ldr	r2, [r2, #0]
 800218a:	4413      	add	r3, r2
 800218c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002196:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002198:	8bfb      	ldrh	r3, [r7, #30]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d008      	beq.n	80021b0 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6818      	ldr	r0, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6959      	ldr	r1, [r3, #20]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	895a      	ldrh	r2, [r3, #10]
 80021aa:	8bfb      	ldrh	r3, [r7, #30]
 80021ac:	f003 f921 	bl	80053f2 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	69da      	ldr	r2, [r3, #28]
 80021b4:	8bfb      	ldrh	r3, [r7, #30]
 80021b6:	441a      	add	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	695a      	ldr	r2, [r3, #20]
 80021c0:	8bfb      	ldrh	r3, [r7, #30]
 80021c2:	441a      	add	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d004      	beq.n	80021da <PCD_EP_ISR_Handler+0x42e>
 80021d0:	8bfa      	ldrh	r2, [r7, #30]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d206      	bcs.n	80021e8 <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	4619      	mov	r1, r3
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f004 feef 	bl	8006fc4 <HAL_PCD_DataOutStageCallback>
 80021e6:	e008      	b.n	80021fa <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	7819      	ldrb	r1, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	695a      	ldr	r2, [r3, #20]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff fca8 	bl	8001b4a <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80021fa:	8a7b      	ldrh	r3, [r7, #18]
 80021fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002200:	2b00      	cmp	r3, #0
 8002202:	d04d      	beq.n	80022a0 <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002204:	7d7b      	ldrb	r3, [r7, #21]
 8002206:	015b      	lsls	r3, r3, #5
 8002208:	3328      	adds	r3, #40	; 0x28
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	7d7b      	ldrb	r3, [r7, #21]
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	b29b      	uxth	r3, r3
 8002220:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002228:	b29c      	uxth	r4, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	7d7b      	ldrb	r3, [r7, #21]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	441a      	add	r2, r3
 8002236:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800223a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800223e:	b29b      	uxth	r3, r3
 8002240:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800224a:	b29b      	uxth	r3, r3
 800224c:	461a      	mov	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4413      	add	r3, r2
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6812      	ldr	r2, [r2, #0]
 800225a:	4413      	add	r3, r2
 800225c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	441a      	add	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d106      	bne.n	800228e <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	4619      	mov	r1, r3
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f004 feb4 	bl	8006ff4 <HAL_PCD_DataInStageCallback>
 800228c:	e008      	b.n	80022a0 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	7819      	ldrb	r1, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	695a      	ldr	r2, [r3, #20]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff fca4 	bl	8001be8 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	b21b      	sxth	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f6ff ad82 	blt.w	8001db6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3724      	adds	r7, #36	; 0x24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd90      	pop	{r4, r7, pc}
 80022bc:	ffff8080 	.word	0xffff8080
 80022c0:	ffff80c0 	.word	0xffff80c0

080022c4 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	607b      	str	r3, [r7, #4]
 80022ce:	460b      	mov	r3, r1
 80022d0:	817b      	strh	r3, [r7, #10]
 80022d2:	4613      	mov	r3, r2
 80022d4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80022d6:	897b      	ldrh	r3, [r7, #10]
 80022d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022dc:	b29b      	uxth	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d008      	beq.n	80022f4 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022e2:	897b      	ldrh	r3, [r7, #10]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	015b      	lsls	r3, r3, #5
 80022ea:	3328      	adds	r3, #40	; 0x28
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	4413      	add	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	e006      	b.n	8002302 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022f4:	897b      	ldrh	r3, [r7, #10]
 80022f6:	015b      	lsls	r3, r3, #5
 80022f8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	4413      	add	r3, r2
 8002300:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002302:	893b      	ldrh	r3, [r7, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d107      	bne.n	8002318 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2200      	movs	r2, #0
 800230c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	b29a      	uxth	r2, r3
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	80da      	strh	r2, [r3, #6]
 8002316:	e00b      	b.n	8002330 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	2201      	movs	r2, #1
 800231c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	b29a      	uxth	r2, r3
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	0c1b      	lsrs	r3, r3, #16
 800232a:	b29a      	uxth	r2, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	371c      	adds	r7, #28
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800233e:	b480      	push	{r7}
 8002340:	b085      	sub	sp, #20
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002362:	b29b      	uxth	r3, r3
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002376:	b29b      	uxth	r3, r3
 8002378:	f043 0302 	orr.w	r3, r3, #2
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <HAL_PWREx_GetVoltageRange+0x18>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40007000 	.word	0x40007000

080023b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023be:	d130      	bne.n	8002422 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80023c0:	4b23      	ldr	r3, [pc, #140]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023cc:	d038      	beq.n	8002440 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023ce:	4b20      	ldr	r3, [pc, #128]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023d6:	4a1e      	ldr	r2, [pc, #120]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023de:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2232      	movs	r2, #50	; 0x32
 80023e4:	fb02 f303 	mul.w	r3, r2, r3
 80023e8:	4a1b      	ldr	r2, [pc, #108]	; (8002458 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	0c9b      	lsrs	r3, r3, #18
 80023f0:	3301      	adds	r3, #1
 80023f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023f4:	e002      	b.n	80023fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	3b01      	subs	r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023fc:	4b14      	ldr	r3, [pc, #80]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002408:	d102      	bne.n	8002410 <HAL_PWREx_ControlVoltageScaling+0x60>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1f2      	bne.n	80023f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002410:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800241c:	d110      	bne.n	8002440 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e00f      	b.n	8002442 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002422:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800242a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800242e:	d007      	beq.n	8002440 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002430:	4b07      	ldr	r3, [pc, #28]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002438:	4a05      	ldr	r2, [pc, #20]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800243a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800243e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40007000 	.word	0x40007000
 8002454:	20000000 	.word	0x20000000
 8002458:	431bde83 	.word	0x431bde83

0800245c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	4a04      	ldr	r2, [pc, #16]	; (8002478 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800246a:	6053      	str	r3, [r2, #4]
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40007000 	.word	0x40007000

0800247c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	; 0x28
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d102      	bne.n	8002490 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	f000 bc56 	b.w	8002d3c <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002490:	4ba1      	ldr	r3, [pc, #644]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 030c 	and.w	r3, r3, #12
 8002498:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800249a:	4b9f      	ldr	r3, [pc, #636]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0310 	and.w	r3, r3, #16
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 80e6 	beq.w	800267e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d007      	beq.n	80024c8 <HAL_RCC_OscConfig+0x4c>
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	2b0c      	cmp	r3, #12
 80024bc:	f040 808d 	bne.w	80025da <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	f040 8089 	bne.w	80025da <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024c8:	4b93      	ldr	r3, [pc, #588]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d006      	beq.n	80024e2 <HAL_RCC_OscConfig+0x66>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d102      	bne.n	80024e2 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	f000 bc2d 	b.w	8002d3c <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024e6:	4b8c      	ldr	r3, [pc, #560]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d004      	beq.n	80024fc <HAL_RCC_OscConfig+0x80>
 80024f2:	4b89      	ldr	r3, [pc, #548]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024fa:	e005      	b.n	8002508 <HAL_RCC_OscConfig+0x8c>
 80024fc:	4b86      	ldr	r3, [pc, #536]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 80024fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002508:	4293      	cmp	r3, r2
 800250a:	d224      	bcs.n	8002556 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	4618      	mov	r0, r3
 8002512:	f000 fdbd 	bl	8003090 <RCC_SetFlashLatencyFromMSIRange>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	f000 bc0d 	b.w	8002d3c <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002522:	4b7d      	ldr	r3, [pc, #500]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a7c      	ldr	r2, [pc, #496]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 8002528:	f043 0308 	orr.w	r3, r3, #8
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	4b7a      	ldr	r3, [pc, #488]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	4977      	ldr	r1, [pc, #476]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 800253c:	4313      	orrs	r3, r2
 800253e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002540:	4b75      	ldr	r3, [pc, #468]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	021b      	lsls	r3, r3, #8
 800254e:	4972      	ldr	r1, [pc, #456]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 8002550:	4313      	orrs	r3, r2
 8002552:	604b      	str	r3, [r1, #4]
 8002554:	e025      	b.n	80025a2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002556:	4b70      	ldr	r3, [pc, #448]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a6f      	ldr	r2, [pc, #444]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 800255c:	f043 0308 	orr.w	r3, r3, #8
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	4b6d      	ldr	r3, [pc, #436]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	496a      	ldr	r1, [pc, #424]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 8002570:	4313      	orrs	r3, r2
 8002572:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002574:	4b68      	ldr	r3, [pc, #416]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	021b      	lsls	r3, r3, #8
 8002582:	4965      	ldr	r1, [pc, #404]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 8002584:	4313      	orrs	r3, r2
 8002586:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	4618      	mov	r0, r3
 8002594:	f000 fd7c 	bl	8003090 <RCC_SetFlashLatencyFromMSIRange>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e3cc      	b.n	8002d3c <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025a2:	f000 fcb3 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 80025a6:	4601      	mov	r1, r0
 80025a8:	4b5b      	ldr	r3, [pc, #364]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	4a5a      	ldr	r2, [pc, #360]	; (800271c <HAL_RCC_OscConfig+0x2a0>)
 80025b4:	5cd3      	ldrb	r3, [r2, r3]
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	fa21 f303 	lsr.w	r3, r1, r3
 80025be:	4a58      	ldr	r2, [pc, #352]	; (8002720 <HAL_RCC_OscConfig+0x2a4>)
 80025c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025c2:	4b58      	ldr	r3, [pc, #352]	; (8002724 <HAL_RCC_OscConfig+0x2a8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe fb86 	bl	8000cd8 <HAL_InitTick>
 80025cc:	4603      	mov	r3, r0
 80025ce:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80025d0:	7dfb      	ldrb	r3, [r7, #23]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d052      	beq.n	800267c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80025d6:	7dfb      	ldrb	r3, [r7, #23]
 80025d8:	e3b0      	b.n	8002d3c <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d032      	beq.n	8002648 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025e2:	4b4d      	ldr	r3, [pc, #308]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a4c      	ldr	r2, [pc, #304]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025ee:	f7fe fbbf 	bl	8000d70 <HAL_GetTick>
 80025f2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025f6:	f7fe fbbb 	bl	8000d70 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e399      	b.n	8002d3c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002608:	4b43      	ldr	r3, [pc, #268]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0f0      	beq.n	80025f6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002614:	4b40      	ldr	r3, [pc, #256]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a3f      	ldr	r2, [pc, #252]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 800261a:	f043 0308 	orr.w	r3, r3, #8
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	4b3d      	ldr	r3, [pc, #244]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	493a      	ldr	r1, [pc, #232]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002632:	4b39      	ldr	r3, [pc, #228]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	021b      	lsls	r3, r3, #8
 8002640:	4935      	ldr	r1, [pc, #212]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 8002642:	4313      	orrs	r3, r2
 8002644:	604b      	str	r3, [r1, #4]
 8002646:	e01a      	b.n	800267e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002648:	4b33      	ldr	r3, [pc, #204]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a32      	ldr	r2, [pc, #200]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 800264e:	f023 0301 	bic.w	r3, r3, #1
 8002652:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002654:	f7fe fb8c 	bl	8000d70 <HAL_GetTick>
 8002658:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800265c:	f7fe fb88 	bl	8000d70 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e366      	b.n	8002d3c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800266e:	4b2a      	ldr	r3, [pc, #168]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0x1e0>
 800267a:	e000      	b.n	800267e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800267c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d073      	beq.n	8002772 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	2b08      	cmp	r3, #8
 800268e:	d005      	beq.n	800269c <HAL_RCC_OscConfig+0x220>
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	2b0c      	cmp	r3, #12
 8002694:	d10e      	bne.n	80026b4 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	2b03      	cmp	r3, #3
 800269a:	d10b      	bne.n	80026b4 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800269c:	4b1e      	ldr	r3, [pc, #120]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d063      	beq.n	8002770 <HAL_RCC_OscConfig+0x2f4>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d15f      	bne.n	8002770 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e343      	b.n	8002d3c <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026bc:	d106      	bne.n	80026cc <HAL_RCC_OscConfig+0x250>
 80026be:	4b16      	ldr	r3, [pc, #88]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a15      	ldr	r2, [pc, #84]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 80026c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	e01d      	b.n	8002708 <HAL_RCC_OscConfig+0x28c>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x274>
 80026d6:	4b10      	ldr	r3, [pc, #64]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a0f      	ldr	r2, [pc, #60]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 80026dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	4b0d      	ldr	r3, [pc, #52]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a0c      	ldr	r2, [pc, #48]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 80026e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	e00b      	b.n	8002708 <HAL_RCC_OscConfig+0x28c>
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a08      	ldr	r2, [pc, #32]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 80026f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a05      	ldr	r2, [pc, #20]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 8002702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d01b      	beq.n	8002748 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7fe fb2e 	bl	8000d70 <HAL_GetTick>
 8002714:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002716:	e010      	b.n	800273a <HAL_RCC_OscConfig+0x2be>
 8002718:	40021000 	.word	0x40021000
 800271c:	080076f8 	.word	0x080076f8
 8002720:	20000000 	.word	0x20000000
 8002724:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002728:	f7fe fb22 	bl	8000d70 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b64      	cmp	r3, #100	; 0x64
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e300      	b.n	8002d3c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800273a:	4ba0      	ldr	r3, [pc, #640]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0x2ac>
 8002746:	e014      	b.n	8002772 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7fe fb12 	bl	8000d70 <HAL_GetTick>
 800274c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002750:	f7fe fb0e 	bl	8000d70 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b64      	cmp	r3, #100	; 0x64
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e2ec      	b.n	8002d3c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002762:	4b96      	ldr	r3, [pc, #600]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x2d4>
 800276e:	e000      	b.n	8002772 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d060      	beq.n	8002840 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	2b04      	cmp	r3, #4
 8002782:	d005      	beq.n	8002790 <HAL_RCC_OscConfig+0x314>
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	2b0c      	cmp	r3, #12
 8002788:	d119      	bne.n	80027be <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d116      	bne.n	80027be <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002790:	4b8a      	ldr	r3, [pc, #552]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_OscConfig+0x32c>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e2c9      	b.n	8002d3c <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a8:	4b84      	ldr	r3, [pc, #528]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	061b      	lsls	r3, r3, #24
 80027b6:	4981      	ldr	r1, [pc, #516]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027bc:	e040      	b.n	8002840 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d023      	beq.n	800280e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c6:	4b7d      	ldr	r3, [pc, #500]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a7c      	ldr	r2, [pc, #496]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 80027cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d2:	f7fe facd 	bl	8000d70 <HAL_GetTick>
 80027d6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027da:	f7fe fac9 	bl	8000d70 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e2a7      	b.n	8002d3c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ec:	4b73      	ldr	r3, [pc, #460]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0f0      	beq.n	80027da <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f8:	4b70      	ldr	r3, [pc, #448]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	061b      	lsls	r3, r3, #24
 8002806:	496d      	ldr	r1, [pc, #436]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 8002808:	4313      	orrs	r3, r2
 800280a:	604b      	str	r3, [r1, #4]
 800280c:	e018      	b.n	8002840 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280e:	4b6b      	ldr	r3, [pc, #428]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a6a      	ldr	r2, [pc, #424]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 8002814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281a:	f7fe faa9 	bl	8000d70 <HAL_GetTick>
 800281e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002822:	f7fe faa5 	bl	8000d70 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e283      	b.n	8002d3c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002834:	4b61      	ldr	r3, [pc, #388]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1f0      	bne.n	8002822 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d07f      	beq.n	800294c <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d05f      	beq.n	8002914 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002854:	4b59      	ldr	r3, [pc, #356]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 8002856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800285a:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699a      	ldr	r2, [r3, #24]
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	429a      	cmp	r2, r3
 8002868:	d037      	beq.n	80028da <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d006      	beq.n	8002882 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e25c      	b.n	8002d3c <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d01b      	beq.n	80028c4 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 800288c:	4b4b      	ldr	r3, [pc, #300]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 800288e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002892:	4a4a      	ldr	r2, [pc, #296]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 8002894:	f023 0301 	bic.w	r3, r3, #1
 8002898:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800289c:	f7fe fa68 	bl	8000d70 <HAL_GetTick>
 80028a0:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a4:	f7fe fa64 	bl	8000d70 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b11      	cmp	r3, #17
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e242      	b.n	8002d3c <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028b6:	4b41      	ldr	r3, [pc, #260]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 80028b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1ef      	bne.n	80028a4 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80028c4:	4b3d      	ldr	r3, [pc, #244]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 80028c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ca:	f023 0210 	bic.w	r2, r3, #16
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	493a      	ldr	r1, [pc, #232]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028da:	4b38      	ldr	r3, [pc, #224]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 80028dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e0:	4a36      	ldr	r2, [pc, #216]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ea:	f7fe fa41 	bl	8000d70 <HAL_GetTick>
 80028ee:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f2:	f7fe fa3d 	bl	8000d70 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b11      	cmp	r3, #17
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e21b      	b.n	8002d3c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002904:	4b2d      	ldr	r3, [pc, #180]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 8002906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0ef      	beq.n	80028f2 <HAL_RCC_OscConfig+0x476>
 8002912:	e01b      	b.n	800294c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002914:	4b29      	ldr	r3, [pc, #164]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 8002916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800291a:	4a28      	ldr	r2, [pc, #160]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 800291c:	f023 0301 	bic.w	r3, r3, #1
 8002920:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002924:	f7fe fa24 	bl	8000d70 <HAL_GetTick>
 8002928:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800292c:	f7fe fa20 	bl	8000d70 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b11      	cmp	r3, #17
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e1fe      	b.n	8002d3c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800293e:	4b1f      	ldr	r3, [pc, #124]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 8002940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1ef      	bne.n	800292c <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 80c1 	beq.w	8002adc <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 800295a:	2300      	movs	r3, #0
 800295c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002960:	4b16      	ldr	r3, [pc, #88]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 8002962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10e      	bne.n	800298a <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800296c:	4b13      	ldr	r3, [pc, #76]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 800296e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002970:	4a12      	ldr	r2, [pc, #72]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 8002972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002976:	6593      	str	r3, [r2, #88]	; 0x58
 8002978:	4b10      	ldr	r3, [pc, #64]	; (80029bc <HAL_RCC_OscConfig+0x540>)
 800297a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002984:	2301      	movs	r3, #1
 8002986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800298a:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <HAL_RCC_OscConfig+0x544>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002992:	2b00      	cmp	r3, #0
 8002994:	d11c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002996:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <HAL_RCC_OscConfig+0x544>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a09      	ldr	r2, [pc, #36]	; (80029c0 <HAL_RCC_OscConfig+0x544>)
 800299c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029a2:	f7fe f9e5 	bl	8000d70 <HAL_GetTick>
 80029a6:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a8:	e00c      	b.n	80029c4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029aa:	f7fe f9e1 	bl	8000d70 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d905      	bls.n	80029c4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e1bf      	b.n	8002d3c <HAL_RCC_OscConfig+0x8c0>
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029c4:	4bb1      	ldr	r3, [pc, #708]	; (8002c8c <HAL_RCC_OscConfig+0x810>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0ec      	beq.n	80029aa <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d02c      	beq.n	8002a36 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80029dc:	4bac      	ldr	r3, [pc, #688]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 80029de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ee:	49a8      	ldr	r1, [pc, #672]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d010      	beq.n	8002a24 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a02:	4ba3      	ldr	r3, [pc, #652]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a08:	4aa1      	ldr	r2, [pc, #644]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002a0a:	f043 0304 	orr.w	r3, r3, #4
 8002a0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a12:	4b9f      	ldr	r3, [pc, #636]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a18:	4a9d      	ldr	r2, [pc, #628]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002a1a:	f043 0301 	orr.w	r3, r3, #1
 8002a1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a22:	e018      	b.n	8002a56 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a24:	4b9a      	ldr	r3, [pc, #616]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2a:	4a99      	ldr	r2, [pc, #612]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a34:	e00f      	b.n	8002a56 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a36:	4b96      	ldr	r3, [pc, #600]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3c:	4a94      	ldr	r2, [pc, #592]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002a3e:	f023 0301 	bic.w	r3, r3, #1
 8002a42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a46:	4b92      	ldr	r3, [pc, #584]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4c:	4a90      	ldr	r2, [pc, #576]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002a4e:	f023 0304 	bic.w	r3, r3, #4
 8002a52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d016      	beq.n	8002a8c <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5e:	f7fe f987 	bl	8000d70 <HAL_GetTick>
 8002a62:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a64:	e00a      	b.n	8002a7c <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a66:	f7fe f983 	bl	8000d70 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e15f      	b.n	8002d3c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a7c:	4b84      	ldr	r3, [pc, #528]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0ed      	beq.n	8002a66 <HAL_RCC_OscConfig+0x5ea>
 8002a8a:	e01d      	b.n	8002ac8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8c:	f7fe f970 	bl	8000d70 <HAL_GetTick>
 8002a90:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a92:	e00a      	b.n	8002aaa <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a94:	f7fe f96c 	bl	8000d70 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e148      	b.n	8002d3c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002aaa:	4b79      	ldr	r3, [pc, #484]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1ed      	bne.n	8002a94 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002ab8:	4b75      	ldr	r3, [pc, #468]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abe:	4a74      	ldr	r2, [pc, #464]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002ac0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d105      	bne.n	8002adc <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad0:	4b6f      	ldr	r3, [pc, #444]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad4:	4a6e      	ldr	r2, [pc, #440]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002ad6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ada:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d03c      	beq.n	8002b62 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d01c      	beq.n	8002b2a <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002af0:	4b67      	ldr	r3, [pc, #412]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002af2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002af6:	4a66      	ldr	r2, [pc, #408]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b00:	f7fe f936 	bl	8000d70 <HAL_GetTick>
 8002b04:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b08:	f7fe f932 	bl	8000d70 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e110      	b.n	8002d3c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b1a:	4b5d      	ldr	r3, [pc, #372]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002b1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0ef      	beq.n	8002b08 <HAL_RCC_OscConfig+0x68c>
 8002b28:	e01b      	b.n	8002b62 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b2a:	4b59      	ldr	r3, [pc, #356]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002b2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b30:	4a57      	ldr	r2, [pc, #348]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002b32:	f023 0301 	bic.w	r3, r3, #1
 8002b36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3a:	f7fe f919 	bl	8000d70 <HAL_GetTick>
 8002b3e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b42:	f7fe f915 	bl	8000d70 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e0f3      	b.n	8002d3c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b54:	4b4e      	ldr	r3, [pc, #312]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002b56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1ef      	bne.n	8002b42 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 80e7 	beq.w	8002d3a <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	f040 80b7 	bne.w	8002ce4 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b76:	4b46      	ldr	r3, [pc, #280]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f003 0203 	and.w	r2, r3, #3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d124      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b94:	3b01      	subs	r3, #1
 8002b96:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d11b      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d113      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb6:	085b      	lsrs	r3, r3, #1
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d109      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	085b      	lsrs	r3, r3, #1
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d061      	beq.n	8002c98 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	2b0c      	cmp	r3, #12
 8002bd8:	d056      	beq.n	8002c88 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bda:	4b2d      	ldr	r3, [pc, #180]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a2c      	ldr	r2, [pc, #176]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002be0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002be4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002be6:	f7fe f8c3 	bl	8000d70 <HAL_GetTick>
 8002bea:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bee:	f7fe f8bf 	bl	8000d70 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e09d      	b.n	8002d3c <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c00:	4b23      	ldr	r3, [pc, #140]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1f0      	bne.n	8002bee <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c0c:	4b20      	ldr	r3, [pc, #128]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	4b20      	ldr	r3, [pc, #128]	; (8002c94 <HAL_RCC_OscConfig+0x818>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c1c:	3a01      	subs	r2, #1
 8002c1e:	0112      	lsls	r2, r2, #4
 8002c20:	4311      	orrs	r1, r2
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c26:	0212      	lsls	r2, r2, #8
 8002c28:	4311      	orrs	r1, r2
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c2e:	0852      	lsrs	r2, r2, #1
 8002c30:	3a01      	subs	r2, #1
 8002c32:	0552      	lsls	r2, r2, #21
 8002c34:	4311      	orrs	r1, r2
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c3a:	0852      	lsrs	r2, r2, #1
 8002c3c:	3a01      	subs	r2, #1
 8002c3e:	0652      	lsls	r2, r2, #25
 8002c40:	430a      	orrs	r2, r1
 8002c42:	4913      	ldr	r1, [pc, #76]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c48:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a10      	ldr	r2, [pc, #64]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c54:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	4a0d      	ldr	r2, [pc, #52]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002c5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c60:	f7fe f886 	bl	8000d70 <HAL_GetTick>
 8002c64:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c68:	f7fe f882 	bl	8000d70 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e060      	b.n	8002d3c <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c7a:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <HAL_RCC_OscConfig+0x814>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c86:	e058      	b.n	8002d3a <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e057      	b.n	8002d3c <HAL_RCC_OscConfig+0x8c0>
 8002c8c:	40007000 	.word	0x40007000
 8002c90:	40021000 	.word	0x40021000
 8002c94:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c98:	4b2a      	ldr	r3, [pc, #168]	; (8002d44 <HAL_RCC_OscConfig+0x8c8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d14a      	bne.n	8002d3a <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ca4:	4b27      	ldr	r3, [pc, #156]	; (8002d44 <HAL_RCC_OscConfig+0x8c8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a26      	ldr	r2, [pc, #152]	; (8002d44 <HAL_RCC_OscConfig+0x8c8>)
 8002caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cb0:	4b24      	ldr	r3, [pc, #144]	; (8002d44 <HAL_RCC_OscConfig+0x8c8>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	4a23      	ldr	r2, [pc, #140]	; (8002d44 <HAL_RCC_OscConfig+0x8c8>)
 8002cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cbc:	f7fe f858 	bl	8000d70 <HAL_GetTick>
 8002cc0:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc4:	f7fe f854 	bl	8000d70 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e032      	b.n	8002d3c <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd6:	4b1b      	ldr	r3, [pc, #108]	; (8002d44 <HAL_RCC_OscConfig+0x8c8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x848>
 8002ce2:	e02a      	b.n	8002d3a <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	2b0c      	cmp	r3, #12
 8002ce8:	d025      	beq.n	8002d36 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cea:	4b16      	ldr	r3, [pc, #88]	; (8002d44 <HAL_RCC_OscConfig+0x8c8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a15      	ldr	r2, [pc, #84]	; (8002d44 <HAL_RCC_OscConfig+0x8c8>)
 8002cf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cf4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002cf6:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <HAL_RCC_OscConfig+0x8c8>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	4a12      	ldr	r2, [pc, #72]	; (8002d44 <HAL_RCC_OscConfig+0x8c8>)
 8002cfc:	f023 0303 	bic.w	r3, r3, #3
 8002d00:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002d02:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <HAL_RCC_OscConfig+0x8c8>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	4a0f      	ldr	r2, [pc, #60]	; (8002d44 <HAL_RCC_OscConfig+0x8c8>)
 8002d08:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d0c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0e:	f7fe f82f 	bl	8000d70 <HAL_GetTick>
 8002d12:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d16:	f7fe f82b 	bl	8000d70 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e009      	b.n	8002d3c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_RCC_OscConfig+0x8c8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1f0      	bne.n	8002d16 <HAL_RCC_OscConfig+0x89a>
 8002d34:	e001      	b.n	8002d3a <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3728      	adds	r7, #40	; 0x28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40021000 	.word	0x40021000

08002d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e0c8      	b.n	8002eee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d5c:	4b66      	ldr	r3, [pc, #408]	; (8002ef8 <HAL_RCC_ClockConfig+0x1b0>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d910      	bls.n	8002d8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6a:	4b63      	ldr	r3, [pc, #396]	; (8002ef8 <HAL_RCC_ClockConfig+0x1b0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 0207 	bic.w	r2, r3, #7
 8002d72:	4961      	ldr	r1, [pc, #388]	; (8002ef8 <HAL_RCC_ClockConfig+0x1b0>)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7a:	4b5f      	ldr	r3, [pc, #380]	; (8002ef8 <HAL_RCC_ClockConfig+0x1b0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e0b0      	b.n	8002eee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d04c      	beq.n	8002e32 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d107      	bne.n	8002db0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002da0:	4b56      	ldr	r3, [pc, #344]	; (8002efc <HAL_RCC_ClockConfig+0x1b4>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d121      	bne.n	8002df0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e09e      	b.n	8002eee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d107      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002db8:	4b50      	ldr	r3, [pc, #320]	; (8002efc <HAL_RCC_ClockConfig+0x1b4>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d115      	bne.n	8002df0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e092      	b.n	8002eee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d107      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dd0:	4b4a      	ldr	r3, [pc, #296]	; (8002efc <HAL_RCC_ClockConfig+0x1b4>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d109      	bne.n	8002df0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e086      	b.n	8002eee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002de0:	4b46      	ldr	r3, [pc, #280]	; (8002efc <HAL_RCC_ClockConfig+0x1b4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e07e      	b.n	8002eee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002df0:	4b42      	ldr	r3, [pc, #264]	; (8002efc <HAL_RCC_ClockConfig+0x1b4>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f023 0203 	bic.w	r2, r3, #3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	493f      	ldr	r1, [pc, #252]	; (8002efc <HAL_RCC_ClockConfig+0x1b4>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e02:	f7fd ffb5 	bl	8000d70 <HAL_GetTick>
 8002e06:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e08:	e00a      	b.n	8002e20 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e0a:	f7fd ffb1 	bl	8000d70 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e066      	b.n	8002eee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e20:	4b36      	ldr	r3, [pc, #216]	; (8002efc <HAL_RCC_ClockConfig+0x1b4>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 020c 	and.w	r2, r3, #12
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d1eb      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d008      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e3e:	4b2f      	ldr	r3, [pc, #188]	; (8002efc <HAL_RCC_ClockConfig+0x1b4>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	492c      	ldr	r1, [pc, #176]	; (8002efc <HAL_RCC_ClockConfig+0x1b4>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e50:	4b29      	ldr	r3, [pc, #164]	; (8002ef8 <HAL_RCC_ClockConfig+0x1b0>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d210      	bcs.n	8002e80 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5e:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <HAL_RCC_ClockConfig+0x1b0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 0207 	bic.w	r2, r3, #7
 8002e66:	4924      	ldr	r1, [pc, #144]	; (8002ef8 <HAL_RCC_ClockConfig+0x1b0>)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6e:	4b22      	ldr	r3, [pc, #136]	; (8002ef8 <HAL_RCC_ClockConfig+0x1b0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e036      	b.n	8002eee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e8c:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <HAL_RCC_ClockConfig+0x1b4>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	4918      	ldr	r1, [pc, #96]	; (8002efc <HAL_RCC_ClockConfig+0x1b4>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d009      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eaa:	4b14      	ldr	r3, [pc, #80]	; (8002efc <HAL_RCC_ClockConfig+0x1b4>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	4910      	ldr	r1, [pc, #64]	; (8002efc <HAL_RCC_ClockConfig+0x1b4>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ebe:	f000 f825 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 8002ec2:	4601      	mov	r1, r0
 8002ec4:	4b0d      	ldr	r3, [pc, #52]	; (8002efc <HAL_RCC_ClockConfig+0x1b4>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	4a0c      	ldr	r2, [pc, #48]	; (8002f00 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed0:	5cd3      	ldrb	r3, [r2, r3]
 8002ed2:	f003 031f 	and.w	r3, r3, #31
 8002ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8002eda:	4a0a      	ldr	r2, [pc, #40]	; (8002f04 <HAL_RCC_ClockConfig+0x1bc>)
 8002edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ede:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fd fef8 	bl	8000cd8 <HAL_InitTick>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	72fb      	strb	r3, [r7, #11]

  return status;
 8002eec:	7afb      	ldrb	r3, [r7, #11]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40022000 	.word	0x40022000
 8002efc:	40021000 	.word	0x40021000
 8002f00:	080076f8 	.word	0x080076f8
 8002f04:	20000000 	.word	0x20000000
 8002f08:	20000004 	.word	0x20000004

08002f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b089      	sub	sp, #36	; 0x24
 8002f10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
 8002f16:	2300      	movs	r3, #0
 8002f18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f1a:	4b3d      	ldr	r3, [pc, #244]	; (8003010 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f24:	4b3a      	ldr	r3, [pc, #232]	; (8003010 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_RCC_GetSysClockFreq+0x34>
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	2b0c      	cmp	r3, #12
 8002f38:	d121      	bne.n	8002f7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d11e      	bne.n	8002f7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f40:	4b33      	ldr	r3, [pc, #204]	; (8003010 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d107      	bne.n	8002f5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f4c:	4b30      	ldr	r3, [pc, #192]	; (8003010 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f52:	0a1b      	lsrs	r3, r3, #8
 8002f54:	f003 030f 	and.w	r3, r3, #15
 8002f58:	61fb      	str	r3, [r7, #28]
 8002f5a:	e005      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f5c:	4b2c      	ldr	r3, [pc, #176]	; (8003010 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f68:	4a2a      	ldr	r2, [pc, #168]	; (8003014 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10d      	bne.n	8002f94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f7c:	e00a      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d102      	bne.n	8002f8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f84:	4b24      	ldr	r3, [pc, #144]	; (8003018 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f86:	61bb      	str	r3, [r7, #24]
 8002f88:	e004      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d101      	bne.n	8002f94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f90:	4b22      	ldr	r3, [pc, #136]	; (800301c <HAL_RCC_GetSysClockFreq+0x110>)
 8002f92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	2b0c      	cmp	r3, #12
 8002f98:	d133      	bne.n	8003002 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f9a:	4b1d      	ldr	r3, [pc, #116]	; (8003010 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d002      	beq.n	8002fb0 <HAL_RCC_GetSysClockFreq+0xa4>
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d003      	beq.n	8002fb6 <HAL_RCC_GetSysClockFreq+0xaa>
 8002fae:	e005      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fb0:	4b19      	ldr	r3, [pc, #100]	; (8003018 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fb2:	617b      	str	r3, [r7, #20]
      break;
 8002fb4:	e005      	b.n	8002fc2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fb6:	4b19      	ldr	r3, [pc, #100]	; (800301c <HAL_RCC_GetSysClockFreq+0x110>)
 8002fb8:	617b      	str	r3, [r7, #20]
      break;
 8002fba:	e002      	b.n	8002fc2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	617b      	str	r3, [r7, #20]
      break;
 8002fc0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fc2:	4b13      	ldr	r3, [pc, #76]	; (8003010 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	091b      	lsrs	r3, r3, #4
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	3301      	adds	r3, #1
 8002fce:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fd0:	4b0f      	ldr	r3, [pc, #60]	; (8003010 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	0a1b      	lsrs	r3, r3, #8
 8002fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	fb02 f203 	mul.w	r2, r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fe8:	4b09      	ldr	r3, [pc, #36]	; (8003010 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	0e5b      	lsrs	r3, r3, #25
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003000:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003002:	69bb      	ldr	r3, [r7, #24]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3724      	adds	r7, #36	; 0x24
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	40021000 	.word	0x40021000
 8003014:	08007710 	.word	0x08007710
 8003018:	00f42400 	.word	0x00f42400
 800301c:	007a1200 	.word	0x007a1200

08003020 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003024:	4b03      	ldr	r3, [pc, #12]	; (8003034 <HAL_RCC_GetHCLKFreq+0x14>)
 8003026:	681b      	ldr	r3, [r3, #0]
}
 8003028:	4618      	mov	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	20000000 	.word	0x20000000

08003038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800303c:	f7ff fff0 	bl	8003020 <HAL_RCC_GetHCLKFreq>
 8003040:	4601      	mov	r1, r0
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	0a1b      	lsrs	r3, r3, #8
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	4a04      	ldr	r2, [pc, #16]	; (8003060 <HAL_RCC_GetPCLK1Freq+0x28>)
 800304e:	5cd3      	ldrb	r3, [r2, r3]
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003058:	4618      	mov	r0, r3
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40021000 	.word	0x40021000
 8003060:	08007708 	.word	0x08007708

08003064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003068:	f7ff ffda 	bl	8003020 <HAL_RCC_GetHCLKFreq>
 800306c:	4601      	mov	r1, r0
 800306e:	4b06      	ldr	r3, [pc, #24]	; (8003088 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	0adb      	lsrs	r3, r3, #11
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	4a04      	ldr	r2, [pc, #16]	; (800308c <HAL_RCC_GetPCLK2Freq+0x28>)
 800307a:	5cd3      	ldrb	r3, [r2, r3]
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003084:	4618      	mov	r0, r3
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40021000 	.word	0x40021000
 800308c:	08007708 	.word	0x08007708

08003090 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003098:	2300      	movs	r3, #0
 800309a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800309c:	4b2a      	ldr	r3, [pc, #168]	; (8003148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800309e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030a8:	f7ff f974 	bl	8002394 <HAL_PWREx_GetVoltageRange>
 80030ac:	6178      	str	r0, [r7, #20]
 80030ae:	e014      	b.n	80030da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030b0:	4b25      	ldr	r3, [pc, #148]	; (8003148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b4:	4a24      	ldr	r2, [pc, #144]	; (8003148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ba:	6593      	str	r3, [r2, #88]	; 0x58
 80030bc:	4b22      	ldr	r3, [pc, #136]	; (8003148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030c8:	f7ff f964 	bl	8002394 <HAL_PWREx_GetVoltageRange>
 80030cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030ce:	4b1e      	ldr	r3, [pc, #120]	; (8003148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d2:	4a1d      	ldr	r2, [pc, #116]	; (8003148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e0:	d10b      	bne.n	80030fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b80      	cmp	r3, #128	; 0x80
 80030e6:	d919      	bls.n	800311c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2ba0      	cmp	r3, #160	; 0xa0
 80030ec:	d902      	bls.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030ee:	2302      	movs	r3, #2
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	e013      	b.n	800311c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030f4:	2301      	movs	r3, #1
 80030f6:	613b      	str	r3, [r7, #16]
 80030f8:	e010      	b.n	800311c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b80      	cmp	r3, #128	; 0x80
 80030fe:	d902      	bls.n	8003106 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003100:	2303      	movs	r3, #3
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	e00a      	b.n	800311c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b80      	cmp	r3, #128	; 0x80
 800310a:	d102      	bne.n	8003112 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800310c:	2302      	movs	r3, #2
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	e004      	b.n	800311c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b70      	cmp	r3, #112	; 0x70
 8003116:	d101      	bne.n	800311c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003118:	2301      	movs	r3, #1
 800311a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800311c:	4b0b      	ldr	r3, [pc, #44]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f023 0207 	bic.w	r2, r3, #7
 8003124:	4909      	ldr	r1, [pc, #36]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800312c:	4b07      	ldr	r3, [pc, #28]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	429a      	cmp	r2, r3
 8003138:	d001      	beq.n	800313e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40021000 	.word	0x40021000
 800314c:	40022000 	.word	0x40022000

08003150 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003158:	2300      	movs	r3, #0
 800315a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800315c:	2300      	movs	r3, #0
 800315e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 809e 	beq.w	80032aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800316e:	2300      	movs	r3, #0
 8003170:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003172:	4b46      	ldr	r3, [pc, #280]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003182:	2300      	movs	r3, #0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00d      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003188:	4b40      	ldr	r3, [pc, #256]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800318a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318c:	4a3f      	ldr	r2, [pc, #252]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800318e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003192:	6593      	str	r3, [r2, #88]	; 0x58
 8003194:	4b3d      	ldr	r3, [pc, #244]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a0:	2301      	movs	r3, #1
 80031a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031a4:	4b3a      	ldr	r3, [pc, #232]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a39      	ldr	r2, [pc, #228]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80031aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031b0:	f7fd fdde 	bl	8000d70 <HAL_GetTick>
 80031b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031b6:	e009      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b8:	f7fd fdda 	bl	8000d70 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d902      	bls.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	74fb      	strb	r3, [r7, #19]
        break;
 80031ca:	e005      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031cc:	4b30      	ldr	r3, [pc, #192]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0ef      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80031d8:	7cfb      	ldrb	r3, [r7, #19]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d15a      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031de:	4b2b      	ldr	r3, [pc, #172]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80031e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d01e      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xde>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d019      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031fa:	4b24      	ldr	r3, [pc, #144]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80031fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003204:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003206:	4b21      	ldr	r3, [pc, #132]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320c:	4a1f      	ldr	r2, [pc, #124]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800320e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003216:	4b1d      	ldr	r3, [pc, #116]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321c:	4a1b      	ldr	r2, [pc, #108]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800321e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003222:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003226:	4a19      	ldr	r2, [pc, #100]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d016      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7fd fd9a 	bl	8000d70 <HAL_GetTick>
 800323c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800323e:	e00b      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003240:	f7fd fd96 	bl	8000d70 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	f241 3288 	movw	r2, #5000	; 0x1388
 800324e:	4293      	cmp	r3, r2
 8003250:	d902      	bls.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	74fb      	strb	r3, [r7, #19]
            break;
 8003256:	e006      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003258:	4b0c      	ldr	r3, [pc, #48]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800325a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0ec      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8003266:	7cfb      	ldrb	r3, [r7, #19]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10b      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800326c:	4b07      	ldr	r3, [pc, #28]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003272:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	4904      	ldr	r1, [pc, #16]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003282:	e009      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003284:	7cfb      	ldrb	r3, [r7, #19]
 8003286:	74bb      	strb	r3, [r7, #18]
 8003288:	e006      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800328a:	bf00      	nop
 800328c:	40021000 	.word	0x40021000
 8003290:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003294:	7cfb      	ldrb	r3, [r7, #19]
 8003296:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003298:	7c7b      	ldrb	r3, [r7, #17]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d105      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800329e:	4b6e      	ldr	r3, [pc, #440]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80032a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a2:	4a6d      	ldr	r2, [pc, #436]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80032a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032b6:	4b68      	ldr	r3, [pc, #416]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032bc:	f023 0203 	bic.w	r2, r3, #3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	4964      	ldr	r1, [pc, #400]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032d8:	4b5f      	ldr	r3, [pc, #380]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032de:	f023 020c 	bic.w	r2, r3, #12
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	495c      	ldr	r1, [pc, #368]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032fa:	4b57      	ldr	r3, [pc, #348]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80032fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003300:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	4953      	ldr	r1, [pc, #332]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0320 	and.w	r3, r3, #32
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800331c:	4b4e      	ldr	r3, [pc, #312]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003322:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	494b      	ldr	r1, [pc, #300]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800333e:	4b46      	ldr	r3, [pc, #280]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003344:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	4942      	ldr	r1, [pc, #264]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003360:	4b3d      	ldr	r3, [pc, #244]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003366:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	493a      	ldr	r1, [pc, #232]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003382:	4b35      	ldr	r3, [pc, #212]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003388:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	4931      	ldr	r1, [pc, #196]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033a4:	4b2c      	ldr	r3, [pc, #176]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	4929      	ldr	r1, [pc, #164]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033c6:	4b24      	ldr	r3, [pc, #144]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	4920      	ldr	r1, [pc, #128]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d015      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033e8:	4b1b      	ldr	r3, [pc, #108]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f6:	4918      	ldr	r1, [pc, #96]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003402:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003406:	d105      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003408:	4b13      	ldr	r3, [pc, #76]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	4a12      	ldr	r2, [pc, #72]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800340e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003412:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d015      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003420:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003426:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	490a      	ldr	r1, [pc, #40]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800343e:	d105      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003440:	4b05      	ldr	r3, [pc, #20]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	4a04      	ldr	r2, [pc, #16]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003446:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800344a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800344c:	7cbb      	ldrb	r3, [r7, #18]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40021000 	.word	0x40021000

0800345c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e07c      	b.n	8003568 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d106      	bne.n	800348e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7fd fa9d 	bl	80009c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2202      	movs	r2, #2
 8003492:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034a4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034ae:	d902      	bls.n	80034b6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	e002      	b.n	80034bc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034ba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80034c4:	d007      	beq.n	80034d6 <HAL_SPI_Init+0x7a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034ce:	d002      	beq.n	80034d6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10b      	bne.n	80034f6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034e6:	d903      	bls.n	80034f0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	631a      	str	r2, [r3, #48]	; 0x30
 80034ee:	e002      	b.n	80034f6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	431a      	orrs	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	ea42 0103 	orr.w	r1, r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	0c1b      	lsrs	r3, r3, #16
 8003536:	f003 0204 	and.w	r2, r3, #4
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003544:	431a      	orrs	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	ea42 0103 	orr.w	r1, r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	430a      	orrs	r2, r1
 8003556:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e040      	b.n	8003604 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003586:	2b00      	cmp	r3, #0
 8003588:	d106      	bne.n	8003598 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fd fb1c 	bl	8000bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2224      	movs	r2, #36	; 0x24
 800359c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0201 	bic.w	r2, r2, #1
 80035ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f8d8 	bl	8003764 <UART_SetConfig>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e022      	b.n	8003604 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fbe0 	bl	8003d8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689a      	ldr	r2, [r3, #8]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 fc67 	bl	8003ed0 <UART_CheckIdleState>
 8003602:	4603      	mov	r3, r0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	4613      	mov	r3, r2
 8003618:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800361e:	2b20      	cmp	r3, #32
 8003620:	f040 808a 	bne.w	8003738 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_UART_Receive_IT+0x24>
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e082      	b.n	800373a <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <HAL_UART_Receive_IT+0x36>
 800363e:	2302      	movs	r3, #2
 8003640:	e07b      	b.n	800373a <HAL_UART_Receive_IT+0x12e>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	88fa      	ldrh	r2, [r7, #6]
 8003654:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	88fa      	ldrh	r2, [r7, #6]
 800365c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800366e:	d10e      	bne.n	800368e <HAL_UART_Receive_IT+0x82>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d105      	bne.n	8003684 <HAL_UART_Receive_IT+0x78>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800367e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003682:	e02d      	b.n	80036e0 <HAL_UART_Receive_IT+0xd4>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	22ff      	movs	r2, #255	; 0xff
 8003688:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800368c:	e028      	b.n	80036e0 <HAL_UART_Receive_IT+0xd4>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10d      	bne.n	80036b2 <HAL_UART_Receive_IT+0xa6>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d104      	bne.n	80036a8 <HAL_UART_Receive_IT+0x9c>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	22ff      	movs	r2, #255	; 0xff
 80036a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036a6:	e01b      	b.n	80036e0 <HAL_UART_Receive_IT+0xd4>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	227f      	movs	r2, #127	; 0x7f
 80036ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036b0:	e016      	b.n	80036e0 <HAL_UART_Receive_IT+0xd4>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036ba:	d10d      	bne.n	80036d8 <HAL_UART_Receive_IT+0xcc>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d104      	bne.n	80036ce <HAL_UART_Receive_IT+0xc2>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	227f      	movs	r2, #127	; 0x7f
 80036c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036cc:	e008      	b.n	80036e0 <HAL_UART_Receive_IT+0xd4>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	223f      	movs	r2, #63	; 0x3f
 80036d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036d6:	e003      	b.n	80036e0 <HAL_UART_Receive_IT+0xd4>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2222      	movs	r2, #34	; 0x22
 80036ea:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003704:	d107      	bne.n	8003716 <HAL_UART_Receive_IT+0x10a>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d103      	bne.n	8003716 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4a0d      	ldr	r2, [pc, #52]	; (8003748 <HAL_UART_Receive_IT+0x13c>)
 8003712:	661a      	str	r2, [r3, #96]	; 0x60
 8003714:	e002      	b.n	800371c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4a0c      	ldr	r2, [pc, #48]	; (800374c <HAL_UART_Receive_IT+0x140>)
 800371a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003732:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003734:	2300      	movs	r3, #0
 8003736:	e000      	b.n	800373a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8003738:	2302      	movs	r3, #2
  }
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	080040fb 	.word	0x080040fb
 800374c:	08004051 	.word	0x08004051

08003750 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003764:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003768:	b08a      	sub	sp, #40	; 0x28
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	4313      	orrs	r3, r2
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	4bbc      	ldr	r3, [pc, #752]	; (8003a8c <UART_SetConfig+0x328>)
 800379a:	4013      	ands	r3, r2
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6812      	ldr	r2, [r2, #0]
 80037a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037a2:	430b      	orrs	r3, r1
 80037a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4ab2      	ldr	r2, [pc, #712]	; (8003a90 <UART_SetConfig+0x32c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d004      	beq.n	80037d6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d2:	4313      	orrs	r3, r2
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e6:	430a      	orrs	r2, r1
 80037e8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4aa9      	ldr	r2, [pc, #676]	; (8003a94 <UART_SetConfig+0x330>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d126      	bne.n	8003842 <UART_SetConfig+0xde>
 80037f4:	4ba8      	ldr	r3, [pc, #672]	; (8003a98 <UART_SetConfig+0x334>)
 80037f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d81a      	bhi.n	8003838 <UART_SetConfig+0xd4>
 8003802:	a201      	add	r2, pc, #4	; (adr r2, 8003808 <UART_SetConfig+0xa4>)
 8003804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003808:	08003819 	.word	0x08003819
 800380c:	08003829 	.word	0x08003829
 8003810:	08003821 	.word	0x08003821
 8003814:	08003831 	.word	0x08003831
 8003818:	2301      	movs	r3, #1
 800381a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800381e:	e0ab      	b.n	8003978 <UART_SetConfig+0x214>
 8003820:	2302      	movs	r3, #2
 8003822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003826:	e0a7      	b.n	8003978 <UART_SetConfig+0x214>
 8003828:	2304      	movs	r3, #4
 800382a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800382e:	e0a3      	b.n	8003978 <UART_SetConfig+0x214>
 8003830:	2308      	movs	r3, #8
 8003832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003836:	e09f      	b.n	8003978 <UART_SetConfig+0x214>
 8003838:	2310      	movs	r3, #16
 800383a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800383e:	bf00      	nop
 8003840:	e09a      	b.n	8003978 <UART_SetConfig+0x214>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a95      	ldr	r2, [pc, #596]	; (8003a9c <UART_SetConfig+0x338>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d138      	bne.n	80038be <UART_SetConfig+0x15a>
 800384c:	4b92      	ldr	r3, [pc, #584]	; (8003a98 <UART_SetConfig+0x334>)
 800384e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003852:	f003 030c 	and.w	r3, r3, #12
 8003856:	2b0c      	cmp	r3, #12
 8003858:	d82c      	bhi.n	80038b4 <UART_SetConfig+0x150>
 800385a:	a201      	add	r2, pc, #4	; (adr r2, 8003860 <UART_SetConfig+0xfc>)
 800385c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003860:	08003895 	.word	0x08003895
 8003864:	080038b5 	.word	0x080038b5
 8003868:	080038b5 	.word	0x080038b5
 800386c:	080038b5 	.word	0x080038b5
 8003870:	080038a5 	.word	0x080038a5
 8003874:	080038b5 	.word	0x080038b5
 8003878:	080038b5 	.word	0x080038b5
 800387c:	080038b5 	.word	0x080038b5
 8003880:	0800389d 	.word	0x0800389d
 8003884:	080038b5 	.word	0x080038b5
 8003888:	080038b5 	.word	0x080038b5
 800388c:	080038b5 	.word	0x080038b5
 8003890:	080038ad 	.word	0x080038ad
 8003894:	2300      	movs	r3, #0
 8003896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800389a:	e06d      	b.n	8003978 <UART_SetConfig+0x214>
 800389c:	2302      	movs	r3, #2
 800389e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038a2:	e069      	b.n	8003978 <UART_SetConfig+0x214>
 80038a4:	2304      	movs	r3, #4
 80038a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038aa:	e065      	b.n	8003978 <UART_SetConfig+0x214>
 80038ac:	2308      	movs	r3, #8
 80038ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038b2:	e061      	b.n	8003978 <UART_SetConfig+0x214>
 80038b4:	2310      	movs	r3, #16
 80038b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ba:	bf00      	nop
 80038bc:	e05c      	b.n	8003978 <UART_SetConfig+0x214>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a77      	ldr	r2, [pc, #476]	; (8003aa0 <UART_SetConfig+0x33c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d125      	bne.n	8003914 <UART_SetConfig+0x1b0>
 80038c8:	4b73      	ldr	r3, [pc, #460]	; (8003a98 <UART_SetConfig+0x334>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80038d2:	2b10      	cmp	r3, #16
 80038d4:	d011      	beq.n	80038fa <UART_SetConfig+0x196>
 80038d6:	2b10      	cmp	r3, #16
 80038d8:	d802      	bhi.n	80038e0 <UART_SetConfig+0x17c>
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d005      	beq.n	80038ea <UART_SetConfig+0x186>
 80038de:	e014      	b.n	800390a <UART_SetConfig+0x1a6>
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	d006      	beq.n	80038f2 <UART_SetConfig+0x18e>
 80038e4:	2b30      	cmp	r3, #48	; 0x30
 80038e6:	d00c      	beq.n	8003902 <UART_SetConfig+0x19e>
 80038e8:	e00f      	b.n	800390a <UART_SetConfig+0x1a6>
 80038ea:	2300      	movs	r3, #0
 80038ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038f0:	e042      	b.n	8003978 <UART_SetConfig+0x214>
 80038f2:	2302      	movs	r3, #2
 80038f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038f8:	e03e      	b.n	8003978 <UART_SetConfig+0x214>
 80038fa:	2304      	movs	r3, #4
 80038fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003900:	e03a      	b.n	8003978 <UART_SetConfig+0x214>
 8003902:	2308      	movs	r3, #8
 8003904:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003908:	e036      	b.n	8003978 <UART_SetConfig+0x214>
 800390a:	2310      	movs	r3, #16
 800390c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003910:	bf00      	nop
 8003912:	e031      	b.n	8003978 <UART_SetConfig+0x214>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a5d      	ldr	r2, [pc, #372]	; (8003a90 <UART_SetConfig+0x32c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d129      	bne.n	8003972 <UART_SetConfig+0x20e>
 800391e:	4b5e      	ldr	r3, [pc, #376]	; (8003a98 <UART_SetConfig+0x334>)
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003924:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800392c:	d014      	beq.n	8003958 <UART_SetConfig+0x1f4>
 800392e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003932:	d802      	bhi.n	800393a <UART_SetConfig+0x1d6>
 8003934:	2b00      	cmp	r3, #0
 8003936:	d007      	beq.n	8003948 <UART_SetConfig+0x1e4>
 8003938:	e016      	b.n	8003968 <UART_SetConfig+0x204>
 800393a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800393e:	d007      	beq.n	8003950 <UART_SetConfig+0x1ec>
 8003940:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003944:	d00c      	beq.n	8003960 <UART_SetConfig+0x1fc>
 8003946:	e00f      	b.n	8003968 <UART_SetConfig+0x204>
 8003948:	2300      	movs	r3, #0
 800394a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800394e:	e013      	b.n	8003978 <UART_SetConfig+0x214>
 8003950:	2302      	movs	r3, #2
 8003952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003956:	e00f      	b.n	8003978 <UART_SetConfig+0x214>
 8003958:	2304      	movs	r3, #4
 800395a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800395e:	e00b      	b.n	8003978 <UART_SetConfig+0x214>
 8003960:	2308      	movs	r3, #8
 8003962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003966:	e007      	b.n	8003978 <UART_SetConfig+0x214>
 8003968:	2310      	movs	r3, #16
 800396a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800396e:	bf00      	nop
 8003970:	e002      	b.n	8003978 <UART_SetConfig+0x214>
 8003972:	2310      	movs	r3, #16
 8003974:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a44      	ldr	r2, [pc, #272]	; (8003a90 <UART_SetConfig+0x32c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	f040 80fb 	bne.w	8003b7a <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003984:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003988:	2b08      	cmp	r3, #8
 800398a:	d824      	bhi.n	80039d6 <UART_SetConfig+0x272>
 800398c:	a201      	add	r2, pc, #4	; (adr r2, 8003994 <UART_SetConfig+0x230>)
 800398e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003992:	bf00      	nop
 8003994:	080039b9 	.word	0x080039b9
 8003998:	080039d7 	.word	0x080039d7
 800399c:	080039c1 	.word	0x080039c1
 80039a0:	080039d7 	.word	0x080039d7
 80039a4:	080039c7 	.word	0x080039c7
 80039a8:	080039d7 	.word	0x080039d7
 80039ac:	080039d7 	.word	0x080039d7
 80039b0:	080039d7 	.word	0x080039d7
 80039b4:	080039cf 	.word	0x080039cf
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80039b8:	f7ff fb3e 	bl	8003038 <HAL_RCC_GetPCLK1Freq>
 80039bc:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80039be:	e00d      	b.n	80039dc <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80039c0:	4b38      	ldr	r3, [pc, #224]	; (8003aa4 <UART_SetConfig+0x340>)
 80039c2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80039c4:	e00a      	b.n	80039dc <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80039c6:	f7ff faa1 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 80039ca:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80039cc:	e006      	b.n	80039dc <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80039ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039d2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80039d4:	e002      	b.n	80039dc <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	76fb      	strb	r3, [r7, #27]
        break;
 80039da:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 81c8 	beq.w	8003d74 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	4613      	mov	r3, r2
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	4413      	add	r3, r2
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d305      	bcc.n	8003a00 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d902      	bls.n	8003a06 <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	76fb      	strb	r3, [r7, #27]
 8003a04:	e1b6      	b.n	8003d74 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 8003a06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	f200 80a2 	bhi.w	8003b54 <UART_SetConfig+0x3f0>
 8003a10:	a201      	add	r2, pc, #4	; (adr r2, 8003a18 <UART_SetConfig+0x2b4>)
 8003a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a16:	bf00      	nop
 8003a18:	08003a3d 	.word	0x08003a3d
 8003a1c:	08003b55 	.word	0x08003b55
 8003a20:	08003aa9 	.word	0x08003aa9
 8003a24:	08003b55 	.word	0x08003b55
 8003a28:	08003add 	.word	0x08003add
 8003a2c:	08003b55 	.word	0x08003b55
 8003a30:	08003b55 	.word	0x08003b55
 8003a34:	08003b55 	.word	0x08003b55
 8003a38:	08003b2b 	.word	0x08003b2b
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8003a3c:	f7ff fafc 	bl	8003038 <HAL_RCC_GetPCLK1Freq>
 8003a40:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	4619      	mov	r1, r3
 8003a46:	f04f 0200 	mov.w	r2, #0
 8003a4a:	f04f 0300 	mov.w	r3, #0
 8003a4e:	f04f 0400 	mov.w	r4, #0
 8003a52:	0214      	lsls	r4, r2, #8
 8003a54:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003a58:	020b      	lsls	r3, r1, #8
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6852      	ldr	r2, [r2, #4]
 8003a5e:	0852      	lsrs	r2, r2, #1
 8003a60:	4611      	mov	r1, r2
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	eb13 0b01 	adds.w	fp, r3, r1
 8003a6a:	eb44 0c02 	adc.w	ip, r4, r2
 8003a6e:	4658      	mov	r0, fp
 8003a70:	4661      	mov	r1, ip
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f04f 0400 	mov.w	r4, #0
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	4623      	mov	r3, r4
 8003a7e:	f7fc fba5 	bl	80001cc <__aeabi_uldivmod>
 8003a82:	4603      	mov	r3, r0
 8003a84:	460c      	mov	r4, r1
 8003a86:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003a88:	e067      	b.n	8003b5a <UART_SetConfig+0x3f6>
 8003a8a:	bf00      	nop
 8003a8c:	efff69f3 	.word	0xefff69f3
 8003a90:	40008000 	.word	0x40008000
 8003a94:	40013800 	.word	0x40013800
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	40004400 	.word	0x40004400
 8003aa0:	40004800 	.word	0x40004800
 8003aa4:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	085b      	lsrs	r3, r3, #1
 8003aae:	f04f 0400 	mov.w	r4, #0
 8003ab2:	49ae      	ldr	r1, [pc, #696]	; (8003d6c <UART_SetConfig+0x608>)
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	eb13 0b01 	adds.w	fp, r3, r1
 8003abc:	eb44 0c02 	adc.w	ip, r4, r2
 8003ac0:	4658      	mov	r0, fp
 8003ac2:	4661      	mov	r1, ip
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f04f 0400 	mov.w	r4, #0
 8003acc:	461a      	mov	r2, r3
 8003ace:	4623      	mov	r3, r4
 8003ad0:	f7fc fb7c 	bl	80001cc <__aeabi_uldivmod>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	460c      	mov	r4, r1
 8003ad8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003ada:	e03e      	b.n	8003b5a <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003adc:	f7ff fa16 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 8003ae0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	f04f 0400 	mov.w	r4, #0
 8003af2:	0214      	lsls	r4, r2, #8
 8003af4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003af8:	020b      	lsls	r3, r1, #8
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6852      	ldr	r2, [r2, #4]
 8003afe:	0852      	lsrs	r2, r2, #1
 8003b00:	4611      	mov	r1, r2
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	eb13 0b01 	adds.w	fp, r3, r1
 8003b0a:	eb44 0c02 	adc.w	ip, r4, r2
 8003b0e:	4658      	mov	r0, fp
 8003b10:	4661      	mov	r1, ip
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f04f 0400 	mov.w	r4, #0
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	4623      	mov	r3, r4
 8003b1e:	f7fc fb55 	bl	80001cc <__aeabi_uldivmod>
 8003b22:	4603      	mov	r3, r0
 8003b24:	460c      	mov	r4, r1
 8003b26:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003b28:	e017      	b.n	8003b5a <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	085b      	lsrs	r3, r3, #1
 8003b30:	f04f 0400 	mov.w	r4, #0
 8003b34:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003b38:	f144 0100 	adc.w	r1, r4, #0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f04f 0400 	mov.w	r4, #0
 8003b44:	461a      	mov	r2, r3
 8003b46:	4623      	mov	r3, r4
 8003b48:	f7fc fb40 	bl	80001cc <__aeabi_uldivmod>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	460c      	mov	r4, r1
 8003b50:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003b52:	e002      	b.n	8003b5a <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	76fb      	strb	r3, [r7, #27]
            break;
 8003b58:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b60:	d308      	bcc.n	8003b74 <UART_SetConfig+0x410>
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b68:	d204      	bcs.n	8003b74 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69fa      	ldr	r2, [r7, #28]
 8003b70:	60da      	str	r2, [r3, #12]
 8003b72:	e0ff      	b.n	8003d74 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	76fb      	strb	r3, [r7, #27]
 8003b78:	e0fc      	b.n	8003d74 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b82:	f040 8083 	bne.w	8003c8c <UART_SetConfig+0x528>
  {
    switch (clocksource)
 8003b86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b8a:	2b08      	cmp	r3, #8
 8003b8c:	d85e      	bhi.n	8003c4c <UART_SetConfig+0x4e8>
 8003b8e:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <UART_SetConfig+0x430>)
 8003b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b94:	08003bb9 	.word	0x08003bb9
 8003b98:	08003bd9 	.word	0x08003bd9
 8003b9c:	08003bf9 	.word	0x08003bf9
 8003ba0:	08003c4d 	.word	0x08003c4d
 8003ba4:	08003c15 	.word	0x08003c15
 8003ba8:	08003c4d 	.word	0x08003c4d
 8003bac:	08003c4d 	.word	0x08003c4d
 8003bb0:	08003c4d 	.word	0x08003c4d
 8003bb4:	08003c35 	.word	0x08003c35
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bb8:	f7ff fa3e 	bl	8003038 <HAL_RCC_GetPCLK1Freq>
 8003bbc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	005a      	lsls	r2, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	085b      	lsrs	r3, r3, #1
 8003bc8:	441a      	add	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003bd6:	e03c      	b.n	8003c52 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bd8:	f7ff fa44 	bl	8003064 <HAL_RCC_GetPCLK2Freq>
 8003bdc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	005a      	lsls	r2, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	085b      	lsrs	r3, r3, #1
 8003be8:	441a      	add	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003bf6:	e02c      	b.n	8003c52 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	085b      	lsrs	r3, r3, #1
 8003bfe:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003c02:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6852      	ldr	r2, [r2, #4]
 8003c0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c12:	e01e      	b.n	8003c52 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c14:	f7ff f97a 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 8003c18:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	005a      	lsls	r2, r3, #1
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	085b      	lsrs	r3, r3, #1
 8003c24:	441a      	add	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c32:	e00e      	b.n	8003c52 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	085b      	lsrs	r3, r3, #1
 8003c3a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c4a:	e002      	b.n	8003c52 <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	76fb      	strb	r3, [r7, #27]
        break;
 8003c50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	2b0f      	cmp	r3, #15
 8003c56:	d916      	bls.n	8003c86 <UART_SetConfig+0x522>
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c5e:	d212      	bcs.n	8003c86 <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	f023 030f 	bic.w	r3, r3, #15
 8003c68:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	085b      	lsrs	r3, r3, #1
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	89fb      	ldrh	r3, [r7, #14]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	89fa      	ldrh	r2, [r7, #14]
 8003c82:	60da      	str	r2, [r3, #12]
 8003c84:	e076      	b.n	8003d74 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	76fb      	strb	r3, [r7, #27]
 8003c8a:	e073      	b.n	8003d74 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 8003c8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d85c      	bhi.n	8003d4e <UART_SetConfig+0x5ea>
 8003c94:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <UART_SetConfig+0x538>)
 8003c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9a:	bf00      	nop
 8003c9c:	08003cc1 	.word	0x08003cc1
 8003ca0:	08003cdf 	.word	0x08003cdf
 8003ca4:	08003cfd 	.word	0x08003cfd
 8003ca8:	08003d4f 	.word	0x08003d4f
 8003cac:	08003d19 	.word	0x08003d19
 8003cb0:	08003d4f 	.word	0x08003d4f
 8003cb4:	08003d4f 	.word	0x08003d4f
 8003cb8:	08003d4f 	.word	0x08003d4f
 8003cbc:	08003d37 	.word	0x08003d37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cc0:	f7ff f9ba 	bl	8003038 <HAL_RCC_GetPCLK1Freq>
 8003cc4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	085a      	lsrs	r2, r3, #1
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	441a      	add	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003cdc:	e03a      	b.n	8003d54 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cde:	f7ff f9c1 	bl	8003064 <HAL_RCC_GetPCLK2Freq>
 8003ce2:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	085a      	lsrs	r2, r3, #1
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	441a      	add	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003cfa:	e02b      	b.n	8003d54 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	085b      	lsrs	r3, r3, #1
 8003d02:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003d06:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6852      	ldr	r2, [r2, #4]
 8003d0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d16:	e01d      	b.n	8003d54 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d18:	f7ff f8f8 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 8003d1c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	085a      	lsrs	r2, r3, #1
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	441a      	add	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d34:	e00e      	b.n	8003d54 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	085b      	lsrs	r3, r3, #1
 8003d3c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d4c:	e002      	b.n	8003d54 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	76fb      	strb	r3, [r7, #27]
        break;
 8003d52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	2b0f      	cmp	r3, #15
 8003d58:	d90a      	bls.n	8003d70 <UART_SetConfig+0x60c>
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d60:	d206      	bcs.n	8003d70 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	60da      	str	r2, [r3, #12]
 8003d6a:	e003      	b.n	8003d74 <UART_SetConfig+0x610>
 8003d6c:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003d80:	7efb      	ldrb	r3, [r7, #27]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3728      	adds	r7, #40	; 0x28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08003d8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00a      	beq.n	8003dfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	f003 0310 	and.w	r3, r3, #16
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	f003 0320 	and.w	r3, r3, #32
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d01a      	beq.n	8003ea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e8a:	d10a      	bne.n	8003ea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	605a      	str	r2, [r3, #4]
  }
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af02      	add	r7, sp, #8
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003ede:	f7fc ff47 	bl	8000d70 <HAL_GetTick>
 8003ee2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	d10e      	bne.n	8003f10 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ef2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f82a 	bl	8003f5a <UART_WaitOnFlagUntilTimeout>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e020      	b.n	8003f52 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0304 	and.w	r3, r3, #4
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d10e      	bne.n	8003f3c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f1e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f814 	bl	8003f5a <UART_WaitOnFlagUntilTimeout>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e00a      	b.n	8003f52 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2220      	movs	r2, #32
 8003f46:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b084      	sub	sp, #16
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	603b      	str	r3, [r7, #0]
 8003f66:	4613      	mov	r3, r2
 8003f68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f6a:	e05d      	b.n	8004028 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f72:	d059      	beq.n	8004028 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f74:	f7fc fefc 	bl	8000d70 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d302      	bcc.n	8003f8a <UART_WaitOnFlagUntilTimeout+0x30>
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d11b      	bne.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f98:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689a      	ldr	r2, [r3, #8]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0201 	bic.w	r2, r2, #1
 8003fa8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2220      	movs	r2, #32
 8003fae:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e042      	b.n	8004048 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d02b      	beq.n	8004028 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fde:	d123      	bne.n	8004028 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fe8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ff8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0201 	bic.w	r2, r2, #1
 8004008:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2220      	movs	r2, #32
 800400e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2220      	movs	r2, #32
 8004014:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2220      	movs	r2, #32
 800401a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e00f      	b.n	8004048 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	69da      	ldr	r2, [r3, #28]
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	4013      	ands	r3, r2
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	429a      	cmp	r2, r3
 8004036:	bf0c      	ite	eq
 8004038:	2301      	moveq	r3, #1
 800403a:	2300      	movne	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	461a      	mov	r2, r3
 8004040:	79fb      	ldrb	r3, [r7, #7]
 8004042:	429a      	cmp	r2, r3
 8004044:	d092      	beq.n	8003f6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800405e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004064:	2b22      	cmp	r3, #34	; 0x22
 8004066:	d13a      	bne.n	80040de <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800406e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004070:	89bb      	ldrh	r3, [r7, #12]
 8004072:	b2d9      	uxtb	r1, r3
 8004074:	89fb      	ldrh	r3, [r7, #14]
 8004076:	b2da      	uxtb	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407c:	400a      	ands	r2, r1
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	1c5a      	adds	r2, r3, #1
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004092:	b29b      	uxth	r3, r3
 8004094:	3b01      	subs	r3, #1
 8004096:	b29a      	uxth	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d123      	bne.n	80040f2 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040b8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0201 	bic.w	r2, r2, #1
 80040c8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff fb3a 	bl	8003750 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040dc:	e009      	b.n	80040f2 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	8b1b      	ldrh	r3, [r3, #24]
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0208 	orr.w	r2, r2, #8
 80040ee:	b292      	uxth	r2, r2
 80040f0:	831a      	strh	r2, [r3, #24]
}
 80040f2:	bf00      	nop
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b084      	sub	sp, #16
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004108:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800410e:	2b22      	cmp	r3, #34	; 0x22
 8004110:	d13a      	bne.n	8004188 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004118:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004120:	89ba      	ldrh	r2, [r7, #12]
 8004122:	89fb      	ldrh	r3, [r7, #14]
 8004124:	4013      	ands	r3, r2
 8004126:	b29a      	uxth	r2, r3
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004130:	1c9a      	adds	r2, r3, #2
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800413c:	b29b      	uxth	r3, r3
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d123      	bne.n	800419c <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004162:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0201 	bic.w	r2, r2, #1
 8004172:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff fae5 	bl	8003750 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004186:	e009      	b.n	800419c <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	8b1b      	ldrh	r3, [r3, #24]
 800418e:	b29a      	uxth	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f042 0208 	orr.w	r2, r2, #8
 8004198:	b292      	uxth	r2, r2
 800419a:	831a      	strh	r2, [r3, #24]
}
 800419c:	bf00      	nop
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80041a4:	b084      	sub	sp, #16
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	f107 0014 	add.w	r0, r7, #20
 80041b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	b004      	add	sp, #16
 80041c4:	4770      	bx	lr

080041c6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b085      	sub	sp, #20
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80041ce:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80041d2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	4313      	orrs	r3, r2
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004200:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004204:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800420c:	b29a      	uxth	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	b29b      	uxth	r3, r3
 8004212:	43db      	mvns	r3, r3
 8004214:	b29b      	uxth	r3, r3
 8004216:	4013      	ands	r3, r2
 8004218:	b29a      	uxth	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3714      	adds	r7, #20
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	460b      	mov	r3, r1
 8004238:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004248:	b084      	sub	sp, #16
 800424a:	b580      	push	{r7, lr}
 800424c:	b082      	sub	sp, #8
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	f107 0014 	add.w	r0, r7, #20
 8004256:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7ff ffa3 	bl	80041c6 <USB_EnableGlobalInt>

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800428c:	b004      	add	sp, #16
 800428e:	4770      	bx	lr

08004290 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004290:	b490      	push	{r4, r7}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80042b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b4:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	78db      	ldrb	r3, [r3, #3]
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	d819      	bhi.n	80042f2 <USB_ActivateEndpoint+0x62>
 80042be:	a201      	add	r2, pc, #4	; (adr r2, 80042c4 <USB_ActivateEndpoint+0x34>)
 80042c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c4:	080042d5 	.word	0x080042d5
 80042c8:	080042e9 	.word	0x080042e9
 80042cc:	080042f9 	.word	0x080042f9
 80042d0:	080042df 	.word	0x080042df
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80042d4:	89bb      	ldrh	r3, [r7, #12]
 80042d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042da:	81bb      	strh	r3, [r7, #12]
      break;
 80042dc:	e00d      	b.n	80042fa <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80042de:	89bb      	ldrh	r3, [r7, #12]
 80042e0:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80042e4:	81bb      	strh	r3, [r7, #12]
      break;
 80042e6:	e008      	b.n	80042fa <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80042e8:	89bb      	ldrh	r3, [r7, #12]
 80042ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042ee:	81bb      	strh	r3, [r7, #12]
      break;
 80042f0:	e003      	b.n	80042fa <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	73fb      	strb	r3, [r7, #15]
      break;
 80042f6:	e000      	b.n	80042fa <USB_ActivateEndpoint+0x6a>
      break;
 80042f8:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	441a      	add	r2, r3
 8004304:	89bb      	ldrh	r3, [r7, #12]
 8004306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800430a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800430e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004316:	b29b      	uxth	r3, r3
 8004318:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	b29b      	uxth	r3, r3
 8004328:	b21b      	sxth	r3, r3
 800432a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800432e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004332:	b21a      	sxth	r2, r3
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	b21b      	sxth	r3, r3
 800433a:	4313      	orrs	r3, r2
 800433c:	b21b      	sxth	r3, r3
 800433e:	b29c      	uxth	r4, r3
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	441a      	add	r2, r3
 800434a:	4b8a      	ldr	r3, [pc, #552]	; (8004574 <USB_ActivateEndpoint+0x2e4>)
 800434c:	4323      	orrs	r3, r4
 800434e:	b29b      	uxth	r3, r3
 8004350:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	7b1b      	ldrb	r3, [r3, #12]
 8004356:	2b00      	cmp	r3, #0
 8004358:	f040 8112 	bne.w	8004580 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	785b      	ldrb	r3, [r3, #1]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d067      	beq.n	8004434 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004364:	687c      	ldr	r4, [r7, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800436c:	b29b      	uxth	r3, r3
 800436e:	441c      	add	r4, r3
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	4423      	add	r3, r4
 8004378:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800437c:	461c      	mov	r4, r3
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	88db      	ldrh	r3, [r3, #6]
 8004382:	085b      	lsrs	r3, r3, #1
 8004384:	b29b      	uxth	r3, r3
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	b29b      	uxth	r3, r3
 800438a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	b29c      	uxth	r4, r3
 800439a:	4623      	mov	r3, r4
 800439c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d014      	beq.n	80043ce <USB_ActivateEndpoint+0x13e>
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ba:	b29c      	uxth	r4, r3
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	441a      	add	r2, r3
 80043c6:	4b6c      	ldr	r3, [pc, #432]	; (8004578 <USB_ActivateEndpoint+0x2e8>)
 80043c8:	4323      	orrs	r3, r4
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	78db      	ldrb	r3, [r3, #3]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d018      	beq.n	8004408 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ec:	b29c      	uxth	r4, r3
 80043ee:	f084 0320 	eor.w	r3, r4, #32
 80043f2:	b29c      	uxth	r4, r3
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	441a      	add	r2, r3
 80043fe:	4b5d      	ldr	r3, [pc, #372]	; (8004574 <USB_ActivateEndpoint+0x2e4>)
 8004400:	4323      	orrs	r3, r4
 8004402:	b29b      	uxth	r3, r3
 8004404:	8013      	strh	r3, [r2, #0]
 8004406:	e22b      	b.n	8004860 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	881b      	ldrh	r3, [r3, #0]
 8004414:	b29b      	uxth	r3, r3
 8004416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800441a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800441e:	b29c      	uxth	r4, r3
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	441a      	add	r2, r3
 800442a:	4b52      	ldr	r3, [pc, #328]	; (8004574 <USB_ActivateEndpoint+0x2e4>)
 800442c:	4323      	orrs	r3, r4
 800442e:	b29b      	uxth	r3, r3
 8004430:	8013      	strh	r3, [r2, #0]
 8004432:	e215      	b.n	8004860 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004434:	687c      	ldr	r4, [r7, #4]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800443c:	b29b      	uxth	r3, r3
 800443e:	441c      	add	r4, r3
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	4423      	add	r3, r4
 8004448:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800444c:	461c      	mov	r4, r3
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	88db      	ldrh	r3, [r3, #6]
 8004452:	085b      	lsrs	r3, r3, #1
 8004454:	b29b      	uxth	r3, r3
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	b29b      	uxth	r3, r3
 800445a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800445c:	687c      	ldr	r4, [r7, #4]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004464:	b29b      	uxth	r3, r3
 8004466:	441c      	add	r4, r3
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	4423      	add	r3, r4
 8004470:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004474:	461c      	mov	r4, r3
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10e      	bne.n	800449c <USB_ActivateEndpoint+0x20c>
 800447e:	8823      	ldrh	r3, [r4, #0]
 8004480:	b29b      	uxth	r3, r3
 8004482:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004486:	b29b      	uxth	r3, r3
 8004488:	8023      	strh	r3, [r4, #0]
 800448a:	8823      	ldrh	r3, [r4, #0]
 800448c:	b29b      	uxth	r3, r3
 800448e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004492:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004496:	b29b      	uxth	r3, r3
 8004498:	8023      	strh	r3, [r4, #0]
 800449a:	e02d      	b.n	80044f8 <USB_ActivateEndpoint+0x268>
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	2b3e      	cmp	r3, #62	; 0x3e
 80044a2:	d812      	bhi.n	80044ca <USB_ActivateEndpoint+0x23a>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	085b      	lsrs	r3, r3, #1
 80044aa:	60bb      	str	r3, [r7, #8]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <USB_ActivateEndpoint+0x22e>
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	3301      	adds	r3, #1
 80044bc:	60bb      	str	r3, [r7, #8]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	029b      	lsls	r3, r3, #10
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	8023      	strh	r3, [r4, #0]
 80044c8:	e016      	b.n	80044f8 <USB_ActivateEndpoint+0x268>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f003 031f 	and.w	r3, r3, #31
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d102      	bne.n	80044e4 <USB_ActivateEndpoint+0x254>
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	60bb      	str	r3, [r7, #8]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	029b      	lsls	r3, r3, #10
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	b29c      	uxth	r4, r3
 8004506:	4623      	mov	r3, r4
 8004508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d014      	beq.n	800453a <USB_ActivateEndpoint+0x2aa>
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	b29b      	uxth	r3, r3
 800451e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004526:	b29c      	uxth	r4, r3
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	441a      	add	r2, r3
 8004532:	4b12      	ldr	r3, [pc, #72]	; (800457c <USB_ActivateEndpoint+0x2ec>)
 8004534:	4323      	orrs	r3, r4
 8004536:	b29b      	uxth	r3, r3
 8004538:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	b29b      	uxth	r3, r3
 8004548:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800454c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004550:	b29c      	uxth	r4, r3
 8004552:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004556:	b29c      	uxth	r4, r3
 8004558:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800455c:	b29c      	uxth	r4, r3
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	441a      	add	r2, r3
 8004568:	4b02      	ldr	r3, [pc, #8]	; (8004574 <USB_ActivateEndpoint+0x2e4>)
 800456a:	4323      	orrs	r3, r4
 800456c:	b29b      	uxth	r3, r3
 800456e:	8013      	strh	r3, [r2, #0]
 8004570:	e176      	b.n	8004860 <USB_ActivateEndpoint+0x5d0>
 8004572:	bf00      	nop
 8004574:	ffff8080 	.word	0xffff8080
 8004578:	ffff80c0 	.word	0xffff80c0
 800457c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	b29b      	uxth	r3, r3
 800458e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004596:	b29c      	uxth	r4, r3
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	441a      	add	r2, r3
 80045a2:	4b96      	ldr	r3, [pc, #600]	; (80047fc <USB_ActivateEndpoint+0x56c>)
 80045a4:	4323      	orrs	r3, r4
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80045aa:	687c      	ldr	r4, [r7, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	441c      	add	r4, r3
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	4423      	add	r3, r4
 80045be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045c2:	461c      	mov	r4, r3
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	891b      	ldrh	r3, [r3, #8]
 80045c8:	085b      	lsrs	r3, r3, #1
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	8023      	strh	r3, [r4, #0]
 80045d2:	687c      	ldr	r4, [r7, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045da:	b29b      	uxth	r3, r3
 80045dc:	441c      	add	r4, r3
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	4423      	add	r3, r4
 80045e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045ea:	461c      	mov	r4, r3
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	895b      	ldrh	r3, [r3, #10]
 80045f0:	085b      	lsrs	r3, r3, #1
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	785b      	ldrb	r3, [r3, #1]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f040 8088 	bne.w	8004714 <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4413      	add	r3, r2
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	b29c      	uxth	r4, r3
 8004612:	4623      	mov	r3, r4
 8004614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d014      	beq.n	8004646 <USB_ActivateEndpoint+0x3b6>
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	b29b      	uxth	r3, r3
 800462a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800462e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004632:	b29c      	uxth	r4, r3
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	441a      	add	r2, r3
 800463e:	4b70      	ldr	r3, [pc, #448]	; (8004800 <USB_ActivateEndpoint+0x570>)
 8004640:	4323      	orrs	r3, r4
 8004642:	b29b      	uxth	r3, r3
 8004644:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	b29c      	uxth	r4, r3
 8004654:	4623      	mov	r3, r4
 8004656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465a:	2b00      	cmp	r3, #0
 800465c:	d014      	beq.n	8004688 <USB_ActivateEndpoint+0x3f8>
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	b29b      	uxth	r3, r3
 800466c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004674:	b29c      	uxth	r4, r3
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	441a      	add	r2, r3
 8004680:	4b60      	ldr	r3, [pc, #384]	; (8004804 <USB_ActivateEndpoint+0x574>)
 8004682:	4323      	orrs	r3, r4
 8004684:	b29b      	uxth	r3, r3
 8004686:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	b29b      	uxth	r3, r3
 8004696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800469a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469e:	b29c      	uxth	r4, r3
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	441a      	add	r2, r3
 80046aa:	4b56      	ldr	r3, [pc, #344]	; (8004804 <USB_ActivateEndpoint+0x574>)
 80046ac:	4323      	orrs	r3, r4
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	b29b      	uxth	r3, r3
 80046c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c8:	b29c      	uxth	r4, r3
 80046ca:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80046ce:	b29c      	uxth	r4, r3
 80046d0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80046d4:	b29c      	uxth	r4, r3
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	441a      	add	r2, r3
 80046e0:	4b49      	ldr	r3, [pc, #292]	; (8004808 <USB_ActivateEndpoint+0x578>)
 80046e2:	4323      	orrs	r3, r4
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046fe:	b29c      	uxth	r4, r3
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	441a      	add	r2, r3
 800470a:	4b3f      	ldr	r3, [pc, #252]	; (8004808 <USB_ActivateEndpoint+0x578>)
 800470c:	4323      	orrs	r3, r4
 800470e:	b29b      	uxth	r3, r3
 8004710:	8013      	strh	r3, [r2, #0]
 8004712:	e0a5      	b.n	8004860 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	881b      	ldrh	r3, [r3, #0]
 8004720:	b29c      	uxth	r4, r3
 8004722:	4623      	mov	r3, r4
 8004724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d014      	beq.n	8004756 <USB_ActivateEndpoint+0x4c6>
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	b29b      	uxth	r3, r3
 800473a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800473e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004742:	b29c      	uxth	r4, r3
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	441a      	add	r2, r3
 800474e:	4b2c      	ldr	r3, [pc, #176]	; (8004800 <USB_ActivateEndpoint+0x570>)
 8004750:	4323      	orrs	r3, r4
 8004752:	b29b      	uxth	r3, r3
 8004754:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	b29c      	uxth	r4, r3
 8004764:	4623      	mov	r3, r4
 8004766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476a:	2b00      	cmp	r3, #0
 800476c:	d014      	beq.n	8004798 <USB_ActivateEndpoint+0x508>
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	b29b      	uxth	r3, r3
 800477c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004784:	b29c      	uxth	r4, r3
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	441a      	add	r2, r3
 8004790:	4b1c      	ldr	r3, [pc, #112]	; (8004804 <USB_ActivateEndpoint+0x574>)
 8004792:	4323      	orrs	r3, r4
 8004794:	b29b      	uxth	r3, r3
 8004796:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ae:	b29c      	uxth	r4, r3
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	441a      	add	r2, r3
 80047ba:	4b11      	ldr	r3, [pc, #68]	; (8004800 <USB_ActivateEndpoint+0x570>)
 80047bc:	4323      	orrs	r3, r4
 80047be:	b29b      	uxth	r3, r3
 80047c0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	78db      	ldrb	r3, [r3, #3]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d020      	beq.n	800480c <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047e0:	b29c      	uxth	r4, r3
 80047e2:	f084 0320 	eor.w	r3, r4, #32
 80047e6:	b29c      	uxth	r4, r3
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	441a      	add	r2, r3
 80047f2:	4b05      	ldr	r3, [pc, #20]	; (8004808 <USB_ActivateEndpoint+0x578>)
 80047f4:	4323      	orrs	r3, r4
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	8013      	strh	r3, [r2, #0]
 80047fa:	e01c      	b.n	8004836 <USB_ActivateEndpoint+0x5a6>
 80047fc:	ffff8180 	.word	0xffff8180
 8004800:	ffffc080 	.word	0xffffc080
 8004804:	ffff80c0 	.word	0xffff80c0
 8004808:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	b29b      	uxth	r3, r3
 800481a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800481e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004822:	b29c      	uxth	r4, r3
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	441a      	add	r2, r3
 800482e:	4b0f      	ldr	r3, [pc, #60]	; (800486c <USB_ActivateEndpoint+0x5dc>)
 8004830:	4323      	orrs	r3, r4
 8004832:	b29b      	uxth	r3, r3
 8004834:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	b29b      	uxth	r3, r3
 8004844:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484c:	b29c      	uxth	r4, r3
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	441a      	add	r2, r3
 8004858:	4b04      	ldr	r3, [pc, #16]	; (800486c <USB_ActivateEndpoint+0x5dc>)
 800485a:	4323      	orrs	r3, r4
 800485c:	b29b      	uxth	r3, r3
 800485e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004860:	7bfb      	ldrb	r3, [r7, #15]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bc90      	pop	{r4, r7}
 800486a:	4770      	bx	lr
 800486c:	ffff8080 	.word	0xffff8080

08004870 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004870:	b490      	push	{r4, r7}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	7b1b      	ldrb	r3, [r3, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d171      	bne.n	8004966 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	785b      	ldrb	r3, [r3, #1]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d036      	beq.n	80048f8 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	b29c      	uxth	r4, r3
 8004898:	4623      	mov	r3, r4
 800489a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d014      	beq.n	80048cc <USB_DeactivateEndpoint+0x5c>
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b8:	b29c      	uxth	r4, r3
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	441a      	add	r2, r3
 80048c4:	4b6b      	ldr	r3, [pc, #428]	; (8004a74 <USB_DeactivateEndpoint+0x204>)
 80048c6:	4323      	orrs	r3, r4
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	b29b      	uxth	r3, r3
 80048da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048e2:	b29c      	uxth	r4, r3
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	441a      	add	r2, r3
 80048ee:	4b62      	ldr	r3, [pc, #392]	; (8004a78 <USB_DeactivateEndpoint+0x208>)
 80048f0:	4323      	orrs	r3, r4
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	8013      	strh	r3, [r2, #0]
 80048f6:	e144      	b.n	8004b82 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	b29c      	uxth	r4, r3
 8004906:	4623      	mov	r3, r4
 8004908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d014      	beq.n	800493a <USB_DeactivateEndpoint+0xca>
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	b29b      	uxth	r3, r3
 800491e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004926:	b29c      	uxth	r4, r3
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	441a      	add	r2, r3
 8004932:	4b52      	ldr	r3, [pc, #328]	; (8004a7c <USB_DeactivateEndpoint+0x20c>)
 8004934:	4323      	orrs	r3, r4
 8004936:	b29b      	uxth	r3, r3
 8004938:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	b29b      	uxth	r3, r3
 8004948:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800494c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004950:	b29c      	uxth	r4, r3
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	441a      	add	r2, r3
 800495c:	4b46      	ldr	r3, [pc, #280]	; (8004a78 <USB_DeactivateEndpoint+0x208>)
 800495e:	4323      	orrs	r3, r4
 8004960:	b29b      	uxth	r3, r3
 8004962:	8013      	strh	r3, [r2, #0]
 8004964:	e10d      	b.n	8004b82 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	785b      	ldrb	r3, [r3, #1]
 800496a:	2b00      	cmp	r3, #0
 800496c:	f040 8088 	bne.w	8004a80 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	881b      	ldrh	r3, [r3, #0]
 800497c:	b29c      	uxth	r4, r3
 800497e:	4623      	mov	r3, r4
 8004980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d014      	beq.n	80049b2 <USB_DeactivateEndpoint+0x142>
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	b29b      	uxth	r3, r3
 8004996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800499a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499e:	b29c      	uxth	r4, r3
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	441a      	add	r2, r3
 80049aa:	4b34      	ldr	r3, [pc, #208]	; (8004a7c <USB_DeactivateEndpoint+0x20c>)
 80049ac:	4323      	orrs	r3, r4
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	b29c      	uxth	r4, r3
 80049c0:	4623      	mov	r3, r4
 80049c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d014      	beq.n	80049f4 <USB_DeactivateEndpoint+0x184>
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e0:	b29c      	uxth	r4, r3
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	441a      	add	r2, r3
 80049ec:	4b21      	ldr	r3, [pc, #132]	; (8004a74 <USB_DeactivateEndpoint+0x204>)
 80049ee:	4323      	orrs	r3, r4
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0a:	b29c      	uxth	r4, r3
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	441a      	add	r2, r3
 8004a16:	4b17      	ldr	r3, [pc, #92]	; (8004a74 <USB_DeactivateEndpoint+0x204>)
 8004a18:	4323      	orrs	r3, r4
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	881b      	ldrh	r3, [r3, #0]
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a34:	b29c      	uxth	r4, r3
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	441a      	add	r2, r3
 8004a40:	4b0d      	ldr	r3, [pc, #52]	; (8004a78 <USB_DeactivateEndpoint+0x208>)
 8004a42:	4323      	orrs	r3, r4
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a5e:	b29c      	uxth	r4, r3
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	441a      	add	r2, r3
 8004a6a:	4b03      	ldr	r3, [pc, #12]	; (8004a78 <USB_DeactivateEndpoint+0x208>)
 8004a6c:	4323      	orrs	r3, r4
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	8013      	strh	r3, [r2, #0]
 8004a72:	e086      	b.n	8004b82 <USB_DeactivateEndpoint+0x312>
 8004a74:	ffff80c0 	.word	0xffff80c0
 8004a78:	ffff8080 	.word	0xffff8080
 8004a7c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	b29c      	uxth	r4, r3
 8004a8e:	4623      	mov	r3, r4
 8004a90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d014      	beq.n	8004ac2 <USB_DeactivateEndpoint+0x252>
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aae:	b29c      	uxth	r4, r3
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	441a      	add	r2, r3
 8004aba:	4b35      	ldr	r3, [pc, #212]	; (8004b90 <USB_DeactivateEndpoint+0x320>)
 8004abc:	4323      	orrs	r3, r4
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	b29c      	uxth	r4, r3
 8004ad0:	4623      	mov	r3, r4
 8004ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d014      	beq.n	8004b04 <USB_DeactivateEndpoint+0x294>
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af0:	b29c      	uxth	r4, r3
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	441a      	add	r2, r3
 8004afc:	4b25      	ldr	r3, [pc, #148]	; (8004b94 <USB_DeactivateEndpoint+0x324>)
 8004afe:	4323      	orrs	r3, r4
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1a:	b29c      	uxth	r4, r3
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	441a      	add	r2, r3
 8004b26:	4b1a      	ldr	r3, [pc, #104]	; (8004b90 <USB_DeactivateEndpoint+0x320>)
 8004b28:	4323      	orrs	r3, r4
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b44:	b29c      	uxth	r4, r3
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	441a      	add	r2, r3
 8004b50:	4b11      	ldr	r3, [pc, #68]	; (8004b98 <USB_DeactivateEndpoint+0x328>)
 8004b52:	4323      	orrs	r3, r4
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6e:	b29c      	uxth	r4, r3
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	441a      	add	r2, r3
 8004b7a:	4b07      	ldr	r3, [pc, #28]	; (8004b98 <USB_DeactivateEndpoint+0x328>)
 8004b7c:	4323      	orrs	r3, r4
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bc90      	pop	{r4, r7}
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	ffffc080 	.word	0xffffc080
 8004b94:	ffff80c0 	.word	0xffff80c0
 8004b98:	ffff8080 	.word	0xffff8080

08004b9c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b9c:	b590      	push	{r4, r7, lr}
 8004b9e:	b08d      	sub	sp, #52	; 0x34
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	785b      	ldrb	r3, [r3, #1]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	f040 8160 	bne.w	8004e70 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	699a      	ldr	r2, [r3, #24]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d909      	bls.n	8004bd0 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	699a      	ldr	r2, [r3, #24]
 8004bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc8:	1ad2      	subs	r2, r2, r3
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	619a      	str	r2, [r3, #24]
 8004bce:	e005      	b.n	8004bdc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	7b1b      	ldrb	r3, [r3, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d119      	bne.n	8004c18 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	6959      	ldr	r1, [r3, #20]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	88da      	ldrh	r2, [r3, #6]
 8004bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 fbbd 	bl	8005370 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004bf6:	687c      	ldr	r4, [r7, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	441c      	add	r4, r3
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	4423      	add	r3, r4
 8004c0a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c0e:	461c      	mov	r4, r3
 8004c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	8023      	strh	r3, [r4, #0]
 8004c16:	e10f      	b.n	8004e38 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d065      	beq.n	8004cfa <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c2e:	687c      	ldr	r4, [r7, #4]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	785b      	ldrb	r3, [r3, #1]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d148      	bne.n	8004cca <USB_EPStartXfer+0x12e>
 8004c38:	687c      	ldr	r4, [r7, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	441c      	add	r4, r3
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	00db      	lsls	r3, r3, #3
 8004c4a:	4423      	add	r3, r4
 8004c4c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c50:	461c      	mov	r4, r3
 8004c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10e      	bne.n	8004c76 <USB_EPStartXfer+0xda>
 8004c58:	8823      	ldrh	r3, [r4, #0]
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	8023      	strh	r3, [r4, #0]
 8004c64:	8823      	ldrh	r3, [r4, #0]
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	8023      	strh	r3, [r4, #0]
 8004c74:	e03d      	b.n	8004cf2 <USB_EPStartXfer+0x156>
 8004c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c78:	2b3e      	cmp	r3, #62	; 0x3e
 8004c7a:	d810      	bhi.n	8004c9e <USB_EPStartXfer+0x102>
 8004c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7e:	085b      	lsrs	r3, r3, #1
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
 8004c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <USB_EPStartXfer+0xf6>
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	3301      	adds	r3, #1
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	029b      	lsls	r3, r3, #10
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	8023      	strh	r3, [r4, #0]
 8004c9c:	e029      	b.n	8004cf2 <USB_EPStartXfer+0x156>
 8004c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca0:	095b      	lsrs	r3, r3, #5
 8004ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca6:	f003 031f 	and.w	r3, r3, #31
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d102      	bne.n	8004cb4 <USB_EPStartXfer+0x118>
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	029b      	lsls	r3, r3, #10
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	8023      	strh	r3, [r4, #0]
 8004cc8:	e013      	b.n	8004cf2 <USB_EPStartXfer+0x156>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	785b      	ldrb	r3, [r3, #1]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d10f      	bne.n	8004cf2 <USB_EPStartXfer+0x156>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	441c      	add	r4, r3
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	4423      	add	r3, r4
 8004ce4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	895b      	ldrh	r3, [r3, #10]
 8004cf6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004cf8:	e063      	b.n	8004dc2 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	785b      	ldrb	r3, [r3, #1]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d148      	bne.n	8004d94 <USB_EPStartXfer+0x1f8>
 8004d02:	687c      	ldr	r4, [r7, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	441c      	add	r4, r3
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	4423      	add	r3, r4
 8004d16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d1a:	461c      	mov	r4, r3
 8004d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10e      	bne.n	8004d40 <USB_EPStartXfer+0x1a4>
 8004d22:	8823      	ldrh	r3, [r4, #0]
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	8023      	strh	r3, [r4, #0]
 8004d2e:	8823      	ldrh	r3, [r4, #0]
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	8023      	strh	r3, [r4, #0]
 8004d3e:	e03d      	b.n	8004dbc <USB_EPStartXfer+0x220>
 8004d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d42:	2b3e      	cmp	r3, #62	; 0x3e
 8004d44:	d810      	bhi.n	8004d68 <USB_EPStartXfer+0x1cc>
 8004d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d48:	085b      	lsrs	r3, r3, #1
 8004d4a:	623b      	str	r3, [r7, #32]
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <USB_EPStartXfer+0x1c0>
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	623b      	str	r3, [r7, #32]
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	029b      	lsls	r3, r3, #10
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	8023      	strh	r3, [r4, #0]
 8004d66:	e029      	b.n	8004dbc <USB_EPStartXfer+0x220>
 8004d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	623b      	str	r3, [r7, #32]
 8004d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d70:	f003 031f 	and.w	r3, r3, #31
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d102      	bne.n	8004d7e <USB_EPStartXfer+0x1e2>
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	623b      	str	r3, [r7, #32]
 8004d7e:	6a3b      	ldr	r3, [r7, #32]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	029b      	lsls	r3, r3, #10
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	8023      	strh	r3, [r4, #0]
 8004d92:	e013      	b.n	8004dbc <USB_EPStartXfer+0x220>
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	785b      	ldrb	r3, [r3, #1]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d10f      	bne.n	8004dbc <USB_EPStartXfer+0x220>
 8004d9c:	687c      	ldr	r4, [r7, #4]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	441c      	add	r4, r3
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	4423      	add	r3, r4
 8004db0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004db4:	461c      	mov	r4, r3
 8004db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	891b      	ldrh	r3, [r3, #8]
 8004dc0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	6959      	ldr	r1, [r3, #20]
 8004dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 facf 	bl	8005370 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	785b      	ldrb	r3, [r3, #1]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d115      	bne.n	8004e06 <USB_EPStartXfer+0x26a>
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df0:	b29c      	uxth	r4, r3
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	441a      	add	r2, r3
 8004dfc:	4b9a      	ldr	r3, [pc, #616]	; (8005068 <USB_EPStartXfer+0x4cc>)
 8004dfe:	4323      	orrs	r3, r4
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	8013      	strh	r3, [r2, #0]
 8004e04:	e018      	b.n	8004e38 <USB_EPStartXfer+0x29c>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	785b      	ldrb	r3, [r3, #1]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d114      	bne.n	8004e38 <USB_EPStartXfer+0x29c>
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e24:	b29c      	uxth	r4, r3
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	441a      	add	r2, r3
 8004e30:	4b8e      	ldr	r3, [pc, #568]	; (800506c <USB_EPStartXfer+0x4d0>)
 8004e32:	4323      	orrs	r3, r4
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	881b      	ldrh	r3, [r3, #0]
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e4e:	b29c      	uxth	r4, r3
 8004e50:	f084 0310 	eor.w	r3, r4, #16
 8004e54:	b29c      	uxth	r4, r3
 8004e56:	f084 0320 	eor.w	r3, r4, #32
 8004e5a:	b29c      	uxth	r4, r3
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	441a      	add	r2, r3
 8004e66:	4b82      	ldr	r3, [pc, #520]	; (8005070 <USB_EPStartXfer+0x4d4>)
 8004e68:	4323      	orrs	r3, r4
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	8013      	strh	r3, [r2, #0]
 8004e6e:	e146      	b.n	80050fe <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	699a      	ldr	r2, [r3, #24]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d909      	bls.n	8004e90 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	699a      	ldr	r2, [r3, #24]
 8004e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e88:	1ad2      	subs	r2, r2, r3
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	619a      	str	r2, [r3, #24]
 8004e8e:	e005      	b.n	8004e9c <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	7b1b      	ldrb	r3, [r3, #12]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d148      	bne.n	8004f36 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004ea4:	687c      	ldr	r4, [r7, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	441c      	add	r4, r3
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	4423      	add	r3, r4
 8004eb8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ebc:	461c      	mov	r4, r3
 8004ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10e      	bne.n	8004ee2 <USB_EPStartXfer+0x346>
 8004ec4:	8823      	ldrh	r3, [r4, #0]
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	8023      	strh	r3, [r4, #0]
 8004ed0:	8823      	ldrh	r3, [r4, #0]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	8023      	strh	r3, [r4, #0]
 8004ee0:	e0f2      	b.n	80050c8 <USB_EPStartXfer+0x52c>
 8004ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee4:	2b3e      	cmp	r3, #62	; 0x3e
 8004ee6:	d810      	bhi.n	8004f0a <USB_EPStartXfer+0x36e>
 8004ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eea:	085b      	lsrs	r3, r3, #1
 8004eec:	61fb      	str	r3, [r7, #28]
 8004eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <USB_EPStartXfer+0x362>
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	3301      	adds	r3, #1
 8004efc:	61fb      	str	r3, [r7, #28]
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	029b      	lsls	r3, r3, #10
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	8023      	strh	r3, [r4, #0]
 8004f08:	e0de      	b.n	80050c8 <USB_EPStartXfer+0x52c>
 8004f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0c:	095b      	lsrs	r3, r3, #5
 8004f0e:	61fb      	str	r3, [r7, #28]
 8004f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f12:	f003 031f 	and.w	r3, r3, #31
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d102      	bne.n	8004f20 <USB_EPStartXfer+0x384>
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	61fb      	str	r3, [r7, #28]
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	029b      	lsls	r3, r3, #10
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	8023      	strh	r3, [r4, #0]
 8004f34:	e0c8      	b.n	80050c8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	785b      	ldrb	r3, [r3, #1]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d148      	bne.n	8004fd0 <USB_EPStartXfer+0x434>
 8004f3e:	687c      	ldr	r4, [r7, #4]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	441c      	add	r4, r3
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	4423      	add	r3, r4
 8004f52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004f56:	461c      	mov	r4, r3
 8004f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10e      	bne.n	8004f7c <USB_EPStartXfer+0x3e0>
 8004f5e:	8823      	ldrh	r3, [r4, #0]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	8023      	strh	r3, [r4, #0]
 8004f6a:	8823      	ldrh	r3, [r4, #0]
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	8023      	strh	r3, [r4, #0]
 8004f7a:	e03d      	b.n	8004ff8 <USB_EPStartXfer+0x45c>
 8004f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7e:	2b3e      	cmp	r3, #62	; 0x3e
 8004f80:	d810      	bhi.n	8004fa4 <USB_EPStartXfer+0x408>
 8004f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f84:	085b      	lsrs	r3, r3, #1
 8004f86:	61bb      	str	r3, [r7, #24]
 8004f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d002      	beq.n	8004f98 <USB_EPStartXfer+0x3fc>
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	3301      	adds	r3, #1
 8004f96:	61bb      	str	r3, [r7, #24]
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	029b      	lsls	r3, r3, #10
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	8023      	strh	r3, [r4, #0]
 8004fa2:	e029      	b.n	8004ff8 <USB_EPStartXfer+0x45c>
 8004fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa6:	095b      	lsrs	r3, r3, #5
 8004fa8:	61bb      	str	r3, [r7, #24]
 8004faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fac:	f003 031f 	and.w	r3, r3, #31
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d102      	bne.n	8004fba <USB_EPStartXfer+0x41e>
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	61bb      	str	r3, [r7, #24]
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	029b      	lsls	r3, r3, #10
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	8023      	strh	r3, [r4, #0]
 8004fce:	e013      	b.n	8004ff8 <USB_EPStartXfer+0x45c>
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	785b      	ldrb	r3, [r3, #1]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d10f      	bne.n	8004ff8 <USB_EPStartXfer+0x45c>
 8004fd8:	687c      	ldr	r4, [r7, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	441c      	add	r4, r3
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	4423      	add	r3, r4
 8004fec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ff0:	461c      	mov	r4, r3
 8004ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	8023      	strh	r3, [r4, #0]
 8004ff8:	687c      	ldr	r4, [r7, #4]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	785b      	ldrb	r3, [r3, #1]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d14e      	bne.n	80050a0 <USB_EPStartXfer+0x504>
 8005002:	687c      	ldr	r4, [r7, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800500a:	b29b      	uxth	r3, r3
 800500c:	441c      	add	r4, r3
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	4423      	add	r3, r4
 8005016:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800501a:	461c      	mov	r4, r3
 800501c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10e      	bne.n	8005040 <USB_EPStartXfer+0x4a4>
 8005022:	8823      	ldrh	r3, [r4, #0]
 8005024:	b29b      	uxth	r3, r3
 8005026:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800502a:	b29b      	uxth	r3, r3
 800502c:	8023      	strh	r3, [r4, #0]
 800502e:	8823      	ldrh	r3, [r4, #0]
 8005030:	b29b      	uxth	r3, r3
 8005032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800503a:	b29b      	uxth	r3, r3
 800503c:	8023      	strh	r3, [r4, #0]
 800503e:	e043      	b.n	80050c8 <USB_EPStartXfer+0x52c>
 8005040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005042:	2b3e      	cmp	r3, #62	; 0x3e
 8005044:	d816      	bhi.n	8005074 <USB_EPStartXfer+0x4d8>
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	085b      	lsrs	r3, r3, #1
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d002      	beq.n	800505c <USB_EPStartXfer+0x4c0>
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	3301      	adds	r3, #1
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	b29b      	uxth	r3, r3
 8005060:	029b      	lsls	r3, r3, #10
 8005062:	b29b      	uxth	r3, r3
 8005064:	8023      	strh	r3, [r4, #0]
 8005066:	e02f      	b.n	80050c8 <USB_EPStartXfer+0x52c>
 8005068:	ffff80c0 	.word	0xffff80c0
 800506c:	ffffc080 	.word	0xffffc080
 8005070:	ffff8080 	.word	0xffff8080
 8005074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005076:	095b      	lsrs	r3, r3, #5
 8005078:	617b      	str	r3, [r7, #20]
 800507a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507c:	f003 031f 	and.w	r3, r3, #31
 8005080:	2b00      	cmp	r3, #0
 8005082:	d102      	bne.n	800508a <USB_EPStartXfer+0x4ee>
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	3b01      	subs	r3, #1
 8005088:	617b      	str	r3, [r7, #20]
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	b29b      	uxth	r3, r3
 800508e:	029b      	lsls	r3, r3, #10
 8005090:	b29b      	uxth	r3, r3
 8005092:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005096:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800509a:	b29b      	uxth	r3, r3
 800509c:	8023      	strh	r3, [r4, #0]
 800509e:	e013      	b.n	80050c8 <USB_EPStartXfer+0x52c>
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	785b      	ldrb	r3, [r3, #1]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d10f      	bne.n	80050c8 <USB_EPStartXfer+0x52c>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	441c      	add	r4, r3
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	4423      	add	r3, r4
 80050ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80050be:	613b      	str	r3, [r7, #16]
 80050c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	881b      	ldrh	r3, [r3, #0]
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050de:	b29c      	uxth	r4, r3
 80050e0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80050e4:	b29c      	uxth	r4, r3
 80050e6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80050ea:	b29c      	uxth	r4, r3
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	441a      	add	r2, r3
 80050f6:	4b04      	ldr	r3, [pc, #16]	; (8005108 <USB_EPStartXfer+0x56c>)
 80050f8:	4323      	orrs	r3, r4
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3734      	adds	r7, #52	; 0x34
 8005104:	46bd      	mov	sp, r7
 8005106:	bd90      	pop	{r4, r7, pc}
 8005108:	ffff8080 	.word	0xffff8080

0800510c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800510c:	b490      	push	{r4, r7}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	785b      	ldrb	r3, [r3, #1]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d018      	beq.n	8005150 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	b29b      	uxth	r3, r3
 800512c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005134:	b29c      	uxth	r4, r3
 8005136:	f084 0310 	eor.w	r3, r4, #16
 800513a:	b29c      	uxth	r4, r3
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	441a      	add	r2, r3
 8005146:	4b11      	ldr	r3, [pc, #68]	; (800518c <USB_EPSetStall+0x80>)
 8005148:	4323      	orrs	r3, r4
 800514a:	b29b      	uxth	r3, r3
 800514c:	8013      	strh	r3, [r2, #0]
 800514e:	e017      	b.n	8005180 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	b29b      	uxth	r3, r3
 800515e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005166:	b29c      	uxth	r4, r3
 8005168:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800516c:	b29c      	uxth	r4, r3
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	441a      	add	r2, r3
 8005178:	4b04      	ldr	r3, [pc, #16]	; (800518c <USB_EPSetStall+0x80>)
 800517a:	4323      	orrs	r3, r4
 800517c:	b29b      	uxth	r3, r3
 800517e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bc90      	pop	{r4, r7}
 800518a:	4770      	bx	lr
 800518c:	ffff8080 	.word	0xffff8080

08005190 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005190:	b490      	push	{r4, r7}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	7b1b      	ldrb	r3, [r3, #12]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d17d      	bne.n	800529e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	785b      	ldrb	r3, [r3, #1]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d03d      	beq.n	8005226 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	881b      	ldrh	r3, [r3, #0]
 80051b6:	b29c      	uxth	r4, r3
 80051b8:	4623      	mov	r3, r4
 80051ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d014      	beq.n	80051ec <USB_EPClearStall+0x5c>
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d8:	b29c      	uxth	r4, r3
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	441a      	add	r2, r3
 80051e4:	4b31      	ldr	r3, [pc, #196]	; (80052ac <USB_EPClearStall+0x11c>)
 80051e6:	4323      	orrs	r3, r4
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	78db      	ldrb	r3, [r3, #3]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d054      	beq.n	800529e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	881b      	ldrh	r3, [r3, #0]
 8005200:	b29b      	uxth	r3, r3
 8005202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800520a:	b29c      	uxth	r4, r3
 800520c:	f084 0320 	eor.w	r3, r4, #32
 8005210:	b29c      	uxth	r4, r3
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	441a      	add	r2, r3
 800521c:	4b24      	ldr	r3, [pc, #144]	; (80052b0 <USB_EPClearStall+0x120>)
 800521e:	4323      	orrs	r3, r4
 8005220:	b29b      	uxth	r3, r3
 8005222:	8013      	strh	r3, [r2, #0]
 8005224:	e03b      	b.n	800529e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	b29c      	uxth	r4, r3
 8005234:	4623      	mov	r3, r4
 8005236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d014      	beq.n	8005268 <USB_EPClearStall+0xd8>
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	881b      	ldrh	r3, [r3, #0]
 800524a:	b29b      	uxth	r3, r3
 800524c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005254:	b29c      	uxth	r4, r3
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	441a      	add	r2, r3
 8005260:	4b14      	ldr	r3, [pc, #80]	; (80052b4 <USB_EPClearStall+0x124>)
 8005262:	4323      	orrs	r3, r4
 8005264:	b29b      	uxth	r3, r3
 8005266:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	b29b      	uxth	r3, r3
 8005276:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800527a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800527e:	b29c      	uxth	r4, r3
 8005280:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005284:	b29c      	uxth	r4, r3
 8005286:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800528a:	b29c      	uxth	r4, r3
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	441a      	add	r2, r3
 8005296:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <USB_EPClearStall+0x120>)
 8005298:	4323      	orrs	r3, r4
 800529a:	b29b      	uxth	r3, r3
 800529c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bc90      	pop	{r4, r7}
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	ffff80c0 	.word	0xffff80c0
 80052b0:	ffff8080 	.word	0xffff8080
 80052b4:	ffffc080 	.word	0xffffc080

080052b8 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	460b      	mov	r3, r1
 80052c2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80052c4:	78fb      	ldrb	r3, [r7, #3]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d103      	bne.n	80052d2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2280      	movs	r2, #128	; 0x80
 80052ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800531c:	b29b      	uxth	r3, r3
 800531e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005322:	b29a      	uxth	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005346:	b29b      	uxth	r3, r3
 8005348:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800534a:	68fb      	ldr	r3, [r7, #12]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005370:	b480      	push	{r7}
 8005372:	b08d      	sub	sp, #52	; 0x34
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	4611      	mov	r1, r2
 800537c:	461a      	mov	r2, r3
 800537e:	460b      	mov	r3, r1
 8005380:	80fb      	strh	r3, [r7, #6]
 8005382:	4613      	mov	r3, r2
 8005384:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005386:	88bb      	ldrh	r3, [r7, #4]
 8005388:	3301      	adds	r3, #1
 800538a:	085b      	lsrs	r3, r3, #1
 800538c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005396:	88fa      	ldrh	r2, [r7, #6]
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053a0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053a6:	e01b      	b.n	80053e0 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	3301      	adds	r3, #1
 80053b2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	021b      	lsls	r3, r3, #8
 80053bc:	b29b      	uxth	r3, r3
 80053be:	461a      	mov	r2, r3
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053cc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80053ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d0:	3302      	adds	r3, #2
 80053d2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	3301      	adds	r3, #1
 80053d8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80053da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053dc:	3b01      	subs	r3, #1
 80053de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e0      	bne.n	80053a8 <USB_WritePMA+0x38>
  }
}
 80053e6:	bf00      	nop
 80053e8:	3734      	adds	r7, #52	; 0x34
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b08b      	sub	sp, #44	; 0x2c
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	60f8      	str	r0, [r7, #12]
 80053fa:	60b9      	str	r1, [r7, #8]
 80053fc:	4611      	mov	r1, r2
 80053fe:	461a      	mov	r2, r3
 8005400:	460b      	mov	r3, r1
 8005402:	80fb      	strh	r3, [r7, #6]
 8005404:	4613      	mov	r3, r2
 8005406:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005408:	88bb      	ldrh	r3, [r7, #4]
 800540a:	085b      	lsrs	r3, r3, #1
 800540c:	b29b      	uxth	r3, r3
 800540e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005418:	88fa      	ldrh	r2, [r7, #6]
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	4413      	add	r3, r2
 800541e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005422:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	627b      	str	r3, [r7, #36]	; 0x24
 8005428:	e018      	b.n	800545c <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	b29b      	uxth	r3, r3
 8005430:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	3302      	adds	r3, #2
 8005436:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	b2da      	uxtb	r2, r3
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	3301      	adds	r3, #1
 8005444:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	0a1b      	lsrs	r3, r3, #8
 800544a:	b2da      	uxtb	r2, r3
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	3301      	adds	r3, #1
 8005454:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	3b01      	subs	r3, #1
 800545a:	627b      	str	r3, [r7, #36]	; 0x24
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1e3      	bne.n	800542a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005462:	88bb      	ldrh	r3, [r7, #4]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	b29b      	uxth	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d007      	beq.n	800547e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	881b      	ldrh	r3, [r3, #0]
 8005472:	b29b      	uxth	r3, r3
 8005474:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	b2da      	uxtb	r2, r3
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	701a      	strb	r2, [r3, #0]
  }
}
 800547e:	bf00      	nop
 8005480:	372c      	adds	r7, #44	; 0x2c
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b084      	sub	sp, #16
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	460b      	mov	r3, r1
 8005494:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005496:	2300      	movs	r3, #0
 8005498:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	7c1b      	ldrb	r3, [r3, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d115      	bne.n	80054ce <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80054a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054a6:	2202      	movs	r2, #2
 80054a8:	2181      	movs	r1, #129	; 0x81
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f001 feb0 	bl	8007210 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80054b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054ba:	2202      	movs	r2, #2
 80054bc:	2101      	movs	r1, #1
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f001 fea6 	bl	8007210 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80054cc:	e012      	b.n	80054f4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80054ce:	2340      	movs	r3, #64	; 0x40
 80054d0:	2202      	movs	r2, #2
 80054d2:	2181      	movs	r1, #129	; 0x81
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f001 fe9b 	bl	8007210 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80054e0:	2340      	movs	r3, #64	; 0x40
 80054e2:	2202      	movs	r2, #2
 80054e4:	2101      	movs	r1, #1
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f001 fe92 	bl	8007210 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80054f4:	2308      	movs	r3, #8
 80054f6:	2203      	movs	r2, #3
 80054f8:	2182      	movs	r1, #130	; 0x82
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f001 fe88 	bl	8007210 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005506:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800550a:	f002 f87b 	bl	8007604 <USBD_static_malloc>
 800550e:	4602      	mov	r2, r0
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800551c:	2b00      	cmp	r3, #0
 800551e:	d102      	bne.n	8005526 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005520:	2301      	movs	r3, #1
 8005522:	73fb      	strb	r3, [r7, #15]
 8005524:	e026      	b.n	8005574 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800552c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2200      	movs	r2, #0
 800553c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2200      	movs	r2, #0
 8005544:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	7c1b      	ldrb	r3, [r3, #16]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d109      	bne.n	8005564 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005556:	f44f 7300 	mov.w	r3, #512	; 0x200
 800555a:	2101      	movs	r1, #1
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f001 ffcd 	bl	80074fc <USBD_LL_PrepareReceive>
 8005562:	e007      	b.n	8005574 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800556a:	2340      	movs	r3, #64	; 0x40
 800556c:	2101      	movs	r1, #1
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f001 ffc4 	bl	80074fc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005574:	7bfb      	ldrb	r3, [r7, #15]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b084      	sub	sp, #16
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	460b      	mov	r3, r1
 8005588:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800558a:	2300      	movs	r3, #0
 800558c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800558e:	2181      	movs	r1, #129	; 0x81
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f001 fe7b 	bl	800728c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800559c:	2101      	movs	r1, #1
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f001 fe74 	bl	800728c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80055ac:	2182      	movs	r1, #130	; 0x82
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f001 fe6c 	bl	800728c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00e      	beq.n	80055e2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055d4:	4618      	mov	r0, r3
 80055d6:	f002 f823 	bl	8007620 <USBD_static_free>
    pdev->pClassData = NULL;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80055e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055fc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80055fe:	2300      	movs	r3, #0
 8005600:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005602:	2300      	movs	r3, #0
 8005604:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005612:	2b00      	cmp	r3, #0
 8005614:	d039      	beq.n	800568a <USBD_CDC_Setup+0x9e>
 8005616:	2b20      	cmp	r3, #32
 8005618:	d17c      	bne.n	8005714 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	88db      	ldrh	r3, [r3, #6]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d029      	beq.n	8005676 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	b25b      	sxtb	r3, r3
 8005628:	2b00      	cmp	r3, #0
 800562a:	da11      	bge.n	8005650 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005638:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	88d2      	ldrh	r2, [r2, #6]
 800563e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005640:	6939      	ldr	r1, [r7, #16]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	88db      	ldrh	r3, [r3, #6]
 8005646:	461a      	mov	r2, r3
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f001 f9fb 	bl	8006a44 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800564e:	e068      	b.n	8005722 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	785a      	ldrb	r2, [r3, #1]
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	88db      	ldrh	r3, [r3, #6]
 800565e:	b2da      	uxtb	r2, r3
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005666:	6939      	ldr	r1, [r7, #16]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	88db      	ldrh	r3, [r3, #6]
 800566c:	461a      	mov	r2, r3
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f001 fa16 	bl	8006aa0 <USBD_CtlPrepareRx>
      break;
 8005674:	e055      	b.n	8005722 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	7850      	ldrb	r0, [r2, #1]
 8005682:	2200      	movs	r2, #0
 8005684:	6839      	ldr	r1, [r7, #0]
 8005686:	4798      	blx	r3
      break;
 8005688:	e04b      	b.n	8005722 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	785b      	ldrb	r3, [r3, #1]
 800568e:	2b0a      	cmp	r3, #10
 8005690:	d017      	beq.n	80056c2 <USBD_CDC_Setup+0xd6>
 8005692:	2b0b      	cmp	r3, #11
 8005694:	d029      	beq.n	80056ea <USBD_CDC_Setup+0xfe>
 8005696:	2b00      	cmp	r3, #0
 8005698:	d133      	bne.n	8005702 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056a0:	2b03      	cmp	r3, #3
 80056a2:	d107      	bne.n	80056b4 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80056a4:	f107 030c 	add.w	r3, r7, #12
 80056a8:	2202      	movs	r2, #2
 80056aa:	4619      	mov	r1, r3
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f001 f9c9 	bl	8006a44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80056b2:	e02e      	b.n	8005712 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80056b4:	6839      	ldr	r1, [r7, #0]
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f001 f959 	bl	800696e <USBD_CtlError>
            ret = USBD_FAIL;
 80056bc:	2302      	movs	r3, #2
 80056be:	75fb      	strb	r3, [r7, #23]
          break;
 80056c0:	e027      	b.n	8005712 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	d107      	bne.n	80056dc <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80056cc:	f107 030f 	add.w	r3, r7, #15
 80056d0:	2201      	movs	r2, #1
 80056d2:	4619      	mov	r1, r3
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f001 f9b5 	bl	8006a44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80056da:	e01a      	b.n	8005712 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80056dc:	6839      	ldr	r1, [r7, #0]
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f001 f945 	bl	800696e <USBD_CtlError>
            ret = USBD_FAIL;
 80056e4:	2302      	movs	r3, #2
 80056e6:	75fb      	strb	r3, [r7, #23]
          break;
 80056e8:	e013      	b.n	8005712 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	d00d      	beq.n	8005710 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80056f4:	6839      	ldr	r1, [r7, #0]
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f001 f939 	bl	800696e <USBD_CtlError>
            ret = USBD_FAIL;
 80056fc:	2302      	movs	r3, #2
 80056fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005700:	e006      	b.n	8005710 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005702:	6839      	ldr	r1, [r7, #0]
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f001 f932 	bl	800696e <USBD_CtlError>
          ret = USBD_FAIL;
 800570a:	2302      	movs	r3, #2
 800570c:	75fb      	strb	r3, [r7, #23]
          break;
 800570e:	e000      	b.n	8005712 <USBD_CDC_Setup+0x126>
          break;
 8005710:	bf00      	nop
      }
      break;
 8005712:	e006      	b.n	8005722 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005714:	6839      	ldr	r1, [r7, #0]
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f001 f929 	bl	800696e <USBD_CtlError>
      ret = USBD_FAIL;
 800571c:	2302      	movs	r3, #2
 800571e:	75fb      	strb	r3, [r7, #23]
      break;
 8005720:	bf00      	nop
  }

  return ret;
 8005722:	7dfb      	ldrb	r3, [r7, #23]
}
 8005724:	4618      	mov	r0, r3
 8005726:	3718      	adds	r7, #24
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	460b      	mov	r3, r1
 8005736:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800573e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005746:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d037      	beq.n	80057c2 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005752:	78fa      	ldrb	r2, [r7, #3]
 8005754:	6879      	ldr	r1, [r7, #4]
 8005756:	4613      	mov	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	440b      	add	r3, r1
 8005760:	331c      	adds	r3, #28
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d026      	beq.n	80057b6 <USBD_CDC_DataIn+0x8a>
 8005768:	78fa      	ldrb	r2, [r7, #3]
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	4613      	mov	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	440b      	add	r3, r1
 8005776:	331c      	adds	r3, #28
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	78fa      	ldrb	r2, [r7, #3]
 800577c:	68b9      	ldr	r1, [r7, #8]
 800577e:	0152      	lsls	r2, r2, #5
 8005780:	440a      	add	r2, r1
 8005782:	3238      	adds	r2, #56	; 0x38
 8005784:	6812      	ldr	r2, [r2, #0]
 8005786:	fbb3 f1f2 	udiv	r1, r3, r2
 800578a:	fb02 f201 	mul.w	r2, r2, r1
 800578e:	1a9b      	subs	r3, r3, r2
 8005790:	2b00      	cmp	r3, #0
 8005792:	d110      	bne.n	80057b6 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005794:	78fa      	ldrb	r2, [r7, #3]
 8005796:	6879      	ldr	r1, [r7, #4]
 8005798:	4613      	mov	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	440b      	add	r3, r1
 80057a2:	331c      	adds	r3, #28
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80057a8:	78f9      	ldrb	r1, [r7, #3]
 80057aa:	2300      	movs	r3, #0
 80057ac:	2200      	movs	r2, #0
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f001 fe6a 	bl	8007488 <USBD_LL_Transmit>
 80057b4:	e003      	b.n	80057be <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	e000      	b.n	80057c4 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 80057c2:	2302      	movs	r3, #2
  }
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	460b      	mov	r3, r1
 80057d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057de:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80057e0:	78fb      	ldrb	r3, [r7, #3]
 80057e2:	4619      	mov	r1, r3
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f001 fec3 	bl	8007570 <USBD_LL_GetRxDataSize>
 80057ea:	4602      	mov	r2, r0
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00d      	beq.n	8005818 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005810:	4611      	mov	r1, r2
 8005812:	4798      	blx	r3

    return USBD_OK;
 8005814:	2300      	movs	r3, #0
 8005816:	e000      	b.n	800581a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005818:	2302      	movs	r3, #2
  }
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b084      	sub	sp, #16
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005830:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005838:	2b00      	cmp	r3, #0
 800583a:	d015      	beq.n	8005868 <USBD_CDC_EP0_RxReady+0x46>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005842:	2bff      	cmp	r3, #255	; 0xff
 8005844:	d010      	beq.n	8005868 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005854:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800585c:	b292      	uxth	r2, r2
 800585e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	22ff      	movs	r2, #255	; 0xff
 8005864:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
	...

08005874 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2243      	movs	r2, #67	; 0x43
 8005880:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005882:	4b03      	ldr	r3, [pc, #12]	; (8005890 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005884:	4618      	mov	r0, r3
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	20000094 	.word	0x20000094

08005894 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2243      	movs	r2, #67	; 0x43
 80058a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80058a2:	4b03      	ldr	r3, [pc, #12]	; (80058b0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	20000050 	.word	0x20000050

080058b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2243      	movs	r2, #67	; 0x43
 80058c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80058c2:	4b03      	ldr	r3, [pc, #12]	; (80058d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	200000d8 	.word	0x200000d8

080058d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	220a      	movs	r2, #10
 80058e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80058e2:	4b03      	ldr	r3, [pc, #12]	; (80058f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	2000000c 	.word	0x2000000c

080058f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80058fe:	2302      	movs	r3, #2
 8005900:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d005      	beq.n	8005914 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005910:	2300      	movs	r3, #0
 8005912:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005914:	7bfb      	ldrb	r3, [r7, #15]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005922:	b480      	push	{r7}
 8005924:	b087      	sub	sp, #28
 8005926:	af00      	add	r7, sp, #0
 8005928:	60f8      	str	r0, [r7, #12]
 800592a:	60b9      	str	r1, [r7, #8]
 800592c:	4613      	mov	r3, r2
 800592e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005936:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005940:	88fa      	ldrh	r2, [r7, #6]
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	371c      	adds	r7, #28
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005956:	b480      	push	{r7}
 8005958:	b085      	sub	sp, #20
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005966:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b084      	sub	sp, #16
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800598c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005994:	2b00      	cmp	r3, #0
 8005996:	d017      	beq.n	80059c8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	7c1b      	ldrb	r3, [r3, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d109      	bne.n	80059b4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80059a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059aa:	2101      	movs	r1, #1
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f001 fda5 	bl	80074fc <USBD_LL_PrepareReceive>
 80059b2:	e007      	b.n	80059c4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80059ba:	2340      	movs	r3, #64	; 0x40
 80059bc:	2101      	movs	r1, #1
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f001 fd9c 	bl	80074fc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80059c4:	2300      	movs	r3, #0
 80059c6:	e000      	b.n	80059ca <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80059c8:	2302      	movs	r3, #2
  }
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b084      	sub	sp, #16
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	60f8      	str	r0, [r7, #12]
 80059da:	60b9      	str	r1, [r7, #8]
 80059dc:	4613      	mov	r3, r2
 80059de:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80059e6:	2302      	movs	r3, #2
 80059e8:	e01a      	b.n	8005a20 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	79fa      	ldrb	r2, [r7, #7]
 8005a16:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f001 fb65 	bl	80070e8 <USBD_LL_Init>

  return USBD_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d006      	beq.n	8005a4a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005a44:	2300      	movs	r3, #0
 8005a46:	73fb      	strb	r3, [r7, #15]
 8005a48:	e001      	b.n	8005a4e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f001 fba1 	bl	80071ac <USBD_LL_Start>

  return USBD_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b084      	sub	sp, #16
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	460b      	mov	r3, r1
 8005a94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005a96:	2302      	movs	r3, #2
 8005a98:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00c      	beq.n	8005abe <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	78fa      	ldrb	r2, [r7, #3]
 8005aae:	4611      	mov	r1, r2
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	4798      	blx	r3
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	78fa      	ldrb	r2, [r7, #3]
 8005ade:	4611      	mov	r1, r2
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	4798      	blx	r3

  return USBD_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b082      	sub	sp, #8
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
 8005af6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005afe:	6839      	ldr	r1, [r7, #0]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 fef7 	bl	80068f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005b14:	461a      	mov	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005b22:	f003 031f 	and.w	r3, r3, #31
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d00c      	beq.n	8005b44 <USBD_LL_SetupStage+0x56>
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d302      	bcc.n	8005b34 <USBD_LL_SetupStage+0x46>
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d010      	beq.n	8005b54 <USBD_LL_SetupStage+0x66>
 8005b32:	e017      	b.n	8005b64 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f9cd 	bl	8005edc <USBD_StdDevReq>
      break;
 8005b42:	e01a      	b.n	8005b7a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 fa2f 	bl	8005fb0 <USBD_StdItfReq>
      break;
 8005b52:	e012      	b.n	8005b7a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 fa6d 	bl	800603c <USBD_StdEPReq>
      break;
 8005b62:	e00a      	b.n	8005b7a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005b6a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	4619      	mov	r1, r3
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f001 fbc0 	bl	80072f8 <USBD_LL_StallEP>
      break;
 8005b78:	bf00      	nop
  }

  return USBD_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	607a      	str	r2, [r7, #4]
 8005b90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005b92:	7afb      	ldrb	r3, [r7, #11]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d14b      	bne.n	8005c30 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005b9e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ba6:	2b03      	cmp	r3, #3
 8005ba8:	d134      	bne.n	8005c14 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	68da      	ldr	r2, [r3, #12]
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d919      	bls.n	8005bea <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	68da      	ldr	r2, [r3, #12]
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	1ad2      	subs	r2, r2, r3
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d203      	bcs.n	8005bd8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	e002      	b.n	8005bde <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	461a      	mov	r2, r3
 8005be0:	6879      	ldr	r1, [r7, #4]
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f000 ff7a 	bl	8006adc <USBD_CtlContinueRx>
 8005be8:	e038      	b.n	8005c5c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00a      	beq.n	8005c0c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005bfc:	2b03      	cmp	r3, #3
 8005bfe:	d105      	bne.n	8005c0c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 ff77 	bl	8006b00 <USBD_CtlSendStatus>
 8005c12:	e023      	b.n	8005c5c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c1a:	2b05      	cmp	r3, #5
 8005c1c:	d11e      	bne.n	8005c5c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005c26:	2100      	movs	r1, #0
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f001 fb65 	bl	80072f8 <USBD_LL_StallEP>
 8005c2e:	e015      	b.n	8005c5c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00d      	beq.n	8005c58 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d108      	bne.n	8005c58 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	7afa      	ldrb	r2, [r7, #11]
 8005c50:	4611      	mov	r1, r2
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	4798      	blx	r3
 8005c56:	e001      	b.n	8005c5c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005c58:	2302      	movs	r3, #2
 8005c5a:	e000      	b.n	8005c5e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b086      	sub	sp, #24
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	60f8      	str	r0, [r7, #12]
 8005c6e:	460b      	mov	r3, r1
 8005c70:	607a      	str	r2, [r7, #4]
 8005c72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005c74:	7afb      	ldrb	r3, [r7, #11]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d17f      	bne.n	8005d7a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	3314      	adds	r3, #20
 8005c7e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d15c      	bne.n	8005d44 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d915      	bls.n	8005cc2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	68da      	ldr	r2, [r3, #12]
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	1ad2      	subs	r2, r2, r3
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	461a      	mov	r2, r3
 8005cac:	6879      	ldr	r1, [r7, #4]
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f000 fee4 	bl	8006a7c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	2100      	movs	r1, #0
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f001 fc1e 	bl	80074fc <USBD_LL_PrepareReceive>
 8005cc0:	e04e      	b.n	8005d60 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	6912      	ldr	r2, [r2, #16]
 8005cca:	fbb3 f1f2 	udiv	r1, r3, r2
 8005cce:	fb02 f201 	mul.w	r2, r2, r1
 8005cd2:	1a9b      	subs	r3, r3, r2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d11c      	bne.n	8005d12 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d316      	bcc.n	8005d12 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d20f      	bcs.n	8005d12 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f000 fec0 	bl	8006a7c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d04:	2300      	movs	r3, #0
 8005d06:	2200      	movs	r2, #0
 8005d08:	2100      	movs	r1, #0
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f001 fbf6 	bl	80074fc <USBD_LL_PrepareReceive>
 8005d10:	e026      	b.n	8005d60 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00a      	beq.n	8005d34 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d105      	bne.n	8005d34 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005d34:	2180      	movs	r1, #128	; 0x80
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f001 fade 	bl	80072f8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 fef2 	bl	8006b26 <USBD_CtlReceiveStatus>
 8005d42:	e00d      	b.n	8005d60 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d004      	beq.n	8005d58 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d103      	bne.n	8005d60 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005d58:	2180      	movs	r1, #128	; 0x80
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f001 facc 	bl	80072f8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d11d      	bne.n	8005da6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f7ff fe82 	bl	8005a74 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005d78:	e015      	b.n	8005da6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00d      	beq.n	8005da2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005d8c:	2b03      	cmp	r3, #3
 8005d8e:	d108      	bne.n	8005da2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	7afa      	ldrb	r2, [r7, #11]
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	4798      	blx	r3
 8005da0:	e001      	b.n	8005da6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005da2:	2302      	movs	r3, #2
 8005da4:	e000      	b.n	8005da8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3718      	adds	r7, #24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005db8:	2340      	movs	r3, #64	; 0x40
 8005dba:	2200      	movs	r2, #0
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f001 fa26 	bl	8007210 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2240      	movs	r2, #64	; 0x40
 8005dd0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005dd4:	2340      	movs	r3, #64	; 0x40
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	2180      	movs	r1, #128	; 0x80
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f001 fa18 	bl	8007210 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2240      	movs	r2, #64	; 0x40
 8005dea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d009      	beq.n	8005e28 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	6852      	ldr	r2, [r2, #4]
 8005e20:	b2d2      	uxtb	r2, r2
 8005e22:	4611      	mov	r1, r2
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	4798      	blx	r3
  }

  return USBD_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b083      	sub	sp, #12
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	78fa      	ldrb	r2, [r7, #3]
 8005e42:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b083      	sub	sp, #12
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2204      	movs	r2, #4
 8005e6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	d105      	bne.n	8005e9a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eb6:	2b03      	cmp	r3, #3
 8005eb8:	d10b      	bne.n	8005ed2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ec0:	69db      	ldr	r3, [r3, #28]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d005      	beq.n	8005ed2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ef2:	2b20      	cmp	r3, #32
 8005ef4:	d004      	beq.n	8005f00 <USBD_StdDevReq+0x24>
 8005ef6:	2b40      	cmp	r3, #64	; 0x40
 8005ef8:	d002      	beq.n	8005f00 <USBD_StdDevReq+0x24>
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d008      	beq.n	8005f10 <USBD_StdDevReq+0x34>
 8005efe:	e04c      	b.n	8005f9a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	6839      	ldr	r1, [r7, #0]
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	4798      	blx	r3
      break;
 8005f0e:	e049      	b.n	8005fa4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	785b      	ldrb	r3, [r3, #1]
 8005f14:	2b09      	cmp	r3, #9
 8005f16:	d83a      	bhi.n	8005f8e <USBD_StdDevReq+0xb2>
 8005f18:	a201      	add	r2, pc, #4	; (adr r2, 8005f20 <USBD_StdDevReq+0x44>)
 8005f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1e:	bf00      	nop
 8005f20:	08005f71 	.word	0x08005f71
 8005f24:	08005f85 	.word	0x08005f85
 8005f28:	08005f8f 	.word	0x08005f8f
 8005f2c:	08005f7b 	.word	0x08005f7b
 8005f30:	08005f8f 	.word	0x08005f8f
 8005f34:	08005f53 	.word	0x08005f53
 8005f38:	08005f49 	.word	0x08005f49
 8005f3c:	08005f8f 	.word	0x08005f8f
 8005f40:	08005f67 	.word	0x08005f67
 8005f44:	08005f5d 	.word	0x08005f5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005f48:	6839      	ldr	r1, [r7, #0]
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f9d4 	bl	80062f8 <USBD_GetDescriptor>
          break;
 8005f50:	e022      	b.n	8005f98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005f52:	6839      	ldr	r1, [r7, #0]
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 fb61 	bl	800661c <USBD_SetAddress>
          break;
 8005f5a:	e01d      	b.n	8005f98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005f5c:	6839      	ldr	r1, [r7, #0]
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fb9e 	bl	80066a0 <USBD_SetConfig>
          break;
 8005f64:	e018      	b.n	8005f98 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005f66:	6839      	ldr	r1, [r7, #0]
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fc27 	bl	80067bc <USBD_GetConfig>
          break;
 8005f6e:	e013      	b.n	8005f98 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005f70:	6839      	ldr	r1, [r7, #0]
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 fc56 	bl	8006824 <USBD_GetStatus>
          break;
 8005f78:	e00e      	b.n	8005f98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005f7a:	6839      	ldr	r1, [r7, #0]
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fc84 	bl	800688a <USBD_SetFeature>
          break;
 8005f82:	e009      	b.n	8005f98 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005f84:	6839      	ldr	r1, [r7, #0]
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fc93 	bl	80068b2 <USBD_ClrFeature>
          break;
 8005f8c:	e004      	b.n	8005f98 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005f8e:	6839      	ldr	r1, [r7, #0]
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fcec 	bl	800696e <USBD_CtlError>
          break;
 8005f96:	bf00      	nop
      }
      break;
 8005f98:	e004      	b.n	8005fa4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005f9a:	6839      	ldr	r1, [r7, #0]
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fce6 	bl	800696e <USBD_CtlError>
      break;
 8005fa2:	bf00      	nop
  }

  return ret;
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop

08005fb0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fc6:	2b20      	cmp	r3, #32
 8005fc8:	d003      	beq.n	8005fd2 <USBD_StdItfReq+0x22>
 8005fca:	2b40      	cmp	r3, #64	; 0x40
 8005fcc:	d001      	beq.n	8005fd2 <USBD_StdItfReq+0x22>
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d12a      	bne.n	8006028 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d81d      	bhi.n	800601a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	889b      	ldrh	r3, [r3, #4]
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d813      	bhi.n	8006010 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	6839      	ldr	r1, [r7, #0]
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	4798      	blx	r3
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	88db      	ldrh	r3, [r3, #6]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d110      	bne.n	8006024 <USBD_StdItfReq+0x74>
 8006002:	7bfb      	ldrb	r3, [r7, #15]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10d      	bne.n	8006024 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 fd79 	bl	8006b00 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800600e:	e009      	b.n	8006024 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006010:	6839      	ldr	r1, [r7, #0]
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fcab 	bl	800696e <USBD_CtlError>
          break;
 8006018:	e004      	b.n	8006024 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800601a:	6839      	ldr	r1, [r7, #0]
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fca6 	bl	800696e <USBD_CtlError>
          break;
 8006022:	e000      	b.n	8006026 <USBD_StdItfReq+0x76>
          break;
 8006024:	bf00      	nop
      }
      break;
 8006026:	e004      	b.n	8006032 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006028:	6839      	ldr	r1, [r7, #0]
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fc9f 	bl	800696e <USBD_CtlError>
      break;
 8006030:	bf00      	nop
  }

  return USBD_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006046:	2300      	movs	r3, #0
 8006048:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	889b      	ldrh	r3, [r3, #4]
 800604e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006058:	2b20      	cmp	r3, #32
 800605a:	d004      	beq.n	8006066 <USBD_StdEPReq+0x2a>
 800605c:	2b40      	cmp	r3, #64	; 0x40
 800605e:	d002      	beq.n	8006066 <USBD_StdEPReq+0x2a>
 8006060:	2b00      	cmp	r3, #0
 8006062:	d008      	beq.n	8006076 <USBD_StdEPReq+0x3a>
 8006064:	e13d      	b.n	80062e2 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	6839      	ldr	r1, [r7, #0]
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	4798      	blx	r3
      break;
 8006074:	e13a      	b.n	80062ec <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800607e:	2b20      	cmp	r3, #32
 8006080:	d10a      	bne.n	8006098 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	6839      	ldr	r1, [r7, #0]
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	4798      	blx	r3
 8006090:	4603      	mov	r3, r0
 8006092:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006094:	7bfb      	ldrb	r3, [r7, #15]
 8006096:	e12a      	b.n	80062ee <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	785b      	ldrb	r3, [r3, #1]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d03e      	beq.n	800611e <USBD_StdEPReq+0xe2>
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	d002      	beq.n	80060aa <USBD_StdEPReq+0x6e>
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d070      	beq.n	800618a <USBD_StdEPReq+0x14e>
 80060a8:	e115      	b.n	80062d6 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d002      	beq.n	80060ba <USBD_StdEPReq+0x7e>
 80060b4:	2b03      	cmp	r3, #3
 80060b6:	d015      	beq.n	80060e4 <USBD_StdEPReq+0xa8>
 80060b8:	e02b      	b.n	8006112 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060ba:	7bbb      	ldrb	r3, [r7, #14]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00c      	beq.n	80060da <USBD_StdEPReq+0x9e>
 80060c0:	7bbb      	ldrb	r3, [r7, #14]
 80060c2:	2b80      	cmp	r3, #128	; 0x80
 80060c4:	d009      	beq.n	80060da <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80060c6:	7bbb      	ldrb	r3, [r7, #14]
 80060c8:	4619      	mov	r1, r3
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f001 f914 	bl	80072f8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80060d0:	2180      	movs	r1, #128	; 0x80
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f001 f910 	bl	80072f8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80060d8:	e020      	b.n	800611c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80060da:	6839      	ldr	r1, [r7, #0]
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 fc46 	bl	800696e <USBD_CtlError>
              break;
 80060e2:	e01b      	b.n	800611c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	885b      	ldrh	r3, [r3, #2]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10e      	bne.n	800610a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80060ec:	7bbb      	ldrb	r3, [r7, #14]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00b      	beq.n	800610a <USBD_StdEPReq+0xce>
 80060f2:	7bbb      	ldrb	r3, [r7, #14]
 80060f4:	2b80      	cmp	r3, #128	; 0x80
 80060f6:	d008      	beq.n	800610a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	88db      	ldrh	r3, [r3, #6]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d104      	bne.n	800610a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006100:	7bbb      	ldrb	r3, [r7, #14]
 8006102:	4619      	mov	r1, r3
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f001 f8f7 	bl	80072f8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 fcf8 	bl	8006b00 <USBD_CtlSendStatus>

              break;
 8006110:	e004      	b.n	800611c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006112:	6839      	ldr	r1, [r7, #0]
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fc2a 	bl	800696e <USBD_CtlError>
              break;
 800611a:	bf00      	nop
          }
          break;
 800611c:	e0e0      	b.n	80062e0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006124:	2b02      	cmp	r3, #2
 8006126:	d002      	beq.n	800612e <USBD_StdEPReq+0xf2>
 8006128:	2b03      	cmp	r3, #3
 800612a:	d015      	beq.n	8006158 <USBD_StdEPReq+0x11c>
 800612c:	e026      	b.n	800617c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800612e:	7bbb      	ldrb	r3, [r7, #14]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00c      	beq.n	800614e <USBD_StdEPReq+0x112>
 8006134:	7bbb      	ldrb	r3, [r7, #14]
 8006136:	2b80      	cmp	r3, #128	; 0x80
 8006138:	d009      	beq.n	800614e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800613a:	7bbb      	ldrb	r3, [r7, #14]
 800613c:	4619      	mov	r1, r3
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f001 f8da 	bl	80072f8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006144:	2180      	movs	r1, #128	; 0x80
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f001 f8d6 	bl	80072f8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800614c:	e01c      	b.n	8006188 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800614e:	6839      	ldr	r1, [r7, #0]
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fc0c 	bl	800696e <USBD_CtlError>
              break;
 8006156:	e017      	b.n	8006188 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	885b      	ldrh	r3, [r3, #2]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d112      	bne.n	8006186 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006160:	7bbb      	ldrb	r3, [r7, #14]
 8006162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006166:	2b00      	cmp	r3, #0
 8006168:	d004      	beq.n	8006174 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800616a:	7bbb      	ldrb	r3, [r7, #14]
 800616c:	4619      	mov	r1, r3
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f001 f8f8 	bl	8007364 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fcc3 	bl	8006b00 <USBD_CtlSendStatus>
              }
              break;
 800617a:	e004      	b.n	8006186 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800617c:	6839      	ldr	r1, [r7, #0]
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fbf5 	bl	800696e <USBD_CtlError>
              break;
 8006184:	e000      	b.n	8006188 <USBD_StdEPReq+0x14c>
              break;
 8006186:	bf00      	nop
          }
          break;
 8006188:	e0aa      	b.n	80062e0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006190:	2b02      	cmp	r3, #2
 8006192:	d002      	beq.n	800619a <USBD_StdEPReq+0x15e>
 8006194:	2b03      	cmp	r3, #3
 8006196:	d032      	beq.n	80061fe <USBD_StdEPReq+0x1c2>
 8006198:	e097      	b.n	80062ca <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800619a:	7bbb      	ldrb	r3, [r7, #14]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d007      	beq.n	80061b0 <USBD_StdEPReq+0x174>
 80061a0:	7bbb      	ldrb	r3, [r7, #14]
 80061a2:	2b80      	cmp	r3, #128	; 0x80
 80061a4:	d004      	beq.n	80061b0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80061a6:	6839      	ldr	r1, [r7, #0]
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 fbe0 	bl	800696e <USBD_CtlError>
                break;
 80061ae:	e091      	b.n	80062d4 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	da0b      	bge.n	80061d0 <USBD_StdEPReq+0x194>
 80061b8:	7bbb      	ldrb	r3, [r7, #14]
 80061ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061be:	4613      	mov	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	3310      	adds	r3, #16
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	4413      	add	r3, r2
 80061cc:	3304      	adds	r3, #4
 80061ce:	e00b      	b.n	80061e8 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80061d0:	7bbb      	ldrb	r3, [r7, #14]
 80061d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061d6:	4613      	mov	r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4413      	add	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	4413      	add	r3, r2
 80061e6:	3304      	adds	r3, #4
 80061e8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2200      	movs	r2, #0
 80061ee:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2202      	movs	r2, #2
 80061f4:	4619      	mov	r1, r3
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fc24 	bl	8006a44 <USBD_CtlSendData>
              break;
 80061fc:	e06a      	b.n	80062d4 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80061fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006202:	2b00      	cmp	r3, #0
 8006204:	da11      	bge.n	800622a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006206:	7bbb      	ldrb	r3, [r7, #14]
 8006208:	f003 020f 	and.w	r2, r3, #15
 800620c:	6879      	ldr	r1, [r7, #4]
 800620e:	4613      	mov	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	440b      	add	r3, r1
 8006218:	3318      	adds	r3, #24
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d117      	bne.n	8006250 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006220:	6839      	ldr	r1, [r7, #0]
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fba3 	bl	800696e <USBD_CtlError>
                  break;
 8006228:	e054      	b.n	80062d4 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800622a:	7bbb      	ldrb	r3, [r7, #14]
 800622c:	f003 020f 	and.w	r2, r3, #15
 8006230:	6879      	ldr	r1, [r7, #4]
 8006232:	4613      	mov	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	440b      	add	r3, r1
 800623c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d104      	bne.n	8006250 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006246:	6839      	ldr	r1, [r7, #0]
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 fb90 	bl	800696e <USBD_CtlError>
                  break;
 800624e:	e041      	b.n	80062d4 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006250:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006254:	2b00      	cmp	r3, #0
 8006256:	da0b      	bge.n	8006270 <USBD_StdEPReq+0x234>
 8006258:	7bbb      	ldrb	r3, [r7, #14]
 800625a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800625e:	4613      	mov	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	3310      	adds	r3, #16
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	4413      	add	r3, r2
 800626c:	3304      	adds	r3, #4
 800626e:	e00b      	b.n	8006288 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006270:	7bbb      	ldrb	r3, [r7, #14]
 8006272:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006276:	4613      	mov	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4413      	add	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	4413      	add	r3, r2
 8006286:	3304      	adds	r3, #4
 8006288:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800628a:	7bbb      	ldrb	r3, [r7, #14]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <USBD_StdEPReq+0x25a>
 8006290:	7bbb      	ldrb	r3, [r7, #14]
 8006292:	2b80      	cmp	r3, #128	; 0x80
 8006294:	d103      	bne.n	800629e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	2200      	movs	r2, #0
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	e00e      	b.n	80062bc <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800629e:	7bbb      	ldrb	r3, [r7, #14]
 80062a0:	4619      	mov	r1, r3
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f001 f894 	bl	80073d0 <USBD_LL_IsStallEP>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2201      	movs	r2, #1
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	e002      	b.n	80062bc <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	2200      	movs	r2, #0
 80062ba:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2202      	movs	r2, #2
 80062c0:	4619      	mov	r1, r3
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fbbe 	bl	8006a44 <USBD_CtlSendData>
              break;
 80062c8:	e004      	b.n	80062d4 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80062ca:	6839      	ldr	r1, [r7, #0]
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 fb4e 	bl	800696e <USBD_CtlError>
              break;
 80062d2:	bf00      	nop
          }
          break;
 80062d4:	e004      	b.n	80062e0 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80062d6:	6839      	ldr	r1, [r7, #0]
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 fb48 	bl	800696e <USBD_CtlError>
          break;
 80062de:	bf00      	nop
      }
      break;
 80062e0:	e004      	b.n	80062ec <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80062e2:	6839      	ldr	r1, [r7, #0]
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fb42 	bl	800696e <USBD_CtlError>
      break;
 80062ea:	bf00      	nop
  }

  return ret;
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
	...

080062f8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006306:	2300      	movs	r3, #0
 8006308:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	885b      	ldrh	r3, [r3, #2]
 8006312:	0a1b      	lsrs	r3, r3, #8
 8006314:	b29b      	uxth	r3, r3
 8006316:	3b01      	subs	r3, #1
 8006318:	2b0e      	cmp	r3, #14
 800631a:	f200 8152 	bhi.w	80065c2 <USBD_GetDescriptor+0x2ca>
 800631e:	a201      	add	r2, pc, #4	; (adr r2, 8006324 <USBD_GetDescriptor+0x2c>)
 8006320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006324:	08006395 	.word	0x08006395
 8006328:	080063ad 	.word	0x080063ad
 800632c:	080063ed 	.word	0x080063ed
 8006330:	080065c3 	.word	0x080065c3
 8006334:	080065c3 	.word	0x080065c3
 8006338:	08006563 	.word	0x08006563
 800633c:	0800658f 	.word	0x0800658f
 8006340:	080065c3 	.word	0x080065c3
 8006344:	080065c3 	.word	0x080065c3
 8006348:	080065c3 	.word	0x080065c3
 800634c:	080065c3 	.word	0x080065c3
 8006350:	080065c3 	.word	0x080065c3
 8006354:	080065c3 	.word	0x080065c3
 8006358:	080065c3 	.word	0x080065c3
 800635c:	08006361 	.word	0x08006361
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006366:	69db      	ldr	r3, [r3, #28]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00b      	beq.n	8006384 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	7c12      	ldrb	r2, [r2, #16]
 8006378:	f107 0108 	add.w	r1, r7, #8
 800637c:	4610      	mov	r0, r2
 800637e:	4798      	blx	r3
 8006380:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006382:	e126      	b.n	80065d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006384:	6839      	ldr	r1, [r7, #0]
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 faf1 	bl	800696e <USBD_CtlError>
        err++;
 800638c:	7afb      	ldrb	r3, [r7, #11]
 800638e:	3301      	adds	r3, #1
 8006390:	72fb      	strb	r3, [r7, #11]
      break;
 8006392:	e11e      	b.n	80065d2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	7c12      	ldrb	r2, [r2, #16]
 80063a0:	f107 0108 	add.w	r1, r7, #8
 80063a4:	4610      	mov	r0, r2
 80063a6:	4798      	blx	r3
 80063a8:	60f8      	str	r0, [r7, #12]
      break;
 80063aa:	e112      	b.n	80065d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	7c1b      	ldrb	r3, [r3, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10d      	bne.n	80063d0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063bc:	f107 0208 	add.w	r2, r7, #8
 80063c0:	4610      	mov	r0, r2
 80063c2:	4798      	blx	r3
 80063c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	3301      	adds	r3, #1
 80063ca:	2202      	movs	r2, #2
 80063cc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80063ce:	e100      	b.n	80065d2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d8:	f107 0208 	add.w	r2, r7, #8
 80063dc:	4610      	mov	r0, r2
 80063de:	4798      	blx	r3
 80063e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	3301      	adds	r3, #1
 80063e6:	2202      	movs	r2, #2
 80063e8:	701a      	strb	r2, [r3, #0]
      break;
 80063ea:	e0f2      	b.n	80065d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	885b      	ldrh	r3, [r3, #2]
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b05      	cmp	r3, #5
 80063f4:	f200 80ac 	bhi.w	8006550 <USBD_GetDescriptor+0x258>
 80063f8:	a201      	add	r2, pc, #4	; (adr r2, 8006400 <USBD_GetDescriptor+0x108>)
 80063fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fe:	bf00      	nop
 8006400:	08006419 	.word	0x08006419
 8006404:	0800644d 	.word	0x0800644d
 8006408:	08006481 	.word	0x08006481
 800640c:	080064b5 	.word	0x080064b5
 8006410:	080064e9 	.word	0x080064e9
 8006414:	0800651d 	.word	0x0800651d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00b      	beq.n	800643c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	7c12      	ldrb	r2, [r2, #16]
 8006430:	f107 0108 	add.w	r1, r7, #8
 8006434:	4610      	mov	r0, r2
 8006436:	4798      	blx	r3
 8006438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800643a:	e091      	b.n	8006560 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800643c:	6839      	ldr	r1, [r7, #0]
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fa95 	bl	800696e <USBD_CtlError>
            err++;
 8006444:	7afb      	ldrb	r3, [r7, #11]
 8006446:	3301      	adds	r3, #1
 8006448:	72fb      	strb	r3, [r7, #11]
          break;
 800644a:	e089      	b.n	8006560 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00b      	beq.n	8006470 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	7c12      	ldrb	r2, [r2, #16]
 8006464:	f107 0108 	add.w	r1, r7, #8
 8006468:	4610      	mov	r0, r2
 800646a:	4798      	blx	r3
 800646c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800646e:	e077      	b.n	8006560 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006470:	6839      	ldr	r1, [r7, #0]
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fa7b 	bl	800696e <USBD_CtlError>
            err++;
 8006478:	7afb      	ldrb	r3, [r7, #11]
 800647a:	3301      	adds	r3, #1
 800647c:	72fb      	strb	r3, [r7, #11]
          break;
 800647e:	e06f      	b.n	8006560 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00b      	beq.n	80064a4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	7c12      	ldrb	r2, [r2, #16]
 8006498:	f107 0108 	add.w	r1, r7, #8
 800649c:	4610      	mov	r0, r2
 800649e:	4798      	blx	r3
 80064a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064a2:	e05d      	b.n	8006560 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80064a4:	6839      	ldr	r1, [r7, #0]
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fa61 	bl	800696e <USBD_CtlError>
            err++;
 80064ac:	7afb      	ldrb	r3, [r7, #11]
 80064ae:	3301      	adds	r3, #1
 80064b0:	72fb      	strb	r3, [r7, #11]
          break;
 80064b2:	e055      	b.n	8006560 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00b      	beq.n	80064d8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	7c12      	ldrb	r2, [r2, #16]
 80064cc:	f107 0108 	add.w	r1, r7, #8
 80064d0:	4610      	mov	r0, r2
 80064d2:	4798      	blx	r3
 80064d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064d6:	e043      	b.n	8006560 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80064d8:	6839      	ldr	r1, [r7, #0]
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fa47 	bl	800696e <USBD_CtlError>
            err++;
 80064e0:	7afb      	ldrb	r3, [r7, #11]
 80064e2:	3301      	adds	r3, #1
 80064e4:	72fb      	strb	r3, [r7, #11]
          break;
 80064e6:	e03b      	b.n	8006560 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064ee:	695b      	ldr	r3, [r3, #20]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00b      	beq.n	800650c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	7c12      	ldrb	r2, [r2, #16]
 8006500:	f107 0108 	add.w	r1, r7, #8
 8006504:	4610      	mov	r0, r2
 8006506:	4798      	blx	r3
 8006508:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800650a:	e029      	b.n	8006560 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800650c:	6839      	ldr	r1, [r7, #0]
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fa2d 	bl	800696e <USBD_CtlError>
            err++;
 8006514:	7afb      	ldrb	r3, [r7, #11]
 8006516:	3301      	adds	r3, #1
 8006518:	72fb      	strb	r3, [r7, #11]
          break;
 800651a:	e021      	b.n	8006560 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00b      	beq.n	8006540 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	7c12      	ldrb	r2, [r2, #16]
 8006534:	f107 0108 	add.w	r1, r7, #8
 8006538:	4610      	mov	r0, r2
 800653a:	4798      	blx	r3
 800653c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800653e:	e00f      	b.n	8006560 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fa13 	bl	800696e <USBD_CtlError>
            err++;
 8006548:	7afb      	ldrb	r3, [r7, #11]
 800654a:	3301      	adds	r3, #1
 800654c:	72fb      	strb	r3, [r7, #11]
          break;
 800654e:	e007      	b.n	8006560 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006550:	6839      	ldr	r1, [r7, #0]
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fa0b 	bl	800696e <USBD_CtlError>
          err++;
 8006558:	7afb      	ldrb	r3, [r7, #11]
 800655a:	3301      	adds	r3, #1
 800655c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800655e:	e038      	b.n	80065d2 <USBD_GetDescriptor+0x2da>
 8006560:	e037      	b.n	80065d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	7c1b      	ldrb	r3, [r3, #16]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d109      	bne.n	800657e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006572:	f107 0208 	add.w	r2, r7, #8
 8006576:	4610      	mov	r0, r2
 8006578:	4798      	blx	r3
 800657a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800657c:	e029      	b.n	80065d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 f9f4 	bl	800696e <USBD_CtlError>
        err++;
 8006586:	7afb      	ldrb	r3, [r7, #11]
 8006588:	3301      	adds	r3, #1
 800658a:	72fb      	strb	r3, [r7, #11]
      break;
 800658c:	e021      	b.n	80065d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	7c1b      	ldrb	r3, [r3, #16]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10d      	bne.n	80065b2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800659c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659e:	f107 0208 	add.w	r2, r7, #8
 80065a2:	4610      	mov	r0, r2
 80065a4:	4798      	blx	r3
 80065a6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3301      	adds	r3, #1
 80065ac:	2207      	movs	r2, #7
 80065ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065b0:	e00f      	b.n	80065d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 f9da 	bl	800696e <USBD_CtlError>
        err++;
 80065ba:	7afb      	ldrb	r3, [r7, #11]
 80065bc:	3301      	adds	r3, #1
 80065be:	72fb      	strb	r3, [r7, #11]
      break;
 80065c0:	e007      	b.n	80065d2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80065c2:	6839      	ldr	r1, [r7, #0]
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f9d2 	bl	800696e <USBD_CtlError>
      err++;
 80065ca:	7afb      	ldrb	r3, [r7, #11]
 80065cc:	3301      	adds	r3, #1
 80065ce:	72fb      	strb	r3, [r7, #11]
      break;
 80065d0:	bf00      	nop
  }

  if (err != 0U)
 80065d2:	7afb      	ldrb	r3, [r7, #11]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d11c      	bne.n	8006612 <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80065d8:	893b      	ldrh	r3, [r7, #8]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d011      	beq.n	8006602 <USBD_GetDescriptor+0x30a>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	88db      	ldrh	r3, [r3, #6]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00d      	beq.n	8006602 <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	88da      	ldrh	r2, [r3, #6]
 80065ea:	893b      	ldrh	r3, [r7, #8]
 80065ec:	4293      	cmp	r3, r2
 80065ee:	bf28      	it	cs
 80065f0:	4613      	movcs	r3, r2
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80065f6:	893b      	ldrh	r3, [r7, #8]
 80065f8:	461a      	mov	r2, r3
 80065fa:	68f9      	ldr	r1, [r7, #12]
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fa21 	bl	8006a44 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	88db      	ldrh	r3, [r3, #6]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d104      	bne.n	8006614 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fa78 	bl	8006b00 <USBD_CtlSendStatus>
 8006610:	e000      	b.n	8006614 <USBD_GetDescriptor+0x31c>
    return;
 8006612:	bf00      	nop
    }
  }
}
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop

0800661c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	889b      	ldrh	r3, [r3, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d130      	bne.n	8006690 <USBD_SetAddress+0x74>
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	88db      	ldrh	r3, [r3, #6]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d12c      	bne.n	8006690 <USBD_SetAddress+0x74>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	885b      	ldrh	r3, [r3, #2]
 800663a:	2b7f      	cmp	r3, #127	; 0x7f
 800663c:	d828      	bhi.n	8006690 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	885b      	ldrh	r3, [r3, #2]
 8006642:	b2db      	uxtb	r3, r3
 8006644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006648:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006650:	2b03      	cmp	r3, #3
 8006652:	d104      	bne.n	800665e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006654:	6839      	ldr	r1, [r7, #0]
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f989 	bl	800696e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800665c:	e01c      	b.n	8006698 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	7bfa      	ldrb	r2, [r7, #15]
 8006662:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006666:	7bfb      	ldrb	r3, [r7, #15]
 8006668:	4619      	mov	r1, r3
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 fed6 	bl	800741c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fa45 	bl	8006b00 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006676:	7bfb      	ldrb	r3, [r7, #15]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d004      	beq.n	8006686 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2202      	movs	r2, #2
 8006680:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006684:	e008      	b.n	8006698 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800668e:	e003      	b.n	8006698 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006690:	6839      	ldr	r1, [r7, #0]
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f96b 	bl	800696e <USBD_CtlError>
  }
}
 8006698:	bf00      	nop
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	885b      	ldrh	r3, [r3, #2]
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	4b41      	ldr	r3, [pc, #260]	; (80067b8 <USBD_SetConfig+0x118>)
 80066b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80066b4:	4b40      	ldr	r3, [pc, #256]	; (80067b8 <USBD_SetConfig+0x118>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d904      	bls.n	80066c6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80066bc:	6839      	ldr	r1, [r7, #0]
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f955 	bl	800696e <USBD_CtlError>
 80066c4:	e075      	b.n	80067b2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d002      	beq.n	80066d6 <USBD_SetConfig+0x36>
 80066d0:	2b03      	cmp	r3, #3
 80066d2:	d023      	beq.n	800671c <USBD_SetConfig+0x7c>
 80066d4:	e062      	b.n	800679c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80066d6:	4b38      	ldr	r3, [pc, #224]	; (80067b8 <USBD_SetConfig+0x118>)
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d01a      	beq.n	8006714 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80066de:	4b36      	ldr	r3, [pc, #216]	; (80067b8 <USBD_SetConfig+0x118>)
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	461a      	mov	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2203      	movs	r2, #3
 80066ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80066f0:	4b31      	ldr	r3, [pc, #196]	; (80067b8 <USBD_SetConfig+0x118>)
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	4619      	mov	r1, r3
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7ff f9c7 	bl	8005a8a <USBD_SetClassConfig>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d104      	bne.n	800670c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006702:	6839      	ldr	r1, [r7, #0]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 f932 	bl	800696e <USBD_CtlError>
            return;
 800670a:	e052      	b.n	80067b2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 f9f7 	bl	8006b00 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006712:	e04e      	b.n	80067b2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f9f3 	bl	8006b00 <USBD_CtlSendStatus>
        break;
 800671a:	e04a      	b.n	80067b2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800671c:	4b26      	ldr	r3, [pc, #152]	; (80067b8 <USBD_SetConfig+0x118>)
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d112      	bne.n	800674a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2202      	movs	r2, #2
 8006728:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800672c:	4b22      	ldr	r3, [pc, #136]	; (80067b8 <USBD_SetConfig+0x118>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	461a      	mov	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006736:	4b20      	ldr	r3, [pc, #128]	; (80067b8 <USBD_SetConfig+0x118>)
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	4619      	mov	r1, r3
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f7ff f9c3 	bl	8005ac8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 f9dc 	bl	8006b00 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006748:	e033      	b.n	80067b2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800674a:	4b1b      	ldr	r3, [pc, #108]	; (80067b8 <USBD_SetConfig+0x118>)
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	461a      	mov	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	429a      	cmp	r2, r3
 8006756:	d01d      	beq.n	8006794 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	b2db      	uxtb	r3, r3
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7ff f9b1 	bl	8005ac8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006766:	4b14      	ldr	r3, [pc, #80]	; (80067b8 <USBD_SetConfig+0x118>)
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	461a      	mov	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006770:	4b11      	ldr	r3, [pc, #68]	; (80067b8 <USBD_SetConfig+0x118>)
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	4619      	mov	r1, r3
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7ff f987 	bl	8005a8a <USBD_SetClassConfig>
 800677c:	4603      	mov	r3, r0
 800677e:	2b02      	cmp	r3, #2
 8006780:	d104      	bne.n	800678c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f8f2 	bl	800696e <USBD_CtlError>
            return;
 800678a:	e012      	b.n	80067b2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f9b7 	bl	8006b00 <USBD_CtlSendStatus>
        break;
 8006792:	e00e      	b.n	80067b2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 f9b3 	bl	8006b00 <USBD_CtlSendStatus>
        break;
 800679a:	e00a      	b.n	80067b2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800679c:	6839      	ldr	r1, [r7, #0]
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f8e5 	bl	800696e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80067a4:	4b04      	ldr	r3, [pc, #16]	; (80067b8 <USBD_SetConfig+0x118>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	4619      	mov	r1, r3
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7ff f98c 	bl	8005ac8 <USBD_ClrClassConfig>
        break;
 80067b0:	bf00      	nop
    }
  }
}
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	200002fc 	.word	0x200002fc

080067bc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	88db      	ldrh	r3, [r3, #6]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d004      	beq.n	80067d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 f8cc 	bl	800696e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80067d6:	e021      	b.n	800681c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067de:	2b01      	cmp	r3, #1
 80067e0:	db17      	blt.n	8006812 <USBD_GetConfig+0x56>
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	dd02      	ble.n	80067ec <USBD_GetConfig+0x30>
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	d00b      	beq.n	8006802 <USBD_GetConfig+0x46>
 80067ea:	e012      	b.n	8006812 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	3308      	adds	r3, #8
 80067f6:	2201      	movs	r2, #1
 80067f8:	4619      	mov	r1, r3
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f922 	bl	8006a44 <USBD_CtlSendData>
        break;
 8006800:	e00c      	b.n	800681c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	3304      	adds	r3, #4
 8006806:	2201      	movs	r2, #1
 8006808:	4619      	mov	r1, r3
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f91a 	bl	8006a44 <USBD_CtlSendData>
        break;
 8006810:	e004      	b.n	800681c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006812:	6839      	ldr	r1, [r7, #0]
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f8aa 	bl	800696e <USBD_CtlError>
        break;
 800681a:	bf00      	nop
}
 800681c:	bf00      	nop
 800681e:	3708      	adds	r7, #8
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006834:	3b01      	subs	r3, #1
 8006836:	2b02      	cmp	r3, #2
 8006838:	d81e      	bhi.n	8006878 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	88db      	ldrh	r3, [r3, #6]
 800683e:	2b02      	cmp	r3, #2
 8006840:	d004      	beq.n	800684c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006842:	6839      	ldr	r1, [r7, #0]
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f892 	bl	800696e <USBD_CtlError>
        break;
 800684a:	e01a      	b.n	8006882 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006858:	2b00      	cmp	r3, #0
 800685a:	d005      	beq.n	8006868 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	f043 0202 	orr.w	r2, r3, #2
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	330c      	adds	r3, #12
 800686c:	2202      	movs	r2, #2
 800686e:	4619      	mov	r1, r3
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 f8e7 	bl	8006a44 <USBD_CtlSendData>
      break;
 8006876:	e004      	b.n	8006882 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006878:	6839      	ldr	r1, [r7, #0]
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f877 	bl	800696e <USBD_CtlError>
      break;
 8006880:	bf00      	nop
  }
}
 8006882:	bf00      	nop
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b082      	sub	sp, #8
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	885b      	ldrh	r3, [r3, #2]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d106      	bne.n	80068aa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f92b 	bl	8006b00 <USBD_CtlSendStatus>
  }
}
 80068aa:	bf00      	nop
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b082      	sub	sp, #8
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068c2:	3b01      	subs	r3, #1
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d80b      	bhi.n	80068e0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	885b      	ldrh	r3, [r3, #2]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d10c      	bne.n	80068ea <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f911 	bl	8006b00 <USBD_CtlSendStatus>
      }
      break;
 80068de:	e004      	b.n	80068ea <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80068e0:	6839      	ldr	r1, [r7, #0]
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f843 	bl	800696e <USBD_CtlError>
      break;
 80068e8:	e000      	b.n	80068ec <USBD_ClrFeature+0x3a>
      break;
 80068ea:	bf00      	nop
  }
}
 80068ec:	bf00      	nop
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	781a      	ldrb	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	785a      	ldrb	r2, [r3, #1]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	3302      	adds	r3, #2
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	b29a      	uxth	r2, r3
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	3303      	adds	r3, #3
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	b29b      	uxth	r3, r3
 800691e:	021b      	lsls	r3, r3, #8
 8006920:	b29b      	uxth	r3, r3
 8006922:	4413      	add	r3, r2
 8006924:	b29a      	uxth	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	3304      	adds	r3, #4
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	b29a      	uxth	r2, r3
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	3305      	adds	r3, #5
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	b29b      	uxth	r3, r3
 800693a:	021b      	lsls	r3, r3, #8
 800693c:	b29b      	uxth	r3, r3
 800693e:	4413      	add	r3, r2
 8006940:	b29a      	uxth	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	3306      	adds	r3, #6
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	b29a      	uxth	r2, r3
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	3307      	adds	r3, #7
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	b29b      	uxth	r3, r3
 8006956:	021b      	lsls	r3, r3, #8
 8006958:	b29b      	uxth	r3, r3
 800695a:	4413      	add	r3, r2
 800695c:	b29a      	uxth	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	80da      	strh	r2, [r3, #6]

}
 8006962:	bf00      	nop
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b082      	sub	sp, #8
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006978:	2180      	movs	r1, #128	; 0x80
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fcbc 	bl	80072f8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006980:	2100      	movs	r1, #0
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fcb8 	bl	80072f8 <USBD_LL_StallEP>
}
 8006988:	bf00      	nop
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800699c:	2300      	movs	r3, #0
 800699e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d032      	beq.n	8006a0c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 f834 	bl	8006a14 <USBD_GetLen>
 80069ac:	4603      	mov	r3, r0
 80069ae:	3301      	adds	r3, #1
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	005b      	lsls	r3, r3, #1
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80069ba:	7dfb      	ldrb	r3, [r7, #23]
 80069bc:	1c5a      	adds	r2, r3, #1
 80069be:	75fa      	strb	r2, [r7, #23]
 80069c0:	461a      	mov	r2, r3
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	4413      	add	r3, r2
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	7812      	ldrb	r2, [r2, #0]
 80069ca:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80069cc:	7dfb      	ldrb	r3, [r7, #23]
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	75fa      	strb	r2, [r7, #23]
 80069d2:	461a      	mov	r2, r3
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	4413      	add	r3, r2
 80069d8:	2203      	movs	r2, #3
 80069da:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80069dc:	e012      	b.n	8006a04 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	1c5a      	adds	r2, r3, #1
 80069e2:	60fa      	str	r2, [r7, #12]
 80069e4:	7dfa      	ldrb	r2, [r7, #23]
 80069e6:	1c51      	adds	r1, r2, #1
 80069e8:	75f9      	strb	r1, [r7, #23]
 80069ea:	4611      	mov	r1, r2
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	440a      	add	r2, r1
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80069f4:	7dfb      	ldrb	r3, [r7, #23]
 80069f6:	1c5a      	adds	r2, r3, #1
 80069f8:	75fa      	strb	r2, [r7, #23]
 80069fa:	461a      	mov	r2, r3
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	4413      	add	r3, r2
 8006a00:	2200      	movs	r2, #0
 8006a02:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1e8      	bne.n	80069de <USBD_GetString+0x4e>
    }
  }
}
 8006a0c:	bf00      	nop
 8006a0e:	3718      	adds	r7, #24
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006a20:	e005      	b.n	8006a2e <USBD_GetLen+0x1a>
  {
    len++;
 8006a22:	7bfb      	ldrb	r3, [r7, #15]
 8006a24:	3301      	adds	r3, #1
 8006a26:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1f5      	bne.n	8006a22 <USBD_GetLen+0xe>
  }

  return len;
 8006a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3714      	adds	r7, #20
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2202      	movs	r2, #2
 8006a56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006a5a:	88fa      	ldrh	r2, [r7, #6]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006a60:	88fa      	ldrh	r2, [r7, #6]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a66:	88fb      	ldrh	r3, [r7, #6]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 fd0b 	bl	8007488 <USBD_LL_Transmit>

  return USBD_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	4613      	mov	r3, r2
 8006a88:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a8a:	88fb      	ldrh	r3, [r7, #6]
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	2100      	movs	r1, #0
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f000 fcf9 	bl	8007488 <USBD_LL_Transmit>

  return USBD_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2203      	movs	r2, #3
 8006ab2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006ab6:	88fa      	ldrh	r2, [r7, #6]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006abe:	88fa      	ldrh	r2, [r7, #6]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ac6:	88fb      	ldrh	r3, [r7, #6]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	2100      	movs	r1, #0
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 fd15 	bl	80074fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006aea:	88fb      	ldrh	r3, [r7, #6]
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	2100      	movs	r1, #0
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f000 fd03 	bl	80074fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2204      	movs	r2, #4
 8006b0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006b10:	2300      	movs	r3, #0
 8006b12:	2200      	movs	r2, #0
 8006b14:	2100      	movs	r1, #0
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fcb6 	bl	8007488 <USBD_LL_Transmit>

  return USBD_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b082      	sub	sp, #8
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2205      	movs	r2, #5
 8006b32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b36:	2300      	movs	r3, #0
 8006b38:	2200      	movs	r2, #0
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fcdd 	bl	80074fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006b50:	2200      	movs	r2, #0
 8006b52:	4912      	ldr	r1, [pc, #72]	; (8006b9c <MX_USB_DEVICE_Init+0x50>)
 8006b54:	4812      	ldr	r0, [pc, #72]	; (8006ba0 <MX_USB_DEVICE_Init+0x54>)
 8006b56:	f7fe ff3c 	bl	80059d2 <USBD_Init>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006b60:	f7f9 feec 	bl	800093c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006b64:	490f      	ldr	r1, [pc, #60]	; (8006ba4 <MX_USB_DEVICE_Init+0x58>)
 8006b66:	480e      	ldr	r0, [pc, #56]	; (8006ba0 <MX_USB_DEVICE_Init+0x54>)
 8006b68:	f7fe ff5e 	bl	8005a28 <USBD_RegisterClass>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006b72:	f7f9 fee3 	bl	800093c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006b76:	490c      	ldr	r1, [pc, #48]	; (8006ba8 <MX_USB_DEVICE_Init+0x5c>)
 8006b78:	4809      	ldr	r0, [pc, #36]	; (8006ba0 <MX_USB_DEVICE_Init+0x54>)
 8006b7a:	f7fe febb 	bl	80058f4 <USBD_CDC_RegisterInterface>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006b84:	f7f9 feda 	bl	800093c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006b88:	4805      	ldr	r0, [pc, #20]	; (8006ba0 <MX_USB_DEVICE_Init+0x54>)
 8006b8a:	f7fe ff67 	bl	8005a5c <USBD_Start>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d001      	beq.n	8006b98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006b94:	f7f9 fed2 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006b98:	bf00      	nop
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	2000012c 	.word	0x2000012c
 8006ba0:	20000654 	.word	0x20000654
 8006ba4:	20000018 	.word	0x20000018
 8006ba8:	2000011c 	.word	0x2000011c

08006bac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	4905      	ldr	r1, [pc, #20]	; (8006bc8 <CDC_Init_FS+0x1c>)
 8006bb4:	4805      	ldr	r0, [pc, #20]	; (8006bcc <CDC_Init_FS+0x20>)
 8006bb6:	f7fe feb4 	bl	8005922 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006bba:	4905      	ldr	r1, [pc, #20]	; (8006bd0 <CDC_Init_FS+0x24>)
 8006bbc:	4803      	ldr	r0, [pc, #12]	; (8006bcc <CDC_Init_FS+0x20>)
 8006bbe:	f7fe feca 	bl	8005956 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006bc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	20000d00 	.word	0x20000d00
 8006bcc:	20000654 	.word	0x20000654
 8006bd0:	20000918 	.word	0x20000918

08006bd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006bd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	4603      	mov	r3, r0
 8006bec:	6039      	str	r1, [r7, #0]
 8006bee:	71fb      	strb	r3, [r7, #7]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006bf4:	79fb      	ldrb	r3, [r7, #7]
 8006bf6:	2b23      	cmp	r3, #35	; 0x23
 8006bf8:	d84a      	bhi.n	8006c90 <CDC_Control_FS+0xac>
 8006bfa:	a201      	add	r2, pc, #4	; (adr r2, 8006c00 <CDC_Control_FS+0x1c>)
 8006bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c00:	08006c91 	.word	0x08006c91
 8006c04:	08006c91 	.word	0x08006c91
 8006c08:	08006c91 	.word	0x08006c91
 8006c0c:	08006c91 	.word	0x08006c91
 8006c10:	08006c91 	.word	0x08006c91
 8006c14:	08006c91 	.word	0x08006c91
 8006c18:	08006c91 	.word	0x08006c91
 8006c1c:	08006c91 	.word	0x08006c91
 8006c20:	08006c91 	.word	0x08006c91
 8006c24:	08006c91 	.word	0x08006c91
 8006c28:	08006c91 	.word	0x08006c91
 8006c2c:	08006c91 	.word	0x08006c91
 8006c30:	08006c91 	.word	0x08006c91
 8006c34:	08006c91 	.word	0x08006c91
 8006c38:	08006c91 	.word	0x08006c91
 8006c3c:	08006c91 	.word	0x08006c91
 8006c40:	08006c91 	.word	0x08006c91
 8006c44:	08006c91 	.word	0x08006c91
 8006c48:	08006c91 	.word	0x08006c91
 8006c4c:	08006c91 	.word	0x08006c91
 8006c50:	08006c91 	.word	0x08006c91
 8006c54:	08006c91 	.word	0x08006c91
 8006c58:	08006c91 	.word	0x08006c91
 8006c5c:	08006c91 	.word	0x08006c91
 8006c60:	08006c91 	.word	0x08006c91
 8006c64:	08006c91 	.word	0x08006c91
 8006c68:	08006c91 	.word	0x08006c91
 8006c6c:	08006c91 	.word	0x08006c91
 8006c70:	08006c91 	.word	0x08006c91
 8006c74:	08006c91 	.word	0x08006c91
 8006c78:	08006c91 	.word	0x08006c91
 8006c7c:	08006c91 	.word	0x08006c91
 8006c80:	08006c91 	.word	0x08006c91
 8006c84:	08006c91 	.word	0x08006c91
 8006c88:	08006c91 	.word	0x08006c91
 8006c8c:	08006c91 	.word	0x08006c91
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006c90:	bf00      	nop
  }

  return (USBD_OK);
 8006c92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006caa:	6879      	ldr	r1, [r7, #4]
 8006cac:	4805      	ldr	r0, [pc, #20]	; (8006cc4 <CDC_Receive_FS+0x24>)
 8006cae:	f7fe fe52 	bl	8005956 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006cb2:	4804      	ldr	r0, [pc, #16]	; (8006cc4 <CDC_Receive_FS+0x24>)
 8006cb4:	f7fe fe63 	bl	800597e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006cb8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	20000654 	.word	0x20000654

08006cc8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	4603      	mov	r3, r0
 8006cd0:	6039      	str	r1, [r7, #0]
 8006cd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	2212      	movs	r2, #18
 8006cd8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006cda:	4b03      	ldr	r3, [pc, #12]	; (8006ce8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr
 8006ce8:	2000014c 	.word	0x2000014c

08006cec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	6039      	str	r1, [r7, #0]
 8006cf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2204      	movs	r2, #4
 8006cfc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006cfe:	4b03      	ldr	r3, [pc, #12]	; (8006d0c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr
 8006d0c:	2000016c 	.word	0x2000016c

08006d10 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	4603      	mov	r3, r0
 8006d18:	6039      	str	r1, [r7, #0]
 8006d1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d1c:	79fb      	ldrb	r3, [r7, #7]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d105      	bne.n	8006d2e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	4907      	ldr	r1, [pc, #28]	; (8006d44 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d26:	4808      	ldr	r0, [pc, #32]	; (8006d48 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d28:	f7ff fe32 	bl	8006990 <USBD_GetString>
 8006d2c:	e004      	b.n	8006d38 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	4904      	ldr	r1, [pc, #16]	; (8006d44 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d32:	4805      	ldr	r0, [pc, #20]	; (8006d48 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d34:	f7ff fe2c 	bl	8006990 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d38:	4b02      	ldr	r3, [pc, #8]	; (8006d44 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3708      	adds	r7, #8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	200010e8 	.word	0x200010e8
 8006d48:	080076b0 	.word	0x080076b0

08006d4c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	4603      	mov	r3, r0
 8006d54:	6039      	str	r1, [r7, #0]
 8006d56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	4904      	ldr	r1, [pc, #16]	; (8006d6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006d5c:	4804      	ldr	r0, [pc, #16]	; (8006d70 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006d5e:	f7ff fe17 	bl	8006990 <USBD_GetString>
  return USBD_StrDesc;
 8006d62:	4b02      	ldr	r3, [pc, #8]	; (8006d6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	200010e8 	.word	0x200010e8
 8006d70:	080076c8 	.word	0x080076c8

08006d74 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	6039      	str	r1, [r7, #0]
 8006d7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	221a      	movs	r2, #26
 8006d84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006d86:	f000 f855 	bl	8006e34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006d8a:	4b02      	ldr	r3, [pc, #8]	; (8006d94 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	20000170 	.word	0x20000170

08006d98 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	4603      	mov	r3, r0
 8006da0:	6039      	str	r1, [r7, #0]
 8006da2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006da4:	79fb      	ldrb	r3, [r7, #7]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d105      	bne.n	8006db6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	4907      	ldr	r1, [pc, #28]	; (8006dcc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006dae:	4808      	ldr	r0, [pc, #32]	; (8006dd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006db0:	f7ff fdee 	bl	8006990 <USBD_GetString>
 8006db4:	e004      	b.n	8006dc0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	4904      	ldr	r1, [pc, #16]	; (8006dcc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006dba:	4805      	ldr	r0, [pc, #20]	; (8006dd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006dbc:	f7ff fde8 	bl	8006990 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006dc0:	4b02      	ldr	r3, [pc, #8]	; (8006dcc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	200010e8 	.word	0x200010e8
 8006dd0:	080076dc 	.word	0x080076dc

08006dd4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	4603      	mov	r3, r0
 8006ddc:	6039      	str	r1, [r7, #0]
 8006dde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006de0:	79fb      	ldrb	r3, [r7, #7]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d105      	bne.n	8006df2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	4907      	ldr	r1, [pc, #28]	; (8006e08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006dea:	4808      	ldr	r0, [pc, #32]	; (8006e0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006dec:	f7ff fdd0 	bl	8006990 <USBD_GetString>
 8006df0:	e004      	b.n	8006dfc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	4904      	ldr	r1, [pc, #16]	; (8006e08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006df6:	4805      	ldr	r0, [pc, #20]	; (8006e0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006df8:	f7ff fdca 	bl	8006990 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006dfc:	4b02      	ldr	r3, [pc, #8]	; (8006e08 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3708      	adds	r7, #8
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	200010e8 	.word	0x200010e8
 8006e0c:	080076e8 	.word	0x080076e8

08006e10 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	4603      	mov	r3, r0
 8006e18:	6039      	str	r1, [r7, #0]
 8006e1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	220c      	movs	r2, #12
 8006e20:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8006e22:	4b03      	ldr	r3, [pc, #12]	; (8006e30 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr
 8006e30:	20000160 	.word	0x20000160

08006e34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006e3a:	4b0f      	ldr	r3, [pc, #60]	; (8006e78 <Get_SerialNum+0x44>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006e40:	4b0e      	ldr	r3, [pc, #56]	; (8006e7c <Get_SerialNum+0x48>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006e46:	4b0e      	ldr	r3, [pc, #56]	; (8006e80 <Get_SerialNum+0x4c>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4413      	add	r3, r2
 8006e52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d009      	beq.n	8006e6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006e5a:	2208      	movs	r2, #8
 8006e5c:	4909      	ldr	r1, [pc, #36]	; (8006e84 <Get_SerialNum+0x50>)
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f000 f814 	bl	8006e8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006e64:	2204      	movs	r2, #4
 8006e66:	4908      	ldr	r1, [pc, #32]	; (8006e88 <Get_SerialNum+0x54>)
 8006e68:	68b8      	ldr	r0, [r7, #8]
 8006e6a:	f000 f80f 	bl	8006e8c <IntToUnicode>
  }
}
 8006e6e:	bf00      	nop
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	1fff7590 	.word	0x1fff7590
 8006e7c:	1fff7594 	.word	0x1fff7594
 8006e80:	1fff7598 	.word	0x1fff7598
 8006e84:	20000172 	.word	0x20000172
 8006e88:	20000182 	.word	0x20000182

08006e8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	4613      	mov	r3, r2
 8006e98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	75fb      	strb	r3, [r7, #23]
 8006ea2:	e027      	b.n	8006ef4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	0f1b      	lsrs	r3, r3, #28
 8006ea8:	2b09      	cmp	r3, #9
 8006eaa:	d80b      	bhi.n	8006ec4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	0f1b      	lsrs	r3, r3, #28
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	7dfb      	ldrb	r3, [r7, #23]
 8006eb4:	005b      	lsls	r3, r3, #1
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	440b      	add	r3, r1
 8006ebc:	3230      	adds	r2, #48	; 0x30
 8006ebe:	b2d2      	uxtb	r2, r2
 8006ec0:	701a      	strb	r2, [r3, #0]
 8006ec2:	e00a      	b.n	8006eda <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	0f1b      	lsrs	r3, r3, #28
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	7dfb      	ldrb	r3, [r7, #23]
 8006ecc:	005b      	lsls	r3, r3, #1
 8006ece:	4619      	mov	r1, r3
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	440b      	add	r3, r1
 8006ed4:	3237      	adds	r2, #55	; 0x37
 8006ed6:	b2d2      	uxtb	r2, r2
 8006ed8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	011b      	lsls	r3, r3, #4
 8006ede:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006ee0:	7dfb      	ldrb	r3, [r7, #23]
 8006ee2:	005b      	lsls	r3, r3, #1
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	4413      	add	r3, r2
 8006eea:	2200      	movs	r2, #0
 8006eec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006eee:	7dfb      	ldrb	r3, [r7, #23]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	75fb      	strb	r3, [r7, #23]
 8006ef4:	7dfa      	ldrb	r2, [r7, #23]
 8006ef6:	79fb      	ldrb	r3, [r7, #7]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d3d3      	bcc.n	8006ea4 <IntToUnicode+0x18>
  }
}
 8006efc:	bf00      	nop
 8006efe:	371c      	adds	r7, #28
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b08a      	sub	sp, #40	; 0x28
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f10:	f107 0314 	add.w	r3, r7, #20
 8006f14:	2200      	movs	r2, #0
 8006f16:	601a      	str	r2, [r3, #0]
 8006f18:	605a      	str	r2, [r3, #4]
 8006f1a:	609a      	str	r2, [r3, #8]
 8006f1c:	60da      	str	r2, [r3, #12]
 8006f1e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a1c      	ldr	r2, [pc, #112]	; (8006f98 <HAL_PCD_MspInit+0x90>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d131      	bne.n	8006f8e <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f2a:	4b1c      	ldr	r3, [pc, #112]	; (8006f9c <HAL_PCD_MspInit+0x94>)
 8006f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f2e:	4a1b      	ldr	r2, [pc, #108]	; (8006f9c <HAL_PCD_MspInit+0x94>)
 8006f30:	f043 0301 	orr.w	r3, r3, #1
 8006f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f36:	4b19      	ldr	r3, [pc, #100]	; (8006f9c <HAL_PCD_MspInit+0x94>)
 8006f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	613b      	str	r3, [r7, #16]
 8006f40:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006f42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f48:	2302      	movs	r3, #2
 8006f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f50:	2303      	movs	r3, #3
 8006f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 8006f54:	230a      	movs	r3, #10
 8006f56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f58:	f107 0314 	add.w	r3, r7, #20
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f62:	f7fa f823 	bl	8000fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006f66:	4b0d      	ldr	r3, [pc, #52]	; (8006f9c <HAL_PCD_MspInit+0x94>)
 8006f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f6a:	4a0c      	ldr	r2, [pc, #48]	; (8006f9c <HAL_PCD_MspInit+0x94>)
 8006f6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f70:	6593      	str	r3, [r2, #88]	; 0x58
 8006f72:	4b0a      	ldr	r3, [pc, #40]	; (8006f9c <HAL_PCD_MspInit+0x94>)
 8006f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f7a:	60fb      	str	r3, [r7, #12]
 8006f7c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8006f7e:	2200      	movs	r2, #0
 8006f80:	2100      	movs	r1, #0
 8006f82:	2043      	movs	r0, #67	; 0x43
 8006f84:	f7f9 ffdb 	bl	8000f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8006f88:	2043      	movs	r0, #67	; 0x43
 8006f8a:	f7f9 fff4 	bl	8000f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006f8e:	bf00      	nop
 8006f90:	3728      	adds	r7, #40	; 0x28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	40006800 	.word	0x40006800
 8006f9c:	40021000 	.word	0x40021000

08006fa0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	4610      	mov	r0, r2
 8006fb8:	f7fe fd99 	bl	8005aee <USBD_LL_SetupStage>
}
 8006fbc:	bf00      	nop
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	460b      	mov	r3, r1
 8006fce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8006fd6:	78fb      	ldrb	r3, [r7, #3]
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	015b      	lsls	r3, r3, #5
 8006fdc:	4413      	add	r3, r2
 8006fde:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	78fb      	ldrb	r3, [r7, #3]
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	f7fe fdcc 	bl	8005b84 <USBD_LL_DataOutStage>
}
 8006fec:	bf00      	nop
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8007006:	78fb      	ldrb	r3, [r7, #3]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	015b      	lsls	r3, r3, #5
 800700c:	4413      	add	r3, r2
 800700e:	333c      	adds	r3, #60	; 0x3c
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	78fb      	ldrb	r3, [r7, #3]
 8007014:	4619      	mov	r1, r3
 8007016:	f7fe fe26 	bl	8005c66 <USBD_LL_DataInStage>
}
 800701a:	bf00      	nop
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b082      	sub	sp, #8
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007030:	4618      	mov	r0, r3
 8007032:	f7fe ff39 	bl	8005ea8 <USBD_LL_SOF>
}
 8007036:	bf00      	nop
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800703e:	b580      	push	{r7, lr}
 8007040:	b084      	sub	sp, #16
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007046:	2301      	movs	r3, #1
 8007048:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	2b02      	cmp	r3, #2
 8007050:	d001      	beq.n	8007056 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007052:	f7f9 fc73 	bl	800093c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800705c:	7bfa      	ldrb	r2, [r7, #15]
 800705e:	4611      	mov	r1, r2
 8007060:	4618      	mov	r0, r3
 8007062:	f7fe fee6 	bl	8005e32 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800706c:	4618      	mov	r0, r3
 800706e:	f7fe fe9f 	bl	8005db0 <USBD_LL_Reset>
}
 8007072:	bf00      	nop
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
	...

0800707c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800708a:	4618      	mov	r0, r3
 800708c:	f7fe fee1 	bl	8005e52 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d005      	beq.n	80070a4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007098:	4b04      	ldr	r3, [pc, #16]	; (80070ac <HAL_PCD_SuspendCallback+0x30>)
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	4a03      	ldr	r2, [pc, #12]	; (80070ac <HAL_PCD_SuspendCallback+0x30>)
 800709e:	f043 0306 	orr.w	r3, r3, #6
 80070a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80070a4:	bf00      	nop
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	e000ed00 	.word	0xe000ed00

080070b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d007      	beq.n	80070d0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80070c0:	4b08      	ldr	r3, [pc, #32]	; (80070e4 <HAL_PCD_ResumeCallback+0x34>)
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	4a07      	ldr	r2, [pc, #28]	; (80070e4 <HAL_PCD_ResumeCallback+0x34>)
 80070c6:	f023 0306 	bic.w	r3, r3, #6
 80070ca:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80070cc:	f000 fab2 	bl	8007634 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7fe fed0 	bl	8005e7c <USBD_LL_Resume>
}
 80070dc:	bf00      	nop
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	e000ed00 	.word	0xe000ed00

080070e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80070f0:	f7fb f9b4 	bl	800245c <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80070f4:	4a2b      	ldr	r2, [pc, #172]	; (80071a4 <USBD_LL_Init+0xbc>)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  pdev->pData = &hpcd_USB_FS;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a29      	ldr	r2, [pc, #164]	; (80071a4 <USBD_LL_Init+0xbc>)
 8007100:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007104:	4b27      	ldr	r3, [pc, #156]	; (80071a4 <USBD_LL_Init+0xbc>)
 8007106:	4a28      	ldr	r2, [pc, #160]	; (80071a8 <USBD_LL_Init+0xc0>)
 8007108:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800710a:	4b26      	ldr	r3, [pc, #152]	; (80071a4 <USBD_LL_Init+0xbc>)
 800710c:	2208      	movs	r2, #8
 800710e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007110:	4b24      	ldr	r3, [pc, #144]	; (80071a4 <USBD_LL_Init+0xbc>)
 8007112:	2202      	movs	r2, #2
 8007114:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007116:	4b23      	ldr	r3, [pc, #140]	; (80071a4 <USBD_LL_Init+0xbc>)
 8007118:	2202      	movs	r2, #2
 800711a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800711c:	4b21      	ldr	r3, [pc, #132]	; (80071a4 <USBD_LL_Init+0xbc>)
 800711e:	2200      	movs	r2, #0
 8007120:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007122:	4b20      	ldr	r3, [pc, #128]	; (80071a4 <USBD_LL_Init+0xbc>)
 8007124:	2200      	movs	r2, #0
 8007126:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007128:	4b1e      	ldr	r3, [pc, #120]	; (80071a4 <USBD_LL_Init+0xbc>)
 800712a:	2200      	movs	r2, #0
 800712c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800712e:	4b1d      	ldr	r3, [pc, #116]	; (80071a4 <USBD_LL_Init+0xbc>)
 8007130:	2200      	movs	r2, #0
 8007132:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007134:	481b      	ldr	r0, [pc, #108]	; (80071a4 <USBD_LL_Init+0xbc>)
 8007136:	f7fa f9e9 	bl	800150c <HAL_PCD_Init>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d001      	beq.n	8007144 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8007140:	f7f9 fbfc 	bl	800093c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800714a:	2318      	movs	r3, #24
 800714c:	2200      	movs	r2, #0
 800714e:	2100      	movs	r1, #0
 8007150:	f7fb f8b8 	bl	80022c4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800715a:	2358      	movs	r3, #88	; 0x58
 800715c:	2200      	movs	r2, #0
 800715e:	2180      	movs	r1, #128	; 0x80
 8007160:	f7fb f8b0 	bl	80022c4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800716a:	23c0      	movs	r3, #192	; 0xc0
 800716c:	2200      	movs	r2, #0
 800716e:	2181      	movs	r1, #129	; 0x81
 8007170:	f7fb f8a8 	bl	80022c4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800717a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800717e:	2200      	movs	r2, #0
 8007180:	2101      	movs	r1, #1
 8007182:	f7fb f89f 	bl	80022c4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800718c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007190:	2200      	movs	r2, #0
 8007192:	2182      	movs	r1, #130	; 0x82
 8007194:	f7fb f896 	bl	80022c4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	200012e8 	.word	0x200012e8
 80071a8:	40006800 	.word	0x40006800

080071ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071b4:	2300      	movs	r3, #0
 80071b6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071b8:	2300      	movs	r3, #0
 80071ba:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7fa fa8a 	bl	80016dc <HAL_PCD_Start>
 80071c8:	4603      	mov	r3, r0
 80071ca:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80071cc:	7bbb      	ldrb	r3, [r7, #14]
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	d816      	bhi.n	8007200 <USBD_LL_Start+0x54>
 80071d2:	a201      	add	r2, pc, #4	; (adr r2, 80071d8 <USBD_LL_Start+0x2c>)
 80071d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d8:	080071e9 	.word	0x080071e9
 80071dc:	080071ef 	.word	0x080071ef
 80071e0:	080071f5 	.word	0x080071f5
 80071e4:	080071fb 	.word	0x080071fb
    case HAL_OK :
      usb_status = USBD_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	73fb      	strb	r3, [r7, #15]
    break;
 80071ec:	e00b      	b.n	8007206 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80071ee:	2302      	movs	r3, #2
 80071f0:	73fb      	strb	r3, [r7, #15]
    break;
 80071f2:	e008      	b.n	8007206 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80071f4:	2301      	movs	r3, #1
 80071f6:	73fb      	strb	r3, [r7, #15]
    break;
 80071f8:	e005      	b.n	8007206 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80071fa:	2302      	movs	r3, #2
 80071fc:	73fb      	strb	r3, [r7, #15]
    break;
 80071fe:	e002      	b.n	8007206 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8007200:	2302      	movs	r3, #2
 8007202:	73fb      	strb	r3, [r7, #15]
    break;
 8007204:	bf00      	nop
  }
  return usb_status;
 8007206:	7bfb      	ldrb	r3, [r7, #15]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	4608      	mov	r0, r1
 800721a:	4611      	mov	r1, r2
 800721c:	461a      	mov	r2, r3
 800721e:	4603      	mov	r3, r0
 8007220:	70fb      	strb	r3, [r7, #3]
 8007222:	460b      	mov	r3, r1
 8007224:	70bb      	strb	r3, [r7, #2]
 8007226:	4613      	mov	r3, r2
 8007228:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800722a:	2300      	movs	r3, #0
 800722c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800722e:	2300      	movs	r3, #0
 8007230:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007238:	78bb      	ldrb	r3, [r7, #2]
 800723a:	883a      	ldrh	r2, [r7, #0]
 800723c:	78f9      	ldrb	r1, [r7, #3]
 800723e:	f7fa fbe2 	bl	8001a06 <HAL_PCD_EP_Open>
 8007242:	4603      	mov	r3, r0
 8007244:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007246:	7bbb      	ldrb	r3, [r7, #14]
 8007248:	2b03      	cmp	r3, #3
 800724a:	d817      	bhi.n	800727c <USBD_LL_OpenEP+0x6c>
 800724c:	a201      	add	r2, pc, #4	; (adr r2, 8007254 <USBD_LL_OpenEP+0x44>)
 800724e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007252:	bf00      	nop
 8007254:	08007265 	.word	0x08007265
 8007258:	0800726b 	.word	0x0800726b
 800725c:	08007271 	.word	0x08007271
 8007260:	08007277 	.word	0x08007277
    case HAL_OK :
      usb_status = USBD_OK;
 8007264:	2300      	movs	r3, #0
 8007266:	73fb      	strb	r3, [r7, #15]
    break;
 8007268:	e00b      	b.n	8007282 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800726a:	2302      	movs	r3, #2
 800726c:	73fb      	strb	r3, [r7, #15]
    break;
 800726e:	e008      	b.n	8007282 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007270:	2301      	movs	r3, #1
 8007272:	73fb      	strb	r3, [r7, #15]
    break;
 8007274:	e005      	b.n	8007282 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007276:	2302      	movs	r3, #2
 8007278:	73fb      	strb	r3, [r7, #15]
    break;
 800727a:	e002      	b.n	8007282 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800727c:	2302      	movs	r3, #2
 800727e:	73fb      	strb	r3, [r7, #15]
    break;
 8007280:	bf00      	nop
  }
  return usb_status;
 8007282:	7bfb      	ldrb	r3, [r7, #15]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	460b      	mov	r3, r1
 8007296:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007298:	2300      	movs	r3, #0
 800729a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800729c:	2300      	movs	r3, #0
 800729e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072a6:	78fa      	ldrb	r2, [r7, #3]
 80072a8:	4611      	mov	r1, r2
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fa fc0b 	bl	8001ac6 <HAL_PCD_EP_Close>
 80072b0:	4603      	mov	r3, r0
 80072b2:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 80072b4:	7bbb      	ldrb	r3, [r7, #14]
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d816      	bhi.n	80072e8 <USBD_LL_CloseEP+0x5c>
 80072ba:	a201      	add	r2, pc, #4	; (adr r2, 80072c0 <USBD_LL_CloseEP+0x34>)
 80072bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c0:	080072d1 	.word	0x080072d1
 80072c4:	080072d7 	.word	0x080072d7
 80072c8:	080072dd 	.word	0x080072dd
 80072cc:	080072e3 	.word	0x080072e3
    case HAL_OK :
      usb_status = USBD_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	73fb      	strb	r3, [r7, #15]
    break;
 80072d4:	e00b      	b.n	80072ee <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80072d6:	2302      	movs	r3, #2
 80072d8:	73fb      	strb	r3, [r7, #15]
    break;
 80072da:	e008      	b.n	80072ee <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80072dc:	2301      	movs	r3, #1
 80072de:	73fb      	strb	r3, [r7, #15]
    break;
 80072e0:	e005      	b.n	80072ee <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80072e2:	2302      	movs	r3, #2
 80072e4:	73fb      	strb	r3, [r7, #15]
    break;
 80072e6:	e002      	b.n	80072ee <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80072e8:	2302      	movs	r3, #2
 80072ea:	73fb      	strb	r3, [r7, #15]
    break;
 80072ec:	bf00      	nop
  }
  return usb_status;  
 80072ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	460b      	mov	r3, r1
 8007302:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007304:	2300      	movs	r3, #0
 8007306:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007308:	2300      	movs	r3, #0
 800730a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007312:	78fa      	ldrb	r2, [r7, #3]
 8007314:	4611      	mov	r1, r2
 8007316:	4618      	mov	r0, r3
 8007318:	f7fa fc9f 	bl	8001c5a <HAL_PCD_EP_SetStall>
 800731c:	4603      	mov	r3, r0
 800731e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007320:	7bbb      	ldrb	r3, [r7, #14]
 8007322:	2b03      	cmp	r3, #3
 8007324:	d816      	bhi.n	8007354 <USBD_LL_StallEP+0x5c>
 8007326:	a201      	add	r2, pc, #4	; (adr r2, 800732c <USBD_LL_StallEP+0x34>)
 8007328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732c:	0800733d 	.word	0x0800733d
 8007330:	08007343 	.word	0x08007343
 8007334:	08007349 	.word	0x08007349
 8007338:	0800734f 	.word	0x0800734f
    case HAL_OK :
      usb_status = USBD_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	73fb      	strb	r3, [r7, #15]
    break;
 8007340:	e00b      	b.n	800735a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007342:	2302      	movs	r3, #2
 8007344:	73fb      	strb	r3, [r7, #15]
    break;
 8007346:	e008      	b.n	800735a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007348:	2301      	movs	r3, #1
 800734a:	73fb      	strb	r3, [r7, #15]
    break;
 800734c:	e005      	b.n	800735a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800734e:	2302      	movs	r3, #2
 8007350:	73fb      	strb	r3, [r7, #15]
    break;
 8007352:	e002      	b.n	800735a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007354:	2302      	movs	r3, #2
 8007356:	73fb      	strb	r3, [r7, #15]
    break;
 8007358:	bf00      	nop
  }
  return usb_status;  
 800735a:	7bfb      	ldrb	r3, [r7, #15]
}
 800735c:	4618      	mov	r0, r3
 800735e:	3710      	adds	r7, #16
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	460b      	mov	r3, r1
 800736e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007370:	2300      	movs	r3, #0
 8007372:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007374:	2300      	movs	r3, #0
 8007376:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800737e:	78fa      	ldrb	r2, [r7, #3]
 8007380:	4611      	mov	r1, r2
 8007382:	4618      	mov	r0, r3
 8007384:	f7fa fcc3 	bl	8001d0e <HAL_PCD_EP_ClrStall>
 8007388:	4603      	mov	r3, r0
 800738a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800738c:	7bbb      	ldrb	r3, [r7, #14]
 800738e:	2b03      	cmp	r3, #3
 8007390:	d816      	bhi.n	80073c0 <USBD_LL_ClearStallEP+0x5c>
 8007392:	a201      	add	r2, pc, #4	; (adr r2, 8007398 <USBD_LL_ClearStallEP+0x34>)
 8007394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007398:	080073a9 	.word	0x080073a9
 800739c:	080073af 	.word	0x080073af
 80073a0:	080073b5 	.word	0x080073b5
 80073a4:	080073bb 	.word	0x080073bb
    case HAL_OK :
      usb_status = USBD_OK;
 80073a8:	2300      	movs	r3, #0
 80073aa:	73fb      	strb	r3, [r7, #15]
    break;
 80073ac:	e00b      	b.n	80073c6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80073ae:	2302      	movs	r3, #2
 80073b0:	73fb      	strb	r3, [r7, #15]
    break;
 80073b2:	e008      	b.n	80073c6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80073b4:	2301      	movs	r3, #1
 80073b6:	73fb      	strb	r3, [r7, #15]
    break;
 80073b8:	e005      	b.n	80073c6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80073ba:	2302      	movs	r3, #2
 80073bc:	73fb      	strb	r3, [r7, #15]
    break;
 80073be:	e002      	b.n	80073c6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80073c0:	2302      	movs	r3, #2
 80073c2:	73fb      	strb	r3, [r7, #15]
    break;
 80073c4:	bf00      	nop
  }
  return usb_status; 
 80073c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	460b      	mov	r3, r1
 80073da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073e2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80073e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	da08      	bge.n	80073fe <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80073ec:	78fb      	ldrb	r3, [r7, #3]
 80073ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	015b      	lsls	r3, r3, #5
 80073f6:	4413      	add	r3, r2
 80073f8:	332a      	adds	r3, #42	; 0x2a
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	e008      	b.n	8007410 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80073fe:	78fb      	ldrb	r3, [r7, #3]
 8007400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	015b      	lsls	r3, r3, #5
 8007408:	4413      	add	r3, r2
 800740a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800740e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007410:	4618      	mov	r0, r3
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	460b      	mov	r3, r1
 8007426:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007428:	2300      	movs	r3, #0
 800742a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800742c:	2300      	movs	r3, #0
 800742e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007436:	78fa      	ldrb	r2, [r7, #3]
 8007438:	4611      	mov	r1, r2
 800743a:	4618      	mov	r0, r3
 800743c:	f7fa fabe 	bl	80019bc <HAL_PCD_SetAddress>
 8007440:	4603      	mov	r3, r0
 8007442:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8007444:	7bbb      	ldrb	r3, [r7, #14]
 8007446:	2b03      	cmp	r3, #3
 8007448:	d816      	bhi.n	8007478 <USBD_LL_SetUSBAddress+0x5c>
 800744a:	a201      	add	r2, pc, #4	; (adr r2, 8007450 <USBD_LL_SetUSBAddress+0x34>)
 800744c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007450:	08007461 	.word	0x08007461
 8007454:	08007467 	.word	0x08007467
 8007458:	0800746d 	.word	0x0800746d
 800745c:	08007473 	.word	0x08007473
    case HAL_OK :
      usb_status = USBD_OK;
 8007460:	2300      	movs	r3, #0
 8007462:	73fb      	strb	r3, [r7, #15]
    break;
 8007464:	e00b      	b.n	800747e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007466:	2302      	movs	r3, #2
 8007468:	73fb      	strb	r3, [r7, #15]
    break;
 800746a:	e008      	b.n	800747e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800746c:	2301      	movs	r3, #1
 800746e:	73fb      	strb	r3, [r7, #15]
    break;
 8007470:	e005      	b.n	800747e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007472:	2302      	movs	r3, #2
 8007474:	73fb      	strb	r3, [r7, #15]
    break;
 8007476:	e002      	b.n	800747e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8007478:	2302      	movs	r3, #2
 800747a:	73fb      	strb	r3, [r7, #15]
    break;
 800747c:	bf00      	nop
  }
  return usb_status;  
 800747e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	607a      	str	r2, [r7, #4]
 8007492:	461a      	mov	r2, r3
 8007494:	460b      	mov	r3, r1
 8007496:	72fb      	strb	r3, [r7, #11]
 8007498:	4613      	mov	r3, r2
 800749a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800749c:	2300      	movs	r3, #0
 800749e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80074aa:	893b      	ldrh	r3, [r7, #8]
 80074ac:	7af9      	ldrb	r1, [r7, #11]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	f7fa fb9a 	bl	8001be8 <HAL_PCD_EP_Transmit>
 80074b4:	4603      	mov	r3, r0
 80074b6:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 80074b8:	7dbb      	ldrb	r3, [r7, #22]
 80074ba:	2b03      	cmp	r3, #3
 80074bc:	d816      	bhi.n	80074ec <USBD_LL_Transmit+0x64>
 80074be:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <USBD_LL_Transmit+0x3c>)
 80074c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c4:	080074d5 	.word	0x080074d5
 80074c8:	080074db 	.word	0x080074db
 80074cc:	080074e1 	.word	0x080074e1
 80074d0:	080074e7 	.word	0x080074e7
    case HAL_OK :
      usb_status = USBD_OK;
 80074d4:	2300      	movs	r3, #0
 80074d6:	75fb      	strb	r3, [r7, #23]
    break;
 80074d8:	e00b      	b.n	80074f2 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80074da:	2302      	movs	r3, #2
 80074dc:	75fb      	strb	r3, [r7, #23]
    break;
 80074de:	e008      	b.n	80074f2 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80074e0:	2301      	movs	r3, #1
 80074e2:	75fb      	strb	r3, [r7, #23]
    break;
 80074e4:	e005      	b.n	80074f2 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80074e6:	2302      	movs	r3, #2
 80074e8:	75fb      	strb	r3, [r7, #23]
    break;
 80074ea:	e002      	b.n	80074f2 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 80074ec:	2302      	movs	r3, #2
 80074ee:	75fb      	strb	r3, [r7, #23]
    break;
 80074f0:	bf00      	nop
  }
  return usb_status;    
 80074f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3718      	adds	r7, #24
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b086      	sub	sp, #24
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	607a      	str	r2, [r7, #4]
 8007506:	461a      	mov	r2, r3
 8007508:	460b      	mov	r3, r1
 800750a:	72fb      	strb	r3, [r7, #11]
 800750c:	4613      	mov	r3, r2
 800750e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800751e:	893b      	ldrh	r3, [r7, #8]
 8007520:	7af9      	ldrb	r1, [r7, #11]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	f7fa fb11 	bl	8001b4a <HAL_PCD_EP_Receive>
 8007528:	4603      	mov	r3, r0
 800752a:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800752c:	7dbb      	ldrb	r3, [r7, #22]
 800752e:	2b03      	cmp	r3, #3
 8007530:	d816      	bhi.n	8007560 <USBD_LL_PrepareReceive+0x64>
 8007532:	a201      	add	r2, pc, #4	; (adr r2, 8007538 <USBD_LL_PrepareReceive+0x3c>)
 8007534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007538:	08007549 	.word	0x08007549
 800753c:	0800754f 	.word	0x0800754f
 8007540:	08007555 	.word	0x08007555
 8007544:	0800755b 	.word	0x0800755b
    case HAL_OK :
      usb_status = USBD_OK;
 8007548:	2300      	movs	r3, #0
 800754a:	75fb      	strb	r3, [r7, #23]
    break;
 800754c:	e00b      	b.n	8007566 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800754e:	2302      	movs	r3, #2
 8007550:	75fb      	strb	r3, [r7, #23]
    break;
 8007552:	e008      	b.n	8007566 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007554:	2301      	movs	r3, #1
 8007556:	75fb      	strb	r3, [r7, #23]
    break;
 8007558:	e005      	b.n	8007566 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800755a:	2302      	movs	r3, #2
 800755c:	75fb      	strb	r3, [r7, #23]
    break;
 800755e:	e002      	b.n	8007566 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 8007560:	2302      	movs	r3, #2
 8007562:	75fb      	strb	r3, [r7, #23]
    break;
 8007564:	bf00      	nop
  }
  return usb_status; 
 8007566:	7dfb      	ldrb	r3, [r7, #23]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3718      	adds	r7, #24
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	460b      	mov	r3, r1
 800757a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007582:	78fa      	ldrb	r2, [r7, #3]
 8007584:	4611      	mov	r1, r2
 8007586:	4618      	mov	r0, r3
 8007588:	f7fa fb19 	bl	8001bbe <HAL_PCD_EP_GetRxCount>
 800758c:	4603      	mov	r3, r0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	460b      	mov	r3, r1
 80075a2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80075a4:	78fb      	ldrb	r3, [r7, #3]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d002      	beq.n	80075b0 <HAL_PCDEx_LPM_Callback+0x18>
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d013      	beq.n	80075d6 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 80075ae:	e023      	b.n	80075f8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d007      	beq.n	80075c8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80075b8:	f000 f83c 	bl	8007634 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80075bc:	4b10      	ldr	r3, [pc, #64]	; (8007600 <HAL_PCDEx_LPM_Callback+0x68>)
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	4a0f      	ldr	r2, [pc, #60]	; (8007600 <HAL_PCDEx_LPM_Callback+0x68>)
 80075c2:	f023 0306 	bic.w	r3, r3, #6
 80075c6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fe fc54 	bl	8005e7c <USBD_LL_Resume>
    break;
 80075d4:	e010      	b.n	80075f8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80075dc:	4618      	mov	r0, r3
 80075de:	f7fe fc38 	bl	8005e52 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d005      	beq.n	80075f6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80075ea:	4b05      	ldr	r3, [pc, #20]	; (8007600 <HAL_PCDEx_LPM_Callback+0x68>)
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	4a04      	ldr	r2, [pc, #16]	; (8007600 <HAL_PCDEx_LPM_Callback+0x68>)
 80075f0:	f043 0306 	orr.w	r3, r3, #6
 80075f4:	6113      	str	r3, [r2, #16]
    break;   
 80075f6:	bf00      	nop
}
 80075f8:	bf00      	nop
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	e000ed00 	.word	0xe000ed00

08007604 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800760c:	4b03      	ldr	r3, [pc, #12]	; (800761c <USBD_static_malloc+0x18>)
}
 800760e:	4618      	mov	r0, r3
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	20000300 	.word	0x20000300

08007620 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]

}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007638:	f7f9 f911 	bl	800085e <SystemClock_Config>
}
 800763c:	bf00      	nop
 800763e:	bd80      	pop	{r7, pc}

08007640 <__libc_init_array>:
 8007640:	b570      	push	{r4, r5, r6, lr}
 8007642:	4e0d      	ldr	r6, [pc, #52]	; (8007678 <__libc_init_array+0x38>)
 8007644:	4c0d      	ldr	r4, [pc, #52]	; (800767c <__libc_init_array+0x3c>)
 8007646:	1ba4      	subs	r4, r4, r6
 8007648:	10a4      	asrs	r4, r4, #2
 800764a:	2500      	movs	r5, #0
 800764c:	42a5      	cmp	r5, r4
 800764e:	d109      	bne.n	8007664 <__libc_init_array+0x24>
 8007650:	4e0b      	ldr	r6, [pc, #44]	; (8007680 <__libc_init_array+0x40>)
 8007652:	4c0c      	ldr	r4, [pc, #48]	; (8007684 <__libc_init_array+0x44>)
 8007654:	f000 f820 	bl	8007698 <_init>
 8007658:	1ba4      	subs	r4, r4, r6
 800765a:	10a4      	asrs	r4, r4, #2
 800765c:	2500      	movs	r5, #0
 800765e:	42a5      	cmp	r5, r4
 8007660:	d105      	bne.n	800766e <__libc_init_array+0x2e>
 8007662:	bd70      	pop	{r4, r5, r6, pc}
 8007664:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007668:	4798      	blx	r3
 800766a:	3501      	adds	r5, #1
 800766c:	e7ee      	b.n	800764c <__libc_init_array+0xc>
 800766e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007672:	4798      	blx	r3
 8007674:	3501      	adds	r5, #1
 8007676:	e7f2      	b.n	800765e <__libc_init_array+0x1e>
 8007678:	08007748 	.word	0x08007748
 800767c:	08007748 	.word	0x08007748
 8007680:	08007748 	.word	0x08007748
 8007684:	08007750 	.word	0x08007750

08007688 <memset>:
 8007688:	4402      	add	r2, r0
 800768a:	4603      	mov	r3, r0
 800768c:	4293      	cmp	r3, r2
 800768e:	d100      	bne.n	8007692 <memset+0xa>
 8007690:	4770      	bx	lr
 8007692:	f803 1b01 	strb.w	r1, [r3], #1
 8007696:	e7f9      	b.n	800768c <memset+0x4>

08007698 <_init>:
 8007698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769a:	bf00      	nop
 800769c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800769e:	bc08      	pop	{r3}
 80076a0:	469e      	mov	lr, r3
 80076a2:	4770      	bx	lr

080076a4 <_fini>:
 80076a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a6:	bf00      	nop
 80076a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076aa:	bc08      	pop	{r3}
 80076ac:	469e      	mov	lr, r3
 80076ae:	4770      	bx	lr
