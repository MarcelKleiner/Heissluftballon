
Heissluftballon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a824  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800a9b4  0800a9b4  0001a9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa5c  0800aa5c  0002018c  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa5c  0800aa5c  0001aa5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa64  0800aa64  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800aa64  0800aa64  0001aa64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa6c  0800aa6c  0001aa6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  0800aa70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001530  2000018c  0800abfc  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016bc  0800abfc  000216bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ce6a  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005b63  00000000  00000000  0004d026  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001808  00000000  00000000  00052b90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001580  00000000  00000000  00054398  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000238da  00000000  00000000  00055918  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c9e0  00000000  00000000  000791f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ae404  00000000  00000000  00095bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00143fd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061cc  00000000  00000000  00144054  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000018c 	.word	0x2000018c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a99c 	.word	0x0800a99c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000190 	.word	0x20000190
 80001cc:	0800a99c 	.word	0x0800a99c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b972 	b.w	8000d08 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9e08      	ldr	r6, [sp, #32]
 8000a42:	4604      	mov	r4, r0
 8000a44:	4688      	mov	r8, r1
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d14b      	bne.n	8000ae2 <__udivmoddi4+0xa6>
 8000a4a:	428a      	cmp	r2, r1
 8000a4c:	4615      	mov	r5, r2
 8000a4e:	d967      	bls.n	8000b20 <__udivmoddi4+0xe4>
 8000a50:	fab2 f282 	clz	r2, r2
 8000a54:	b14a      	cbz	r2, 8000a6a <__udivmoddi4+0x2e>
 8000a56:	f1c2 0720 	rsb	r7, r2, #32
 8000a5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000a62:	4095      	lsls	r5, r2
 8000a64:	ea47 0803 	orr.w	r8, r7, r3
 8000a68:	4094      	lsls	r4, r2
 8000a6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a6e:	0c23      	lsrs	r3, r4, #16
 8000a70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a74:	fa1f fc85 	uxth.w	ip, r5
 8000a78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a80:	fb07 f10c 	mul.w	r1, r7, ip
 8000a84:	4299      	cmp	r1, r3
 8000a86:	d909      	bls.n	8000a9c <__udivmoddi4+0x60>
 8000a88:	18eb      	adds	r3, r5, r3
 8000a8a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a8e:	f080 811b 	bcs.w	8000cc8 <__udivmoddi4+0x28c>
 8000a92:	4299      	cmp	r1, r3
 8000a94:	f240 8118 	bls.w	8000cc8 <__udivmoddi4+0x28c>
 8000a98:	3f02      	subs	r7, #2
 8000a9a:	442b      	add	r3, r5
 8000a9c:	1a5b      	subs	r3, r3, r1
 8000a9e:	b2a4      	uxth	r4, r4
 8000aa0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000aa4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000aa8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ab0:	45a4      	cmp	ip, r4
 8000ab2:	d909      	bls.n	8000ac8 <__udivmoddi4+0x8c>
 8000ab4:	192c      	adds	r4, r5, r4
 8000ab6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aba:	f080 8107 	bcs.w	8000ccc <__udivmoddi4+0x290>
 8000abe:	45a4      	cmp	ip, r4
 8000ac0:	f240 8104 	bls.w	8000ccc <__udivmoddi4+0x290>
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	442c      	add	r4, r5
 8000ac8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000acc:	eba4 040c 	sub.w	r4, r4, ip
 8000ad0:	2700      	movs	r7, #0
 8000ad2:	b11e      	cbz	r6, 8000adc <__udivmoddi4+0xa0>
 8000ad4:	40d4      	lsrs	r4, r2
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e9c6 4300 	strd	r4, r3, [r6]
 8000adc:	4639      	mov	r1, r7
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	428b      	cmp	r3, r1
 8000ae4:	d909      	bls.n	8000afa <__udivmoddi4+0xbe>
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	f000 80eb 	beq.w	8000cc2 <__udivmoddi4+0x286>
 8000aec:	2700      	movs	r7, #0
 8000aee:	e9c6 0100 	strd	r0, r1, [r6]
 8000af2:	4638      	mov	r0, r7
 8000af4:	4639      	mov	r1, r7
 8000af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afa:	fab3 f783 	clz	r7, r3
 8000afe:	2f00      	cmp	r7, #0
 8000b00:	d147      	bne.n	8000b92 <__udivmoddi4+0x156>
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d302      	bcc.n	8000b0c <__udivmoddi4+0xd0>
 8000b06:	4282      	cmp	r2, r0
 8000b08:	f200 80fa 	bhi.w	8000d00 <__udivmoddi4+0x2c4>
 8000b0c:	1a84      	subs	r4, r0, r2
 8000b0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b12:	2001      	movs	r0, #1
 8000b14:	4698      	mov	r8, r3
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	d0e0      	beq.n	8000adc <__udivmoddi4+0xa0>
 8000b1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b1e:	e7dd      	b.n	8000adc <__udivmoddi4+0xa0>
 8000b20:	b902      	cbnz	r2, 8000b24 <__udivmoddi4+0xe8>
 8000b22:	deff      	udf	#255	; 0xff
 8000b24:	fab2 f282 	clz	r2, r2
 8000b28:	2a00      	cmp	r2, #0
 8000b2a:	f040 808f 	bne.w	8000c4c <__udivmoddi4+0x210>
 8000b2e:	1b49      	subs	r1, r1, r5
 8000b30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b34:	fa1f f885 	uxth.w	r8, r5
 8000b38:	2701      	movs	r7, #1
 8000b3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b3e:	0c23      	lsrs	r3, r4, #16
 8000b40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b48:	fb08 f10c 	mul.w	r1, r8, ip
 8000b4c:	4299      	cmp	r1, r3
 8000b4e:	d907      	bls.n	8000b60 <__udivmoddi4+0x124>
 8000b50:	18eb      	adds	r3, r5, r3
 8000b52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x122>
 8000b58:	4299      	cmp	r1, r3
 8000b5a:	f200 80cd 	bhi.w	8000cf8 <__udivmoddi4+0x2bc>
 8000b5e:	4684      	mov	ip, r0
 8000b60:	1a59      	subs	r1, r3, r1
 8000b62:	b2a3      	uxth	r3, r4
 8000b64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b70:	fb08 f800 	mul.w	r8, r8, r0
 8000b74:	45a0      	cmp	r8, r4
 8000b76:	d907      	bls.n	8000b88 <__udivmoddi4+0x14c>
 8000b78:	192c      	adds	r4, r5, r4
 8000b7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b7e:	d202      	bcs.n	8000b86 <__udivmoddi4+0x14a>
 8000b80:	45a0      	cmp	r8, r4
 8000b82:	f200 80b6 	bhi.w	8000cf2 <__udivmoddi4+0x2b6>
 8000b86:	4618      	mov	r0, r3
 8000b88:	eba4 0408 	sub.w	r4, r4, r8
 8000b8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b90:	e79f      	b.n	8000ad2 <__udivmoddi4+0x96>
 8000b92:	f1c7 0c20 	rsb	ip, r7, #32
 8000b96:	40bb      	lsls	r3, r7
 8000b98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ba0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ba4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ba8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bb0:	4325      	orrs	r5, r4
 8000bb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bb6:	0c2c      	lsrs	r4, r5, #16
 8000bb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bbc:	fa1f fa8e 	uxth.w	sl, lr
 8000bc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000bc8:	429c      	cmp	r4, r3
 8000bca:	fa02 f207 	lsl.w	r2, r2, r7
 8000bce:	fa00 f107 	lsl.w	r1, r0, r7
 8000bd2:	d90b      	bls.n	8000bec <__udivmoddi4+0x1b0>
 8000bd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000bd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bdc:	f080 8087 	bcs.w	8000cee <__udivmoddi4+0x2b2>
 8000be0:	429c      	cmp	r4, r3
 8000be2:	f240 8084 	bls.w	8000cee <__udivmoddi4+0x2b2>
 8000be6:	f1a9 0902 	sub.w	r9, r9, #2
 8000bea:	4473      	add	r3, lr
 8000bec:	1b1b      	subs	r3, r3, r4
 8000bee:	b2ad      	uxth	r5, r5
 8000bf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c00:	45a2      	cmp	sl, r4
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x1da>
 8000c04:	eb1e 0404 	adds.w	r4, lr, r4
 8000c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0c:	d26b      	bcs.n	8000ce6 <__udivmoddi4+0x2aa>
 8000c0e:	45a2      	cmp	sl, r4
 8000c10:	d969      	bls.n	8000ce6 <__udivmoddi4+0x2aa>
 8000c12:	3802      	subs	r0, #2
 8000c14:	4474      	add	r4, lr
 8000c16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c1e:	eba4 040a 	sub.w	r4, r4, sl
 8000c22:	454c      	cmp	r4, r9
 8000c24:	46c2      	mov	sl, r8
 8000c26:	464b      	mov	r3, r9
 8000c28:	d354      	bcc.n	8000cd4 <__udivmoddi4+0x298>
 8000c2a:	d051      	beq.n	8000cd0 <__udivmoddi4+0x294>
 8000c2c:	2e00      	cmp	r6, #0
 8000c2e:	d069      	beq.n	8000d04 <__udivmoddi4+0x2c8>
 8000c30:	ebb1 050a 	subs.w	r5, r1, sl
 8000c34:	eb64 0403 	sbc.w	r4, r4, r3
 8000c38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c3c:	40fd      	lsrs	r5, r7
 8000c3e:	40fc      	lsrs	r4, r7
 8000c40:	ea4c 0505 	orr.w	r5, ip, r5
 8000c44:	e9c6 5400 	strd	r5, r4, [r6]
 8000c48:	2700      	movs	r7, #0
 8000c4a:	e747      	b.n	8000adc <__udivmoddi4+0xa0>
 8000c4c:	f1c2 0320 	rsb	r3, r2, #32
 8000c50:	fa20 f703 	lsr.w	r7, r0, r3
 8000c54:	4095      	lsls	r5, r2
 8000c56:	fa01 f002 	lsl.w	r0, r1, r2
 8000c5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c62:	4338      	orrs	r0, r7
 8000c64:	0c01      	lsrs	r1, r0, #16
 8000c66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c6a:	fa1f f885 	uxth.w	r8, r5
 8000c6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c76:	fb07 f308 	mul.w	r3, r7, r8
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c80:	d907      	bls.n	8000c92 <__udivmoddi4+0x256>
 8000c82:	1869      	adds	r1, r5, r1
 8000c84:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c88:	d22f      	bcs.n	8000cea <__udivmoddi4+0x2ae>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d92d      	bls.n	8000cea <__udivmoddi4+0x2ae>
 8000c8e:	3f02      	subs	r7, #2
 8000c90:	4429      	add	r1, r5
 8000c92:	1acb      	subs	r3, r1, r3
 8000c94:	b281      	uxth	r1, r0
 8000c96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca2:	fb00 f308 	mul.w	r3, r0, r8
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d907      	bls.n	8000cba <__udivmoddi4+0x27e>
 8000caa:	1869      	adds	r1, r5, r1
 8000cac:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cb0:	d217      	bcs.n	8000ce2 <__udivmoddi4+0x2a6>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d915      	bls.n	8000ce2 <__udivmoddi4+0x2a6>
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	4429      	add	r1, r5
 8000cba:	1ac9      	subs	r1, r1, r3
 8000cbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cc0:	e73b      	b.n	8000b3a <__udivmoddi4+0xfe>
 8000cc2:	4637      	mov	r7, r6
 8000cc4:	4630      	mov	r0, r6
 8000cc6:	e709      	b.n	8000adc <__udivmoddi4+0xa0>
 8000cc8:	4607      	mov	r7, r0
 8000cca:	e6e7      	b.n	8000a9c <__udivmoddi4+0x60>
 8000ccc:	4618      	mov	r0, r3
 8000cce:	e6fb      	b.n	8000ac8 <__udivmoddi4+0x8c>
 8000cd0:	4541      	cmp	r1, r8
 8000cd2:	d2ab      	bcs.n	8000c2c <__udivmoddi4+0x1f0>
 8000cd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000cdc:	3801      	subs	r0, #1
 8000cde:	4613      	mov	r3, r2
 8000ce0:	e7a4      	b.n	8000c2c <__udivmoddi4+0x1f0>
 8000ce2:	4660      	mov	r0, ip
 8000ce4:	e7e9      	b.n	8000cba <__udivmoddi4+0x27e>
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	e795      	b.n	8000c16 <__udivmoddi4+0x1da>
 8000cea:	4667      	mov	r7, ip
 8000cec:	e7d1      	b.n	8000c92 <__udivmoddi4+0x256>
 8000cee:	4681      	mov	r9, r0
 8000cf0:	e77c      	b.n	8000bec <__udivmoddi4+0x1b0>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	442c      	add	r4, r5
 8000cf6:	e747      	b.n	8000b88 <__udivmoddi4+0x14c>
 8000cf8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cfc:	442b      	add	r3, r5
 8000cfe:	e72f      	b.n	8000b60 <__udivmoddi4+0x124>
 8000d00:	4638      	mov	r0, r7
 8000d02:	e708      	b.n	8000b16 <__udivmoddi4+0xda>
 8000d04:	4637      	mov	r7, r6
 8000d06:	e6e9      	b.n	8000adc <__udivmoddi4+0xa0>

08000d08 <__aeabi_idiv0>:
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <_ZN7AppMainC1Ev>:





AppMain::AppMain() {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 fbe2 	bl	80014e0 <_ZN5ModelC1Ev>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	33ac      	adds	r3, #172	; 0xac
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	4611      	mov	r1, r2
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 f957 	bl	8000fd8 <_ZN8FXPS7115C1EP5Model>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	33b0      	adds	r3, #176	; 0xb0
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	4611      	mov	r1, r2
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 fa66 	bl	8001204 <_ZN13MAX31865_TEMPC1EP5Model>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	33b4      	adds	r3, #180	; 0xb4
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 ff2b 	bl	8001b9c <_ZN5SHT21C1EP5Model>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	33b8      	adds	r3, #184	; 0xb8
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fc8d 	bl	800166a <_ZN5RFM95C1Ev>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	4611      	mov	r1, r2
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 f98a 	bl	8001074 <_ZN3GPSC1EP5Model>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 ffa4 	bl	8001cb4 <_ZN7USB_ComC1Ev>

}
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <_ZN7AppMain7initRFMEv>:


void AppMain::initRFM(){
 8000d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d7a:	b0a5      	sub	sp, #148	; 0x94
 8000d7c:	af10      	add	r7, sp, #64	; 0x40
 8000d7e:	6078      	str	r0, [r7, #4]
	RFM95::GPIO_HW_SETTINGS gpioHwSettings;
	RFM95::SPI_HW_SETTINGS spiHwSettings;

	gpioHwSettings.gpioPin0 = RFM_DIO0_Pin;
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	83bb      	strh	r3, [r7, #28]
	gpioHwSettings.gpioPin1 = RFM_DIO1_Pin;
 8000d84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d88:	84bb      	strh	r3, [r7, #36]	; 0x24
	gpioHwSettings.gpioPin2 = RFM_DIO2_Pin;
 8000d8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d8e:	85bb      	strh	r3, [r7, #44]	; 0x2c
	gpioHwSettings.gpioPin3 = RFM_DIO3_Pin;
 8000d90:	2320      	movs	r3, #32
 8000d92:	86bb      	strh	r3, [r7, #52]	; 0x34
	gpioHwSettings.gpioPin4 = RFM_DIO4_Pin;
 8000d94:	2340      	movs	r3, #64	; 0x40
 8000d96:	87bb      	strh	r3, [r7, #60]	; 0x3c
	gpioHwSettings.gpioPin5 = RFM_DIO5_Pin;
 8000d98:	2310      	movs	r3, #16
 8000d9a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	gpioHwSettings.gpioPort0 = RFM_DIO0_GPIO_Port;
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <_ZN7AppMain7initRFMEv+0x94>)
 8000da0:	61bb      	str	r3, [r7, #24]
	gpioHwSettings.gpioPort1 = RFM_DIO1_GPIO_Port;
 8000da2:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <_ZN7AppMain7initRFMEv+0x98>)
 8000da4:	623b      	str	r3, [r7, #32]
	gpioHwSettings.gpioPort2 = RFM_DIO2_GPIO_Port;
 8000da6:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <_ZN7AppMain7initRFMEv+0x98>)
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
	gpioHwSettings.gpioPort3 = RFM_DIO3_GPIO_Port;
 8000daa:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <_ZN7AppMain7initRFMEv+0x94>)
 8000dac:	633b      	str	r3, [r7, #48]	; 0x30
	gpioHwSettings.gpioPort4 = RFM_DIO4_GPIO_Port;
 8000dae:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <_ZN7AppMain7initRFMEv+0x94>)
 8000db0:	63bb      	str	r3, [r7, #56]	; 0x38
	gpioHwSettings.gpioPort5 = RFM_DIO5_GPIO_Port;
 8000db2:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <_ZN7AppMain7initRFMEv+0x94>)
 8000db4:	643b      	str	r3, [r7, #64]	; 0x40

	gpioHwSettings.gpioPortRST = RFM_RST_GPIO_Port;
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <_ZN7AppMain7initRFMEv+0x94>)
 8000db8:	64bb      	str	r3, [r7, #72]	; 0x48
	gpioHwSettings.gpioPinRST = RFM_RST_Pin;
 8000dba:	2308      	movs	r3, #8
 8000dbc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	spiHwSettings.gpioPin = RFM_NSS_Pin;
 8000dc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dc4:	82bb      	strh	r3, [r7, #20]
	spiHwSettings.gpioPort = RFM_NSS_GPIO_Port;
 8000dc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dca:	613b      	str	r3, [r7, #16]
	spiHwSettings.hspi = &hspi1;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <_ZN7AppMain7initRFMEv+0x9c>)
 8000dce:	60fb      	str	r3, [r7, #12]

	rfm95.initRFM(TRANSMIT_DATA_LENGTH, spiHwSettings, gpioHwSettings);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f103 06b8 	add.w	r6, r3, #184	; 0xb8
 8000dd6:	ad01      	add	r5, sp, #4
 8000dd8:	f107 0418 	add.w	r4, r7, #24
 8000ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000de0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000de2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000de4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000de6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000de8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000dec:	e885 0003 	stmia.w	r5, {r0, r1}
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	cb0c      	ldmia	r3, {r2, r3}
 8000dfa:	2164      	movs	r1, #100	; 0x64
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	f000 fc4b 	bl	8001698 <_ZN5RFM957initRFMEtNS_15SPI_HW_SETTINGSENS_16GPIO_HW_SETTINGSE>
}
 8000e02:	bf00      	nop
 8000e04:	3754      	adds	r7, #84	; 0x54
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	48000400 	.word	0x48000400
 8000e10:	48000800 	.word	0x48000800
 8000e14:	200006cc 	.word	0x200006cc

08000e18 <_ZN7AppMain8mainProgEv>:

void AppMain::mainProg(){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b09e      	sub	sp, #120	; 0x78
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]


	uint8_t transmitData[TRANSMIT_DATA_LENGTH];
	uint16_t transmitBuffer = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

	for(int counter = 0; counter < TRANSMIT_DATA_LENGTH; counter++){
 8000e26:	2300      	movs	r3, #0
 8000e28:	677b      	str	r3, [r7, #116]	; 0x74
 8000e2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e2c:	2b63      	cmp	r3, #99	; 0x63
 8000e2e:	dc09      	bgt.n	8000e44 <_ZN7AppMain8mainProgEv+0x2c>
			transmitData[counter] = 0;
 8000e30:	f107 0208 	add.w	r2, r7, #8
 8000e34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e36:	4413      	add	r3, r2
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
	for(int counter = 0; counter < TRANSMIT_DATA_LENGTH; counter++){
 8000e3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e3e:	3301      	adds	r3, #1
 8000e40:	677b      	str	r3, [r7, #116]	; 0x74
 8000e42:	e7f2      	b.n	8000e2a <_ZN7AppMain8mainProgEv+0x12>
	}

	HAL_Delay(100);
 8000e44:	2064      	movs	r0, #100	; 0x64
 8000e46:	f001 fb7f 	bl	8002548 <HAL_Delay>
	max31865.init(2);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	33b0      	adds	r3, #176	; 0xb0
 8000e4e:	2102      	movs	r1, #2
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 f9e6 	bl	8001222 <_ZN13MAX31865_TEMP4initEh>
	fxps7115.fxpInit();
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	33ac      	adds	r3, #172	; 0xac
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f8cb 	bl	8000ff6 <_ZN8FXPS71157fxpInitEv>
	gps.init();
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f926 	bl	80010b8 <_ZN3GPS4initEv>

	initRFM();
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff ff83 	bl	8000d78 <_ZN7AppMain7initRFMEv>


	while(1){
		/*read Sensor Data*/
		sht21.readSHT21Humidity();		//Humidity
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	33b4      	adds	r3, #180	; 0xb4
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 feea 	bl	8001c50 <_ZN5SHT2117readSHT21HumidityEv>
		sht21.readSHT21Temp();			//TempOutside
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	33b4      	adds	r3, #180	; 0xb4
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 feb3 	bl	8001bec <_ZN5SHT2113readSHT21TempEv>
		fxps7115.fxpReadPressure();		//Pressure
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	33ac      	adds	r3, #172	; 0xac
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f8be 	bl	800100c <_ZN8FXPS711515fxpReadPressureEv>
		max31865.readTemp();			//TempInside
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	33b0      	adds	r3, #176	; 0xb0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f000 f9e7 	bl	8001268 <_ZN13MAX31865_TEMP8readTempEv>

		/*Prepare for Transmit*/

		transmitData[0] = '%';
 8000e9a:	2325      	movs	r3, #37	; 0x25
 8000e9c:	723b      	strb	r3, [r7, #8]
		transmitBuffer = model.getHumidity();
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 fb7b 	bl	800159c <_ZN5Model11getHumidityEv>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		transmitData[1] = transmitBuffer;
 8000eac:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	727b      	strb	r3, [r7, #9]
		transmitData[2] = transmitBuffer>>8;
 8000eb4:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000eb8:	121b      	asrs	r3, r3, #8
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	72bb      	strb	r3, [r7, #10]
		transmitData[3] = '!';
 8000ebe:	2321      	movs	r3, #33	; 0x21
 8000ec0:	72fb      	strb	r3, [r7, #11]
		transmitBuffer = model.getTempOutside();
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 fba6 	bl	8001616 <_ZN5Model14getTempOutsideEv>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		transmitData[4] = transmitBuffer;
 8000ed0:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	733b      	strb	r3, [r7, #12]
		transmitData[5] = transmitBuffer>>8;
 8000ed8:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000edc:	121b      	asrs	r3, r3, #8
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	737b      	strb	r3, [r7, #13]
		transmitData[6] = '!';
 8000ee2:	2321      	movs	r3, #33	; 0x21
 8000ee4:	73bb      	strb	r3, [r7, #14]
		transmitBuffer = model.getPressure();
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 fb77 	bl	80015dc <_ZN5Model11getPressureEv>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		transmitData[7] = transmitBuffer;
 8000ef4:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	73fb      	strb	r3, [r7, #15]
		transmitData[8] = transmitBuffer>>8;
 8000efc:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000f00:	121b      	asrs	r3, r3, #8
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	743b      	strb	r3, [r7, #16]
		transmitData[9] = '!';
 8000f06:	2321      	movs	r3, #33	; 0x21
 8000f08:	747b      	strb	r3, [r7, #17]
		transmitBuffer = model.getTempInsed();
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 fb9f 	bl	8001650 <_ZN5Model12getTempInsedEv>
 8000f12:	4603      	mov	r3, r0
 8000f14:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		transmitData[10] = transmitBuffer;
 8000f18:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	74bb      	strb	r3, [r7, #18]
		transmitData[11] = transmitBuffer>>8;
 8000f20:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000f24:	121b      	asrs	r3, r3, #8
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	74fb      	strb	r3, [r7, #19]
		transmitData[12] = '!';
 8000f2a:	2321      	movs	r3, #33	; 0x21
 8000f2c:	753b      	strb	r3, [r7, #20]
		uint8_t offset = 13;	//Fortlaufend zu vorheriger index
 8000f2e:	230d      	movs	r3, #13
 8000f30:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		uint8_t counter = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
		char* gpsDeviceTemp = model.getGPS_Device();
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 fb11 	bl	8001564 <_ZN5Model13getGPS_DeviceEv>
 8000f42:	66f8      	str	r0, [r7, #108]	; 0x6c
		for(counter = 0; counter < GPS_DATA_SIZE; counter++){
 8000f44:	2300      	movs	r3, #0
 8000f46:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8000f4a:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8000f4e:	2b4f      	cmp	r3, #79	; 0x4f
 8000f50:	d816      	bhi.n	8000f80 <_ZN7AppMain8mainProgEv+0x168>
			transmitData[offset] = gpsDeviceTemp[counter];
 8000f52:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8000f56:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000f58:	441a      	add	r2, r3
 8000f5a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000f5e:	7812      	ldrb	r2, [r2, #0]
 8000f60:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000f64:	440b      	add	r3, r1
 8000f66:	f803 2c70 	strb.w	r2, [r3, #-112]
			offset++;
 8000f6a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000f6e:	3301      	adds	r3, #1
 8000f70:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		for(counter = 0; counter < GPS_DATA_SIZE; counter++){
 8000f74:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8000f78:	3301      	adds	r3, #1
 8000f7a:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8000f7e:	e7e4      	b.n	8000f4a <_ZN7AppMain8mainProgEv+0x132>
		}
		transmitData[offset] = '*';
 8000f80:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000f84:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8000f88:	4413      	add	r3, r2
 8000f8a:	222a      	movs	r2, #42	; 0x2a
 8000f8c:	f803 2c70 	strb.w	r2, [r3, #-112]
		transmitData[offset+1] = '!';
 8000f90:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000f94:	3301      	adds	r3, #1
 8000f96:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8000f9a:	4413      	add	r3, r2
 8000f9c:	2221      	movs	r2, #33	; 0x21
 8000f9e:	f803 2c70 	strb.w	r2, [r3, #-112]

		/*Transmit over USB - use only in GCS*/

		rfm95.rfmTransmit(transmitData);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	33b8      	adds	r3, #184	; 0xb8
 8000fa6:	f107 0208 	add.w	r2, r7, #8
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fbe1 	bl	8001774 <_ZN5RFM9511rfmTransmitEPh>





		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000fb2:	2102      	movs	r1, #2
 8000fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb8:	f001 fddc 	bl	8002b74 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000fbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fc0:	f001 fac2 	bl	8002548 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fca:	f001 fdd3 	bl	8002b74 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000fce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fd2:	f001 fab9 	bl	8002548 <HAL_Delay>

	}
 8000fd6:	e74c      	b.n	8000e72 <_ZN7AppMain8mainProgEv+0x5a>

08000fd8 <_ZN8FXPS7115C1EP5Model>:

#include "FXPS7115.h"



FXPS7115::FXPS7115(Model *model) {
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
	// TODO Auto-generated constructor stub
	this->model = model;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	683a      	ldr	r2, [r7, #0]
 8000fe6:	601a      	str	r2, [r3, #0]
}
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4618      	mov	r0, r3
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <_ZN8FXPS71157fxpInitEv>:



void FXPS7115::fxpInit(){
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]


}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <_ZN8FXPS711515fxpReadPressureEv>:
	return(HAL_I2C_Master_Transmit(&hi2c1,FXP_SLAVE_ADDR<<1,(uint8_t*)txBuffer,1,I2C_Timeout));
}



bool FXPS7115::fxpReadPressure(){
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af04      	add	r7, sp, #16
 8001012:	6078      	str	r0, [r7, #4]
	uint8_t data[2] = {0,0};
 8001014:	2300      	movs	r3, #0
 8001016:	733b      	strb	r3, [r7, #12]
 8001018:	2300      	movs	r3, #0
 800101a:	737b      	strb	r3, [r7, #13]

	if(HAL_I2C_Mem_Read(&hi2c1, FXP_SLAVE_ADDR<<1, FXP_SNSDATA0_L_REG, 1, data, 2, I2C_Timeout) != HAL_OK){
 800101c:	2364      	movs	r3, #100	; 0x64
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	2302      	movs	r3, #2
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2301      	movs	r3, #1
 800102c:	2262      	movs	r2, #98	; 0x62
 800102e:	21c0      	movs	r1, #192	; 0xc0
 8001030:	480f      	ldr	r0, [pc, #60]	; (8001070 <_ZN8FXPS711515fxpReadPressureEv+0x64>)
 8001032:	f002 f831 	bl	8003098 <HAL_I2C_Mem_Read>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	bf14      	ite	ne
 800103c:	2301      	movne	r3, #1
 800103e:	2300      	moveq	r3, #0
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <_ZN8FXPS711515fxpReadPressureEv+0x3e>
		return 0;
 8001046:	2300      	movs	r3, #0
 8001048:	e00d      	b.n	8001066 <_ZN8FXPS711515fxpReadPressureEv+0x5a>
	}

	model->setPressure((data[1]<<8) + data[0]);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6818      	ldr	r0, [r3, #0]
 800104e:	7b7b      	ldrb	r3, [r7, #13]
 8001050:	b29b      	uxth	r3, r3
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	b29a      	uxth	r2, r3
 8001056:	7b3b      	ldrb	r3, [r7, #12]
 8001058:	b29b      	uxth	r3, r3
 800105a:	4413      	add	r3, r2
 800105c:	b29b      	uxth	r3, r3
 800105e:	4619      	mov	r1, r3
 8001060:	f000 faa9 	bl	80015b6 <_ZN5Model11setPressureEt>
	return 1;
 8001064:	2301      	movs	r3, #1
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000680 	.word	0x20000680

08001074 <_ZN3GPSC1EP5Model>:


	//extern UART_HandleTypeDef huart2;


GPS::GPS(Model* model) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	711a      	strb	r2, [r3, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	715a      	strb	r2, [r3, #5]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	this->model = model;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	601a      	str	r2, [r3, #0]
	init();
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 f805 	bl	80010b8 <_ZN3GPS4initEv>
}
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <_ZN3GPS4initEv>:
 *
 * @param none
 * @return none
 *
 */
void GPS::init(){
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < GPS_DATA_SIZE; i++) {
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2b4f      	cmp	r3, #79	; 0x4f
 80010c8:	dc0f      	bgt.n	80010ea <_ZN3GPS4initEv+0x32>
		data[i] = '0';
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	3356      	adds	r3, #86	; 0x56
 80010d2:	2230      	movs	r2, #48	; 0x30
 80010d4:	701a      	strb	r2, [r3, #0]
		GPS_Data[i] = '0';
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4413      	add	r3, r2
 80010dc:	3306      	adds	r3, #6
 80010de:	2230      	movs	r2, #48	; 0x30
 80010e0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < GPS_DATA_SIZE; i++) {
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	3301      	adds	r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	e7ec      	b.n	80010c4 <_ZN3GPS4initEv+0xc>
	}
}
 80010ea:	bf00      	nop
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <_ZN3GPS12gpsInterruptEh>:
*
*
* @param huart UART handle.
* @return None
 */
void GPS::gpsInterrupt(uint8_t rxData) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	70fb      	strb	r3, [r7, #3]
	static uint8_t i = 0;
		/* Receive one byte in interrupt mode */


		/*Check if received byte is a '$' (begin of record) */
		if ((char) rxData == '$') {
 8001104:	78fb      	ldrb	r3, [r7, #3]
 8001106:	2b24      	cmp	r3, #36	; 0x24
 8001108:	d105      	bne.n	8001116 <_ZN3GPS12gpsInterruptEh+0x1e>
			recordStart = true;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2201      	movs	r2, #1
 800110e:	711a      	strb	r2, [r3, #4]
			i = 0;
 8001110:	4b3b      	ldr	r3, [pc, #236]	; (8001200 <_ZN3GPS12gpsInterruptEh+0x108>)
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
		}
		/*Check if received byte is a '\n' (end of record)*/
		if ((char) rxData == '\n') {
 8001116:	78fb      	ldrb	r3, [r7, #3]
 8001118:	2b0a      	cmp	r3, #10
 800111a:	d15a      	bne.n	80011d2 <_ZN3GPS12gpsInterruptEh+0xda>
			recordStart = false;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	711a      	strb	r2, [r3, #4]

			if (i > GPS_DATA_SIZE-10) {
 8001122:	4b37      	ldr	r3, [pc, #220]	; (8001200 <_ZN3GPS12gpsInterruptEh+0x108>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b46      	cmp	r3, #70	; 0x46
 8001128:	d939      	bls.n	800119e <_ZN3GPS12gpsInterruptEh+0xa6>
				copyCounter = 0;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
				for (int i = 0; i < GPS_DATA_SIZE; i++) {
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2b4f      	cmp	r3, #79	; 0x4f
 800113a:	dc09      	bgt.n	8001150 <_ZN3GPS12gpsInterruptEh+0x58>
					GPS_Data[i] = '0';
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4413      	add	r3, r2
 8001142:	3306      	adds	r3, #6
 8001144:	2230      	movs	r2, #48	; 0x30
 8001146:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < GPS_DATA_SIZE; i++) {
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	3301      	adds	r3, #1
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	e7f2      	b.n	8001136 <_ZN3GPS12gpsInterruptEh+0x3e>
				}
				while (data[copyCounter] != '\r' && copyCounter <= 80) {
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8001156:	461a      	mov	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4413      	add	r3, r2
 800115c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001160:	2b0d      	cmp	r3, #13
 8001162:	d01c      	beq.n	800119e <_ZN3GPS12gpsInterruptEh+0xa6>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800116a:	2b50      	cmp	r3, #80	; 0x50
 800116c:	d817      	bhi.n	800119e <_ZN3GPS12gpsInterruptEh+0xa6>
					GPS_Data[copyCounter] = data[copyCounter];
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8001174:	461a      	mov	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800117c:	4619      	mov	r1, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	440b      	add	r3, r1
 800118a:	719a      	strb	r2, [r3, #6]
					copyCounter++;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8001192:	3301      	adds	r3, #1
 8001194:	b2da      	uxtb	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
				while (data[copyCounter] != '\r' && copyCounter <= 80) {
 800119c:	e7d8      	b.n	8001150 <_ZN3GPS12gpsInterruptEh+0x58>
				}
			}
			model->setGPS_Device(GPS_Data);	//set GPS data in Model
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3306      	adds	r3, #6
 80011a6:	4619      	mov	r1, r3
 80011a8:	4610      	mov	r0, r2
 80011aa:	f000 f9cb 	bl	8001544 <_ZN5Model13setGPS_DeviceEPc>
			for (int count = 0; count < GPS_DATA_SIZE; count++) {
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	2b4f      	cmp	r3, #79	; 0x4f
 80011b6:	dc09      	bgt.n	80011cc <_ZN3GPS12gpsInterruptEh+0xd4>
				data[count] = '0';
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	4413      	add	r3, r2
 80011be:	3356      	adds	r3, #86	; 0x56
 80011c0:	2230      	movs	r2, #48	; 0x30
 80011c2:	701a      	strb	r2, [r3, #0]
			for (int count = 0; count < GPS_DATA_SIZE; count++) {
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	3301      	adds	r3, #1
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	e7f2      	b.n	80011b2 <_ZN3GPS12gpsInterruptEh+0xba>
			}
			i = 0;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <_ZN3GPS12gpsInterruptEh+0x108>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
		}

		if (recordStart) {
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	791b      	ldrb	r3, [r3, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d00d      	beq.n	80011f6 <_ZN3GPS12gpsInterruptEh+0xfe>
			data[i] = rxData;
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <_ZN3GPS12gpsInterruptEh+0x108>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	461a      	mov	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4413      	add	r3, r2
 80011e4:	78fa      	ldrb	r2, [r7, #3]
 80011e6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
			i++;
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <_ZN3GPS12gpsInterruptEh+0x108>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	3301      	adds	r3, #1
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4b03      	ldr	r3, [pc, #12]	; (8001200 <_ZN3GPS12gpsInterruptEh+0x108>)
 80011f4:	701a      	strb	r2, [r3, #0]
		}



	}
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200001a8 	.word	0x200001a8

08001204 <_ZN13MAX31865_TEMPC1EP5Model>:

#include "MAX31865TEMP.h"

HAL_StatusTypeDef def;

MAX31865_TEMP::MAX31865_TEMP(Model *model) {
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
	// TODO Auto-generated constructor stub
	this->model = model;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	601a      	str	r2, [r3, #0]
}
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4618      	mov	r0, r3
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <_ZN13MAX31865_TEMP4initEh>:

void MAX31865_TEMP::init(uint8_t wires){
 8001222:	b580      	push	{r7, lr}
 8001224:	b084      	sub	sp, #16
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	460b      	mov	r3, r1
 800122c:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[1];
 HAL_Delay(100);
 800122e:	2064      	movs	r0, #100	; 0x64
 8001230:	f001 f98a 	bl	8002548 <HAL_Delay>
  setWires(wires);           // Set 2,3 or 4 wire sensor
 8001234:	78fb      	ldrb	r3, [r7, #3]
 8001236:	4619      	mov	r1, r3
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 f91c 	bl	8001476 <_ZN13MAX31865_TEMP8setWiresEh>
  HAL_Delay(100);
 800123e:	2064      	movs	r0, #100	; 0x64
 8001240:	f001 f982 	bl	8002548 <HAL_Delay>
  enableBias(OFF);           // Disable bias voltage
 8001244:	2100      	movs	r1, #0
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 f8de 	bl	8001408 <_ZN13MAX31865_TEMP10enableBiasEh>
  HAL_Delay(100);
 800124c:	2064      	movs	r0, #100	; 0x64
 800124e:	f001 f97b 	bl	8002548 <HAL_Delay>
  autoConvert(OFF);          // Disable auto conversion
 8001252:	2100      	movs	r1, #0
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 f8e9 	bl	800142c <_ZN13MAX31865_TEMP11autoConvertEh>
  HAL_Delay(100);
 800125a:	2064      	movs	r0, #100	; 0x64
 800125c:	f001 f974 	bl	8002548 <HAL_Delay>

}
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <_ZN13MAX31865_TEMP8readTempEv>:


bool MAX31865_TEMP::readTemp(){
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b089      	sub	sp, #36	; 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]

	uint8_t buff[1];
	MAX31865_read(0x07, buff, 1);
 8001270:	f107 0210 	add.w	r2, r7, #16
 8001274:	2301      	movs	r3, #1
 8001276:	2107      	movs	r1, #7
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 f863 	bl	8001344 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh>

    // Activate bias voltage to read sensor data, and wait for the capacitors to fill
    enableBias(ON);
 800127e:	2101      	movs	r1, #1
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 f8c1 	bl	8001408 <_ZN13MAX31865_TEMP10enableBiasEh>
    HAL_Delay(20);
 8001286:	2014      	movs	r0, #20
 8001288:	f001 f95e 	bl	8002548 <HAL_Delay>
    // Perform a single conversion, and wait for the result
    single_shot();
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 f917 	bl	80014c0 <_ZN13MAX31865_TEMP11single_shotEv>
    HAL_Delay(100);
 8001292:	2064      	movs	r0, #100	; 0x64
 8001294:	f001 f958 	bl	8002548 <HAL_Delay>
    // Read data from max31865 data registers
    uint8_t buffer[2];
     MAX31865_read(MAX31856_RTDMSB_REG, buffer,2);
 8001298:	f107 020c 	add.w	r2, r7, #12
 800129c:	2302      	movs	r3, #2
 800129e:	2101      	movs	r1, #1
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f000 f84f 	bl	8001344 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh>
    // Combine 2 bytes into 1 number, and shift 1 down to remove fault bit
    uint16_t data = buffer[0] << 8;
 80012a6:	7b3b      	ldrb	r3, [r7, #12]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	021b      	lsls	r3, r3, #8
 80012ac:	83fb      	strh	r3, [r7, #30]
    data |= buffer[1];
 80012ae:	7b7b      	ldrb	r3, [r7, #13]
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	8bfb      	ldrh	r3, [r7, #30]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	83fb      	strh	r3, [r7, #30]



    // Disable bias voltage to reduce power usage
    enableBias(OFF);
 80012b8:	2100      	movs	r1, #0
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 f8a4 	bl	8001408 <_ZN13MAX31865_TEMP10enableBiasEh>


    // Calculate the actual resistance of the sensor
    float resistance = ((float) data * RREF) / FACTOR;
 80012c0:	8bfb      	ldrh	r3, [r7, #30]
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ca:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001338 <_ZN13MAX31865_TEMP8readTempEv+0xd0>
 80012ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012d2:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800133c <_ZN13MAX31865_TEMP8readTempEv+0xd4>
 80012d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012da:	edc7 7a06 	vstr	s15, [r7, #24]
    // Calculate the temperature from the measured resistance
    float temp = ((resistance / 100) - 1) / ALPHA;
 80012de:	ed97 7a06 	vldr	s14, [r7, #24]
 80012e2:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001340 <_ZN13MAX31865_TEMP8readTempEv+0xd8>
 80012e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012f2:	ee17 0a90 	vmov	r0, s15
 80012f6:	f7ff f8cf 	bl	8000498 <__aeabi_f2d>
 80012fa:	a30d      	add	r3, pc, #52	; (adr r3, 8001330 <_ZN13MAX31865_TEMP8readTempEv+0xc8>)
 80012fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001300:	f7ff fa4c 	bl	800079c <__aeabi_ddiv>
 8001304:	4603      	mov	r3, r0
 8001306:	460c      	mov	r4, r1
 8001308:	4618      	mov	r0, r3
 800130a:	4621      	mov	r1, r4
 800130c:	f7ff fb2e 	bl	800096c <__aeabi_d2f>
 8001310:	4603      	mov	r3, r0
 8001312:	617b      	str	r3, [r7, #20]



	model->setTempInside(data);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	8bfa      	ldrh	r2, [r7, #30]
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f987 	bl	8001630 <_ZN5Model13setTempInsideEt>
	return true;
 8001322:	2301      	movs	r3, #1
}
 8001324:	4618      	mov	r0, r3
 8001326:	3724      	adds	r7, #36	; 0x24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd90      	pop	{r4, r7, pc}
 800132c:	f3af 8000 	nop.w
 8001330:	e1d2178f 	.word	0xe1d2178f
 8001334:	3f6f8c21 	.word	0x3f6f8c21
 8001338:	43c30000 	.word	0x43c30000
 800133c:	47000000 	.word	0x47000000
 8001340:	42c80000 	.word	0x42c80000

08001344 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh>:
 * @param addr      Register addr to read from
 * @param buffer    Pointer to rx buffer
 * @param len       Amount of bytes to read
 */
void MAX31865_TEMP::MAX31865_read(uint8_t addr, uint8_t *buffer, uint8_t size)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	461a      	mov	r2, r3
 8001350:	460b      	mov	r3, r1
 8001352:	72fb      	strb	r3, [r7, #11]
 8001354:	4613      	mov	r3, r2
 8001356:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef test;
	uint8_t txBuffer[1];
    addr &= ~MAX31865_READ;                             		// Force read bit on address
    txBuffer[0] = addr;
 8001358:	7afb      	ldrb	r3, [r7, #11]
 800135a:	753b      	strb	r3, [r7, #20]
    CLEAR_MAX_CS;          										// Enable CE
 800135c:	2200      	movs	r2, #0
 800135e:	2101      	movs	r1, #1
 8001360:	480f      	ldr	r0, [pc, #60]	; (80013a0 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh+0x5c>)
 8001362:	f001 fbef 	bl	8002b44 <HAL_GPIO_WritePin>
    test = HAL_SPI_Transmit(&hspi1,(uint8_t*)txBuffer,1,500);	//write addr
 8001366:	f107 0114 	add.w	r1, r7, #20
 800136a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800136e:	2201      	movs	r2, #1
 8001370:	480c      	ldr	r0, [pc, #48]	; (80013a4 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh+0x60>)
 8001372:	f004 faa7 	bl	80058c4 <HAL_SPI_Transmit>
 8001376:	4603      	mov	r3, r0
 8001378:	75fb      	strb	r3, [r7, #23]
    test =HAL_SPI_Receive(&hspi1,(uint8_t*)buffer,size,500);	// Read data
 800137a:	7abb      	ldrb	r3, [r7, #10]
 800137c:	b29a      	uxth	r2, r3
 800137e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	4807      	ldr	r0, [pc, #28]	; (80013a4 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh+0x60>)
 8001386:	f004 fc03 	bl	8005b90 <HAL_SPI_Receive>
 800138a:	4603      	mov	r3, r0
 800138c:	75fb      	strb	r3, [r7, #23]
    SET_MAX_CS;          										// Disable CE
 800138e:	2201      	movs	r2, #1
 8001390:	2101      	movs	r1, #1
 8001392:	4803      	ldr	r0, [pc, #12]	; (80013a0 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh+0x5c>)
 8001394:	f001 fbd6 	bl	8002b44 <HAL_GPIO_WritePin>
}
 8001398:	bf00      	nop
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	48000400 	.word	0x48000400
 80013a4:	200006cc 	.word	0x200006cc

080013a8 <_ZN13MAX31865_TEMP14MAX31865_writeEhh>:
 * Write a byte in a MAX13865 register
 *
 * @param addr      Register addr to write to
 * @param buffer    Tx data
 */
void MAX31865_TEMP::MAX31865_write(uint8_t addr, uint8_t data){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	70fb      	strb	r3, [r7, #3]
 80013b4:	4613      	mov	r3, r2
 80013b6:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef test;

	uint8_t txBuffer[2];

	addr |= MAX31865_WRITE;                             // Force write bit on address
 80013b8:	78fb      	ldrb	r3, [r7, #3]
 80013ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013be:	70fb      	strb	r3, [r7, #3]
    txBuffer[0] = addr;
 80013c0:	78fb      	ldrb	r3, [r7, #3]
 80013c2:	733b      	strb	r3, [r7, #12]
    txBuffer[1] = data;
 80013c4:	78bb      	ldrb	r3, [r7, #2]
 80013c6:	737b      	strb	r3, [r7, #13]
    CLEAR_MAX_CS; 									    // Enable CE
 80013c8:	2200      	movs	r2, #0
 80013ca:	2101      	movs	r1, #1
 80013cc:	480c      	ldr	r0, [pc, #48]	; (8001400 <_ZN13MAX31865_TEMP14MAX31865_writeEhh+0x58>)
 80013ce:	f001 fbb9 	bl	8002b44 <HAL_GPIO_WritePin>
    test = HAL_SPI_Transmit(&hspi1,(uint8_t*)txBuffer,2,500);				//write addr
 80013d2:	f107 010c 	add.w	r1, r7, #12
 80013d6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013da:	2202      	movs	r2, #2
 80013dc:	4809      	ldr	r0, [pc, #36]	; (8001404 <_ZN13MAX31865_TEMP14MAX31865_writeEhh+0x5c>)
 80013de:	f004 fa71 	bl	80058c4 <HAL_SPI_Transmit>
 80013e2:	4603      	mov	r3, r0
 80013e4:	73fb      	strb	r3, [r7, #15]

    SET_MAX_CS;          								// Disable CE
 80013e6:	2201      	movs	r2, #1
 80013e8:	2101      	movs	r1, #1
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <_ZN13MAX31865_TEMP14MAX31865_writeEhh+0x58>)
 80013ec:	f001 fbaa 	bl	8002b44 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80013f0:	200a      	movs	r0, #10
 80013f2:	f001 f8a9 	bl	8002548 <HAL_Delay>
}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	48000400 	.word	0x48000400
 8001404:	200006cc 	.word	0x200006cc

08001408 <_ZN13MAX31865_TEMP10enableBiasEh>:
/**
 * Enable of disable MAX831865 bias voltage
 * @param enable Enable of disable
 */
void MAX31865_TEMP::enableBias(uint8_t enable)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	70fb      	strb	r3, [r7, #3]
        status |= MAX31856_CONFIG_BIAS;
    } else
    {
        status &= ~MAX31856_CONFIG_BIAS;
    }*/
    status = 0x80;
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	73fb      	strb	r3, [r7, #15]
    MAX31865_write(MAX31856_CONFIG_REG, status);
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	461a      	mov	r2, r3
 800141c:	2100      	movs	r1, #0
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ffc2 	bl	80013a8 <_ZN13MAX31865_TEMP14MAX31865_writeEhh>
}
 8001424:	bf00      	nop
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <_ZN13MAX31865_TEMP11autoConvertEh>:
/**
 * Enable of disable MAX831865 auto convert
 * @param enable Enable of disable
 */
void MAX31865_TEMP::autoConvert(uint8_t enable)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	70fb      	strb	r3, [r7, #3]
    uint8_t status;
    MAX31865_read(MAX31856_CONFIG_REG, &status,1);
 8001438:	f107 020f 	add.w	r2, r7, #15
 800143c:	2301      	movs	r3, #1
 800143e:	2100      	movs	r1, #0
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ff7f 	bl	8001344 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh>
    if (enable)
 8001446:	78fb      	ldrb	r3, [r7, #3]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d005      	beq.n	8001458 <_ZN13MAX31865_TEMP11autoConvertEh+0x2c>
    {
        status |= MAX31856_CONFIG_MODEAUTO;
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001452:	b2db      	uxtb	r3, r3
 8001454:	73fb      	strb	r3, [r7, #15]
 8001456:	e004      	b.n	8001462 <_ZN13MAX31865_TEMP11autoConvertEh+0x36>
    } else
    {
        status &= ~MAX31856_CONFIG_MODEAUTO;
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800145e:	b2db      	uxtb	r3, r3
 8001460:	73fb      	strb	r3, [r7, #15]
    }
    MAX31865_write(MAX31856_CONFIG_REG, status);
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	461a      	mov	r2, r3
 8001466:	2100      	movs	r1, #0
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ff9d 	bl	80013a8 <_ZN13MAX31865_TEMP14MAX31865_writeEhh>
}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <_ZN13MAX31865_TEMP8setWiresEh>:
/**
 * Set the amount of wires the temperature sensor uses
 * @param numwires 2,3 or 4 wires
 */
void MAX31865_TEMP::setWires(uint8_t numwires)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	460b      	mov	r3, r1
 8001480:	70fb      	strb	r3, [r7, #3]
    uint8_t status;
    MAX31865_read(MAX31856_CONFIG_REG, &status,1);
 8001482:	f107 020f 	add.w	r2, r7, #15
 8001486:	2301      	movs	r3, #1
 8001488:	2100      	movs	r1, #0
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ff5a 	bl	8001344 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh>
    if (numwires == 3) // 3-wire
 8001490:	78fb      	ldrb	r3, [r7, #3]
 8001492:	2b03      	cmp	r3, #3
 8001494:	d105      	bne.n	80014a2 <_ZN13MAX31865_TEMP8setWiresEh+0x2c>
    {
        status |= MAX31856_CONFIG_3WIRE;
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	f043 0310 	orr.w	r3, r3, #16
 800149c:	b2db      	uxtb	r3, r3
 800149e:	73fb      	strb	r3, [r7, #15]
 80014a0:	e004      	b.n	80014ac <_ZN13MAX31865_TEMP8setWiresEh+0x36>
    } else // 2-4 wire
    {
        status &= ~MAX31856_CONFIG_3WIRE;
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	f023 0310 	bic.w	r3, r3, #16
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	73fb      	strb	r3, [r7, #15]
    }
    MAX31865_write(MAX31856_CONFIG_REG, status);
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	461a      	mov	r2, r3
 80014b0:	2100      	movs	r1, #0
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ff78 	bl	80013a8 <_ZN13MAX31865_TEMP14MAX31865_writeEhh>
}
 80014b8:	bf00      	nop
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <_ZN13MAX31865_TEMP11single_shotEv>:

/**
 * Perform a single shot conversion
 */
void MAX31865_TEMP::single_shot(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
    uint8_t status;
    // Read config register
   // MAX31865_read(MAX31856_CONFIG_REG, &status,1);
    // Enable 1shot bit, and write back
    //status = MAX31856_CONFIG_1SHOT;
    status = 0xA0;
 80014c8:	23a0      	movs	r3, #160	; 0xa0
 80014ca:	73fb      	strb	r3, [r7, #15]
    MAX31865_write(MAX31856_CONFIG_REG, status);
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	461a      	mov	r2, r3
 80014d0:	2100      	movs	r1, #0
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ff68 	bl	80013a8 <_ZN13MAX31865_TEMP14MAX31865_writeEhh>
}
 80014d8:	bf00      	nop
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <_ZN5ModelC1Ev>:
 *      Author: marce
 */

#include "Model.h"

Model::Model() {
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

	for(uint8_t counter = 0; counter<GPS_DATA_SIZE; counter++){
 80014e8:	2300      	movs	r3, #0
 80014ea:	73fb      	strb	r3, [r7, #15]
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	2b4f      	cmp	r3, #79	; 0x4f
 80014f0:	d80d      	bhi.n	800150e <_ZN5ModelC1Ev+0x2e>
		 gpsGCS[counter] = 11;
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	210b      	movs	r1, #11
 80014f8:	54d1      	strb	r1, [r2, r3]
		 gpsDevice[counter] = 22;
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	4413      	add	r3, r2
 8001500:	2216      	movs	r2, #22
 8001502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	for(uint8_t counter = 0; counter<GPS_DATA_SIZE; counter++){
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	3301      	adds	r3, #1
 800150a:	73fb      	strb	r3, [r7, #15]
 800150c:	e7ee      	b.n	80014ec <_ZN5ModelC1Ev+0xc>
	}
	 humidity = 0;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	 pressure = 0;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	 tempOutisde = 0;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	 tempOutisde8Bit = 0;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
	 tempInside = 0;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4618      	mov	r0, r3
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <_ZN5Model13setGPS_DeviceEPc>:
	//not implemented in Device
	return gpsGCS;
}

//get/set GPS_Device Data
void Model::setGPS_Device(char* data){
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
	strncpy(gpsDevice, data, GPS_DATA_SIZE);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3350      	adds	r3, #80	; 0x50
 8001552:	2250      	movs	r2, #80	; 0x50
 8001554:	6839      	ldr	r1, [r7, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f009 fa0a 	bl	800a970 <strncpy>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <_ZN5Model13getGPS_DeviceEv>:
char* Model::getGPS_Device(void){
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	return gpsDevice;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3350      	adds	r3, #80	; 0x50
}
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <_ZN5Model11setHumidityEt>:

//get/set Humidity
void Model::setHumidity(uint16_t data){
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	807b      	strh	r3, [r7, #2]
	humidity = data;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	887a      	ldrh	r2, [r7, #2]
 800158c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <_ZN5Model11getHumidityEv>:
uint16_t Model::getHumidity(void){
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	return humidity;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <_ZN5Model11setPressureEt>:

//get/set Pressure
void Model::setPressure(uint16_t data){
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
 80015be:	460b      	mov	r3, r1
 80015c0:	807b      	strh	r3, [r7, #2]
	pressure = (data -32768);
 80015c2:	887b      	ldrh	r3, [r7, #2]
 80015c4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <_ZN5Model11getPressureEv>:
uint16_t Model::getPressure(void){
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	return pressure;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <_ZN5Model14setTempOutsideEt>:

//get/set TempOutise
void Model::setTempOutside(uint16_t data){
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	460b      	mov	r3, r1
 8001600:	807b      	strh	r3, [r7, #2]
	tempOutisde = data;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	887a      	ldrh	r2, [r7, #2]
 8001606:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <_ZN5Model14getTempOutsideEv>:
uint16_t Model::getTempOutside(void){
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
	return tempOutisde;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <_ZN5Model13setTempInsideEt>:
uint8_t  Model::getTempOutside8Bit(){
	return tempOutisde8Bit;
}

//get/set TempInside
void Model::setTempInside(uint16_t data){
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	807b      	strh	r3, [r7, #2]
	tempInside = data;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	887a      	ldrh	r2, [r7, #2]
 8001640:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_ZN5Model12getTempInsedEv>:
uint16_t Model::getTempInsed(void){
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	return tempInside;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
}
 800165e:	4618      	mov	r0, r3
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <_ZN5RFM95C1Ev>:
 */

#include "RFM95.h"
#include "../AppMain/AppMain.h"

RFM95::RFM95() {
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3346      	adds	r3, #70	; 0x46
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fa85 	bl	8001b86 <_ZN5StackC1Ev>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	// TODO Auto-generated constructor stub
	userOutputPower = 0;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
}
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <_ZN5RFM957initRFMEtNS_15SPI_HW_SETTINGSENS_16GPIO_HW_SETTINGSE>:



RFM95::RFM_INIT_Typedef RFM95::initRFM(uint16_t maxPayloadLength, SPI_HW_SETTINGS spiHwSettings, GPIO_HW_SETTINGS gpioHwSettings){
 8001698:	b082      	sub	sp, #8
 800169a:	b5b0      	push	{r4, r5, r7, lr}
 800169c:	b088      	sub	sp, #32
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80016a6:	e880 000c 	stmia.w	r0, {r2, r3}
 80016aa:	460b      	mov	r3, r1
 80016ac:	807b      	strh	r3, [r7, #2]
	this->spiHwSettings = spiHwSettings;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80016b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80016b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		this->gpioHwSettings = gpioHwSettings;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f103 040c 	add.w	r4, r3, #12
 80016c0:	f107 053c 	add.w	r5, r7, #60	; 0x3c
 80016c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80016d4:	e884 0003 	stmia.w	r4, {r0, r1}
		this->payloadLength = maxPayloadLength;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	887a      	ldrh	r2, [r7, #2]
 80016dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

		if(payloadLength > 1024){
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ea:	d901      	bls.n	80016f0 <_ZN5RFM957initRFMEtNS_15SPI_HW_SETTINGSENS_16GPIO_HW_SETTINGSE+0x58>
			return RFM_PAYLOAD_ERROR;	//payload length size too big
 80016ec:	2301      	movs	r3, #1
 80016ee:	e037      	b.n	8001760 <_ZN5RFM957initRFMEtNS_15SPI_HW_SETTINGSENS_16GPIO_HW_SETTINGSE+0xc8>
		}

		resetRFM();
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 fa14 	bl	8001b1e <_ZN5RFM958resetRFMEv>
//
	const uint8_t CONFIG[][2] ={
 80016f6:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <_ZN5RFM957initRFMEtNS_15SPI_HW_SETTINGSENS_16GPIO_HW_SETTINGSE+0xd8>)
 80016f8:	f107 040c 	add.w	r4, r7, #12
 80016fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//
		{255,0}
	};
//
//	//write config array
	  for (uint8_t i = 0;CONFIG[i][0] != 255; i++){
 8001702:	2300      	movs	r3, #0
 8001704:	77fb      	strb	r3, [r7, #31]
 8001706:	7ffb      	ldrb	r3, [r7, #31]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	f107 0220 	add.w	r2, r7, #32
 800170e:	4413      	add	r3, r2
 8001710:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001714:	2bff      	cmp	r3, #255	; 0xff
 8001716:	d01f      	beq.n	8001758 <_ZN5RFM957initRFMEtNS_15SPI_HW_SETTINGSENS_16GPIO_HW_SETTINGSE+0xc0>
		  if(writeReg(CONFIG[i][0], CONFIG[i][1]) == HAL_ERROR){
 8001718:	7ffb      	ldrb	r3, [r7, #31]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	f107 0220 	add.w	r2, r7, #32
 8001720:	4413      	add	r3, r2
 8001722:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 8001726:	7ffb      	ldrb	r3, [r7, #31]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	f107 0220 	add.w	r2, r7, #32
 800172e:	4413      	add	r3, r2
 8001730:	f813 3c13 	ldrb.w	r3, [r3, #-19]
 8001734:	461a      	mov	r2, r3
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 f898 	bl	800186c <_ZN5RFM958writeRegEhh>
 800173c:	4603      	mov	r3, r0
 800173e:	2b01      	cmp	r3, #1
 8001740:	bf0c      	ite	eq
 8001742:	2301      	moveq	r3, #1
 8001744:	2300      	movne	r3, #0
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <_ZN5RFM957initRFMEtNS_15SPI_HW_SETTINGSENS_16GPIO_HW_SETTINGSE+0xb8>
			return RFM_INIT_FAIL;
 800174c:	2302      	movs	r3, #2
 800174e:	e007      	b.n	8001760 <_ZN5RFM957initRFMEtNS_15SPI_HW_SETTINGSENS_16GPIO_HW_SETTINGSE+0xc8>
	  for (uint8_t i = 0;CONFIG[i][0] != 255; i++){
 8001750:	7ffb      	ldrb	r3, [r7, #31]
 8001752:	3301      	adds	r3, #1
 8001754:	77fb      	strb	r3, [r7, #31]
 8001756:	e7d6      	b.n	8001706 <_ZN5RFM957initRFMEtNS_15SPI_HW_SETTINGSENS_16GPIO_HW_SETTINGSE+0x6e>
		  }
	  }

	 rcCalibration();
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 fa00 	bl	8001b5e <_ZN5RFM9513rcCalibrationEv>
	 return RFM_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3720      	adds	r7, #32
 8001764:	46bd      	mov	sp, r7
 8001766:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800176a:	b002      	add	sp, #8
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	0800a9b4 	.word	0x0800a9b4

08001774 <_ZN5RFM9511rfmTransmitEPh>:


void RFM95::rfmTransmit(uint8_t* data){
 8001774:	b580      	push	{r7, lr}
 8001776:	b09e      	sub	sp, #120	; 0x78
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
	setMode(STANDBY);	// set Standby Mode
 800177e:	2101      	movs	r1, #1
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 f8eb 	bl	800195c <_ZN5RFM957setModeENS_4MODEE>

	uint8_t fifoState1 = readReg(REG_IRQ_FLAGS_1);
 8001786:	213e      	movs	r1, #62	; 0x3e
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f89e 	bl	80018ca <_ZN5RFM957readRegEh>
 800178e:	4603      	mov	r3, r0
 8001790:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	uint8_t fifoState3 = readReg(REG_IRQ_FLAGS_2);
 8001794:	213f      	movs	r1, #63	; 0x3f
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f897 	bl	80018ca <_ZN5RFM957readRegEh>
 800179c:	4603      	mov	r3, r0
 800179e:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72

	uint8_t localData[100];
	for(int i = 0; i<50; i++){
 80017a2:	2300      	movs	r3, #0
 80017a4:	677b      	str	r3, [r7, #116]	; 0x74
 80017a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017a8:	2b31      	cmp	r3, #49	; 0x31
 80017aa:	dc0d      	bgt.n	80017c8 <_ZN5RFM9511rfmTransmitEPh+0x54>
		localData[i] = data[i];
 80017ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	4413      	add	r3, r2
 80017b2:	7819      	ldrb	r1, [r3, #0]
 80017b4:	f107 020c 	add.w	r2, r7, #12
 80017b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017ba:	4413      	add	r3, r2
 80017bc:	460a      	mov	r2, r1
 80017be:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<50; i++){
 80017c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017c2:	3301      	adds	r3, #1
 80017c4:	677b      	str	r3, [r7, #116]	; 0x74
 80017c6:	e7ee      	b.n	80017a6 <_ZN5RFM9511rfmTransmitEPh+0x32>
	}
	writeFIFO(localData);	//write data to RFM fifo
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	4619      	mov	r1, r3
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f89e 	bl	8001910 <_ZN5RFM959writeFIFOEPh>

	 fifoState1 = readReg(REG_IRQ_FLAGS_1);
 80017d4:	213e      	movs	r1, #62	; 0x3e
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 f877 	bl	80018ca <_ZN5RFM957readRegEh>
 80017dc:	4603      	mov	r3, r0
 80017de:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	 fifoState3 = readReg(REG_IRQ_FLAGS_2);
 80017e2:	213f      	movs	r1, #63	; 0x3f
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f870 	bl	80018ca <_ZN5RFM957readRegEh>
 80017ea:	4603      	mov	r3, r0
 80017ec:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72

	setMode(TX);		// set TX Mode
 80017f0:	2103      	movs	r1, #3
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f8b2 	bl	800195c <_ZN5RFM957setModeENS_4MODEE>
	readGPIO(0);		// wait until packet is sent
 80017f8:	2100      	movs	r1, #0
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f904 	bl	8001a08 <_ZN5RFM958readGPIOEh>
	setMode(STANDBY);	// set Standby Mode
 8001800:	2101      	movs	r1, #1
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 f8aa 	bl	800195c <_ZN5RFM957setModeENS_4MODEE>

	 fifoState1 = readReg(REG_IRQ_FLAGS_1);
 8001808:	213e      	movs	r1, #62	; 0x3e
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f85d 	bl	80018ca <_ZN5RFM957readRegEh>
 8001810:	4603      	mov	r3, r0
 8001812:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	 fifoState3 = readReg(REG_IRQ_FLAGS_2);
 8001816:	213f      	movs	r1, #63	; 0x3f
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f856 	bl	80018ca <_ZN5RFM957readRegEh>
 800181e:	4603      	mov	r3, r0
 8001820:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72

}
 8001824:	bf00      	nop
 8001826:	3778      	adds	r7, #120	; 0x78
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <_ZN5RFM959selectRFMEv>:
 * @brief RFM95 chip select
 *
 * @param none
 * @return none
 */
void RFM95::selectRFM(){
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(spiHwSettings.gpioPort,spiHwSettings.gpioPin, GPIO_PIN_RESET);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6858      	ldr	r0, [r3, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	891b      	ldrh	r3, [r3, #8]
 800183c:	2200      	movs	r2, #0
 800183e:	4619      	mov	r1, r3
 8001840:	f001 f980 	bl	8002b44 <HAL_GPIO_WritePin>
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <_ZN5RFM9511deselectRFMEv>:
 * @brief RFM95 chip deselect
 *
 * @param none
 * @return none
 */
void RFM95::deselectRFM(){
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(spiHwSettings.gpioPort,spiHwSettings.gpioPin, GPIO_PIN_SET);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6858      	ldr	r0, [r3, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	891b      	ldrh	r3, [r3, #8]
 800185c:	2201      	movs	r2, #1
 800185e:	4619      	mov	r1, r3
 8001860:	f001 f970 	bl	8002b44 <HAL_GPIO_WritePin>
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <_ZN5RFM958writeRegEhh>:
 * @param addr specific register address
 * @param data data to be written
 *
 * @return none
 */
HAL_StatusTypeDef RFM95::writeReg(uint8_t addr, uint8_t data){
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	70fb      	strb	r3, [r7, #3]
 8001878:	4613      	mov	r3, r2
 800187a:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2] = {(uint8_t)(addr | 0x80), data};
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001882:	b2db      	uxtb	r3, r3
 8001884:	733b      	strb	r3, [r7, #12]
 8001886:	78bb      	ldrb	r3, [r7, #2]
 8001888:	737b      	strb	r3, [r7, #13]
	selectRFM();
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff ffce 	bl	800182c <_ZN5RFM959selectRFMEv>
	if(HAL_SPI_Transmit(spiHwSettings.hspi, (uint8_t*)buff, 2, SPI_TIMEOUT) != HAL_OK){
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6818      	ldr	r0, [r3, #0]
 8001894:	f107 010c 	add.w	r1, r7, #12
 8001898:	2364      	movs	r3, #100	; 0x64
 800189a:	2202      	movs	r2, #2
 800189c:	f004 f812 	bl	80058c4 <HAL_SPI_Transmit>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	bf14      	ite	ne
 80018a6:	2301      	movne	r3, #1
 80018a8:	2300      	moveq	r3, #0
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d004      	beq.n	80018ba <_ZN5RFM958writeRegEhh+0x4e>
		deselectRFM();
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ffcb 	bl	800184c <_ZN5RFM9511deselectRFMEv>
		return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e003      	b.n	80018c2 <_ZN5RFM958writeRegEhh+0x56>
	}
	deselectRFM();
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ffc6 	bl	800184c <_ZN5RFM9511deselectRFMEv>
	return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <_ZN5RFM957readRegEh>:
 * @param addr specific register address
 * @return data from register
 *
 * @return none
 */
uint8_t RFM95::readReg(uint8_t addr){
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b086      	sub	sp, #24
 80018ce:	af02      	add	r7, sp, #8
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	460b      	mov	r3, r1
 80018d4:	70fb      	strb	r3, [r7, #3]
	uint8_t rxData[2] = {0,0};
 80018d6:	2300      	movs	r3, #0
 80018d8:	733b      	strb	r3, [r7, #12]
 80018da:	2300      	movs	r3, #0
 80018dc:	737b      	strb	r3, [r7, #13]
	uint8_t txData[1] = {addr};
 80018de:	78fb      	ldrb	r3, [r7, #3]
 80018e0:	723b      	strb	r3, [r7, #8]

	selectRFM();
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ffa2 	bl	800182c <_ZN5RFM959selectRFMEv>
		HAL_SPI_TransmitReceive(spiHwSettings.hspi,(uint8_t*)txData,(uint8_t*)rxData,2,100);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	f107 020c 	add.w	r2, r7, #12
 80018f0:	f107 0108 	add.w	r1, r7, #8
 80018f4:	2364      	movs	r3, #100	; 0x64
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	2302      	movs	r3, #2
 80018fa:	f004 fa71 	bl	8005de0 <HAL_SPI_TransmitReceive>
	deselectRFM();
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ffa4 	bl	800184c <_ZN5RFM9511deselectRFMEv>
	return rxData[1];
 8001904:	7b7b      	ldrb	r3, [r7, #13]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <_ZN5RFM959writeFIFOEPh>:
 * @brief write data to RFM95 FIFO
 *
 * @param uint8_t data array
 * @return status successful/not successful (true/false)
 */
RFM95::RFM_INIT_Typedef RFM95::writeFIFO(uint8_t* data){
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
	uint8_t addr[1] = {0x80 | REG_FIFO};
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	753b      	strb	r3, [r7, #20]
	uint16_t dataSize = sizeof(data)/sizeof(data[0]);
 800191e:	2304      	movs	r3, #4
 8001920:	82fb      	strh	r3, [r7, #22]


	uint8_t txData[5] = {0x80,0x11,0x22,0x33,0x44};
 8001922:	4a0d      	ldr	r2, [pc, #52]	; (8001958 <_ZN5RFM959writeFIFOEPh+0x48>)
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	e892 0003 	ldmia.w	r2, {r0, r1}
 800192c:	6018      	str	r0, [r3, #0]
 800192e:	3304      	adds	r3, #4
 8001930:	7019      	strb	r1, [r3, #0]
	selectRFM();
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff ff7a 	bl	800182c <_ZN5RFM959selectRFMEv>
	HAL_SPI_Transmit(spiHwSettings.hspi, txData, 5, SPI_TIMEOUT);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	f107 010c 	add.w	r1, r7, #12
 8001940:	2364      	movs	r3, #100	; 0x64
 8001942:	2205      	movs	r2, #5
 8001944:	f003 ffbe 	bl	80058c4 <HAL_SPI_Transmit>
	deselectRFM();
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ff7f 	bl	800184c <_ZN5RFM9511deselectRFMEv>
	return RFM_OK;
 800194e:	2300      	movs	r3, #0
		HAL_SPI_Transmit(spiHwSettings.hspi, addr, 1, SPI_TIMEOUT);
		HAL_SPI_Transmit(spiHwSettings.hspi, data, dataSize, SPI_TIMEOUT);
		deselectRFM();
		return RFM_OK;
	}*/
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	0800a9c4 	.word	0x0800a9c4

0800195c <_ZN5RFM957setModeENS_4MODEE>:
	}
	deselectRFM();
}


void RFM95::setMode(MODE mode){
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	70fb      	strb	r3, [r7, #3]
	if(currentMode != mode){
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 3146 	ldrb.w	r3, [r3, #326]	; 0x146
 800196e:	78fa      	ldrb	r2, [r7, #3]
 8001970:	429a      	cmp	r2, r3
 8001972:	d044      	beq.n	80019fe <_ZN5RFM957setModeENS_4MODEE+0xa2>
		switch (mode){
 8001974:	78fb      	ldrb	r3, [r7, #3]
 8001976:	2b03      	cmp	r3, #3
 8001978:	d00c      	beq.n	8001994 <_ZN5RFM957setModeENS_4MODEE+0x38>
 800197a:	2b05      	cmp	r3, #5
 800197c:	d000      	beq.n	8001980 <_ZN5RFM957setModeENS_4MODEE+0x24>
		case TX:
			writeReg(REG_DIO_MAPPING_1, RF_DIO_0_TX_PACKETSENT | RF_DIO_1_ALL_FIFOFULL | RF_DIO_3_TX_TX_RDY);
			setOutputPower(userOutputPower);
			break;
		default:
			break;
 800197e:	e016      	b.n	80019ae <_ZN5RFM957setModeENS_4MODEE+0x52>
			writeReg(REG_DIO_MAPPING_1, RF_DIO_0_RX_PAYLOADRDY | RF_DIO_1_ALL_FIFOEMPTY | RF_DIO_2_RX_RX_RDY);
 8001980:	2214      	movs	r2, #20
 8001982:	2140      	movs	r1, #64	; 0x40
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ff71 	bl	800186c <_ZN5RFM958writeRegEhh>
			setOutputPower(0);
 800198a:	2100      	movs	r1, #0
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 f89b 	bl	8001ac8 <_ZN5RFM9514setOutputPowerEh>
			break;
 8001992:	e00c      	b.n	80019ae <_ZN5RFM957setModeENS_4MODEE+0x52>
			writeReg(REG_DIO_MAPPING_1, RF_DIO_0_TX_PACKETSENT | RF_DIO_1_ALL_FIFOFULL | RF_DIO_3_TX_TX_RDY);
 8001994:	2221      	movs	r2, #33	; 0x21
 8001996:	2140      	movs	r1, #64	; 0x40
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff ff67 	bl	800186c <_ZN5RFM958writeRegEhh>
			setOutputPower(userOutputPower);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80019a4:	4619      	mov	r1, r3
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f88e 	bl	8001ac8 <_ZN5RFM9514setOutputPowerEh>
			break;
 80019ac:	bf00      	nop
		}
		uint8_t currentMode = readReg(REG_OP_MOD);
 80019ae:	2101      	movs	r1, #1
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ff8a 	bl	80018ca <_ZN5RFM957readRegEh>
 80019b6:	4603      	mov	r3, r0
 80019b8:	73fb      	strb	r3, [r7, #15]
		currentMode &= 0xF8;
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	f023 0307 	bic.w	r3, r3, #7
 80019c0:	73fb      	strb	r3, [r7, #15]
		currentMode |= mode;
 80019c2:	7bfa      	ldrb	r2, [r7, #15]
 80019c4:	78fb      	ldrb	r3, [r7, #3]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	73fb      	strb	r3, [r7, #15]
		writeReg(REG_OP_MOD, currentMode);
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	461a      	mov	r2, r3
 80019ce:	2101      	movs	r1, #1
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff ff4b 	bl	800186c <_ZN5RFM958writeRegEhh>
		HAL_Delay(1);
 80019d6:	2001      	movs	r0, #1
 80019d8:	f000 fdb6 	bl	8002548 <HAL_Delay>
		if(mode == RX){
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	2b05      	cmp	r3, #5
 80019e0:	d104      	bne.n	80019ec <_ZN5RFM957setModeENS_4MODEE+0x90>
			readGPIO(2);
 80019e2:	2102      	movs	r1, #2
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 f80f 	bl	8001a08 <_ZN5RFM958readGPIOEh>
 80019ea:	e006      	b.n	80019fa <_ZN5RFM957setModeENS_4MODEE+0x9e>
		}else if(mode == TX){
 80019ec:	78fb      	ldrb	r3, [r7, #3]
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	d103      	bne.n	80019fa <_ZN5RFM957setModeENS_4MODEE+0x9e>
			readGPIO(3);
 80019f2:	2103      	movs	r1, #3
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f807 	bl	8001a08 <_ZN5RFM958readGPIOEh>
		}
		currentMode = mode;
 80019fa:	78fb      	ldrb	r3, [r7, #3]
 80019fc:	73fb      	strb	r3, [r7, #15]
	}
}
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <_ZN5RFM958readGPIOEh>:


bool RFM95::readGPIO(uint8_t gpioPin){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	70fb      	strb	r3, [r7, #3]
	uint8_t timeout = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	73fb      	strb	r3, [r7, #15]
	uint16_t tempGpioPin;
	GPIO_TypeDef *tempGpioPort;
	switch (gpioPin) {
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	2b05      	cmp	r3, #5
 8001a1c:	d838      	bhi.n	8001a90 <_ZN5RFM958readGPIOEh+0x88>
 8001a1e:	a201      	add	r2, pc, #4	; (adr r2, 8001a24 <_ZN5RFM958readGPIOEh+0x1c>)
 8001a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a24:	08001a3d 	.word	0x08001a3d
 8001a28:	08001a4b 	.word	0x08001a4b
 8001a2c:	08001a59 	.word	0x08001a59
 8001a30:	08001a67 	.word	0x08001a67
 8001a34:	08001a75 	.word	0x08001a75
 8001a38:	08001a83 	.word	0x08001a83
		case 0:
			tempGpioPin = gpioHwSettings.gpioPin0;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	8a1b      	ldrh	r3, [r3, #16]
 8001a40:	82fb      	strh	r3, [r7, #22]
			tempGpioPort = gpioHwSettings.gpioPort0;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	613b      	str	r3, [r7, #16]
			break;
 8001a48:	e023      	b.n	8001a92 <_ZN5RFM958readGPIOEh+0x8a>
		case 1:
			tempGpioPin = gpioHwSettings.gpioPin1;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	8b1b      	ldrh	r3, [r3, #24]
 8001a4e:	82fb      	strh	r3, [r7, #22]
			tempGpioPort = gpioHwSettings.gpioPort1;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	613b      	str	r3, [r7, #16]
			break;
 8001a56:	e01c      	b.n	8001a92 <_ZN5RFM958readGPIOEh+0x8a>
		case 2:
			tempGpioPin = gpioHwSettings.gpioPin2;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	8c1b      	ldrh	r3, [r3, #32]
 8001a5c:	82fb      	strh	r3, [r7, #22]
			tempGpioPort = gpioHwSettings.gpioPort2;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	613b      	str	r3, [r7, #16]
			break;
 8001a64:	e015      	b.n	8001a92 <_ZN5RFM958readGPIOEh+0x8a>
		case 3:
			tempGpioPin = gpioHwSettings.gpioPin3;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6a:	82fb      	strh	r3, [r7, #22]
			tempGpioPort = gpioHwSettings.gpioPort3;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	613b      	str	r3, [r7, #16]
			break;
 8001a72:	e00e      	b.n	8001a92 <_ZN5RFM958readGPIOEh+0x8a>
		case 4:
			tempGpioPin = gpioHwSettings.gpioPin4;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001a78:	82fb      	strh	r3, [r7, #22]
			tempGpioPort = gpioHwSettings.gpioPort4;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7e:	613b      	str	r3, [r7, #16]
			break;
 8001a80:	e007      	b.n	8001a92 <_ZN5RFM958readGPIOEh+0x8a>
		case 5:
			tempGpioPin = gpioHwSettings.gpioPin5;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001a86:	82fb      	strh	r3, [r7, #22]
			tempGpioPort = gpioHwSettings.gpioPort5;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a8c:	613b      	str	r3, [r7, #16]
			break;
 8001a8e:	e000      	b.n	8001a92 <_ZN5RFM958readGPIOEh+0x8a>
		default:
			break;
 8001a90:	bf00      	nop
	}
	HAL_Delay(10);
 8001a92:	200a      	movs	r0, #10
 8001a94:	f000 fd58 	bl	8002548 <HAL_Delay>
	while(HAL_GPIO_ReadPin(tempGpioPort, tempGpioPin) == GPIO_PIN_RESET);
 8001a98:	8afb      	ldrh	r3, [r7, #22]
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	6938      	ldr	r0, [r7, #16]
 8001a9e:	f001 f839 	bl	8002b14 <HAL_GPIO_ReadPin>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bf0c      	ite	eq
 8001aa8:	2301      	moveq	r3, #1
 8001aaa:	2300      	movne	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d000      	beq.n	8001ab4 <_ZN5RFM958readGPIOEh+0xac>
 8001ab2:	e7f1      	b.n	8001a98 <_ZN5RFM958readGPIOEh+0x90>

	if(timeout >= GPIO_TIMEOUT){
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	2bf9      	cmp	r3, #249	; 0xf9
 8001ab8:	d901      	bls.n	8001abe <_ZN5RFM958readGPIOEh+0xb6>
		return false;
 8001aba:	2300      	movs	r3, #0
 8001abc:	e000      	b.n	8001ac0 <_ZN5RFM958readGPIOEh+0xb8>
	}else{
		return true;
 8001abe:	2301      	movs	r3, #1
	}
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <_ZN5RFM9514setOutputPowerEh>:
 * @brief set outputpower
 *
 * @param uint8_t outputpower in dBm (0-20)
 * @return none
 */
void RFM95::setOutputPower(uint8_t outputPower){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	70fb      	strb	r3, [r7, #3]
	userOutputPower = outputPower;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	78fa      	ldrb	r2, [r7, #3]
 8001ad8:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
	if(outputPower <= 15){
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	2b0f      	cmp	r3, #15
 8001ae0:	d808      	bhi.n	8001af4 <_ZN5RFM9514setOutputPowerEh+0x2c>
		writeReg(REG_PA_CONFIG, (uint8_t)(RF_PA_00DBM + outputPower));
 8001ae2:	78fb      	ldrb	r3, [r7, #3]
 8001ae4:	3370      	adds	r3, #112	; 0x70
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	461a      	mov	r2, r3
 8001aea:	2109      	movs	r1, #9
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff febd 	bl	800186c <_ZN5RFM958writeRegEhh>
	}else if(outputPower < 20){
		writeReg(REG_PA_CONFIG, (uint8_t)(RF_PA_16DBM - 16 + outputPower));
	}else{
		writeReg(REG_PA_CONFIG, RF_PA_20DBM);
	}
}
 8001af2:	e010      	b.n	8001b16 <_ZN5RFM9514setOutputPowerEh+0x4e>
	}else if(outputPower < 20){
 8001af4:	78fb      	ldrb	r3, [r7, #3]
 8001af6:	2b13      	cmp	r3, #19
 8001af8:	d808      	bhi.n	8001b0c <_ZN5RFM9514setOutputPowerEh+0x44>
		writeReg(REG_PA_CONFIG, (uint8_t)(RF_PA_16DBM - 16 + outputPower));
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	3b65      	subs	r3, #101	; 0x65
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	2109      	movs	r1, #9
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff feb1 	bl	800186c <_ZN5RFM958writeRegEhh>
}
 8001b0a:	e004      	b.n	8001b16 <_ZN5RFM9514setOutputPowerEh+0x4e>
		writeReg(REG_PA_CONFIG, RF_PA_20DBM);
 8001b0c:	22af      	movs	r2, #175	; 0xaf
 8001b0e:	2109      	movs	r1, #9
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff feab 	bl	800186c <_ZN5RFM958writeRegEhh>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <_ZN5RFM958resetRFMEv>:


void RFM95::resetRFM(void){
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(gpioHwSettings.gpioPortRST, gpioHwSettings.gpioPinRST, GPIO_PIN_RESET);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b30:	2200      	movs	r2, #0
 8001b32:	4619      	mov	r1, r3
 8001b34:	f001 f806 	bl	8002b44 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001b38:	2001      	movs	r0, #1
 8001b3a:	f000 fd05 	bl	8002548 <HAL_Delay>
	HAL_GPIO_WritePin(gpioHwSettings.gpioPortRST, gpioHwSettings.gpioPinRST, GPIO_PIN_SET);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b48:	2201      	movs	r2, #1
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f000 fffa 	bl	8002b44 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001b50:	2005      	movs	r0, #5
 8001b52:	f000 fcf9 	bl	8002548 <HAL_Delay>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <_ZN5RFM9513rcCalibrationEv>:

void RFM95::rcCalibration(){
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
	setMode(STANDBY);
 8001b66:	2101      	movs	r1, #1
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff fef7 	bl	800195c <_ZN5RFM957setModeENS_4MODEE>
	writeReg(REG_OSC,RF_OSC_CAL_START_TRIGGER);
 8001b6e:	2208      	movs	r2, #8
 8001b70:	2124      	movs	r1, #36	; 0x24
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff fe7a 	bl	800186c <_ZN5RFM958writeRegEhh>
	HAL_Delay(100);
 8001b78:	2064      	movs	r0, #100	; 0x64
 8001b7a:	f000 fce5 	bl	8002548 <HAL_Delay>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <_ZN5StackC1Ev>:
 *      Author: marce
 */

#include "Stack.h"

Stack::Stack() {
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub

}
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <_ZN5SHT21C1EP5Model>:
 *      Author: marce
 */

#include "SHT21.h"

SHT21::SHT21(Model *model) {
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
	this->model = model;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	601a      	str	r2, [r3, #0]

}
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <_ZN5SHT219writeByteEh>:

void SHT21::initSHT21(){

}

HAL_StatusTypeDef SHT21::writeByte(uint8_t addr){
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af02      	add	r7, sp, #8
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	70fb      	strb	r3, [r7, #3]
	uint8_t txBuffer[1];
	txBuffer[0] = addr;
 8001bc8:	78fb      	ldrb	r3, [r7, #3]
 8001bca:	733b      	strb	r3, [r7, #12]
	return(HAL_I2C_Master_Transmit(&hi2c1,SHT21_SLAVE_ADDR<<1,(uint8_t*)txBuffer,1,I2C_Timeout));
 8001bcc:	f107 020c 	add.w	r2, r7, #12
 8001bd0:	2364      	movs	r3, #100	; 0x64
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	2180      	movs	r1, #128	; 0x80
 8001bd8:	4803      	ldr	r0, [pc, #12]	; (8001be8 <_ZN5SHT219writeByteEh+0x2c>)
 8001bda:	f001 f873 	bl	8002cc4 <HAL_I2C_Master_Transmit>
 8001bde:	4603      	mov	r3, r0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000680 	.word	0x20000680

08001bec <_ZN5SHT2113readSHT21TempEv>:


uint32_t SHT21::readSHT21Temp(){
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af02      	add	r7, sp, #8
 8001bf2:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2];
	writeByte(SHT21_TEMP_REG);
 8001bf4:	21e3      	movs	r1, #227	; 0xe3
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ffe0 	bl	8001bbc <_ZN5SHT219writeByteEh>
	/*Warten bis Messung beendet*/
	while(HAL_I2C_Master_Receive(&hi2c1,SHT21_SLAVE_ADDR<<1,buffer,2,I2C_Timeout) != HAL_OK);
 8001bfc:	f107 020c 	add.w	r2, r7, #12
 8001c00:	2364      	movs	r3, #100	; 0x64
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	2302      	movs	r3, #2
 8001c06:	2180      	movs	r1, #128	; 0x80
 8001c08:	4810      	ldr	r0, [pc, #64]	; (8001c4c <_ZN5SHT2113readSHT21TempEv+0x60>)
 8001c0a:	f001 f94f 	bl	8002eac <HAL_I2C_Master_Receive>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	bf14      	ite	ne
 8001c14:	2301      	movne	r3, #1
 8001c16:	2300      	moveq	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d000      	beq.n	8001c20 <_ZN5SHT2113readSHT21TempEv+0x34>
 8001c1e:	e7ed      	b.n	8001bfc <_ZN5SHT2113readSHT21TempEv+0x10>
	model->setTempOutside((buffer[0]<<8)+buffer[1]);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6818      	ldr	r0, [r3, #0]
 8001c24:	7b3b      	ldrb	r3, [r7, #12]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	021b      	lsls	r3, r3, #8
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	7b7b      	ldrb	r3, [r7, #13]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	4413      	add	r3, r2
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	4619      	mov	r1, r3
 8001c36:	f7ff fcde 	bl	80015f6 <_ZN5Model14setTempOutsideEt>
	return((buffer[0]<<8)+buffer[1]);
 8001c3a:	7b3b      	ldrb	r3, [r7, #12]
 8001c3c:	021b      	lsls	r3, r3, #8
 8001c3e:	7b7a      	ldrb	r2, [r7, #13]
 8001c40:	4413      	add	r3, r2
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000680 	.word	0x20000680

08001c50 <_ZN5SHT2117readSHT21HumidityEv>:

uint32_t SHT21::readSHT21Humidity(){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2];
	writeByte(SHT21_HUMIDITY_REG);
 8001c58:	21e5      	movs	r1, #229	; 0xe5
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff ffae 	bl	8001bbc <_ZN5SHT219writeByteEh>
	while(HAL_I2C_Master_Receive(&hi2c1,SHT21_SLAVE_ADDR<<1,buffer,2,I2C_Timeout) != HAL_OK);
 8001c60:	f107 020c 	add.w	r2, r7, #12
 8001c64:	2364      	movs	r3, #100	; 0x64
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	2302      	movs	r3, #2
 8001c6a:	2180      	movs	r1, #128	; 0x80
 8001c6c:	4810      	ldr	r0, [pc, #64]	; (8001cb0 <_ZN5SHT2117readSHT21HumidityEv+0x60>)
 8001c6e:	f001 f91d 	bl	8002eac <HAL_I2C_Master_Receive>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	bf14      	ite	ne
 8001c78:	2301      	movne	r3, #1
 8001c7a:	2300      	moveq	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d000      	beq.n	8001c84 <_ZN5SHT2117readSHT21HumidityEv+0x34>
 8001c82:	e7ed      	b.n	8001c60 <_ZN5SHT2117readSHT21HumidityEv+0x10>
	model->setHumidity((buffer[0]<<8)+buffer[1]);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6818      	ldr	r0, [r3, #0]
 8001c88:	7b3b      	ldrb	r3, [r7, #12]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	7b7b      	ldrb	r3, [r7, #13]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	4413      	add	r3, r2
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f7ff fc6f 	bl	800157c <_ZN5Model11setHumidityEt>
	return((buffer[0]<<8)+buffer[1]);
 8001c9e:	7b3b      	ldrb	r3, [r7, #12]
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	7b7a      	ldrb	r2, [r7, #13]
 8001ca4:	4413      	add	r3, r2
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000680 	.word	0x20000680

08001cb4 <_ZN7USB_ComC1Ev>:
 *      Author: marce
 */

#include "USBCom.h"

USB_Com::USB_Com() {
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub

}
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd2:	f107 030c 	add.w	r3, r7, #12
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	60da      	str	r2, [r3, #12]
 8001ce0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce2:	4b43      	ldr	r3, [pc, #268]	; (8001df0 <MX_GPIO_Init+0x124>)
 8001ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce6:	4a42      	ldr	r2, [pc, #264]	; (8001df0 <MX_GPIO_Init+0x124>)
 8001ce8:	f043 0304 	orr.w	r3, r3, #4
 8001cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cee:	4b40      	ldr	r3, [pc, #256]	; (8001df0 <MX_GPIO_Init+0x124>)
 8001cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfa:	4b3d      	ldr	r3, [pc, #244]	; (8001df0 <MX_GPIO_Init+0x124>)
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfe:	4a3c      	ldr	r2, [pc, #240]	; (8001df0 <MX_GPIO_Init+0x124>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d06:	4b3a      	ldr	r3, [pc, #232]	; (8001df0 <MX_GPIO_Init+0x124>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	607b      	str	r3, [r7, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d12:	4b37      	ldr	r3, [pc, #220]	; (8001df0 <MX_GPIO_Init+0x124>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d16:	4a36      	ldr	r2, [pc, #216]	; (8001df0 <MX_GPIO_Init+0x124>)
 8001d18:	f043 0302 	orr.w	r3, r3, #2
 8001d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d1e:	4b34      	ldr	r3, [pc, #208]	; (8001df0 <MX_GPIO_Init+0x124>)
 8001d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|RFM_NSS_Pin, GPIO_PIN_RESET);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f248 0102 	movw	r1, #32770	; 0x8002
 8001d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d34:	f000 ff06 	bl	8002b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAX_CS_Pin|MAX_DRDY_Pin|RFM_RST_Pin, GPIO_PIN_RESET);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	210b      	movs	r1, #11
 8001d3c:	482d      	ldr	r0, [pc, #180]	; (8001df4 <MX_GPIO_Init+0x128>)
 8001d3e:	f000 ff01 	bl	8002b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RFM_DIO2_Pin|RFM_DIO1_Pin;
 8001d42:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d50:	f107 030c 	add.w	r3, r7, #12
 8001d54:	4619      	mov	r1, r3
 8001d56:	4828      	ldr	r0, [pc, #160]	; (8001df8 <MX_GPIO_Init+0x12c>)
 8001d58:	f000 fd6a 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NC_Pin|NCA8_Pin;
 8001d5c:	f240 1301 	movw	r3, #257	; 0x101
 8001d60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d62:	2303      	movs	r3, #3
 8001d64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6a:	f107 030c 	add.w	r3, r7, #12
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d74:	f000 fd5c 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Pin|RFM_NSS_Pin;
 8001d78:	f248 0302 	movw	r3, #32770	; 0x8002
 8001d7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8a:	f107 030c 	add.w	r3, r7, #12
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d94:	f000 fd4c 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PRESSURE_INT_Pin;
 8001d98:	2310      	movs	r3, #16
 8001d9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d9c:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <MX_GPIO_Init+0x130>)
 8001d9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PRESSURE_INT_GPIO_Port, &GPIO_InitStruct);
 8001da4:	f107 030c 	add.w	r3, r7, #12
 8001da8:	4619      	mov	r1, r3
 8001daa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dae:	f000 fd3f 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MAX_CS_Pin|MAX_DRDY_Pin|RFM_RST_Pin;
 8001db2:	230b      	movs	r3, #11
 8001db4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db6:	2301      	movs	r3, #1
 8001db8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc2:	f107 030c 	add.w	r3, r7, #12
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	480a      	ldr	r0, [pc, #40]	; (8001df4 <MX_GPIO_Init+0x128>)
 8001dca:	f000 fd31 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RFM_DIO5_Pin|RFM_DIO3_Pin|RFM_DIO4_Pin|RFM_DIO0_Pin;
 8001dce:	23f0      	movs	r3, #240	; 0xf0
 8001dd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dda:	f107 030c 	add.w	r3, r7, #12
 8001dde:	4619      	mov	r1, r3
 8001de0:	4804      	ldr	r0, [pc, #16]	; (8001df4 <MX_GPIO_Init+0x128>)
 8001de2:	f000 fd25 	bl	8002830 <HAL_GPIO_Init>

}
 8001de6:	bf00      	nop
 8001de8:	3720      	adds	r7, #32
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000
 8001df4:	48000400 	.word	0x48000400
 8001df8:	48000800 	.word	0x48000800
 8001dfc:	10110000 	.word	0x10110000

08001e00 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <MX_I2C1_Init+0x74>)
 8001e06:	4a1c      	ldr	r2, [pc, #112]	; (8001e78 <MX_I2C1_Init+0x78>)
 8001e08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <MX_I2C1_Init+0x74>)
 8001e0c:	4a1b      	ldr	r2, [pc, #108]	; (8001e7c <MX_I2C1_Init+0x7c>)
 8001e0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001e10:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <MX_I2C1_Init+0x74>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <MX_I2C1_Init+0x74>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e1c:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <MX_I2C1_Init+0x74>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001e22:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <MX_I2C1_Init+0x74>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <MX_I2C1_Init+0x74>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <MX_I2C1_Init+0x74>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <MX_I2C1_Init+0x74>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e3a:	480e      	ldr	r0, [pc, #56]	; (8001e74 <MX_I2C1_Init+0x74>)
 8001e3c:	f000 feb3 	bl	8002ba6 <HAL_I2C_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001e46:	f000 f929 	bl	800209c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4809      	ldr	r0, [pc, #36]	; (8001e74 <MX_I2C1_Init+0x74>)
 8001e4e:	f001 fc71 	bl	8003734 <HAL_I2CEx_ConfigAnalogFilter>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001e58:	f000 f920 	bl	800209c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4805      	ldr	r0, [pc, #20]	; (8001e74 <MX_I2C1_Init+0x74>)
 8001e60:	f001 fcb3 	bl	80037ca <HAL_I2CEx_ConfigDigitalFilter>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001e6a:	f000 f917 	bl	800209c <Error_Handler>
  }

}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000680 	.word	0x20000680
 8001e78:	40005400 	.word	0x40005400
 8001e7c:	00707cbb 	.word	0x00707cbb

08001e80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	; 0x28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a18      	ldr	r2, [pc, #96]	; (8001f00 <HAL_I2C_MspInit+0x80>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d129      	bne.n	8001ef6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <HAL_I2C_MspInit+0x84>)
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea6:	4a17      	ldr	r2, [pc, #92]	; (8001f04 <HAL_I2C_MspInit+0x84>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <HAL_I2C_MspInit+0x84>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001eba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec0:	2312      	movs	r3, #18
 8001ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ecc:	2304      	movs	r3, #4
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eda:	f000 fca9 	bl	8002830 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_I2C_MspInit+0x84>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	4a08      	ldr	r2, [pc, #32]	; (8001f04 <HAL_I2C_MspInit+0x84>)
 8001ee4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ee8:	6593      	str	r3, [r2, #88]	; 0x58
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_I2C_MspInit+0x84>)
 8001eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ef6:	bf00      	nop
 8001ef8:	3728      	adds	r7, #40	; 0x28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40005400 	.word	0x40005400
 8001f04:	40021000 	.word	0x40021000

08001f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f0c:	f000 faab 	bl	8002466 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f10:	f000 f826 	bl	8001f60 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f14:	f7ff feda 	bl	8001ccc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001f18:	f7ff ff72 	bl	8001e00 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001f1c:	f000 f8e4 	bl	80020e8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001f20:	f000 f9fe 	bl	8002320 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001f24:	f007 ff7c 	bl	8009e20 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_MspInit(&huart2);		//UART init
 8001f28:	4808      	ldr	r0, [pc, #32]	; (8001f4c <main+0x44>)
 8001f2a:	f000 fa29 	bl	8002380 <HAL_UART_MspInit>
  HAL_SPI_MspInit(&hspi1);		//SPI init
 8001f2e:	4808      	ldr	r0, [pc, #32]	; (8001f50 <main+0x48>)
 8001f30:	f000 f918 	bl	8002164 <HAL_SPI_MspInit>
  HAL_I2C_MspInit(&hi2c1);		//I2C init
 8001f34:	4807      	ldr	r0, [pc, #28]	; (8001f54 <main+0x4c>)
 8001f36:	f7ff ffa3 	bl	8001e80 <HAL_I2C_MspInit>
  HAL_UART_Receive_IT(&huart2, rxData, 1);
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	4906      	ldr	r1, [pc, #24]	; (8001f58 <main+0x50>)
 8001f3e:	4803      	ldr	r0, [pc, #12]	; (8001f4c <main+0x44>)
 8001f40:	f004 fb24 	bl	800658c <HAL_UART_Receive_IT>
  appMain.mainProg();
 8001f44:	4805      	ldr	r0, [pc, #20]	; (8001f5c <main+0x54>)
 8001f46:	f7fe ff67 	bl	8000e18 <_ZN7AppMain8mainProgEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f4a:	e7fe      	b.n	8001f4a <main+0x42>
 8001f4c:	20000730 	.word	0x20000730
 8001f50:	200006cc 	.word	0x200006cc
 8001f54:	20000680 	.word	0x20000680
 8001f58:	2000045c 	.word	0x2000045c
 8001f5c:	200001ac 	.word	0x200001ac

08001f60 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b0a4      	sub	sp, #144	; 0x90
 8001f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f6a:	2244      	movs	r2, #68	; 0x44
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f008 fcf6 	bl	800a960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	2234      	movs	r2, #52	; 0x34
 8001f88:	2100      	movs	r1, #0
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f008 fce8 	bl	800a960 <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f90:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f94:	f002 fbb6 	bl	8004704 <HAL_PWREx_ControlVoltageScaling>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	bf14      	ite	ne
 8001f9e:	2301      	movne	r3, #1
 8001fa0:	2300      	moveq	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <_Z18SystemClock_Configv+0x4c>
  {
    Error_Handler();
 8001fa8:	f000 f878 	bl	800209c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001fac:	2322      	movs	r3, #34	; 0x22
 8001fae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fb4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fba:	2340      	movs	r3, #64	; 0x40
 8001fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001fcc:	2308      	movs	r3, #8
 8001fce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fde:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f002 fbf4 	bl	80047d0 <HAL_RCC_OscConfig>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	bf14      	ite	ne
 8001fee:	2301      	movne	r3, #1
 8001ff0:	2300      	moveq	r3, #0
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <_Z18SystemClock_Configv+0x9c>
  {
    Error_Handler();
 8001ff8:	f000 f850 	bl	800209c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ffc:	230f      	movs	r3, #15
 8001ffe:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002000:	2303      	movs	r3, #3
 8002002:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002004:	2300      	movs	r3, #0
 8002006:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002008:	2300      	movs	r3, #0
 800200a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800200c:	2300      	movs	r3, #0
 800200e:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002010:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002014:	2101      	movs	r1, #1
 8002016:	4618      	mov	r0, r3
 8002018:	f003 f840 	bl	800509c <HAL_RCC_ClockConfig>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	bf14      	ite	ne
 8002022:	2301      	movne	r3, #1
 8002024:	2300      	moveq	r3, #0
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <_Z18SystemClock_Configv+0xd0>
  {
    Error_Handler();
 800202c:	f000 f836 	bl	800209c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8002030:	f242 0342 	movw	r3, #8258	; 0x2042
 8002034:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800203e:	2300      	movs	r3, #0
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	4618      	mov	r0, r3
 8002046:	f003 fa2d 	bl	80054a4 <HAL_RCCEx_PeriphCLKConfig>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	bf14      	ite	ne
 8002050:	2301      	movne	r3, #1
 8002052:	2300      	moveq	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <_Z18SystemClock_Configv+0xfe>
  {
    Error_Handler();
 800205a:	f000 f81f 	bl	800209c <Error_Handler>
  }
}
 800205e:	bf00      	nop
 8002060:	3790      	adds	r7, #144	; 0x90
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, rxData, 1);
 8002070:	2201      	movs	r2, #1
 8002072:	4907      	ldr	r1, [pc, #28]	; (8002090 <HAL_UART_RxCpltCallback+0x28>)
 8002074:	4807      	ldr	r0, [pc, #28]	; (8002094 <HAL_UART_RxCpltCallback+0x2c>)
 8002076:	f004 fa89 	bl	800658c <HAL_UART_Receive_IT>
	appMain.gps.gpsInterrupt(rxData[0]);
 800207a:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_UART_RxCpltCallback+0x28>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	4619      	mov	r1, r3
 8002080:	4805      	ldr	r0, [pc, #20]	; (8002098 <HAL_UART_RxCpltCallback+0x30>)
 8002082:	f7ff f839 	bl	80010f8 <_ZN3GPS12gpsInterruptEh>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	2000045c 	.word	0x2000045c
 8002094:	20000730 	.word	0x20000730
 8002098:	200003ac 	.word	0x200003ac

0800209c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <_Z41__static_initialization_and_destruction_0ii>:
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d107      	bne.n	80020cc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d102      	bne.n	80020cc <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain;
 80020c6:	4803      	ldr	r0, [pc, #12]	; (80020d4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80020c8:	f7fe fe20 	bl	8000d0c <_ZN7AppMainC1Ev>
}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	200001ac 	.word	0x200001ac

080020d8 <_GLOBAL__sub_I_appMain>:
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
 80020dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020e0:	2001      	movs	r0, #1
 80020e2:	f7ff ffe3 	bl	80020ac <_Z41__static_initialization_and_destruction_0ii>
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80020ec:	4b1b      	ldr	r3, [pc, #108]	; (800215c <MX_SPI1_Init+0x74>)
 80020ee:	4a1c      	ldr	r2, [pc, #112]	; (8002160 <MX_SPI1_Init+0x78>)
 80020f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020f2:	4b1a      	ldr	r3, [pc, #104]	; (800215c <MX_SPI1_Init+0x74>)
 80020f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020fa:	4b18      	ldr	r3, [pc, #96]	; (800215c <MX_SPI1_Init+0x74>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002100:	4b16      	ldr	r3, [pc, #88]	; (800215c <MX_SPI1_Init+0x74>)
 8002102:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002106:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002108:	4b14      	ldr	r3, [pc, #80]	; (800215c <MX_SPI1_Init+0x74>)
 800210a:	2200      	movs	r2, #0
 800210c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800210e:	4b13      	ldr	r3, [pc, #76]	; (800215c <MX_SPI1_Init+0x74>)
 8002110:	2200      	movs	r2, #0
 8002112:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <MX_SPI1_Init+0x74>)
 8002116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800211a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800211c:	4b0f      	ldr	r3, [pc, #60]	; (800215c <MX_SPI1_Init+0x74>)
 800211e:	2218      	movs	r2, #24
 8002120:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002122:	4b0e      	ldr	r3, [pc, #56]	; (800215c <MX_SPI1_Init+0x74>)
 8002124:	2200      	movs	r2, #0
 8002126:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <MX_SPI1_Init+0x74>)
 800212a:	2200      	movs	r2, #0
 800212c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800212e:	4b0b      	ldr	r3, [pc, #44]	; (800215c <MX_SPI1_Init+0x74>)
 8002130:	2200      	movs	r2, #0
 8002132:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <MX_SPI1_Init+0x74>)
 8002136:	2207      	movs	r2, #7
 8002138:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800213a:	4b08      	ldr	r3, [pc, #32]	; (800215c <MX_SPI1_Init+0x74>)
 800213c:	2200      	movs	r2, #0
 800213e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <MX_SPI1_Init+0x74>)
 8002142:	2200      	movs	r2, #0
 8002144:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002146:	4805      	ldr	r0, [pc, #20]	; (800215c <MX_SPI1_Init+0x74>)
 8002148:	f003 fb32 	bl	80057b0 <HAL_SPI_Init>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002152:	f7ff ffa3 	bl	800209c <Error_Handler>
  }

}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200006cc 	.word	0x200006cc
 8002160:	40013000 	.word	0x40013000

08002164 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	; 0x28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a17      	ldr	r2, [pc, #92]	; (80021e0 <HAL_SPI_MspInit+0x7c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d128      	bne.n	80021d8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002186:	4b17      	ldr	r3, [pc, #92]	; (80021e4 <HAL_SPI_MspInit+0x80>)
 8002188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218a:	4a16      	ldr	r2, [pc, #88]	; (80021e4 <HAL_SPI_MspInit+0x80>)
 800218c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002190:	6613      	str	r3, [r2, #96]	; 0x60
 8002192:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <HAL_SPI_MspInit+0x80>)
 8002194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002196:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <HAL_SPI_MspInit+0x80>)
 80021a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a2:	4a10      	ldr	r2, [pc, #64]	; (80021e4 <HAL_SPI_MspInit+0x80>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <HAL_SPI_MspInit+0x80>)
 80021ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80021b6:	23e0      	movs	r3, #224	; 0xe0
 80021b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c2:	2303      	movs	r3, #3
 80021c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021c6:	2305      	movs	r3, #5
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ca:	f107 0314 	add.w	r3, r7, #20
 80021ce:	4619      	mov	r1, r3
 80021d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d4:	f000 fb2c 	bl	8002830 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80021d8:	bf00      	nop
 80021da:	3728      	adds	r7, #40	; 0x28
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40013000 	.word	0x40013000
 80021e4:	40021000 	.word	0x40021000

080021e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ee:	4b0f      	ldr	r3, [pc, #60]	; (800222c <HAL_MspInit+0x44>)
 80021f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f2:	4a0e      	ldr	r2, [pc, #56]	; (800222c <HAL_MspInit+0x44>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6613      	str	r3, [r2, #96]	; 0x60
 80021fa:	4b0c      	ldr	r3, [pc, #48]	; (800222c <HAL_MspInit+0x44>)
 80021fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	607b      	str	r3, [r7, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	4b09      	ldr	r3, [pc, #36]	; (800222c <HAL_MspInit+0x44>)
 8002208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220a:	4a08      	ldr	r2, [pc, #32]	; (800222c <HAL_MspInit+0x44>)
 800220c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002210:	6593      	str	r3, [r2, #88]	; 0x58
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_MspInit+0x44>)
 8002214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40021000 	.word	0x40021000

08002230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002242:	e7fe      	b.n	8002242 <HardFault_Handler+0x4>

08002244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002248:	e7fe      	b.n	8002248 <MemManage_Handler+0x4>

0800224a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800224e:	e7fe      	b.n	800224e <BusFault_Handler+0x4>

08002250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002254:	e7fe      	b.n	8002254 <UsageFault_Handler+0x4>

08002256 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002284:	f000 f942 	bl	800250c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}

0800228c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002290:	4802      	ldr	r0, [pc, #8]	; (800229c <USART2_IRQHandler+0x10>)
 8002292:	f004 fa1d 	bl	80066d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000730 	.word	0x20000730

080022a0 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80022a4:	4802      	ldr	r0, [pc, #8]	; (80022b0 <USB_IRQHandler+0x10>)
 80022a6:	f001 fbe6 	bl	8003a76 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20001448 	.word	0x20001448

080022b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022b8:	4b17      	ldr	r3, [pc, #92]	; (8002318 <SystemInit+0x64>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	4a16      	ldr	r2, [pc, #88]	; (8002318 <SystemInit+0x64>)
 80022c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80022c8:	4b14      	ldr	r3, [pc, #80]	; (800231c <SystemInit+0x68>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a13      	ldr	r2, [pc, #76]	; (800231c <SystemInit+0x68>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <SystemInit+0x68>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80022da:	4b10      	ldr	r3, [pc, #64]	; (800231c <SystemInit+0x68>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a0f      	ldr	r2, [pc, #60]	; (800231c <SystemInit+0x68>)
 80022e0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80022e4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80022e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80022ea:	4b0c      	ldr	r3, [pc, #48]	; (800231c <SystemInit+0x68>)
 80022ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022f0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022f2:	4b0a      	ldr	r3, [pc, #40]	; (800231c <SystemInit+0x68>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a09      	ldr	r2, [pc, #36]	; (800231c <SystemInit+0x68>)
 80022f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80022fe:	4b07      	ldr	r3, [pc, #28]	; (800231c <SystemInit+0x68>)
 8002300:	2200      	movs	r2, #0
 8002302:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <SystemInit+0x64>)
 8002306:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800230a:	609a      	str	r2, [r3, #8]
#endif
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	e000ed00 	.word	0xe000ed00
 800231c:	40021000 	.word	0x40021000

08002320 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002324:	4b14      	ldr	r3, [pc, #80]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002326:	4a15      	ldr	r2, [pc, #84]	; (800237c <MX_USART2_UART_Init+0x5c>)
 8002328:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <MX_USART2_UART_Init+0x58>)
 800232c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002330:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002332:	4b11      	ldr	r3, [pc, #68]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <MX_USART2_UART_Init+0x58>)
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800233e:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002346:	2204      	movs	r2, #4
 8002348:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234a:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <MX_USART2_UART_Init+0x58>)
 800234c:	2200      	movs	r2, #0
 800234e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002350:	4b09      	ldr	r3, [pc, #36]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002352:	2200      	movs	r2, #0
 8002354:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002356:	4b08      	ldr	r3, [pc, #32]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002358:	2200      	movs	r2, #0
 800235a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <MX_USART2_UART_Init+0x58>)
 800235e:	2200      	movs	r2, #0
 8002360:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002362:	4805      	ldr	r0, [pc, #20]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002364:	f004 f8c4 	bl	80064f0 <HAL_UART_Init>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800236e:	f7ff fe95 	bl	800209c <Error_Handler>
  }

}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000730 	.word	0x20000730
 800237c:	40004400 	.word	0x40004400

08002380 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08a      	sub	sp, #40	; 0x28
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a1b      	ldr	r2, [pc, #108]	; (800240c <HAL_UART_MspInit+0x8c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d130      	bne.n	8002404 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023a2:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <HAL_UART_MspInit+0x90>)
 80023a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a6:	4a1a      	ldr	r2, [pc, #104]	; (8002410 <HAL_UART_MspInit+0x90>)
 80023a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ac:	6593      	str	r3, [r2, #88]	; 0x58
 80023ae:	4b18      	ldr	r3, [pc, #96]	; (8002410 <HAL_UART_MspInit+0x90>)
 80023b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ba:	4b15      	ldr	r3, [pc, #84]	; (8002410 <HAL_UART_MspInit+0x90>)
 80023bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023be:	4a14      	ldr	r2, [pc, #80]	; (8002410 <HAL_UART_MspInit+0x90>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023c6:	4b12      	ldr	r3, [pc, #72]	; (8002410 <HAL_UART_MspInit+0x90>)
 80023c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023d2:	230c      	movs	r3, #12
 80023d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d6:	2302      	movs	r3, #2
 80023d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023de:	2303      	movs	r3, #3
 80023e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023e2:	2307      	movs	r3, #7
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e6:	f107 0314 	add.w	r3, r7, #20
 80023ea:	4619      	mov	r1, r3
 80023ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023f0:	f000 fa1e 	bl	8002830 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023f4:	2200      	movs	r2, #0
 80023f6:	2100      	movs	r1, #0
 80023f8:	2026      	movs	r0, #38	; 0x26
 80023fa:	f000 f9a2 	bl	8002742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023fe:	2026      	movs	r0, #38	; 0x26
 8002400:	f000 f9bb 	bl	800277a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002404:	bf00      	nop
 8002406:	3728      	adds	r7, #40	; 0x28
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40004400 	.word	0x40004400
 8002410:	40021000 	.word	0x40021000

08002414 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800244c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002418:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800241a:	e003      	b.n	8002424 <LoopCopyDataInit>

0800241c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800241c:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800241e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002420:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002422:	3104      	adds	r1, #4

08002424 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002424:	480b      	ldr	r0, [pc, #44]	; (8002454 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002426:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002428:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800242a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800242c:	d3f6      	bcc.n	800241c <CopyDataInit>
	ldr	r2, =_sbss
 800242e:	4a0b      	ldr	r2, [pc, #44]	; (800245c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002430:	e002      	b.n	8002438 <LoopFillZerobss>

08002432 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002432:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002434:	f842 3b04 	str.w	r3, [r2], #4

08002438 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002438:	4b09      	ldr	r3, [pc, #36]	; (8002460 <LoopForever+0x16>)
	cmp	r2, r3
 800243a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800243c:	d3f9      	bcc.n	8002432 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800243e:	f7ff ff39 	bl	80022b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002442:	f008 fa69 	bl	800a918 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002446:	f7ff fd5f 	bl	8001f08 <main>

0800244a <LoopForever>:

LoopForever:
    b LoopForever
 800244a:	e7fe      	b.n	800244a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800244c:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8002450:	0800aa70 	.word	0x0800aa70
	ldr	r0, =_sdata
 8002454:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002458:	2000018c 	.word	0x2000018c
	ldr	r2, =_sbss
 800245c:	2000018c 	.word	0x2000018c
	ldr	r3, = _ebss
 8002460:	200016bc 	.word	0x200016bc

08002464 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002464:	e7fe      	b.n	8002464 <ADC1_2_IRQHandler>

08002466 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002470:	2003      	movs	r0, #3
 8002472:	f000 f95b 	bl	800272c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002476:	2000      	movs	r0, #0
 8002478:	f000 f80e 	bl	8002498 <HAL_InitTick>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	71fb      	strb	r3, [r7, #7]
 8002486:	e001      	b.n	800248c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002488:	f7ff feae 	bl	80021e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800248c:	79fb      	ldrb	r3, [r7, #7]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80024a4:	4b16      	ldr	r3, [pc, #88]	; (8002500 <HAL_InitTick+0x68>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d022      	beq.n	80024f2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80024ac:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_InitTick+0x6c>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b13      	ldr	r3, [pc, #76]	; (8002500 <HAL_InitTick+0x68>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80024bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 f968 	bl	8002796 <HAL_SYSTICK_Config>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10f      	bne.n	80024ec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b0f      	cmp	r3, #15
 80024d0:	d809      	bhi.n	80024e6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d2:	2200      	movs	r2, #0
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	f04f 30ff 	mov.w	r0, #4294967295
 80024da:	f000 f932 	bl	8002742 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024de:	4a0a      	ldr	r2, [pc, #40]	; (8002508 <HAL_InitTick+0x70>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	e007      	b.n	80024f6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	73fb      	strb	r3, [r7, #15]
 80024ea:	e004      	b.n	80024f6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
 80024f0:	e001      	b.n	80024f6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20000008 	.word	0x20000008
 8002504:	20000000 	.word	0x20000000
 8002508:	20000004 	.word	0x20000004

0800250c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <HAL_IncTick+0x1c>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_IncTick+0x20>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4413      	add	r3, r2
 800251a:	4a03      	ldr	r2, [pc, #12]	; (8002528 <HAL_IncTick+0x1c>)
 800251c:	6013      	str	r3, [r2, #0]
}
 800251e:	bf00      	nop
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	200007b0 	.word	0x200007b0
 800252c:	20000008 	.word	0x20000008

08002530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return uwTick;
 8002534:	4b03      	ldr	r3, [pc, #12]	; (8002544 <HAL_GetTick+0x14>)
 8002536:	681b      	ldr	r3, [r3, #0]
}
 8002538:	4618      	mov	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	200007b0 	.word	0x200007b0

08002548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002550:	f7ff ffee 	bl	8002530 <HAL_GetTick>
 8002554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002560:	d004      	beq.n	800256c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002562:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_Delay+0x40>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4413      	add	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800256c:	bf00      	nop
 800256e:	f7ff ffdf 	bl	8002530 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	429a      	cmp	r2, r3
 800257c:	d8f7      	bhi.n	800256e <HAL_Delay+0x26>
  {
  }
}
 800257e:	bf00      	nop
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000008 	.word	0x20000008

0800258c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800259c:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <__NVIC_SetPriorityGrouping+0x44>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025a8:	4013      	ands	r3, r2
 80025aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025be:	4a04      	ldr	r2, [pc, #16]	; (80025d0 <__NVIC_SetPriorityGrouping+0x44>)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	60d3      	str	r3, [r2, #12]
}
 80025c4:	bf00      	nop
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d8:	4b04      	ldr	r3, [pc, #16]	; (80025ec <__NVIC_GetPriorityGrouping+0x18>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	0a1b      	lsrs	r3, r3, #8
 80025de:	f003 0307 	and.w	r3, r3, #7
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	db0b      	blt.n	800261a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	f003 021f 	and.w	r2, r3, #31
 8002608:	4907      	ldr	r1, [pc, #28]	; (8002628 <__NVIC_EnableIRQ+0x38>)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	095b      	lsrs	r3, r3, #5
 8002610:	2001      	movs	r0, #1
 8002612:	fa00 f202 	lsl.w	r2, r0, r2
 8002616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	e000e100 	.word	0xe000e100

0800262c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	6039      	str	r1, [r7, #0]
 8002636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263c:	2b00      	cmp	r3, #0
 800263e:	db0a      	blt.n	8002656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	b2da      	uxtb	r2, r3
 8002644:	490c      	ldr	r1, [pc, #48]	; (8002678 <__NVIC_SetPriority+0x4c>)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	0112      	lsls	r2, r2, #4
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	440b      	add	r3, r1
 8002650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002654:	e00a      	b.n	800266c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	b2da      	uxtb	r2, r3
 800265a:	4908      	ldr	r1, [pc, #32]	; (800267c <__NVIC_SetPriority+0x50>)
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	3b04      	subs	r3, #4
 8002664:	0112      	lsls	r2, r2, #4
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	440b      	add	r3, r1
 800266a:	761a      	strb	r2, [r3, #24]
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	e000e100 	.word	0xe000e100
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002680:	b480      	push	{r7}
 8002682:	b089      	sub	sp, #36	; 0x24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f1c3 0307 	rsb	r3, r3, #7
 800269a:	2b04      	cmp	r3, #4
 800269c:	bf28      	it	cs
 800269e:	2304      	movcs	r3, #4
 80026a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3304      	adds	r3, #4
 80026a6:	2b06      	cmp	r3, #6
 80026a8:	d902      	bls.n	80026b0 <NVIC_EncodePriority+0x30>
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3b03      	subs	r3, #3
 80026ae:	e000      	b.n	80026b2 <NVIC_EncodePriority+0x32>
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b4:	f04f 32ff 	mov.w	r2, #4294967295
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43da      	mvns	r2, r3
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	401a      	ands	r2, r3
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026c8:	f04f 31ff 	mov.w	r1, #4294967295
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	fa01 f303 	lsl.w	r3, r1, r3
 80026d2:	43d9      	mvns	r1, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d8:	4313      	orrs	r3, r2
         );
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3724      	adds	r7, #36	; 0x24
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
	...

080026e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026f8:	d301      	bcc.n	80026fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026fa:	2301      	movs	r3, #1
 80026fc:	e00f      	b.n	800271e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026fe:	4a0a      	ldr	r2, [pc, #40]	; (8002728 <SysTick_Config+0x40>)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3b01      	subs	r3, #1
 8002704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002706:	210f      	movs	r1, #15
 8002708:	f04f 30ff 	mov.w	r0, #4294967295
 800270c:	f7ff ff8e 	bl	800262c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <SysTick_Config+0x40>)
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002716:	4b04      	ldr	r3, [pc, #16]	; (8002728 <SysTick_Config+0x40>)
 8002718:	2207      	movs	r2, #7
 800271a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	e000e010 	.word	0xe000e010

0800272c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff ff29 	bl	800258c <__NVIC_SetPriorityGrouping>
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b086      	sub	sp, #24
 8002746:	af00      	add	r7, sp, #0
 8002748:	4603      	mov	r3, r0
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
 800274e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002754:	f7ff ff3e 	bl	80025d4 <__NVIC_GetPriorityGrouping>
 8002758:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	6978      	ldr	r0, [r7, #20]
 8002760:	f7ff ff8e 	bl	8002680 <NVIC_EncodePriority>
 8002764:	4602      	mov	r2, r0
 8002766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800276a:	4611      	mov	r1, r2
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ff5d 	bl	800262c <__NVIC_SetPriority>
}
 8002772:	bf00      	nop
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	4603      	mov	r3, r0
 8002782:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ff31 	bl	80025f0 <__NVIC_EnableIRQ>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff ffa2 	bl	80026e8 <SysTick_Config>
 80027a4:	4603      	mov	r3, r0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b084      	sub	sp, #16
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d005      	beq.n	80027d2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2204      	movs	r2, #4
 80027ca:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
 80027d0:	e029      	b.n	8002826 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 020e 	bic.w	r2, r2, #14
 80027e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0201 	bic.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	f003 021c 	and.w	r2, r3, #28
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	2101      	movs	r1, #1
 8002800:	fa01 f202 	lsl.w	r2, r1, r2
 8002804:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	4798      	blx	r3
    }
  }
  return status;
 8002826:	7bfb      	ldrb	r3, [r7, #15]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002830:	b480      	push	{r7}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800283e:	e14e      	b.n	8002ade <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	2101      	movs	r1, #1
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	fa01 f303 	lsl.w	r3, r1, r3
 800284c:	4013      	ands	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 8140 	beq.w	8002ad8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d00b      	beq.n	8002878 <HAL_GPIO_Init+0x48>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b02      	cmp	r3, #2
 8002866:	d007      	beq.n	8002878 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800286c:	2b11      	cmp	r3, #17
 800286e:	d003      	beq.n	8002878 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b12      	cmp	r3, #18
 8002876:	d130      	bne.n	80028da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	2203      	movs	r2, #3
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	4013      	ands	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028ae:	2201      	movs	r2, #1
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43db      	mvns	r3, r3
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4013      	ands	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	091b      	lsrs	r3, r3, #4
 80028c4:	f003 0201 	and.w	r2, r3, #1
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	2203      	movs	r2, #3
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4013      	ands	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d003      	beq.n	800291a <HAL_GPIO_Init+0xea>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b12      	cmp	r3, #18
 8002918:	d123      	bne.n	8002962 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	08da      	lsrs	r2, r3, #3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3208      	adds	r2, #8
 8002922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002926:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	220f      	movs	r2, #15
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4013      	ands	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	691a      	ldr	r2, [r3, #16]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	08da      	lsrs	r2, r3, #3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3208      	adds	r2, #8
 800295c:	6939      	ldr	r1, [r7, #16]
 800295e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	2203      	movs	r2, #3
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43db      	mvns	r3, r3
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4013      	ands	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 0203 	and.w	r2, r3, #3
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 809a 	beq.w	8002ad8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a4:	4b55      	ldr	r3, [pc, #340]	; (8002afc <HAL_GPIO_Init+0x2cc>)
 80029a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a8:	4a54      	ldr	r2, [pc, #336]	; (8002afc <HAL_GPIO_Init+0x2cc>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6613      	str	r3, [r2, #96]	; 0x60
 80029b0:	4b52      	ldr	r3, [pc, #328]	; (8002afc <HAL_GPIO_Init+0x2cc>)
 80029b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029bc:	4a50      	ldr	r2, [pc, #320]	; (8002b00 <HAL_GPIO_Init+0x2d0>)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	089b      	lsrs	r3, r3, #2
 80029c2:	3302      	adds	r3, #2
 80029c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	220f      	movs	r2, #15
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029e6:	d013      	beq.n	8002a10 <HAL_GPIO_Init+0x1e0>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a46      	ldr	r2, [pc, #280]	; (8002b04 <HAL_GPIO_Init+0x2d4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d00d      	beq.n	8002a0c <HAL_GPIO_Init+0x1dc>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a45      	ldr	r2, [pc, #276]	; (8002b08 <HAL_GPIO_Init+0x2d8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d007      	beq.n	8002a08 <HAL_GPIO_Init+0x1d8>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a44      	ldr	r2, [pc, #272]	; (8002b0c <HAL_GPIO_Init+0x2dc>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d101      	bne.n	8002a04 <HAL_GPIO_Init+0x1d4>
 8002a00:	2303      	movs	r3, #3
 8002a02:	e006      	b.n	8002a12 <HAL_GPIO_Init+0x1e2>
 8002a04:	2307      	movs	r3, #7
 8002a06:	e004      	b.n	8002a12 <HAL_GPIO_Init+0x1e2>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e002      	b.n	8002a12 <HAL_GPIO_Init+0x1e2>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <HAL_GPIO_Init+0x1e2>
 8002a10:	2300      	movs	r3, #0
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	f002 0203 	and.w	r2, r2, #3
 8002a18:	0092      	lsls	r2, r2, #2
 8002a1a:	4093      	lsls	r3, r2
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a22:	4937      	ldr	r1, [pc, #220]	; (8002b00 <HAL_GPIO_Init+0x2d0>)
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	089b      	lsrs	r3, r3, #2
 8002a28:	3302      	adds	r3, #2
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a30:	4b37      	ldr	r3, [pc, #220]	; (8002b10 <HAL_GPIO_Init+0x2e0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a54:	4a2e      	ldr	r2, [pc, #184]	; (8002b10 <HAL_GPIO_Init+0x2e0>)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002a5a:	4b2d      	ldr	r3, [pc, #180]	; (8002b10 <HAL_GPIO_Init+0x2e0>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	43db      	mvns	r3, r3
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4013      	ands	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a7e:	4a24      	ldr	r2, [pc, #144]	; (8002b10 <HAL_GPIO_Init+0x2e0>)
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a84:	4b22      	ldr	r3, [pc, #136]	; (8002b10 <HAL_GPIO_Init+0x2e0>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4013      	ands	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002aa8:	4a19      	ldr	r2, [pc, #100]	; (8002b10 <HAL_GPIO_Init+0x2e0>)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002aae:	4b18      	ldr	r3, [pc, #96]	; (8002b10 <HAL_GPIO_Init+0x2e0>)
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	4013      	ands	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ad2:	4a0f      	ldr	r2, [pc, #60]	; (8002b10 <HAL_GPIO_Init+0x2e0>)
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	3301      	adds	r3, #1
 8002adc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f47f aea9 	bne.w	8002840 <HAL_GPIO_Init+0x10>
  }
}
 8002aee:	bf00      	nop
 8002af0:	371c      	adds	r7, #28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40010000 	.word	0x40010000
 8002b04:	48000400 	.word	0x48000400
 8002b08:	48000800 	.word	0x48000800
 8002b0c:	48000c00 	.word	0x48000c00
 8002b10:	40010400 	.word	0x40010400

08002b14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	887b      	ldrh	r3, [r7, #2]
 8002b26:	4013      	ands	r3, r2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	73fb      	strb	r3, [r7, #15]
 8002b30:	e001      	b.n	8002b36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b32:	2300      	movs	r3, #0
 8002b34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	807b      	strh	r3, [r7, #2]
 8002b50:	4613      	mov	r3, r2
 8002b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b54:	787b      	ldrb	r3, [r7, #1]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b5a:	887a      	ldrh	r2, [r7, #2]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b60:	e002      	b.n	8002b68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b62:	887a      	ldrh	r2, [r7, #2]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	695a      	ldr	r2, [r3, #20]
 8002b84:	887b      	ldrh	r3, [r7, #2]
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b8c:	887a      	ldrh	r2, [r7, #2]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002b92:	e002      	b.n	8002b9a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b94:	887a      	ldrh	r2, [r7, #2]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	619a      	str	r2, [r3, #24]
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e081      	b.n	8002cbc <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d106      	bne.n	8002bd2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7ff f957 	bl	8001e80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2224      	movs	r2, #36	; 0x24
 8002bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0201 	bic.w	r2, r2, #1
 8002be8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bf6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c06:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d107      	bne.n	8002c20 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c1c:	609a      	str	r2, [r3, #8]
 8002c1e:	e006      	b.n	8002c2e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c2c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d104      	bne.n	8002c40 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c3e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c52:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c62:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	ea42 0103 	orr.w	r1, r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	021a      	lsls	r2, r3, #8
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69d9      	ldr	r1, [r3, #28]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1a      	ldr	r2, [r3, #32]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f042 0201 	orr.w	r2, r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af02      	add	r7, sp, #8
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	817b      	strh	r3, [r7, #10]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b20      	cmp	r3, #32
 8002ce2:	f040 80da 	bne.w	8002e9a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_I2C_Master_Transmit+0x30>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e0d3      	b.n	8002e9c <HAL_I2C_Master_Transmit+0x1d8>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cfc:	f7ff fc18 	bl	8002530 <HAL_GetTick>
 8002d00:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	2319      	movs	r3, #25
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 fb54 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e0be      	b.n	8002e9c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2221      	movs	r2, #33	; 0x21
 8002d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2210      	movs	r2, #16
 8002d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	893a      	ldrh	r2, [r7, #8]
 8002d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	2bff      	cmp	r3, #255	; 0xff
 8002d4e:	d90e      	bls.n	8002d6e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	22ff      	movs	r2, #255	; 0xff
 8002d54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	8979      	ldrh	r1, [r7, #10]
 8002d5e:	4b51      	ldr	r3, [pc, #324]	; (8002ea4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 fcb6 	bl	80036d8 <I2C_TransferConfig>
 8002d6c:	e06c      	b.n	8002e48 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	8979      	ldrh	r1, [r7, #10]
 8002d80:	4b48      	ldr	r3, [pc, #288]	; (8002ea4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 fca5 	bl	80036d8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002d8e:	e05b      	b.n	8002e48 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	6a39      	ldr	r1, [r7, #32]
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 fb51 	bl	800343c <I2C_WaitOnTXISFlagUntilTimeout>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e07b      	b.n	8002e9c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	781a      	ldrb	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d034      	beq.n	8002e48 <HAL_I2C_Master_Transmit+0x184>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d130      	bne.n	8002e48 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	2200      	movs	r2, #0
 8002dee:	2180      	movs	r1, #128	; 0x80
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 fae3 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e04d      	b.n	8002e9c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2bff      	cmp	r3, #255	; 0xff
 8002e08:	d90e      	bls.n	8002e28 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	22ff      	movs	r2, #255	; 0xff
 8002e0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	8979      	ldrh	r1, [r7, #10]
 8002e18:	2300      	movs	r3, #0
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 fc59 	bl	80036d8 <I2C_TransferConfig>
 8002e26:	e00f      	b.n	8002e48 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	8979      	ldrh	r1, [r7, #10]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 fc48 	bl	80036d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d19e      	bne.n	8002d90 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	6a39      	ldr	r1, [r7, #32]
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 fb30 	bl	80034bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e01a      	b.n	8002e9c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6859      	ldr	r1, [r3, #4]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HAL_I2C_Master_Transmit+0x1e4>)
 8002e7a:	400b      	ands	r3, r1
 8002e7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	e000      	b.n	8002e9c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002e9a:	2302      	movs	r3, #2
  }
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	80002000 	.word	0x80002000
 8002ea8:	fe00e800 	.word	0xfe00e800

08002eac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b088      	sub	sp, #32
 8002eb0:	af02      	add	r7, sp, #8
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	607a      	str	r2, [r7, #4]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	460b      	mov	r3, r1
 8002eba:	817b      	strh	r3, [r7, #10]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b20      	cmp	r3, #32
 8002eca:	f040 80db 	bne.w	8003084 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_I2C_Master_Receive+0x30>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e0d4      	b.n	8003086 <HAL_I2C_Master_Receive+0x1da>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ee4:	f7ff fb24 	bl	8002530 <HAL_GetTick>
 8002ee8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	2319      	movs	r3, #25
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 fa60 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e0bf      	b.n	8003086 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2222      	movs	r2, #34	; 0x22
 8002f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2210      	movs	r2, #16
 8002f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	893a      	ldrh	r2, [r7, #8]
 8002f26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	2bff      	cmp	r3, #255	; 0xff
 8002f36:	d90e      	bls.n	8002f56 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	22ff      	movs	r2, #255	; 0xff
 8002f3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	8979      	ldrh	r1, [r7, #10]
 8002f46:	4b52      	ldr	r3, [pc, #328]	; (8003090 <HAL_I2C_Master_Receive+0x1e4>)
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 fbc2 	bl	80036d8 <I2C_TransferConfig>
 8002f54:	e06d      	b.n	8003032 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	8979      	ldrh	r1, [r7, #10]
 8002f68:	4b49      	ldr	r3, [pc, #292]	; (8003090 <HAL_I2C_Master_Receive+0x1e4>)
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 fbb1 	bl	80036d8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002f76:	e05c      	b.n	8003032 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	6a39      	ldr	r1, [r7, #32]
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 fad9 	bl	8003534 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e07c      	b.n	8003086 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d034      	beq.n	8003032 <HAL_I2C_Master_Receive+0x186>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d130      	bne.n	8003032 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2180      	movs	r1, #128	; 0x80
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f9ee 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e04d      	b.n	8003086 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2bff      	cmp	r3, #255	; 0xff
 8002ff2:	d90e      	bls.n	8003012 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	22ff      	movs	r2, #255	; 0xff
 8002ff8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	8979      	ldrh	r1, [r7, #10]
 8003002:	2300      	movs	r3, #0
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 fb64 	bl	80036d8 <I2C_TransferConfig>
 8003010:	e00f      	b.n	8003032 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003020:	b2da      	uxtb	r2, r3
 8003022:	8979      	ldrh	r1, [r7, #10]
 8003024:	2300      	movs	r3, #0
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 fb53 	bl	80036d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003036:	b29b      	uxth	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d19d      	bne.n	8002f78 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	6a39      	ldr	r1, [r7, #32]
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 fa3b 	bl	80034bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e01a      	b.n	8003086 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2220      	movs	r2, #32
 8003056:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6859      	ldr	r1, [r3, #4]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <HAL_I2C_Master_Receive+0x1e8>)
 8003064:	400b      	ands	r3, r1
 8003066:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	e000      	b.n	8003086 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003084:	2302      	movs	r3, #2
  }
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	80002400 	.word	0x80002400
 8003094:	fe00e800 	.word	0xfe00e800

08003098 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af02      	add	r7, sp, #8
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	4608      	mov	r0, r1
 80030a2:	4611      	mov	r1, r2
 80030a4:	461a      	mov	r2, r3
 80030a6:	4603      	mov	r3, r0
 80030a8:	817b      	strh	r3, [r7, #10]
 80030aa:	460b      	mov	r3, r1
 80030ac:	813b      	strh	r3, [r7, #8]
 80030ae:	4613      	mov	r3, r2
 80030b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	f040 80fd 	bne.w	80032ba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d002      	beq.n	80030cc <HAL_I2C_Mem_Read+0x34>
 80030c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d105      	bne.n	80030d8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e0f1      	b.n	80032bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_I2C_Mem_Read+0x4e>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e0ea      	b.n	80032bc <HAL_I2C_Mem_Read+0x224>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030ee:	f7ff fa1f 	bl	8002530 <HAL_GetTick>
 80030f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	2319      	movs	r3, #25
 80030fa:	2201      	movs	r2, #1
 80030fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 f95b 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e0d5      	b.n	80032bc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2222      	movs	r2, #34	; 0x22
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2240      	movs	r2, #64	; 0x40
 800311c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a3a      	ldr	r2, [r7, #32]
 800312a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003130:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003138:	88f8      	ldrh	r0, [r7, #6]
 800313a:	893a      	ldrh	r2, [r7, #8]
 800313c:	8979      	ldrh	r1, [r7, #10]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	9301      	str	r3, [sp, #4]
 8003142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	4603      	mov	r3, r0
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 f8bf 	bl	80032cc <I2C_RequestMemoryRead>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e0ad      	b.n	80032bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003164:	b29b      	uxth	r3, r3
 8003166:	2bff      	cmp	r3, #255	; 0xff
 8003168:	d90e      	bls.n	8003188 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	22ff      	movs	r2, #255	; 0xff
 800316e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003174:	b2da      	uxtb	r2, r3
 8003176:	8979      	ldrh	r1, [r7, #10]
 8003178:	4b52      	ldr	r3, [pc, #328]	; (80032c4 <HAL_I2C_Mem_Read+0x22c>)
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 faa9 	bl	80036d8 <I2C_TransferConfig>
 8003186:	e00f      	b.n	80031a8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003196:	b2da      	uxtb	r2, r3
 8003198:	8979      	ldrh	r1, [r7, #10]
 800319a:	4b4a      	ldr	r3, [pc, #296]	; (80032c4 <HAL_I2C_Mem_Read+0x22c>)
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 fa98 	bl	80036d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ae:	2200      	movs	r2, #0
 80031b0:	2104      	movs	r1, #4
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 f902 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e07c      	b.n	80032bc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d034      	beq.n	8003268 <HAL_I2C_Mem_Read+0x1d0>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003202:	2b00      	cmp	r3, #0
 8003204:	d130      	bne.n	8003268 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320c:	2200      	movs	r2, #0
 800320e:	2180      	movs	r1, #128	; 0x80
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 f8d3 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e04d      	b.n	80032bc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003224:	b29b      	uxth	r3, r3
 8003226:	2bff      	cmp	r3, #255	; 0xff
 8003228:	d90e      	bls.n	8003248 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	22ff      	movs	r2, #255	; 0xff
 800322e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003234:	b2da      	uxtb	r2, r3
 8003236:	8979      	ldrh	r1, [r7, #10]
 8003238:	2300      	movs	r3, #0
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 fa49 	bl	80036d8 <I2C_TransferConfig>
 8003246:	e00f      	b.n	8003268 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003256:	b2da      	uxtb	r2, r3
 8003258:	8979      	ldrh	r1, [r7, #10]
 800325a:	2300      	movs	r3, #0
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 fa38 	bl	80036d8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326c:	b29b      	uxth	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d19a      	bne.n	80031a8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 f920 	bl	80034bc <I2C_WaitOnSTOPFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e01a      	b.n	80032bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2220      	movs	r2, #32
 800328c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6859      	ldr	r1, [r3, #4]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <HAL_I2C_Mem_Read+0x230>)
 800329a:	400b      	ands	r3, r1
 800329c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2220      	movs	r2, #32
 80032a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	e000      	b.n	80032bc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80032ba:	2302      	movs	r3, #2
  }
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	80002400 	.word	0x80002400
 80032c8:	fe00e800 	.word	0xfe00e800

080032cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af02      	add	r7, sp, #8
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	4608      	mov	r0, r1
 80032d6:	4611      	mov	r1, r2
 80032d8:	461a      	mov	r2, r3
 80032da:	4603      	mov	r3, r0
 80032dc:	817b      	strh	r3, [r7, #10]
 80032de:	460b      	mov	r3, r1
 80032e0:	813b      	strh	r3, [r7, #8]
 80032e2:	4613      	mov	r3, r2
 80032e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80032e6:	88fb      	ldrh	r3, [r7, #6]
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	8979      	ldrh	r1, [r7, #10]
 80032ec:	4b20      	ldr	r3, [pc, #128]	; (8003370 <I2C_RequestMemoryRead+0xa4>)
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	2300      	movs	r3, #0
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 f9f0 	bl	80036d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032f8:	69fa      	ldr	r2, [r7, #28]
 80032fa:	69b9      	ldr	r1, [r7, #24]
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 f89d 	bl	800343c <I2C_WaitOnTXISFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e02c      	b.n	8003366 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800330c:	88fb      	ldrh	r3, [r7, #6]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d105      	bne.n	800331e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003312:	893b      	ldrh	r3, [r7, #8]
 8003314:	b2da      	uxtb	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	629a      	str	r2, [r3, #40]	; 0x28
 800331c:	e015      	b.n	800334a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800331e:	893b      	ldrh	r3, [r7, #8]
 8003320:	0a1b      	lsrs	r3, r3, #8
 8003322:	b29b      	uxth	r3, r3
 8003324:	b2da      	uxtb	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800332c:	69fa      	ldr	r2, [r7, #28]
 800332e:	69b9      	ldr	r1, [r7, #24]
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 f883 	bl	800343c <I2C_WaitOnTXISFlagUntilTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e012      	b.n	8003366 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003340:	893b      	ldrh	r3, [r7, #8]
 8003342:	b2da      	uxtb	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	2200      	movs	r2, #0
 8003352:	2140      	movs	r1, #64	; 0x40
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 f831 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	80002000 	.word	0x80002000

08003374 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b02      	cmp	r3, #2
 8003388:	d103      	bne.n	8003392 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2200      	movs	r2, #0
 8003390:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b01      	cmp	r3, #1
 800339e:	d007      	beq.n	80033b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699a      	ldr	r2, [r3, #24]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	619a      	str	r2, [r3, #24]
  }
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	603b      	str	r3, [r7, #0]
 80033c8:	4613      	mov	r3, r2
 80033ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033cc:	e022      	b.n	8003414 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d4:	d01e      	beq.n	8003414 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d6:	f7ff f8ab 	bl	8002530 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d302      	bcc.n	80033ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d113      	bne.n	8003414 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f0:	f043 0220 	orr.w	r2, r3, #32
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e00f      	b.n	8003434 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699a      	ldr	r2, [r3, #24]
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	4013      	ands	r3, r2
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	429a      	cmp	r2, r3
 8003422:	bf0c      	ite	eq
 8003424:	2301      	moveq	r3, #1
 8003426:	2300      	movne	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	461a      	mov	r2, r3
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	429a      	cmp	r2, r3
 8003430:	d0cd      	beq.n	80033ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003448:	e02c      	b.n	80034a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	68b9      	ldr	r1, [r7, #8]
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 f8dc 	bl	800360c <I2C_IsAcknowledgeFailed>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e02a      	b.n	80034b4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003464:	d01e      	beq.n	80034a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003466:	f7ff f863 	bl	8002530 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	429a      	cmp	r2, r3
 8003474:	d302      	bcc.n	800347c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d113      	bne.n	80034a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003480:	f043 0220 	orr.w	r2, r3, #32
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2220      	movs	r2, #32
 800348c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e007      	b.n	80034b4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d1cb      	bne.n	800344a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034c8:	e028      	b.n	800351c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 f89c 	bl	800360c <I2C_IsAcknowledgeFailed>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e026      	b.n	800352c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034de:	f7ff f827 	bl	8002530 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d302      	bcc.n	80034f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d113      	bne.n	800351c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f8:	f043 0220 	orr.w	r2, r3, #32
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e007      	b.n	800352c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b20      	cmp	r3, #32
 8003528:	d1cf      	bne.n	80034ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003540:	e055      	b.n	80035ee <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 f860 	bl	800360c <I2C_IsAcknowledgeFailed>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e053      	b.n	80035fe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	f003 0320 	and.w	r3, r3, #32
 8003560:	2b20      	cmp	r3, #32
 8003562:	d129      	bne.n	80035b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	f003 0304 	and.w	r3, r3, #4
 800356e:	2b04      	cmp	r3, #4
 8003570:	d105      	bne.n	800357e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	e03f      	b.n	80035fe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2220      	movs	r2, #32
 8003584:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6859      	ldr	r1, [r3, #4]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	4b1d      	ldr	r3, [pc, #116]	; (8003608 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003592:	400b      	ands	r3, r1
 8003594:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e022      	b.n	80035fe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b8:	f7fe ffba 	bl	8002530 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d302      	bcc.n	80035ce <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10f      	bne.n	80035ee <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d2:	f043 0220 	orr.w	r2, r3, #32
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e007      	b.n	80035fe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d1a2      	bne.n	8003542 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	fe00e800 	.word	0xfe00e800

0800360c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	2b10      	cmp	r3, #16
 8003624:	d151      	bne.n	80036ca <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003626:	e022      	b.n	800366e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362e:	d01e      	beq.n	800366e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003630:	f7fe ff7e 	bl	8002530 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	429a      	cmp	r2, r3
 800363e:	d302      	bcc.n	8003646 <I2C_IsAcknowledgeFailed+0x3a>
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d113      	bne.n	800366e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364a:	f043 0220 	orr.w	r2, r3, #32
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2220      	movs	r2, #32
 8003656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e02e      	b.n	80036cc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b20      	cmp	r3, #32
 800367a:	d1d5      	bne.n	8003628 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2210      	movs	r2, #16
 8003682:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2220      	movs	r2, #32
 800368a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f7ff fe71 	bl	8003374 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6859      	ldr	r1, [r3, #4]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	4b0d      	ldr	r3, [pc, #52]	; (80036d4 <I2C_IsAcknowledgeFailed+0xc8>)
 800369e:	400b      	ands	r3, r1
 80036a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	f043 0204 	orr.w	r2, r3, #4
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	fe00e800 	.word	0xfe00e800

080036d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	607b      	str	r3, [r7, #4]
 80036e2:	460b      	mov	r3, r1
 80036e4:	817b      	strh	r3, [r7, #10]
 80036e6:	4613      	mov	r3, r2
 80036e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	0d5b      	lsrs	r3, r3, #21
 80036f4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80036f8:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <I2C_TransferConfig+0x58>)
 80036fa:	430b      	orrs	r3, r1
 80036fc:	43db      	mvns	r3, r3
 80036fe:	ea02 0103 	and.w	r1, r2, r3
 8003702:	897b      	ldrh	r3, [r7, #10]
 8003704:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003708:	7a7b      	ldrb	r3, [r7, #9]
 800370a:	041b      	lsls	r3, r3, #16
 800370c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	431a      	orrs	r2, r3
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	431a      	orrs	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003722:	bf00      	nop
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	03ff63ff 	.word	0x03ff63ff

08003734 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b20      	cmp	r3, #32
 8003748:	d138      	bne.n	80037bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003754:	2302      	movs	r3, #2
 8003756:	e032      	b.n	80037be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2224      	movs	r2, #36	; 0x24
 8003764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0201 	bic.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003786:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6819      	ldr	r1, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0201 	orr.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	e000      	b.n	80037be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037bc:	2302      	movs	r3, #2
  }
}
 80037be:	4618      	mov	r0, r3
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b085      	sub	sp, #20
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b20      	cmp	r3, #32
 80037de:	d139      	bne.n	8003854 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e033      	b.n	8003856 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2224      	movs	r2, #36	; 0x24
 80037fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0201 	bic.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800381c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	021b      	lsls	r3, r3, #8
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 0201 	orr.w	r2, r2, #1
 800383e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	e000      	b.n	8003856 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003854:	2302      	movs	r3, #2
  }
}
 8003856:	4618      	mov	r0, r3
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003862:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003864:	b08b      	sub	sp, #44	; 0x2c
 8003866:	af06      	add	r7, sp, #24
 8003868:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0da      	b.n	8003a2a <HAL_PCD_Init+0x1c8>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d106      	bne.n	800388e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f006 fca7 	bl	800a1dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2203      	movs	r2, #3
 8003892:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f003 fe15 	bl	80074ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	603b      	str	r3, [r7, #0]
 80038a6:	687e      	ldr	r6, [r7, #4]
 80038a8:	466d      	mov	r5, sp
 80038aa:	f106 0410 	add.w	r4, r6, #16
 80038ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038b2:	6823      	ldr	r3, [r4, #0]
 80038b4:	602b      	str	r3, [r5, #0]
 80038b6:	1d33      	adds	r3, r6, #4
 80038b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038ba:	6838      	ldr	r0, [r7, #0]
 80038bc:	f003 fddb 	bl	8007476 <USB_CoreInit>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d005      	beq.n	80038d2 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2202      	movs	r2, #2
 80038ca:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e0ab      	b.n	8003a2a <HAL_PCD_Init+0x1c8>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2100      	movs	r1, #0
 80038d8:	4618      	mov	r0, r3
 80038da:	f003 fe11 	bl	8007500 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038de:	2300      	movs	r3, #0
 80038e0:	73fb      	strb	r3, [r7, #15]
 80038e2:	e035      	b.n	8003950 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	015b      	lsls	r3, r3, #5
 80038ea:	4413      	add	r3, r2
 80038ec:	3329      	adds	r3, #41	; 0x29
 80038ee:	2201      	movs	r2, #1
 80038f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	015b      	lsls	r3, r3, #5
 80038f8:	4413      	add	r3, r2
 80038fa:	3328      	adds	r3, #40	; 0x28
 80038fc:	7bfa      	ldrb	r2, [r7, #15]
 80038fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	7bfa      	ldrb	r2, [r7, #15]
 8003904:	b291      	uxth	r1, r2
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	015b      	lsls	r3, r3, #5
 800390a:	4413      	add	r3, r2
 800390c:	3336      	adds	r3, #54	; 0x36
 800390e:	460a      	mov	r2, r1
 8003910:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	015b      	lsls	r3, r3, #5
 8003918:	4413      	add	r3, r2
 800391a:	332b      	adds	r3, #43	; 0x2b
 800391c:	2200      	movs	r2, #0
 800391e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	015b      	lsls	r3, r3, #5
 8003926:	4413      	add	r3, r2
 8003928:	3338      	adds	r3, #56	; 0x38
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800392e:	7bfb      	ldrb	r3, [r7, #15]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	015b      	lsls	r3, r3, #5
 8003934:	4413      	add	r3, r2
 8003936:	333c      	adds	r3, #60	; 0x3c
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	3302      	adds	r3, #2
 8003942:	015b      	lsls	r3, r3, #5
 8003944:	4413      	add	r3, r2
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800394a:	7bfb      	ldrb	r3, [r7, #15]
 800394c:	3301      	adds	r3, #1
 800394e:	73fb      	strb	r3, [r7, #15]
 8003950:	7bfa      	ldrb	r2, [r7, #15]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	429a      	cmp	r2, r3
 8003958:	d3c4      	bcc.n	80038e4 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800395a:	2300      	movs	r3, #0
 800395c:	73fb      	strb	r3, [r7, #15]
 800395e:	e031      	b.n	80039c4 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003960:	7bfb      	ldrb	r3, [r7, #15]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	015b      	lsls	r3, r3, #5
 8003966:	4413      	add	r3, r2
 8003968:	f203 1329 	addw	r3, r3, #297	; 0x129
 800396c:	2200      	movs	r2, #0
 800396e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	015b      	lsls	r3, r3, #5
 8003976:	4413      	add	r3, r2
 8003978:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800397c:	7bfa      	ldrb	r2, [r7, #15]
 800397e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	015b      	lsls	r3, r3, #5
 8003986:	4413      	add	r3, r2
 8003988:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800398c:	2200      	movs	r2, #0
 800398e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	015b      	lsls	r3, r3, #5
 8003996:	4413      	add	r3, r2
 8003998:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	015b      	lsls	r3, r3, #5
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	330a      	adds	r3, #10
 80039b6:	015b      	lsls	r3, r3, #5
 80039b8:	4413      	add	r3, r2
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039be:	7bfb      	ldrb	r3, [r7, #15]
 80039c0:	3301      	adds	r3, #1
 80039c2:	73fb      	strb	r3, [r7, #15]
 80039c4:	7bfa      	ldrb	r2, [r7, #15]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d3c8      	bcc.n	8003960 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	687e      	ldr	r6, [r7, #4]
 80039d6:	466d      	mov	r5, sp
 80039d8:	f106 0410 	add.w	r4, r6, #16
 80039dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	602b      	str	r3, [r5, #0]
 80039e4:	1d33      	adds	r3, r6, #4
 80039e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039e8:	6838      	ldr	r0, [r7, #0]
 80039ea:	f003 fd96 	bl	800751a <USB_DevInit>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e014      	b.n	8003a2a <HAL_PCD_Init+0x1c8>
  }

  hpcd->USB_Address = 0U;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d102      	bne.n	8003a1e <HAL_PCD_Init+0x1bc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 fe3a 	bl	8004692 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f004 fddd 	bl	80085e2 <USB_DevDisconnect>

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a32 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_PCD_Start+0x16>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e012      	b.n	8003a6e <HAL_PCD_Start+0x3c>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f004 fdad 	bl	80085b4 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f003 fd1a 	bl	8007498 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b082      	sub	sp, #8
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f004 fdc2 	bl	800860c <USB_ReadInterrupts>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a92:	d102      	bne.n	8003a9a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 fb33 	bl	8004100 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f004 fdb4 	bl	800860c <USB_ReadInterrupts>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aae:	d112      	bne.n	8003ad6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac2:	b292      	uxth	r2, r2
 8003ac4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f006 fc22 	bl	800a312 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003ace:	2100      	movs	r1, #0
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f91e 	bl	8003d12 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f004 fd96 	bl	800860c <USB_ReadInterrupts>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aea:	d10b      	bne.n	8003b04 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003afe:	b292      	uxth	r2, r2
 8003b00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f004 fd7f 	bl	800860c <USB_ReadInterrupts>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b18:	d10b      	bne.n	8003b32 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b2c:	b292      	uxth	r2, r2
 8003b2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f004 fd68 	bl	800860c <USB_ReadInterrupts>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b46:	d133      	bne.n	8003bb0 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0204 	bic.w	r2, r2, #4
 8003b5a:	b292      	uxth	r2, r2
 8003b5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0208 	bic.w	r2, r2, #8
 8003b72:	b292      	uxth	r2, r2
 8003b74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d107      	bne.n	8003b92 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f006 fe6d 	bl	800a86c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f006 fbf6 	bl	800a384 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003baa:	b292      	uxth	r2, r2
 8003bac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f004 fd29 	bl	800860c <USB_ReadInterrupts>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bc4:	d126      	bne.n	8003c14 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f042 0208 	orr.w	r2, r2, #8
 8003bd8:	b292      	uxth	r2, r2
 8003bda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bf0:	b292      	uxth	r2, r2
 8003bf2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f042 0204 	orr.w	r2, r2, #4
 8003c08:	b292      	uxth	r2, r2
 8003c0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f006 fb9e 	bl	800a350 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f004 fcf7 	bl	800860c <USB_ReadInterrupts>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c24:	2b80      	cmp	r3, #128	; 0x80
 8003c26:	d13f      	bne.n	8003ca8 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c3a:	b292      	uxth	r2, r2
 8003c3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d12b      	bne.n	8003ca2 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f042 0204 	orr.w	r2, r2, #4
 8003c5c:	b292      	uxth	r2, r2
 8003c5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f042 0208 	orr.w	r2, r2, #8
 8003c74:	b292      	uxth	r2, r2
 8003c76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	089b      	lsrs	r3, r3, #2
 8003c8e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003c98:	2101      	movs	r1, #1
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f006 fde6 	bl	800a86c <HAL_PCDEx_LPM_Callback>
 8003ca0:	e002      	b.n	8003ca8 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f006 fb54 	bl	800a350 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f004 fcad 	bl	800860c <USB_ReadInterrupts>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cbc:	d10e      	bne.n	8003cdc <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003cd0:	b292      	uxth	r2, r2
 8003cd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f006 fb0d 	bl	800a2f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f004 fc93 	bl	800860c <USB_ReadInterrupts>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cf0:	d10b      	bne.n	8003d0a <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d04:	b292      	uxth	r2, r2
 8003d06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003d0a:	bf00      	nop
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b082      	sub	sp, #8
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <HAL_PCD_SetAddress+0x1a>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e013      	b.n	8003d54 <HAL_PCD_SetAddress+0x42>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	78fa      	ldrb	r2, [r7, #3]
 8003d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	78fa      	ldrb	r2, [r7, #3]
 8003d42:	4611      	mov	r1, r2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f004 fc21 	bl	800858c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	4608      	mov	r0, r1
 8003d66:	4611      	mov	r1, r2
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	70fb      	strb	r3, [r7, #3]
 8003d6e:	460b      	mov	r3, r1
 8003d70:	803b      	strh	r3, [r7, #0]
 8003d72:	4613      	mov	r3, r2
 8003d74:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	da0b      	bge.n	8003d9a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	015b      	lsls	r3, r3, #5
 8003d8a:	3328      	adds	r3, #40	; 0x28
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	4413      	add	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2201      	movs	r2, #1
 8003d96:	705a      	strb	r2, [r3, #1]
 8003d98:	e00b      	b.n	8003db2 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d9a:	78fb      	ldrb	r3, [r7, #3]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	015b      	lsls	r3, r3, #5
 8003da2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	4413      	add	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003db2:	78fb      	ldrb	r3, [r7, #3]
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003dbe:	883a      	ldrh	r2, [r7, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	78ba      	ldrb	r2, [r7, #2]
 8003dc8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	785b      	ldrb	r3, [r3, #1]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d004      	beq.n	8003ddc <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ddc:	78bb      	ldrb	r3, [r7, #2]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d102      	bne.n	8003de8 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d101      	bne.n	8003df6 <HAL_PCD_EP_Open+0x9a>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e00e      	b.n	8003e14 <HAL_PCD_EP_Open+0xb8>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68f9      	ldr	r1, [r7, #12]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f003 fbad 	bl	8007564 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8003e12:	7afb      	ldrb	r3, [r7, #11]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	460b      	mov	r3, r1
 8003e26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	da0b      	bge.n	8003e48 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	015b      	lsls	r3, r3, #5
 8003e38:	3328      	adds	r3, #40	; 0x28
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2201      	movs	r2, #1
 8003e44:	705a      	strb	r2, [r3, #1]
 8003e46:	e00b      	b.n	8003e60 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e48:	78fb      	ldrb	r3, [r7, #3]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	015b      	lsls	r3, r3, #5
 8003e50:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	4413      	add	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003e60:	78fb      	ldrb	r3, [r7, #3]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d101      	bne.n	8003e7a <HAL_PCD_EP_Close+0x5e>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e00e      	b.n	8003e98 <HAL_PCD_EP_Close+0x7c>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68f9      	ldr	r1, [r7, #12]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f003 fe5b 	bl	8007b44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	607a      	str	r2, [r7, #4]
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	460b      	mov	r3, r1
 8003eae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eb0:	7afb      	ldrb	r3, [r7, #11]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	015b      	lsls	r3, r3, #5
 8003eb8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eda:	7afb      	ldrb	r3, [r7, #11]
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ee6:	7afb      	ldrb	r3, [r7, #11]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d106      	bne.n	8003efe <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6979      	ldr	r1, [r7, #20]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f003 ffba 	bl	8007e70 <USB_EPStartXfer>
 8003efc:	e005      	b.n	8003f0a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6979      	ldr	r1, [r7, #20]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f003 ffb3 	bl	8007e70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f20:	78fb      	ldrb	r3, [r7, #3]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	330a      	adds	r3, #10
 8003f2a:	015b      	lsls	r3, r3, #5
 8003f2c:	4413      	add	r3, r2
 8003f2e:	3304      	adds	r3, #4
 8003f30:	681b      	ldr	r3, [r3, #0]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b086      	sub	sp, #24
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	60f8      	str	r0, [r7, #12]
 8003f46:	607a      	str	r2, [r7, #4]
 8003f48:	603b      	str	r3, [r7, #0]
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f4e:	7afb      	ldrb	r3, [r7, #11]
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	015b      	lsls	r3, r3, #5
 8003f56:	3328      	adds	r3, #40	; 0x28
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2201      	movs	r2, #1
 8003f74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f76:	7afb      	ldrb	r3, [r7, #11]
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f82:	7afb      	ldrb	r3, [r7, #11]
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d106      	bne.n	8003f9a <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6979      	ldr	r1, [r7, #20]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f003 ff6c 	bl	8007e70 <USB_EPStartXfer>
 8003f98:	e005      	b.n	8003fa6 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6979      	ldr	r1, [r7, #20]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f003 ff65 	bl	8007e70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003fbc:	78fb      	ldrb	r3, [r7, #3]
 8003fbe:	f003 0207 	and.w	r2, r3, #7
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d901      	bls.n	8003fce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e046      	b.n	800405c <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	da0b      	bge.n	8003fee <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fd6:	78fb      	ldrb	r3, [r7, #3]
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	015b      	lsls	r3, r3, #5
 8003fde:	3328      	adds	r3, #40	; 0x28
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	705a      	strb	r2, [r3, #1]
 8003fec:	e009      	b.n	8004002 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003fee:	78fb      	ldrb	r3, [r7, #3]
 8003ff0:	015b      	lsls	r3, r3, #5
 8003ff2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2201      	movs	r2, #1
 8004006:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004008:	78fb      	ldrb	r3, [r7, #3]
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	b2da      	uxtb	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <HAL_PCD_EP_SetStall+0x72>
 800401e:	2302      	movs	r3, #2
 8004020:	e01c      	b.n	800405c <HAL_PCD_EP_SetStall+0xac>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68f9      	ldr	r1, [r7, #12]
 8004030:	4618      	mov	r0, r3
 8004032:	f004 f9d5 	bl	80083e0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004036:	78fb      	ldrb	r3, [r7, #3]
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	2b00      	cmp	r3, #0
 800403e:	d108      	bne.n	8004052 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800404a:	4619      	mov	r1, r3
 800404c:	4610      	mov	r0, r2
 800404e:	f004 faed 	bl	800862c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004070:	78fb      	ldrb	r3, [r7, #3]
 8004072:	f003 020f 	and.w	r2, r3, #15
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	429a      	cmp	r2, r3
 800407c:	d901      	bls.n	8004082 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e03a      	b.n	80040f8 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004082:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004086:	2b00      	cmp	r3, #0
 8004088:	da0b      	bge.n	80040a2 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800408a:	78fb      	ldrb	r3, [r7, #3]
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	015b      	lsls	r3, r3, #5
 8004092:	3328      	adds	r3, #40	; 0x28
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	4413      	add	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2201      	movs	r2, #1
 800409e:	705a      	strb	r2, [r3, #1]
 80040a0:	e00b      	b.n	80040ba <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040a2:	78fb      	ldrb	r3, [r7, #3]
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	015b      	lsls	r3, r3, #5
 80040aa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	4413      	add	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040c0:	78fb      	ldrb	r3, [r7, #3]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <HAL_PCD_EP_ClrStall+0x76>
 80040d6:	2302      	movs	r3, #2
 80040d8:	e00e      	b.n	80040f8 <HAL_PCD_EP_ClrStall+0x94>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68f9      	ldr	r1, [r7, #12]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f004 f9bb 	bl	8008464 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004100:	b590      	push	{r4, r7, lr}
 8004102:	b089      	sub	sp, #36	; 0x24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004108:	e274      	b.n	80045f4 <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004112:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004114:	8afb      	ldrh	r3, [r7, #22]
 8004116:	b2db      	uxtb	r3, r3
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800411e:	7d7b      	ldrb	r3, [r7, #21]
 8004120:	2b00      	cmp	r3, #0
 8004122:	f040 813c 	bne.w	800439e <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004126:	8afb      	ldrh	r3, [r7, #22]
 8004128:	f003 0310 	and.w	r3, r3, #16
 800412c:	2b00      	cmp	r3, #0
 800412e:	d14f      	bne.n	80041d0 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	b29b      	uxth	r3, r3
 8004138:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800413c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004140:	b29c      	uxth	r4, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800414a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800414e:	b29b      	uxth	r3, r3
 8004150:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	3328      	adds	r3, #40	; 0x28
 8004156:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004160:	b29b      	uxth	r3, r3
 8004162:	461a      	mov	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	4413      	add	r3, r2
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6812      	ldr	r2, [r2, #0]
 8004170:	4413      	add	r3, r2
 8004172:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	695a      	ldr	r2, [r3, #20]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	441a      	add	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800418e:	2100      	movs	r1, #0
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f006 f899 	bl	800a2c8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 8228 	beq.w	80045f4 <PCD_EP_ISR_Handler+0x4f4>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f040 8223 	bne.w	80045f4 <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	b292      	uxth	r2, r2
 80041c2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80041ce:	e211      	b.n	80045f4 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80041d6:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80041e0:	8a7b      	ldrh	r3, [r7, #18]
 80041e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d031      	beq.n	800424e <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	461a      	mov	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	4413      	add	r3, r2
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6812      	ldr	r2, [r2, #0]
 8004202:	4413      	add	r3, r2
 8004204:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6818      	ldr	r0, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004224:	b29b      	uxth	r3, r3
 8004226:	f004 fa4e 	bl	80086c6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	b29a      	uxth	r2, r3
 8004232:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004236:	4013      	ands	r3, r2
 8004238:	b29c      	uxth	r4, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004242:	b292      	uxth	r2, r2
 8004244:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f006 f814 	bl	800a274 <HAL_PCD_SetupStageCallback>
 800424c:	e1d2      	b.n	80045f4 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800424e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004252:	2b00      	cmp	r3, #0
 8004254:	f280 81ce 	bge.w	80045f4 <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	b29a      	uxth	r2, r3
 8004260:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004264:	4013      	ands	r3, r2
 8004266:	b29c      	uxth	r4, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004270:	b292      	uxth	r2, r2
 8004272:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800427c:	b29b      	uxth	r3, r3
 800427e:	461a      	mov	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	4413      	add	r3, r2
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6812      	ldr	r2, [r2, #0]
 800428c:	4413      	add	r3, r2
 800428e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d019      	beq.n	80042d8 <PCD_EP_ISR_Handler+0x1d8>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d015      	beq.n	80042d8 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6818      	ldr	r0, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6959      	ldr	r1, [r3, #20]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80042bc:	b29b      	uxth	r3, r3
 80042be:	f004 fa02 	bl	80086c6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	695a      	ldr	r2, [r3, #20]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	441a      	add	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80042d0:	2100      	movs	r1, #0
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f005 ffe0 	bl	800a298 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	461c      	mov	r4, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	441c      	add	r4, r3
 80042ea:	f204 4306 	addw	r3, r4, #1030	; 0x406
 80042ee:	461c      	mov	r4, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10e      	bne.n	8004316 <PCD_EP_ISR_Handler+0x216>
 80042f8:	8823      	ldrh	r3, [r4, #0]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004300:	b29b      	uxth	r3, r3
 8004302:	8023      	strh	r3, [r4, #0]
 8004304:	8823      	ldrh	r3, [r4, #0]
 8004306:	b29b      	uxth	r3, r3
 8004308:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800430c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004310:	b29b      	uxth	r3, r3
 8004312:	8023      	strh	r3, [r4, #0]
 8004314:	e02d      	b.n	8004372 <PCD_EP_ISR_Handler+0x272>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	2b3e      	cmp	r3, #62	; 0x3e
 800431c:	d812      	bhi.n	8004344 <PCD_EP_ISR_Handler+0x244>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	085b      	lsrs	r3, r3, #1
 8004324:	61bb      	str	r3, [r7, #24]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <PCD_EP_ISR_Handler+0x238>
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	3301      	adds	r3, #1
 8004336:	61bb      	str	r3, [r7, #24]
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	b29b      	uxth	r3, r3
 800433c:	029b      	lsls	r3, r3, #10
 800433e:	b29b      	uxth	r3, r3
 8004340:	8023      	strh	r3, [r4, #0]
 8004342:	e016      	b.n	8004372 <PCD_EP_ISR_Handler+0x272>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	095b      	lsrs	r3, r3, #5
 800434a:	61bb      	str	r3, [r7, #24]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	f003 031f 	and.w	r3, r3, #31
 8004354:	2b00      	cmp	r3, #0
 8004356:	d102      	bne.n	800435e <PCD_EP_ISR_Handler+0x25e>
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	3b01      	subs	r3, #1
 800435c:	61bb      	str	r3, [r7, #24]
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	b29b      	uxth	r3, r3
 8004362:	029b      	lsls	r3, r3, #10
 8004364:	b29b      	uxth	r3, r3
 8004366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800436a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800436e:	b29b      	uxth	r3, r3
 8004370:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	b29b      	uxth	r3, r3
 800437a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800437e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004382:	b29c      	uxth	r4, r3
 8004384:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004388:	b29c      	uxth	r4, r3
 800438a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800438e:	b29c      	uxth	r4, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	4b9e      	ldr	r3, [pc, #632]	; (8004610 <PCD_EP_ISR_Handler+0x510>)
 8004396:	4323      	orrs	r3, r4
 8004398:	b29b      	uxth	r3, r3
 800439a:	8013      	strh	r3, [r2, #0]
 800439c:	e12a      	b.n	80045f4 <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	461a      	mov	r2, r3
 80043a4:	7d7b      	ldrb	r3, [r7, #21]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80043ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f280 80cb 	bge.w	800454e <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	461a      	mov	r2, r3
 80043be:	7d7b      	ldrb	r3, [r7, #21]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80043cc:	4013      	ands	r3, r2
 80043ce:	b29c      	uxth	r4, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	461a      	mov	r2, r3
 80043d6:	7d7b      	ldrb	r3, [r7, #21]
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80043e0:	b292      	uxth	r2, r2
 80043e2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80043e4:	7d7b      	ldrb	r3, [r7, #21]
 80043e6:	015b      	lsls	r3, r3, #5
 80043e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	4413      	add	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	7b1b      	ldrb	r3, [r3, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d11f      	bne.n	800443a <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004402:	b29b      	uxth	r3, r3
 8004404:	461a      	mov	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	4413      	add	r3, r2
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6812      	ldr	r2, [r2, #0]
 8004412:	4413      	add	r3, r2
 8004414:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800441e:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8004420:	8bfb      	ldrh	r3, [r7, #30]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d06e      	beq.n	8004504 <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6818      	ldr	r0, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6959      	ldr	r1, [r3, #20]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	88da      	ldrh	r2, [r3, #6]
 8004432:	8bfb      	ldrh	r3, [r7, #30]
 8004434:	f004 f947 	bl	80086c6 <USB_ReadPMA>
 8004438:	e064      	b.n	8004504 <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	b29b      	uxth	r3, r3
 800444c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004454:	b29c      	uxth	r4, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	461a      	mov	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	441a      	add	r2, r3
 8004464:	4b6b      	ldr	r3, [pc, #428]	; (8004614 <PCD_EP_ISR_Handler+0x514>)
 8004466:	4323      	orrs	r3, r4
 8004468:	b29b      	uxth	r3, r3
 800446a:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	461a      	mov	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	b29b      	uxth	r3, r3
 800447e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d01f      	beq.n	80044c6 <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800448e:	b29b      	uxth	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	4413      	add	r3, r2
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6812      	ldr	r2, [r2, #0]
 800449e:	4413      	add	r3, r2
 80044a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044aa:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80044ac:	8bfb      	ldrh	r3, [r7, #30]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d028      	beq.n	8004504 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6818      	ldr	r0, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6959      	ldr	r1, [r3, #20]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	891a      	ldrh	r2, [r3, #8]
 80044be:	8bfb      	ldrh	r3, [r7, #30]
 80044c0:	f004 f901 	bl	80086c6 <USB_ReadPMA>
 80044c4:	e01e      	b.n	8004504 <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	461a      	mov	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	4413      	add	r3, r2
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6812      	ldr	r2, [r2, #0]
 80044de:	4413      	add	r3, r2
 80044e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044ea:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80044ec:	8bfb      	ldrh	r3, [r7, #30]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d008      	beq.n	8004504 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6818      	ldr	r0, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6959      	ldr	r1, [r3, #20]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	895a      	ldrh	r2, [r3, #10]
 80044fe:	8bfb      	ldrh	r3, [r7, #30]
 8004500:	f004 f8e1 	bl	80086c6 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	69da      	ldr	r2, [r3, #28]
 8004508:	8bfb      	ldrh	r3, [r7, #30]
 800450a:	441a      	add	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	695a      	ldr	r2, [r3, #20]
 8004514:	8bfb      	ldrh	r3, [r7, #30]
 8004516:	441a      	add	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d004      	beq.n	800452e <PCD_EP_ISR_Handler+0x42e>
 8004524:	8bfa      	ldrh	r2, [r7, #30]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	429a      	cmp	r2, r3
 800452c:	d206      	bcs.n	800453c <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	4619      	mov	r1, r3
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f005 feaf 	bl	800a298 <HAL_PCD_DataOutStageCallback>
 800453a:	e008      	b.n	800454e <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	7819      	ldrb	r1, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	695a      	ldr	r2, [r3, #20]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7ff fca9 	bl	8003ea0 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800454e:	8a7b      	ldrh	r3, [r7, #18]
 8004550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004554:	2b00      	cmp	r3, #0
 8004556:	d04d      	beq.n	80045f4 <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004558:	7d7b      	ldrb	r3, [r7, #21]
 800455a:	015b      	lsls	r3, r3, #5
 800455c:	3328      	adds	r3, #40	; 0x28
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	4413      	add	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	461a      	mov	r2, r3
 800456a:	7d7b      	ldrb	r3, [r7, #21]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	b29b      	uxth	r3, r3
 8004574:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457c:	b29c      	uxth	r4, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	7d7b      	ldrb	r3, [r7, #21]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	441a      	add	r2, r3
 800458a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800458e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004592:	b29b      	uxth	r3, r3
 8004594:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800459e:	b29b      	uxth	r3, r3
 80045a0:	461a      	mov	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	4413      	add	r3, r2
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6812      	ldr	r2, [r2, #0]
 80045ae:	4413      	add	r3, r2
 80045b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	695a      	ldr	r2, [r3, #20]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	441a      	add	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d106      	bne.n	80045e2 <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	4619      	mov	r1, r3
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f005 fe74 	bl	800a2c8 <HAL_PCD_DataInStageCallback>
 80045e0:	e008      	b.n	80045f4 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	7819      	ldrb	r1, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	695a      	ldr	r2, [r3, #20]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7ff fca5 	bl	8003f3e <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	b21b      	sxth	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	f6ff ad82 	blt.w	800410a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3724      	adds	r7, #36	; 0x24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd90      	pop	{r4, r7, pc}
 8004610:	ffff8080 	.word	0xffff8080
 8004614:	ffff80c0 	.word	0xffff80c0

08004618 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	607b      	str	r3, [r7, #4]
 8004622:	460b      	mov	r3, r1
 8004624:	817b      	strh	r3, [r7, #10]
 8004626:	4613      	mov	r3, r2
 8004628:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800462a:	897b      	ldrh	r3, [r7, #10]
 800462c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004630:	b29b      	uxth	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d008      	beq.n	8004648 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004636:	897b      	ldrh	r3, [r7, #10]
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	015b      	lsls	r3, r3, #5
 800463e:	3328      	adds	r3, #40	; 0x28
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4413      	add	r3, r2
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	e006      	b.n	8004656 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004648:	897b      	ldrh	r3, [r7, #10]
 800464a:	015b      	lsls	r3, r3, #5
 800464c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4413      	add	r3, r2
 8004654:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004656:	893b      	ldrh	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d107      	bne.n	800466c <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	2200      	movs	r2, #0
 8004660:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	b29a      	uxth	r2, r3
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	80da      	strh	r2, [r3, #6]
 800466a:	e00b      	b.n	8004684 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	2201      	movs	r2, #1
 8004670:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	b29a      	uxth	r2, r3
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	0c1b      	lsrs	r3, r3, #16
 800467e:	b29a      	uxth	r2, r3
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	371c      	adds	r7, #28
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004692:	b480      	push	{r7}
 8004694:	b085      	sub	sp, #20
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	f043 0301 	orr.w	r3, r3, #1
 80046bc:	b29a      	uxth	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	f043 0302 	orr.w	r3, r3, #2
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
	...

080046e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80046ec:	4b04      	ldr	r3, [pc, #16]	; (8004700 <HAL_PWREx_GetVoltageRange+0x18>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	40007000 	.word	0x40007000

08004704 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004712:	d130      	bne.n	8004776 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004714:	4b23      	ldr	r3, [pc, #140]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800471c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004720:	d038      	beq.n	8004794 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004722:	4b20      	ldr	r3, [pc, #128]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800472a:	4a1e      	ldr	r2, [pc, #120]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800472c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004730:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004732:	4b1d      	ldr	r3, [pc, #116]	; (80047a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2232      	movs	r2, #50	; 0x32
 8004738:	fb02 f303 	mul.w	r3, r2, r3
 800473c:	4a1b      	ldr	r2, [pc, #108]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800473e:	fba2 2303 	umull	r2, r3, r2, r3
 8004742:	0c9b      	lsrs	r3, r3, #18
 8004744:	3301      	adds	r3, #1
 8004746:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004748:	e002      	b.n	8004750 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	3b01      	subs	r3, #1
 800474e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004750:	4b14      	ldr	r3, [pc, #80]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475c:	d102      	bne.n	8004764 <HAL_PWREx_ControlVoltageScaling+0x60>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1f2      	bne.n	800474a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004764:	4b0f      	ldr	r3, [pc, #60]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800476c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004770:	d110      	bne.n	8004794 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e00f      	b.n	8004796 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004776:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800477e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004782:	d007      	beq.n	8004794 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004784:	4b07      	ldr	r3, [pc, #28]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800478c:	4a05      	ldr	r2, [pc, #20]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800478e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004792:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40007000 	.word	0x40007000
 80047a8:	20000000 	.word	0x20000000
 80047ac:	431bde83 	.word	0x431bde83

080047b0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80047b4:	4b05      	ldr	r3, [pc, #20]	; (80047cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	4a04      	ldr	r2, [pc, #16]	; (80047cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80047ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047be:	6053      	str	r3, [r2, #4]
}
 80047c0:	bf00      	nop
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	40007000 	.word	0x40007000

080047d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b08a      	sub	sp, #40	; 0x28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d102      	bne.n	80047e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	f000 bc56 	b.w	8005090 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047e4:	4ba1      	ldr	r3, [pc, #644]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 030c 	and.w	r3, r3, #12
 80047ec:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047ee:	4b9f      	ldr	r3, [pc, #636]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0310 	and.w	r3, r3, #16
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 80e6 	beq.w	80049d2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d007      	beq.n	800481c <HAL_RCC_OscConfig+0x4c>
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	2b0c      	cmp	r3, #12
 8004810:	f040 808d 	bne.w	800492e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	2b01      	cmp	r3, #1
 8004818:	f040 8089 	bne.w	800492e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800481c:	4b93      	ldr	r3, [pc, #588]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d006      	beq.n	8004836 <HAL_RCC_OscConfig+0x66>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d102      	bne.n	8004836 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	f000 bc2d 	b.w	8005090 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800483a:	4b8c      	ldr	r3, [pc, #560]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0308 	and.w	r3, r3, #8
 8004842:	2b00      	cmp	r3, #0
 8004844:	d004      	beq.n	8004850 <HAL_RCC_OscConfig+0x80>
 8004846:	4b89      	ldr	r3, [pc, #548]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800484e:	e005      	b.n	800485c <HAL_RCC_OscConfig+0x8c>
 8004850:	4b86      	ldr	r3, [pc, #536]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004856:	091b      	lsrs	r3, r3, #4
 8004858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800485c:	4293      	cmp	r3, r2
 800485e:	d224      	bcs.n	80048aa <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	4618      	mov	r0, r3
 8004866:	f000 fdbd 	bl	80053e4 <RCC_SetFlashLatencyFromMSIRange>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	f000 bc0d 	b.w	8005090 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004876:	4b7d      	ldr	r3, [pc, #500]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a7c      	ldr	r2, [pc, #496]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 800487c:	f043 0308 	orr.w	r3, r3, #8
 8004880:	6013      	str	r3, [r2, #0]
 8004882:	4b7a      	ldr	r3, [pc, #488]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	4977      	ldr	r1, [pc, #476]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004890:	4313      	orrs	r3, r2
 8004892:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004894:	4b75      	ldr	r3, [pc, #468]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	021b      	lsls	r3, r3, #8
 80048a2:	4972      	ldr	r1, [pc, #456]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	604b      	str	r3, [r1, #4]
 80048a8:	e025      	b.n	80048f6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048aa:	4b70      	ldr	r3, [pc, #448]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a6f      	ldr	r2, [pc, #444]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 80048b0:	f043 0308 	orr.w	r3, r3, #8
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	4b6d      	ldr	r3, [pc, #436]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	496a      	ldr	r1, [pc, #424]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048c8:	4b68      	ldr	r3, [pc, #416]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	021b      	lsls	r3, r3, #8
 80048d6:	4965      	ldr	r1, [pc, #404]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d109      	bne.n	80048f6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fd7c 	bl	80053e4 <RCC_SetFlashLatencyFromMSIRange>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e3cc      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048f6:	f000 fcb3 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 80048fa:	4601      	mov	r1, r0
 80048fc:	4b5b      	ldr	r3, [pc, #364]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	091b      	lsrs	r3, r3, #4
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	4a5a      	ldr	r2, [pc, #360]	; (8004a70 <HAL_RCC_OscConfig+0x2a0>)
 8004908:	5cd3      	ldrb	r3, [r2, r3]
 800490a:	f003 031f 	and.w	r3, r3, #31
 800490e:	fa21 f303 	lsr.w	r3, r1, r3
 8004912:	4a58      	ldr	r2, [pc, #352]	; (8004a74 <HAL_RCC_OscConfig+0x2a4>)
 8004914:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004916:	4b58      	ldr	r3, [pc, #352]	; (8004a78 <HAL_RCC_OscConfig+0x2a8>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f7fd fdbc 	bl	8002498 <HAL_InitTick>
 8004920:	4603      	mov	r3, r0
 8004922:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8004924:	7dfb      	ldrb	r3, [r7, #23]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d052      	beq.n	80049d0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800492a:	7dfb      	ldrb	r3, [r7, #23]
 800492c:	e3b0      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d032      	beq.n	800499c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004936:	4b4d      	ldr	r3, [pc, #308]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a4c      	ldr	r2, [pc, #304]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 800493c:	f043 0301 	orr.w	r3, r3, #1
 8004940:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004942:	f7fd fdf5 	bl	8002530 <HAL_GetTick>
 8004946:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004948:	e008      	b.n	800495c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800494a:	f7fd fdf1 	bl	8002530 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d901      	bls.n	800495c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e399      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800495c:	4b43      	ldr	r3, [pc, #268]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0f0      	beq.n	800494a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004968:	4b40      	ldr	r3, [pc, #256]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a3f      	ldr	r2, [pc, #252]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 800496e:	f043 0308 	orr.w	r3, r3, #8
 8004972:	6013      	str	r3, [r2, #0]
 8004974:	4b3d      	ldr	r3, [pc, #244]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	493a      	ldr	r1, [pc, #232]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004982:	4313      	orrs	r3, r2
 8004984:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004986:	4b39      	ldr	r3, [pc, #228]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	021b      	lsls	r3, r3, #8
 8004994:	4935      	ldr	r1, [pc, #212]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004996:	4313      	orrs	r3, r2
 8004998:	604b      	str	r3, [r1, #4]
 800499a:	e01a      	b.n	80049d2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800499c:	4b33      	ldr	r3, [pc, #204]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a32      	ldr	r2, [pc, #200]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 80049a2:	f023 0301 	bic.w	r3, r3, #1
 80049a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049a8:	f7fd fdc2 	bl	8002530 <HAL_GetTick>
 80049ac:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049b0:	f7fd fdbe 	bl	8002530 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e366      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049c2:	4b2a      	ldr	r3, [pc, #168]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f0      	bne.n	80049b0 <HAL_RCC_OscConfig+0x1e0>
 80049ce:	e000      	b.n	80049d2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d073      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d005      	beq.n	80049f0 <HAL_RCC_OscConfig+0x220>
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	2b0c      	cmp	r3, #12
 80049e8:	d10e      	bne.n	8004a08 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d10b      	bne.n	8004a08 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f0:	4b1e      	ldr	r3, [pc, #120]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d063      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x2f4>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d15f      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e343      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a10:	d106      	bne.n	8004a20 <HAL_RCC_OscConfig+0x250>
 8004a12:	4b16      	ldr	r3, [pc, #88]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a15      	ldr	r2, [pc, #84]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	e01d      	b.n	8004a5c <HAL_RCC_OscConfig+0x28c>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a28:	d10c      	bne.n	8004a44 <HAL_RCC_OscConfig+0x274>
 8004a2a:	4b10      	ldr	r3, [pc, #64]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a0f      	ldr	r2, [pc, #60]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	4b0d      	ldr	r3, [pc, #52]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a0c      	ldr	r2, [pc, #48]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	e00b      	b.n	8004a5c <HAL_RCC_OscConfig+0x28c>
 8004a44:	4b09      	ldr	r3, [pc, #36]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a08      	ldr	r2, [pc, #32]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a4e:	6013      	str	r3, [r2, #0]
 8004a50:	4b06      	ldr	r3, [pc, #24]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a05      	ldr	r2, [pc, #20]	; (8004a6c <HAL_RCC_OscConfig+0x29c>)
 8004a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d01b      	beq.n	8004a9c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a64:	f7fd fd64 	bl	8002530 <HAL_GetTick>
 8004a68:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a6a:	e010      	b.n	8004a8e <HAL_RCC_OscConfig+0x2be>
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	0800aa14 	.word	0x0800aa14
 8004a74:	20000000 	.word	0x20000000
 8004a78:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a7c:	f7fd fd58 	bl	8002530 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b64      	cmp	r3, #100	; 0x64
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e300      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a8e:	4ba0      	ldr	r3, [pc, #640]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0f0      	beq.n	8004a7c <HAL_RCC_OscConfig+0x2ac>
 8004a9a:	e014      	b.n	8004ac6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9c:	f7fd fd48 	bl	8002530 <HAL_GetTick>
 8004aa0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aa4:	f7fd fd44 	bl	8002530 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b64      	cmp	r3, #100	; 0x64
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e2ec      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ab6:	4b96      	ldr	r3, [pc, #600]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1f0      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x2d4>
 8004ac2:	e000      	b.n	8004ac6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d060      	beq.n	8004b94 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	d005      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x314>
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	2b0c      	cmp	r3, #12
 8004adc:	d119      	bne.n	8004b12 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d116      	bne.n	8004b12 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ae4:	4b8a      	ldr	r3, [pc, #552]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d005      	beq.n	8004afc <HAL_RCC_OscConfig+0x32c>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e2c9      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004afc:	4b84      	ldr	r3, [pc, #528]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	061b      	lsls	r3, r3, #24
 8004b0a:	4981      	ldr	r1, [pc, #516]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b10:	e040      	b.n	8004b94 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d023      	beq.n	8004b62 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b1a:	4b7d      	ldr	r3, [pc, #500]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a7c      	ldr	r2, [pc, #496]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b26:	f7fd fd03 	bl	8002530 <HAL_GetTick>
 8004b2a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b2c:	e008      	b.n	8004b40 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b2e:	f7fd fcff 	bl	8002530 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e2a7      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b40:	4b73      	ldr	r3, [pc, #460]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0f0      	beq.n	8004b2e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b4c:	4b70      	ldr	r3, [pc, #448]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	061b      	lsls	r3, r3, #24
 8004b5a:	496d      	ldr	r1, [pc, #436]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	604b      	str	r3, [r1, #4]
 8004b60:	e018      	b.n	8004b94 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b62:	4b6b      	ldr	r3, [pc, #428]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a6a      	ldr	r2, [pc, #424]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6e:	f7fd fcdf 	bl	8002530 <HAL_GetTick>
 8004b72:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b76:	f7fd fcdb 	bl	8002530 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e283      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b88:	4b61      	ldr	r3, [pc, #388]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1f0      	bne.n	8004b76 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0308 	and.w	r3, r3, #8
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d07f      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d05f      	beq.n	8004c68 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8004ba8:	4b59      	ldr	r3, [pc, #356]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bae:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699a      	ldr	r2, [r3, #24]
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f003 0310 	and.w	r3, r3, #16
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d037      	beq.n	8004c2e <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d006      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e25c      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01b      	beq.n	8004c18 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8004be0:	4b4b      	ldr	r3, [pc, #300]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004be6:	4a4a      	ldr	r2, [pc, #296]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004be8:	f023 0301 	bic.w	r3, r3, #1
 8004bec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bf0:	f7fd fc9e 	bl	8002530 <HAL_GetTick>
 8004bf4:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bf8:	f7fd fc9a 	bl	8002530 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b11      	cmp	r3, #17
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e242      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c0a:	4b41      	ldr	r3, [pc, #260]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1ef      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8004c18:	4b3d      	ldr	r3, [pc, #244]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c1e:	f023 0210 	bic.w	r2, r3, #16
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	493a      	ldr	r1, [pc, #232]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c2e:	4b38      	ldr	r3, [pc, #224]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c34:	4a36      	ldr	r2, [pc, #216]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004c36:	f043 0301 	orr.w	r3, r3, #1
 8004c3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3e:	f7fd fc77 	bl	8002530 <HAL_GetTick>
 8004c42:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c44:	e008      	b.n	8004c58 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c46:	f7fd fc73 	bl	8002530 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b11      	cmp	r3, #17
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e21b      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c58:	4b2d      	ldr	r3, [pc, #180]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0ef      	beq.n	8004c46 <HAL_RCC_OscConfig+0x476>
 8004c66:	e01b      	b.n	8004ca0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c68:	4b29      	ldr	r3, [pc, #164]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c6e:	4a28      	ldr	r2, [pc, #160]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004c70:	f023 0301 	bic.w	r3, r3, #1
 8004c74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c78:	f7fd fc5a 	bl	8002530 <HAL_GetTick>
 8004c7c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c80:	f7fd fc56 	bl	8002530 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b11      	cmp	r3, #17
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e1fe      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c92:	4b1f      	ldr	r3, [pc, #124]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1ef      	bne.n	8004c80 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 80c1 	beq.w	8004e30 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004cb4:	4b16      	ldr	r3, [pc, #88]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10e      	bne.n	8004cde <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cc0:	4b13      	ldr	r3, [pc, #76]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc4:	4a12      	ldr	r2, [pc, #72]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cca:	6593      	str	r3, [r2, #88]	; 0x58
 8004ccc:	4b10      	ldr	r3, [pc, #64]	; (8004d10 <HAL_RCC_OscConfig+0x540>)
 8004cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cde:	4b0d      	ldr	r3, [pc, #52]	; (8004d14 <HAL_RCC_OscConfig+0x544>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d11c      	bne.n	8004d24 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cea:	4b0a      	ldr	r3, [pc, #40]	; (8004d14 <HAL_RCC_OscConfig+0x544>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a09      	ldr	r2, [pc, #36]	; (8004d14 <HAL_RCC_OscConfig+0x544>)
 8004cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cf6:	f7fd fc1b 	bl	8002530 <HAL_GetTick>
 8004cfa:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cfc:	e00c      	b.n	8004d18 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cfe:	f7fd fc17 	bl	8002530 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d905      	bls.n	8004d18 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e1bf      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
 8004d10:	40021000 	.word	0x40021000
 8004d14:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d18:	4bb1      	ldr	r3, [pc, #708]	; (8004fe0 <HAL_RCC_OscConfig+0x810>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0ec      	beq.n	8004cfe <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d02c      	beq.n	8004d8a <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8004d30:	4bac      	ldr	r3, [pc, #688]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d42:	49a8      	ldr	r1, [pc, #672]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d010      	beq.n	8004d78 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004d56:	4ba3      	ldr	r3, [pc, #652]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5c:	4aa1      	ldr	r2, [pc, #644]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004d5e:	f043 0304 	orr.w	r3, r3, #4
 8004d62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d66:	4b9f      	ldr	r3, [pc, #636]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6c:	4a9d      	ldr	r2, [pc, #628]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004d6e:	f043 0301 	orr.w	r3, r3, #1
 8004d72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d76:	e018      	b.n	8004daa <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d78:	4b9a      	ldr	r3, [pc, #616]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7e:	4a99      	ldr	r2, [pc, #612]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004d80:	f043 0301 	orr.w	r3, r3, #1
 8004d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d88:	e00f      	b.n	8004daa <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d8a:	4b96      	ldr	r3, [pc, #600]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d90:	4a94      	ldr	r2, [pc, #592]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004d92:	f023 0301 	bic.w	r3, r3, #1
 8004d96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004d9a:	4b92      	ldr	r3, [pc, #584]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da0:	4a90      	ldr	r2, [pc, #576]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004da2:	f023 0304 	bic.w	r3, r3, #4
 8004da6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d016      	beq.n	8004de0 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db2:	f7fd fbbd 	bl	8002530 <HAL_GetTick>
 8004db6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004db8:	e00a      	b.n	8004dd0 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dba:	f7fd fbb9 	bl	8002530 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e15f      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dd0:	4b84      	ldr	r3, [pc, #528]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0ed      	beq.n	8004dba <HAL_RCC_OscConfig+0x5ea>
 8004dde:	e01d      	b.n	8004e1c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de0:	f7fd fba6 	bl	8002530 <HAL_GetTick>
 8004de4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004de6:	e00a      	b.n	8004dfe <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de8:	f7fd fba2 	bl	8002530 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e148      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dfe:	4b79      	ldr	r3, [pc, #484]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1ed      	bne.n	8004de8 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004e0c:	4b75      	ldr	r3, [pc, #468]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e12:	4a74      	ldr	r2, [pc, #464]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004e14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d105      	bne.n	8004e30 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e24:	4b6f      	ldr	r3, [pc, #444]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e28:	4a6e      	ldr	r2, [pc, #440]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004e2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e2e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0320 	and.w	r3, r3, #32
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d03c      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d01c      	beq.n	8004e7e <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e44:	4b67      	ldr	r3, [pc, #412]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004e46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e4a:	4a66      	ldr	r2, [pc, #408]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004e4c:	f043 0301 	orr.w	r3, r3, #1
 8004e50:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e54:	f7fd fb6c 	bl	8002530 <HAL_GetTick>
 8004e58:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e5c:	f7fd fb68 	bl	8002530 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e110      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e6e:	4b5d      	ldr	r3, [pc, #372]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004e70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0ef      	beq.n	8004e5c <HAL_RCC_OscConfig+0x68c>
 8004e7c:	e01b      	b.n	8004eb6 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e7e:	4b59      	ldr	r3, [pc, #356]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004e80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e84:	4a57      	ldr	r2, [pc, #348]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004e86:	f023 0301 	bic.w	r3, r3, #1
 8004e8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e8e:	f7fd fb4f 	bl	8002530 <HAL_GetTick>
 8004e92:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e94:	e008      	b.n	8004ea8 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e96:	f7fd fb4b 	bl	8002530 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e0f3      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ea8:	4b4e      	ldr	r3, [pc, #312]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004eaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1ef      	bne.n	8004e96 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 80e7 	beq.w	800508e <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	f040 80b7 	bne.w	8005038 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004eca:	4b46      	ldr	r3, [pc, #280]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	f003 0203 	and.w	r2, r3, #3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d124      	bne.n	8004f28 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d11b      	bne.n	8004f28 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d113      	bne.n	8004f28 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0a:	085b      	lsrs	r3, r3, #1
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d109      	bne.n	8004f28 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	085b      	lsrs	r3, r3, #1
 8004f20:	3b01      	subs	r3, #1
 8004f22:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d061      	beq.n	8004fec <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	2b0c      	cmp	r3, #12
 8004f2c:	d056      	beq.n	8004fdc <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f2e:	4b2d      	ldr	r3, [pc, #180]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a2c      	ldr	r2, [pc, #176]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004f34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f38:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f3a:	f7fd faf9 	bl	8002530 <HAL_GetTick>
 8004f3e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f42:	f7fd faf5 	bl	8002530 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e09d      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f54:	4b23      	ldr	r3, [pc, #140]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1f0      	bne.n	8004f42 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f60:	4b20      	ldr	r3, [pc, #128]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004f62:	68da      	ldr	r2, [r3, #12]
 8004f64:	4b20      	ldr	r3, [pc, #128]	; (8004fe8 <HAL_RCC_OscConfig+0x818>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f70:	3a01      	subs	r2, #1
 8004f72:	0112      	lsls	r2, r2, #4
 8004f74:	4311      	orrs	r1, r2
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f7a:	0212      	lsls	r2, r2, #8
 8004f7c:	4311      	orrs	r1, r2
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f82:	0852      	lsrs	r2, r2, #1
 8004f84:	3a01      	subs	r2, #1
 8004f86:	0552      	lsls	r2, r2, #21
 8004f88:	4311      	orrs	r1, r2
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f8e:	0852      	lsrs	r2, r2, #1
 8004f90:	3a01      	subs	r2, #1
 8004f92:	0652      	lsls	r2, r2, #25
 8004f94:	430a      	orrs	r2, r1
 8004f96:	4913      	ldr	r1, [pc, #76]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f9c:	4b11      	ldr	r3, [pc, #68]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a10      	ldr	r2, [pc, #64]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fa6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fa8:	4b0e      	ldr	r3, [pc, #56]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	4a0d      	ldr	r2, [pc, #52]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fb4:	f7fd fabc 	bl	8002530 <HAL_GetTick>
 8004fb8:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fbc:	f7fd fab8 	bl	8002530 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e060      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fce:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <HAL_RCC_OscConfig+0x814>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0f0      	beq.n	8004fbc <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fda:	e058      	b.n	800508e <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e057      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
 8004fe0:	40007000 	.word	0x40007000
 8004fe4:	40021000 	.word	0x40021000
 8004fe8:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fec:	4b2a      	ldr	r3, [pc, #168]	; (8005098 <HAL_RCC_OscConfig+0x8c8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d14a      	bne.n	800508e <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ff8:	4b27      	ldr	r3, [pc, #156]	; (8005098 <HAL_RCC_OscConfig+0x8c8>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a26      	ldr	r2, [pc, #152]	; (8005098 <HAL_RCC_OscConfig+0x8c8>)
 8004ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005002:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005004:	4b24      	ldr	r3, [pc, #144]	; (8005098 <HAL_RCC_OscConfig+0x8c8>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	4a23      	ldr	r2, [pc, #140]	; (8005098 <HAL_RCC_OscConfig+0x8c8>)
 800500a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800500e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005010:	f7fd fa8e 	bl	8002530 <HAL_GetTick>
 8005014:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005018:	f7fd fa8a 	bl	8002530 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e032      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800502a:	4b1b      	ldr	r3, [pc, #108]	; (8005098 <HAL_RCC_OscConfig+0x8c8>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0f0      	beq.n	8005018 <HAL_RCC_OscConfig+0x848>
 8005036:	e02a      	b.n	800508e <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	2b0c      	cmp	r3, #12
 800503c:	d025      	beq.n	800508a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503e:	4b16      	ldr	r3, [pc, #88]	; (8005098 <HAL_RCC_OscConfig+0x8c8>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a15      	ldr	r2, [pc, #84]	; (8005098 <HAL_RCC_OscConfig+0x8c8>)
 8005044:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005048:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800504a:	4b13      	ldr	r3, [pc, #76]	; (8005098 <HAL_RCC_OscConfig+0x8c8>)
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	4a12      	ldr	r2, [pc, #72]	; (8005098 <HAL_RCC_OscConfig+0x8c8>)
 8005050:	f023 0303 	bic.w	r3, r3, #3
 8005054:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8005056:	4b10      	ldr	r3, [pc, #64]	; (8005098 <HAL_RCC_OscConfig+0x8c8>)
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	4a0f      	ldr	r2, [pc, #60]	; (8005098 <HAL_RCC_OscConfig+0x8c8>)
 800505c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005060:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005062:	f7fd fa65 	bl	8002530 <HAL_GetTick>
 8005066:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005068:	e008      	b.n	800507c <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800506a:	f7fd fa61 	bl	8002530 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e009      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800507c:	4b06      	ldr	r3, [pc, #24]	; (8005098 <HAL_RCC_OscConfig+0x8c8>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1f0      	bne.n	800506a <HAL_RCC_OscConfig+0x89a>
 8005088:	e001      	b.n	800508e <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e000      	b.n	8005090 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3728      	adds	r7, #40	; 0x28
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	40021000 	.word	0x40021000

0800509c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e0c8      	b.n	8005242 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050b0:	4b66      	ldr	r3, [pc, #408]	; (800524c <HAL_RCC_ClockConfig+0x1b0>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d910      	bls.n	80050e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050be:	4b63      	ldr	r3, [pc, #396]	; (800524c <HAL_RCC_ClockConfig+0x1b0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f023 0207 	bic.w	r2, r3, #7
 80050c6:	4961      	ldr	r1, [pc, #388]	; (800524c <HAL_RCC_ClockConfig+0x1b0>)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ce:	4b5f      	ldr	r3, [pc, #380]	; (800524c <HAL_RCC_ClockConfig+0x1b0>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d001      	beq.n	80050e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e0b0      	b.n	8005242 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d04c      	beq.n	8005186 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2b03      	cmp	r3, #3
 80050f2:	d107      	bne.n	8005104 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050f4:	4b56      	ldr	r3, [pc, #344]	; (8005250 <HAL_RCC_ClockConfig+0x1b4>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d121      	bne.n	8005144 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e09e      	b.n	8005242 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2b02      	cmp	r3, #2
 800510a:	d107      	bne.n	800511c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800510c:	4b50      	ldr	r3, [pc, #320]	; (8005250 <HAL_RCC_ClockConfig+0x1b4>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d115      	bne.n	8005144 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e092      	b.n	8005242 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d107      	bne.n	8005134 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005124:	4b4a      	ldr	r3, [pc, #296]	; (8005250 <HAL_RCC_ClockConfig+0x1b4>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d109      	bne.n	8005144 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e086      	b.n	8005242 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005134:	4b46      	ldr	r3, [pc, #280]	; (8005250 <HAL_RCC_ClockConfig+0x1b4>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e07e      	b.n	8005242 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005144:	4b42      	ldr	r3, [pc, #264]	; (8005250 <HAL_RCC_ClockConfig+0x1b4>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f023 0203 	bic.w	r2, r3, #3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	493f      	ldr	r1, [pc, #252]	; (8005250 <HAL_RCC_ClockConfig+0x1b4>)
 8005152:	4313      	orrs	r3, r2
 8005154:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005156:	f7fd f9eb 	bl	8002530 <HAL_GetTick>
 800515a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800515c:	e00a      	b.n	8005174 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800515e:	f7fd f9e7 	bl	8002530 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	f241 3288 	movw	r2, #5000	; 0x1388
 800516c:	4293      	cmp	r3, r2
 800516e:	d901      	bls.n	8005174 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e066      	b.n	8005242 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005174:	4b36      	ldr	r3, [pc, #216]	; (8005250 <HAL_RCC_ClockConfig+0x1b4>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f003 020c 	and.w	r2, r3, #12
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	429a      	cmp	r2, r3
 8005184:	d1eb      	bne.n	800515e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d008      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005192:	4b2f      	ldr	r3, [pc, #188]	; (8005250 <HAL_RCC_ClockConfig+0x1b4>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	492c      	ldr	r1, [pc, #176]	; (8005250 <HAL_RCC_ClockConfig+0x1b4>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051a4:	4b29      	ldr	r3, [pc, #164]	; (800524c <HAL_RCC_ClockConfig+0x1b0>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d210      	bcs.n	80051d4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b2:	4b26      	ldr	r3, [pc, #152]	; (800524c <HAL_RCC_ClockConfig+0x1b0>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f023 0207 	bic.w	r2, r3, #7
 80051ba:	4924      	ldr	r1, [pc, #144]	; (800524c <HAL_RCC_ClockConfig+0x1b0>)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	4313      	orrs	r3, r2
 80051c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c2:	4b22      	ldr	r3, [pc, #136]	; (800524c <HAL_RCC_ClockConfig+0x1b0>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d001      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e036      	b.n	8005242 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d008      	beq.n	80051f2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051e0:	4b1b      	ldr	r3, [pc, #108]	; (8005250 <HAL_RCC_ClockConfig+0x1b4>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	4918      	ldr	r1, [pc, #96]	; (8005250 <HAL_RCC_ClockConfig+0x1b4>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d009      	beq.n	8005212 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051fe:	4b14      	ldr	r3, [pc, #80]	; (8005250 <HAL_RCC_ClockConfig+0x1b4>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	4910      	ldr	r1, [pc, #64]	; (8005250 <HAL_RCC_ClockConfig+0x1b4>)
 800520e:	4313      	orrs	r3, r2
 8005210:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005212:	f000 f825 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 8005216:	4601      	mov	r1, r0
 8005218:	4b0d      	ldr	r3, [pc, #52]	; (8005250 <HAL_RCC_ClockConfig+0x1b4>)
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	091b      	lsrs	r3, r3, #4
 800521e:	f003 030f 	and.w	r3, r3, #15
 8005222:	4a0c      	ldr	r2, [pc, #48]	; (8005254 <HAL_RCC_ClockConfig+0x1b8>)
 8005224:	5cd3      	ldrb	r3, [r2, r3]
 8005226:	f003 031f 	and.w	r3, r3, #31
 800522a:	fa21 f303 	lsr.w	r3, r1, r3
 800522e:	4a0a      	ldr	r2, [pc, #40]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 8005230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005232:	4b0a      	ldr	r3, [pc, #40]	; (800525c <HAL_RCC_ClockConfig+0x1c0>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	f7fd f92e 	bl	8002498 <HAL_InitTick>
 800523c:	4603      	mov	r3, r0
 800523e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005240:	7afb      	ldrb	r3, [r7, #11]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	40022000 	.word	0x40022000
 8005250:	40021000 	.word	0x40021000
 8005254:	0800aa14 	.word	0x0800aa14
 8005258:	20000000 	.word	0x20000000
 800525c:	20000004 	.word	0x20000004

08005260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005260:	b480      	push	{r7}
 8005262:	b089      	sub	sp, #36	; 0x24
 8005264:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	61fb      	str	r3, [r7, #28]
 800526a:	2300      	movs	r3, #0
 800526c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800526e:	4b3d      	ldr	r3, [pc, #244]	; (8005364 <HAL_RCC_GetSysClockFreq+0x104>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 030c 	and.w	r3, r3, #12
 8005276:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005278:	4b3a      	ldr	r3, [pc, #232]	; (8005364 <HAL_RCC_GetSysClockFreq+0x104>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0303 	and.w	r3, r3, #3
 8005280:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <HAL_RCC_GetSysClockFreq+0x34>
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	2b0c      	cmp	r3, #12
 800528c:	d121      	bne.n	80052d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d11e      	bne.n	80052d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005294:	4b33      	ldr	r3, [pc, #204]	; (8005364 <HAL_RCC_GetSysClockFreq+0x104>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b00      	cmp	r3, #0
 800529e:	d107      	bne.n	80052b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80052a0:	4b30      	ldr	r3, [pc, #192]	; (8005364 <HAL_RCC_GetSysClockFreq+0x104>)
 80052a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052a6:	0a1b      	lsrs	r3, r3, #8
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	61fb      	str	r3, [r7, #28]
 80052ae:	e005      	b.n	80052bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80052b0:	4b2c      	ldr	r3, [pc, #176]	; (8005364 <HAL_RCC_GetSysClockFreq+0x104>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	091b      	lsrs	r3, r3, #4
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052bc:	4a2a      	ldr	r2, [pc, #168]	; (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10d      	bne.n	80052e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052d0:	e00a      	b.n	80052e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d102      	bne.n	80052de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052d8:	4b24      	ldr	r3, [pc, #144]	; (800536c <HAL_RCC_GetSysClockFreq+0x10c>)
 80052da:	61bb      	str	r3, [r7, #24]
 80052dc:	e004      	b.n	80052e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d101      	bne.n	80052e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052e4:	4b22      	ldr	r3, [pc, #136]	; (8005370 <HAL_RCC_GetSysClockFreq+0x110>)
 80052e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	2b0c      	cmp	r3, #12
 80052ec:	d133      	bne.n	8005356 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052ee:	4b1d      	ldr	r3, [pc, #116]	; (8005364 <HAL_RCC_GetSysClockFreq+0x104>)
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d002      	beq.n	8005304 <HAL_RCC_GetSysClockFreq+0xa4>
 80052fe:	2b03      	cmp	r3, #3
 8005300:	d003      	beq.n	800530a <HAL_RCC_GetSysClockFreq+0xaa>
 8005302:	e005      	b.n	8005310 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005304:	4b19      	ldr	r3, [pc, #100]	; (800536c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005306:	617b      	str	r3, [r7, #20]
      break;
 8005308:	e005      	b.n	8005316 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800530a:	4b19      	ldr	r3, [pc, #100]	; (8005370 <HAL_RCC_GetSysClockFreq+0x110>)
 800530c:	617b      	str	r3, [r7, #20]
      break;
 800530e:	e002      	b.n	8005316 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	617b      	str	r3, [r7, #20]
      break;
 8005314:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005316:	4b13      	ldr	r3, [pc, #76]	; (8005364 <HAL_RCC_GetSysClockFreq+0x104>)
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	091b      	lsrs	r3, r3, #4
 800531c:	f003 0307 	and.w	r3, r3, #7
 8005320:	3301      	adds	r3, #1
 8005322:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005324:	4b0f      	ldr	r3, [pc, #60]	; (8005364 <HAL_RCC_GetSysClockFreq+0x104>)
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	0a1b      	lsrs	r3, r3, #8
 800532a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	fb02 f203 	mul.w	r2, r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	fbb2 f3f3 	udiv	r3, r2, r3
 800533a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800533c:	4b09      	ldr	r3, [pc, #36]	; (8005364 <HAL_RCC_GetSysClockFreq+0x104>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	0e5b      	lsrs	r3, r3, #25
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	3301      	adds	r3, #1
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	fbb2 f3f3 	udiv	r3, r2, r3
 8005354:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005356:	69bb      	ldr	r3, [r7, #24]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3724      	adds	r7, #36	; 0x24
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	40021000 	.word	0x40021000
 8005368:	0800aa2c 	.word	0x0800aa2c
 800536c:	00f42400 	.word	0x00f42400
 8005370:	007a1200 	.word	0x007a1200

08005374 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005378:	4b03      	ldr	r3, [pc, #12]	; (8005388 <HAL_RCC_GetHCLKFreq+0x14>)
 800537a:	681b      	ldr	r3, [r3, #0]
}
 800537c:	4618      	mov	r0, r3
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	20000000 	.word	0x20000000

0800538c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005390:	f7ff fff0 	bl	8005374 <HAL_RCC_GetHCLKFreq>
 8005394:	4601      	mov	r1, r0
 8005396:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	0a1b      	lsrs	r3, r3, #8
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	4a04      	ldr	r2, [pc, #16]	; (80053b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053a2:	5cd3      	ldrb	r3, [r2, r3]
 80053a4:	f003 031f 	and.w	r3, r3, #31
 80053a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	40021000 	.word	0x40021000
 80053b4:	0800aa24 	.word	0x0800aa24

080053b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053bc:	f7ff ffda 	bl	8005374 <HAL_RCC_GetHCLKFreq>
 80053c0:	4601      	mov	r1, r0
 80053c2:	4b06      	ldr	r3, [pc, #24]	; (80053dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	0adb      	lsrs	r3, r3, #11
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	4a04      	ldr	r2, [pc, #16]	; (80053e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053ce:	5cd3      	ldrb	r3, [r2, r3]
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80053d8:	4618      	mov	r0, r3
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40021000 	.word	0x40021000
 80053e0:	0800aa24 	.word	0x0800aa24

080053e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053ec:	2300      	movs	r3, #0
 80053ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053f0:	4b2a      	ldr	r3, [pc, #168]	; (800549c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d003      	beq.n	8005404 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053fc:	f7ff f974 	bl	80046e8 <HAL_PWREx_GetVoltageRange>
 8005400:	6178      	str	r0, [r7, #20]
 8005402:	e014      	b.n	800542e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005404:	4b25      	ldr	r3, [pc, #148]	; (800549c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005408:	4a24      	ldr	r2, [pc, #144]	; (800549c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800540a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800540e:	6593      	str	r3, [r2, #88]	; 0x58
 8005410:	4b22      	ldr	r3, [pc, #136]	; (800549c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800541c:	f7ff f964 	bl	80046e8 <HAL_PWREx_GetVoltageRange>
 8005420:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005422:	4b1e      	ldr	r3, [pc, #120]	; (800549c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005426:	4a1d      	ldr	r2, [pc, #116]	; (800549c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800542c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005434:	d10b      	bne.n	800544e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b80      	cmp	r3, #128	; 0x80
 800543a:	d919      	bls.n	8005470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2ba0      	cmp	r3, #160	; 0xa0
 8005440:	d902      	bls.n	8005448 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005442:	2302      	movs	r3, #2
 8005444:	613b      	str	r3, [r7, #16]
 8005446:	e013      	b.n	8005470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005448:	2301      	movs	r3, #1
 800544a:	613b      	str	r3, [r7, #16]
 800544c:	e010      	b.n	8005470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b80      	cmp	r3, #128	; 0x80
 8005452:	d902      	bls.n	800545a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005454:	2303      	movs	r3, #3
 8005456:	613b      	str	r3, [r7, #16]
 8005458:	e00a      	b.n	8005470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b80      	cmp	r3, #128	; 0x80
 800545e:	d102      	bne.n	8005466 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005460:	2302      	movs	r3, #2
 8005462:	613b      	str	r3, [r7, #16]
 8005464:	e004      	b.n	8005470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b70      	cmp	r3, #112	; 0x70
 800546a:	d101      	bne.n	8005470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800546c:	2301      	movs	r3, #1
 800546e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005470:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f023 0207 	bic.w	r2, r3, #7
 8005478:	4909      	ldr	r1, [pc, #36]	; (80054a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	4313      	orrs	r3, r2
 800547e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005480:	4b07      	ldr	r3, [pc, #28]	; (80054a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	429a      	cmp	r2, r3
 800548c:	d001      	beq.n	8005492 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e000      	b.n	8005494 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	40021000 	.word	0x40021000
 80054a0:	40022000 	.word	0x40022000

080054a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054ac:	2300      	movs	r3, #0
 80054ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054b0:	2300      	movs	r3, #0
 80054b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 809e 	beq.w	80055fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054c2:	2300      	movs	r3, #0
 80054c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80054c6:	4b46      	ldr	r3, [pc, #280]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80054c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80054d2:	2301      	movs	r3, #1
 80054d4:	e000      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80054d6:	2300      	movs	r3, #0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00d      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054dc:	4b40      	ldr	r3, [pc, #256]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80054de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e0:	4a3f      	ldr	r2, [pc, #252]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80054e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054e6:	6593      	str	r3, [r2, #88]	; 0x58
 80054e8:	4b3d      	ldr	r3, [pc, #244]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80054ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f0:	60bb      	str	r3, [r7, #8]
 80054f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054f4:	2301      	movs	r3, #1
 80054f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054f8:	4b3a      	ldr	r3, [pc, #232]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a39      	ldr	r2, [pc, #228]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80054fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005502:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005504:	f7fd f814 	bl	8002530 <HAL_GetTick>
 8005508:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800550a:	e009      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800550c:	f7fd f810 	bl	8002530 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d902      	bls.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	74fb      	strb	r3, [r7, #19]
        break;
 800551e:	e005      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005520:	4b30      	ldr	r3, [pc, #192]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0ef      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 800552c:	7cfb      	ldrb	r3, [r7, #19]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d15a      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005532:	4b2b      	ldr	r3, [pc, #172]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800553c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d01e      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	429a      	cmp	r2, r3
 800554c:	d019      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800554e:	4b24      	ldr	r3, [pc, #144]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005558:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800555a:	4b21      	ldr	r3, [pc, #132]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800555c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005560:	4a1f      	ldr	r2, [pc, #124]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005566:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800556a:	4b1d      	ldr	r3, [pc, #116]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800556c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005570:	4a1b      	ldr	r2, [pc, #108]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005576:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800557a:	4a19      	ldr	r2, [pc, #100]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d016      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800558c:	f7fc ffd0 	bl	8002530 <HAL_GetTick>
 8005590:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005592:	e00b      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005594:	f7fc ffcc 	bl	8002530 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	f241 3288 	movw	r2, #5000	; 0x1388
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d902      	bls.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	74fb      	strb	r3, [r7, #19]
            break;
 80055aa:	e006      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055ac:	4b0c      	ldr	r3, [pc, #48]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80055ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d0ec      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80055ba:	7cfb      	ldrb	r3, [r7, #19]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10b      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055c0:	4b07      	ldr	r3, [pc, #28]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80055c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ce:	4904      	ldr	r1, [pc, #16]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80055d6:	e009      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055d8:	7cfb      	ldrb	r3, [r7, #19]
 80055da:	74bb      	strb	r3, [r7, #18]
 80055dc:	e006      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x148>
 80055de:	bf00      	nop
 80055e0:	40021000 	.word	0x40021000
 80055e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e8:	7cfb      	ldrb	r3, [r7, #19]
 80055ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055ec:	7c7b      	ldrb	r3, [r7, #17]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d105      	bne.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055f2:	4b6e      	ldr	r3, [pc, #440]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80055f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f6:	4a6d      	ldr	r2, [pc, #436]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80055f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800560a:	4b68      	ldr	r3, [pc, #416]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800560c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005610:	f023 0203 	bic.w	r2, r3, #3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	4964      	ldr	r1, [pc, #400]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800561a:	4313      	orrs	r3, r2
 800561c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00a      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800562c:	4b5f      	ldr	r3, [pc, #380]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800562e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005632:	f023 020c 	bic.w	r2, r3, #12
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	495c      	ldr	r1, [pc, #368]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800564e:	4b57      	ldr	r3, [pc, #348]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005654:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	4953      	ldr	r1, [pc, #332]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800565e:	4313      	orrs	r3, r2
 8005660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0320 	and.w	r3, r3, #32
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005670:	4b4e      	ldr	r3, [pc, #312]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005676:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	494b      	ldr	r1, [pc, #300]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005692:	4b46      	ldr	r3, [pc, #280]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005698:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	4942      	ldr	r1, [pc, #264]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00a      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056b4:	4b3d      	ldr	r3, [pc, #244]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	493a      	ldr	r1, [pc, #232]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00a      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056d6:	4b35      	ldr	r3, [pc, #212]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80056d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	4931      	ldr	r1, [pc, #196]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00a      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056f8:	4b2c      	ldr	r3, [pc, #176]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80056fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	4929      	ldr	r1, [pc, #164]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005708:	4313      	orrs	r3, r2
 800570a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00a      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800571a:	4b24      	ldr	r3, [pc, #144]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800571c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005720:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	4920      	ldr	r1, [pc, #128]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800572a:	4313      	orrs	r3, r2
 800572c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d015      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800573c:	4b1b      	ldr	r3, [pc, #108]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800573e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005742:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574a:	4918      	ldr	r1, [pc, #96]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800574c:	4313      	orrs	r3, r2
 800574e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005756:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800575a:	d105      	bne.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800575c:	4b13      	ldr	r3, [pc, #76]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	4a12      	ldr	r2, [pc, #72]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005762:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005766:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d015      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005774:	4b0d      	ldr	r3, [pc, #52]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005782:	490a      	ldr	r1, [pc, #40]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005784:	4313      	orrs	r3, r2
 8005786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005792:	d105      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005794:	4b05      	ldr	r3, [pc, #20]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	4a04      	ldr	r2, [pc, #16]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800579a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800579e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80057a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3718      	adds	r7, #24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	40021000 	.word	0x40021000

080057b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e07c      	b.n	80058bc <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d106      	bne.n	80057e2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7fc fcc1 	bl	8002164 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2202      	movs	r2, #2
 80057e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057f8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005802:	d902      	bls.n	800580a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005804:	2300      	movs	r3, #0
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	e002      	b.n	8005810 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800580a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800580e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005818:	d007      	beq.n	800582a <HAL_SPI_Init+0x7a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005822:	d002      	beq.n	800582a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10b      	bne.n	800584a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800583a:	d903      	bls.n	8005844 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	631a      	str	r2, [r3, #48]	; 0x30
 8005842:	e002      	b.n	800584a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	431a      	orrs	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	431a      	orrs	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005868:	431a      	orrs	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	431a      	orrs	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	ea42 0103 	orr.w	r1, r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	0c1b      	lsrs	r3, r3, #16
 800588a:	f003 0204 	and.w	r2, r3, #4
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005898:	431a      	orrs	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	ea42 0103 	orr.w	r1, r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b088      	sub	sp, #32
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	603b      	str	r3, [r7, #0]
 80058d0:	4613      	mov	r3, r2
 80058d2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d101      	bne.n	80058e6 <HAL_SPI_Transmit+0x22>
 80058e2:	2302      	movs	r3, #2
 80058e4:	e150      	b.n	8005b88 <HAL_SPI_Transmit+0x2c4>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058ee:	f7fc fe1f 	bl	8002530 <HAL_GetTick>
 80058f2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80058f4:	88fb      	ldrh	r3, [r7, #6]
 80058f6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b01      	cmp	r3, #1
 8005902:	d002      	beq.n	800590a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005904:	2302      	movs	r3, #2
 8005906:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005908:	e135      	b.n	8005b76 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <HAL_SPI_Transmit+0x52>
 8005910:	88fb      	ldrh	r3, [r7, #6]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d102      	bne.n	800591c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	77fb      	strb	r3, [r7, #31]
    goto error;
 800591a:	e12c      	b.n	8005b76 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2203      	movs	r2, #3
 8005920:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	88fa      	ldrh	r2, [r7, #6]
 8005934:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	88fa      	ldrh	r2, [r7, #6]
 800593a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005966:	d107      	bne.n	8005978 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005976:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005982:	2b40      	cmp	r3, #64	; 0x40
 8005984:	d007      	beq.n	8005996 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005994:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800599e:	d94b      	bls.n	8005a38 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d002      	beq.n	80059ae <HAL_SPI_Transmit+0xea>
 80059a8:	8afb      	ldrh	r3, [r7, #22]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d13e      	bne.n	8005a2c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b2:	881a      	ldrh	r2, [r3, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059be:	1c9a      	adds	r2, r3, #2
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	3b01      	subs	r3, #1
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80059d2:	e02b      	b.n	8005a2c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d112      	bne.n	8005a08 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e6:	881a      	ldrh	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f2:	1c9a      	adds	r2, r3, #2
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	3b01      	subs	r3, #1
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a06:	e011      	b.n	8005a2c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a08:	f7fc fd92 	bl	8002530 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d803      	bhi.n	8005a20 <HAL_SPI_Transmit+0x15c>
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1e:	d102      	bne.n	8005a26 <HAL_SPI_Transmit+0x162>
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d102      	bne.n	8005a2c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a2a:	e0a4      	b.n	8005b76 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1ce      	bne.n	80059d4 <HAL_SPI_Transmit+0x110>
 8005a36:	e07c      	b.n	8005b32 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d002      	beq.n	8005a46 <HAL_SPI_Transmit+0x182>
 8005a40:	8afb      	ldrh	r3, [r7, #22]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d170      	bne.n	8005b28 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d912      	bls.n	8005a76 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a54:	881a      	ldrh	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a60:	1c9a      	adds	r2, r3, #2
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	3b02      	subs	r3, #2
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a74:	e058      	b.n	8005b28 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	330c      	adds	r3, #12
 8005a80:	7812      	ldrb	r2, [r2, #0]
 8005a82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	3b01      	subs	r3, #1
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005a9c:	e044      	b.n	8005b28 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f003 0302 	and.w	r3, r3, #2
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d12b      	bne.n	8005b04 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d912      	bls.n	8005adc <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aba:	881a      	ldrh	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac6:	1c9a      	adds	r2, r3, #2
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	3b02      	subs	r3, #2
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ada:	e025      	b.n	8005b28 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	330c      	adds	r3, #12
 8005ae6:	7812      	ldrb	r2, [r2, #0]
 8005ae8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	3b01      	subs	r3, #1
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b02:	e011      	b.n	8005b28 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b04:	f7fc fd14 	bl	8002530 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d803      	bhi.n	8005b1c <HAL_SPI_Transmit+0x258>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b1a:	d102      	bne.n	8005b22 <HAL_SPI_Transmit+0x25e>
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d102      	bne.n	8005b28 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b26:	e026      	b.n	8005b76 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1b5      	bne.n	8005a9e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	6839      	ldr	r1, [r7, #0]
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f000 fc94 	bl	8006464 <SPI_EndRxTxTransaction>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2220      	movs	r2, #32
 8005b46:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10a      	bne.n	8005b66 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b50:	2300      	movs	r3, #0
 8005b52:	613b      	str	r3, [r7, #16]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	613b      	str	r3, [r7, #16]
 8005b64:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	77fb      	strb	r3, [r7, #31]
 8005b72:	e000      	b.n	8005b76 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8005b74:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005b86:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3720      	adds	r7, #32
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b088      	sub	sp, #32
 8005b94:	af02      	add	r7, sp, #8
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	603b      	str	r3, [r7, #0]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bac:	d112      	bne.n	8005bd4 <HAL_SPI_Receive+0x44>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10e      	bne.n	8005bd4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2204      	movs	r2, #4
 8005bba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005bbe:	88fa      	ldrh	r2, [r7, #6]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	68b9      	ldr	r1, [r7, #8]
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f000 f908 	bl	8005de0 <HAL_SPI_TransmitReceive>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	e101      	b.n	8005dd8 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d101      	bne.n	8005be2 <HAL_SPI_Receive+0x52>
 8005bde:	2302      	movs	r3, #2
 8005be0:	e0fa      	b.n	8005dd8 <HAL_SPI_Receive+0x248>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bea:	f7fc fca1 	bl	8002530 <HAL_GetTick>
 8005bee:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d002      	beq.n	8005c02 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c00:	e0e1      	b.n	8005dc6 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <HAL_SPI_Receive+0x7e>
 8005c08:	88fb      	ldrh	r3, [r7, #6]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d102      	bne.n	8005c14 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c12:	e0d8      	b.n	8005dc6 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2204      	movs	r2, #4
 8005c18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	88fa      	ldrh	r2, [r7, #6]
 8005c2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	88fa      	ldrh	r2, [r7, #6]
 8005c34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c5e:	d908      	bls.n	8005c72 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c6e:	605a      	str	r2, [r3, #4]
 8005c70:	e007      	b.n	8005c82 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c80:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c8a:	d107      	bne.n	8005c9c <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c9a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca6:	2b40      	cmp	r3, #64	; 0x40
 8005ca8:	d007      	beq.n	8005cba <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cb8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cc2:	d867      	bhi.n	8005d94 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005cc4:	e030      	b.n	8005d28 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d117      	bne.n	8005d04 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f103 020c 	add.w	r2, r3, #12
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce0:	7812      	ldrb	r2, [r2, #0]
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005d02:	e011      	b.n	8005d28 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d04:	f7fc fc14 	bl	8002530 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d803      	bhi.n	8005d1c <HAL_SPI_Receive+0x18c>
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1a:	d102      	bne.n	8005d22 <HAL_SPI_Receive+0x192>
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d102      	bne.n	8005d28 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005d26:	e04e      	b.n	8005dc6 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1c8      	bne.n	8005cc6 <HAL_SPI_Receive+0x136>
 8005d34:	e034      	b.n	8005da0 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d115      	bne.n	8005d70 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	b292      	uxth	r2, r2
 8005d50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d56:	1c9a      	adds	r2, r3, #2
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	3b01      	subs	r3, #1
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005d6e:	e011      	b.n	8005d94 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d70:	f7fc fbde 	bl	8002530 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d803      	bhi.n	8005d88 <HAL_SPI_Receive+0x1f8>
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d86:	d102      	bne.n	8005d8e <HAL_SPI_Receive+0x1fe>
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d102      	bne.n	8005d94 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005d92:	e018      	b.n	8005dc6 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1ca      	bne.n	8005d36 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	6839      	ldr	r1, [r7, #0]
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f000 fb05 	bl	80063b4 <SPI_EndRxTransaction>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2220      	movs	r2, #32
 8005db4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	75fb      	strb	r3, [r7, #23]
 8005dc2:	e000      	b.n	8005dc6 <HAL_SPI_Receive+0x236>
  }

error :
 8005dc4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3718      	adds	r7, #24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08a      	sub	sp, #40	; 0x28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005dee:	2301      	movs	r3, #1
 8005df0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005df2:	2300      	movs	r3, #0
 8005df4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d101      	bne.n	8005e06 <HAL_SPI_TransmitReceive+0x26>
 8005e02:	2302      	movs	r3, #2
 8005e04:	e1fb      	b.n	80061fe <HAL_SPI_TransmitReceive+0x41e>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e0e:	f7fc fb8f 	bl	8002530 <HAL_GetTick>
 8005e12:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e1a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005e22:	887b      	ldrh	r3, [r7, #2]
 8005e24:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005e26:	887b      	ldrh	r3, [r7, #2]
 8005e28:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e2a:	7efb      	ldrb	r3, [r7, #27]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d00e      	beq.n	8005e4e <HAL_SPI_TransmitReceive+0x6e>
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e36:	d106      	bne.n	8005e46 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d102      	bne.n	8005e46 <HAL_SPI_TransmitReceive+0x66>
 8005e40:	7efb      	ldrb	r3, [r7, #27]
 8005e42:	2b04      	cmp	r3, #4
 8005e44:	d003      	beq.n	8005e4e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005e46:	2302      	movs	r3, #2
 8005e48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005e4c:	e1cd      	b.n	80061ea <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d005      	beq.n	8005e60 <HAL_SPI_TransmitReceive+0x80>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d002      	beq.n	8005e60 <HAL_SPI_TransmitReceive+0x80>
 8005e5a:	887b      	ldrh	r3, [r7, #2]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d103      	bne.n	8005e68 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005e66:	e1c0      	b.n	80061ea <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b04      	cmp	r3, #4
 8005e72:	d003      	beq.n	8005e7c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2205      	movs	r2, #5
 8005e78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	887a      	ldrh	r2, [r7, #2]
 8005e8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	887a      	ldrh	r2, [r7, #2]
 8005e94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	887a      	ldrh	r2, [r7, #2]
 8005ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	887a      	ldrh	r2, [r7, #2]
 8005ea8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ebe:	d802      	bhi.n	8005ec6 <HAL_SPI_TransmitReceive+0xe6>
 8005ec0:	8a3b      	ldrh	r3, [r7, #16]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d908      	bls.n	8005ed8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ed4:	605a      	str	r2, [r3, #4]
 8005ed6:	e007      	b.n	8005ee8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ee6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef2:	2b40      	cmp	r3, #64	; 0x40
 8005ef4:	d007      	beq.n	8005f06 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f0e:	d97c      	bls.n	800600a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d002      	beq.n	8005f1e <HAL_SPI_TransmitReceive+0x13e>
 8005f18:	8a7b      	ldrh	r3, [r7, #18]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d169      	bne.n	8005ff2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f22:	881a      	ldrh	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2e:	1c9a      	adds	r2, r3, #2
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f42:	e056      	b.n	8005ff2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d11b      	bne.n	8005f8a <HAL_SPI_TransmitReceive+0x1aa>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d016      	beq.n	8005f8a <HAL_SPI_TransmitReceive+0x1aa>
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d113      	bne.n	8005f8a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f66:	881a      	ldrh	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f72:	1c9a      	adds	r2, r3, #2
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d11c      	bne.n	8005fd2 <HAL_SPI_TransmitReceive+0x1f2>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d016      	beq.n	8005fd2 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	b292      	uxth	r2, r2
 8005fb0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb6:	1c9a      	adds	r2, r3, #2
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005fd2:	f7fc faad 	bl	8002530 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d807      	bhi.n	8005ff2 <HAL_SPI_TransmitReceive+0x212>
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe8:	d003      	beq.n	8005ff2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005ff0:	e0fb      	b.n	80061ea <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1a3      	bne.n	8005f44 <HAL_SPI_TransmitReceive+0x164>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006002:	b29b      	uxth	r3, r3
 8006004:	2b00      	cmp	r3, #0
 8006006:	d19d      	bne.n	8005f44 <HAL_SPI_TransmitReceive+0x164>
 8006008:	e0df      	b.n	80061ca <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <HAL_SPI_TransmitReceive+0x23a>
 8006012:	8a7b      	ldrh	r3, [r7, #18]
 8006014:	2b01      	cmp	r3, #1
 8006016:	f040 80cb 	bne.w	80061b0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800601e:	b29b      	uxth	r3, r3
 8006020:	2b01      	cmp	r3, #1
 8006022:	d912      	bls.n	800604a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006028:	881a      	ldrh	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006034:	1c9a      	adds	r2, r3, #2
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800603e:	b29b      	uxth	r3, r3
 8006040:	3b02      	subs	r3, #2
 8006042:	b29a      	uxth	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006048:	e0b2      	b.n	80061b0 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	330c      	adds	r3, #12
 8006054:	7812      	ldrb	r2, [r2, #0]
 8006056:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	1c5a      	adds	r2, r3, #1
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006070:	e09e      	b.n	80061b0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b02      	cmp	r3, #2
 800607e:	d134      	bne.n	80060ea <HAL_SPI_TransmitReceive+0x30a>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006084:	b29b      	uxth	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d02f      	beq.n	80060ea <HAL_SPI_TransmitReceive+0x30a>
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	2b01      	cmp	r3, #1
 800608e:	d12c      	bne.n	80060ea <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006094:	b29b      	uxth	r3, r3
 8006096:	2b01      	cmp	r3, #1
 8006098:	d912      	bls.n	80060c0 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609e:	881a      	ldrh	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060aa:	1c9a      	adds	r2, r3, #2
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	3b02      	subs	r3, #2
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060be:	e012      	b.n	80060e6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	330c      	adds	r3, #12
 80060ca:	7812      	ldrb	r2, [r2, #0]
 80060cc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d2:	1c5a      	adds	r2, r3, #1
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060dc:	b29b      	uxth	r3, r3
 80060de:	3b01      	subs	r3, #1
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d148      	bne.n	800618a <HAL_SPI_TransmitReceive+0x3aa>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060fe:	b29b      	uxth	r3, r3
 8006100:	2b00      	cmp	r3, #0
 8006102:	d042      	beq.n	800618a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800610a:	b29b      	uxth	r3, r3
 800610c:	2b01      	cmp	r3, #1
 800610e:	d923      	bls.n	8006158 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68da      	ldr	r2, [r3, #12]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611a:	b292      	uxth	r2, r2
 800611c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	1c9a      	adds	r2, r3, #2
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800612e:	b29b      	uxth	r3, r3
 8006130:	3b02      	subs	r3, #2
 8006132:	b29a      	uxth	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006140:	b29b      	uxth	r3, r3
 8006142:	2b01      	cmp	r3, #1
 8006144:	d81f      	bhi.n	8006186 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006154:	605a      	str	r2, [r3, #4]
 8006156:	e016      	b.n	8006186 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f103 020c 	add.w	r2, r3, #12
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006164:	7812      	ldrb	r2, [r2, #0]
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800617a:	b29b      	uxth	r3, r3
 800617c:	3b01      	subs	r3, #1
 800617e:	b29a      	uxth	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006186:	2301      	movs	r3, #1
 8006188:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800618a:	f7fc f9d1 	bl	8002530 <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006196:	429a      	cmp	r2, r3
 8006198:	d803      	bhi.n	80061a2 <HAL_SPI_TransmitReceive+0x3c2>
 800619a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a0:	d102      	bne.n	80061a8 <HAL_SPI_TransmitReceive+0x3c8>
 80061a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d103      	bne.n	80061b0 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80061ae:	e01c      	b.n	80061ea <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f47f af5b 	bne.w	8006072 <HAL_SPI_TransmitReceive+0x292>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f47f af54 	bne.w	8006072 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061ca:	69fa      	ldr	r2, [r7, #28]
 80061cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f000 f948 	bl	8006464 <SPI_EndRxTxTransaction>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d006      	beq.n	80061e8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2220      	movs	r2, #32
 80061e4:	661a      	str	r2, [r3, #96]	; 0x60
 80061e6:	e000      	b.n	80061ea <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80061e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80061fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3728      	adds	r7, #40	; 0x28
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b084      	sub	sp, #16
 800620a:	af00      	add	r7, sp, #0
 800620c:	60f8      	str	r0, [r7, #12]
 800620e:	60b9      	str	r1, [r7, #8]
 8006210:	603b      	str	r3, [r7, #0]
 8006212:	4613      	mov	r3, r2
 8006214:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006216:	e04c      	b.n	80062b2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621e:	d048      	beq.n	80062b2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006220:	f7fc f986 	bl	8002530 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	429a      	cmp	r2, r3
 800622e:	d902      	bls.n	8006236 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d13d      	bne.n	80062b2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006244:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800624e:	d111      	bne.n	8006274 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006258:	d004      	beq.n	8006264 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006262:	d107      	bne.n	8006274 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006272:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006278:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800627c:	d10f      	bne.n	800629e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800629c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e00f      	b.n	80062d2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689a      	ldr	r2, [r3, #8]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	4013      	ands	r3, r2
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	429a      	cmp	r2, r3
 80062c0:	bf0c      	ite	eq
 80062c2:	2301      	moveq	r3, #1
 80062c4:	2300      	movne	r3, #0
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	461a      	mov	r2, r3
 80062ca:	79fb      	ldrb	r3, [r7, #7]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d1a3      	bne.n	8006218 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b084      	sub	sp, #16
 80062de:	af00      	add	r7, sp, #0
 80062e0:	60f8      	str	r0, [r7, #12]
 80062e2:	60b9      	str	r1, [r7, #8]
 80062e4:	607a      	str	r2, [r7, #4]
 80062e6:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80062e8:	e057      	b.n	800639a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80062f0:	d106      	bne.n	8006300 <SPI_WaitFifoStateUntilTimeout+0x26>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d103      	bne.n	8006300 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	330c      	adds	r3, #12
 80062fe:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006306:	d048      	beq.n	800639a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006308:	f7fc f912 	bl	8002530 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	429a      	cmp	r2, r3
 8006316:	d902      	bls.n	800631e <SPI_WaitFifoStateUntilTimeout+0x44>
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d13d      	bne.n	800639a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800632c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006336:	d111      	bne.n	800635c <SPI_WaitFifoStateUntilTimeout+0x82>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006340:	d004      	beq.n	800634c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800634a:	d107      	bne.n	800635c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800635a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006364:	d10f      	bne.n	8006386 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006384:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e008      	b.n	80063ac <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	4013      	ands	r3, r2
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d19f      	bne.n	80062ea <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af02      	add	r7, sp, #8
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063c8:	d111      	bne.n	80063ee <SPI_EndRxTransaction+0x3a>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063d2:	d004      	beq.n	80063de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063dc:	d107      	bne.n	80063ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063ec:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2200      	movs	r2, #0
 80063f6:	2180      	movs	r1, #128	; 0x80
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f7ff ff04 	bl	8006206 <SPI_WaitFlagStateUntilTimeout>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d007      	beq.n	8006414 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006408:	f043 0220 	orr.w	r2, r3, #32
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e023      	b.n	800645c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800641c:	d11d      	bne.n	800645a <SPI_EndRxTransaction+0xa6>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006426:	d004      	beq.n	8006432 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006430:	d113      	bne.n	800645a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	2200      	movs	r2, #0
 800643a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f7ff ff4b 	bl	80062da <SPI_WaitFifoStateUntilTimeout>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d007      	beq.n	800645a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800644e:	f043 0220 	orr.w	r2, r3, #32
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e000      	b.n	800645c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af02      	add	r7, sp, #8
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2200      	movs	r2, #0
 8006478:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f7ff ff2c 	bl	80062da <SPI_WaitFifoStateUntilTimeout>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d007      	beq.n	8006498 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800648c:	f043 0220 	orr.w	r2, r3, #32
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e027      	b.n	80064e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2200      	movs	r2, #0
 80064a0:	2180      	movs	r1, #128	; 0x80
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f7ff feaf 	bl	8006206 <SPI_WaitFlagStateUntilTimeout>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d007      	beq.n	80064be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064b2:	f043 0220 	orr.w	r2, r3, #32
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e014      	b.n	80064e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f7ff ff05 	bl	80062da <SPI_WaitFifoStateUntilTimeout>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d007      	beq.n	80064e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064da:	f043 0220 	orr.w	r2, r3, #32
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e000      	b.n	80064e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e040      	b.n	8006584 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006506:	2b00      	cmp	r3, #0
 8006508:	d106      	bne.n	8006518 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7fb ff34 	bl	8002380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2224      	movs	r2, #36	; 0x24
 800651c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f022 0201 	bic.w	r2, r2, #1
 800652c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fa28 	bl	8006984 <UART_SetConfig>
 8006534:	4603      	mov	r3, r0
 8006536:	2b01      	cmp	r3, #1
 8006538:	d101      	bne.n	800653e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e022      	b.n	8006584 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fd30 	bl	8006fac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800655a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689a      	ldr	r2, [r3, #8]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800656a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f042 0201 	orr.w	r2, r2, #1
 800657a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fdb7 	bl	80070f0 <UART_CheckIdleState>
 8006582:	4603      	mov	r3, r0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3708      	adds	r7, #8
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	4613      	mov	r3, r2
 8006598:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800659e:	2b20      	cmp	r3, #32
 80065a0:	f040 808a 	bne.w	80066b8 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d002      	beq.n	80065b0 <HAL_UART_Receive_IT+0x24>
 80065aa:	88fb      	ldrh	r3, [r7, #6]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e082      	b.n	80066ba <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d101      	bne.n	80065c2 <HAL_UART_Receive_IT+0x36>
 80065be:	2302      	movs	r3, #2
 80065c0:	e07b      	b.n	80066ba <HAL_UART_Receive_IT+0x12e>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	88fa      	ldrh	r2, [r7, #6]
 80065d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	88fa      	ldrh	r2, [r7, #6]
 80065dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ee:	d10e      	bne.n	800660e <HAL_UART_Receive_IT+0x82>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d105      	bne.n	8006604 <HAL_UART_Receive_IT+0x78>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80065fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006602:	e02d      	b.n	8006660 <HAL_UART_Receive_IT+0xd4>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	22ff      	movs	r2, #255	; 0xff
 8006608:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800660c:	e028      	b.n	8006660 <HAL_UART_Receive_IT+0xd4>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10d      	bne.n	8006632 <HAL_UART_Receive_IT+0xa6>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d104      	bne.n	8006628 <HAL_UART_Receive_IT+0x9c>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	22ff      	movs	r2, #255	; 0xff
 8006622:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006626:	e01b      	b.n	8006660 <HAL_UART_Receive_IT+0xd4>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	227f      	movs	r2, #127	; 0x7f
 800662c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006630:	e016      	b.n	8006660 <HAL_UART_Receive_IT+0xd4>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800663a:	d10d      	bne.n	8006658 <HAL_UART_Receive_IT+0xcc>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d104      	bne.n	800664e <HAL_UART_Receive_IT+0xc2>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	227f      	movs	r2, #127	; 0x7f
 8006648:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800664c:	e008      	b.n	8006660 <HAL_UART_Receive_IT+0xd4>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	223f      	movs	r2, #63	; 0x3f
 8006652:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006656:	e003      	b.n	8006660 <HAL_UART_Receive_IT+0xd4>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2222      	movs	r2, #34	; 0x22
 800666a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 0201 	orr.w	r2, r2, #1
 800667a:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006684:	d107      	bne.n	8006696 <HAL_UART_Receive_IT+0x10a>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d103      	bne.n	8006696 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	4a0d      	ldr	r2, [pc, #52]	; (80066c8 <HAL_UART_Receive_IT+0x13c>)
 8006692:	661a      	str	r2, [r3, #96]	; 0x60
 8006694:	e002      	b.n	800669c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4a0c      	ldr	r2, [pc, #48]	; (80066cc <HAL_UART_Receive_IT+0x140>)
 800669a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80066b2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	e000      	b.n	80066ba <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80066b8:	2302      	movs	r3, #2
  }
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	080073b9 	.word	0x080073b9
 80066cc:	0800730f 	.word	0x0800730f

080066d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80066f0:	69fa      	ldr	r2, [r7, #28]
 80066f2:	f640 030f 	movw	r3, #2063	; 0x80f
 80066f6:	4013      	ands	r3, r2
 80066f8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d113      	bne.n	8006728 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	f003 0320 	and.w	r3, r3, #32
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00e      	beq.n	8006728 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	f003 0320 	and.w	r3, r3, #32
 8006710:	2b00      	cmp	r3, #0
 8006712:	d009      	beq.n	8006728 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 8114 	beq.w	8006946 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	4798      	blx	r3
      }
      return;
 8006726:	e10e      	b.n	8006946 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	f000 80d6 	beq.w	80068dc <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	2b00      	cmp	r3, #0
 8006738:	d105      	bne.n	8006746 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 80cb 	beq.w	80068dc <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00e      	beq.n	800676e <HAL_UART_IRQHandler+0x9e>
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006756:	2b00      	cmp	r3, #0
 8006758:	d009      	beq.n	800676e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2201      	movs	r2, #1
 8006760:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006766:	f043 0201 	orr.w	r2, r3, #1
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	f003 0302 	and.w	r3, r3, #2
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00e      	beq.n	8006796 <HAL_UART_IRQHandler+0xc6>
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	2b00      	cmp	r3, #0
 8006780:	d009      	beq.n	8006796 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2202      	movs	r2, #2
 8006788:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800678e:	f043 0204 	orr.w	r2, r3, #4
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	f003 0304 	and.w	r3, r3, #4
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00e      	beq.n	80067be <HAL_UART_IRQHandler+0xee>
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d009      	beq.n	80067be <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2204      	movs	r2, #4
 80067b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067b6:	f043 0202 	orr.w	r2, r3, #2
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	f003 0308 	and.w	r3, r3, #8
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d013      	beq.n	80067f0 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	f003 0320 	and.w	r3, r3, #32
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d104      	bne.n	80067dc <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d009      	beq.n	80067f0 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2208      	movs	r2, #8
 80067e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067e8:	f043 0208 	orr.w	r2, r3, #8
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00f      	beq.n	800681a <HAL_UART_IRQHandler+0x14a>
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00a      	beq.n	800681a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800680c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006812:	f043 0220 	orr.w	r2, r3, #32
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800681e:	2b00      	cmp	r3, #0
 8006820:	f000 8093 	beq.w	800694a <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	f003 0320 	and.w	r3, r3, #32
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00c      	beq.n	8006848 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	f003 0320 	and.w	r3, r3, #32
 8006834:	2b00      	cmp	r3, #0
 8006836:	d007      	beq.n	8006848 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800683c:	2b00      	cmp	r3, #0
 800683e:	d003      	beq.n	8006848 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800684c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006858:	2b40      	cmp	r3, #64	; 0x40
 800685a:	d004      	beq.n	8006866 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006862:	2b00      	cmp	r3, #0
 8006864:	d031      	beq.n	80068ca <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fd02 	bl	8007270 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006876:	2b40      	cmp	r3, #64	; 0x40
 8006878:	d123      	bne.n	80068c2 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	689a      	ldr	r2, [r3, #8]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006888:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800688e:	2b00      	cmp	r3, #0
 8006890:	d013      	beq.n	80068ba <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006896:	4a30      	ldr	r2, [pc, #192]	; (8006958 <HAL_UART_IRQHandler+0x288>)
 8006898:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fb ff85 	bl	80027ae <HAL_DMA_Abort_IT>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d016      	beq.n	80068d8 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80068b4:	4610      	mov	r0, r2
 80068b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b8:	e00e      	b.n	80068d8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f858 	bl	8006970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c0:	e00a      	b.n	80068d8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f854 	bl	8006970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c8:	e006      	b.n	80068d8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f850 	bl	8006970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80068d6:	e038      	b.n	800694a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d8:	bf00      	nop
    return;
 80068da:	e036      	b.n	800694a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00d      	beq.n	8006902 <HAL_UART_IRQHandler+0x232>
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d008      	beq.n	8006902 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80068f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fdb1 	bl	8007462 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006900:	e026      	b.n	8006950 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00d      	beq.n	8006928 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006912:	2b00      	cmp	r3, #0
 8006914:	d008      	beq.n	8006928 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800691a:	2b00      	cmp	r3, #0
 800691c:	d017      	beq.n	800694e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	4798      	blx	r3
    }
    return;
 8006926:	e012      	b.n	800694e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00e      	beq.n	8006950 <HAL_UART_IRQHandler+0x280>
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006938:	2b00      	cmp	r3, #0
 800693a:	d009      	beq.n	8006950 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fccd 	bl	80072dc <UART_EndTransmit_IT>
    return;
 8006942:	bf00      	nop
 8006944:	e004      	b.n	8006950 <HAL_UART_IRQHandler+0x280>
      return;
 8006946:	bf00      	nop
 8006948:	e002      	b.n	8006950 <HAL_UART_IRQHandler+0x280>
    return;
 800694a:	bf00      	nop
 800694c:	e000      	b.n	8006950 <HAL_UART_IRQHandler+0x280>
    return;
 800694e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006950:	3720      	adds	r7, #32
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	080072b1 	.word	0x080072b1

0800695c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006984:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006988:	b08a      	sub	sp, #40	; 0x28
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800698e:	2300      	movs	r3, #0
 8006990:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006996:	2300      	movs	r3, #0
 8006998:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	689a      	ldr	r2, [r3, #8]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	431a      	orrs	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	431a      	orrs	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	4bbc      	ldr	r3, [pc, #752]	; (8006cac <UART_SetConfig+0x328>)
 80069ba:	4013      	ands	r3, r2
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	6812      	ldr	r2, [r2, #0]
 80069c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069c2:	430b      	orrs	r3, r1
 80069c4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68da      	ldr	r2, [r3, #12]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4ab2      	ldr	r2, [pc, #712]	; (8006cb0 <UART_SetConfig+0x32c>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d004      	beq.n	80069f6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069f2:	4313      	orrs	r3, r2
 80069f4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a06:	430a      	orrs	r2, r1
 8006a08:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4aa9      	ldr	r2, [pc, #676]	; (8006cb4 <UART_SetConfig+0x330>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d126      	bne.n	8006a62 <UART_SetConfig+0xde>
 8006a14:	4ba8      	ldr	r3, [pc, #672]	; (8006cb8 <UART_SetConfig+0x334>)
 8006a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a1a:	f003 0303 	and.w	r3, r3, #3
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	d81a      	bhi.n	8006a58 <UART_SetConfig+0xd4>
 8006a22:	a201      	add	r2, pc, #4	; (adr r2, 8006a28 <UART_SetConfig+0xa4>)
 8006a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a28:	08006a39 	.word	0x08006a39
 8006a2c:	08006a49 	.word	0x08006a49
 8006a30:	08006a41 	.word	0x08006a41
 8006a34:	08006a51 	.word	0x08006a51
 8006a38:	2301      	movs	r3, #1
 8006a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a3e:	e0ab      	b.n	8006b98 <UART_SetConfig+0x214>
 8006a40:	2302      	movs	r3, #2
 8006a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a46:	e0a7      	b.n	8006b98 <UART_SetConfig+0x214>
 8006a48:	2304      	movs	r3, #4
 8006a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a4e:	e0a3      	b.n	8006b98 <UART_SetConfig+0x214>
 8006a50:	2308      	movs	r3, #8
 8006a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a56:	e09f      	b.n	8006b98 <UART_SetConfig+0x214>
 8006a58:	2310      	movs	r3, #16
 8006a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a5e:	bf00      	nop
 8006a60:	e09a      	b.n	8006b98 <UART_SetConfig+0x214>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a95      	ldr	r2, [pc, #596]	; (8006cbc <UART_SetConfig+0x338>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d138      	bne.n	8006ade <UART_SetConfig+0x15a>
 8006a6c:	4b92      	ldr	r3, [pc, #584]	; (8006cb8 <UART_SetConfig+0x334>)
 8006a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a72:	f003 030c 	and.w	r3, r3, #12
 8006a76:	2b0c      	cmp	r3, #12
 8006a78:	d82c      	bhi.n	8006ad4 <UART_SetConfig+0x150>
 8006a7a:	a201      	add	r2, pc, #4	; (adr r2, 8006a80 <UART_SetConfig+0xfc>)
 8006a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a80:	08006ab5 	.word	0x08006ab5
 8006a84:	08006ad5 	.word	0x08006ad5
 8006a88:	08006ad5 	.word	0x08006ad5
 8006a8c:	08006ad5 	.word	0x08006ad5
 8006a90:	08006ac5 	.word	0x08006ac5
 8006a94:	08006ad5 	.word	0x08006ad5
 8006a98:	08006ad5 	.word	0x08006ad5
 8006a9c:	08006ad5 	.word	0x08006ad5
 8006aa0:	08006abd 	.word	0x08006abd
 8006aa4:	08006ad5 	.word	0x08006ad5
 8006aa8:	08006ad5 	.word	0x08006ad5
 8006aac:	08006ad5 	.word	0x08006ad5
 8006ab0:	08006acd 	.word	0x08006acd
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aba:	e06d      	b.n	8006b98 <UART_SetConfig+0x214>
 8006abc:	2302      	movs	r3, #2
 8006abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ac2:	e069      	b.n	8006b98 <UART_SetConfig+0x214>
 8006ac4:	2304      	movs	r3, #4
 8006ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aca:	e065      	b.n	8006b98 <UART_SetConfig+0x214>
 8006acc:	2308      	movs	r3, #8
 8006ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ad2:	e061      	b.n	8006b98 <UART_SetConfig+0x214>
 8006ad4:	2310      	movs	r3, #16
 8006ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ada:	bf00      	nop
 8006adc:	e05c      	b.n	8006b98 <UART_SetConfig+0x214>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a77      	ldr	r2, [pc, #476]	; (8006cc0 <UART_SetConfig+0x33c>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d125      	bne.n	8006b34 <UART_SetConfig+0x1b0>
 8006ae8:	4b73      	ldr	r3, [pc, #460]	; (8006cb8 <UART_SetConfig+0x334>)
 8006aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006af2:	2b10      	cmp	r3, #16
 8006af4:	d011      	beq.n	8006b1a <UART_SetConfig+0x196>
 8006af6:	2b10      	cmp	r3, #16
 8006af8:	d802      	bhi.n	8006b00 <UART_SetConfig+0x17c>
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d005      	beq.n	8006b0a <UART_SetConfig+0x186>
 8006afe:	e014      	b.n	8006b2a <UART_SetConfig+0x1a6>
 8006b00:	2b20      	cmp	r3, #32
 8006b02:	d006      	beq.n	8006b12 <UART_SetConfig+0x18e>
 8006b04:	2b30      	cmp	r3, #48	; 0x30
 8006b06:	d00c      	beq.n	8006b22 <UART_SetConfig+0x19e>
 8006b08:	e00f      	b.n	8006b2a <UART_SetConfig+0x1a6>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b10:	e042      	b.n	8006b98 <UART_SetConfig+0x214>
 8006b12:	2302      	movs	r3, #2
 8006b14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b18:	e03e      	b.n	8006b98 <UART_SetConfig+0x214>
 8006b1a:	2304      	movs	r3, #4
 8006b1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b20:	e03a      	b.n	8006b98 <UART_SetConfig+0x214>
 8006b22:	2308      	movs	r3, #8
 8006b24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b28:	e036      	b.n	8006b98 <UART_SetConfig+0x214>
 8006b2a:	2310      	movs	r3, #16
 8006b2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b30:	bf00      	nop
 8006b32:	e031      	b.n	8006b98 <UART_SetConfig+0x214>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a5d      	ldr	r2, [pc, #372]	; (8006cb0 <UART_SetConfig+0x32c>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d129      	bne.n	8006b92 <UART_SetConfig+0x20e>
 8006b3e:	4b5e      	ldr	r3, [pc, #376]	; (8006cb8 <UART_SetConfig+0x334>)
 8006b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b4c:	d014      	beq.n	8006b78 <UART_SetConfig+0x1f4>
 8006b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b52:	d802      	bhi.n	8006b5a <UART_SetConfig+0x1d6>
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d007      	beq.n	8006b68 <UART_SetConfig+0x1e4>
 8006b58:	e016      	b.n	8006b88 <UART_SetConfig+0x204>
 8006b5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b5e:	d007      	beq.n	8006b70 <UART_SetConfig+0x1ec>
 8006b60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b64:	d00c      	beq.n	8006b80 <UART_SetConfig+0x1fc>
 8006b66:	e00f      	b.n	8006b88 <UART_SetConfig+0x204>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b6e:	e013      	b.n	8006b98 <UART_SetConfig+0x214>
 8006b70:	2302      	movs	r3, #2
 8006b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b76:	e00f      	b.n	8006b98 <UART_SetConfig+0x214>
 8006b78:	2304      	movs	r3, #4
 8006b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b7e:	e00b      	b.n	8006b98 <UART_SetConfig+0x214>
 8006b80:	2308      	movs	r3, #8
 8006b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b86:	e007      	b.n	8006b98 <UART_SetConfig+0x214>
 8006b88:	2310      	movs	r3, #16
 8006b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b8e:	bf00      	nop
 8006b90:	e002      	b.n	8006b98 <UART_SetConfig+0x214>
 8006b92:	2310      	movs	r3, #16
 8006b94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a44      	ldr	r2, [pc, #272]	; (8006cb0 <UART_SetConfig+0x32c>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	f040 80fb 	bne.w	8006d9a <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ba4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ba8:	2b08      	cmp	r3, #8
 8006baa:	d824      	bhi.n	8006bf6 <UART_SetConfig+0x272>
 8006bac:	a201      	add	r2, pc, #4	; (adr r2, 8006bb4 <UART_SetConfig+0x230>)
 8006bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb2:	bf00      	nop
 8006bb4:	08006bd9 	.word	0x08006bd9
 8006bb8:	08006bf7 	.word	0x08006bf7
 8006bbc:	08006be1 	.word	0x08006be1
 8006bc0:	08006bf7 	.word	0x08006bf7
 8006bc4:	08006be7 	.word	0x08006be7
 8006bc8:	08006bf7 	.word	0x08006bf7
 8006bcc:	08006bf7 	.word	0x08006bf7
 8006bd0:	08006bf7 	.word	0x08006bf7
 8006bd4:	08006bef 	.word	0x08006bef
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006bd8:	f7fe fbd8 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 8006bdc:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bde:	e00d      	b.n	8006bfc <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006be0:	4b38      	ldr	r3, [pc, #224]	; (8006cc4 <UART_SetConfig+0x340>)
 8006be2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006be4:	e00a      	b.n	8006bfc <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8006be6:	f7fe fb3b 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 8006bea:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bec:	e006      	b.n	8006bfc <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bf2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bf4:	e002      	b.n	8006bfc <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	76fb      	strb	r3, [r7, #27]
        break;
 8006bfa:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 81c8 	beq.w	8006f94 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	4613      	mov	r3, r2
 8006c0a:	005b      	lsls	r3, r3, #1
 8006c0c:	4413      	add	r3, r2
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d305      	bcc.n	8006c20 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d902      	bls.n	8006c26 <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	76fb      	strb	r3, [r7, #27]
 8006c24:	e1b6      	b.n	8006f94 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 8006c26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c2a:	2b08      	cmp	r3, #8
 8006c2c:	f200 80a2 	bhi.w	8006d74 <UART_SetConfig+0x3f0>
 8006c30:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <UART_SetConfig+0x2b4>)
 8006c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c36:	bf00      	nop
 8006c38:	08006c5d 	.word	0x08006c5d
 8006c3c:	08006d75 	.word	0x08006d75
 8006c40:	08006cc9 	.word	0x08006cc9
 8006c44:	08006d75 	.word	0x08006d75
 8006c48:	08006cfd 	.word	0x08006cfd
 8006c4c:	08006d75 	.word	0x08006d75
 8006c50:	08006d75 	.word	0x08006d75
 8006c54:	08006d75 	.word	0x08006d75
 8006c58:	08006d4b 	.word	0x08006d4b
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8006c5c:	f7fe fb96 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 8006c60:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	4619      	mov	r1, r3
 8006c66:	f04f 0200 	mov.w	r2, #0
 8006c6a:	f04f 0300 	mov.w	r3, #0
 8006c6e:	f04f 0400 	mov.w	r4, #0
 8006c72:	0214      	lsls	r4, r2, #8
 8006c74:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006c78:	020b      	lsls	r3, r1, #8
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	6852      	ldr	r2, [r2, #4]
 8006c7e:	0852      	lsrs	r2, r2, #1
 8006c80:	4611      	mov	r1, r2
 8006c82:	f04f 0200 	mov.w	r2, #0
 8006c86:	eb13 0b01 	adds.w	fp, r3, r1
 8006c8a:	eb44 0c02 	adc.w	ip, r4, r2
 8006c8e:	4658      	mov	r0, fp
 8006c90:	4661      	mov	r1, ip
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f04f 0400 	mov.w	r4, #0
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	4623      	mov	r3, r4
 8006c9e:	f7f9 feb5 	bl	8000a0c <__aeabi_uldivmod>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	460c      	mov	r4, r1
 8006ca6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006ca8:	e067      	b.n	8006d7a <UART_SetConfig+0x3f6>
 8006caa:	bf00      	nop
 8006cac:	efff69f3 	.word	0xefff69f3
 8006cb0:	40008000 	.word	0x40008000
 8006cb4:	40013800 	.word	0x40013800
 8006cb8:	40021000 	.word	0x40021000
 8006cbc:	40004400 	.word	0x40004400
 8006cc0:	40004800 	.word	0x40004800
 8006cc4:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	085b      	lsrs	r3, r3, #1
 8006cce:	f04f 0400 	mov.w	r4, #0
 8006cd2:	49ae      	ldr	r1, [pc, #696]	; (8006f8c <UART_SetConfig+0x608>)
 8006cd4:	f04f 0200 	mov.w	r2, #0
 8006cd8:	eb13 0b01 	adds.w	fp, r3, r1
 8006cdc:	eb44 0c02 	adc.w	ip, r4, r2
 8006ce0:	4658      	mov	r0, fp
 8006ce2:	4661      	mov	r1, ip
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f04f 0400 	mov.w	r4, #0
 8006cec:	461a      	mov	r2, r3
 8006cee:	4623      	mov	r3, r4
 8006cf0:	f7f9 fe8c 	bl	8000a0c <__aeabi_uldivmod>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006cfa:	e03e      	b.n	8006d7a <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8006cfc:	f7fe fab0 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 8006d00:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	4619      	mov	r1, r3
 8006d06:	f04f 0200 	mov.w	r2, #0
 8006d0a:	f04f 0300 	mov.w	r3, #0
 8006d0e:	f04f 0400 	mov.w	r4, #0
 8006d12:	0214      	lsls	r4, r2, #8
 8006d14:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006d18:	020b      	lsls	r3, r1, #8
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	6852      	ldr	r2, [r2, #4]
 8006d1e:	0852      	lsrs	r2, r2, #1
 8006d20:	4611      	mov	r1, r2
 8006d22:	f04f 0200 	mov.w	r2, #0
 8006d26:	eb13 0b01 	adds.w	fp, r3, r1
 8006d2a:	eb44 0c02 	adc.w	ip, r4, r2
 8006d2e:	4658      	mov	r0, fp
 8006d30:	4661      	mov	r1, ip
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f04f 0400 	mov.w	r4, #0
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	4623      	mov	r3, r4
 8006d3e:	f7f9 fe65 	bl	8000a0c <__aeabi_uldivmod>
 8006d42:	4603      	mov	r3, r0
 8006d44:	460c      	mov	r4, r1
 8006d46:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006d48:	e017      	b.n	8006d7a <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	085b      	lsrs	r3, r3, #1
 8006d50:	f04f 0400 	mov.w	r4, #0
 8006d54:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8006d58:	f144 0100 	adc.w	r1, r4, #0
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f04f 0400 	mov.w	r4, #0
 8006d64:	461a      	mov	r2, r3
 8006d66:	4623      	mov	r3, r4
 8006d68:	f7f9 fe50 	bl	8000a0c <__aeabi_uldivmod>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	460c      	mov	r4, r1
 8006d70:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006d72:	e002      	b.n	8006d7a <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	76fb      	strb	r3, [r7, #27]
            break;
 8006d78:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d80:	d308      	bcc.n	8006d94 <UART_SetConfig+0x410>
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d88:	d204      	bcs.n	8006d94 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	69fa      	ldr	r2, [r7, #28]
 8006d90:	60da      	str	r2, [r3, #12]
 8006d92:	e0ff      	b.n	8006f94 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	76fb      	strb	r3, [r7, #27]
 8006d98:	e0fc      	b.n	8006f94 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006da2:	f040 8083 	bne.w	8006eac <UART_SetConfig+0x528>
  {
    switch (clocksource)
 8006da6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006daa:	2b08      	cmp	r3, #8
 8006dac:	d85e      	bhi.n	8006e6c <UART_SetConfig+0x4e8>
 8006dae:	a201      	add	r2, pc, #4	; (adr r2, 8006db4 <UART_SetConfig+0x430>)
 8006db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db4:	08006dd9 	.word	0x08006dd9
 8006db8:	08006df9 	.word	0x08006df9
 8006dbc:	08006e19 	.word	0x08006e19
 8006dc0:	08006e6d 	.word	0x08006e6d
 8006dc4:	08006e35 	.word	0x08006e35
 8006dc8:	08006e6d 	.word	0x08006e6d
 8006dcc:	08006e6d 	.word	0x08006e6d
 8006dd0:	08006e6d 	.word	0x08006e6d
 8006dd4:	08006e55 	.word	0x08006e55
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dd8:	f7fe fad8 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 8006ddc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	005a      	lsls	r2, r3, #1
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	085b      	lsrs	r3, r3, #1
 8006de8:	441a      	add	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006df6:	e03c      	b.n	8006e72 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006df8:	f7fe fade 	bl	80053b8 <HAL_RCC_GetPCLK2Freq>
 8006dfc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	005a      	lsls	r2, r3, #1
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	085b      	lsrs	r3, r3, #1
 8006e08:	441a      	add	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006e16:	e02c      	b.n	8006e72 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	085b      	lsrs	r3, r3, #1
 8006e1e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006e22:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	6852      	ldr	r2, [r2, #4]
 8006e2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006e32:	e01e      	b.n	8006e72 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e34:	f7fe fa14 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 8006e38:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	005a      	lsls	r2, r3, #1
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	085b      	lsrs	r3, r3, #1
 8006e44:	441a      	add	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006e52:	e00e      	b.n	8006e72 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	085b      	lsrs	r3, r3, #1
 8006e5a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006e6a:	e002      	b.n	8006e72 <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	76fb      	strb	r3, [r7, #27]
        break;
 8006e70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	2b0f      	cmp	r3, #15
 8006e76:	d916      	bls.n	8006ea6 <UART_SetConfig+0x522>
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e7e:	d212      	bcs.n	8006ea6 <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	f023 030f 	bic.w	r3, r3, #15
 8006e88:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	085b      	lsrs	r3, r3, #1
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	f003 0307 	and.w	r3, r3, #7
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	89fb      	ldrh	r3, [r7, #14]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	89fa      	ldrh	r2, [r7, #14]
 8006ea2:	60da      	str	r2, [r3, #12]
 8006ea4:	e076      	b.n	8006f94 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	76fb      	strb	r3, [r7, #27]
 8006eaa:	e073      	b.n	8006f94 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 8006eac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006eb0:	2b08      	cmp	r3, #8
 8006eb2:	d85c      	bhi.n	8006f6e <UART_SetConfig+0x5ea>
 8006eb4:	a201      	add	r2, pc, #4	; (adr r2, 8006ebc <UART_SetConfig+0x538>)
 8006eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eba:	bf00      	nop
 8006ebc:	08006ee1 	.word	0x08006ee1
 8006ec0:	08006eff 	.word	0x08006eff
 8006ec4:	08006f1d 	.word	0x08006f1d
 8006ec8:	08006f6f 	.word	0x08006f6f
 8006ecc:	08006f39 	.word	0x08006f39
 8006ed0:	08006f6f 	.word	0x08006f6f
 8006ed4:	08006f6f 	.word	0x08006f6f
 8006ed8:	08006f6f 	.word	0x08006f6f
 8006edc:	08006f57 	.word	0x08006f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ee0:	f7fe fa54 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 8006ee4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	085a      	lsrs	r2, r3, #1
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	441a      	add	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006efc:	e03a      	b.n	8006f74 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006efe:	f7fe fa5b 	bl	80053b8 <HAL_RCC_GetPCLK2Freq>
 8006f02:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	085a      	lsrs	r2, r3, #1
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	441a      	add	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f1a:	e02b      	b.n	8006f74 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	085b      	lsrs	r3, r3, #1
 8006f22:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006f26:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	6852      	ldr	r2, [r2, #4]
 8006f2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f36:	e01d      	b.n	8006f74 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f38:	f7fe f992 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 8006f3c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	085a      	lsrs	r2, r3, #1
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	441a      	add	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f54:	e00e      	b.n	8006f74 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	085b      	lsrs	r3, r3, #1
 8006f5c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f6c:	e002      	b.n	8006f74 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	76fb      	strb	r3, [r7, #27]
        break;
 8006f72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	2b0f      	cmp	r3, #15
 8006f78:	d90a      	bls.n	8006f90 <UART_SetConfig+0x60c>
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f80:	d206      	bcs.n	8006f90 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	69fa      	ldr	r2, [r7, #28]
 8006f88:	60da      	str	r2, [r3, #12]
 8006f8a:	e003      	b.n	8006f94 <UART_SetConfig+0x610>
 8006f8c:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006fa0:	7efb      	ldrb	r3, [r7, #27]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3728      	adds	r7, #40	; 0x28
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08006fac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	f003 0301 	and.w	r3, r3, #1
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00a      	beq.n	8006fd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	430a      	orrs	r2, r1
 8006fd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00a      	beq.n	8006ff8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffc:	f003 0304 	and.w	r3, r3, #4
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00a      	beq.n	800701a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701e:	f003 0308 	and.w	r3, r3, #8
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00a      	beq.n	800703c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	430a      	orrs	r2, r1
 800703a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007040:	f003 0310 	and.w	r3, r3, #16
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00a      	beq.n	800705e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	430a      	orrs	r2, r1
 800705c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00a      	beq.n	8007080 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	430a      	orrs	r2, r1
 800707e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007088:	2b00      	cmp	r3, #0
 800708a:	d01a      	beq.n	80070c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	430a      	orrs	r2, r1
 80070a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070aa:	d10a      	bne.n	80070c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00a      	beq.n	80070e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	605a      	str	r2, [r3, #4]
  }
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af02      	add	r7, sp, #8
 80070f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80070fe:	f7fb fa17 	bl	8002530 <HAL_GetTick>
 8007102:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0308 	and.w	r3, r3, #8
 800710e:	2b08      	cmp	r3, #8
 8007110:	d10e      	bne.n	8007130 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007112:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 f82a 	bl	800717a <UART_WaitOnFlagUntilTimeout>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	e020      	b.n	8007172 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0304 	and.w	r3, r3, #4
 800713a:	2b04      	cmp	r3, #4
 800713c:	d10e      	bne.n	800715c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800713e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f814 	bl	800717a <UART_WaitOnFlagUntilTimeout>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d001      	beq.n	800715c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007158:	2303      	movs	r3, #3
 800715a:	e00a      	b.n	8007172 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2220      	movs	r2, #32
 8007160:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2220      	movs	r2, #32
 8007166:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b084      	sub	sp, #16
 800717e:	af00      	add	r7, sp, #0
 8007180:	60f8      	str	r0, [r7, #12]
 8007182:	60b9      	str	r1, [r7, #8]
 8007184:	603b      	str	r3, [r7, #0]
 8007186:	4613      	mov	r3, r2
 8007188:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800718a:	e05d      	b.n	8007248 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007192:	d059      	beq.n	8007248 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007194:	f7fb f9cc 	bl	8002530 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	69ba      	ldr	r2, [r7, #24]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d302      	bcc.n	80071aa <UART_WaitOnFlagUntilTimeout+0x30>
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d11b      	bne.n	80071e2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80071b8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	689a      	ldr	r2, [r3, #8]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f022 0201 	bic.w	r2, r2, #1
 80071c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2220      	movs	r2, #32
 80071ce:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2220      	movs	r2, #32
 80071d4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e042      	b.n	8007268 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0304 	and.w	r3, r3, #4
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d02b      	beq.n	8007248 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	69db      	ldr	r3, [r3, #28]
 80071f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071fe:	d123      	bne.n	8007248 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007208:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007218:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 0201 	bic.w	r2, r2, #1
 8007228:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2220      	movs	r2, #32
 800722e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2220      	movs	r2, #32
 8007234:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2220      	movs	r2, #32
 800723a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e00f      	b.n	8007268 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	69da      	ldr	r2, [r3, #28]
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	4013      	ands	r3, r2
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	429a      	cmp	r2, r3
 8007256:	bf0c      	ite	eq
 8007258:	2301      	moveq	r3, #1
 800725a:	2300      	movne	r3, #0
 800725c:	b2db      	uxtb	r3, r3
 800725e:	461a      	mov	r2, r3
 8007260:	79fb      	ldrb	r3, [r7, #7]
 8007262:	429a      	cmp	r2, r3
 8007264:	d092      	beq.n	800718c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007286:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	689a      	ldr	r2, [r3, #8]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f022 0201 	bic.w	r2, r2, #1
 8007296:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2220      	movs	r2, #32
 800729c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	661a      	str	r2, [r3, #96]	; 0x60
}
 80072a4:	bf00      	nop
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f7ff fb4e 	bl	8006970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072d4:	bf00      	nop
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072f2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2220      	movs	r2, #32
 80072f8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7ff fb2b 	bl	800695c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007306:	bf00      	nop
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b084      	sub	sp, #16
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800731c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007322:	2b22      	cmp	r3, #34	; 0x22
 8007324:	d13a      	bne.n	800739c <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800732c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800732e:	89bb      	ldrh	r3, [r7, #12]
 8007330:	b2d9      	uxtb	r1, r3
 8007332:	89fb      	ldrh	r3, [r7, #14]
 8007334:	b2da      	uxtb	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800733a:	400a      	ands	r2, r1
 800733c:	b2d2      	uxtb	r2, r2
 800733e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007344:	1c5a      	adds	r2, r3, #1
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007350:	b29b      	uxth	r3, r3
 8007352:	3b01      	subs	r3, #1
 8007354:	b29a      	uxth	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007362:	b29b      	uxth	r3, r3
 8007364:	2b00      	cmp	r3, #0
 8007366:	d123      	bne.n	80073b0 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007376:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	689a      	ldr	r2, [r3, #8]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f022 0201 	bic.w	r2, r2, #1
 8007386:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2220      	movs	r2, #32
 800738c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f7fa fe67 	bl	8002068 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800739a:	e009      	b.n	80073b0 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	8b1b      	ldrh	r3, [r3, #24]
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f042 0208 	orr.w	r2, r2, #8
 80073ac:	b292      	uxth	r2, r2
 80073ae:	831a      	strh	r2, [r3, #24]
}
 80073b0:	bf00      	nop
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073c6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073cc:	2b22      	cmp	r3, #34	; 0x22
 80073ce:	d13a      	bne.n	8007446 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80073d6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073dc:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80073de:	89ba      	ldrh	r2, [r7, #12]
 80073e0:	89fb      	ldrh	r3, [r7, #14]
 80073e2:	4013      	ands	r3, r2
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ee:	1c9a      	adds	r2, r3, #2
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	3b01      	subs	r3, #1
 80073fe:	b29a      	uxth	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800740c:	b29b      	uxth	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d123      	bne.n	800745a <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007420:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	689a      	ldr	r2, [r3, #8]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f022 0201 	bic.w	r2, r2, #1
 8007430:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2220      	movs	r2, #32
 8007436:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7fa fe12 	bl	8002068 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007444:	e009      	b.n	800745a <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	8b1b      	ldrh	r3, [r3, #24]
 800744c:	b29a      	uxth	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f042 0208 	orr.w	r2, r2, #8
 8007456:	b292      	uxth	r2, r2
 8007458:	831a      	strh	r2, [r3, #24]
}
 800745a:	bf00      	nop
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007462:	b480      	push	{r7}
 8007464:	b083      	sub	sp, #12
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800746a:	bf00      	nop
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007476:	b084      	sub	sp, #16
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	f107 0014 	add.w	r0, r7, #20
 8007484:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	b004      	add	sp, #16
 8007496:	4770      	bx	lr

08007498 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80074a0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80074a4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	4313      	orrs	r3, r2
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b085      	sub	sp, #20
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80074d2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80074d6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80074de:	b29a      	uxth	r2, r3
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	43db      	mvns	r3, r3
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	4013      	ands	r3, r2
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3714      	adds	r7, #20
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	460b      	mov	r3, r1
 800750a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800751a:	b084      	sub	sp, #16
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	f107 0014 	add.w	r0, r7, #20
 8007528:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7ff ffa3 	bl	8007498 <USB_EnableGlobalInt>

  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800755e:	b004      	add	sp, #16
 8007560:	4770      	bx	lr
	...

08007564 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007564:	b490      	push	{r4, r7}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4413      	add	r3, r2
 800757c:	881b      	ldrh	r3, [r3, #0]
 800757e:	b29b      	uxth	r3, r3
 8007580:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007588:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	78db      	ldrb	r3, [r3, #3]
 800758e:	2b03      	cmp	r3, #3
 8007590:	d819      	bhi.n	80075c6 <USB_ActivateEndpoint+0x62>
 8007592:	a201      	add	r2, pc, #4	; (adr r2, 8007598 <USB_ActivateEndpoint+0x34>)
 8007594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007598:	080075a9 	.word	0x080075a9
 800759c:	080075bd 	.word	0x080075bd
 80075a0:	080075cd 	.word	0x080075cd
 80075a4:	080075b3 	.word	0x080075b3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80075a8:	89bb      	ldrh	r3, [r7, #12]
 80075aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075ae:	81bb      	strh	r3, [r7, #12]
      break;
 80075b0:	e00d      	b.n	80075ce <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80075b2:	89bb      	ldrh	r3, [r7, #12]
 80075b4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80075b8:	81bb      	strh	r3, [r7, #12]
      break;
 80075ba:	e008      	b.n	80075ce <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80075bc:	89bb      	ldrh	r3, [r7, #12]
 80075be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80075c2:	81bb      	strh	r3, [r7, #12]
      break;
 80075c4:	e003      	b.n	80075ce <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	73fb      	strb	r3, [r7, #15]
      break;
 80075ca:	e000      	b.n	80075ce <USB_ActivateEndpoint+0x6a>
      break;
 80075cc:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	441a      	add	r2, r3
 80075d8:	89bb      	ldrh	r3, [r7, #12]
 80075da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	4413      	add	r3, r2
 80075f8:	881b      	ldrh	r3, [r3, #0]
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	b21b      	sxth	r3, r3
 80075fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007606:	b21a      	sxth	r2, r3
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	b21b      	sxth	r3, r3
 800760e:	4313      	orrs	r3, r2
 8007610:	b21b      	sxth	r3, r3
 8007612:	b29c      	uxth	r4, r3
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	441a      	add	r2, r3
 800761e:	4b8a      	ldr	r3, [pc, #552]	; (8007848 <USB_ActivateEndpoint+0x2e4>)
 8007620:	4323      	orrs	r3, r4
 8007622:	b29b      	uxth	r3, r3
 8007624:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	7b1b      	ldrb	r3, [r3, #12]
 800762a:	2b00      	cmp	r3, #0
 800762c:	f040 8112 	bne.w	8007854 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	785b      	ldrb	r3, [r3, #1]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d067      	beq.n	8007708 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007638:	687c      	ldr	r4, [r7, #4]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007640:	b29b      	uxth	r3, r3
 8007642:	441c      	add	r4, r3
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	00db      	lsls	r3, r3, #3
 800764a:	4423      	add	r3, r4
 800764c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007650:	461c      	mov	r4, r3
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	88db      	ldrh	r3, [r3, #6]
 8007656:	085b      	lsrs	r3, r3, #1
 8007658:	b29b      	uxth	r3, r3
 800765a:	005b      	lsls	r3, r3, #1
 800765c:	b29b      	uxth	r3, r3
 800765e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	4413      	add	r3, r2
 800766a:	881b      	ldrh	r3, [r3, #0]
 800766c:	b29c      	uxth	r4, r3
 800766e:	4623      	mov	r3, r4
 8007670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007674:	2b00      	cmp	r3, #0
 8007676:	d014      	beq.n	80076a2 <USB_ActivateEndpoint+0x13e>
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4413      	add	r3, r2
 8007682:	881b      	ldrh	r3, [r3, #0]
 8007684:	b29b      	uxth	r3, r3
 8007686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800768a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800768e:	b29c      	uxth	r4, r3
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	441a      	add	r2, r3
 800769a:	4b6c      	ldr	r3, [pc, #432]	; (800784c <USB_ActivateEndpoint+0x2e8>)
 800769c:	4323      	orrs	r3, r4
 800769e:	b29b      	uxth	r3, r3
 80076a0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	78db      	ldrb	r3, [r3, #3]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d018      	beq.n	80076dc <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	881b      	ldrh	r3, [r3, #0]
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076c0:	b29c      	uxth	r4, r3
 80076c2:	f084 0320 	eor.w	r3, r4, #32
 80076c6:	b29c      	uxth	r4, r3
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	441a      	add	r2, r3
 80076d2:	4b5d      	ldr	r3, [pc, #372]	; (8007848 <USB_ActivateEndpoint+0x2e4>)
 80076d4:	4323      	orrs	r3, r4
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	8013      	strh	r3, [r2, #0]
 80076da:	e22b      	b.n	8007b34 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	4413      	add	r3, r2
 80076e6:	881b      	ldrh	r3, [r3, #0]
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076f2:	b29c      	uxth	r4, r3
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	441a      	add	r2, r3
 80076fe:	4b52      	ldr	r3, [pc, #328]	; (8007848 <USB_ActivateEndpoint+0x2e4>)
 8007700:	4323      	orrs	r3, r4
 8007702:	b29b      	uxth	r3, r3
 8007704:	8013      	strh	r3, [r2, #0]
 8007706:	e215      	b.n	8007b34 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007708:	687c      	ldr	r4, [r7, #4]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007710:	b29b      	uxth	r3, r3
 8007712:	441c      	add	r4, r3
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	00db      	lsls	r3, r3, #3
 800771a:	4423      	add	r3, r4
 800771c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007720:	461c      	mov	r4, r3
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	88db      	ldrh	r3, [r3, #6]
 8007726:	085b      	lsrs	r3, r3, #1
 8007728:	b29b      	uxth	r3, r3
 800772a:	005b      	lsls	r3, r3, #1
 800772c:	b29b      	uxth	r3, r3
 800772e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007730:	687c      	ldr	r4, [r7, #4]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007738:	b29b      	uxth	r3, r3
 800773a:	441c      	add	r4, r3
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	00db      	lsls	r3, r3, #3
 8007742:	4423      	add	r3, r4
 8007744:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007748:	461c      	mov	r4, r3
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10e      	bne.n	8007770 <USB_ActivateEndpoint+0x20c>
 8007752:	8823      	ldrh	r3, [r4, #0]
 8007754:	b29b      	uxth	r3, r3
 8007756:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800775a:	b29b      	uxth	r3, r3
 800775c:	8023      	strh	r3, [r4, #0]
 800775e:	8823      	ldrh	r3, [r4, #0]
 8007760:	b29b      	uxth	r3, r3
 8007762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800776a:	b29b      	uxth	r3, r3
 800776c:	8023      	strh	r3, [r4, #0]
 800776e:	e02d      	b.n	80077cc <USB_ActivateEndpoint+0x268>
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	2b3e      	cmp	r3, #62	; 0x3e
 8007776:	d812      	bhi.n	800779e <USB_ActivateEndpoint+0x23a>
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	085b      	lsrs	r3, r3, #1
 800777e:	60bb      	str	r3, [r7, #8]
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	f003 0301 	and.w	r3, r3, #1
 8007788:	2b00      	cmp	r3, #0
 800778a:	d002      	beq.n	8007792 <USB_ActivateEndpoint+0x22e>
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	3301      	adds	r3, #1
 8007790:	60bb      	str	r3, [r7, #8]
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	b29b      	uxth	r3, r3
 8007796:	029b      	lsls	r3, r3, #10
 8007798:	b29b      	uxth	r3, r3
 800779a:	8023      	strh	r3, [r4, #0]
 800779c:	e016      	b.n	80077cc <USB_ActivateEndpoint+0x268>
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	095b      	lsrs	r3, r3, #5
 80077a4:	60bb      	str	r3, [r7, #8]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	f003 031f 	and.w	r3, r3, #31
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d102      	bne.n	80077b8 <USB_ActivateEndpoint+0x254>
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	3b01      	subs	r3, #1
 80077b6:	60bb      	str	r3, [r7, #8]
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	029b      	lsls	r3, r3, #10
 80077be:	b29b      	uxth	r3, r3
 80077c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	881b      	ldrh	r3, [r3, #0]
 80077d8:	b29c      	uxth	r4, r3
 80077da:	4623      	mov	r3, r4
 80077dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d014      	beq.n	800780e <USB_ActivateEndpoint+0x2aa>
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	4413      	add	r3, r2
 80077ee:	881b      	ldrh	r3, [r3, #0]
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077fa:	b29c      	uxth	r4, r3
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	441a      	add	r2, r3
 8007806:	4b12      	ldr	r3, [pc, #72]	; (8007850 <USB_ActivateEndpoint+0x2ec>)
 8007808:	4323      	orrs	r3, r4
 800780a:	b29b      	uxth	r3, r3
 800780c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4413      	add	r3, r2
 8007818:	881b      	ldrh	r3, [r3, #0]
 800781a:	b29b      	uxth	r3, r3
 800781c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007824:	b29c      	uxth	r4, r3
 8007826:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800782a:	b29c      	uxth	r4, r3
 800782c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007830:	b29c      	uxth	r4, r3
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	441a      	add	r2, r3
 800783c:	4b02      	ldr	r3, [pc, #8]	; (8007848 <USB_ActivateEndpoint+0x2e4>)
 800783e:	4323      	orrs	r3, r4
 8007840:	b29b      	uxth	r3, r3
 8007842:	8013      	strh	r3, [r2, #0]
 8007844:	e176      	b.n	8007b34 <USB_ActivateEndpoint+0x5d0>
 8007846:	bf00      	nop
 8007848:	ffff8080 	.word	0xffff8080
 800784c:	ffff80c0 	.word	0xffff80c0
 8007850:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	4413      	add	r3, r2
 800785e:	881b      	ldrh	r3, [r3, #0]
 8007860:	b29b      	uxth	r3, r3
 8007862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800786a:	b29c      	uxth	r4, r3
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	441a      	add	r2, r3
 8007876:	4b96      	ldr	r3, [pc, #600]	; (8007ad0 <USB_ActivateEndpoint+0x56c>)
 8007878:	4323      	orrs	r3, r4
 800787a:	b29b      	uxth	r3, r3
 800787c:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800787e:	687c      	ldr	r4, [r7, #4]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007886:	b29b      	uxth	r3, r3
 8007888:	441c      	add	r4, r3
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	00db      	lsls	r3, r3, #3
 8007890:	4423      	add	r3, r4
 8007892:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007896:	461c      	mov	r4, r3
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	891b      	ldrh	r3, [r3, #8]
 800789c:	085b      	lsrs	r3, r3, #1
 800789e:	b29b      	uxth	r3, r3
 80078a0:	005b      	lsls	r3, r3, #1
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	8023      	strh	r3, [r4, #0]
 80078a6:	687c      	ldr	r4, [r7, #4]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	441c      	add	r4, r3
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	00db      	lsls	r3, r3, #3
 80078b8:	4423      	add	r3, r4
 80078ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078be:	461c      	mov	r4, r3
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	895b      	ldrh	r3, [r3, #10]
 80078c4:	085b      	lsrs	r3, r3, #1
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	005b      	lsls	r3, r3, #1
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	785b      	ldrb	r3, [r3, #1]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f040 8088 	bne.w	80079e8 <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	b29c      	uxth	r4, r3
 80078e6:	4623      	mov	r3, r4
 80078e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d014      	beq.n	800791a <USB_ActivateEndpoint+0x3b6>
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4413      	add	r3, r2
 80078fa:	881b      	ldrh	r3, [r3, #0]
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007906:	b29c      	uxth	r4, r3
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	441a      	add	r2, r3
 8007912:	4b70      	ldr	r3, [pc, #448]	; (8007ad4 <USB_ActivateEndpoint+0x570>)
 8007914:	4323      	orrs	r3, r4
 8007916:	b29b      	uxth	r3, r3
 8007918:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4413      	add	r3, r2
 8007924:	881b      	ldrh	r3, [r3, #0]
 8007926:	b29c      	uxth	r4, r3
 8007928:	4623      	mov	r3, r4
 800792a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800792e:	2b00      	cmp	r3, #0
 8007930:	d014      	beq.n	800795c <USB_ActivateEndpoint+0x3f8>
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	4413      	add	r3, r2
 800793c:	881b      	ldrh	r3, [r3, #0]
 800793e:	b29b      	uxth	r3, r3
 8007940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007948:	b29c      	uxth	r4, r3
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	441a      	add	r2, r3
 8007954:	4b60      	ldr	r3, [pc, #384]	; (8007ad8 <USB_ActivateEndpoint+0x574>)
 8007956:	4323      	orrs	r3, r4
 8007958:	b29b      	uxth	r3, r3
 800795a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	4413      	add	r3, r2
 8007966:	881b      	ldrh	r3, [r3, #0]
 8007968:	b29b      	uxth	r3, r3
 800796a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800796e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007972:	b29c      	uxth	r4, r3
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	441a      	add	r2, r3
 800797e:	4b56      	ldr	r3, [pc, #344]	; (8007ad8 <USB_ActivateEndpoint+0x574>)
 8007980:	4323      	orrs	r3, r4
 8007982:	b29b      	uxth	r3, r3
 8007984:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4413      	add	r3, r2
 8007990:	881b      	ldrh	r3, [r3, #0]
 8007992:	b29b      	uxth	r3, r3
 8007994:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800799c:	b29c      	uxth	r4, r3
 800799e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80079a2:	b29c      	uxth	r4, r3
 80079a4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80079a8:	b29c      	uxth	r4, r3
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	441a      	add	r2, r3
 80079b4:	4b49      	ldr	r3, [pc, #292]	; (8007adc <USB_ActivateEndpoint+0x578>)
 80079b6:	4323      	orrs	r3, r4
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	4413      	add	r3, r2
 80079c6:	881b      	ldrh	r3, [r3, #0]
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079d2:	b29c      	uxth	r4, r3
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	441a      	add	r2, r3
 80079de:	4b3f      	ldr	r3, [pc, #252]	; (8007adc <USB_ActivateEndpoint+0x578>)
 80079e0:	4323      	orrs	r3, r4
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	8013      	strh	r3, [r2, #0]
 80079e6:	e0a5      	b.n	8007b34 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	881b      	ldrh	r3, [r3, #0]
 80079f4:	b29c      	uxth	r4, r3
 80079f6:	4623      	mov	r3, r4
 80079f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d014      	beq.n	8007a2a <USB_ActivateEndpoint+0x4c6>
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	4413      	add	r3, r2
 8007a0a:	881b      	ldrh	r3, [r3, #0]
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a16:	b29c      	uxth	r4, r3
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	441a      	add	r2, r3
 8007a22:	4b2c      	ldr	r3, [pc, #176]	; (8007ad4 <USB_ActivateEndpoint+0x570>)
 8007a24:	4323      	orrs	r3, r4
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	4413      	add	r3, r2
 8007a34:	881b      	ldrh	r3, [r3, #0]
 8007a36:	b29c      	uxth	r4, r3
 8007a38:	4623      	mov	r3, r4
 8007a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d014      	beq.n	8007a6c <USB_ActivateEndpoint+0x508>
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	881b      	ldrh	r3, [r3, #0]
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a58:	b29c      	uxth	r4, r3
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	441a      	add	r2, r3
 8007a64:	4b1c      	ldr	r3, [pc, #112]	; (8007ad8 <USB_ActivateEndpoint+0x574>)
 8007a66:	4323      	orrs	r3, r4
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4413      	add	r3, r2
 8007a76:	881b      	ldrh	r3, [r3, #0]
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a82:	b29c      	uxth	r4, r3
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	441a      	add	r2, r3
 8007a8e:	4b11      	ldr	r3, [pc, #68]	; (8007ad4 <USB_ActivateEndpoint+0x570>)
 8007a90:	4323      	orrs	r3, r4
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	78db      	ldrb	r3, [r3, #3]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d020      	beq.n	8007ae0 <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4413      	add	r3, r2
 8007aa8:	881b      	ldrh	r3, [r3, #0]
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ab0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ab4:	b29c      	uxth	r4, r3
 8007ab6:	f084 0320 	eor.w	r3, r4, #32
 8007aba:	b29c      	uxth	r4, r3
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	441a      	add	r2, r3
 8007ac6:	4b05      	ldr	r3, [pc, #20]	; (8007adc <USB_ActivateEndpoint+0x578>)
 8007ac8:	4323      	orrs	r3, r4
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	8013      	strh	r3, [r2, #0]
 8007ace:	e01c      	b.n	8007b0a <USB_ActivateEndpoint+0x5a6>
 8007ad0:	ffff8180 	.word	0xffff8180
 8007ad4:	ffffc080 	.word	0xffffc080
 8007ad8:	ffff80c0 	.word	0xffff80c0
 8007adc:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	4413      	add	r3, r2
 8007aea:	881b      	ldrh	r3, [r3, #0]
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007af2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007af6:	b29c      	uxth	r4, r3
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	441a      	add	r2, r3
 8007b02:	4b0f      	ldr	r3, [pc, #60]	; (8007b40 <USB_ActivateEndpoint+0x5dc>)
 8007b04:	4323      	orrs	r3, r4
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	881b      	ldrh	r3, [r3, #0]
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b20:	b29c      	uxth	r4, r3
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	441a      	add	r2, r3
 8007b2c:	4b04      	ldr	r3, [pc, #16]	; (8007b40 <USB_ActivateEndpoint+0x5dc>)
 8007b2e:	4323      	orrs	r3, r4
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bc90      	pop	{r4, r7}
 8007b3e:	4770      	bx	lr
 8007b40:	ffff8080 	.word	0xffff8080

08007b44 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b44:	b490      	push	{r4, r7}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	7b1b      	ldrb	r3, [r3, #12]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d171      	bne.n	8007c3a <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	785b      	ldrb	r3, [r3, #1]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d036      	beq.n	8007bcc <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4413      	add	r3, r2
 8007b68:	881b      	ldrh	r3, [r3, #0]
 8007b6a:	b29c      	uxth	r4, r3
 8007b6c:	4623      	mov	r3, r4
 8007b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d014      	beq.n	8007ba0 <USB_DeactivateEndpoint+0x5c>
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4413      	add	r3, r2
 8007b80:	881b      	ldrh	r3, [r3, #0]
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b8c:	b29c      	uxth	r4, r3
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	441a      	add	r2, r3
 8007b98:	4b6b      	ldr	r3, [pc, #428]	; (8007d48 <USB_DeactivateEndpoint+0x204>)
 8007b9a:	4323      	orrs	r3, r4
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4413      	add	r3, r2
 8007baa:	881b      	ldrh	r3, [r3, #0]
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bb6:	b29c      	uxth	r4, r3
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	441a      	add	r2, r3
 8007bc2:	4b62      	ldr	r3, [pc, #392]	; (8007d4c <USB_DeactivateEndpoint+0x208>)
 8007bc4:	4323      	orrs	r3, r4
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	8013      	strh	r3, [r2, #0]
 8007bca:	e144      	b.n	8007e56 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	881b      	ldrh	r3, [r3, #0]
 8007bd8:	b29c      	uxth	r4, r3
 8007bda:	4623      	mov	r3, r4
 8007bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d014      	beq.n	8007c0e <USB_DeactivateEndpoint+0xca>
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	881b      	ldrh	r3, [r3, #0]
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bfa:	b29c      	uxth	r4, r3
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	441a      	add	r2, r3
 8007c06:	4b52      	ldr	r3, [pc, #328]	; (8007d50 <USB_DeactivateEndpoint+0x20c>)
 8007c08:	4323      	orrs	r3, r4
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	881b      	ldrh	r3, [r3, #0]
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c24:	b29c      	uxth	r4, r3
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	441a      	add	r2, r3
 8007c30:	4b46      	ldr	r3, [pc, #280]	; (8007d4c <USB_DeactivateEndpoint+0x208>)
 8007c32:	4323      	orrs	r3, r4
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	8013      	strh	r3, [r2, #0]
 8007c38:	e10d      	b.n	8007e56 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	785b      	ldrb	r3, [r3, #1]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f040 8088 	bne.w	8007d54 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	4413      	add	r3, r2
 8007c4e:	881b      	ldrh	r3, [r3, #0]
 8007c50:	b29c      	uxth	r4, r3
 8007c52:	4623      	mov	r3, r4
 8007c54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d014      	beq.n	8007c86 <USB_DeactivateEndpoint+0x142>
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	881b      	ldrh	r3, [r3, #0]
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c72:	b29c      	uxth	r4, r3
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	441a      	add	r2, r3
 8007c7e:	4b34      	ldr	r3, [pc, #208]	; (8007d50 <USB_DeactivateEndpoint+0x20c>)
 8007c80:	4323      	orrs	r3, r4
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4413      	add	r3, r2
 8007c90:	881b      	ldrh	r3, [r3, #0]
 8007c92:	b29c      	uxth	r4, r3
 8007c94:	4623      	mov	r3, r4
 8007c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d014      	beq.n	8007cc8 <USB_DeactivateEndpoint+0x184>
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4413      	add	r3, r2
 8007ca8:	881b      	ldrh	r3, [r3, #0]
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cb4:	b29c      	uxth	r4, r3
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	441a      	add	r2, r3
 8007cc0:	4b21      	ldr	r3, [pc, #132]	; (8007d48 <USB_DeactivateEndpoint+0x204>)
 8007cc2:	4323      	orrs	r3, r4
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	881b      	ldrh	r3, [r3, #0]
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cde:	b29c      	uxth	r4, r3
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	441a      	add	r2, r3
 8007cea:	4b17      	ldr	r3, [pc, #92]	; (8007d48 <USB_DeactivateEndpoint+0x204>)
 8007cec:	4323      	orrs	r3, r4
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	881b      	ldrh	r3, [r3, #0]
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d08:	b29c      	uxth	r4, r3
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	441a      	add	r2, r3
 8007d14:	4b0d      	ldr	r3, [pc, #52]	; (8007d4c <USB_DeactivateEndpoint+0x208>)
 8007d16:	4323      	orrs	r3, r4
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4413      	add	r3, r2
 8007d26:	881b      	ldrh	r3, [r3, #0]
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d32:	b29c      	uxth	r4, r3
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	441a      	add	r2, r3
 8007d3e:	4b03      	ldr	r3, [pc, #12]	; (8007d4c <USB_DeactivateEndpoint+0x208>)
 8007d40:	4323      	orrs	r3, r4
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	8013      	strh	r3, [r2, #0]
 8007d46:	e086      	b.n	8007e56 <USB_DeactivateEndpoint+0x312>
 8007d48:	ffff80c0 	.word	0xffff80c0
 8007d4c:	ffff8080 	.word	0xffff8080
 8007d50:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	4413      	add	r3, r2
 8007d5e:	881b      	ldrh	r3, [r3, #0]
 8007d60:	b29c      	uxth	r4, r3
 8007d62:	4623      	mov	r3, r4
 8007d64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d014      	beq.n	8007d96 <USB_DeactivateEndpoint+0x252>
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	4413      	add	r3, r2
 8007d76:	881b      	ldrh	r3, [r3, #0]
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d82:	b29c      	uxth	r4, r3
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	441a      	add	r2, r3
 8007d8e:	4b35      	ldr	r3, [pc, #212]	; (8007e64 <USB_DeactivateEndpoint+0x320>)
 8007d90:	4323      	orrs	r3, r4
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4413      	add	r3, r2
 8007da0:	881b      	ldrh	r3, [r3, #0]
 8007da2:	b29c      	uxth	r4, r3
 8007da4:	4623      	mov	r3, r4
 8007da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d014      	beq.n	8007dd8 <USB_DeactivateEndpoint+0x294>
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4413      	add	r3, r2
 8007db8:	881b      	ldrh	r3, [r3, #0]
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc4:	b29c      	uxth	r4, r3
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	441a      	add	r2, r3
 8007dd0:	4b25      	ldr	r3, [pc, #148]	; (8007e68 <USB_DeactivateEndpoint+0x324>)
 8007dd2:	4323      	orrs	r3, r4
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	4413      	add	r3, r2
 8007de2:	881b      	ldrh	r3, [r3, #0]
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dee:	b29c      	uxth	r4, r3
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	441a      	add	r2, r3
 8007dfa:	4b1a      	ldr	r3, [pc, #104]	; (8007e64 <USB_DeactivateEndpoint+0x320>)
 8007dfc:	4323      	orrs	r3, r4
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	4413      	add	r3, r2
 8007e0c:	881b      	ldrh	r3, [r3, #0]
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e18:	b29c      	uxth	r4, r3
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	441a      	add	r2, r3
 8007e24:	4b11      	ldr	r3, [pc, #68]	; (8007e6c <USB_DeactivateEndpoint+0x328>)
 8007e26:	4323      	orrs	r3, r4
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4413      	add	r3, r2
 8007e36:	881b      	ldrh	r3, [r3, #0]
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e42:	b29c      	uxth	r4, r3
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	441a      	add	r2, r3
 8007e4e:	4b07      	ldr	r3, [pc, #28]	; (8007e6c <USB_DeactivateEndpoint+0x328>)
 8007e50:	4323      	orrs	r3, r4
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bc90      	pop	{r4, r7}
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	ffffc080 	.word	0xffffc080
 8007e68:	ffff80c0 	.word	0xffff80c0
 8007e6c:	ffff8080 	.word	0xffff8080

08007e70 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e70:	b590      	push	{r4, r7, lr}
 8007e72:	b08d      	sub	sp, #52	; 0x34
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	785b      	ldrb	r3, [r3, #1]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	f040 8160 	bne.w	8008144 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	699a      	ldr	r2, [r3, #24]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d909      	bls.n	8007ea4 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	699a      	ldr	r2, [r3, #24]
 8007e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9c:	1ad2      	subs	r2, r2, r3
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	619a      	str	r2, [r3, #24]
 8007ea2:	e005      	b.n	8007eb0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	2200      	movs	r2, #0
 8007eae:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	7b1b      	ldrb	r3, [r3, #12]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d119      	bne.n	8007eec <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	6959      	ldr	r1, [r3, #20]
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	88da      	ldrh	r2, [r3, #6]
 8007ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fbbd 	bl	8008644 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007eca:	687c      	ldr	r4, [r7, #4]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	441c      	add	r4, r3
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	00db      	lsls	r3, r3, #3
 8007edc:	4423      	add	r3, r4
 8007ede:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ee2:	461c      	mov	r4, r3
 8007ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	8023      	strh	r3, [r4, #0]
 8007eea:	e10f      	b.n	800810c <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	4413      	add	r3, r2
 8007ef6:	881b      	ldrh	r3, [r3, #0]
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d065      	beq.n	8007fce <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f02:	687c      	ldr	r4, [r7, #4]
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	785b      	ldrb	r3, [r3, #1]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d148      	bne.n	8007f9e <USB_EPStartXfer+0x12e>
 8007f0c:	687c      	ldr	r4, [r7, #4]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	441c      	add	r4, r3
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	00db      	lsls	r3, r3, #3
 8007f1e:	4423      	add	r3, r4
 8007f20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f24:	461c      	mov	r4, r3
 8007f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10e      	bne.n	8007f4a <USB_EPStartXfer+0xda>
 8007f2c:	8823      	ldrh	r3, [r4, #0]
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	8023      	strh	r3, [r4, #0]
 8007f38:	8823      	ldrh	r3, [r4, #0]
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	8023      	strh	r3, [r4, #0]
 8007f48:	e03d      	b.n	8007fc6 <USB_EPStartXfer+0x156>
 8007f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4c:	2b3e      	cmp	r3, #62	; 0x3e
 8007f4e:	d810      	bhi.n	8007f72 <USB_EPStartXfer+0x102>
 8007f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f52:	085b      	lsrs	r3, r3, #1
 8007f54:	627b      	str	r3, [r7, #36]	; 0x24
 8007f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d002      	beq.n	8007f66 <USB_EPStartXfer+0xf6>
 8007f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f62:	3301      	adds	r3, #1
 8007f64:	627b      	str	r3, [r7, #36]	; 0x24
 8007f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	029b      	lsls	r3, r3, #10
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	8023      	strh	r3, [r4, #0]
 8007f70:	e029      	b.n	8007fc6 <USB_EPStartXfer+0x156>
 8007f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f74:	095b      	lsrs	r3, r3, #5
 8007f76:	627b      	str	r3, [r7, #36]	; 0x24
 8007f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7a:	f003 031f 	and.w	r3, r3, #31
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d102      	bne.n	8007f88 <USB_EPStartXfer+0x118>
 8007f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f84:	3b01      	subs	r3, #1
 8007f86:	627b      	str	r3, [r7, #36]	; 0x24
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	029b      	lsls	r3, r3, #10
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	8023      	strh	r3, [r4, #0]
 8007f9c:	e013      	b.n	8007fc6 <USB_EPStartXfer+0x156>
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	785b      	ldrb	r3, [r3, #1]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d10f      	bne.n	8007fc6 <USB_EPStartXfer+0x156>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	441c      	add	r4, r3
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	00db      	lsls	r3, r3, #3
 8007fb6:	4423      	add	r3, r4
 8007fb8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007fbc:	60fb      	str	r3, [r7, #12]
 8007fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	895b      	ldrh	r3, [r3, #10]
 8007fca:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007fcc:	e063      	b.n	8008096 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	785b      	ldrb	r3, [r3, #1]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d148      	bne.n	8008068 <USB_EPStartXfer+0x1f8>
 8007fd6:	687c      	ldr	r4, [r7, #4]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	441c      	add	r4, r3
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	00db      	lsls	r3, r3, #3
 8007fe8:	4423      	add	r3, r4
 8007fea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007fee:	461c      	mov	r4, r3
 8007ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10e      	bne.n	8008014 <USB_EPStartXfer+0x1a4>
 8007ff6:	8823      	ldrh	r3, [r4, #0]
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	8023      	strh	r3, [r4, #0]
 8008002:	8823      	ldrh	r3, [r4, #0]
 8008004:	b29b      	uxth	r3, r3
 8008006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800800a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800800e:	b29b      	uxth	r3, r3
 8008010:	8023      	strh	r3, [r4, #0]
 8008012:	e03d      	b.n	8008090 <USB_EPStartXfer+0x220>
 8008014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008016:	2b3e      	cmp	r3, #62	; 0x3e
 8008018:	d810      	bhi.n	800803c <USB_EPStartXfer+0x1cc>
 800801a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801c:	085b      	lsrs	r3, r3, #1
 800801e:	623b      	str	r3, [r7, #32]
 8008020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	2b00      	cmp	r3, #0
 8008028:	d002      	beq.n	8008030 <USB_EPStartXfer+0x1c0>
 800802a:	6a3b      	ldr	r3, [r7, #32]
 800802c:	3301      	adds	r3, #1
 800802e:	623b      	str	r3, [r7, #32]
 8008030:	6a3b      	ldr	r3, [r7, #32]
 8008032:	b29b      	uxth	r3, r3
 8008034:	029b      	lsls	r3, r3, #10
 8008036:	b29b      	uxth	r3, r3
 8008038:	8023      	strh	r3, [r4, #0]
 800803a:	e029      	b.n	8008090 <USB_EPStartXfer+0x220>
 800803c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803e:	095b      	lsrs	r3, r3, #5
 8008040:	623b      	str	r3, [r7, #32]
 8008042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008044:	f003 031f 	and.w	r3, r3, #31
 8008048:	2b00      	cmp	r3, #0
 800804a:	d102      	bne.n	8008052 <USB_EPStartXfer+0x1e2>
 800804c:	6a3b      	ldr	r3, [r7, #32]
 800804e:	3b01      	subs	r3, #1
 8008050:	623b      	str	r3, [r7, #32]
 8008052:	6a3b      	ldr	r3, [r7, #32]
 8008054:	b29b      	uxth	r3, r3
 8008056:	029b      	lsls	r3, r3, #10
 8008058:	b29b      	uxth	r3, r3
 800805a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800805e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008062:	b29b      	uxth	r3, r3
 8008064:	8023      	strh	r3, [r4, #0]
 8008066:	e013      	b.n	8008090 <USB_EPStartXfer+0x220>
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	785b      	ldrb	r3, [r3, #1]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d10f      	bne.n	8008090 <USB_EPStartXfer+0x220>
 8008070:	687c      	ldr	r4, [r7, #4]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008078:	b29b      	uxth	r3, r3
 800807a:	441c      	add	r4, r3
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	00db      	lsls	r3, r3, #3
 8008082:	4423      	add	r3, r4
 8008084:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008088:	461c      	mov	r4, r3
 800808a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808c:	b29b      	uxth	r3, r3
 800808e:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	891b      	ldrh	r3, [r3, #8]
 8008094:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	6959      	ldr	r1, [r3, #20]
 800809a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809c:	b29b      	uxth	r3, r3
 800809e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 facf 	bl	8008644 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	785b      	ldrb	r3, [r3, #1]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d115      	bne.n	80080da <USB_EPStartXfer+0x26a>
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4413      	add	r3, r2
 80080b8:	881b      	ldrh	r3, [r3, #0]
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c4:	b29c      	uxth	r4, r3
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	441a      	add	r2, r3
 80080d0:	4b9a      	ldr	r3, [pc, #616]	; (800833c <USB_EPStartXfer+0x4cc>)
 80080d2:	4323      	orrs	r3, r4
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	8013      	strh	r3, [r2, #0]
 80080d8:	e018      	b.n	800810c <USB_EPStartXfer+0x29c>
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	785b      	ldrb	r3, [r3, #1]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d114      	bne.n	800810c <USB_EPStartXfer+0x29c>
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4413      	add	r3, r2
 80080ec:	881b      	ldrh	r3, [r3, #0]
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f8:	b29c      	uxth	r4, r3
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	441a      	add	r2, r3
 8008104:	4b8e      	ldr	r3, [pc, #568]	; (8008340 <USB_EPStartXfer+0x4d0>)
 8008106:	4323      	orrs	r3, r4
 8008108:	b29b      	uxth	r3, r3
 800810a:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4413      	add	r3, r2
 8008116:	881b      	ldrh	r3, [r3, #0]
 8008118:	b29b      	uxth	r3, r3
 800811a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800811e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008122:	b29c      	uxth	r4, r3
 8008124:	f084 0310 	eor.w	r3, r4, #16
 8008128:	b29c      	uxth	r4, r3
 800812a:	f084 0320 	eor.w	r3, r4, #32
 800812e:	b29c      	uxth	r4, r3
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	441a      	add	r2, r3
 800813a:	4b82      	ldr	r3, [pc, #520]	; (8008344 <USB_EPStartXfer+0x4d4>)
 800813c:	4323      	orrs	r3, r4
 800813e:	b29b      	uxth	r3, r3
 8008140:	8013      	strh	r3, [r2, #0]
 8008142:	e146      	b.n	80083d2 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	699a      	ldr	r2, [r3, #24]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	429a      	cmp	r2, r3
 800814e:	d909      	bls.n	8008164 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	699a      	ldr	r2, [r3, #24]
 800815a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815c:	1ad2      	subs	r2, r2, r3
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	619a      	str	r2, [r3, #24]
 8008162:	e005      	b.n	8008170 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	2200      	movs	r2, #0
 800816e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	7b1b      	ldrb	r3, [r3, #12]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d148      	bne.n	800820a <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008178:	687c      	ldr	r4, [r7, #4]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008180:	b29b      	uxth	r3, r3
 8008182:	441c      	add	r4, r3
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	00db      	lsls	r3, r3, #3
 800818a:	4423      	add	r3, r4
 800818c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008190:	461c      	mov	r4, r3
 8008192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10e      	bne.n	80081b6 <USB_EPStartXfer+0x346>
 8008198:	8823      	ldrh	r3, [r4, #0]
 800819a:	b29b      	uxth	r3, r3
 800819c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	8023      	strh	r3, [r4, #0]
 80081a4:	8823      	ldrh	r3, [r4, #0]
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	8023      	strh	r3, [r4, #0]
 80081b4:	e0f2      	b.n	800839c <USB_EPStartXfer+0x52c>
 80081b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b8:	2b3e      	cmp	r3, #62	; 0x3e
 80081ba:	d810      	bhi.n	80081de <USB_EPStartXfer+0x36e>
 80081bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081be:	085b      	lsrs	r3, r3, #1
 80081c0:	61fb      	str	r3, [r7, #28]
 80081c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c4:	f003 0301 	and.w	r3, r3, #1
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d002      	beq.n	80081d2 <USB_EPStartXfer+0x362>
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	3301      	adds	r3, #1
 80081d0:	61fb      	str	r3, [r7, #28]
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	029b      	lsls	r3, r3, #10
 80081d8:	b29b      	uxth	r3, r3
 80081da:	8023      	strh	r3, [r4, #0]
 80081dc:	e0de      	b.n	800839c <USB_EPStartXfer+0x52c>
 80081de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e0:	095b      	lsrs	r3, r3, #5
 80081e2:	61fb      	str	r3, [r7, #28]
 80081e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e6:	f003 031f 	and.w	r3, r3, #31
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d102      	bne.n	80081f4 <USB_EPStartXfer+0x384>
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	3b01      	subs	r3, #1
 80081f2:	61fb      	str	r3, [r7, #28]
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	029b      	lsls	r3, r3, #10
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008204:	b29b      	uxth	r3, r3
 8008206:	8023      	strh	r3, [r4, #0]
 8008208:	e0c8      	b.n	800839c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	785b      	ldrb	r3, [r3, #1]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d148      	bne.n	80082a4 <USB_EPStartXfer+0x434>
 8008212:	687c      	ldr	r4, [r7, #4]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800821a:	b29b      	uxth	r3, r3
 800821c:	441c      	add	r4, r3
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	00db      	lsls	r3, r3, #3
 8008224:	4423      	add	r3, r4
 8008226:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800822a:	461c      	mov	r4, r3
 800822c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10e      	bne.n	8008250 <USB_EPStartXfer+0x3e0>
 8008232:	8823      	ldrh	r3, [r4, #0]
 8008234:	b29b      	uxth	r3, r3
 8008236:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800823a:	b29b      	uxth	r3, r3
 800823c:	8023      	strh	r3, [r4, #0]
 800823e:	8823      	ldrh	r3, [r4, #0]
 8008240:	b29b      	uxth	r3, r3
 8008242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800824a:	b29b      	uxth	r3, r3
 800824c:	8023      	strh	r3, [r4, #0]
 800824e:	e03d      	b.n	80082cc <USB_EPStartXfer+0x45c>
 8008250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008252:	2b3e      	cmp	r3, #62	; 0x3e
 8008254:	d810      	bhi.n	8008278 <USB_EPStartXfer+0x408>
 8008256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008258:	085b      	lsrs	r3, r3, #1
 800825a:	61bb      	str	r3, [r7, #24]
 800825c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825e:	f003 0301 	and.w	r3, r3, #1
 8008262:	2b00      	cmp	r3, #0
 8008264:	d002      	beq.n	800826c <USB_EPStartXfer+0x3fc>
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	3301      	adds	r3, #1
 800826a:	61bb      	str	r3, [r7, #24]
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	b29b      	uxth	r3, r3
 8008270:	029b      	lsls	r3, r3, #10
 8008272:	b29b      	uxth	r3, r3
 8008274:	8023      	strh	r3, [r4, #0]
 8008276:	e029      	b.n	80082cc <USB_EPStartXfer+0x45c>
 8008278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827a:	095b      	lsrs	r3, r3, #5
 800827c:	61bb      	str	r3, [r7, #24]
 800827e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008280:	f003 031f 	and.w	r3, r3, #31
 8008284:	2b00      	cmp	r3, #0
 8008286:	d102      	bne.n	800828e <USB_EPStartXfer+0x41e>
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	3b01      	subs	r3, #1
 800828c:	61bb      	str	r3, [r7, #24]
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	b29b      	uxth	r3, r3
 8008292:	029b      	lsls	r3, r3, #10
 8008294:	b29b      	uxth	r3, r3
 8008296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800829a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800829e:	b29b      	uxth	r3, r3
 80082a0:	8023      	strh	r3, [r4, #0]
 80082a2:	e013      	b.n	80082cc <USB_EPStartXfer+0x45c>
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	785b      	ldrb	r3, [r3, #1]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d10f      	bne.n	80082cc <USB_EPStartXfer+0x45c>
 80082ac:	687c      	ldr	r4, [r7, #4]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	441c      	add	r4, r3
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	00db      	lsls	r3, r3, #3
 80082be:	4423      	add	r3, r4
 80082c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80082c4:	461c      	mov	r4, r3
 80082c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	8023      	strh	r3, [r4, #0]
 80082cc:	687c      	ldr	r4, [r7, #4]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	785b      	ldrb	r3, [r3, #1]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d14e      	bne.n	8008374 <USB_EPStartXfer+0x504>
 80082d6:	687c      	ldr	r4, [r7, #4]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082de:	b29b      	uxth	r3, r3
 80082e0:	441c      	add	r4, r3
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	00db      	lsls	r3, r3, #3
 80082e8:	4423      	add	r3, r4
 80082ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80082ee:	461c      	mov	r4, r3
 80082f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d10e      	bne.n	8008314 <USB_EPStartXfer+0x4a4>
 80082f6:	8823      	ldrh	r3, [r4, #0]
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80082fe:	b29b      	uxth	r3, r3
 8008300:	8023      	strh	r3, [r4, #0]
 8008302:	8823      	ldrh	r3, [r4, #0]
 8008304:	b29b      	uxth	r3, r3
 8008306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800830a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800830e:	b29b      	uxth	r3, r3
 8008310:	8023      	strh	r3, [r4, #0]
 8008312:	e043      	b.n	800839c <USB_EPStartXfer+0x52c>
 8008314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008316:	2b3e      	cmp	r3, #62	; 0x3e
 8008318:	d816      	bhi.n	8008348 <USB_EPStartXfer+0x4d8>
 800831a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831c:	085b      	lsrs	r3, r3, #1
 800831e:	617b      	str	r3, [r7, #20]
 8008320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008322:	f003 0301 	and.w	r3, r3, #1
 8008326:	2b00      	cmp	r3, #0
 8008328:	d002      	beq.n	8008330 <USB_EPStartXfer+0x4c0>
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	3301      	adds	r3, #1
 800832e:	617b      	str	r3, [r7, #20]
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	b29b      	uxth	r3, r3
 8008334:	029b      	lsls	r3, r3, #10
 8008336:	b29b      	uxth	r3, r3
 8008338:	8023      	strh	r3, [r4, #0]
 800833a:	e02f      	b.n	800839c <USB_EPStartXfer+0x52c>
 800833c:	ffff80c0 	.word	0xffff80c0
 8008340:	ffffc080 	.word	0xffffc080
 8008344:	ffff8080 	.word	0xffff8080
 8008348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834a:	095b      	lsrs	r3, r3, #5
 800834c:	617b      	str	r3, [r7, #20]
 800834e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008350:	f003 031f 	and.w	r3, r3, #31
 8008354:	2b00      	cmp	r3, #0
 8008356:	d102      	bne.n	800835e <USB_EPStartXfer+0x4ee>
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	3b01      	subs	r3, #1
 800835c:	617b      	str	r3, [r7, #20]
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	b29b      	uxth	r3, r3
 8008362:	029b      	lsls	r3, r3, #10
 8008364:	b29b      	uxth	r3, r3
 8008366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800836a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800836e:	b29b      	uxth	r3, r3
 8008370:	8023      	strh	r3, [r4, #0]
 8008372:	e013      	b.n	800839c <USB_EPStartXfer+0x52c>
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	785b      	ldrb	r3, [r3, #1]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d10f      	bne.n	800839c <USB_EPStartXfer+0x52c>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008382:	b29b      	uxth	r3, r3
 8008384:	441c      	add	r4, r3
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	00db      	lsls	r3, r3, #3
 800838c:	4423      	add	r3, r4
 800838e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008392:	613b      	str	r3, [r7, #16]
 8008394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008396:	b29a      	uxth	r2, r3
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	4413      	add	r3, r2
 80083a6:	881b      	ldrh	r3, [r3, #0]
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083b2:	b29c      	uxth	r4, r3
 80083b4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80083b8:	b29c      	uxth	r4, r3
 80083ba:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80083be:	b29c      	uxth	r4, r3
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	441a      	add	r2, r3
 80083ca:	4b04      	ldr	r3, [pc, #16]	; (80083dc <USB_EPStartXfer+0x56c>)
 80083cc:	4323      	orrs	r3, r4
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3734      	adds	r7, #52	; 0x34
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd90      	pop	{r4, r7, pc}
 80083dc:	ffff8080 	.word	0xffff8080

080083e0 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083e0:	b490      	push	{r4, r7}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	785b      	ldrb	r3, [r3, #1]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d018      	beq.n	8008424 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	881b      	ldrh	r3, [r3, #0]
 80083fe:	b29b      	uxth	r3, r3
 8008400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008408:	b29c      	uxth	r4, r3
 800840a:	f084 0310 	eor.w	r3, r4, #16
 800840e:	b29c      	uxth	r4, r3
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	441a      	add	r2, r3
 800841a:	4b11      	ldr	r3, [pc, #68]	; (8008460 <USB_EPSetStall+0x80>)
 800841c:	4323      	orrs	r3, r4
 800841e:	b29b      	uxth	r3, r3
 8008420:	8013      	strh	r3, [r2, #0]
 8008422:	e017      	b.n	8008454 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4413      	add	r3, r2
 800842e:	881b      	ldrh	r3, [r3, #0]
 8008430:	b29b      	uxth	r3, r3
 8008432:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800843a:	b29c      	uxth	r4, r3
 800843c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008440:	b29c      	uxth	r4, r3
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	441a      	add	r2, r3
 800844c:	4b04      	ldr	r3, [pc, #16]	; (8008460 <USB_EPSetStall+0x80>)
 800844e:	4323      	orrs	r3, r4
 8008450:	b29b      	uxth	r3, r3
 8008452:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bc90      	pop	{r4, r7}
 800845e:	4770      	bx	lr
 8008460:	ffff8080 	.word	0xffff8080

08008464 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008464:	b490      	push	{r4, r7}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	7b1b      	ldrb	r3, [r3, #12]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d17d      	bne.n	8008572 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	785b      	ldrb	r3, [r3, #1]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d03d      	beq.n	80084fa <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4413      	add	r3, r2
 8008488:	881b      	ldrh	r3, [r3, #0]
 800848a:	b29c      	uxth	r4, r3
 800848c:	4623      	mov	r3, r4
 800848e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008492:	2b00      	cmp	r3, #0
 8008494:	d014      	beq.n	80084c0 <USB_EPClearStall+0x5c>
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	4413      	add	r3, r2
 80084a0:	881b      	ldrh	r3, [r3, #0]
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ac:	b29c      	uxth	r4, r3
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	441a      	add	r2, r3
 80084b8:	4b31      	ldr	r3, [pc, #196]	; (8008580 <USB_EPClearStall+0x11c>)
 80084ba:	4323      	orrs	r3, r4
 80084bc:	b29b      	uxth	r3, r3
 80084be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	78db      	ldrb	r3, [r3, #3]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d054      	beq.n	8008572 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	4413      	add	r3, r2
 80084d2:	881b      	ldrh	r3, [r3, #0]
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084de:	b29c      	uxth	r4, r3
 80084e0:	f084 0320 	eor.w	r3, r4, #32
 80084e4:	b29c      	uxth	r4, r3
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	441a      	add	r2, r3
 80084f0:	4b24      	ldr	r3, [pc, #144]	; (8008584 <USB_EPClearStall+0x120>)
 80084f2:	4323      	orrs	r3, r4
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	8013      	strh	r3, [r2, #0]
 80084f8:	e03b      	b.n	8008572 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4413      	add	r3, r2
 8008504:	881b      	ldrh	r3, [r3, #0]
 8008506:	b29c      	uxth	r4, r3
 8008508:	4623      	mov	r3, r4
 800850a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800850e:	2b00      	cmp	r3, #0
 8008510:	d014      	beq.n	800853c <USB_EPClearStall+0xd8>
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	4413      	add	r3, r2
 800851c:	881b      	ldrh	r3, [r3, #0]
 800851e:	b29b      	uxth	r3, r3
 8008520:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008528:	b29c      	uxth	r4, r3
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	441a      	add	r2, r3
 8008534:	4b14      	ldr	r3, [pc, #80]	; (8008588 <USB_EPClearStall+0x124>)
 8008536:	4323      	orrs	r3, r4
 8008538:	b29b      	uxth	r3, r3
 800853a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	4413      	add	r3, r2
 8008546:	881b      	ldrh	r3, [r3, #0]
 8008548:	b29b      	uxth	r3, r3
 800854a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800854e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008552:	b29c      	uxth	r4, r3
 8008554:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008558:	b29c      	uxth	r4, r3
 800855a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800855e:	b29c      	uxth	r4, r3
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	441a      	add	r2, r3
 800856a:	4b06      	ldr	r3, [pc, #24]	; (8008584 <USB_EPClearStall+0x120>)
 800856c:	4323      	orrs	r3, r4
 800856e:	b29b      	uxth	r3, r3
 8008570:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3708      	adds	r7, #8
 8008578:	46bd      	mov	sp, r7
 800857a:	bc90      	pop	{r4, r7}
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	ffff80c0 	.word	0xffff80c0
 8008584:	ffff8080 	.word	0xffff8080
 8008588:	ffffc080 	.word	0xffffc080

0800858c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	460b      	mov	r3, r1
 8008596:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008598:	78fb      	ldrb	r3, [r7, #3]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d103      	bne.n	80085a6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2280      	movs	r2, #128	; 0x80
 80085a2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80085e2:	b480      	push	{r7}
 80085e4:	b083      	sub	sp, #12
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80085f6:	b29a      	uxth	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800860c:	b480      	push	{r7}
 800860e:	b085      	sub	sp, #20
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800861a:	b29b      	uxth	r3, r3
 800861c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800861e:	68fb      	ldr	r3, [r7, #12]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008644:	b480      	push	{r7}
 8008646:	b08d      	sub	sp, #52	; 0x34
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	4611      	mov	r1, r2
 8008650:	461a      	mov	r2, r3
 8008652:	460b      	mov	r3, r1
 8008654:	80fb      	strh	r3, [r7, #6]
 8008656:	4613      	mov	r3, r2
 8008658:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800865a:	88bb      	ldrh	r3, [r7, #4]
 800865c:	3301      	adds	r3, #1
 800865e:	085b      	lsrs	r3, r3, #1
 8008660:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800866a:	88fa      	ldrh	r2, [r7, #6]
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	4413      	add	r3, r2
 8008670:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008674:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008676:	6a3b      	ldr	r3, [r7, #32]
 8008678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800867a:	e01b      	b.n	80086b4 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008684:	3301      	adds	r3, #1
 8008686:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	b29b      	uxth	r3, r3
 800868e:	021b      	lsls	r3, r3, #8
 8008690:	b29b      	uxth	r3, r3
 8008692:	461a      	mov	r2, r3
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	4313      	orrs	r3, r2
 8008698:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	b29a      	uxth	r2, r3
 800869e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80086a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a4:	3302      	adds	r3, #2
 80086a6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80086a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086aa:	3301      	adds	r3, #1
 80086ac:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80086ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b0:	3b01      	subs	r3, #1
 80086b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1e0      	bne.n	800867c <USB_WritePMA+0x38>
  }
}
 80086ba:	bf00      	nop
 80086bc:	3734      	adds	r7, #52	; 0x34
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b08b      	sub	sp, #44	; 0x2c
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	60f8      	str	r0, [r7, #12]
 80086ce:	60b9      	str	r1, [r7, #8]
 80086d0:	4611      	mov	r1, r2
 80086d2:	461a      	mov	r2, r3
 80086d4:	460b      	mov	r3, r1
 80086d6:	80fb      	strh	r3, [r7, #6]
 80086d8:	4613      	mov	r3, r2
 80086da:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80086dc:	88bb      	ldrh	r3, [r7, #4]
 80086de:	085b      	lsrs	r3, r3, #1
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80086ec:	88fa      	ldrh	r2, [r7, #6]
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	4413      	add	r3, r2
 80086f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086f6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	627b      	str	r3, [r7, #36]	; 0x24
 80086fc:	e018      	b.n	8008730 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80086fe:	6a3b      	ldr	r3, [r7, #32]
 8008700:	881b      	ldrh	r3, [r3, #0]
 8008702:	b29b      	uxth	r3, r3
 8008704:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	3302      	adds	r3, #2
 800870a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	b2da      	uxtb	r2, r3
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	3301      	adds	r3, #1
 8008718:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	0a1b      	lsrs	r3, r3, #8
 800871e:	b2da      	uxtb	r2, r3
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	3301      	adds	r3, #1
 8008728:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800872a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872c:	3b01      	subs	r3, #1
 800872e:	627b      	str	r3, [r7, #36]	; 0x24
 8008730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1e3      	bne.n	80086fe <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008736:	88bb      	ldrh	r3, [r7, #4]
 8008738:	f003 0301 	and.w	r3, r3, #1
 800873c:	b29b      	uxth	r3, r3
 800873e:	2b00      	cmp	r3, #0
 8008740:	d007      	beq.n	8008752 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008742:	6a3b      	ldr	r3, [r7, #32]
 8008744:	881b      	ldrh	r3, [r3, #0]
 8008746:	b29b      	uxth	r3, r3
 8008748:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	b2da      	uxtb	r2, r3
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	701a      	strb	r2, [r3, #0]
  }
}
 8008752:	bf00      	nop
 8008754:	372c      	adds	r7, #44	; 0x2c
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b084      	sub	sp, #16
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	460b      	mov	r3, r1
 8008768:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800876a:	2300      	movs	r3, #0
 800876c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	7c1b      	ldrb	r3, [r3, #16]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d115      	bne.n	80087a2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008776:	f44f 7300 	mov.w	r3, #512	; 0x200
 800877a:	2202      	movs	r2, #2
 800877c:	2181      	movs	r1, #129	; 0x81
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f001 feb0 	bl	800a4e4 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800878a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800878e:	2202      	movs	r2, #2
 8008790:	2101      	movs	r1, #1
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f001 fea6 	bl	800a4e4 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80087a0:	e012      	b.n	80087c8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80087a2:	2340      	movs	r3, #64	; 0x40
 80087a4:	2202      	movs	r2, #2
 80087a6:	2181      	movs	r1, #129	; 0x81
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f001 fe9b 	bl	800a4e4 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80087b4:	2340      	movs	r3, #64	; 0x40
 80087b6:	2202      	movs	r2, #2
 80087b8:	2101      	movs	r1, #1
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f001 fe92 	bl	800a4e4 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80087c8:	2308      	movs	r3, #8
 80087ca:	2203      	movs	r2, #3
 80087cc:	2182      	movs	r1, #130	; 0x82
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f001 fe88 	bl	800a4e4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80087da:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80087de:	f002 f87b 	bl	800a8d8 <USBD_static_malloc>
 80087e2:	4602      	mov	r2, r0
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d102      	bne.n	80087fa <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80087f4:	2301      	movs	r3, #1
 80087f6:	73fb      	strb	r3, [r7, #15]
 80087f8:	e026      	b.n	8008848 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008800:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	2200      	movs	r2, #0
 8008810:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	2200      	movs	r2, #0
 8008818:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	7c1b      	ldrb	r3, [r3, #16]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d109      	bne.n	8008838 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800882a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800882e:	2101      	movs	r1, #1
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f001 ffcd 	bl	800a7d0 <USBD_LL_PrepareReceive>
 8008836:	e007      	b.n	8008848 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800883e:	2340      	movs	r3, #64	; 0x40
 8008840:	2101      	movs	r1, #1
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f001 ffc4 	bl	800a7d0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008848:	7bfb      	ldrb	r3, [r7, #15]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b084      	sub	sp, #16
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	460b      	mov	r3, r1
 800885c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800885e:	2300      	movs	r3, #0
 8008860:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008862:	2181      	movs	r1, #129	; 0x81
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f001 fe7b 	bl	800a560 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008870:	2101      	movs	r1, #1
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f001 fe74 	bl	800a560 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008880:	2182      	movs	r1, #130	; 0x82
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f001 fe6c 	bl	800a560 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00e      	beq.n	80088b6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a8:	4618      	mov	r0, r3
 80088aa:	f002 f823 	bl	800a8f4 <USBD_static_free>
    pdev->pClassData = NULL;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80088b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088d0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80088d2:	2300      	movs	r3, #0
 80088d4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80088d6:	2300      	movs	r3, #0
 80088d8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80088da:	2300      	movs	r3, #0
 80088dc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d039      	beq.n	800895e <USBD_CDC_Setup+0x9e>
 80088ea:	2b20      	cmp	r3, #32
 80088ec:	d17c      	bne.n	80089e8 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	88db      	ldrh	r3, [r3, #6]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d029      	beq.n	800894a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	b25b      	sxtb	r3, r3
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	da11      	bge.n	8008924 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	683a      	ldr	r2, [r7, #0]
 800890a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800890c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800890e:	683a      	ldr	r2, [r7, #0]
 8008910:	88d2      	ldrh	r2, [r2, #6]
 8008912:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008914:	6939      	ldr	r1, [r7, #16]
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	88db      	ldrh	r3, [r3, #6]
 800891a:	461a      	mov	r2, r3
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f001 f9fb 	bl	8009d18 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008922:	e068      	b.n	80089f6 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	785a      	ldrb	r2, [r3, #1]
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	88db      	ldrh	r3, [r3, #6]
 8008932:	b2da      	uxtb	r2, r3
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800893a:	6939      	ldr	r1, [r7, #16]
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	88db      	ldrh	r3, [r3, #6]
 8008940:	461a      	mov	r2, r3
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f001 fa16 	bl	8009d74 <USBD_CtlPrepareRx>
      break;
 8008948:	e055      	b.n	80089f6 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	683a      	ldr	r2, [r7, #0]
 8008954:	7850      	ldrb	r0, [r2, #1]
 8008956:	2200      	movs	r2, #0
 8008958:	6839      	ldr	r1, [r7, #0]
 800895a:	4798      	blx	r3
      break;
 800895c:	e04b      	b.n	80089f6 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	785b      	ldrb	r3, [r3, #1]
 8008962:	2b0a      	cmp	r3, #10
 8008964:	d017      	beq.n	8008996 <USBD_CDC_Setup+0xd6>
 8008966:	2b0b      	cmp	r3, #11
 8008968:	d029      	beq.n	80089be <USBD_CDC_Setup+0xfe>
 800896a:	2b00      	cmp	r3, #0
 800896c:	d133      	bne.n	80089d6 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008974:	2b03      	cmp	r3, #3
 8008976:	d107      	bne.n	8008988 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008978:	f107 030c 	add.w	r3, r7, #12
 800897c:	2202      	movs	r2, #2
 800897e:	4619      	mov	r1, r3
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f001 f9c9 	bl	8009d18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008986:	e02e      	b.n	80089e6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008988:	6839      	ldr	r1, [r7, #0]
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f001 f959 	bl	8009c42 <USBD_CtlError>
            ret = USBD_FAIL;
 8008990:	2302      	movs	r3, #2
 8008992:	75fb      	strb	r3, [r7, #23]
          break;
 8008994:	e027      	b.n	80089e6 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800899c:	2b03      	cmp	r3, #3
 800899e:	d107      	bne.n	80089b0 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80089a0:	f107 030f 	add.w	r3, r7, #15
 80089a4:	2201      	movs	r2, #1
 80089a6:	4619      	mov	r1, r3
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f001 f9b5 	bl	8009d18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089ae:	e01a      	b.n	80089e6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80089b0:	6839      	ldr	r1, [r7, #0]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f001 f945 	bl	8009c42 <USBD_CtlError>
            ret = USBD_FAIL;
 80089b8:	2302      	movs	r3, #2
 80089ba:	75fb      	strb	r3, [r7, #23]
          break;
 80089bc:	e013      	b.n	80089e6 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089c4:	2b03      	cmp	r3, #3
 80089c6:	d00d      	beq.n	80089e4 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f001 f939 	bl	8009c42 <USBD_CtlError>
            ret = USBD_FAIL;
 80089d0:	2302      	movs	r3, #2
 80089d2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80089d4:	e006      	b.n	80089e4 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f001 f932 	bl	8009c42 <USBD_CtlError>
          ret = USBD_FAIL;
 80089de:	2302      	movs	r3, #2
 80089e0:	75fb      	strb	r3, [r7, #23]
          break;
 80089e2:	e000      	b.n	80089e6 <USBD_CDC_Setup+0x126>
          break;
 80089e4:	bf00      	nop
      }
      break;
 80089e6:	e006      	b.n	80089f6 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80089e8:	6839      	ldr	r1, [r7, #0]
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f001 f929 	bl	8009c42 <USBD_CtlError>
      ret = USBD_FAIL;
 80089f0:	2302      	movs	r3, #2
 80089f2:	75fb      	strb	r3, [r7, #23]
      break;
 80089f4:	bf00      	nop
  }

  return ret;
 80089f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3718      	adds	r7, #24
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a12:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a1a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d037      	beq.n	8008a96 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008a26:	78fa      	ldrb	r2, [r7, #3]
 8008a28:	6879      	ldr	r1, [r7, #4]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	4413      	add	r3, r2
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	440b      	add	r3, r1
 8008a34:	331c      	adds	r3, #28
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d026      	beq.n	8008a8a <USBD_CDC_DataIn+0x8a>
 8008a3c:	78fa      	ldrb	r2, [r7, #3]
 8008a3e:	6879      	ldr	r1, [r7, #4]
 8008a40:	4613      	mov	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4413      	add	r3, r2
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	440b      	add	r3, r1
 8008a4a:	331c      	adds	r3, #28
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	78fa      	ldrb	r2, [r7, #3]
 8008a50:	68b9      	ldr	r1, [r7, #8]
 8008a52:	0152      	lsls	r2, r2, #5
 8008a54:	440a      	add	r2, r1
 8008a56:	3238      	adds	r2, #56	; 0x38
 8008a58:	6812      	ldr	r2, [r2, #0]
 8008a5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a5e:	fb02 f201 	mul.w	r2, r2, r1
 8008a62:	1a9b      	subs	r3, r3, r2
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d110      	bne.n	8008a8a <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008a68:	78fa      	ldrb	r2, [r7, #3]
 8008a6a:	6879      	ldr	r1, [r7, #4]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	4413      	add	r3, r2
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	440b      	add	r3, r1
 8008a76:	331c      	adds	r3, #28
 8008a78:	2200      	movs	r2, #0
 8008a7a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008a7c:	78f9      	ldrb	r1, [r7, #3]
 8008a7e:	2300      	movs	r3, #0
 8008a80:	2200      	movs	r2, #0
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f001 fe6a 	bl	800a75c <USBD_LL_Transmit>
 8008a88:	e003      	b.n	8008a92 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008a92:	2300      	movs	r3, #0
 8008a94:	e000      	b.n	8008a98 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8008a96:	2302      	movs	r3, #2
  }
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ab2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008ab4:	78fb      	ldrb	r3, [r7, #3]
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f001 fec3 	bl	800a844 <USBD_LL_GetRxDataSize>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00d      	beq.n	8008aec <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008ae4:	4611      	mov	r1, r2
 8008ae6:	4798      	blx	r3

    return USBD_OK;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	e000      	b.n	8008aee <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008aec:	2302      	movs	r3, #2
  }
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b084      	sub	sp, #16
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b04:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d015      	beq.n	8008b3c <USBD_CDC_EP0_RxReady+0x46>
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008b16:	2bff      	cmp	r3, #255	; 0xff
 8008b18:	d010      	beq.n	8008b3c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008b28:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008b30:	b292      	uxth	r2, r2
 8008b32:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	22ff      	movs	r2, #255	; 0xff
 8008b38:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
	...

08008b48 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2243      	movs	r2, #67	; 0x43
 8008b54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008b56:	4b03      	ldr	r3, [pc, #12]	; (8008b64 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr
 8008b64:	20000094 	.word	0x20000094

08008b68 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2243      	movs	r2, #67	; 0x43
 8008b74:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008b76:	4b03      	ldr	r3, [pc, #12]	; (8008b84 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr
 8008b84:	20000050 	.word	0x20000050

08008b88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2243      	movs	r2, #67	; 0x43
 8008b94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008b96:	4b03      	ldr	r3, [pc, #12]	; (8008ba4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr
 8008ba4:	200000d8 	.word	0x200000d8

08008ba8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	220a      	movs	r2, #10
 8008bb4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008bb6:	4b03      	ldr	r3, [pc, #12]	; (8008bc4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr
 8008bc4:	2000000c 	.word	0x2000000c

08008bc8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008bd2:	2302      	movs	r3, #2
 8008bd4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d005      	beq.n	8008be8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	683a      	ldr	r2, [r7, #0]
 8008be0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008be4:	2300      	movs	r3, #0
 8008be6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3714      	adds	r7, #20
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr

08008bf6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008bf6:	b480      	push	{r7}
 8008bf8:	b087      	sub	sp, #28
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	60f8      	str	r0, [r7, #12]
 8008bfe:	60b9      	str	r1, [r7, #8]
 8008c00:	4613      	mov	r3, r2
 8008c02:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c0a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	68ba      	ldr	r2, [r7, #8]
 8008c10:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008c14:	88fa      	ldrh	r2, [r7, #6]
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	371c      	adds	r7, #28
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr

08008c2a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008c2a:	b480      	push	{r7}
 8008c2c:	b085      	sub	sp, #20
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
 8008c32:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c3a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	683a      	ldr	r2, [r7, #0]
 8008c40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr

08008c52 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b084      	sub	sp, #16
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c60:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d017      	beq.n	8008c9c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	7c1b      	ldrb	r3, [r3, #16]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d109      	bne.n	8008c88 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c7e:	2101      	movs	r1, #1
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f001 fda5 	bl	800a7d0 <USBD_LL_PrepareReceive>
 8008c86:	e007      	b.n	8008c98 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c8e:	2340      	movs	r3, #64	; 0x40
 8008c90:	2101      	movs	r1, #1
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f001 fd9c 	bl	800a7d0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	e000      	b.n	8008c9e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008c9c:	2302      	movs	r3, #2
  }
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b084      	sub	sp, #16
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	60f8      	str	r0, [r7, #12]
 8008cae:	60b9      	str	r1, [r7, #8]
 8008cb0:	4613      	mov	r3, r2
 8008cb2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d101      	bne.n	8008cbe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008cba:	2302      	movs	r3, #2
 8008cbc:	e01a      	b.n	8008cf4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d003      	beq.n	8008cd0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d003      	beq.n	8008cde <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	79fa      	ldrb	r2, [r7, #7]
 8008cea:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008cec:	68f8      	ldr	r0, [r7, #12]
 8008cee:	f001 fb65 	bl	800a3bc <USBD_LL_Init>

  return USBD_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3710      	adds	r7, #16
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008d06:	2300      	movs	r3, #0
 8008d08:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d006      	beq.n	8008d1e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	683a      	ldr	r2, [r7, #0]
 8008d14:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	73fb      	strb	r3, [r7, #15]
 8008d1c:	e001      	b.n	8008d22 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008d1e:	2302      	movs	r3, #2
 8008d20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3714      	adds	r7, #20
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f001 fba1 	bl	800a480 <USBD_LL_Start>

  return USBD_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	370c      	adds	r7, #12
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b084      	sub	sp, #16
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	460b      	mov	r3, r1
 8008d68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008d6a:	2302      	movs	r3, #2
 8008d6c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00c      	beq.n	8008d92 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	78fa      	ldrb	r2, [r7, #3]
 8008d82:	4611      	mov	r1, r2
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	4798      	blx	r3
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	460b      	mov	r3, r1
 8008da6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	78fa      	ldrb	r2, [r7, #3]
 8008db2:	4611      	mov	r1, r2
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	4798      	blx	r3

  return USBD_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3708      	adds	r7, #8
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b082      	sub	sp, #8
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
 8008dca:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008dd2:	6839      	ldr	r1, [r7, #0]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f000 fef7 	bl	8009bc8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008de8:	461a      	mov	r2, r3
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008df6:	f003 031f 	and.w	r3, r3, #31
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d00c      	beq.n	8008e18 <USBD_LL_SetupStage+0x56>
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d302      	bcc.n	8008e08 <USBD_LL_SetupStage+0x46>
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d010      	beq.n	8008e28 <USBD_LL_SetupStage+0x66>
 8008e06:	e017      	b.n	8008e38 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008e0e:	4619      	mov	r1, r3
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 f9cd 	bl	80091b0 <USBD_StdDevReq>
      break;
 8008e16:	e01a      	b.n	8008e4e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008e1e:	4619      	mov	r1, r3
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 fa2f 	bl	8009284 <USBD_StdItfReq>
      break;
 8008e26:	e012      	b.n	8008e4e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008e2e:	4619      	mov	r1, r3
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 fa6d 	bl	8009310 <USBD_StdEPReq>
      break;
 8008e36:	e00a      	b.n	8008e4e <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008e3e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	4619      	mov	r1, r3
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f001 fbc0 	bl	800a5cc <USBD_LL_StallEP>
      break;
 8008e4c:	bf00      	nop
  }

  return USBD_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b086      	sub	sp, #24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	460b      	mov	r3, r1
 8008e62:	607a      	str	r2, [r7, #4]
 8008e64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008e66:	7afb      	ldrb	r3, [r7, #11]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d14b      	bne.n	8008f04 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008e72:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	d134      	bne.n	8008ee8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	68da      	ldr	r2, [r3, #12]
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	691b      	ldr	r3, [r3, #16]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d919      	bls.n	8008ebe <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	68da      	ldr	r2, [r3, #12]
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	1ad2      	subs	r2, r2, r3
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	68da      	ldr	r2, [r3, #12]
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d203      	bcs.n	8008eac <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	e002      	b.n	8008eb2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	6879      	ldr	r1, [r7, #4]
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	f000 ff7a 	bl	8009db0 <USBD_CtlContinueRx>
 8008ebc:	e038      	b.n	8008f30 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ec4:	691b      	ldr	r3, [r3, #16]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00a      	beq.n	8008ee0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008ed0:	2b03      	cmp	r3, #3
 8008ed2:	d105      	bne.n	8008ee0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eda:	691b      	ldr	r3, [r3, #16]
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f000 ff77 	bl	8009dd4 <USBD_CtlSendStatus>
 8008ee6:	e023      	b.n	8008f30 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008eee:	2b05      	cmp	r3, #5
 8008ef0:	d11e      	bne.n	8008f30 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008efa:	2100      	movs	r1, #0
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f001 fb65 	bl	800a5cc <USBD_LL_StallEP>
 8008f02:	e015      	b.n	8008f30 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f0a:	699b      	ldr	r3, [r3, #24]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00d      	beq.n	8008f2c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008f16:	2b03      	cmp	r3, #3
 8008f18:	d108      	bne.n	8008f2c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	7afa      	ldrb	r2, [r7, #11]
 8008f24:	4611      	mov	r1, r2
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	4798      	blx	r3
 8008f2a:	e001      	b.n	8008f30 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008f2c:	2302      	movs	r3, #2
 8008f2e:	e000      	b.n	8008f32 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3718      	adds	r7, #24
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b086      	sub	sp, #24
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	60f8      	str	r0, [r7, #12]
 8008f42:	460b      	mov	r3, r1
 8008f44:	607a      	str	r2, [r7, #4]
 8008f46:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008f48:	7afb      	ldrb	r3, [r7, #11]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d17f      	bne.n	800904e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	3314      	adds	r3, #20
 8008f52:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d15c      	bne.n	8009018 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	68da      	ldr	r2, [r3, #12]
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d915      	bls.n	8008f96 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	68da      	ldr	r2, [r3, #12]
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	1ad2      	subs	r2, r2, r3
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	461a      	mov	r2, r3
 8008f80:	6879      	ldr	r1, [r7, #4]
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f000 fee4 	bl	8009d50 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f88:	2300      	movs	r3, #0
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f001 fc1e 	bl	800a7d0 <USBD_LL_PrepareReceive>
 8008f94:	e04e      	b.n	8009034 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	697a      	ldr	r2, [r7, #20]
 8008f9c:	6912      	ldr	r2, [r2, #16]
 8008f9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fa2:	fb02 f201 	mul.w	r2, r2, r1
 8008fa6:	1a9b      	subs	r3, r3, r2
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d11c      	bne.n	8008fe6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	689a      	ldr	r2, [r3, #8]
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d316      	bcc.n	8008fe6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	689a      	ldr	r2, [r3, #8]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d20f      	bcs.n	8008fe6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	2100      	movs	r1, #0
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	f000 fec0 	bl	8009d50 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fd8:	2300      	movs	r3, #0
 8008fda:	2200      	movs	r2, #0
 8008fdc:	2100      	movs	r1, #0
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f001 fbf6 	bl	800a7d0 <USBD_LL_PrepareReceive>
 8008fe4:	e026      	b.n	8009034 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00a      	beq.n	8009008 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008ff8:	2b03      	cmp	r3, #3
 8008ffa:	d105      	bne.n	8009008 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	68f8      	ldr	r0, [r7, #12]
 8009006:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009008:	2180      	movs	r1, #128	; 0x80
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f001 fade 	bl	800a5cc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009010:	68f8      	ldr	r0, [r7, #12]
 8009012:	f000 fef2 	bl	8009dfa <USBD_CtlReceiveStatus>
 8009016:	e00d      	b.n	8009034 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800901e:	2b04      	cmp	r3, #4
 8009020:	d004      	beq.n	800902c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009028:	2b00      	cmp	r3, #0
 800902a:	d103      	bne.n	8009034 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800902c:	2180      	movs	r1, #128	; 0x80
 800902e:	68f8      	ldr	r0, [r7, #12]
 8009030:	f001 facc 	bl	800a5cc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800903a:	2b01      	cmp	r3, #1
 800903c:	d11d      	bne.n	800907a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800903e:	68f8      	ldr	r0, [r7, #12]
 8009040:	f7ff fe82 	bl	8008d48 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2200      	movs	r2, #0
 8009048:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800904c:	e015      	b.n	800907a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009054:	695b      	ldr	r3, [r3, #20]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00d      	beq.n	8009076 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009060:	2b03      	cmp	r3, #3
 8009062:	d108      	bne.n	8009076 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800906a:	695b      	ldr	r3, [r3, #20]
 800906c:	7afa      	ldrb	r2, [r7, #11]
 800906e:	4611      	mov	r1, r2
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	4798      	blx	r3
 8009074:	e001      	b.n	800907a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009076:	2302      	movs	r3, #2
 8009078:	e000      	b.n	800907c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3718      	adds	r7, #24
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800908c:	2340      	movs	r3, #64	; 0x40
 800908e:	2200      	movs	r2, #0
 8009090:	2100      	movs	r1, #0
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f001 fa26 	bl	800a4e4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2240      	movs	r2, #64	; 0x40
 80090a4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80090a8:	2340      	movs	r3, #64	; 0x40
 80090aa:	2200      	movs	r2, #0
 80090ac:	2180      	movs	r1, #128	; 0x80
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f001 fa18 	bl	800a4e4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2240      	movs	r2, #64	; 0x40
 80090be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d009      	beq.n	80090fc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	6852      	ldr	r2, [r2, #4]
 80090f4:	b2d2      	uxtb	r2, r2
 80090f6:	4611      	mov	r1, r2
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	4798      	blx	r3
  }

  return USBD_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009106:	b480      	push	{r7}
 8009108:	b083      	sub	sp, #12
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
 800910e:	460b      	mov	r3, r1
 8009110:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	78fa      	ldrb	r2, [r7, #3]
 8009116:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	370c      	adds	r7, #12
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009126:	b480      	push	{r7}
 8009128:	b083      	sub	sp, #12
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2204      	movs	r2, #4
 800913e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800915e:	2b04      	cmp	r3, #4
 8009160:	d105      	bne.n	800916e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800918a:	2b03      	cmp	r3, #3
 800918c:	d10b      	bne.n	80091a6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d005      	beq.n	80091a6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091a0:	69db      	ldr	r3, [r3, #28]
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3708      	adds	r7, #8
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091ba:	2300      	movs	r3, #0
 80091bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091c6:	2b20      	cmp	r3, #32
 80091c8:	d004      	beq.n	80091d4 <USBD_StdDevReq+0x24>
 80091ca:	2b40      	cmp	r3, #64	; 0x40
 80091cc:	d002      	beq.n	80091d4 <USBD_StdDevReq+0x24>
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d008      	beq.n	80091e4 <USBD_StdDevReq+0x34>
 80091d2:	e04c      	b.n	800926e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	6839      	ldr	r1, [r7, #0]
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	4798      	blx	r3
      break;
 80091e2:	e049      	b.n	8009278 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	785b      	ldrb	r3, [r3, #1]
 80091e8:	2b09      	cmp	r3, #9
 80091ea:	d83a      	bhi.n	8009262 <USBD_StdDevReq+0xb2>
 80091ec:	a201      	add	r2, pc, #4	; (adr r2, 80091f4 <USBD_StdDevReq+0x44>)
 80091ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f2:	bf00      	nop
 80091f4:	08009245 	.word	0x08009245
 80091f8:	08009259 	.word	0x08009259
 80091fc:	08009263 	.word	0x08009263
 8009200:	0800924f 	.word	0x0800924f
 8009204:	08009263 	.word	0x08009263
 8009208:	08009227 	.word	0x08009227
 800920c:	0800921d 	.word	0x0800921d
 8009210:	08009263 	.word	0x08009263
 8009214:	0800923b 	.word	0x0800923b
 8009218:	08009231 	.word	0x08009231
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800921c:	6839      	ldr	r1, [r7, #0]
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f9d4 	bl	80095cc <USBD_GetDescriptor>
          break;
 8009224:	e022      	b.n	800926c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009226:	6839      	ldr	r1, [r7, #0]
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 fb61 	bl	80098f0 <USBD_SetAddress>
          break;
 800922e:	e01d      	b.n	800926c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009230:	6839      	ldr	r1, [r7, #0]
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fb9e 	bl	8009974 <USBD_SetConfig>
          break;
 8009238:	e018      	b.n	800926c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800923a:	6839      	ldr	r1, [r7, #0]
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 fc27 	bl	8009a90 <USBD_GetConfig>
          break;
 8009242:	e013      	b.n	800926c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009244:	6839      	ldr	r1, [r7, #0]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fc56 	bl	8009af8 <USBD_GetStatus>
          break;
 800924c:	e00e      	b.n	800926c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800924e:	6839      	ldr	r1, [r7, #0]
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 fc84 	bl	8009b5e <USBD_SetFeature>
          break;
 8009256:	e009      	b.n	800926c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009258:	6839      	ldr	r1, [r7, #0]
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fc93 	bl	8009b86 <USBD_ClrFeature>
          break;
 8009260:	e004      	b.n	800926c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009262:	6839      	ldr	r1, [r7, #0]
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 fcec 	bl	8009c42 <USBD_CtlError>
          break;
 800926a:	bf00      	nop
      }
      break;
 800926c:	e004      	b.n	8009278 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800926e:	6839      	ldr	r1, [r7, #0]
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 fce6 	bl	8009c42 <USBD_CtlError>
      break;
 8009276:	bf00      	nop
  }

  return ret;
 8009278:	7bfb      	ldrb	r3, [r7, #15]
}
 800927a:	4618      	mov	r0, r3
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop

08009284 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800928e:	2300      	movs	r3, #0
 8009290:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800929a:	2b20      	cmp	r3, #32
 800929c:	d003      	beq.n	80092a6 <USBD_StdItfReq+0x22>
 800929e:	2b40      	cmp	r3, #64	; 0x40
 80092a0:	d001      	beq.n	80092a6 <USBD_StdItfReq+0x22>
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d12a      	bne.n	80092fc <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ac:	3b01      	subs	r3, #1
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	d81d      	bhi.n	80092ee <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	889b      	ldrh	r3, [r3, #4]
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d813      	bhi.n	80092e4 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	6839      	ldr	r1, [r7, #0]
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	4798      	blx	r3
 80092ca:	4603      	mov	r3, r0
 80092cc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	88db      	ldrh	r3, [r3, #6]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d110      	bne.n	80092f8 <USBD_StdItfReq+0x74>
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10d      	bne.n	80092f8 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 fd79 	bl	8009dd4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80092e2:	e009      	b.n	80092f8 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80092e4:	6839      	ldr	r1, [r7, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 fcab 	bl	8009c42 <USBD_CtlError>
          break;
 80092ec:	e004      	b.n	80092f8 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80092ee:	6839      	ldr	r1, [r7, #0]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fca6 	bl	8009c42 <USBD_CtlError>
          break;
 80092f6:	e000      	b.n	80092fa <USBD_StdItfReq+0x76>
          break;
 80092f8:	bf00      	nop
      }
      break;
 80092fa:	e004      	b.n	8009306 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80092fc:	6839      	ldr	r1, [r7, #0]
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 fc9f 	bl	8009c42 <USBD_CtlError>
      break;
 8009304:	bf00      	nop
  }

  return USBD_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800931a:	2300      	movs	r3, #0
 800931c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	889b      	ldrh	r3, [r3, #4]
 8009322:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800932c:	2b20      	cmp	r3, #32
 800932e:	d004      	beq.n	800933a <USBD_StdEPReq+0x2a>
 8009330:	2b40      	cmp	r3, #64	; 0x40
 8009332:	d002      	beq.n	800933a <USBD_StdEPReq+0x2a>
 8009334:	2b00      	cmp	r3, #0
 8009336:	d008      	beq.n	800934a <USBD_StdEPReq+0x3a>
 8009338:	e13d      	b.n	80095b6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	6839      	ldr	r1, [r7, #0]
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	4798      	blx	r3
      break;
 8009348:	e13a      	b.n	80095c0 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009352:	2b20      	cmp	r3, #32
 8009354:	d10a      	bne.n	800936c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	6839      	ldr	r1, [r7, #0]
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	4798      	blx	r3
 8009364:	4603      	mov	r3, r0
 8009366:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009368:	7bfb      	ldrb	r3, [r7, #15]
 800936a:	e12a      	b.n	80095c2 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	785b      	ldrb	r3, [r3, #1]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d03e      	beq.n	80093f2 <USBD_StdEPReq+0xe2>
 8009374:	2b03      	cmp	r3, #3
 8009376:	d002      	beq.n	800937e <USBD_StdEPReq+0x6e>
 8009378:	2b00      	cmp	r3, #0
 800937a:	d070      	beq.n	800945e <USBD_StdEPReq+0x14e>
 800937c:	e115      	b.n	80095aa <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009384:	2b02      	cmp	r3, #2
 8009386:	d002      	beq.n	800938e <USBD_StdEPReq+0x7e>
 8009388:	2b03      	cmp	r3, #3
 800938a:	d015      	beq.n	80093b8 <USBD_StdEPReq+0xa8>
 800938c:	e02b      	b.n	80093e6 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800938e:	7bbb      	ldrb	r3, [r7, #14]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00c      	beq.n	80093ae <USBD_StdEPReq+0x9e>
 8009394:	7bbb      	ldrb	r3, [r7, #14]
 8009396:	2b80      	cmp	r3, #128	; 0x80
 8009398:	d009      	beq.n	80093ae <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800939a:	7bbb      	ldrb	r3, [r7, #14]
 800939c:	4619      	mov	r1, r3
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f001 f914 	bl	800a5cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80093a4:	2180      	movs	r1, #128	; 0x80
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f001 f910 	bl	800a5cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093ac:	e020      	b.n	80093f0 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80093ae:	6839      	ldr	r1, [r7, #0]
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 fc46 	bl	8009c42 <USBD_CtlError>
              break;
 80093b6:	e01b      	b.n	80093f0 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	885b      	ldrh	r3, [r3, #2]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10e      	bne.n	80093de <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80093c0:	7bbb      	ldrb	r3, [r7, #14]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00b      	beq.n	80093de <USBD_StdEPReq+0xce>
 80093c6:	7bbb      	ldrb	r3, [r7, #14]
 80093c8:	2b80      	cmp	r3, #128	; 0x80
 80093ca:	d008      	beq.n	80093de <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	88db      	ldrh	r3, [r3, #6]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d104      	bne.n	80093de <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80093d4:	7bbb      	ldrb	r3, [r7, #14]
 80093d6:	4619      	mov	r1, r3
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f001 f8f7 	bl	800a5cc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fcf8 	bl	8009dd4 <USBD_CtlSendStatus>

              break;
 80093e4:	e004      	b.n	80093f0 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80093e6:	6839      	ldr	r1, [r7, #0]
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 fc2a 	bl	8009c42 <USBD_CtlError>
              break;
 80093ee:	bf00      	nop
          }
          break;
 80093f0:	e0e0      	b.n	80095b4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093f8:	2b02      	cmp	r3, #2
 80093fa:	d002      	beq.n	8009402 <USBD_StdEPReq+0xf2>
 80093fc:	2b03      	cmp	r3, #3
 80093fe:	d015      	beq.n	800942c <USBD_StdEPReq+0x11c>
 8009400:	e026      	b.n	8009450 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009402:	7bbb      	ldrb	r3, [r7, #14]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00c      	beq.n	8009422 <USBD_StdEPReq+0x112>
 8009408:	7bbb      	ldrb	r3, [r7, #14]
 800940a:	2b80      	cmp	r3, #128	; 0x80
 800940c:	d009      	beq.n	8009422 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800940e:	7bbb      	ldrb	r3, [r7, #14]
 8009410:	4619      	mov	r1, r3
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f001 f8da 	bl	800a5cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009418:	2180      	movs	r1, #128	; 0x80
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f001 f8d6 	bl	800a5cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009420:	e01c      	b.n	800945c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8009422:	6839      	ldr	r1, [r7, #0]
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 fc0c 	bl	8009c42 <USBD_CtlError>
              break;
 800942a:	e017      	b.n	800945c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	885b      	ldrh	r3, [r3, #2]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d112      	bne.n	800945a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009434:	7bbb      	ldrb	r3, [r7, #14]
 8009436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800943a:	2b00      	cmp	r3, #0
 800943c:	d004      	beq.n	8009448 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800943e:	7bbb      	ldrb	r3, [r7, #14]
 8009440:	4619      	mov	r1, r3
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f001 f8f8 	bl	800a638 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 fcc3 	bl	8009dd4 <USBD_CtlSendStatus>
              }
              break;
 800944e:	e004      	b.n	800945a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8009450:	6839      	ldr	r1, [r7, #0]
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 fbf5 	bl	8009c42 <USBD_CtlError>
              break;
 8009458:	e000      	b.n	800945c <USBD_StdEPReq+0x14c>
              break;
 800945a:	bf00      	nop
          }
          break;
 800945c:	e0aa      	b.n	80095b4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009464:	2b02      	cmp	r3, #2
 8009466:	d002      	beq.n	800946e <USBD_StdEPReq+0x15e>
 8009468:	2b03      	cmp	r3, #3
 800946a:	d032      	beq.n	80094d2 <USBD_StdEPReq+0x1c2>
 800946c:	e097      	b.n	800959e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800946e:	7bbb      	ldrb	r3, [r7, #14]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d007      	beq.n	8009484 <USBD_StdEPReq+0x174>
 8009474:	7bbb      	ldrb	r3, [r7, #14]
 8009476:	2b80      	cmp	r3, #128	; 0x80
 8009478:	d004      	beq.n	8009484 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800947a:	6839      	ldr	r1, [r7, #0]
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fbe0 	bl	8009c42 <USBD_CtlError>
                break;
 8009482:	e091      	b.n	80095a8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009484:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009488:	2b00      	cmp	r3, #0
 800948a:	da0b      	bge.n	80094a4 <USBD_StdEPReq+0x194>
 800948c:	7bbb      	ldrb	r3, [r7, #14]
 800948e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009492:	4613      	mov	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	4413      	add	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	3310      	adds	r3, #16
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	4413      	add	r3, r2
 80094a0:	3304      	adds	r3, #4
 80094a2:	e00b      	b.n	80094bc <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094a4:	7bbb      	ldrb	r3, [r7, #14]
 80094a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094aa:	4613      	mov	r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	4413      	add	r3, r2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	4413      	add	r3, r2
 80094ba:	3304      	adds	r3, #4
 80094bc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	2200      	movs	r2, #0
 80094c2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	2202      	movs	r2, #2
 80094c8:	4619      	mov	r1, r3
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 fc24 	bl	8009d18 <USBD_CtlSendData>
              break;
 80094d0:	e06a      	b.n	80095a8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80094d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	da11      	bge.n	80094fe <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80094da:	7bbb      	ldrb	r3, [r7, #14]
 80094dc:	f003 020f 	and.w	r2, r3, #15
 80094e0:	6879      	ldr	r1, [r7, #4]
 80094e2:	4613      	mov	r3, r2
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	4413      	add	r3, r2
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	440b      	add	r3, r1
 80094ec:	3318      	adds	r3, #24
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d117      	bne.n	8009524 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80094f4:	6839      	ldr	r1, [r7, #0]
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fba3 	bl	8009c42 <USBD_CtlError>
                  break;
 80094fc:	e054      	b.n	80095a8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80094fe:	7bbb      	ldrb	r3, [r7, #14]
 8009500:	f003 020f 	and.w	r2, r3, #15
 8009504:	6879      	ldr	r1, [r7, #4]
 8009506:	4613      	mov	r3, r2
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	4413      	add	r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	440b      	add	r3, r1
 8009510:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d104      	bne.n	8009524 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800951a:	6839      	ldr	r1, [r7, #0]
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fb90 	bl	8009c42 <USBD_CtlError>
                  break;
 8009522:	e041      	b.n	80095a8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009524:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009528:	2b00      	cmp	r3, #0
 800952a:	da0b      	bge.n	8009544 <USBD_StdEPReq+0x234>
 800952c:	7bbb      	ldrb	r3, [r7, #14]
 800952e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009532:	4613      	mov	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4413      	add	r3, r2
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	3310      	adds	r3, #16
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	4413      	add	r3, r2
 8009540:	3304      	adds	r3, #4
 8009542:	e00b      	b.n	800955c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009544:	7bbb      	ldrb	r3, [r7, #14]
 8009546:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800954a:	4613      	mov	r3, r2
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	4413      	add	r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	4413      	add	r3, r2
 800955a:	3304      	adds	r3, #4
 800955c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800955e:	7bbb      	ldrb	r3, [r7, #14]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d002      	beq.n	800956a <USBD_StdEPReq+0x25a>
 8009564:	7bbb      	ldrb	r3, [r7, #14]
 8009566:	2b80      	cmp	r3, #128	; 0x80
 8009568:	d103      	bne.n	8009572 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	2200      	movs	r2, #0
 800956e:	601a      	str	r2, [r3, #0]
 8009570:	e00e      	b.n	8009590 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009572:	7bbb      	ldrb	r3, [r7, #14]
 8009574:	4619      	mov	r1, r3
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f001 f894 	bl	800a6a4 <USBD_LL_IsStallEP>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d003      	beq.n	800958a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	2201      	movs	r2, #1
 8009586:	601a      	str	r2, [r3, #0]
 8009588:	e002      	b.n	8009590 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	2200      	movs	r2, #0
 800958e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	2202      	movs	r2, #2
 8009594:	4619      	mov	r1, r3
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 fbbe 	bl	8009d18 <USBD_CtlSendData>
              break;
 800959c:	e004      	b.n	80095a8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800959e:	6839      	ldr	r1, [r7, #0]
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 fb4e 	bl	8009c42 <USBD_CtlError>
              break;
 80095a6:	bf00      	nop
          }
          break;
 80095a8:	e004      	b.n	80095b4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80095aa:	6839      	ldr	r1, [r7, #0]
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fb48 	bl	8009c42 <USBD_CtlError>
          break;
 80095b2:	bf00      	nop
      }
      break;
 80095b4:	e004      	b.n	80095c0 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80095b6:	6839      	ldr	r1, [r7, #0]
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 fb42 	bl	8009c42 <USBD_CtlError>
      break;
 80095be:	bf00      	nop
  }

  return ret;
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
	...

080095cc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095d6:	2300      	movs	r3, #0
 80095d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80095da:	2300      	movs	r3, #0
 80095dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80095de:	2300      	movs	r3, #0
 80095e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	885b      	ldrh	r3, [r3, #2]
 80095e6:	0a1b      	lsrs	r3, r3, #8
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	3b01      	subs	r3, #1
 80095ec:	2b0e      	cmp	r3, #14
 80095ee:	f200 8152 	bhi.w	8009896 <USBD_GetDescriptor+0x2ca>
 80095f2:	a201      	add	r2, pc, #4	; (adr r2, 80095f8 <USBD_GetDescriptor+0x2c>)
 80095f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f8:	08009669 	.word	0x08009669
 80095fc:	08009681 	.word	0x08009681
 8009600:	080096c1 	.word	0x080096c1
 8009604:	08009897 	.word	0x08009897
 8009608:	08009897 	.word	0x08009897
 800960c:	08009837 	.word	0x08009837
 8009610:	08009863 	.word	0x08009863
 8009614:	08009897 	.word	0x08009897
 8009618:	08009897 	.word	0x08009897
 800961c:	08009897 	.word	0x08009897
 8009620:	08009897 	.word	0x08009897
 8009624:	08009897 	.word	0x08009897
 8009628:	08009897 	.word	0x08009897
 800962c:	08009897 	.word	0x08009897
 8009630:	08009635 	.word	0x08009635
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800963a:	69db      	ldr	r3, [r3, #28]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d00b      	beq.n	8009658 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009646:	69db      	ldr	r3, [r3, #28]
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	7c12      	ldrb	r2, [r2, #16]
 800964c:	f107 0108 	add.w	r1, r7, #8
 8009650:	4610      	mov	r0, r2
 8009652:	4798      	blx	r3
 8009654:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009656:	e126      	b.n	80098a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009658:	6839      	ldr	r1, [r7, #0]
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 faf1 	bl	8009c42 <USBD_CtlError>
        err++;
 8009660:	7afb      	ldrb	r3, [r7, #11]
 8009662:	3301      	adds	r3, #1
 8009664:	72fb      	strb	r3, [r7, #11]
      break;
 8009666:	e11e      	b.n	80098a6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	7c12      	ldrb	r2, [r2, #16]
 8009674:	f107 0108 	add.w	r1, r7, #8
 8009678:	4610      	mov	r0, r2
 800967a:	4798      	blx	r3
 800967c:	60f8      	str	r0, [r7, #12]
      break;
 800967e:	e112      	b.n	80098a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	7c1b      	ldrb	r3, [r3, #16]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d10d      	bne.n	80096a4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800968e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009690:	f107 0208 	add.w	r2, r7, #8
 8009694:	4610      	mov	r0, r2
 8009696:	4798      	blx	r3
 8009698:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	3301      	adds	r3, #1
 800969e:	2202      	movs	r2, #2
 80096a0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80096a2:	e100      	b.n	80098a6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ac:	f107 0208 	add.w	r2, r7, #8
 80096b0:	4610      	mov	r0, r2
 80096b2:	4798      	blx	r3
 80096b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	3301      	adds	r3, #1
 80096ba:	2202      	movs	r2, #2
 80096bc:	701a      	strb	r2, [r3, #0]
      break;
 80096be:	e0f2      	b.n	80098a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	885b      	ldrh	r3, [r3, #2]
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	2b05      	cmp	r3, #5
 80096c8:	f200 80ac 	bhi.w	8009824 <USBD_GetDescriptor+0x258>
 80096cc:	a201      	add	r2, pc, #4	; (adr r2, 80096d4 <USBD_GetDescriptor+0x108>)
 80096ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d2:	bf00      	nop
 80096d4:	080096ed 	.word	0x080096ed
 80096d8:	08009721 	.word	0x08009721
 80096dc:	08009755 	.word	0x08009755
 80096e0:	08009789 	.word	0x08009789
 80096e4:	080097bd 	.word	0x080097bd
 80096e8:	080097f1 	.word	0x080097f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d00b      	beq.n	8009710 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	7c12      	ldrb	r2, [r2, #16]
 8009704:	f107 0108 	add.w	r1, r7, #8
 8009708:	4610      	mov	r0, r2
 800970a:	4798      	blx	r3
 800970c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800970e:	e091      	b.n	8009834 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009710:	6839      	ldr	r1, [r7, #0]
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 fa95 	bl	8009c42 <USBD_CtlError>
            err++;
 8009718:	7afb      	ldrb	r3, [r7, #11]
 800971a:	3301      	adds	r3, #1
 800971c:	72fb      	strb	r3, [r7, #11]
          break;
 800971e:	e089      	b.n	8009834 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00b      	beq.n	8009744 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	7c12      	ldrb	r2, [r2, #16]
 8009738:	f107 0108 	add.w	r1, r7, #8
 800973c:	4610      	mov	r0, r2
 800973e:	4798      	blx	r3
 8009740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009742:	e077      	b.n	8009834 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009744:	6839      	ldr	r1, [r7, #0]
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 fa7b 	bl	8009c42 <USBD_CtlError>
            err++;
 800974c:	7afb      	ldrb	r3, [r7, #11]
 800974e:	3301      	adds	r3, #1
 8009750:	72fb      	strb	r3, [r7, #11]
          break;
 8009752:	e06f      	b.n	8009834 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00b      	beq.n	8009778 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	7c12      	ldrb	r2, [r2, #16]
 800976c:	f107 0108 	add.w	r1, r7, #8
 8009770:	4610      	mov	r0, r2
 8009772:	4798      	blx	r3
 8009774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009776:	e05d      	b.n	8009834 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009778:	6839      	ldr	r1, [r7, #0]
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 fa61 	bl	8009c42 <USBD_CtlError>
            err++;
 8009780:	7afb      	ldrb	r3, [r7, #11]
 8009782:	3301      	adds	r3, #1
 8009784:	72fb      	strb	r3, [r7, #11]
          break;
 8009786:	e055      	b.n	8009834 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d00b      	beq.n	80097ac <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800979a:	691b      	ldr	r3, [r3, #16]
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	7c12      	ldrb	r2, [r2, #16]
 80097a0:	f107 0108 	add.w	r1, r7, #8
 80097a4:	4610      	mov	r0, r2
 80097a6:	4798      	blx	r3
 80097a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097aa:	e043      	b.n	8009834 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80097ac:	6839      	ldr	r1, [r7, #0]
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fa47 	bl	8009c42 <USBD_CtlError>
            err++;
 80097b4:	7afb      	ldrb	r3, [r7, #11]
 80097b6:	3301      	adds	r3, #1
 80097b8:	72fb      	strb	r3, [r7, #11]
          break;
 80097ba:	e03b      	b.n	8009834 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097c2:	695b      	ldr	r3, [r3, #20]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d00b      	beq.n	80097e0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097ce:	695b      	ldr	r3, [r3, #20]
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	7c12      	ldrb	r2, [r2, #16]
 80097d4:	f107 0108 	add.w	r1, r7, #8
 80097d8:	4610      	mov	r0, r2
 80097da:	4798      	blx	r3
 80097dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097de:	e029      	b.n	8009834 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80097e0:	6839      	ldr	r1, [r7, #0]
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 fa2d 	bl	8009c42 <USBD_CtlError>
            err++;
 80097e8:	7afb      	ldrb	r3, [r7, #11]
 80097ea:	3301      	adds	r3, #1
 80097ec:	72fb      	strb	r3, [r7, #11]
          break;
 80097ee:	e021      	b.n	8009834 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097f6:	699b      	ldr	r3, [r3, #24]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d00b      	beq.n	8009814 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009802:	699b      	ldr	r3, [r3, #24]
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	7c12      	ldrb	r2, [r2, #16]
 8009808:	f107 0108 	add.w	r1, r7, #8
 800980c:	4610      	mov	r0, r2
 800980e:	4798      	blx	r3
 8009810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009812:	e00f      	b.n	8009834 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009814:	6839      	ldr	r1, [r7, #0]
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 fa13 	bl	8009c42 <USBD_CtlError>
            err++;
 800981c:	7afb      	ldrb	r3, [r7, #11]
 800981e:	3301      	adds	r3, #1
 8009820:	72fb      	strb	r3, [r7, #11]
          break;
 8009822:	e007      	b.n	8009834 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009824:	6839      	ldr	r1, [r7, #0]
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 fa0b 	bl	8009c42 <USBD_CtlError>
          err++;
 800982c:	7afb      	ldrb	r3, [r7, #11]
 800982e:	3301      	adds	r3, #1
 8009830:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009832:	e038      	b.n	80098a6 <USBD_GetDescriptor+0x2da>
 8009834:	e037      	b.n	80098a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	7c1b      	ldrb	r3, [r3, #16]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d109      	bne.n	8009852 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009846:	f107 0208 	add.w	r2, r7, #8
 800984a:	4610      	mov	r0, r2
 800984c:	4798      	blx	r3
 800984e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009850:	e029      	b.n	80098a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009852:	6839      	ldr	r1, [r7, #0]
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 f9f4 	bl	8009c42 <USBD_CtlError>
        err++;
 800985a:	7afb      	ldrb	r3, [r7, #11]
 800985c:	3301      	adds	r3, #1
 800985e:	72fb      	strb	r3, [r7, #11]
      break;
 8009860:	e021      	b.n	80098a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	7c1b      	ldrb	r3, [r3, #16]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d10d      	bne.n	8009886 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009872:	f107 0208 	add.w	r2, r7, #8
 8009876:	4610      	mov	r0, r2
 8009878:	4798      	blx	r3
 800987a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	3301      	adds	r3, #1
 8009880:	2207      	movs	r2, #7
 8009882:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009884:	e00f      	b.n	80098a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009886:	6839      	ldr	r1, [r7, #0]
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 f9da 	bl	8009c42 <USBD_CtlError>
        err++;
 800988e:	7afb      	ldrb	r3, [r7, #11]
 8009890:	3301      	adds	r3, #1
 8009892:	72fb      	strb	r3, [r7, #11]
      break;
 8009894:	e007      	b.n	80098a6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009896:	6839      	ldr	r1, [r7, #0]
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 f9d2 	bl	8009c42 <USBD_CtlError>
      err++;
 800989e:	7afb      	ldrb	r3, [r7, #11]
 80098a0:	3301      	adds	r3, #1
 80098a2:	72fb      	strb	r3, [r7, #11]
      break;
 80098a4:	bf00      	nop
  }

  if (err != 0U)
 80098a6:	7afb      	ldrb	r3, [r7, #11]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d11c      	bne.n	80098e6 <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80098ac:	893b      	ldrh	r3, [r7, #8]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d011      	beq.n	80098d6 <USBD_GetDescriptor+0x30a>
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	88db      	ldrh	r3, [r3, #6]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00d      	beq.n	80098d6 <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	88da      	ldrh	r2, [r3, #6]
 80098be:	893b      	ldrh	r3, [r7, #8]
 80098c0:	4293      	cmp	r3, r2
 80098c2:	bf28      	it	cs
 80098c4:	4613      	movcs	r3, r2
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80098ca:	893b      	ldrh	r3, [r7, #8]
 80098cc:	461a      	mov	r2, r3
 80098ce:	68f9      	ldr	r1, [r7, #12]
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 fa21 	bl	8009d18 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	88db      	ldrh	r3, [r3, #6]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d104      	bne.n	80098e8 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 fa78 	bl	8009dd4 <USBD_CtlSendStatus>
 80098e4:	e000      	b.n	80098e8 <USBD_GetDescriptor+0x31c>
    return;
 80098e6:	bf00      	nop
    }
  }
}
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop

080098f0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	889b      	ldrh	r3, [r3, #4]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d130      	bne.n	8009964 <USBD_SetAddress+0x74>
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	88db      	ldrh	r3, [r3, #6]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d12c      	bne.n	8009964 <USBD_SetAddress+0x74>
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	885b      	ldrh	r3, [r3, #2]
 800990e:	2b7f      	cmp	r3, #127	; 0x7f
 8009910:	d828      	bhi.n	8009964 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	885b      	ldrh	r3, [r3, #2]
 8009916:	b2db      	uxtb	r3, r3
 8009918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800991c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009924:	2b03      	cmp	r3, #3
 8009926:	d104      	bne.n	8009932 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009928:	6839      	ldr	r1, [r7, #0]
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 f989 	bl	8009c42 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009930:	e01c      	b.n	800996c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	7bfa      	ldrb	r2, [r7, #15]
 8009936:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800993a:	7bfb      	ldrb	r3, [r7, #15]
 800993c:	4619      	mov	r1, r3
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 fed6 	bl	800a6f0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 fa45 	bl	8009dd4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800994a:	7bfb      	ldrb	r3, [r7, #15]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d004      	beq.n	800995a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2202      	movs	r2, #2
 8009954:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009958:	e008      	b.n	800996c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2201      	movs	r2, #1
 800995e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009962:	e003      	b.n	800996c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009964:	6839      	ldr	r1, [r7, #0]
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 f96b 	bl	8009c42 <USBD_CtlError>
  }
}
 800996c:	bf00      	nop
 800996e:	3710      	adds	r7, #16
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	885b      	ldrh	r3, [r3, #2]
 8009982:	b2da      	uxtb	r2, r3
 8009984:	4b41      	ldr	r3, [pc, #260]	; (8009a8c <USBD_SetConfig+0x118>)
 8009986:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009988:	4b40      	ldr	r3, [pc, #256]	; (8009a8c <USBD_SetConfig+0x118>)
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	2b01      	cmp	r3, #1
 800998e:	d904      	bls.n	800999a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f955 	bl	8009c42 <USBD_CtlError>
 8009998:	e075      	b.n	8009a86 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	d002      	beq.n	80099aa <USBD_SetConfig+0x36>
 80099a4:	2b03      	cmp	r3, #3
 80099a6:	d023      	beq.n	80099f0 <USBD_SetConfig+0x7c>
 80099a8:	e062      	b.n	8009a70 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80099aa:	4b38      	ldr	r3, [pc, #224]	; (8009a8c <USBD_SetConfig+0x118>)
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d01a      	beq.n	80099e8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80099b2:	4b36      	ldr	r3, [pc, #216]	; (8009a8c <USBD_SetConfig+0x118>)
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	461a      	mov	r2, r3
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2203      	movs	r2, #3
 80099c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80099c4:	4b31      	ldr	r3, [pc, #196]	; (8009a8c <USBD_SetConfig+0x118>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	4619      	mov	r1, r3
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7ff f9c7 	bl	8008d5e <USBD_SetClassConfig>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d104      	bne.n	80099e0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80099d6:	6839      	ldr	r1, [r7, #0]
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 f932 	bl	8009c42 <USBD_CtlError>
            return;
 80099de:	e052      	b.n	8009a86 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 f9f7 	bl	8009dd4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80099e6:	e04e      	b.n	8009a86 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 f9f3 	bl	8009dd4 <USBD_CtlSendStatus>
        break;
 80099ee:	e04a      	b.n	8009a86 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80099f0:	4b26      	ldr	r3, [pc, #152]	; (8009a8c <USBD_SetConfig+0x118>)
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d112      	bne.n	8009a1e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2202      	movs	r2, #2
 80099fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009a00:	4b22      	ldr	r3, [pc, #136]	; (8009a8c <USBD_SetConfig+0x118>)
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	461a      	mov	r2, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009a0a:	4b20      	ldr	r3, [pc, #128]	; (8009a8c <USBD_SetConfig+0x118>)
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	4619      	mov	r1, r3
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f7ff f9c3 	bl	8008d9c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 f9dc 	bl	8009dd4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009a1c:	e033      	b.n	8009a86 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009a1e:	4b1b      	ldr	r3, [pc, #108]	; (8009a8c <USBD_SetConfig+0x118>)
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	461a      	mov	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d01d      	beq.n	8009a68 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	4619      	mov	r1, r3
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f7ff f9b1 	bl	8008d9c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009a3a:	4b14      	ldr	r3, [pc, #80]	; (8009a8c <USBD_SetConfig+0x118>)
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	461a      	mov	r2, r3
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009a44:	4b11      	ldr	r3, [pc, #68]	; (8009a8c <USBD_SetConfig+0x118>)
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	4619      	mov	r1, r3
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f7ff f987 	bl	8008d5e <USBD_SetClassConfig>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b02      	cmp	r3, #2
 8009a54:	d104      	bne.n	8009a60 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009a56:	6839      	ldr	r1, [r7, #0]
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 f8f2 	bl	8009c42 <USBD_CtlError>
            return;
 8009a5e:	e012      	b.n	8009a86 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 f9b7 	bl	8009dd4 <USBD_CtlSendStatus>
        break;
 8009a66:	e00e      	b.n	8009a86 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 f9b3 	bl	8009dd4 <USBD_CtlSendStatus>
        break;
 8009a6e:	e00a      	b.n	8009a86 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009a70:	6839      	ldr	r1, [r7, #0]
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 f8e5 	bl	8009c42 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009a78:	4b04      	ldr	r3, [pc, #16]	; (8009a8c <USBD_SetConfig+0x118>)
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f7ff f98c 	bl	8008d9c <USBD_ClrClassConfig>
        break;
 8009a84:	bf00      	nop
    }
  }
}
 8009a86:	3708      	adds	r7, #8
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	2000045d 	.word	0x2000045d

08009a90 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	88db      	ldrh	r3, [r3, #6]
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d004      	beq.n	8009aac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009aa2:	6839      	ldr	r1, [r7, #0]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 f8cc 	bl	8009c42 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009aaa:	e021      	b.n	8009af0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	db17      	blt.n	8009ae6 <USBD_GetConfig+0x56>
 8009ab6:	2b02      	cmp	r3, #2
 8009ab8:	dd02      	ble.n	8009ac0 <USBD_GetConfig+0x30>
 8009aba:	2b03      	cmp	r3, #3
 8009abc:	d00b      	beq.n	8009ad6 <USBD_GetConfig+0x46>
 8009abe:	e012      	b.n	8009ae6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	3308      	adds	r3, #8
 8009aca:	2201      	movs	r2, #1
 8009acc:	4619      	mov	r1, r3
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f922 	bl	8009d18 <USBD_CtlSendData>
        break;
 8009ad4:	e00c      	b.n	8009af0 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	3304      	adds	r3, #4
 8009ada:	2201      	movs	r2, #1
 8009adc:	4619      	mov	r1, r3
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 f91a 	bl	8009d18 <USBD_CtlSendData>
        break;
 8009ae4:	e004      	b.n	8009af0 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8009ae6:	6839      	ldr	r1, [r7, #0]
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 f8aa 	bl	8009c42 <USBD_CtlError>
        break;
 8009aee:	bf00      	nop
}
 8009af0:	bf00      	nop
 8009af2:	3708      	adds	r7, #8
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	d81e      	bhi.n	8009b4c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	88db      	ldrh	r3, [r3, #6]
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d004      	beq.n	8009b20 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009b16:	6839      	ldr	r1, [r7, #0]
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 f892 	bl	8009c42 <USBD_CtlError>
        break;
 8009b1e:	e01a      	b.n	8009b56 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d005      	beq.n	8009b3c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	f043 0202 	orr.w	r2, r3, #2
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	330c      	adds	r3, #12
 8009b40:	2202      	movs	r2, #2
 8009b42:	4619      	mov	r1, r3
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 f8e7 	bl	8009d18 <USBD_CtlSendData>
      break;
 8009b4a:	e004      	b.n	8009b56 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009b4c:	6839      	ldr	r1, [r7, #0]
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f877 	bl	8009c42 <USBD_CtlError>
      break;
 8009b54:	bf00      	nop
  }
}
 8009b56:	bf00      	nop
 8009b58:	3708      	adds	r7, #8
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b082      	sub	sp, #8
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
 8009b66:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	885b      	ldrh	r3, [r3, #2]
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d106      	bne.n	8009b7e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 f92b 	bl	8009dd4 <USBD_CtlSendStatus>
  }
}
 8009b7e:	bf00      	nop
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b082      	sub	sp, #8
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
 8009b8e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b96:	3b01      	subs	r3, #1
 8009b98:	2b02      	cmp	r3, #2
 8009b9a:	d80b      	bhi.n	8009bb4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	885b      	ldrh	r3, [r3, #2]
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d10c      	bne.n	8009bbe <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 f911 	bl	8009dd4 <USBD_CtlSendStatus>
      }
      break;
 8009bb2:	e004      	b.n	8009bbe <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009bb4:	6839      	ldr	r1, [r7, #0]
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f843 	bl	8009c42 <USBD_CtlError>
      break;
 8009bbc:	e000      	b.n	8009bc0 <USBD_ClrFeature+0x3a>
      break;
 8009bbe:	bf00      	nop
  }
}
 8009bc0:	bf00      	nop
 8009bc2:	3708      	adds	r7, #8
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	781a      	ldrb	r2, [r3, #0]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	785a      	ldrb	r2, [r3, #1]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	3302      	adds	r3, #2
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	b29a      	uxth	r2, r3
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	3303      	adds	r3, #3
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	021b      	lsls	r3, r3, #8
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	4413      	add	r3, r2
 8009bf8:	b29a      	uxth	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	3304      	adds	r3, #4
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	b29a      	uxth	r2, r3
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	3305      	adds	r3, #5
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	021b      	lsls	r3, r3, #8
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	4413      	add	r3, r2
 8009c14:	b29a      	uxth	r2, r3
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	3306      	adds	r3, #6
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	b29a      	uxth	r2, r3
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	3307      	adds	r3, #7
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	021b      	lsls	r3, r3, #8
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	4413      	add	r3, r2
 8009c30:	b29a      	uxth	r2, r3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	80da      	strh	r2, [r3, #6]

}
 8009c36:	bf00      	nop
 8009c38:	370c      	adds	r7, #12
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr

08009c42 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b082      	sub	sp, #8
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009c4c:	2180      	movs	r1, #128	; 0x80
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 fcbc 	bl	800a5cc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009c54:	2100      	movs	r1, #0
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 fcb8 	bl	800a5cc <USBD_LL_StallEP>
}
 8009c5c:	bf00      	nop
 8009c5e:	3708      	adds	r7, #8
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b086      	sub	sp, #24
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009c70:	2300      	movs	r3, #0
 8009c72:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d032      	beq.n	8009ce0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009c7a:	68f8      	ldr	r0, [r7, #12]
 8009c7c:	f000 f834 	bl	8009ce8 <USBD_GetLen>
 8009c80:	4603      	mov	r3, r0
 8009c82:	3301      	adds	r3, #1
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	005b      	lsls	r3, r3, #1
 8009c88:	b29a      	uxth	r2, r3
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009c8e:	7dfb      	ldrb	r3, [r7, #23]
 8009c90:	1c5a      	adds	r2, r3, #1
 8009c92:	75fa      	strb	r2, [r7, #23]
 8009c94:	461a      	mov	r2, r3
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	4413      	add	r3, r2
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	7812      	ldrb	r2, [r2, #0]
 8009c9e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009ca0:	7dfb      	ldrb	r3, [r7, #23]
 8009ca2:	1c5a      	adds	r2, r3, #1
 8009ca4:	75fa      	strb	r2, [r7, #23]
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	4413      	add	r3, r2
 8009cac:	2203      	movs	r2, #3
 8009cae:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009cb0:	e012      	b.n	8009cd8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	1c5a      	adds	r2, r3, #1
 8009cb6:	60fa      	str	r2, [r7, #12]
 8009cb8:	7dfa      	ldrb	r2, [r7, #23]
 8009cba:	1c51      	adds	r1, r2, #1
 8009cbc:	75f9      	strb	r1, [r7, #23]
 8009cbe:	4611      	mov	r1, r2
 8009cc0:	68ba      	ldr	r2, [r7, #8]
 8009cc2:	440a      	add	r2, r1
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009cc8:	7dfb      	ldrb	r3, [r7, #23]
 8009cca:	1c5a      	adds	r2, r3, #1
 8009ccc:	75fa      	strb	r2, [r7, #23]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	4413      	add	r3, r2
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d1e8      	bne.n	8009cb2 <USBD_GetString+0x4e>
    }
  }
}
 8009ce0:	bf00      	nop
 8009ce2:	3718      	adds	r7, #24
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009cf4:	e005      	b.n	8009d02 <USBD_GetLen+0x1a>
  {
    len++;
 8009cf6:	7bfb      	ldrb	r3, [r7, #15]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1f5      	bne.n	8009cf6 <USBD_GetLen+0xe>
  }

  return len;
 8009d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3714      	adds	r7, #20
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	4613      	mov	r3, r2
 8009d24:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2202      	movs	r2, #2
 8009d2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009d2e:	88fa      	ldrh	r2, [r7, #6]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009d34:	88fa      	ldrh	r2, [r7, #6]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d3a:	88fb      	ldrh	r3, [r7, #6]
 8009d3c:	68ba      	ldr	r2, [r7, #8]
 8009d3e:	2100      	movs	r1, #0
 8009d40:	68f8      	ldr	r0, [r7, #12]
 8009d42:	f000 fd0b 	bl	800a75c <USBD_LL_Transmit>

  return USBD_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3710      	adds	r7, #16
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d5e:	88fb      	ldrh	r3, [r7, #6]
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	2100      	movs	r1, #0
 8009d64:	68f8      	ldr	r0, [r7, #12]
 8009d66:	f000 fcf9 	bl	800a75c <USBD_LL_Transmit>

  return USBD_OK;
 8009d6a:	2300      	movs	r3, #0
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	4613      	mov	r3, r2
 8009d80:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2203      	movs	r2, #3
 8009d86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009d8a:	88fa      	ldrh	r2, [r7, #6]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009d92:	88fa      	ldrh	r2, [r7, #6]
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d9a:	88fb      	ldrh	r3, [r7, #6]
 8009d9c:	68ba      	ldr	r2, [r7, #8]
 8009d9e:	2100      	movs	r1, #0
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f000 fd15 	bl	800a7d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	4613      	mov	r3, r2
 8009dbc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009dbe:	88fb      	ldrh	r3, [r7, #6]
 8009dc0:	68ba      	ldr	r2, [r7, #8]
 8009dc2:	2100      	movs	r1, #0
 8009dc4:	68f8      	ldr	r0, [r7, #12]
 8009dc6:	f000 fd03 	bl	800a7d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2204      	movs	r2, #4
 8009de0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009de4:	2300      	movs	r3, #0
 8009de6:	2200      	movs	r2, #0
 8009de8:	2100      	movs	r1, #0
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 fcb6 	bl	800a75c <USBD_LL_Transmit>

  return USBD_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3708      	adds	r7, #8
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b082      	sub	sp, #8
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2205      	movs	r2, #5
 8009e06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	2100      	movs	r1, #0
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 fcdd 	bl	800a7d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e16:	2300      	movs	r3, #0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3708      	adds	r7, #8
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009e24:	2200      	movs	r2, #0
 8009e26:	4912      	ldr	r1, [pc, #72]	; (8009e70 <MX_USB_DEVICE_Init+0x50>)
 8009e28:	4812      	ldr	r0, [pc, #72]	; (8009e74 <MX_USB_DEVICE_Init+0x54>)
 8009e2a:	f7fe ff3c 	bl	8008ca6 <USBD_Init>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d001      	beq.n	8009e38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009e34:	f7f8 f932 	bl	800209c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009e38:	490f      	ldr	r1, [pc, #60]	; (8009e78 <MX_USB_DEVICE_Init+0x58>)
 8009e3a:	480e      	ldr	r0, [pc, #56]	; (8009e74 <MX_USB_DEVICE_Init+0x54>)
 8009e3c:	f7fe ff5e 	bl	8008cfc <USBD_RegisterClass>
 8009e40:	4603      	mov	r3, r0
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d001      	beq.n	8009e4a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009e46:	f7f8 f929 	bl	800209c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009e4a:	490c      	ldr	r1, [pc, #48]	; (8009e7c <MX_USB_DEVICE_Init+0x5c>)
 8009e4c:	4809      	ldr	r0, [pc, #36]	; (8009e74 <MX_USB_DEVICE_Init+0x54>)
 8009e4e:	f7fe febb 	bl	8008bc8 <USBD_CDC_RegisterInterface>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d001      	beq.n	8009e5c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009e58:	f7f8 f920 	bl	800209c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009e5c:	4805      	ldr	r0, [pc, #20]	; (8009e74 <MX_USB_DEVICE_Init+0x54>)
 8009e5e:	f7fe ff67 	bl	8008d30 <USBD_Start>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d001      	beq.n	8009e6c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009e68:	f7f8 f918 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009e6c:	bf00      	nop
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	2000012c 	.word	0x2000012c
 8009e74:	200007b4 	.word	0x200007b4
 8009e78:	20000018 	.word	0x20000018
 8009e7c:	2000011c 	.word	0x2000011c

08009e80 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009e84:	2200      	movs	r2, #0
 8009e86:	4905      	ldr	r1, [pc, #20]	; (8009e9c <CDC_Init_FS+0x1c>)
 8009e88:	4805      	ldr	r0, [pc, #20]	; (8009ea0 <CDC_Init_FS+0x20>)
 8009e8a:	f7fe feb4 	bl	8008bf6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009e8e:	4905      	ldr	r1, [pc, #20]	; (8009ea4 <CDC_Init_FS+0x24>)
 8009e90:	4803      	ldr	r0, [pc, #12]	; (8009ea0 <CDC_Init_FS+0x20>)
 8009e92:	f7fe feca 	bl	8008c2a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009e96:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	20000e60 	.word	0x20000e60
 8009ea0:	200007b4 	.word	0x200007b4
 8009ea4:	20000a78 	.word	0x20000a78

08009ea8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009eac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr

08009eb8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	6039      	str	r1, [r7, #0]
 8009ec2:	71fb      	strb	r3, [r7, #7]
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009ec8:	79fb      	ldrb	r3, [r7, #7]
 8009eca:	2b23      	cmp	r3, #35	; 0x23
 8009ecc:	d84a      	bhi.n	8009f64 <CDC_Control_FS+0xac>
 8009ece:	a201      	add	r2, pc, #4	; (adr r2, 8009ed4 <CDC_Control_FS+0x1c>)
 8009ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed4:	08009f65 	.word	0x08009f65
 8009ed8:	08009f65 	.word	0x08009f65
 8009edc:	08009f65 	.word	0x08009f65
 8009ee0:	08009f65 	.word	0x08009f65
 8009ee4:	08009f65 	.word	0x08009f65
 8009ee8:	08009f65 	.word	0x08009f65
 8009eec:	08009f65 	.word	0x08009f65
 8009ef0:	08009f65 	.word	0x08009f65
 8009ef4:	08009f65 	.word	0x08009f65
 8009ef8:	08009f65 	.word	0x08009f65
 8009efc:	08009f65 	.word	0x08009f65
 8009f00:	08009f65 	.word	0x08009f65
 8009f04:	08009f65 	.word	0x08009f65
 8009f08:	08009f65 	.word	0x08009f65
 8009f0c:	08009f65 	.word	0x08009f65
 8009f10:	08009f65 	.word	0x08009f65
 8009f14:	08009f65 	.word	0x08009f65
 8009f18:	08009f65 	.word	0x08009f65
 8009f1c:	08009f65 	.word	0x08009f65
 8009f20:	08009f65 	.word	0x08009f65
 8009f24:	08009f65 	.word	0x08009f65
 8009f28:	08009f65 	.word	0x08009f65
 8009f2c:	08009f65 	.word	0x08009f65
 8009f30:	08009f65 	.word	0x08009f65
 8009f34:	08009f65 	.word	0x08009f65
 8009f38:	08009f65 	.word	0x08009f65
 8009f3c:	08009f65 	.word	0x08009f65
 8009f40:	08009f65 	.word	0x08009f65
 8009f44:	08009f65 	.word	0x08009f65
 8009f48:	08009f65 	.word	0x08009f65
 8009f4c:	08009f65 	.word	0x08009f65
 8009f50:	08009f65 	.word	0x08009f65
 8009f54:	08009f65 	.word	0x08009f65
 8009f58:	08009f65 	.word	0x08009f65
 8009f5c:	08009f65 	.word	0x08009f65
 8009f60:	08009f65 	.word	0x08009f65
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009f64:	bf00      	nop
  }

  return (USBD_OK);
 8009f66:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	370c      	adds	r7, #12
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009f7e:	6879      	ldr	r1, [r7, #4]
 8009f80:	4805      	ldr	r0, [pc, #20]	; (8009f98 <CDC_Receive_FS+0x24>)
 8009f82:	f7fe fe52 	bl	8008c2a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009f86:	4804      	ldr	r0, [pc, #16]	; (8009f98 <CDC_Receive_FS+0x24>)
 8009f88:	f7fe fe63 	bl	8008c52 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009f8c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3708      	adds	r7, #8
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	200007b4 	.word	0x200007b4

08009f9c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	6039      	str	r1, [r7, #0]
 8009fa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	2212      	movs	r2, #18
 8009fac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009fae:	4b03      	ldr	r3, [pc, #12]	; (8009fbc <USBD_FS_DeviceDescriptor+0x20>)
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr
 8009fbc:	2000014c 	.word	0x2000014c

08009fc0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	6039      	str	r1, [r7, #0]
 8009fca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	2204      	movs	r2, #4
 8009fd0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009fd2:	4b03      	ldr	r3, [pc, #12]	; (8009fe0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr
 8009fe0:	2000016c 	.word	0x2000016c

08009fe4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	4603      	mov	r3, r0
 8009fec:	6039      	str	r1, [r7, #0]
 8009fee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ff0:	79fb      	ldrb	r3, [r7, #7]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d105      	bne.n	800a002 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ff6:	683a      	ldr	r2, [r7, #0]
 8009ff8:	4907      	ldr	r1, [pc, #28]	; (800a018 <USBD_FS_ProductStrDescriptor+0x34>)
 8009ffa:	4808      	ldr	r0, [pc, #32]	; (800a01c <USBD_FS_ProductStrDescriptor+0x38>)
 8009ffc:	f7ff fe32 	bl	8009c64 <USBD_GetString>
 800a000:	e004      	b.n	800a00c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a002:	683a      	ldr	r2, [r7, #0]
 800a004:	4904      	ldr	r1, [pc, #16]	; (800a018 <USBD_FS_ProductStrDescriptor+0x34>)
 800a006:	4805      	ldr	r0, [pc, #20]	; (800a01c <USBD_FS_ProductStrDescriptor+0x38>)
 800a008:	f7ff fe2c 	bl	8009c64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a00c:	4b02      	ldr	r3, [pc, #8]	; (800a018 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3708      	adds	r7, #8
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	20001248 	.word	0x20001248
 800a01c:	0800a9cc 	.word	0x0800a9cc

0800a020 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	4603      	mov	r3, r0
 800a028:	6039      	str	r1, [r7, #0]
 800a02a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a02c:	683a      	ldr	r2, [r7, #0]
 800a02e:	4904      	ldr	r1, [pc, #16]	; (800a040 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a030:	4804      	ldr	r0, [pc, #16]	; (800a044 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a032:	f7ff fe17 	bl	8009c64 <USBD_GetString>
  return USBD_StrDesc;
 800a036:	4b02      	ldr	r3, [pc, #8]	; (800a040 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3708      	adds	r7, #8
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	20001248 	.word	0x20001248
 800a044:	0800a9e4 	.word	0x0800a9e4

0800a048 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	4603      	mov	r3, r0
 800a050:	6039      	str	r1, [r7, #0]
 800a052:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	221a      	movs	r2, #26
 800a058:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a05a:	f000 f855 	bl	800a108 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a05e:	4b02      	ldr	r3, [pc, #8]	; (800a068 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a060:	4618      	mov	r0, r3
 800a062:	3708      	adds	r7, #8
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}
 800a068:	20000170 	.word	0x20000170

0800a06c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	4603      	mov	r3, r0
 800a074:	6039      	str	r1, [r7, #0]
 800a076:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a078:	79fb      	ldrb	r3, [r7, #7]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d105      	bne.n	800a08a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a07e:	683a      	ldr	r2, [r7, #0]
 800a080:	4907      	ldr	r1, [pc, #28]	; (800a0a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a082:	4808      	ldr	r0, [pc, #32]	; (800a0a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a084:	f7ff fdee 	bl	8009c64 <USBD_GetString>
 800a088:	e004      	b.n	800a094 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a08a:	683a      	ldr	r2, [r7, #0]
 800a08c:	4904      	ldr	r1, [pc, #16]	; (800a0a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a08e:	4805      	ldr	r0, [pc, #20]	; (800a0a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a090:	f7ff fde8 	bl	8009c64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a094:	4b02      	ldr	r3, [pc, #8]	; (800a0a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a096:	4618      	mov	r0, r3
 800a098:	3708      	adds	r7, #8
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	20001248 	.word	0x20001248
 800a0a4:	0800a9f8 	.word	0x0800a9f8

0800a0a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	6039      	str	r1, [r7, #0]
 800a0b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a0b4:	79fb      	ldrb	r3, [r7, #7]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d105      	bne.n	800a0c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a0ba:	683a      	ldr	r2, [r7, #0]
 800a0bc:	4907      	ldr	r1, [pc, #28]	; (800a0dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a0be:	4808      	ldr	r0, [pc, #32]	; (800a0e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a0c0:	f7ff fdd0 	bl	8009c64 <USBD_GetString>
 800a0c4:	e004      	b.n	800a0d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a0c6:	683a      	ldr	r2, [r7, #0]
 800a0c8:	4904      	ldr	r1, [pc, #16]	; (800a0dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a0ca:	4805      	ldr	r0, [pc, #20]	; (800a0e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a0cc:	f7ff fdca 	bl	8009c64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0d0:	4b02      	ldr	r3, [pc, #8]	; (800a0dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	20001248 	.word	0x20001248
 800a0e0:	0800aa04 	.word	0x0800aa04

0800a0e4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	6039      	str	r1, [r7, #0]
 800a0ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	220c      	movs	r2, #12
 800a0f4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a0f6:	4b03      	ldr	r3, [pc, #12]	; (800a104 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr
 800a104:	20000160 	.word	0x20000160

0800a108 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a10e:	4b0f      	ldr	r3, [pc, #60]	; (800a14c <Get_SerialNum+0x44>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a114:	4b0e      	ldr	r3, [pc, #56]	; (800a150 <Get_SerialNum+0x48>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a11a:	4b0e      	ldr	r3, [pc, #56]	; (800a154 <Get_SerialNum+0x4c>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4413      	add	r3, r2
 800a126:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d009      	beq.n	800a142 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a12e:	2208      	movs	r2, #8
 800a130:	4909      	ldr	r1, [pc, #36]	; (800a158 <Get_SerialNum+0x50>)
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	f000 f814 	bl	800a160 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a138:	2204      	movs	r2, #4
 800a13a:	4908      	ldr	r1, [pc, #32]	; (800a15c <Get_SerialNum+0x54>)
 800a13c:	68b8      	ldr	r0, [r7, #8]
 800a13e:	f000 f80f 	bl	800a160 <IntToUnicode>
  }
}
 800a142:	bf00      	nop
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	1fff7590 	.word	0x1fff7590
 800a150:	1fff7594 	.word	0x1fff7594
 800a154:	1fff7598 	.word	0x1fff7598
 800a158:	20000172 	.word	0x20000172
 800a15c:	20000182 	.word	0x20000182

0800a160 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a160:	b480      	push	{r7}
 800a162:	b087      	sub	sp, #28
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	4613      	mov	r3, r2
 800a16c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a16e:	2300      	movs	r3, #0
 800a170:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a172:	2300      	movs	r3, #0
 800a174:	75fb      	strb	r3, [r7, #23]
 800a176:	e027      	b.n	800a1c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	0f1b      	lsrs	r3, r3, #28
 800a17c:	2b09      	cmp	r3, #9
 800a17e:	d80b      	bhi.n	800a198 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	0f1b      	lsrs	r3, r3, #28
 800a184:	b2da      	uxtb	r2, r3
 800a186:	7dfb      	ldrb	r3, [r7, #23]
 800a188:	005b      	lsls	r3, r3, #1
 800a18a:	4619      	mov	r1, r3
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	440b      	add	r3, r1
 800a190:	3230      	adds	r2, #48	; 0x30
 800a192:	b2d2      	uxtb	r2, r2
 800a194:	701a      	strb	r2, [r3, #0]
 800a196:	e00a      	b.n	800a1ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	0f1b      	lsrs	r3, r3, #28
 800a19c:	b2da      	uxtb	r2, r3
 800a19e:	7dfb      	ldrb	r3, [r7, #23]
 800a1a0:	005b      	lsls	r3, r3, #1
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	440b      	add	r3, r1
 800a1a8:	3237      	adds	r2, #55	; 0x37
 800a1aa:	b2d2      	uxtb	r2, r2
 800a1ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	011b      	lsls	r3, r3, #4
 800a1b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a1b4:	7dfb      	ldrb	r3, [r7, #23]
 800a1b6:	005b      	lsls	r3, r3, #1
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	68ba      	ldr	r2, [r7, #8]
 800a1bc:	4413      	add	r3, r2
 800a1be:	2200      	movs	r2, #0
 800a1c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a1c2:	7dfb      	ldrb	r3, [r7, #23]
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	75fb      	strb	r3, [r7, #23]
 800a1c8:	7dfa      	ldrb	r2, [r7, #23]
 800a1ca:	79fb      	ldrb	r3, [r7, #7]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d3d3      	bcc.n	800a178 <IntToUnicode+0x18>
  }
}
 800a1d0:	bf00      	nop
 800a1d2:	371c      	adds	r7, #28
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b08a      	sub	sp, #40	; 0x28
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1e4:	f107 0314 	add.w	r3, r7, #20
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	601a      	str	r2, [r3, #0]
 800a1ec:	605a      	str	r2, [r3, #4]
 800a1ee:	609a      	str	r2, [r3, #8]
 800a1f0:	60da      	str	r2, [r3, #12]
 800a1f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a1c      	ldr	r2, [pc, #112]	; (800a26c <HAL_PCD_MspInit+0x90>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d131      	bne.n	800a262 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a1fe:	4b1c      	ldr	r3, [pc, #112]	; (800a270 <HAL_PCD_MspInit+0x94>)
 800a200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a202:	4a1b      	ldr	r2, [pc, #108]	; (800a270 <HAL_PCD_MspInit+0x94>)
 800a204:	f043 0301 	orr.w	r3, r3, #1
 800a208:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a20a:	4b19      	ldr	r3, [pc, #100]	; (800a270 <HAL_PCD_MspInit+0x94>)
 800a20c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a20e:	f003 0301 	and.w	r3, r3, #1
 800a212:	613b      	str	r3, [r7, #16]
 800a214:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a216:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a21a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a21c:	2302      	movs	r3, #2
 800a21e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a220:	2300      	movs	r3, #0
 800a222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a224:	2303      	movs	r3, #3
 800a226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800a228:	230a      	movs	r3, #10
 800a22a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a22c:	f107 0314 	add.w	r3, r7, #20
 800a230:	4619      	mov	r1, r3
 800a232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a236:	f7f8 fafb 	bl	8002830 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a23a:	4b0d      	ldr	r3, [pc, #52]	; (800a270 <HAL_PCD_MspInit+0x94>)
 800a23c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a23e:	4a0c      	ldr	r2, [pc, #48]	; (800a270 <HAL_PCD_MspInit+0x94>)
 800a240:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a244:	6593      	str	r3, [r2, #88]	; 0x58
 800a246:	4b0a      	ldr	r3, [pc, #40]	; (800a270 <HAL_PCD_MspInit+0x94>)
 800a248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a24a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a24e:	60fb      	str	r3, [r7, #12]
 800a250:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800a252:	2200      	movs	r2, #0
 800a254:	2100      	movs	r1, #0
 800a256:	2043      	movs	r0, #67	; 0x43
 800a258:	f7f8 fa73 	bl	8002742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800a25c:	2043      	movs	r0, #67	; 0x43
 800a25e:	f7f8 fa8c 	bl	800277a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a262:	bf00      	nop
 800a264:	3728      	adds	r7, #40	; 0x28
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	40006800 	.word	0x40006800
 800a270:	40021000 	.word	0x40021000

0800a274 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800a288:	4619      	mov	r1, r3
 800a28a:	4610      	mov	r0, r2
 800a28c:	f7fe fd99 	bl	8008dc2 <USBD_LL_SetupStage>
}
 800a290:	bf00      	nop
 800a292:	3708      	adds	r7, #8
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800a2aa:	78fb      	ldrb	r3, [r7, #3]
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	015b      	lsls	r3, r3, #5
 800a2b0:	4413      	add	r3, r2
 800a2b2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	78fb      	ldrb	r3, [r7, #3]
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	f7fe fdcc 	bl	8008e58 <USBD_LL_DataOutStage>
}
 800a2c0:	bf00      	nop
 800a2c2:	3708      	adds	r7, #8
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800a2da:	78fb      	ldrb	r3, [r7, #3]
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	015b      	lsls	r3, r3, #5
 800a2e0:	4413      	add	r3, r2
 800a2e2:	333c      	adds	r3, #60	; 0x3c
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	78fb      	ldrb	r3, [r7, #3]
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	f7fe fe26 	bl	8008f3a <USBD_LL_DataInStage>
}
 800a2ee:	bf00      	nop
 800a2f0:	3708      	adds	r7, #8
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}

0800a2f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b082      	sub	sp, #8
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a304:	4618      	mov	r0, r3
 800a306:	f7fe ff39 	bl	800917c <USBD_LL_SOF>
}
 800a30a:	bf00      	nop
 800a30c:	3708      	adds	r7, #8
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800a312:	b580      	push	{r7, lr}
 800a314:	b084      	sub	sp, #16
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a31a:	2301      	movs	r3, #1
 800a31c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	2b02      	cmp	r3, #2
 800a324:	d001      	beq.n	800a32a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a326:	f7f7 feb9 	bl	800209c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a330:	7bfa      	ldrb	r2, [r7, #15]
 800a332:	4611      	mov	r1, r2
 800a334:	4618      	mov	r0, r3
 800a336:	f7fe fee6 	bl	8009106 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a340:	4618      	mov	r0, r3
 800a342:	f7fe fe9f 	bl	8009084 <USBD_LL_Reset>
}
 800a346:	bf00      	nop
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
	...

0800a350 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a35e:	4618      	mov	r0, r3
 800a360:	f7fe fee1 	bl	8009126 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	699b      	ldr	r3, [r3, #24]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d005      	beq.n	800a378 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a36c:	4b04      	ldr	r3, [pc, #16]	; (800a380 <HAL_PCD_SuspendCallback+0x30>)
 800a36e:	691b      	ldr	r3, [r3, #16]
 800a370:	4a03      	ldr	r2, [pc, #12]	; (800a380 <HAL_PCD_SuspendCallback+0x30>)
 800a372:	f043 0306 	orr.w	r3, r3, #6
 800a376:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a378:	bf00      	nop
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	e000ed00 	.word	0xe000ed00

0800a384 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	699b      	ldr	r3, [r3, #24]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d007      	beq.n	800a3a4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a394:	4b08      	ldr	r3, [pc, #32]	; (800a3b8 <HAL_PCD_ResumeCallback+0x34>)
 800a396:	691b      	ldr	r3, [r3, #16]
 800a398:	4a07      	ldr	r2, [pc, #28]	; (800a3b8 <HAL_PCD_ResumeCallback+0x34>)
 800a39a:	f023 0306 	bic.w	r3, r3, #6
 800a39e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a3a0:	f000 fab2 	bl	800a908 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7fe fed0 	bl	8009150 <USBD_LL_Resume>
}
 800a3b0:	bf00      	nop
 800a3b2:	3708      	adds	r7, #8
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	e000ed00 	.word	0xe000ed00

0800a3bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800a3c4:	f7fa f9f4 	bl	80047b0 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a3c8:	4a2b      	ldr	r2, [pc, #172]	; (800a478 <USBD_LL_Init+0xbc>)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  pdev->pData = &hpcd_USB_FS;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	4a29      	ldr	r2, [pc, #164]	; (800a478 <USBD_LL_Init+0xbc>)
 800a3d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a3d8:	4b27      	ldr	r3, [pc, #156]	; (800a478 <USBD_LL_Init+0xbc>)
 800a3da:	4a28      	ldr	r2, [pc, #160]	; (800a47c <USBD_LL_Init+0xc0>)
 800a3dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a3de:	4b26      	ldr	r3, [pc, #152]	; (800a478 <USBD_LL_Init+0xbc>)
 800a3e0:	2208      	movs	r2, #8
 800a3e2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a3e4:	4b24      	ldr	r3, [pc, #144]	; (800a478 <USBD_LL_Init+0xbc>)
 800a3e6:	2202      	movs	r2, #2
 800a3e8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a3ea:	4b23      	ldr	r3, [pc, #140]	; (800a478 <USBD_LL_Init+0xbc>)
 800a3ec:	2202      	movs	r2, #2
 800a3ee:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a3f0:	4b21      	ldr	r3, [pc, #132]	; (800a478 <USBD_LL_Init+0xbc>)
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a3f6:	4b20      	ldr	r3, [pc, #128]	; (800a478 <USBD_LL_Init+0xbc>)
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a3fc:	4b1e      	ldr	r3, [pc, #120]	; (800a478 <USBD_LL_Init+0xbc>)
 800a3fe:	2200      	movs	r2, #0
 800a400:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a402:	4b1d      	ldr	r3, [pc, #116]	; (800a478 <USBD_LL_Init+0xbc>)
 800a404:	2200      	movs	r2, #0
 800a406:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a408:	481b      	ldr	r0, [pc, #108]	; (800a478 <USBD_LL_Init+0xbc>)
 800a40a:	f7f9 fa2a 	bl	8003862 <HAL_PCD_Init>
 800a40e:	4603      	mov	r3, r0
 800a410:	2b00      	cmp	r3, #0
 800a412:	d001      	beq.n	800a418 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800a414:	f7f7 fe42 	bl	800209c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a41e:	2318      	movs	r3, #24
 800a420:	2200      	movs	r2, #0
 800a422:	2100      	movs	r1, #0
 800a424:	f7fa f8f8 	bl	8004618 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a42e:	2358      	movs	r3, #88	; 0x58
 800a430:	2200      	movs	r2, #0
 800a432:	2180      	movs	r1, #128	; 0x80
 800a434:	f7fa f8f0 	bl	8004618 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a43e:	23c0      	movs	r3, #192	; 0xc0
 800a440:	2200      	movs	r2, #0
 800a442:	2181      	movs	r1, #129	; 0x81
 800a444:	f7fa f8e8 	bl	8004618 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a44e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a452:	2200      	movs	r2, #0
 800a454:	2101      	movs	r1, #1
 800a456:	f7fa f8df 	bl	8004618 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a460:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a464:	2200      	movs	r2, #0
 800a466:	2182      	movs	r1, #130	; 0x82
 800a468:	f7fa f8d6 	bl	8004618 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	20001448 	.word	0x20001448
 800a47c:	40006800 	.word	0x40006800

0800a480 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a488:	2300      	movs	r3, #0
 800a48a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a48c:	2300      	movs	r3, #0
 800a48e:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a496:	4618      	mov	r0, r3
 800a498:	f7f9 facb 	bl	8003a32 <HAL_PCD_Start>
 800a49c:	4603      	mov	r3, r0
 800a49e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800a4a0:	7bbb      	ldrb	r3, [r7, #14]
 800a4a2:	2b03      	cmp	r3, #3
 800a4a4:	d816      	bhi.n	800a4d4 <USBD_LL_Start+0x54>
 800a4a6:	a201      	add	r2, pc, #4	; (adr r2, 800a4ac <USBD_LL_Start+0x2c>)
 800a4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ac:	0800a4bd 	.word	0x0800a4bd
 800a4b0:	0800a4c3 	.word	0x0800a4c3
 800a4b4:	0800a4c9 	.word	0x0800a4c9
 800a4b8:	0800a4cf 	.word	0x0800a4cf
    case HAL_OK :
      usb_status = USBD_OK;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	73fb      	strb	r3, [r7, #15]
    break;
 800a4c0:	e00b      	b.n	800a4da <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a4c2:	2302      	movs	r3, #2
 800a4c4:	73fb      	strb	r3, [r7, #15]
    break;
 800a4c6:	e008      	b.n	800a4da <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	73fb      	strb	r3, [r7, #15]
    break;
 800a4cc:	e005      	b.n	800a4da <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a4ce:	2302      	movs	r3, #2
 800a4d0:	73fb      	strb	r3, [r7, #15]
    break;
 800a4d2:	e002      	b.n	800a4da <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800a4d4:	2302      	movs	r3, #2
 800a4d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a4d8:	bf00      	nop
  }
  return usb_status;
 800a4da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3710      	adds	r7, #16
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	4608      	mov	r0, r1
 800a4ee:	4611      	mov	r1, r2
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	70fb      	strb	r3, [r7, #3]
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	70bb      	strb	r3, [r7, #2]
 800a4fa:	4613      	mov	r3, r2
 800a4fc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4fe:	2300      	movs	r3, #0
 800a500:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a502:	2300      	movs	r3, #0
 800a504:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a50c:	78bb      	ldrb	r3, [r7, #2]
 800a50e:	883a      	ldrh	r2, [r7, #0]
 800a510:	78f9      	ldrb	r1, [r7, #3]
 800a512:	f7f9 fc23 	bl	8003d5c <HAL_PCD_EP_Open>
 800a516:	4603      	mov	r3, r0
 800a518:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a51a:	7bbb      	ldrb	r3, [r7, #14]
 800a51c:	2b03      	cmp	r3, #3
 800a51e:	d817      	bhi.n	800a550 <USBD_LL_OpenEP+0x6c>
 800a520:	a201      	add	r2, pc, #4	; (adr r2, 800a528 <USBD_LL_OpenEP+0x44>)
 800a522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a526:	bf00      	nop
 800a528:	0800a539 	.word	0x0800a539
 800a52c:	0800a53f 	.word	0x0800a53f
 800a530:	0800a545 	.word	0x0800a545
 800a534:	0800a54b 	.word	0x0800a54b
    case HAL_OK :
      usb_status = USBD_OK;
 800a538:	2300      	movs	r3, #0
 800a53a:	73fb      	strb	r3, [r7, #15]
    break;
 800a53c:	e00b      	b.n	800a556 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a53e:	2302      	movs	r3, #2
 800a540:	73fb      	strb	r3, [r7, #15]
    break;
 800a542:	e008      	b.n	800a556 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a544:	2301      	movs	r3, #1
 800a546:	73fb      	strb	r3, [r7, #15]
    break;
 800a548:	e005      	b.n	800a556 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a54a:	2302      	movs	r3, #2
 800a54c:	73fb      	strb	r3, [r7, #15]
    break;
 800a54e:	e002      	b.n	800a556 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800a550:	2302      	movs	r3, #2
 800a552:	73fb      	strb	r3, [r7, #15]
    break;
 800a554:	bf00      	nop
  }
  return usb_status;
 800a556:	7bfb      	ldrb	r3, [r7, #15]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	460b      	mov	r3, r1
 800a56a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a56c:	2300      	movs	r3, #0
 800a56e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a570:	2300      	movs	r3, #0
 800a572:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a57a:	78fa      	ldrb	r2, [r7, #3]
 800a57c:	4611      	mov	r1, r2
 800a57e:	4618      	mov	r0, r3
 800a580:	f7f9 fc4c 	bl	8003e1c <HAL_PCD_EP_Close>
 800a584:	4603      	mov	r3, r0
 800a586:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800a588:	7bbb      	ldrb	r3, [r7, #14]
 800a58a:	2b03      	cmp	r3, #3
 800a58c:	d816      	bhi.n	800a5bc <USBD_LL_CloseEP+0x5c>
 800a58e:	a201      	add	r2, pc, #4	; (adr r2, 800a594 <USBD_LL_CloseEP+0x34>)
 800a590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a594:	0800a5a5 	.word	0x0800a5a5
 800a598:	0800a5ab 	.word	0x0800a5ab
 800a59c:	0800a5b1 	.word	0x0800a5b1
 800a5a0:	0800a5b7 	.word	0x0800a5b7
    case HAL_OK :
      usb_status = USBD_OK;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a5a8:	e00b      	b.n	800a5c2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a5aa:	2302      	movs	r3, #2
 800a5ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a5ae:	e008      	b.n	800a5c2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a5b4:	e005      	b.n	800a5c2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a5b6:	2302      	movs	r3, #2
 800a5b8:	73fb      	strb	r3, [r7, #15]
    break;
 800a5ba:	e002      	b.n	800a5c2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a5bc:	2302      	movs	r3, #2
 800a5be:	73fb      	strb	r3, [r7, #15]
    break;
 800a5c0:	bf00      	nop
  }
  return usb_status;  
 800a5c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3710      	adds	r7, #16
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5e6:	78fa      	ldrb	r2, [r7, #3]
 800a5e8:	4611      	mov	r1, r2
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7f9 fce0 	bl	8003fb0 <HAL_PCD_EP_SetStall>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a5f4:	7bbb      	ldrb	r3, [r7, #14]
 800a5f6:	2b03      	cmp	r3, #3
 800a5f8:	d816      	bhi.n	800a628 <USBD_LL_StallEP+0x5c>
 800a5fa:	a201      	add	r2, pc, #4	; (adr r2, 800a600 <USBD_LL_StallEP+0x34>)
 800a5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a600:	0800a611 	.word	0x0800a611
 800a604:	0800a617 	.word	0x0800a617
 800a608:	0800a61d 	.word	0x0800a61d
 800a60c:	0800a623 	.word	0x0800a623
    case HAL_OK :
      usb_status = USBD_OK;
 800a610:	2300      	movs	r3, #0
 800a612:	73fb      	strb	r3, [r7, #15]
    break;
 800a614:	e00b      	b.n	800a62e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a616:	2302      	movs	r3, #2
 800a618:	73fb      	strb	r3, [r7, #15]
    break;
 800a61a:	e008      	b.n	800a62e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a61c:	2301      	movs	r3, #1
 800a61e:	73fb      	strb	r3, [r7, #15]
    break;
 800a620:	e005      	b.n	800a62e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a622:	2302      	movs	r3, #2
 800a624:	73fb      	strb	r3, [r7, #15]
    break;
 800a626:	e002      	b.n	800a62e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a628:	2302      	movs	r3, #2
 800a62a:	73fb      	strb	r3, [r7, #15]
    break;
 800a62c:	bf00      	nop
  }
  return usb_status;  
 800a62e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a630:	4618      	mov	r0, r3
 800a632:	3710      	adds	r7, #16
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	460b      	mov	r3, r1
 800a642:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a644:	2300      	movs	r3, #0
 800a646:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a648:	2300      	movs	r3, #0
 800a64a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a652:	78fa      	ldrb	r2, [r7, #3]
 800a654:	4611      	mov	r1, r2
 800a656:	4618      	mov	r0, r3
 800a658:	f7f9 fd04 	bl	8004064 <HAL_PCD_EP_ClrStall>
 800a65c:	4603      	mov	r3, r0
 800a65e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800a660:	7bbb      	ldrb	r3, [r7, #14]
 800a662:	2b03      	cmp	r3, #3
 800a664:	d816      	bhi.n	800a694 <USBD_LL_ClearStallEP+0x5c>
 800a666:	a201      	add	r2, pc, #4	; (adr r2, 800a66c <USBD_LL_ClearStallEP+0x34>)
 800a668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a66c:	0800a67d 	.word	0x0800a67d
 800a670:	0800a683 	.word	0x0800a683
 800a674:	0800a689 	.word	0x0800a689
 800a678:	0800a68f 	.word	0x0800a68f
    case HAL_OK :
      usb_status = USBD_OK;
 800a67c:	2300      	movs	r3, #0
 800a67e:	73fb      	strb	r3, [r7, #15]
    break;
 800a680:	e00b      	b.n	800a69a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a682:	2302      	movs	r3, #2
 800a684:	73fb      	strb	r3, [r7, #15]
    break;
 800a686:	e008      	b.n	800a69a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a688:	2301      	movs	r3, #1
 800a68a:	73fb      	strb	r3, [r7, #15]
    break;
 800a68c:	e005      	b.n	800a69a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a68e:	2302      	movs	r3, #2
 800a690:	73fb      	strb	r3, [r7, #15]
    break;
 800a692:	e002      	b.n	800a69a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a694:	2302      	movs	r3, #2
 800a696:	73fb      	strb	r3, [r7, #15]
    break;
 800a698:	bf00      	nop
  }
  return usb_status; 
 800a69a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3710      	adds	r7, #16
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6b6:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800a6b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	da08      	bge.n	800a6d2 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800a6c0:	78fb      	ldrb	r3, [r7, #3]
 800a6c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6c6:	68fa      	ldr	r2, [r7, #12]
 800a6c8:	015b      	lsls	r3, r3, #5
 800a6ca:	4413      	add	r3, r2
 800a6cc:	332a      	adds	r3, #42	; 0x2a
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	e008      	b.n	800a6e4 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800a6d2:	78fb      	ldrb	r3, [r7, #3]
 800a6d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6d8:	68fa      	ldr	r2, [r7, #12]
 800a6da:	015b      	lsls	r3, r3, #5
 800a6dc:	4413      	add	r3, r2
 800a6de:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800a6e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3714      	adds	r7, #20
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a700:	2300      	movs	r3, #0
 800a702:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a70a:	78fa      	ldrb	r2, [r7, #3]
 800a70c:	4611      	mov	r1, r2
 800a70e:	4618      	mov	r0, r3
 800a710:	f7f9 faff 	bl	8003d12 <HAL_PCD_SetAddress>
 800a714:	4603      	mov	r3, r0
 800a716:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800a718:	7bbb      	ldrb	r3, [r7, #14]
 800a71a:	2b03      	cmp	r3, #3
 800a71c:	d816      	bhi.n	800a74c <USBD_LL_SetUSBAddress+0x5c>
 800a71e:	a201      	add	r2, pc, #4	; (adr r2, 800a724 <USBD_LL_SetUSBAddress+0x34>)
 800a720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a724:	0800a735 	.word	0x0800a735
 800a728:	0800a73b 	.word	0x0800a73b
 800a72c:	0800a741 	.word	0x0800a741
 800a730:	0800a747 	.word	0x0800a747
    case HAL_OK :
      usb_status = USBD_OK;
 800a734:	2300      	movs	r3, #0
 800a736:	73fb      	strb	r3, [r7, #15]
    break;
 800a738:	e00b      	b.n	800a752 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a73a:	2302      	movs	r3, #2
 800a73c:	73fb      	strb	r3, [r7, #15]
    break;
 800a73e:	e008      	b.n	800a752 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a740:	2301      	movs	r3, #1
 800a742:	73fb      	strb	r3, [r7, #15]
    break;
 800a744:	e005      	b.n	800a752 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a746:	2302      	movs	r3, #2
 800a748:	73fb      	strb	r3, [r7, #15]
    break;
 800a74a:	e002      	b.n	800a752 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800a74c:	2302      	movs	r3, #2
 800a74e:	73fb      	strb	r3, [r7, #15]
    break;
 800a750:	bf00      	nop
  }
  return usb_status;  
 800a752:	7bfb      	ldrb	r3, [r7, #15]
}
 800a754:	4618      	mov	r0, r3
 800a756:	3710      	adds	r7, #16
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b086      	sub	sp, #24
 800a760:	af00      	add	r7, sp, #0
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	607a      	str	r2, [r7, #4]
 800a766:	461a      	mov	r2, r3
 800a768:	460b      	mov	r3, r1
 800a76a:	72fb      	strb	r3, [r7, #11]
 800a76c:	4613      	mov	r3, r2
 800a76e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a770:	2300      	movs	r3, #0
 800a772:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a774:	2300      	movs	r3, #0
 800a776:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a77e:	893b      	ldrh	r3, [r7, #8]
 800a780:	7af9      	ldrb	r1, [r7, #11]
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	f7f9 fbdb 	bl	8003f3e <HAL_PCD_EP_Transmit>
 800a788:	4603      	mov	r3, r0
 800a78a:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800a78c:	7dbb      	ldrb	r3, [r7, #22]
 800a78e:	2b03      	cmp	r3, #3
 800a790:	d816      	bhi.n	800a7c0 <USBD_LL_Transmit+0x64>
 800a792:	a201      	add	r2, pc, #4	; (adr r2, 800a798 <USBD_LL_Transmit+0x3c>)
 800a794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a798:	0800a7a9 	.word	0x0800a7a9
 800a79c:	0800a7af 	.word	0x0800a7af
 800a7a0:	0800a7b5 	.word	0x0800a7b5
 800a7a4:	0800a7bb 	.word	0x0800a7bb
    case HAL_OK :
      usb_status = USBD_OK;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	75fb      	strb	r3, [r7, #23]
    break;
 800a7ac:	e00b      	b.n	800a7c6 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a7ae:	2302      	movs	r3, #2
 800a7b0:	75fb      	strb	r3, [r7, #23]
    break;
 800a7b2:	e008      	b.n	800a7c6 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	75fb      	strb	r3, [r7, #23]
    break;
 800a7b8:	e005      	b.n	800a7c6 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a7ba:	2302      	movs	r3, #2
 800a7bc:	75fb      	strb	r3, [r7, #23]
    break;
 800a7be:	e002      	b.n	800a7c6 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800a7c0:	2302      	movs	r3, #2
 800a7c2:	75fb      	strb	r3, [r7, #23]
    break;
 800a7c4:	bf00      	nop
  }
  return usb_status;    
 800a7c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3718      	adds	r7, #24
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b086      	sub	sp, #24
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	607a      	str	r2, [r7, #4]
 800a7da:	461a      	mov	r2, r3
 800a7dc:	460b      	mov	r3, r1
 800a7de:	72fb      	strb	r3, [r7, #11]
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a7f2:	893b      	ldrh	r3, [r7, #8]
 800a7f4:	7af9      	ldrb	r1, [r7, #11]
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	f7f9 fb52 	bl	8003ea0 <HAL_PCD_EP_Receive>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800a800:	7dbb      	ldrb	r3, [r7, #22]
 800a802:	2b03      	cmp	r3, #3
 800a804:	d816      	bhi.n	800a834 <USBD_LL_PrepareReceive+0x64>
 800a806:	a201      	add	r2, pc, #4	; (adr r2, 800a80c <USBD_LL_PrepareReceive+0x3c>)
 800a808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a80c:	0800a81d 	.word	0x0800a81d
 800a810:	0800a823 	.word	0x0800a823
 800a814:	0800a829 	.word	0x0800a829
 800a818:	0800a82f 	.word	0x0800a82f
    case HAL_OK :
      usb_status = USBD_OK;
 800a81c:	2300      	movs	r3, #0
 800a81e:	75fb      	strb	r3, [r7, #23]
    break;
 800a820:	e00b      	b.n	800a83a <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a822:	2302      	movs	r3, #2
 800a824:	75fb      	strb	r3, [r7, #23]
    break;
 800a826:	e008      	b.n	800a83a <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a828:	2301      	movs	r3, #1
 800a82a:	75fb      	strb	r3, [r7, #23]
    break;
 800a82c:	e005      	b.n	800a83a <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a82e:	2302      	movs	r3, #2
 800a830:	75fb      	strb	r3, [r7, #23]
    break;
 800a832:	e002      	b.n	800a83a <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800a834:	2302      	movs	r3, #2
 800a836:	75fb      	strb	r3, [r7, #23]
    break;
 800a838:	bf00      	nop
  }
  return usb_status; 
 800a83a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3718      	adds	r7, #24
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	460b      	mov	r3, r1
 800a84e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a856:	78fa      	ldrb	r2, [r7, #3]
 800a858:	4611      	mov	r1, r2
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7f9 fb5a 	bl	8003f14 <HAL_PCD_EP_GetRxCount>
 800a860:	4603      	mov	r3, r0
}
 800a862:	4618      	mov	r0, r3
 800a864:	3708      	adds	r7, #8
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
	...

0800a86c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	460b      	mov	r3, r1
 800a876:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a878:	78fb      	ldrb	r3, [r7, #3]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d002      	beq.n	800a884 <HAL_PCDEx_LPM_Callback+0x18>
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d013      	beq.n	800a8aa <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800a882:	e023      	b.n	800a8cc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	699b      	ldr	r3, [r3, #24]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d007      	beq.n	800a89c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a88c:	f000 f83c 	bl	800a908 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a890:	4b10      	ldr	r3, [pc, #64]	; (800a8d4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a892:	691b      	ldr	r3, [r3, #16]
 800a894:	4a0f      	ldr	r2, [pc, #60]	; (800a8d4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a896:	f023 0306 	bic.w	r3, r3, #6
 800a89a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7fe fc54 	bl	8009150 <USBD_LL_Resume>
    break;
 800a8a8:	e010      	b.n	800a8cc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7fe fc38 	bl	8009126 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	699b      	ldr	r3, [r3, #24]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d005      	beq.n	800a8ca <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a8be:	4b05      	ldr	r3, [pc, #20]	; (800a8d4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a8c0:	691b      	ldr	r3, [r3, #16]
 800a8c2:	4a04      	ldr	r2, [pc, #16]	; (800a8d4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a8c4:	f043 0306 	orr.w	r3, r3, #6
 800a8c8:	6113      	str	r3, [r2, #16]
    break;   
 800a8ca:	bf00      	nop
}
 800a8cc:	bf00      	nop
 800a8ce:	3708      	adds	r7, #8
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	e000ed00 	.word	0xe000ed00

0800a8d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a8e0:	4b03      	ldr	r3, [pc, #12]	; (800a8f0 <USBD_static_malloc+0x18>)
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	370c      	adds	r7, #12
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop
 800a8f0:	20000460 	.word	0x20000460

0800a8f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]

}
 800a8fc:	bf00      	nop
 800a8fe:	370c      	adds	r7, #12
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a908:	b480      	push	{r7}
 800a90a:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800a90c:	bf00      	nop
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr
	...

0800a918 <__libc_init_array>:
 800a918:	b570      	push	{r4, r5, r6, lr}
 800a91a:	4e0d      	ldr	r6, [pc, #52]	; (800a950 <__libc_init_array+0x38>)
 800a91c:	4c0d      	ldr	r4, [pc, #52]	; (800a954 <__libc_init_array+0x3c>)
 800a91e:	1ba4      	subs	r4, r4, r6
 800a920:	10a4      	asrs	r4, r4, #2
 800a922:	2500      	movs	r5, #0
 800a924:	42a5      	cmp	r5, r4
 800a926:	d109      	bne.n	800a93c <__libc_init_array+0x24>
 800a928:	4e0b      	ldr	r6, [pc, #44]	; (800a958 <__libc_init_array+0x40>)
 800a92a:	4c0c      	ldr	r4, [pc, #48]	; (800a95c <__libc_init_array+0x44>)
 800a92c:	f000 f836 	bl	800a99c <_init>
 800a930:	1ba4      	subs	r4, r4, r6
 800a932:	10a4      	asrs	r4, r4, #2
 800a934:	2500      	movs	r5, #0
 800a936:	42a5      	cmp	r5, r4
 800a938:	d105      	bne.n	800a946 <__libc_init_array+0x2e>
 800a93a:	bd70      	pop	{r4, r5, r6, pc}
 800a93c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a940:	4798      	blx	r3
 800a942:	3501      	adds	r5, #1
 800a944:	e7ee      	b.n	800a924 <__libc_init_array+0xc>
 800a946:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a94a:	4798      	blx	r3
 800a94c:	3501      	adds	r5, #1
 800a94e:	e7f2      	b.n	800a936 <__libc_init_array+0x1e>
 800a950:	0800aa64 	.word	0x0800aa64
 800a954:	0800aa64 	.word	0x0800aa64
 800a958:	0800aa64 	.word	0x0800aa64
 800a95c:	0800aa6c 	.word	0x0800aa6c

0800a960 <memset>:
 800a960:	4402      	add	r2, r0
 800a962:	4603      	mov	r3, r0
 800a964:	4293      	cmp	r3, r2
 800a966:	d100      	bne.n	800a96a <memset+0xa>
 800a968:	4770      	bx	lr
 800a96a:	f803 1b01 	strb.w	r1, [r3], #1
 800a96e:	e7f9      	b.n	800a964 <memset+0x4>

0800a970 <strncpy>:
 800a970:	b570      	push	{r4, r5, r6, lr}
 800a972:	3901      	subs	r1, #1
 800a974:	4604      	mov	r4, r0
 800a976:	b902      	cbnz	r2, 800a97a <strncpy+0xa>
 800a978:	bd70      	pop	{r4, r5, r6, pc}
 800a97a:	4623      	mov	r3, r4
 800a97c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800a980:	f803 5b01 	strb.w	r5, [r3], #1
 800a984:	1e56      	subs	r6, r2, #1
 800a986:	b92d      	cbnz	r5, 800a994 <strncpy+0x24>
 800a988:	4414      	add	r4, r2
 800a98a:	42a3      	cmp	r3, r4
 800a98c:	d0f4      	beq.n	800a978 <strncpy+0x8>
 800a98e:	f803 5b01 	strb.w	r5, [r3], #1
 800a992:	e7fa      	b.n	800a98a <strncpy+0x1a>
 800a994:	461c      	mov	r4, r3
 800a996:	4632      	mov	r2, r6
 800a998:	e7ed      	b.n	800a976 <strncpy+0x6>
	...

0800a99c <_init>:
 800a99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a99e:	bf00      	nop
 800a9a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9a2:	bc08      	pop	{r3}
 800a9a4:	469e      	mov	lr, r3
 800a9a6:	4770      	bx	lr

0800a9a8 <_fini>:
 800a9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9aa:	bf00      	nop
 800a9ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ae:	bc08      	pop	{r3}
 800a9b0:	469e      	mov	lr, r3
 800a9b2:	4770      	bx	lr
