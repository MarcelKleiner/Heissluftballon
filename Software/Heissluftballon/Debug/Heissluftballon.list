
Heissluftballon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3a8  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800a538  0800a538  0001a538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5c8  0800a5c8  0002018c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5c8  0800a5c8  0001a5c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5d0  0800a5d0  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a5d0  0800a5d0  0001a5d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5d8  0800a5d8  0001a5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  0800a5dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013ec  2000018c  0800a768  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001578  0800a768  00021578  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b9ee  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005870  00000000  00000000  0004bbaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001768  00000000  00000000  00051420  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014f0  00000000  00000000  00052b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023667  00000000  00000000  00054078  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c08b  00000000  00000000  000776df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000adfea  00000000  00000000  0009376a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00141754  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f38  00000000  00000000  001417d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000018c 	.word	0x2000018c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a520 	.word	0x0800a520

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000190 	.word	0x20000190
 80001cc:	0800a520 	.word	0x0800a520

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b972 	b.w	8000d08 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9e08      	ldr	r6, [sp, #32]
 8000a42:	4604      	mov	r4, r0
 8000a44:	4688      	mov	r8, r1
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d14b      	bne.n	8000ae2 <__udivmoddi4+0xa6>
 8000a4a:	428a      	cmp	r2, r1
 8000a4c:	4615      	mov	r5, r2
 8000a4e:	d967      	bls.n	8000b20 <__udivmoddi4+0xe4>
 8000a50:	fab2 f282 	clz	r2, r2
 8000a54:	b14a      	cbz	r2, 8000a6a <__udivmoddi4+0x2e>
 8000a56:	f1c2 0720 	rsb	r7, r2, #32
 8000a5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000a62:	4095      	lsls	r5, r2
 8000a64:	ea47 0803 	orr.w	r8, r7, r3
 8000a68:	4094      	lsls	r4, r2
 8000a6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a6e:	0c23      	lsrs	r3, r4, #16
 8000a70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a74:	fa1f fc85 	uxth.w	ip, r5
 8000a78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a80:	fb07 f10c 	mul.w	r1, r7, ip
 8000a84:	4299      	cmp	r1, r3
 8000a86:	d909      	bls.n	8000a9c <__udivmoddi4+0x60>
 8000a88:	18eb      	adds	r3, r5, r3
 8000a8a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a8e:	f080 811b 	bcs.w	8000cc8 <__udivmoddi4+0x28c>
 8000a92:	4299      	cmp	r1, r3
 8000a94:	f240 8118 	bls.w	8000cc8 <__udivmoddi4+0x28c>
 8000a98:	3f02      	subs	r7, #2
 8000a9a:	442b      	add	r3, r5
 8000a9c:	1a5b      	subs	r3, r3, r1
 8000a9e:	b2a4      	uxth	r4, r4
 8000aa0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000aa4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000aa8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ab0:	45a4      	cmp	ip, r4
 8000ab2:	d909      	bls.n	8000ac8 <__udivmoddi4+0x8c>
 8000ab4:	192c      	adds	r4, r5, r4
 8000ab6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aba:	f080 8107 	bcs.w	8000ccc <__udivmoddi4+0x290>
 8000abe:	45a4      	cmp	ip, r4
 8000ac0:	f240 8104 	bls.w	8000ccc <__udivmoddi4+0x290>
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	442c      	add	r4, r5
 8000ac8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000acc:	eba4 040c 	sub.w	r4, r4, ip
 8000ad0:	2700      	movs	r7, #0
 8000ad2:	b11e      	cbz	r6, 8000adc <__udivmoddi4+0xa0>
 8000ad4:	40d4      	lsrs	r4, r2
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e9c6 4300 	strd	r4, r3, [r6]
 8000adc:	4639      	mov	r1, r7
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	428b      	cmp	r3, r1
 8000ae4:	d909      	bls.n	8000afa <__udivmoddi4+0xbe>
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	f000 80eb 	beq.w	8000cc2 <__udivmoddi4+0x286>
 8000aec:	2700      	movs	r7, #0
 8000aee:	e9c6 0100 	strd	r0, r1, [r6]
 8000af2:	4638      	mov	r0, r7
 8000af4:	4639      	mov	r1, r7
 8000af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afa:	fab3 f783 	clz	r7, r3
 8000afe:	2f00      	cmp	r7, #0
 8000b00:	d147      	bne.n	8000b92 <__udivmoddi4+0x156>
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d302      	bcc.n	8000b0c <__udivmoddi4+0xd0>
 8000b06:	4282      	cmp	r2, r0
 8000b08:	f200 80fa 	bhi.w	8000d00 <__udivmoddi4+0x2c4>
 8000b0c:	1a84      	subs	r4, r0, r2
 8000b0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b12:	2001      	movs	r0, #1
 8000b14:	4698      	mov	r8, r3
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	d0e0      	beq.n	8000adc <__udivmoddi4+0xa0>
 8000b1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b1e:	e7dd      	b.n	8000adc <__udivmoddi4+0xa0>
 8000b20:	b902      	cbnz	r2, 8000b24 <__udivmoddi4+0xe8>
 8000b22:	deff      	udf	#255	; 0xff
 8000b24:	fab2 f282 	clz	r2, r2
 8000b28:	2a00      	cmp	r2, #0
 8000b2a:	f040 808f 	bne.w	8000c4c <__udivmoddi4+0x210>
 8000b2e:	1b49      	subs	r1, r1, r5
 8000b30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b34:	fa1f f885 	uxth.w	r8, r5
 8000b38:	2701      	movs	r7, #1
 8000b3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b3e:	0c23      	lsrs	r3, r4, #16
 8000b40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b48:	fb08 f10c 	mul.w	r1, r8, ip
 8000b4c:	4299      	cmp	r1, r3
 8000b4e:	d907      	bls.n	8000b60 <__udivmoddi4+0x124>
 8000b50:	18eb      	adds	r3, r5, r3
 8000b52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x122>
 8000b58:	4299      	cmp	r1, r3
 8000b5a:	f200 80cd 	bhi.w	8000cf8 <__udivmoddi4+0x2bc>
 8000b5e:	4684      	mov	ip, r0
 8000b60:	1a59      	subs	r1, r3, r1
 8000b62:	b2a3      	uxth	r3, r4
 8000b64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b70:	fb08 f800 	mul.w	r8, r8, r0
 8000b74:	45a0      	cmp	r8, r4
 8000b76:	d907      	bls.n	8000b88 <__udivmoddi4+0x14c>
 8000b78:	192c      	adds	r4, r5, r4
 8000b7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b7e:	d202      	bcs.n	8000b86 <__udivmoddi4+0x14a>
 8000b80:	45a0      	cmp	r8, r4
 8000b82:	f200 80b6 	bhi.w	8000cf2 <__udivmoddi4+0x2b6>
 8000b86:	4618      	mov	r0, r3
 8000b88:	eba4 0408 	sub.w	r4, r4, r8
 8000b8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b90:	e79f      	b.n	8000ad2 <__udivmoddi4+0x96>
 8000b92:	f1c7 0c20 	rsb	ip, r7, #32
 8000b96:	40bb      	lsls	r3, r7
 8000b98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ba0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ba4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ba8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bb0:	4325      	orrs	r5, r4
 8000bb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bb6:	0c2c      	lsrs	r4, r5, #16
 8000bb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bbc:	fa1f fa8e 	uxth.w	sl, lr
 8000bc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000bc8:	429c      	cmp	r4, r3
 8000bca:	fa02 f207 	lsl.w	r2, r2, r7
 8000bce:	fa00 f107 	lsl.w	r1, r0, r7
 8000bd2:	d90b      	bls.n	8000bec <__udivmoddi4+0x1b0>
 8000bd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000bd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bdc:	f080 8087 	bcs.w	8000cee <__udivmoddi4+0x2b2>
 8000be0:	429c      	cmp	r4, r3
 8000be2:	f240 8084 	bls.w	8000cee <__udivmoddi4+0x2b2>
 8000be6:	f1a9 0902 	sub.w	r9, r9, #2
 8000bea:	4473      	add	r3, lr
 8000bec:	1b1b      	subs	r3, r3, r4
 8000bee:	b2ad      	uxth	r5, r5
 8000bf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c00:	45a2      	cmp	sl, r4
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x1da>
 8000c04:	eb1e 0404 	adds.w	r4, lr, r4
 8000c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0c:	d26b      	bcs.n	8000ce6 <__udivmoddi4+0x2aa>
 8000c0e:	45a2      	cmp	sl, r4
 8000c10:	d969      	bls.n	8000ce6 <__udivmoddi4+0x2aa>
 8000c12:	3802      	subs	r0, #2
 8000c14:	4474      	add	r4, lr
 8000c16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c1e:	eba4 040a 	sub.w	r4, r4, sl
 8000c22:	454c      	cmp	r4, r9
 8000c24:	46c2      	mov	sl, r8
 8000c26:	464b      	mov	r3, r9
 8000c28:	d354      	bcc.n	8000cd4 <__udivmoddi4+0x298>
 8000c2a:	d051      	beq.n	8000cd0 <__udivmoddi4+0x294>
 8000c2c:	2e00      	cmp	r6, #0
 8000c2e:	d069      	beq.n	8000d04 <__udivmoddi4+0x2c8>
 8000c30:	ebb1 050a 	subs.w	r5, r1, sl
 8000c34:	eb64 0403 	sbc.w	r4, r4, r3
 8000c38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c3c:	40fd      	lsrs	r5, r7
 8000c3e:	40fc      	lsrs	r4, r7
 8000c40:	ea4c 0505 	orr.w	r5, ip, r5
 8000c44:	e9c6 5400 	strd	r5, r4, [r6]
 8000c48:	2700      	movs	r7, #0
 8000c4a:	e747      	b.n	8000adc <__udivmoddi4+0xa0>
 8000c4c:	f1c2 0320 	rsb	r3, r2, #32
 8000c50:	fa20 f703 	lsr.w	r7, r0, r3
 8000c54:	4095      	lsls	r5, r2
 8000c56:	fa01 f002 	lsl.w	r0, r1, r2
 8000c5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c62:	4338      	orrs	r0, r7
 8000c64:	0c01      	lsrs	r1, r0, #16
 8000c66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c6a:	fa1f f885 	uxth.w	r8, r5
 8000c6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c76:	fb07 f308 	mul.w	r3, r7, r8
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c80:	d907      	bls.n	8000c92 <__udivmoddi4+0x256>
 8000c82:	1869      	adds	r1, r5, r1
 8000c84:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c88:	d22f      	bcs.n	8000cea <__udivmoddi4+0x2ae>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d92d      	bls.n	8000cea <__udivmoddi4+0x2ae>
 8000c8e:	3f02      	subs	r7, #2
 8000c90:	4429      	add	r1, r5
 8000c92:	1acb      	subs	r3, r1, r3
 8000c94:	b281      	uxth	r1, r0
 8000c96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca2:	fb00 f308 	mul.w	r3, r0, r8
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d907      	bls.n	8000cba <__udivmoddi4+0x27e>
 8000caa:	1869      	adds	r1, r5, r1
 8000cac:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cb0:	d217      	bcs.n	8000ce2 <__udivmoddi4+0x2a6>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d915      	bls.n	8000ce2 <__udivmoddi4+0x2a6>
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	4429      	add	r1, r5
 8000cba:	1ac9      	subs	r1, r1, r3
 8000cbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cc0:	e73b      	b.n	8000b3a <__udivmoddi4+0xfe>
 8000cc2:	4637      	mov	r7, r6
 8000cc4:	4630      	mov	r0, r6
 8000cc6:	e709      	b.n	8000adc <__udivmoddi4+0xa0>
 8000cc8:	4607      	mov	r7, r0
 8000cca:	e6e7      	b.n	8000a9c <__udivmoddi4+0x60>
 8000ccc:	4618      	mov	r0, r3
 8000cce:	e6fb      	b.n	8000ac8 <__udivmoddi4+0x8c>
 8000cd0:	4541      	cmp	r1, r8
 8000cd2:	d2ab      	bcs.n	8000c2c <__udivmoddi4+0x1f0>
 8000cd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000cdc:	3801      	subs	r0, #1
 8000cde:	4613      	mov	r3, r2
 8000ce0:	e7a4      	b.n	8000c2c <__udivmoddi4+0x1f0>
 8000ce2:	4660      	mov	r0, ip
 8000ce4:	e7e9      	b.n	8000cba <__udivmoddi4+0x27e>
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	e795      	b.n	8000c16 <__udivmoddi4+0x1da>
 8000cea:	4667      	mov	r7, ip
 8000cec:	e7d1      	b.n	8000c92 <__udivmoddi4+0x256>
 8000cee:	4681      	mov	r9, r0
 8000cf0:	e77c      	b.n	8000bec <__udivmoddi4+0x1b0>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	442c      	add	r4, r5
 8000cf6:	e747      	b.n	8000b88 <__udivmoddi4+0x14c>
 8000cf8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cfc:	442b      	add	r3, r5
 8000cfe:	e72f      	b.n	8000b60 <__udivmoddi4+0x124>
 8000d00:	4638      	mov	r0, r7
 8000d02:	e708      	b.n	8000b16 <__udivmoddi4+0xda>
 8000d04:	4637      	mov	r7, r6
 8000d06:	e6e9      	b.n	8000adc <__udivmoddi4+0xa0>

08000d08 <__aeabi_idiv0>:
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <_ZN7AppMainC1Ev>:





AppMain::AppMain() {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 fbc6 	bl	80014a8 <_ZN5ModelC1Ev>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	33ac      	adds	r3, #172	; 0xac
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	4611      	mov	r1, r2
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 f93b 	bl	8000fa0 <_ZN8FXPS7115C1EP5Model>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	33b0      	adds	r3, #176	; 0xb0
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	4611      	mov	r1, r2
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 fa4a 	bl	80011cc <_ZN13MAX31865_TEMPC1EP5Model>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	33b4      	adds	r3, #180	; 0xb4
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 fc8c 	bl	800165e <_ZN5SHT21C1EP5Model>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	33b8      	adds	r3, #184	; 0xb8
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fc7c 	bl	8001648 <_ZN5RFM95C1Ev>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	33bc      	adds	r3, #188	; 0xbc
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 f96f 	bl	800103c <_ZN3GPSC1EP5Model>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d64:	4618      	mov	r0, r3
 8000d66:	f000 fd05 	bl	8001774 <_ZN7USB_ComC1Ev>



}
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <_ZN7AppMain8mainProgEv>:

void AppMain::mainProg(){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b0b4      	sub	sp, #208	; 0xd0
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]


	uint8_t transmitData[TRANSMIT_DATA_LENGTH];
	uint16_t transmitBuffer = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8

	for(int counter = 0; counter < TRANSMIT_DATA_LENGTH; counter++){
 8000d82:	2300      	movs	r3, #0
 8000d84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000d88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000d8c:	2bb3      	cmp	r3, #179	; 0xb3
 8000d8e:	dc0c      	bgt.n	8000daa <_ZN7AppMain8mainProgEv+0x36>
			transmitData[counter] = 0;
 8000d90:	f107 020c 	add.w	r2, r7, #12
 8000d94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000d98:	4413      	add	r3, r2
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
	for(int counter = 0; counter < TRANSMIT_DATA_LENGTH; counter++){
 8000d9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000da2:	3301      	adds	r3, #1
 8000da4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000da8:	e7ee      	b.n	8000d88 <_ZN7AppMain8mainProgEv+0x14>
	}

	HAL_Delay(100);
 8000daa:	2064      	movs	r0, #100	; 0x64
 8000dac:	f001 f950 	bl	8002050 <HAL_Delay>
	max31865.init(2);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	33b0      	adds	r3, #176	; 0xb0
 8000db4:	2102      	movs	r1, #2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 fa17 	bl	80011ea <_ZN13MAX31865_TEMP4initEh>
	fxps7115.fxpInit();
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	33ac      	adds	r3, #172	; 0xac
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 f8fc 	bl	8000fbe <_ZN8FXPS71157fxpInitEv>
	gps.init();
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	33bc      	adds	r3, #188	; 0xbc
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 f958 	bl	8001080 <_ZN3GPS4initEv>


	while(1){
		/*read Sensor Data*/
		sht21.readSHT21Humidity();		//Humidity
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	33b4      	adds	r3, #180	; 0xb4
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 fc9b 	bl	8001710 <_ZN5SHT2117readSHT21HumidityEv>
		sht21.readSHT21Temp();			//TempOutside
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	33b4      	adds	r3, #180	; 0xb4
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 fc64 	bl	80016ac <_ZN5SHT2113readSHT21TempEv>
		fxps7115.fxpReadPressure();		//Pressure
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	33ac      	adds	r3, #172	; 0xac
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 f8f3 	bl	8000fd4 <_ZN8FXPS711515fxpReadPressureEv>
		max31865.readTemp();			//TempInside
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	33b0      	adds	r3, #176	; 0xb0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 fa1c 	bl	8001230 <_ZN13MAX31865_TEMP8readTempEv>


		/*Prepare for Transmit*/

		transmitData[0] = '%';
 8000df8:	2325      	movs	r3, #37	; 0x25
 8000dfa:	733b      	strb	r3, [r7, #12]
		transmitBuffer = model.getHumidity();
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 fbbb 	bl	800157a <_ZN5Model11getHumidityEv>
 8000e04:	4603      	mov	r3, r0
 8000e06:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
		transmitData[1] = transmitBuffer;
 8000e0a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	737b      	strb	r3, [r7, #13]
		transmitData[2] = transmitBuffer>>8;
 8000e12:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8000e16:	121b      	asrs	r3, r3, #8
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	73bb      	strb	r3, [r7, #14]
		transmitData[3] = '!';
 8000e1c:	2321      	movs	r3, #33	; 0x21
 8000e1e:	73fb      	strb	r3, [r7, #15]
		transmitBuffer = model.getTempOutside();
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 fbe6 	bl	80015f4 <_ZN5Model14getTempOutsideEv>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
		transmitData[4] = transmitBuffer;
 8000e2e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	743b      	strb	r3, [r7, #16]
		transmitData[5] = transmitBuffer>>8;
 8000e36:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8000e3a:	121b      	asrs	r3, r3, #8
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	747b      	strb	r3, [r7, #17]
		transmitData[6] = '!';
 8000e40:	2321      	movs	r3, #33	; 0x21
 8000e42:	74bb      	strb	r3, [r7, #18]
		transmitBuffer = model.getPressure();
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 fbb7 	bl	80015ba <_ZN5Model11getPressureEv>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
		transmitData[7] = transmitBuffer;
 8000e52:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	74fb      	strb	r3, [r7, #19]
		transmitData[8] = transmitBuffer>>8;
 8000e5a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8000e5e:	121b      	asrs	r3, r3, #8
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	753b      	strb	r3, [r7, #20]
		transmitData[9] = '!';
 8000e64:	2321      	movs	r3, #33	; 0x21
 8000e66:	757b      	strb	r3, [r7, #21]
		transmitBuffer = model.getTempInsed();
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 fbdf 	bl	800162e <_ZN5Model12getTempInsedEv>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
		transmitData[10] = transmitBuffer;
 8000e76:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	75bb      	strb	r3, [r7, #22]
		transmitData[11] = transmitBuffer>>8;
 8000e7e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8000e82:	121b      	asrs	r3, r3, #8
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	75fb      	strb	r3, [r7, #23]
		transmitData[12] = '!';
 8000e88:	2321      	movs	r3, #33	; 0x21
 8000e8a:	763b      	strb	r3, [r7, #24]
		uint8_t offset = 13;	//Fortlaufend zu vorheriger index
 8000e8c:	230d      	movs	r3, #13
 8000e8e:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
		uint8_t counter = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
		char *gpsGCSTemp = model.getGPS_GCS();
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 fb36 	bl	800150c <_ZN5Model10getGPS_GCSEv>
 8000ea0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
		for(counter = 0; counter < GPS_DATA_SIZE; counter++){
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
 8000eaa:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8000eae:	2b4f      	cmp	r3, #79	; 0x4f
 8000eb0:	d817      	bhi.n	8000ee2 <_ZN7AppMain8mainProgEv+0x16e>
			transmitData[offset] = gpsGCSTemp[counter];
 8000eb2:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8000eb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000eba:	441a      	add	r2, r3
 8000ebc:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8000ec0:	7812      	ldrb	r2, [r2, #0]
 8000ec2:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000ec6:	440b      	add	r3, r1
 8000ec8:	f803 2cc4 	strb.w	r2, [r3, #-196]
			offset++;
 8000ecc:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
		for(counter = 0; counter < GPS_DATA_SIZE; counter++){
 8000ed6:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8000eda:	3301      	adds	r3, #1
 8000edc:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
 8000ee0:	e7e3      	b.n	8000eaa <_ZN7AppMain8mainProgEv+0x136>

		}
		transmitData[offset] = '!';
 8000ee2:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8000ee6:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8000eea:	4413      	add	r3, r2
 8000eec:	2221      	movs	r2, #33	; 0x21
 8000eee:	f803 2cc4 	strb.w	r2, [r3, #-196]
		offset++;
 8000ef2:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
		char* gpsDeviceTemp = model.getGPS_Device();
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fb1f 	bl	8001542 <_ZN5Model13getGPS_DeviceEv>
 8000f04:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
		for(counter = 0; counter < GPS_DATA_SIZE; counter++){
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
 8000f0e:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8000f12:	2b4f      	cmp	r3, #79	; 0x4f
 8000f14:	d817      	bhi.n	8000f46 <_ZN7AppMain8mainProgEv+0x1d2>
			transmitData[offset] = gpsDeviceTemp[counter];
 8000f16:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8000f1a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000f1e:	441a      	add	r2, r3
 8000f20:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8000f24:	7812      	ldrb	r2, [r2, #0]
 8000f26:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f803 2cc4 	strb.w	r2, [r3, #-196]
			offset++;
 8000f30:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8000f34:	3301      	adds	r3, #1
 8000f36:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
		for(counter = 0; counter < GPS_DATA_SIZE; counter++){
 8000f3a:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8000f3e:	3301      	adds	r3, #1
 8000f40:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
 8000f44:	e7e3      	b.n	8000f0e <_ZN7AppMain8mainProgEv+0x19a>
		}
		transmitData[offset] = '*';
 8000f46:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8000f4a:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8000f4e:	4413      	add	r3, r2
 8000f50:	222a      	movs	r2, #42	; 0x2a
 8000f52:	f803 2cc4 	strb.w	r2, [r3, #-196]
		transmitData[offset+1] = '!';
 8000f56:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8000f60:	4413      	add	r3, r2
 8000f62:	2221      	movs	r2, #33	; 0x21
 8000f64:	f803 2cc4 	strb.w	r2, [r3, #-196]

		/*Transmit over USB - use only in GCS*/

		usbCom.usbTransmit(transmitData, TRANSMIT_DATA_LENGTH);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000f6e:	f107 010c 	add.w	r1, r7, #12
 8000f72:	22b4      	movs	r2, #180	; 0xb4
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 fc08 	bl	800178a <_ZN7USB_Com11usbTransmitEPhh>





		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000f7a:	2102      	movs	r1, #2
 8000f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f80:	f001 fb64 	bl	800264c <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000f84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f88:	f001 f862 	bl	8002050 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f92:	f001 fb5b 	bl	800264c <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000f96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f9a:	f001 f859 	bl	8002050 <HAL_Delay>

	}
 8000f9e:	e717      	b.n	8000dd0 <_ZN7AppMain8mainProgEv+0x5c>

08000fa0 <_ZN8FXPS7115C1EP5Model>:

#include "FXPS7115.h"



FXPS7115::FXPS7115(Model *model) {
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
	// TODO Auto-generated constructor stub
	this->model = model;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	601a      	str	r2, [r3, #0]
}
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <_ZN8FXPS71157fxpInitEv>:



void FXPS7115::fxpInit(){
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]


}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <_ZN8FXPS711515fxpReadPressureEv>:
	return(HAL_I2C_Master_Transmit(&hi2c1,FXP_SLAVE_ADDR<<1,(uint8_t*)txBuffer,1,I2C_Timeout));
}



bool FXPS7115::fxpReadPressure(){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af04      	add	r7, sp, #16
 8000fda:	6078      	str	r0, [r7, #4]
	uint8_t data[2] = {0,0};
 8000fdc:	2300      	movs	r3, #0
 8000fde:	733b      	strb	r3, [r7, #12]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	737b      	strb	r3, [r7, #13]

	if(HAL_I2C_Mem_Read(&hi2c1, FXP_SLAVE_ADDR<<1, FXP_SNSDATA0_L_REG, 1, data, 2, I2C_Timeout) != HAL_OK){
 8000fe4:	2364      	movs	r3, #100	; 0x64
 8000fe6:	9302      	str	r3, [sp, #8]
 8000fe8:	2302      	movs	r3, #2
 8000fea:	9301      	str	r3, [sp, #4]
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	2262      	movs	r2, #98	; 0x62
 8000ff6:	21c0      	movs	r1, #192	; 0xc0
 8000ff8:	480f      	ldr	r0, [pc, #60]	; (8001038 <_ZN8FXPS711515fxpReadPressureEv+0x64>)
 8000ffa:	f001 fdb9 	bl	8002b70 <HAL_I2C_Mem_Read>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	bf14      	ite	ne
 8001004:	2301      	movne	r3, #1
 8001006:	2300      	moveq	r3, #0
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <_ZN8FXPS711515fxpReadPressureEv+0x3e>
		return 0;
 800100e:	2300      	movs	r3, #0
 8001010:	e00d      	b.n	800102e <_ZN8FXPS711515fxpReadPressureEv+0x5a>
	}

	model->setPressure((data[1]<<8) + data[0]);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6818      	ldr	r0, [r3, #0]
 8001016:	7b7b      	ldrb	r3, [r7, #13]
 8001018:	b29b      	uxth	r3, r3
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	b29a      	uxth	r2, r3
 800101e:	7b3b      	ldrb	r3, [r7, #12]
 8001020:	b29b      	uxth	r3, r3
 8001022:	4413      	add	r3, r2
 8001024:	b29b      	uxth	r3, r3
 8001026:	4619      	mov	r1, r3
 8001028:	f000 fab4 	bl	8001594 <_ZN5Model11setPressureEt>
	return 1;
 800102c:	2301      	movs	r3, #1
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	2000053c 	.word	0x2000053c

0800103c <_ZN3GPSC1EP5Model>:


	//extern UART_HandleTypeDef huart2;


GPS::GPS(Model* model) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	711a      	strb	r2, [r3, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	715a      	strb	r2, [r3, #5]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	this->model = model;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	601a      	str	r2, [r3, #0]
	init();
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f805 	bl	8001080 <_ZN3GPS4initEv>
}
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <_ZN3GPS4initEv>:
 *
 * @param none
 * @return none
 *
 */
void GPS::init(){
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < GPS_DATA_SIZE; i++) {
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2b4f      	cmp	r3, #79	; 0x4f
 8001090:	dc0f      	bgt.n	80010b2 <_ZN3GPS4initEv+0x32>
		data[i] = '0';
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	3356      	adds	r3, #86	; 0x56
 800109a:	2230      	movs	r2, #48	; 0x30
 800109c:	701a      	strb	r2, [r3, #0]
		GPS_Data[i] = '0';
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	3306      	adds	r3, #6
 80010a6:	2230      	movs	r2, #48	; 0x30
 80010a8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < GPS_DATA_SIZE; i++) {
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3301      	adds	r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	e7ec      	b.n	800108c <_ZN3GPS4initEv+0xc>
	}
}
 80010b2:	bf00      	nop
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <_ZN3GPS12gpsInterruptEh>:
*
*
* @param huart UART handle.
* @return None
 */
void GPS::gpsInterrupt(uint8_t rxData) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	70fb      	strb	r3, [r7, #3]
	static uint8_t i = 0;
		/* Receive one byte in interrupt mode */


		/*Check if received byte is a '$' (begin of record) */
		if ((char) rxData == '$') {
 80010cc:	78fb      	ldrb	r3, [r7, #3]
 80010ce:	2b24      	cmp	r3, #36	; 0x24
 80010d0:	d105      	bne.n	80010de <_ZN3GPS12gpsInterruptEh+0x1e>
			recordStart = true;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	711a      	strb	r2, [r3, #4]
			i = 0;
 80010d8:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <_ZN3GPS12gpsInterruptEh+0x108>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
		}
		/*Check if received byte is a '\n' (end of record)*/
		if ((char) rxData == '\n') {
 80010de:	78fb      	ldrb	r3, [r7, #3]
 80010e0:	2b0a      	cmp	r3, #10
 80010e2:	d15a      	bne.n	800119a <_ZN3GPS12gpsInterruptEh+0xda>
			recordStart = false;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	711a      	strb	r2, [r3, #4]

			if (i > GPS_DATA_SIZE-10) {
 80010ea:	4b37      	ldr	r3, [pc, #220]	; (80011c8 <_ZN3GPS12gpsInterruptEh+0x108>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b46      	cmp	r3, #70	; 0x46
 80010f0:	d939      	bls.n	8001166 <_ZN3GPS12gpsInterruptEh+0xa6>
				copyCounter = 0;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
				for (int i = 0; i < GPS_DATA_SIZE; i++) {
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2b4f      	cmp	r3, #79	; 0x4f
 8001102:	dc09      	bgt.n	8001118 <_ZN3GPS12gpsInterruptEh+0x58>
					GPS_Data[i] = '0';
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4413      	add	r3, r2
 800110a:	3306      	adds	r3, #6
 800110c:	2230      	movs	r2, #48	; 0x30
 800110e:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < GPS_DATA_SIZE; i++) {
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	3301      	adds	r3, #1
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	e7f2      	b.n	80010fe <_ZN3GPS12gpsInterruptEh+0x3e>
				}
				while (data[copyCounter] != '\r' && copyCounter <= 80) {
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800111e:	461a      	mov	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4413      	add	r3, r2
 8001124:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001128:	2b0d      	cmp	r3, #13
 800112a:	d01c      	beq.n	8001166 <_ZN3GPS12gpsInterruptEh+0xa6>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8001132:	2b50      	cmp	r3, #80	; 0x50
 8001134:	d817      	bhi.n	8001166 <_ZN3GPS12gpsInterruptEh+0xa6>
					GPS_Data[copyCounter] = data[copyCounter];
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800113c:	461a      	mov	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8001144:	4619      	mov	r1, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	440b      	add	r3, r1
 8001152:	719a      	strb	r2, [r3, #6]
					copyCounter++;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800115a:	3301      	adds	r3, #1
 800115c:	b2da      	uxtb	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
				while (data[copyCounter] != '\r' && copyCounter <= 80) {
 8001164:	e7d8      	b.n	8001118 <_ZN3GPS12gpsInterruptEh+0x58>
				}
			}
			model->setGPS_Device(GPS_Data);	//set GPS data in Model
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3306      	adds	r3, #6
 800116e:	4619      	mov	r1, r3
 8001170:	4610      	mov	r0, r2
 8001172:	f000 f9d6 	bl	8001522 <_ZN5Model13setGPS_DeviceEPc>
			for (int count = 0; count < GPS_DATA_SIZE; count++) {
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	2b4f      	cmp	r3, #79	; 0x4f
 800117e:	dc09      	bgt.n	8001194 <_ZN3GPS12gpsInterruptEh+0xd4>
				data[count] = '0';
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	4413      	add	r3, r2
 8001186:	3356      	adds	r3, #86	; 0x56
 8001188:	2230      	movs	r2, #48	; 0x30
 800118a:	701a      	strb	r2, [r3, #0]
			for (int count = 0; count < GPS_DATA_SIZE; count++) {
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	3301      	adds	r3, #1
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	e7f2      	b.n	800117a <_ZN3GPS12gpsInterruptEh+0xba>
			}
			i = 0;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <_ZN3GPS12gpsInterruptEh+0x108>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
		}

		if (recordStart) {
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	791b      	ldrb	r3, [r3, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00d      	beq.n	80011be <_ZN3GPS12gpsInterruptEh+0xfe>
			data[i] = rxData;
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <_ZN3GPS12gpsInterruptEh+0x108>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4413      	add	r3, r2
 80011ac:	78fa      	ldrb	r2, [r7, #3]
 80011ae:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
			i++;
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <_ZN3GPS12gpsInterruptEh+0x108>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	3301      	adds	r3, #1
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <_ZN3GPS12gpsInterruptEh+0x108>)
 80011bc:	701a      	strb	r2, [r3, #0]
		}



	}
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200001a8 	.word	0x200001a8

080011cc <_ZN13MAX31865_TEMPC1EP5Model>:

#include "MAX31865TEMP.h"

HAL_StatusTypeDef def;

MAX31865_TEMP::MAX31865_TEMP(Model *model) {
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
	// TODO Auto-generated constructor stub
	this->model = model;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	601a      	str	r2, [r3, #0]
}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <_ZN13MAX31865_TEMP4initEh>:

void MAX31865_TEMP::init(uint8_t wires){
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b084      	sub	sp, #16
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	460b      	mov	r3, r1
 80011f4:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[1];
 HAL_Delay(100);
 80011f6:	2064      	movs	r0, #100	; 0x64
 80011f8:	f000 ff2a 	bl	8002050 <HAL_Delay>
  setWires(wires);           // Set 2,3 or 4 wire sensor
 80011fc:	78fb      	ldrb	r3, [r7, #3]
 80011fe:	4619      	mov	r1, r3
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 f91c 	bl	800143e <_ZN13MAX31865_TEMP8setWiresEh>
  HAL_Delay(100);
 8001206:	2064      	movs	r0, #100	; 0x64
 8001208:	f000 ff22 	bl	8002050 <HAL_Delay>
  enableBias(OFF);           // Disable bias voltage
 800120c:	2100      	movs	r1, #0
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 f8de 	bl	80013d0 <_ZN13MAX31865_TEMP10enableBiasEh>
  HAL_Delay(100);
 8001214:	2064      	movs	r0, #100	; 0x64
 8001216:	f000 ff1b 	bl	8002050 <HAL_Delay>
  autoConvert(OFF);          // Disable auto conversion
 800121a:	2100      	movs	r1, #0
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f000 f8e9 	bl	80013f4 <_ZN13MAX31865_TEMP11autoConvertEh>
  HAL_Delay(100);
 8001222:	2064      	movs	r0, #100	; 0x64
 8001224:	f000 ff14 	bl	8002050 <HAL_Delay>

}
 8001228:	bf00      	nop
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <_ZN13MAX31865_TEMP8readTempEv>:


bool MAX31865_TEMP::readTemp(){
 8001230:	b590      	push	{r4, r7, lr}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]

	uint8_t buff[1];
	MAX31865_read(0x07, buff, 1);
 8001238:	f107 0210 	add.w	r2, r7, #16
 800123c:	2301      	movs	r3, #1
 800123e:	2107      	movs	r1, #7
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 f863 	bl	800130c <_ZN13MAX31865_TEMP13MAX31865_readEhPhh>

    // Activate bias voltage to read sensor data, and wait for the capacitors to fill
    enableBias(ON);
 8001246:	2101      	movs	r1, #1
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 f8c1 	bl	80013d0 <_ZN13MAX31865_TEMP10enableBiasEh>
    HAL_Delay(20);
 800124e:	2014      	movs	r0, #20
 8001250:	f000 fefe 	bl	8002050 <HAL_Delay>
    // Perform a single conversion, and wait for the result
    single_shot();
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 f917 	bl	8001488 <_ZN13MAX31865_TEMP11single_shotEv>
    HAL_Delay(100);
 800125a:	2064      	movs	r0, #100	; 0x64
 800125c:	f000 fef8 	bl	8002050 <HAL_Delay>
    // Read data from max31865 data registers
    uint8_t buffer[2];
     MAX31865_read(MAX31856_RTDMSB_REG, buffer,2);
 8001260:	f107 020c 	add.w	r2, r7, #12
 8001264:	2302      	movs	r3, #2
 8001266:	2101      	movs	r1, #1
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 f84f 	bl	800130c <_ZN13MAX31865_TEMP13MAX31865_readEhPhh>
    // Combine 2 bytes into 1 number, and shift 1 down to remove fault bit
    uint16_t data = buffer[0] << 8;
 800126e:	7b3b      	ldrb	r3, [r7, #12]
 8001270:	b29b      	uxth	r3, r3
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	83fb      	strh	r3, [r7, #30]
    data |= buffer[1];
 8001276:	7b7b      	ldrb	r3, [r7, #13]
 8001278:	b29a      	uxth	r2, r3
 800127a:	8bfb      	ldrh	r3, [r7, #30]
 800127c:	4313      	orrs	r3, r2
 800127e:	83fb      	strh	r3, [r7, #30]



    // Disable bias voltage to reduce power usage
    enableBias(OFF);
 8001280:	2100      	movs	r1, #0
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 f8a4 	bl	80013d0 <_ZN13MAX31865_TEMP10enableBiasEh>


    // Calculate the actual resistance of the sensor
    float resistance = ((float) data * RREF) / FACTOR;
 8001288:	8bfb      	ldrh	r3, [r7, #30]
 800128a:	ee07 3a90 	vmov	s15, r3
 800128e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001292:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001300 <_ZN13MAX31865_TEMP8readTempEv+0xd0>
 8001296:	ee27 7a87 	vmul.f32	s14, s15, s14
 800129a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001304 <_ZN13MAX31865_TEMP8readTempEv+0xd4>
 800129e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012a2:	edc7 7a06 	vstr	s15, [r7, #24]
    // Calculate the temperature from the measured resistance
    float temp = ((resistance / 100) - 1) / ALPHA;
 80012a6:	ed97 7a06 	vldr	s14, [r7, #24]
 80012aa:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001308 <_ZN13MAX31865_TEMP8readTempEv+0xd8>
 80012ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012ba:	ee17 0a90 	vmov	r0, s15
 80012be:	f7ff f8eb 	bl	8000498 <__aeabi_f2d>
 80012c2:	a30d      	add	r3, pc, #52	; (adr r3, 80012f8 <_ZN13MAX31865_TEMP8readTempEv+0xc8>)
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	f7ff fa68 	bl	800079c <__aeabi_ddiv>
 80012cc:	4603      	mov	r3, r0
 80012ce:	460c      	mov	r4, r1
 80012d0:	4618      	mov	r0, r3
 80012d2:	4621      	mov	r1, r4
 80012d4:	f7ff fb4a 	bl	800096c <__aeabi_d2f>
 80012d8:	4603      	mov	r3, r0
 80012da:	617b      	str	r3, [r7, #20]



	model->setTempInside(data);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	8bfa      	ldrh	r2, [r7, #30]
 80012e2:	4611      	mov	r1, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 f992 	bl	800160e <_ZN5Model13setTempInsideEt>
	return true;
 80012ea:	2301      	movs	r3, #1
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3724      	adds	r7, #36	; 0x24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd90      	pop	{r4, r7, pc}
 80012f4:	f3af 8000 	nop.w
 80012f8:	e1d2178f 	.word	0xe1d2178f
 80012fc:	3f6f8c21 	.word	0x3f6f8c21
 8001300:	43c30000 	.word	0x43c30000
 8001304:	47000000 	.word	0x47000000
 8001308:	42c80000 	.word	0x42c80000

0800130c <_ZN13MAX31865_TEMP13MAX31865_readEhPhh>:
 * @param addr      Register addr to read from
 * @param buffer    Pointer to rx buffer
 * @param len       Amount of bytes to read
 */
void MAX31865_TEMP::MAX31865_read(uint8_t addr, uint8_t *buffer, uint8_t size)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	461a      	mov	r2, r3
 8001318:	460b      	mov	r3, r1
 800131a:	72fb      	strb	r3, [r7, #11]
 800131c:	4613      	mov	r3, r2
 800131e:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef test;
	uint8_t txBuffer[1];
    addr &= ~MAX31865_READ;                             		// Force read bit on address
    txBuffer[0] = addr;
 8001320:	7afb      	ldrb	r3, [r7, #11]
 8001322:	753b      	strb	r3, [r7, #20]
    CLEAR_MAX_CS;          										// Enable CE
 8001324:	2200      	movs	r2, #0
 8001326:	2101      	movs	r1, #1
 8001328:	480f      	ldr	r0, [pc, #60]	; (8001368 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh+0x5c>)
 800132a:	f001 f977 	bl	800261c <HAL_GPIO_WritePin>
    test = HAL_SPI_Transmit(&hspi1,(uint8_t*)txBuffer,1,500);	//write addr
 800132e:	f107 0114 	add.w	r1, r7, #20
 8001332:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001336:	2201      	movs	r2, #1
 8001338:	480c      	ldr	r0, [pc, #48]	; (800136c <_ZN13MAX31865_TEMP13MAX31865_readEhPhh+0x60>)
 800133a:	f004 f82f 	bl	800539c <HAL_SPI_Transmit>
 800133e:	4603      	mov	r3, r0
 8001340:	75fb      	strb	r3, [r7, #23]
    test =HAL_SPI_Receive(&hspi1,(uint8_t*)buffer,size,500);	// Read data
 8001342:	7abb      	ldrb	r3, [r7, #10]
 8001344:	b29a      	uxth	r2, r3
 8001346:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	4807      	ldr	r0, [pc, #28]	; (800136c <_ZN13MAX31865_TEMP13MAX31865_readEhPhh+0x60>)
 800134e:	f004 f98b 	bl	8005668 <HAL_SPI_Receive>
 8001352:	4603      	mov	r3, r0
 8001354:	75fb      	strb	r3, [r7, #23]
    SET_MAX_CS;          										// Disable CE
 8001356:	2201      	movs	r2, #1
 8001358:	2101      	movs	r1, #1
 800135a:	4803      	ldr	r0, [pc, #12]	; (8001368 <_ZN13MAX31865_TEMP13MAX31865_readEhPhh+0x5c>)
 800135c:	f001 f95e 	bl	800261c <HAL_GPIO_WritePin>
}
 8001360:	bf00      	nop
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	48000400 	.word	0x48000400
 800136c:	20000588 	.word	0x20000588

08001370 <_ZN13MAX31865_TEMP14MAX31865_writeEhh>:
 * Write a byte in a MAX13865 register
 *
 * @param addr      Register addr to write to
 * @param buffer    Tx data
 */
void MAX31865_TEMP::MAX31865_write(uint8_t addr, uint8_t data){
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	70fb      	strb	r3, [r7, #3]
 800137c:	4613      	mov	r3, r2
 800137e:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef test;

	uint8_t txBuffer[2];

	addr |= MAX31865_WRITE;                             // Force write bit on address
 8001380:	78fb      	ldrb	r3, [r7, #3]
 8001382:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001386:	70fb      	strb	r3, [r7, #3]
    txBuffer[0] = addr;
 8001388:	78fb      	ldrb	r3, [r7, #3]
 800138a:	733b      	strb	r3, [r7, #12]
    txBuffer[1] = data;
 800138c:	78bb      	ldrb	r3, [r7, #2]
 800138e:	737b      	strb	r3, [r7, #13]
    CLEAR_MAX_CS; 									    // Enable CE
 8001390:	2200      	movs	r2, #0
 8001392:	2101      	movs	r1, #1
 8001394:	480c      	ldr	r0, [pc, #48]	; (80013c8 <_ZN13MAX31865_TEMP14MAX31865_writeEhh+0x58>)
 8001396:	f001 f941 	bl	800261c <HAL_GPIO_WritePin>
    test = HAL_SPI_Transmit(&hspi1,(uint8_t*)txBuffer,2,500);				//write addr
 800139a:	f107 010c 	add.w	r1, r7, #12
 800139e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013a2:	2202      	movs	r2, #2
 80013a4:	4809      	ldr	r0, [pc, #36]	; (80013cc <_ZN13MAX31865_TEMP14MAX31865_writeEhh+0x5c>)
 80013a6:	f003 fff9 	bl	800539c <HAL_SPI_Transmit>
 80013aa:	4603      	mov	r3, r0
 80013ac:	73fb      	strb	r3, [r7, #15]

    SET_MAX_CS;          								// Disable CE
 80013ae:	2201      	movs	r2, #1
 80013b0:	2101      	movs	r1, #1
 80013b2:	4805      	ldr	r0, [pc, #20]	; (80013c8 <_ZN13MAX31865_TEMP14MAX31865_writeEhh+0x58>)
 80013b4:	f001 f932 	bl	800261c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80013b8:	200a      	movs	r0, #10
 80013ba:	f000 fe49 	bl	8002050 <HAL_Delay>
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	48000400 	.word	0x48000400
 80013cc:	20000588 	.word	0x20000588

080013d0 <_ZN13MAX31865_TEMP10enableBiasEh>:
/**
 * Enable of disable MAX831865 bias voltage
 * @param enable Enable of disable
 */
void MAX31865_TEMP::enableBias(uint8_t enable)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	70fb      	strb	r3, [r7, #3]
        status |= MAX31856_CONFIG_BIAS;
    } else
    {
        status &= ~MAX31856_CONFIG_BIAS;
    }*/
    status = 0x80;
 80013dc:	2380      	movs	r3, #128	; 0x80
 80013de:	73fb      	strb	r3, [r7, #15]
    MAX31865_write(MAX31856_CONFIG_REG, status);
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	461a      	mov	r2, r3
 80013e4:	2100      	movs	r1, #0
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff ffc2 	bl	8001370 <_ZN13MAX31865_TEMP14MAX31865_writeEhh>
}
 80013ec:	bf00      	nop
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <_ZN13MAX31865_TEMP11autoConvertEh>:
/**
 * Enable of disable MAX831865 auto convert
 * @param enable Enable of disable
 */
void MAX31865_TEMP::autoConvert(uint8_t enable)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	70fb      	strb	r3, [r7, #3]
    uint8_t status;
    MAX31865_read(MAX31856_CONFIG_REG, &status,1);
 8001400:	f107 020f 	add.w	r2, r7, #15
 8001404:	2301      	movs	r3, #1
 8001406:	2100      	movs	r1, #0
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff7f 	bl	800130c <_ZN13MAX31865_TEMP13MAX31865_readEhPhh>
    if (enable)
 800140e:	78fb      	ldrb	r3, [r7, #3]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d005      	beq.n	8001420 <_ZN13MAX31865_TEMP11autoConvertEh+0x2c>
    {
        status |= MAX31856_CONFIG_MODEAUTO;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800141a:	b2db      	uxtb	r3, r3
 800141c:	73fb      	strb	r3, [r7, #15]
 800141e:	e004      	b.n	800142a <_ZN13MAX31865_TEMP11autoConvertEh+0x36>
    } else
    {
        status &= ~MAX31856_CONFIG_MODEAUTO;
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001426:	b2db      	uxtb	r3, r3
 8001428:	73fb      	strb	r3, [r7, #15]
    }
    MAX31865_write(MAX31856_CONFIG_REG, status);
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	461a      	mov	r2, r3
 800142e:	2100      	movs	r1, #0
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ff9d 	bl	8001370 <_ZN13MAX31865_TEMP14MAX31865_writeEhh>
}
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <_ZN13MAX31865_TEMP8setWiresEh>:
/**
 * Set the amount of wires the temperature sensor uses
 * @param numwires 2,3 or 4 wires
 */
void MAX31865_TEMP::setWires(uint8_t numwires)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b084      	sub	sp, #16
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	460b      	mov	r3, r1
 8001448:	70fb      	strb	r3, [r7, #3]
    uint8_t status;
    MAX31865_read(MAX31856_CONFIG_REG, &status,1);
 800144a:	f107 020f 	add.w	r2, r7, #15
 800144e:	2301      	movs	r3, #1
 8001450:	2100      	movs	r1, #0
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ff5a 	bl	800130c <_ZN13MAX31865_TEMP13MAX31865_readEhPhh>
    if (numwires == 3) // 3-wire
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	2b03      	cmp	r3, #3
 800145c:	d105      	bne.n	800146a <_ZN13MAX31865_TEMP8setWiresEh+0x2c>
    {
        status |= MAX31856_CONFIG_3WIRE;
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	f043 0310 	orr.w	r3, r3, #16
 8001464:	b2db      	uxtb	r3, r3
 8001466:	73fb      	strb	r3, [r7, #15]
 8001468:	e004      	b.n	8001474 <_ZN13MAX31865_TEMP8setWiresEh+0x36>
    } else // 2-4 wire
    {
        status &= ~MAX31856_CONFIG_3WIRE;
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	f023 0310 	bic.w	r3, r3, #16
 8001470:	b2db      	uxtb	r3, r3
 8001472:	73fb      	strb	r3, [r7, #15]
    }
    MAX31865_write(MAX31856_CONFIG_REG, status);
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	461a      	mov	r2, r3
 8001478:	2100      	movs	r1, #0
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ff78 	bl	8001370 <_ZN13MAX31865_TEMP14MAX31865_writeEhh>
}
 8001480:	bf00      	nop
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <_ZN13MAX31865_TEMP11single_shotEv>:

/**
 * Perform a single shot conversion
 */
void MAX31865_TEMP::single_shot(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
    uint8_t status;
    // Read config register
   // MAX31865_read(MAX31856_CONFIG_REG, &status,1);
    // Enable 1shot bit, and write back
    //status = MAX31856_CONFIG_1SHOT;
    status = 0xA0;
 8001490:	23a0      	movs	r3, #160	; 0xa0
 8001492:	73fb      	strb	r3, [r7, #15]
    MAX31865_write(MAX31856_CONFIG_REG, status);
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	461a      	mov	r2, r3
 8001498:	2100      	movs	r1, #0
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ff68 	bl	8001370 <_ZN13MAX31865_TEMP14MAX31865_writeEhh>
}
 80014a0:	bf00      	nop
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <_ZN5ModelC1Ev>:
 *      Author: marce
 */

#include "Model.h"

Model::Model() {
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

	for(uint8_t counter = 0; counter<GPS_DATA_SIZE; counter++){
 80014b0:	2300      	movs	r3, #0
 80014b2:	73fb      	strb	r3, [r7, #15]
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	2b4f      	cmp	r3, #79	; 0x4f
 80014b8:	d80d      	bhi.n	80014d6 <_ZN5ModelC1Ev+0x2e>
		 gpsGCS[counter] = 11;
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	210b      	movs	r1, #11
 80014c0:	54d1      	strb	r1, [r2, r3]
		 gpsDevice[counter] = 22;
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	2216      	movs	r2, #22
 80014ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	for(uint8_t counter = 0; counter<GPS_DATA_SIZE; counter++){
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	3301      	adds	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
 80014d4:	e7ee      	b.n	80014b4 <_ZN5ModelC1Ev+0xc>
	}
	 humidity = 0;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	 pressure = 0;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	 tempOutisde = 0;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	 tempOutisde8Bit = 0;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
	 tempInside = 0;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4618      	mov	r0, r3
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <_ZN5Model10getGPS_GCSEv>:
//get/set GPS_GCS Data
void Model::Model::setGPS_GCS(char* data){
	//not implemented in Device
	//strncpy(gpsGCS, data, GPS_DATA_SIZE);
}
char* Model::getGPS_GCS(void){
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	//not implemented in Device
	return gpsGCS;
 8001514:	687b      	ldr	r3, [r7, #4]
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <_ZN5Model13setGPS_DeviceEPc>:

//get/set GPS_Device Data
void Model::setGPS_Device(char* data){
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	6039      	str	r1, [r7, #0]
	strncpy(gpsDevice, data, GPS_DATA_SIZE);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3350      	adds	r3, #80	; 0x50
 8001530:	2250      	movs	r2, #80	; 0x50
 8001532:	6839      	ldr	r1, [r7, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f008 ffdd 	bl	800a4f4 <strncpy>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <_ZN5Model13getGPS_DeviceEv>:
char* Model::getGPS_Device(void){
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
	return gpsDevice;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3350      	adds	r3, #80	; 0x50
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <_ZN5Model11setHumidityEt>:

//get/set Humidity
void Model::setHumidity(uint16_t data){
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	460b      	mov	r3, r1
 8001564:	807b      	strh	r3, [r7, #2]
	humidity = data;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	887a      	ldrh	r2, [r7, #2]
 800156a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <_ZN5Model11getHumidityEv>:
uint16_t Model::getHumidity(void){
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
	return humidity;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
}
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <_ZN5Model11setPressureEt>:

//get/set Pressure
void Model::setPressure(uint16_t data){
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	807b      	strh	r3, [r7, #2]
	pressure = (data -32768);
 80015a0:	887b      	ldrh	r3, [r7, #2]
 80015a2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <_ZN5Model11getPressureEv>:
uint16_t Model::getPressure(void){
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
	return pressure;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <_ZN5Model14setTempOutsideEt>:

//get/set TempOutise
void Model::setTempOutside(uint16_t data){
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	807b      	strh	r3, [r7, #2]
	tempOutisde = data;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	887a      	ldrh	r2, [r7, #2]
 80015e4:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <_ZN5Model14getTempOutsideEv>:
uint16_t Model::getTempOutside(void){
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	return tempOutisde;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <_ZN5Model13setTempInsideEt>:
uint8_t  Model::getTempOutside8Bit(){
	return tempOutisde8Bit;
}

//get/set TempInside
void Model::setTempInside(uint16_t data){
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	460b      	mov	r3, r1
 8001618:	807b      	strh	r3, [r7, #2]
	tempInside = data;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	887a      	ldrh	r2, [r7, #2]
 800161e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <_ZN5Model12getTempInsedEv>:
uint16_t Model::getTempInsed(void){
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
	return tempInside;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
}
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <_ZN5RFM95C1Ev>:
 */

#include "RFM95.h"
#include "../AppMain/AppMain.h"

RFM95::RFM95() {
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub
}
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <_ZN5SHT21C1EP5Model>:
 *      Author: marce
 */

#include "SHT21.h"

SHT21::SHT21(Model *model) {
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	6039      	str	r1, [r7, #0]
	this->model = model;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	601a      	str	r2, [r3, #0]

}
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <_ZN5SHT219writeByteEh>:

void SHT21::initSHT21(){

}

HAL_StatusTypeDef SHT21::writeByte(uint8_t addr){
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af02      	add	r7, sp, #8
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	70fb      	strb	r3, [r7, #3]
	uint8_t txBuffer[1];
	txBuffer[0] = addr;
 8001688:	78fb      	ldrb	r3, [r7, #3]
 800168a:	733b      	strb	r3, [r7, #12]
	return(HAL_I2C_Master_Transmit(&hi2c1,SHT21_SLAVE_ADDR<<1,(uint8_t*)txBuffer,1,I2C_Timeout));
 800168c:	f107 020c 	add.w	r2, r7, #12
 8001690:	2364      	movs	r3, #100	; 0x64
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2301      	movs	r3, #1
 8001696:	2180      	movs	r1, #128	; 0x80
 8001698:	4803      	ldr	r0, [pc, #12]	; (80016a8 <_ZN5SHT219writeByteEh+0x2c>)
 800169a:	f001 f87f 	bl	800279c <HAL_I2C_Master_Transmit>
 800169e:	4603      	mov	r3, r0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	2000053c 	.word	0x2000053c

080016ac <_ZN5SHT2113readSHT21TempEv>:


uint32_t SHT21::readSHT21Temp(){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af02      	add	r7, sp, #8
 80016b2:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2];
	writeByte(SHT21_TEMP_REG);
 80016b4:	21e3      	movs	r1, #227	; 0xe3
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ffe0 	bl	800167c <_ZN5SHT219writeByteEh>
	/*Warten bis Messung beendet*/
	while(HAL_I2C_Master_Receive(&hi2c1,SHT21_SLAVE_ADDR<<1,buffer,2,I2C_Timeout) != HAL_OK);
 80016bc:	f107 020c 	add.w	r2, r7, #12
 80016c0:	2364      	movs	r3, #100	; 0x64
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	2302      	movs	r3, #2
 80016c6:	2180      	movs	r1, #128	; 0x80
 80016c8:	4810      	ldr	r0, [pc, #64]	; (800170c <_ZN5SHT2113readSHT21TempEv+0x60>)
 80016ca:	f001 f95b 	bl	8002984 <HAL_I2C_Master_Receive>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	bf14      	ite	ne
 80016d4:	2301      	movne	r3, #1
 80016d6:	2300      	moveq	r3, #0
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d000      	beq.n	80016e0 <_ZN5SHT2113readSHT21TempEv+0x34>
 80016de:	e7ed      	b.n	80016bc <_ZN5SHT2113readSHT21TempEv+0x10>
	model->setTempOutside((buffer[0]<<8)+buffer[1]);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6818      	ldr	r0, [r3, #0]
 80016e4:	7b3b      	ldrb	r3, [r7, #12]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	021b      	lsls	r3, r3, #8
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	7b7b      	ldrb	r3, [r7, #13]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	4413      	add	r3, r2
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	4619      	mov	r1, r3
 80016f6:	f7ff ff6d 	bl	80015d4 <_ZN5Model14setTempOutsideEt>
	return((buffer[0]<<8)+buffer[1]);
 80016fa:	7b3b      	ldrb	r3, [r7, #12]
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	7b7a      	ldrb	r2, [r7, #13]
 8001700:	4413      	add	r3, r2
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	2000053c 	.word	0x2000053c

08001710 <_ZN5SHT2117readSHT21HumidityEv>:

uint32_t SHT21::readSHT21Humidity(){
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af02      	add	r7, sp, #8
 8001716:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2];
	writeByte(SHT21_HUMIDITY_REG);
 8001718:	21e5      	movs	r1, #229	; 0xe5
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff ffae 	bl	800167c <_ZN5SHT219writeByteEh>
	while(HAL_I2C_Master_Receive(&hi2c1,SHT21_SLAVE_ADDR<<1,buffer,2,I2C_Timeout) != HAL_OK);
 8001720:	f107 020c 	add.w	r2, r7, #12
 8001724:	2364      	movs	r3, #100	; 0x64
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	2302      	movs	r3, #2
 800172a:	2180      	movs	r1, #128	; 0x80
 800172c:	4810      	ldr	r0, [pc, #64]	; (8001770 <_ZN5SHT2117readSHT21HumidityEv+0x60>)
 800172e:	f001 f929 	bl	8002984 <HAL_I2C_Master_Receive>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	bf14      	ite	ne
 8001738:	2301      	movne	r3, #1
 800173a:	2300      	moveq	r3, #0
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d000      	beq.n	8001744 <_ZN5SHT2117readSHT21HumidityEv+0x34>
 8001742:	e7ed      	b.n	8001720 <_ZN5SHT2117readSHT21HumidityEv+0x10>
	model->setHumidity((buffer[0]<<8)+buffer[1]);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	7b3b      	ldrb	r3, [r7, #12]
 800174a:	b29b      	uxth	r3, r3
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	b29a      	uxth	r2, r3
 8001750:	7b7b      	ldrb	r3, [r7, #13]
 8001752:	b29b      	uxth	r3, r3
 8001754:	4413      	add	r3, r2
 8001756:	b29b      	uxth	r3, r3
 8001758:	4619      	mov	r1, r3
 800175a:	f7ff fefe 	bl	800155a <_ZN5Model11setHumidityEt>
	return((buffer[0]<<8)+buffer[1]);
 800175e:	7b3b      	ldrb	r3, [r7, #12]
 8001760:	021b      	lsls	r3, r3, #8
 8001762:	7b7a      	ldrb	r2, [r7, #13]
 8001764:	4413      	add	r3, r2
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	2000053c 	.word	0x2000053c

08001774 <_ZN7USB_ComC1Ev>:
 *      Author: marce
 */

#include "USBCom.h"

USB_Com::USB_Com() {
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub

}
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <_ZN7USB_Com11usbTransmitEPhh>:


bool USB_Com::usbTransmit(uint8_t *data, uint8_t size){
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	60f8      	str	r0, [r7, #12]
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	4613      	mov	r3, r2
 8001796:	71fb      	strb	r3, [r7, #7]
	uint16_t counter = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	82fb      	strh	r3, [r7, #22]
	while(CDC_Transmit_FS((uint8_t*) data, size) != USBD_OK){
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	4619      	mov	r1, r3
 80017a2:	68b8      	ldr	r0, [r7, #8]
 80017a4:	f008 f996 	bl	8009ad4 <CDC_Transmit_FS>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	bf14      	ite	ne
 80017ae:	2301      	movne	r3, #1
 80017b0:	2300      	moveq	r3, #0
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d007      	beq.n	80017c8 <_ZN7USB_Com11usbTransmitEPhh+0x3e>
		counter++;
 80017b8:	8afb      	ldrh	r3, [r7, #22]
 80017ba:	3301      	adds	r3, #1
 80017bc:	82fb      	strh	r3, [r7, #22]
		if(counter >= USB_TIMEOUT){
 80017be:	8afb      	ldrh	r3, [r7, #22]
 80017c0:	2b63      	cmp	r3, #99	; 0x63
 80017c2:	d9eb      	bls.n	800179c <_ZN7USB_Com11usbTransmitEPhh+0x12>
			return false;	//Trasmit faild
 80017c4:	2300      	movs	r3, #0
 80017c6:	e000      	b.n	80017ca <_ZN7USB_Com11usbTransmitEPhh+0x40>
		}
	}
	return true;	//Transmit successful
 80017c8:	2301      	movs	r3, #1
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017da:	f107 030c 	add.w	r3, r7, #12
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ea:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <MX_GPIO_Init+0x124>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	4a42      	ldr	r2, [pc, #264]	; (80018f8 <MX_GPIO_Init+0x124>)
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f6:	4b40      	ldr	r3, [pc, #256]	; (80018f8 <MX_GPIO_Init+0x124>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	4b3d      	ldr	r3, [pc, #244]	; (80018f8 <MX_GPIO_Init+0x124>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001806:	4a3c      	ldr	r2, [pc, #240]	; (80018f8 <MX_GPIO_Init+0x124>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180e:	4b3a      	ldr	r3, [pc, #232]	; (80018f8 <MX_GPIO_Init+0x124>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <MX_GPIO_Init+0x124>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	4a36      	ldr	r2, [pc, #216]	; (80018f8 <MX_GPIO_Init+0x124>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001826:	4b34      	ldr	r3, [pc, #208]	; (80018f8 <MX_GPIO_Init+0x124>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|RFM_NSS_Pin, GPIO_PIN_RESET);
 8001832:	2200      	movs	r2, #0
 8001834:	f248 0102 	movw	r1, #32770	; 0x8002
 8001838:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183c:	f000 feee 	bl	800261c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAX_CS_Pin|MAX_DRDY_Pin|RFM_RST_Pin, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	210b      	movs	r1, #11
 8001844:	482d      	ldr	r0, [pc, #180]	; (80018fc <MX_GPIO_Init+0x128>)
 8001846:	f000 fee9 	bl	800261c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RFM_DIO2_Pin|RFM_DIO1_Pin;
 800184a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800184e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001850:	2300      	movs	r3, #0
 8001852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	4619      	mov	r1, r3
 800185e:	4828      	ldr	r0, [pc, #160]	; (8001900 <MX_GPIO_Init+0x12c>)
 8001860:	f000 fd6a 	bl	8002338 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NC_Pin|NCA8_Pin;
 8001864:	f240 1301 	movw	r3, #257	; 0x101
 8001868:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800186a:	2303      	movs	r3, #3
 800186c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	f107 030c 	add.w	r3, r7, #12
 8001876:	4619      	mov	r1, r3
 8001878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187c:	f000 fd5c 	bl	8002338 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Pin|RFM_NSS_Pin;
 8001880:	f248 0302 	movw	r3, #32770	; 0x8002
 8001884:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	2301      	movs	r3, #1
 8001888:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 030c 	add.w	r3, r7, #12
 8001896:	4619      	mov	r1, r3
 8001898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189c:	f000 fd4c 	bl	8002338 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PRESSURE_INT_Pin;
 80018a0:	2310      	movs	r3, #16
 80018a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018a4:	4b17      	ldr	r3, [pc, #92]	; (8001904 <MX_GPIO_Init+0x130>)
 80018a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PRESSURE_INT_GPIO_Port, &GPIO_InitStruct);
 80018ac:	f107 030c 	add.w	r3, r7, #12
 80018b0:	4619      	mov	r1, r3
 80018b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b6:	f000 fd3f 	bl	8002338 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MAX_CS_Pin|MAX_DRDY_Pin|RFM_RST_Pin;
 80018ba:	230b      	movs	r3, #11
 80018bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018be:	2301      	movs	r3, #1
 80018c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ca:	f107 030c 	add.w	r3, r7, #12
 80018ce:	4619      	mov	r1, r3
 80018d0:	480a      	ldr	r0, [pc, #40]	; (80018fc <MX_GPIO_Init+0x128>)
 80018d2:	f000 fd31 	bl	8002338 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RFM_DIO5_Pin|RFM_DIO3_Pin|RFM_DIO4_Pin|RFM_DIO0_Pin;
 80018d6:	23f0      	movs	r3, #240	; 0xf0
 80018d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e2:	f107 030c 	add.w	r3, r7, #12
 80018e6:	4619      	mov	r1, r3
 80018e8:	4804      	ldr	r0, [pc, #16]	; (80018fc <MX_GPIO_Init+0x128>)
 80018ea:	f000 fd25 	bl	8002338 <HAL_GPIO_Init>

}
 80018ee:	bf00      	nop
 80018f0:	3720      	adds	r7, #32
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40021000 	.word	0x40021000
 80018fc:	48000400 	.word	0x48000400
 8001900:	48000800 	.word	0x48000800
 8001904:	10110000 	.word	0x10110000

08001908 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <MX_I2C1_Init+0x74>)
 800190e:	4a1c      	ldr	r2, [pc, #112]	; (8001980 <MX_I2C1_Init+0x78>)
 8001910:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001912:	4b1a      	ldr	r3, [pc, #104]	; (800197c <MX_I2C1_Init+0x74>)
 8001914:	4a1b      	ldr	r2, [pc, #108]	; (8001984 <MX_I2C1_Init+0x7c>)
 8001916:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001918:	4b18      	ldr	r3, [pc, #96]	; (800197c <MX_I2C1_Init+0x74>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800191e:	4b17      	ldr	r3, [pc, #92]	; (800197c <MX_I2C1_Init+0x74>)
 8001920:	2201      	movs	r2, #1
 8001922:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001924:	4b15      	ldr	r3, [pc, #84]	; (800197c <MX_I2C1_Init+0x74>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800192a:	4b14      	ldr	r3, [pc, #80]	; (800197c <MX_I2C1_Init+0x74>)
 800192c:	2200      	movs	r2, #0
 800192e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <MX_I2C1_Init+0x74>)
 8001932:	2200      	movs	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <MX_I2C1_Init+0x74>)
 8001938:	2200      	movs	r2, #0
 800193a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <MX_I2C1_Init+0x74>)
 800193e:	2200      	movs	r2, #0
 8001940:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001942:	480e      	ldr	r0, [pc, #56]	; (800197c <MX_I2C1_Init+0x74>)
 8001944:	f000 fe9b 	bl	800267e <HAL_I2C_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800194e:	f000 f929 	bl	8001ba4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001952:	2100      	movs	r1, #0
 8001954:	4809      	ldr	r0, [pc, #36]	; (800197c <MX_I2C1_Init+0x74>)
 8001956:	f001 fc59 	bl	800320c <HAL_I2CEx_ConfigAnalogFilter>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001960:	f000 f920 	bl	8001ba4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001964:	2100      	movs	r1, #0
 8001966:	4805      	ldr	r0, [pc, #20]	; (800197c <MX_I2C1_Init+0x74>)
 8001968:	f001 fc9b 	bl	80032a2 <HAL_I2CEx_ConfigDigitalFilter>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001972:	f000 f917 	bl	8001ba4 <Error_Handler>
  }

}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	2000053c 	.word	0x2000053c
 8001980:	40005400 	.word	0x40005400
 8001984:	00707cbb 	.word	0x00707cbb

08001988 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a18      	ldr	r2, [pc, #96]	; (8001a08 <HAL_I2C_MspInit+0x80>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d129      	bne.n	80019fe <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019aa:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <HAL_I2C_MspInit+0x84>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	4a17      	ldr	r2, [pc, #92]	; (8001a0c <HAL_I2C_MspInit+0x84>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <HAL_I2C_MspInit+0x84>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019c8:	2312      	movs	r3, #18
 80019ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019cc:	2301      	movs	r3, #1
 80019ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d0:	2303      	movs	r3, #3
 80019d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019d4:	2304      	movs	r3, #4
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4619      	mov	r1, r3
 80019de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e2:	f000 fca9 	bl	8002338 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_I2C_MspInit+0x84>)
 80019e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ea:	4a08      	ldr	r2, [pc, #32]	; (8001a0c <HAL_I2C_MspInit+0x84>)
 80019ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019f0:	6593      	str	r3, [r2, #88]	; 0x58
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_I2C_MspInit+0x84>)
 80019f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80019fe:	bf00      	nop
 8001a00:	3728      	adds	r7, #40	; 0x28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40005400 	.word	0x40005400
 8001a0c:	40021000 	.word	0x40021000

08001a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a14:	f000 faab 	bl	8001f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a18:	f000 f826 	bl	8001a68 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a1c:	f7ff feda 	bl	80017d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a20:	f7ff ff72 	bl	8001908 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001a24:	f000 f8e4 	bl	8001bf0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001a28:	f000 f9fe 	bl	8001e28 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001a2c:	f007 ff94 	bl	8009958 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_MspInit(&huart2);		//UART init
 8001a30:	4808      	ldr	r0, [pc, #32]	; (8001a54 <main+0x44>)
 8001a32:	f000 fa29 	bl	8001e88 <HAL_UART_MspInit>
  HAL_SPI_MspInit(&hspi1);		//SPI init
 8001a36:	4808      	ldr	r0, [pc, #32]	; (8001a58 <main+0x48>)
 8001a38:	f000 f918 	bl	8001c6c <HAL_SPI_MspInit>
  HAL_I2C_MspInit(&hi2c1);		//I2C init
 8001a3c:	4807      	ldr	r0, [pc, #28]	; (8001a5c <main+0x4c>)
 8001a3e:	f7ff ffa3 	bl	8001988 <HAL_I2C_MspInit>
  HAL_UART_Receive_IT(&huart2, rxData, 1);
 8001a42:	2201      	movs	r2, #1
 8001a44:	4906      	ldr	r1, [pc, #24]	; (8001a60 <main+0x50>)
 8001a46:	4803      	ldr	r0, [pc, #12]	; (8001a54 <main+0x44>)
 8001a48:	f004 fb0c 	bl	8006064 <HAL_UART_Receive_IT>
  appMain.mainProg();
 8001a4c:	4805      	ldr	r0, [pc, #20]	; (8001a64 <main+0x54>)
 8001a4e:	f7ff f991 	bl	8000d74 <_ZN7AppMain8mainProgEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a52:	e7fe      	b.n	8001a52 <main+0x42>
 8001a54:	200005ec 	.word	0x200005ec
 8001a58:	20000588 	.word	0x20000588
 8001a5c:	2000053c 	.word	0x2000053c
 8001a60:	20000318 	.word	0x20000318
 8001a64:	200001ac 	.word	0x200001ac

08001a68 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b0a4      	sub	sp, #144	; 0x90
 8001a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a72:	2244      	movs	r2, #68	; 0x44
 8001a74:	2100      	movs	r1, #0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f008 fd34 	bl	800a4e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	2234      	movs	r2, #52	; 0x34
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f008 fd26 	bl	800a4e4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a98:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a9c:	f002 fb9e 	bl	80041dc <HAL_PWREx_ControlVoltageScaling>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	bf14      	ite	ne
 8001aa6:	2301      	movne	r3, #1
 8001aa8:	2300      	moveq	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <_Z18SystemClock_Configv+0x4c>
  {
    Error_Handler();
 8001ab0:	f000 f878 	bl	8001ba4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001ab4:	2322      	movs	r3, #34	; 0x22
 8001ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ab8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001abc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ac2:	2340      	movs	r3, #64	; 0x40
 8001ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001aca:	2302      	movs	r3, #2
 8001acc:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001ad4:	2308      	movs	r3, #8
 8001ad6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ada:	2302      	movs	r3, #2
 8001adc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ae6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aea:	4618      	mov	r0, r3
 8001aec:	f002 fbdc 	bl	80042a8 <HAL_RCC_OscConfig>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	bf14      	ite	ne
 8001af6:	2301      	movne	r3, #1
 8001af8:	2300      	moveq	r3, #0
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <_Z18SystemClock_Configv+0x9c>
  {
    Error_Handler();
 8001b00:	f000 f850 	bl	8001ba4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b04:	230f      	movs	r3, #15
 8001b06:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b10:	2300      	movs	r3, #0
 8001b12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b14:	2300      	movs	r3, #0
 8001b16:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f003 f828 	bl	8004b74 <HAL_RCC_ClockConfig>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	bf14      	ite	ne
 8001b2a:	2301      	movne	r3, #1
 8001b2c:	2300      	moveq	r3, #0
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <_Z18SystemClock_Configv+0xd0>
  {
    Error_Handler();
 8001b34:	f000 f836 	bl	8001ba4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001b38:	f242 0342 	movw	r3, #8258	; 0x2042
 8001b3c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001b46:	2300      	movs	r3, #0
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f003 fa15 	bl	8004f7c <HAL_RCCEx_PeriphCLKConfig>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	bf14      	ite	ne
 8001b58:	2301      	movne	r3, #1
 8001b5a:	2300      	moveq	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <_Z18SystemClock_Configv+0xfe>
  {
    Error_Handler();
 8001b62:	f000 f81f 	bl	8001ba4 <Error_Handler>
  }
}
 8001b66:	bf00      	nop
 8001b68:	3790      	adds	r7, #144	; 0x90
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, rxData, 1);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	4907      	ldr	r1, [pc, #28]	; (8001b98 <HAL_UART_RxCpltCallback+0x28>)
 8001b7c:	4807      	ldr	r0, [pc, #28]	; (8001b9c <HAL_UART_RxCpltCallback+0x2c>)
 8001b7e:	f004 fa71 	bl	8006064 <HAL_UART_Receive_IT>
	appMain.gps.gpsInterrupt(rxData[0]);
 8001b82:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_UART_RxCpltCallback+0x28>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	4619      	mov	r1, r3
 8001b88:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <HAL_UART_RxCpltCallback+0x30>)
 8001b8a:	f7ff fa99 	bl	80010c0 <_ZN3GPS12gpsInterruptEh>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000318 	.word	0x20000318
 8001b9c:	200005ec 	.word	0x200005ec
 8001ba0:	20000268 	.word	0x20000268

08001ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <_Z41__static_initialization_and_destruction_0ii>:
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d107      	bne.n	8001bd4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d102      	bne.n	8001bd4 <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain;
 8001bce:	4803      	ldr	r0, [pc, #12]	; (8001bdc <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001bd0:	f7ff f89c 	bl	8000d0c <_ZN7AppMainC1Ev>
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	200001ac 	.word	0x200001ac

08001be0 <_GLOBAL__sub_I_appMain>:
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001be8:	2001      	movs	r0, #1
 8001bea:	f7ff ffe3 	bl	8001bb4 <_Z41__static_initialization_and_destruction_0ii>
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <MX_SPI1_Init+0x74>)
 8001bf6:	4a1c      	ldr	r2, [pc, #112]	; (8001c68 <MX_SPI1_Init+0x78>)
 8001bf8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bfa:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <MX_SPI1_Init+0x74>)
 8001bfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c02:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <MX_SPI1_Init+0x74>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c08:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <MX_SPI1_Init+0x74>)
 8001c0a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c0e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c10:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <MX_SPI1_Init+0x74>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c16:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <MX_SPI1_Init+0x74>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <MX_SPI1_Init+0x74>)
 8001c1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c22:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c24:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <MX_SPI1_Init+0x74>)
 8001c26:	2218      	movs	r2, #24
 8001c28:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <MX_SPI1_Init+0x74>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <MX_SPI1_Init+0x74>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c36:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <MX_SPI1_Init+0x74>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c3c:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <MX_SPI1_Init+0x74>)
 8001c3e:	2207      	movs	r2, #7
 8001c40:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <MX_SPI1_Init+0x74>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <MX_SPI1_Init+0x74>)
 8001c4a:	2208      	movs	r2, #8
 8001c4c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c4e:	4805      	ldr	r0, [pc, #20]	; (8001c64 <MX_SPI1_Init+0x74>)
 8001c50:	f003 fb1a 	bl	8005288 <HAL_SPI_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c5a:	f7ff ffa3 	bl	8001ba4 <Error_Handler>
  }

}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000588 	.word	0x20000588
 8001c68:	40013000 	.word	0x40013000

08001c6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	; 0x28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a17      	ldr	r2, [pc, #92]	; (8001ce8 <HAL_SPI_MspInit+0x7c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d128      	bne.n	8001ce0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c8e:	4b17      	ldr	r3, [pc, #92]	; (8001cec <HAL_SPI_MspInit+0x80>)
 8001c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c92:	4a16      	ldr	r2, [pc, #88]	; (8001cec <HAL_SPI_MspInit+0x80>)
 8001c94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c98:	6613      	str	r3, [r2, #96]	; 0x60
 8001c9a:	4b14      	ldr	r3, [pc, #80]	; (8001cec <HAL_SPI_MspInit+0x80>)
 8001c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <HAL_SPI_MspInit+0x80>)
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001caa:	4a10      	ldr	r2, [pc, #64]	; (8001cec <HAL_SPI_MspInit+0x80>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <HAL_SPI_MspInit+0x80>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001cbe:	23e0      	movs	r3, #224	; 0xe0
 8001cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cce:	2305      	movs	r3, #5
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cdc:	f000 fb2c 	bl	8002338 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	3728      	adds	r7, #40	; 0x28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40013000 	.word	0x40013000
 8001cec:	40021000 	.word	0x40021000

08001cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf6:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <HAL_MspInit+0x44>)
 8001cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cfa:	4a0e      	ldr	r2, [pc, #56]	; (8001d34 <HAL_MspInit+0x44>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6613      	str	r3, [r2, #96]	; 0x60
 8001d02:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <HAL_MspInit+0x44>)
 8001d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_MspInit+0x44>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	4a08      	ldr	r2, [pc, #32]	; (8001d34 <HAL_MspInit+0x44>)
 8001d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d18:	6593      	str	r3, [r2, #88]	; 0x58
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_MspInit+0x44>)
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000

08001d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d4a:	e7fe      	b.n	8001d4a <HardFault_Handler+0x4>

08001d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <MemManage_Handler+0x4>

08001d52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d56:	e7fe      	b.n	8001d56 <BusFault_Handler+0x4>

08001d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <UsageFault_Handler+0x4>

08001d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d8c:	f000 f942 	bl	8002014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d98:	4802      	ldr	r0, [pc, #8]	; (8001da4 <USART2_IRQHandler+0x10>)
 8001d9a:	f004 fa05 	bl	80061a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200005ec 	.word	0x200005ec

08001da8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001dac:	4802      	ldr	r0, [pc, #8]	; (8001db8 <USB_IRQHandler+0x10>)
 8001dae:	f001 fbce 	bl	800354e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20001304 	.word	0x20001304

08001dbc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc0:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <SystemInit+0x64>)
 8001dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc6:	4a16      	ldr	r2, [pc, #88]	; (8001e20 <SystemInit+0x64>)
 8001dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001dd0:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <SystemInit+0x68>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a13      	ldr	r2, [pc, #76]	; (8001e24 <SystemInit+0x68>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <SystemInit+0x68>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <SystemInit+0x68>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a0f      	ldr	r2, [pc, #60]	; (8001e24 <SystemInit+0x68>)
 8001de8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001dec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001df0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <SystemInit+0x68>)
 8001df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001df8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <SystemInit+0x68>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a09      	ldr	r2, [pc, #36]	; (8001e24 <SystemInit+0x68>)
 8001e00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e04:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001e06:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <SystemInit+0x68>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e0c:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <SystemInit+0x64>)
 8001e0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e12:	609a      	str	r2, [r3, #8]
#endif
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000ed00 	.word	0xe000ed00
 8001e24:	40021000 	.word	0x40021000

08001e28 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001e2c:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <MX_USART2_UART_Init+0x58>)
 8001e2e:	4a15      	ldr	r2, [pc, #84]	; (8001e84 <MX_USART2_UART_Init+0x5c>)
 8001e30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <MX_USART2_UART_Init+0x58>)
 8001e34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e3a:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <MX_USART2_UART_Init+0x58>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e40:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <MX_USART2_UART_Init+0x58>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <MX_USART2_UART_Init+0x58>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <MX_USART2_UART_Init+0x58>)
 8001e4e:	2204      	movs	r2, #4
 8001e50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <MX_USART2_UART_Init+0x58>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e58:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <MX_USART2_UART_Init+0x58>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <MX_USART2_UART_Init+0x58>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <MX_USART2_UART_Init+0x58>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e6a:	4805      	ldr	r0, [pc, #20]	; (8001e80 <MX_USART2_UART_Init+0x58>)
 8001e6c:	f004 f8ac 	bl	8005fc8 <HAL_UART_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001e76:	f7ff fe95 	bl	8001ba4 <Error_Handler>
  }

}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200005ec 	.word	0x200005ec
 8001e84:	40004400 	.word	0x40004400

08001e88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	; 0x28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a1b      	ldr	r2, [pc, #108]	; (8001f14 <HAL_UART_MspInit+0x8c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d130      	bne.n	8001f0c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <HAL_UART_MspInit+0x90>)
 8001eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eae:	4a1a      	ldr	r2, [pc, #104]	; (8001f18 <HAL_UART_MspInit+0x90>)
 8001eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb4:	6593      	str	r3, [r2, #88]	; 0x58
 8001eb6:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <HAL_UART_MspInit+0x90>)
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec2:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <HAL_UART_MspInit+0x90>)
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec6:	4a14      	ldr	r2, [pc, #80]	; (8001f18 <HAL_UART_MspInit+0x90>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ece:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <HAL_UART_MspInit+0x90>)
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001eda:	230c      	movs	r3, #12
 8001edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eea:	2307      	movs	r3, #7
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef8:	f000 fa1e 	bl	8002338 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2100      	movs	r1, #0
 8001f00:	2026      	movs	r0, #38	; 0x26
 8001f02:	f000 f9a2 	bl	800224a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f06:	2026      	movs	r0, #38	; 0x26
 8001f08:	f000 f9bb 	bl	8002282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	3728      	adds	r7, #40	; 0x28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40004400 	.word	0x40004400
 8001f18:	40021000 	.word	0x40021000

08001f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f54 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001f20:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001f22:	e003      	b.n	8001f2c <LoopCopyDataInit>

08001f24 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001f26:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001f28:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001f2a:	3104      	adds	r1, #4

08001f2c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001f2c:	480b      	ldr	r0, [pc, #44]	; (8001f5c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001f30:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001f32:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001f34:	d3f6      	bcc.n	8001f24 <CopyDataInit>
	ldr	r2, =_sbss
 8001f36:	4a0b      	ldr	r2, [pc, #44]	; (8001f64 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001f38:	e002      	b.n	8001f40 <LoopFillZerobss>

08001f3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f3a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001f3c:	f842 3b04 	str.w	r3, [r2], #4

08001f40 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <LoopForever+0x16>)
	cmp	r2, r3
 8001f42:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001f44:	d3f9      	bcc.n	8001f3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f46:	f7ff ff39 	bl	8001dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f4a:	f008 faa7 	bl	800a49c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f4e:	f7ff fd5f 	bl	8001a10 <main>

08001f52 <LoopForever>:

LoopForever:
    b LoopForever
 8001f52:	e7fe      	b.n	8001f52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f54:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8001f58:	0800a5dc 	.word	0x0800a5dc
	ldr	r0, =_sdata
 8001f5c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001f60:	2000018c 	.word	0x2000018c
	ldr	r2, =_sbss
 8001f64:	2000018c 	.word	0x2000018c
	ldr	r3, = _ebss
 8001f68:	20001578 	.word	0x20001578

08001f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f6c:	e7fe      	b.n	8001f6c <ADC1_2_IRQHandler>

08001f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f78:	2003      	movs	r0, #3
 8001f7a:	f000 f95b 	bl	8002234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f000 f80e 	bl	8001fa0 <HAL_InitTick>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d002      	beq.n	8001f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	71fb      	strb	r3, [r7, #7]
 8001f8e:	e001      	b.n	8001f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f90:	f7ff feae 	bl	8001cf0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f94:	79fb      	ldrb	r3, [r7, #7]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001fac:	4b16      	ldr	r3, [pc, #88]	; (8002008 <HAL_InitTick+0x68>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d022      	beq.n	8001ffa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001fb4:	4b15      	ldr	r3, [pc, #84]	; (800200c <HAL_InitTick+0x6c>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b13      	ldr	r3, [pc, #76]	; (8002008 <HAL_InitTick+0x68>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 f968 	bl	800229e <HAL_SYSTICK_Config>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10f      	bne.n	8001ff4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b0f      	cmp	r3, #15
 8001fd8:	d809      	bhi.n	8001fee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe2:	f000 f932 	bl	800224a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <HAL_InitTick+0x70>)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6013      	str	r3, [r2, #0]
 8001fec:	e007      	b.n	8001ffe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	73fb      	strb	r3, [r7, #15]
 8001ff2:	e004      	b.n	8001ffe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	73fb      	strb	r3, [r7, #15]
 8001ff8:	e001      	b.n	8001ffe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20000008 	.word	0x20000008
 800200c:	20000000 	.word	0x20000000
 8002010:	20000004 	.word	0x20000004

08002014 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <HAL_IncTick+0x1c>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4b05      	ldr	r3, [pc, #20]	; (8002034 <HAL_IncTick+0x20>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4413      	add	r3, r2
 8002022:	4a03      	ldr	r2, [pc, #12]	; (8002030 <HAL_IncTick+0x1c>)
 8002024:	6013      	str	r3, [r2, #0]
}
 8002026:	bf00      	nop
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	2000066c 	.word	0x2000066c
 8002034:	20000008 	.word	0x20000008

08002038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return uwTick;
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <HAL_GetTick+0x14>)
 800203e:	681b      	ldr	r3, [r3, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	2000066c 	.word	0x2000066c

08002050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002058:	f7ff ffee 	bl	8002038 <HAL_GetTick>
 800205c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002068:	d004      	beq.n	8002074 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800206a:	4b09      	ldr	r3, [pc, #36]	; (8002090 <HAL_Delay+0x40>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	4413      	add	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002074:	bf00      	nop
 8002076:	f7ff ffdf 	bl	8002038 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	429a      	cmp	r2, r3
 8002084:	d8f7      	bhi.n	8002076 <HAL_Delay+0x26>
  {
  }
}
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000008 	.word	0x20000008

08002094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020b0:	4013      	ands	r3, r2
 80020b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c6:	4a04      	ldr	r2, [pc, #16]	; (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	60d3      	str	r3, [r2, #12]
}
 80020cc:	bf00      	nop
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <__NVIC_GetPriorityGrouping+0x18>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	0a1b      	lsrs	r3, r3, #8
 80020e6:	f003 0307 	and.w	r3, r3, #7
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	2b00      	cmp	r3, #0
 8002108:	db0b      	blt.n	8002122 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	f003 021f 	and.w	r2, r3, #31
 8002110:	4907      	ldr	r1, [pc, #28]	; (8002130 <__NVIC_EnableIRQ+0x38>)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	2001      	movs	r0, #1
 800211a:	fa00 f202 	lsl.w	r2, r0, r2
 800211e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000e100 	.word	0xe000e100

08002134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	6039      	str	r1, [r7, #0]
 800213e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002144:	2b00      	cmp	r3, #0
 8002146:	db0a      	blt.n	800215e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	b2da      	uxtb	r2, r3
 800214c:	490c      	ldr	r1, [pc, #48]	; (8002180 <__NVIC_SetPriority+0x4c>)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	0112      	lsls	r2, r2, #4
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	440b      	add	r3, r1
 8002158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800215c:	e00a      	b.n	8002174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	b2da      	uxtb	r2, r3
 8002162:	4908      	ldr	r1, [pc, #32]	; (8002184 <__NVIC_SetPriority+0x50>)
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	3b04      	subs	r3, #4
 800216c:	0112      	lsls	r2, r2, #4
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	440b      	add	r3, r1
 8002172:	761a      	strb	r2, [r3, #24]
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000e100 	.word	0xe000e100
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002188:	b480      	push	{r7}
 800218a:	b089      	sub	sp, #36	; 0x24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f1c3 0307 	rsb	r3, r3, #7
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	bf28      	it	cs
 80021a6:	2304      	movcs	r3, #4
 80021a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3304      	adds	r3, #4
 80021ae:	2b06      	cmp	r3, #6
 80021b0:	d902      	bls.n	80021b8 <NVIC_EncodePriority+0x30>
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3b03      	subs	r3, #3
 80021b6:	e000      	b.n	80021ba <NVIC_EncodePriority+0x32>
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021bc:	f04f 32ff 	mov.w	r2, #4294967295
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43da      	mvns	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	401a      	ands	r2, r3
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d0:	f04f 31ff 	mov.w	r1, #4294967295
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	fa01 f303 	lsl.w	r3, r1, r3
 80021da:	43d9      	mvns	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e0:	4313      	orrs	r3, r2
         );
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3724      	adds	r7, #36	; 0x24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002200:	d301      	bcc.n	8002206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002202:	2301      	movs	r3, #1
 8002204:	e00f      	b.n	8002226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002206:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <SysTick_Config+0x40>)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3b01      	subs	r3, #1
 800220c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800220e:	210f      	movs	r1, #15
 8002210:	f04f 30ff 	mov.w	r0, #4294967295
 8002214:	f7ff ff8e 	bl	8002134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <SysTick_Config+0x40>)
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800221e:	4b04      	ldr	r3, [pc, #16]	; (8002230 <SysTick_Config+0x40>)
 8002220:	2207      	movs	r2, #7
 8002222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	e000e010 	.word	0xe000e010

08002234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff ff29 	bl	8002094 <__NVIC_SetPriorityGrouping>
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b086      	sub	sp, #24
 800224e:	af00      	add	r7, sp, #0
 8002250:	4603      	mov	r3, r0
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607a      	str	r2, [r7, #4]
 8002256:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800225c:	f7ff ff3e 	bl	80020dc <__NVIC_GetPriorityGrouping>
 8002260:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	6978      	ldr	r0, [r7, #20]
 8002268:	f7ff ff8e 	bl	8002188 <NVIC_EncodePriority>
 800226c:	4602      	mov	r2, r0
 800226e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002272:	4611      	mov	r1, r2
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff5d 	bl	8002134 <__NVIC_SetPriority>
}
 800227a:	bf00      	nop
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	4603      	mov	r3, r0
 800228a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800228c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff31 	bl	80020f8 <__NVIC_EnableIRQ>
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff ffa2 	bl	80021f0 <SysTick_Config>
 80022ac:	4603      	mov	r3, r0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b084      	sub	sp, #16
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d005      	beq.n	80022da <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2204      	movs	r2, #4
 80022d2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
 80022d8:	e029      	b.n	800232e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 020e 	bic.w	r2, r2, #14
 80022e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0201 	bic.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fe:	f003 021c 	and.w	r2, r3, #28
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	2101      	movs	r1, #1
 8002308:	fa01 f202 	lsl.w	r2, r1, r2
 800230c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	4798      	blx	r3
    }
  }
  return status;
 800232e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002338:	b480      	push	{r7}
 800233a:	b087      	sub	sp, #28
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002346:	e14e      	b.n	80025e6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	2101      	movs	r1, #1
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	fa01 f303 	lsl.w	r3, r1, r3
 8002354:	4013      	ands	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 8140 	beq.w	80025e0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d00b      	beq.n	8002380 <HAL_GPIO_Init+0x48>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b02      	cmp	r3, #2
 800236e:	d007      	beq.n	8002380 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002374:	2b11      	cmp	r3, #17
 8002376:	d003      	beq.n	8002380 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b12      	cmp	r3, #18
 800237e:	d130      	bne.n	80023e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	2203      	movs	r2, #3
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4013      	ands	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023b6:	2201      	movs	r2, #1
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4013      	ands	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	091b      	lsrs	r3, r3, #4
 80023cc:	f003 0201 	and.w	r2, r3, #1
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	2203      	movs	r2, #3
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4013      	ands	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_Init+0xea>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b12      	cmp	r3, #18
 8002420:	d123      	bne.n	800246a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	08da      	lsrs	r2, r3, #3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3208      	adds	r2, #8
 800242a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800242e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	220f      	movs	r2, #15
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	691a      	ldr	r2, [r3, #16]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	08da      	lsrs	r2, r3, #3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3208      	adds	r2, #8
 8002464:	6939      	ldr	r1, [r7, #16]
 8002466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	2203      	movs	r2, #3
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4013      	ands	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 0203 	and.w	r2, r3, #3
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 809a 	beq.w	80025e0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ac:	4b55      	ldr	r3, [pc, #340]	; (8002604 <HAL_GPIO_Init+0x2cc>)
 80024ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b0:	4a54      	ldr	r2, [pc, #336]	; (8002604 <HAL_GPIO_Init+0x2cc>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6613      	str	r3, [r2, #96]	; 0x60
 80024b8:	4b52      	ldr	r3, [pc, #328]	; (8002604 <HAL_GPIO_Init+0x2cc>)
 80024ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024c4:	4a50      	ldr	r2, [pc, #320]	; (8002608 <HAL_GPIO_Init+0x2d0>)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	089b      	lsrs	r3, r3, #2
 80024ca:	3302      	adds	r3, #2
 80024cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	220f      	movs	r2, #15
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024ee:	d013      	beq.n	8002518 <HAL_GPIO_Init+0x1e0>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a46      	ldr	r2, [pc, #280]	; (800260c <HAL_GPIO_Init+0x2d4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d00d      	beq.n	8002514 <HAL_GPIO_Init+0x1dc>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a45      	ldr	r2, [pc, #276]	; (8002610 <HAL_GPIO_Init+0x2d8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d007      	beq.n	8002510 <HAL_GPIO_Init+0x1d8>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a44      	ldr	r2, [pc, #272]	; (8002614 <HAL_GPIO_Init+0x2dc>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d101      	bne.n	800250c <HAL_GPIO_Init+0x1d4>
 8002508:	2303      	movs	r3, #3
 800250a:	e006      	b.n	800251a <HAL_GPIO_Init+0x1e2>
 800250c:	2307      	movs	r3, #7
 800250e:	e004      	b.n	800251a <HAL_GPIO_Init+0x1e2>
 8002510:	2302      	movs	r3, #2
 8002512:	e002      	b.n	800251a <HAL_GPIO_Init+0x1e2>
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <HAL_GPIO_Init+0x1e2>
 8002518:	2300      	movs	r3, #0
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	f002 0203 	and.w	r2, r2, #3
 8002520:	0092      	lsls	r2, r2, #2
 8002522:	4093      	lsls	r3, r2
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800252a:	4937      	ldr	r1, [pc, #220]	; (8002608 <HAL_GPIO_Init+0x2d0>)
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	089b      	lsrs	r3, r3, #2
 8002530:	3302      	adds	r3, #2
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002538:	4b37      	ldr	r3, [pc, #220]	; (8002618 <HAL_GPIO_Init+0x2e0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	43db      	mvns	r3, r3
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800255c:	4a2e      	ldr	r2, [pc, #184]	; (8002618 <HAL_GPIO_Init+0x2e0>)
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002562:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <HAL_GPIO_Init+0x2e0>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	43db      	mvns	r3, r3
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4013      	ands	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4313      	orrs	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002586:	4a24      	ldr	r2, [pc, #144]	; (8002618 <HAL_GPIO_Init+0x2e0>)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800258c:	4b22      	ldr	r3, [pc, #136]	; (8002618 <HAL_GPIO_Init+0x2e0>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	43db      	mvns	r3, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025b0:	4a19      	ldr	r2, [pc, #100]	; (8002618 <HAL_GPIO_Init+0x2e0>)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025b6:	4b18      	ldr	r3, [pc, #96]	; (8002618 <HAL_GPIO_Init+0x2e0>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	43db      	mvns	r3, r3
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4013      	ands	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025da:	4a0f      	ldr	r2, [pc, #60]	; (8002618 <HAL_GPIO_Init+0x2e0>)
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	3301      	adds	r3, #1
 80025e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	fa22 f303 	lsr.w	r3, r2, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f47f aea9 	bne.w	8002348 <HAL_GPIO_Init+0x10>
  }
}
 80025f6:	bf00      	nop
 80025f8:	371c      	adds	r7, #28
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40021000 	.word	0x40021000
 8002608:	40010000 	.word	0x40010000
 800260c:	48000400 	.word	0x48000400
 8002610:	48000800 	.word	0x48000800
 8002614:	48000c00 	.word	0x48000c00
 8002618:	40010400 	.word	0x40010400

0800261c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	807b      	strh	r3, [r7, #2]
 8002628:	4613      	mov	r3, r2
 800262a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800262c:	787b      	ldrb	r3, [r7, #1]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002638:	e002      	b.n	8002640 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800263a:	887a      	ldrh	r2, [r7, #2]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	695a      	ldr	r2, [r3, #20]
 800265c:	887b      	ldrh	r3, [r7, #2]
 800265e:	4013      	ands	r3, r2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002664:	887a      	ldrh	r2, [r7, #2]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800266a:	e002      	b.n	8002672 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800266c:	887a      	ldrh	r2, [r7, #2]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	619a      	str	r2, [r3, #24]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e081      	b.n	8002794 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d106      	bne.n	80026aa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7ff f96f 	bl	8001988 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2224      	movs	r2, #36	; 0x24
 80026ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0201 	bic.w	r2, r2, #1
 80026c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d107      	bne.n	80026f8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026f4:	609a      	str	r2, [r3, #8]
 80026f6:	e006      	b.n	8002706 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002704:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d104      	bne.n	8002718 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002716:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6812      	ldr	r2, [r2, #0]
 8002722:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800272a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800273a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	ea42 0103 	orr.w	r1, r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	021a      	lsls	r2, r3, #8
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69d9      	ldr	r1, [r3, #28]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1a      	ldr	r2, [r3, #32]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f042 0201 	orr.w	r2, r2, #1
 8002774:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	607a      	str	r2, [r7, #4]
 80027a6:	461a      	mov	r2, r3
 80027a8:	460b      	mov	r3, r1
 80027aa:	817b      	strh	r3, [r7, #10]
 80027ac:	4613      	mov	r3, r2
 80027ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b20      	cmp	r3, #32
 80027ba:	f040 80da 	bne.w	8002972 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_I2C_Master_Transmit+0x30>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e0d3      	b.n	8002974 <HAL_I2C_Master_Transmit+0x1d8>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027d4:	f7ff fc30 	bl	8002038 <HAL_GetTick>
 80027d8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	2319      	movs	r3, #25
 80027e0:	2201      	movs	r2, #1
 80027e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 fb54 	bl	8002e94 <I2C_WaitOnFlagUntilTimeout>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e0be      	b.n	8002974 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2221      	movs	r2, #33	; 0x21
 80027fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2210      	movs	r2, #16
 8002802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	893a      	ldrh	r2, [r7, #8]
 8002816:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002822:	b29b      	uxth	r3, r3
 8002824:	2bff      	cmp	r3, #255	; 0xff
 8002826:	d90e      	bls.n	8002846 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	22ff      	movs	r2, #255	; 0xff
 800282c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002832:	b2da      	uxtb	r2, r3
 8002834:	8979      	ldrh	r1, [r7, #10]
 8002836:	4b51      	ldr	r3, [pc, #324]	; (800297c <HAL_I2C_Master_Transmit+0x1e0>)
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 fcb6 	bl	80031b0 <I2C_TransferConfig>
 8002844:	e06c      	b.n	8002920 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002854:	b2da      	uxtb	r2, r3
 8002856:	8979      	ldrh	r1, [r7, #10]
 8002858:	4b48      	ldr	r3, [pc, #288]	; (800297c <HAL_I2C_Master_Transmit+0x1e0>)
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 fca5 	bl	80031b0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002866:	e05b      	b.n	8002920 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	6a39      	ldr	r1, [r7, #32]
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 fb51 	bl	8002f14 <I2C_WaitOnTXISFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e07b      	b.n	8002974 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	781a      	ldrb	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002896:	b29b      	uxth	r3, r3
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d034      	beq.n	8002920 <HAL_I2C_Master_Transmit+0x184>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d130      	bne.n	8002920 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	2200      	movs	r2, #0
 80028c6:	2180      	movs	r1, #128	; 0x80
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 fae3 	bl	8002e94 <I2C_WaitOnFlagUntilTimeout>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e04d      	b.n	8002974 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2bff      	cmp	r3, #255	; 0xff
 80028e0:	d90e      	bls.n	8002900 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	22ff      	movs	r2, #255	; 0xff
 80028e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	8979      	ldrh	r1, [r7, #10]
 80028f0:	2300      	movs	r3, #0
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 fc59 	bl	80031b0 <I2C_TransferConfig>
 80028fe:	e00f      	b.n	8002920 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290e:	b2da      	uxtb	r2, r3
 8002910:	8979      	ldrh	r1, [r7, #10]
 8002912:	2300      	movs	r3, #0
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 fc48 	bl	80031b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d19e      	bne.n	8002868 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	6a39      	ldr	r1, [r7, #32]
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 fb30 	bl	8002f94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e01a      	b.n	8002974 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2220      	movs	r2, #32
 8002944:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6859      	ldr	r1, [r3, #4]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_I2C_Master_Transmit+0x1e4>)
 8002952:	400b      	ands	r3, r1
 8002954:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2220      	movs	r2, #32
 800295a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	e000      	b.n	8002974 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002972:	2302      	movs	r3, #2
  }
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	80002000 	.word	0x80002000
 8002980:	fe00e800 	.word	0xfe00e800

08002984 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af02      	add	r7, sp, #8
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	607a      	str	r2, [r7, #4]
 800298e:	461a      	mov	r2, r3
 8002990:	460b      	mov	r3, r1
 8002992:	817b      	strh	r3, [r7, #10]
 8002994:	4613      	mov	r3, r2
 8002996:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b20      	cmp	r3, #32
 80029a2:	f040 80db 	bne.w	8002b5c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <HAL_I2C_Master_Receive+0x30>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e0d4      	b.n	8002b5e <HAL_I2C_Master_Receive+0x1da>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029bc:	f7ff fb3c 	bl	8002038 <HAL_GetTick>
 80029c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	2319      	movs	r3, #25
 80029c8:	2201      	movs	r2, #1
 80029ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 fa60 	bl	8002e94 <I2C_WaitOnFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e0bf      	b.n	8002b5e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2222      	movs	r2, #34	; 0x22
 80029e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2210      	movs	r2, #16
 80029ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	893a      	ldrh	r2, [r7, #8]
 80029fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	2bff      	cmp	r3, #255	; 0xff
 8002a0e:	d90e      	bls.n	8002a2e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	22ff      	movs	r2, #255	; 0xff
 8002a14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	8979      	ldrh	r1, [r7, #10]
 8002a1e:	4b52      	ldr	r3, [pc, #328]	; (8002b68 <HAL_I2C_Master_Receive+0x1e4>)
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 fbc2 	bl	80031b0 <I2C_TransferConfig>
 8002a2c:	e06d      	b.n	8002b0a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	8979      	ldrh	r1, [r7, #10]
 8002a40:	4b49      	ldr	r3, [pc, #292]	; (8002b68 <HAL_I2C_Master_Receive+0x1e4>)
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 fbb1 	bl	80031b0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002a4e:	e05c      	b.n	8002b0a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	6a39      	ldr	r1, [r7, #32]
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 fad9 	bl	800300c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e07c      	b.n	8002b5e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d034      	beq.n	8002b0a <HAL_I2C_Master_Receive+0x186>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d130      	bne.n	8002b0a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	2180      	movs	r1, #128	; 0x80
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 f9ee 	bl	8002e94 <I2C_WaitOnFlagUntilTimeout>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e04d      	b.n	8002b5e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2bff      	cmp	r3, #255	; 0xff
 8002aca:	d90e      	bls.n	8002aea <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	22ff      	movs	r2, #255	; 0xff
 8002ad0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	8979      	ldrh	r1, [r7, #10]
 8002ada:	2300      	movs	r3, #0
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 fb64 	bl	80031b0 <I2C_TransferConfig>
 8002ae8:	e00f      	b.n	8002b0a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	8979      	ldrh	r1, [r7, #10]
 8002afc:	2300      	movs	r3, #0
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 fb53 	bl	80031b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d19d      	bne.n	8002a50 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	6a39      	ldr	r1, [r7, #32]
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 fa3b 	bl	8002f94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e01a      	b.n	8002b5e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6859      	ldr	r1, [r3, #4]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <HAL_I2C_Master_Receive+0x1e8>)
 8002b3c:	400b      	ands	r3, r1
 8002b3e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	e000      	b.n	8002b5e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002b5c:	2302      	movs	r3, #2
  }
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	80002400 	.word	0x80002400
 8002b6c:	fe00e800 	.word	0xfe00e800

08002b70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	4608      	mov	r0, r1
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4603      	mov	r3, r0
 8002b80:	817b      	strh	r3, [r7, #10]
 8002b82:	460b      	mov	r3, r1
 8002b84:	813b      	strh	r3, [r7, #8]
 8002b86:	4613      	mov	r3, r2
 8002b88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b20      	cmp	r3, #32
 8002b94:	f040 80fd 	bne.w	8002d92 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <HAL_I2C_Mem_Read+0x34>
 8002b9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d105      	bne.n	8002bb0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002baa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0f1      	b.n	8002d94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_I2C_Mem_Read+0x4e>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e0ea      	b.n	8002d94 <HAL_I2C_Mem_Read+0x224>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bc6:	f7ff fa37 	bl	8002038 <HAL_GetTick>
 8002bca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	2319      	movs	r3, #25
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 f95b 	bl	8002e94 <I2C_WaitOnFlagUntilTimeout>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0d5      	b.n	8002d94 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2222      	movs	r2, #34	; 0x22
 8002bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2240      	movs	r2, #64	; 0x40
 8002bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a3a      	ldr	r2, [r7, #32]
 8002c02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c10:	88f8      	ldrh	r0, [r7, #6]
 8002c12:	893a      	ldrh	r2, [r7, #8]
 8002c14:	8979      	ldrh	r1, [r7, #10]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	9301      	str	r3, [sp, #4]
 8002c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	4603      	mov	r3, r0
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 f8bf 	bl	8002da4 <I2C_RequestMemoryRead>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0ad      	b.n	8002d94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	2bff      	cmp	r3, #255	; 0xff
 8002c40:	d90e      	bls.n	8002c60 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	22ff      	movs	r2, #255	; 0xff
 8002c46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	8979      	ldrh	r1, [r7, #10]
 8002c50:	4b52      	ldr	r3, [pc, #328]	; (8002d9c <HAL_I2C_Mem_Read+0x22c>)
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 faa9 	bl	80031b0 <I2C_TransferConfig>
 8002c5e:	e00f      	b.n	8002c80 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	8979      	ldrh	r1, [r7, #10]
 8002c72:	4b4a      	ldr	r3, [pc, #296]	; (8002d9c <HAL_I2C_Mem_Read+0x22c>)
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 fa98 	bl	80031b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c86:	2200      	movs	r2, #0
 8002c88:	2104      	movs	r1, #4
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 f902 	bl	8002e94 <I2C_WaitOnFlagUntilTimeout>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e07c      	b.n	8002d94 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d034      	beq.n	8002d40 <HAL_I2C_Mem_Read+0x1d0>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d130      	bne.n	8002d40 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2180      	movs	r1, #128	; 0x80
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 f8d3 	bl	8002e94 <I2C_WaitOnFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e04d      	b.n	8002d94 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	2bff      	cmp	r3, #255	; 0xff
 8002d00:	d90e      	bls.n	8002d20 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	22ff      	movs	r2, #255	; 0xff
 8002d06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	8979      	ldrh	r1, [r7, #10]
 8002d10:	2300      	movs	r3, #0
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 fa49 	bl	80031b0 <I2C_TransferConfig>
 8002d1e:	e00f      	b.n	8002d40 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	8979      	ldrh	r1, [r7, #10]
 8002d32:	2300      	movs	r3, #0
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 fa38 	bl	80031b0 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d19a      	bne.n	8002c80 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 f920 	bl	8002f94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e01a      	b.n	8002d94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2220      	movs	r2, #32
 8002d64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6859      	ldr	r1, [r3, #4]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <HAL_I2C_Mem_Read+0x230>)
 8002d72:	400b      	ands	r3, r1
 8002d74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	e000      	b.n	8002d94 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002d92:	2302      	movs	r3, #2
  }
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	80002400 	.word	0x80002400
 8002da0:	fe00e800 	.word	0xfe00e800

08002da4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af02      	add	r7, sp, #8
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	4608      	mov	r0, r1
 8002dae:	4611      	mov	r1, r2
 8002db0:	461a      	mov	r2, r3
 8002db2:	4603      	mov	r3, r0
 8002db4:	817b      	strh	r3, [r7, #10]
 8002db6:	460b      	mov	r3, r1
 8002db8:	813b      	strh	r3, [r7, #8]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002dbe:	88fb      	ldrh	r3, [r7, #6]
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	8979      	ldrh	r1, [r7, #10]
 8002dc4:	4b20      	ldr	r3, [pc, #128]	; (8002e48 <I2C_RequestMemoryRead+0xa4>)
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	2300      	movs	r3, #0
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 f9f0 	bl	80031b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dd0:	69fa      	ldr	r2, [r7, #28]
 8002dd2:	69b9      	ldr	r1, [r7, #24]
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 f89d 	bl	8002f14 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e02c      	b.n	8002e3e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002de4:	88fb      	ldrh	r3, [r7, #6]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d105      	bne.n	8002df6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dea:	893b      	ldrh	r3, [r7, #8]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28
 8002df4:	e015      	b.n	8002e22 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002df6:	893b      	ldrh	r3, [r7, #8]
 8002df8:	0a1b      	lsrs	r3, r3, #8
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e04:	69fa      	ldr	r2, [r7, #28]
 8002e06:	69b9      	ldr	r1, [r7, #24]
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f883 	bl	8002f14 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e012      	b.n	8002e3e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e18:	893b      	ldrh	r3, [r7, #8]
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2140      	movs	r1, #64	; 0x40
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 f831 	bl	8002e94 <I2C_WaitOnFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	80002000 	.word	0x80002000

08002e4c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d103      	bne.n	8002e6a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2200      	movs	r2, #0
 8002e68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d007      	beq.n	8002e88 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699a      	ldr	r2, [r3, #24]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	619a      	str	r2, [r3, #24]
  }
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ea4:	e022      	b.n	8002eec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eac:	d01e      	beq.n	8002eec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eae:	f7ff f8c3 	bl	8002038 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d302      	bcc.n	8002ec4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d113      	bne.n	8002eec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec8:	f043 0220 	orr.w	r2, r3, #32
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e00f      	b.n	8002f0c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699a      	ldr	r2, [r3, #24]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	bf0c      	ite	eq
 8002efc:	2301      	moveq	r3, #1
 8002efe:	2300      	movne	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	461a      	mov	r2, r3
 8002f04:	79fb      	ldrb	r3, [r7, #7]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d0cd      	beq.n	8002ea6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f20:	e02c      	b.n	8002f7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	68b9      	ldr	r1, [r7, #8]
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 f8dc 	bl	80030e4 <I2C_IsAcknowledgeFailed>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e02a      	b.n	8002f8c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3c:	d01e      	beq.n	8002f7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3e:	f7ff f87b 	bl	8002038 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d302      	bcc.n	8002f54 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d113      	bne.n	8002f7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f58:	f043 0220 	orr.w	r2, r3, #32
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2220      	movs	r2, #32
 8002f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e007      	b.n	8002f8c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d1cb      	bne.n	8002f22 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fa0:	e028      	b.n	8002ff4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	68b9      	ldr	r1, [r7, #8]
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f89c 	bl	80030e4 <I2C_IsAcknowledgeFailed>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e026      	b.n	8003004 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb6:	f7ff f83f 	bl	8002038 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d302      	bcc.n	8002fcc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d113      	bne.n	8002ff4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd0:	f043 0220 	orr.w	r2, r3, #32
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e007      	b.n	8003004 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	2b20      	cmp	r3, #32
 8003000:	d1cf      	bne.n	8002fa2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003018:	e055      	b.n	80030c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f860 	bl	80030e4 <I2C_IsAcknowledgeFailed>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e053      	b.n	80030d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	f003 0320 	and.w	r3, r3, #32
 8003038:	2b20      	cmp	r3, #32
 800303a:	d129      	bne.n	8003090 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b04      	cmp	r3, #4
 8003048:	d105      	bne.n	8003056 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	e03f      	b.n	80030d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2220      	movs	r2, #32
 800305c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6859      	ldr	r1, [r3, #4]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	4b1d      	ldr	r3, [pc, #116]	; (80030e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800306a:	400b      	ands	r3, r1
 800306c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e022      	b.n	80030d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003090:	f7fe ffd2 	bl	8002038 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	429a      	cmp	r2, r3
 800309e:	d302      	bcc.n	80030a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10f      	bne.n	80030c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	f043 0220 	orr.w	r2, r3, #32
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e007      	b.n	80030d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d1a2      	bne.n	800301a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	fe00e800 	.word	0xfe00e800

080030e4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f003 0310 	and.w	r3, r3, #16
 80030fa:	2b10      	cmp	r3, #16
 80030fc:	d151      	bne.n	80031a2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030fe:	e022      	b.n	8003146 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003106:	d01e      	beq.n	8003146 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003108:	f7fe ff96 	bl	8002038 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	429a      	cmp	r2, r3
 8003116:	d302      	bcc.n	800311e <I2C_IsAcknowledgeFailed+0x3a>
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d113      	bne.n	8003146 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	f043 0220 	orr.w	r2, r3, #32
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2220      	movs	r2, #32
 800312e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e02e      	b.n	80031a4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	f003 0320 	and.w	r3, r3, #32
 8003150:	2b20      	cmp	r3, #32
 8003152:	d1d5      	bne.n	8003100 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2210      	movs	r2, #16
 800315a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2220      	movs	r2, #32
 8003162:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f7ff fe71 	bl	8002e4c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6859      	ldr	r1, [r3, #4]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <I2C_IsAcknowledgeFailed+0xc8>)
 8003176:	400b      	ands	r3, r1
 8003178:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317e:	f043 0204 	orr.w	r2, r3, #4
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	fe00e800 	.word	0xfe00e800

080031b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	607b      	str	r3, [r7, #4]
 80031ba:	460b      	mov	r3, r1
 80031bc:	817b      	strh	r3, [r7, #10]
 80031be:	4613      	mov	r3, r2
 80031c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	0d5b      	lsrs	r3, r3, #21
 80031cc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80031d0:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <I2C_TransferConfig+0x58>)
 80031d2:	430b      	orrs	r3, r1
 80031d4:	43db      	mvns	r3, r3
 80031d6:	ea02 0103 	and.w	r1, r2, r3
 80031da:	897b      	ldrh	r3, [r7, #10]
 80031dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031e0:	7a7b      	ldrb	r3, [r7, #9]
 80031e2:	041b      	lsls	r3, r3, #16
 80031e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	431a      	orrs	r2, r3
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	431a      	orrs	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80031fa:	bf00      	nop
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	03ff63ff 	.word	0x03ff63ff

0800320c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b20      	cmp	r3, #32
 8003220:	d138      	bne.n	8003294 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800322c:	2302      	movs	r3, #2
 800322e:	e032      	b.n	8003296 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2224      	movs	r2, #36	; 0x24
 800323c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0201 	bic.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800325e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6819      	ldr	r1, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0201 	orr.w	r2, r2, #1
 800327e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	e000      	b.n	8003296 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003294:	2302      	movs	r3, #2
  }
}
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b085      	sub	sp, #20
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b20      	cmp	r3, #32
 80032b6:	d139      	bne.n	800332c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e033      	b.n	800332e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2224      	movs	r2, #36	; 0x24
 80032d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0201 	bic.w	r2, r2, #1
 80032e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	021b      	lsls	r3, r3, #8
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0201 	orr.w	r2, r2, #1
 8003316:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2220      	movs	r2, #32
 800331c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003328:	2300      	movs	r3, #0
 800332a:	e000      	b.n	800332e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800332c:	2302      	movs	r3, #2
  }
}
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800333a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800333c:	b08b      	sub	sp, #44	; 0x2c
 800333e:	af06      	add	r7, sp, #24
 8003340:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0da      	b.n	8003502 <HAL_PCD_Init+0x1c8>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	d106      	bne.n	8003366 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f006 fcfd 	bl	8009d60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2203      	movs	r2, #3
 800336a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f003 fe15 	bl	8006fa2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	603b      	str	r3, [r7, #0]
 800337e:	687e      	ldr	r6, [r7, #4]
 8003380:	466d      	mov	r5, sp
 8003382:	f106 0410 	add.w	r4, r6, #16
 8003386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003388:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	602b      	str	r3, [r5, #0]
 800338e:	1d33      	adds	r3, r6, #4
 8003390:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003392:	6838      	ldr	r0, [r7, #0]
 8003394:	f003 fddb 	bl	8006f4e <USB_CoreInit>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2202      	movs	r2, #2
 80033a2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e0ab      	b.n	8003502 <HAL_PCD_Init+0x1c8>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2100      	movs	r1, #0
 80033b0:	4618      	mov	r0, r3
 80033b2:	f003 fe11 	bl	8006fd8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033b6:	2300      	movs	r3, #0
 80033b8:	73fb      	strb	r3, [r7, #15]
 80033ba:	e035      	b.n	8003428 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	015b      	lsls	r3, r3, #5
 80033c2:	4413      	add	r3, r2
 80033c4:	3329      	adds	r3, #41	; 0x29
 80033c6:	2201      	movs	r2, #1
 80033c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	015b      	lsls	r3, r3, #5
 80033d0:	4413      	add	r3, r2
 80033d2:	3328      	adds	r3, #40	; 0x28
 80033d4:	7bfa      	ldrb	r2, [r7, #15]
 80033d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
 80033da:	7bfa      	ldrb	r2, [r7, #15]
 80033dc:	b291      	uxth	r1, r2
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	015b      	lsls	r3, r3, #5
 80033e2:	4413      	add	r3, r2
 80033e4:	3336      	adds	r3, #54	; 0x36
 80033e6:	460a      	mov	r2, r1
 80033e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	015b      	lsls	r3, r3, #5
 80033f0:	4413      	add	r3, r2
 80033f2:	332b      	adds	r3, #43	; 0x2b
 80033f4:	2200      	movs	r2, #0
 80033f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	015b      	lsls	r3, r3, #5
 80033fe:	4413      	add	r3, r2
 8003400:	3338      	adds	r3, #56	; 0x38
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	015b      	lsls	r3, r3, #5
 800340c:	4413      	add	r3, r2
 800340e:	333c      	adds	r3, #60	; 0x3c
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	3302      	adds	r3, #2
 800341a:	015b      	lsls	r3, r3, #5
 800341c:	4413      	add	r3, r2
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003422:	7bfb      	ldrb	r3, [r7, #15]
 8003424:	3301      	adds	r3, #1
 8003426:	73fb      	strb	r3, [r7, #15]
 8003428:	7bfa      	ldrb	r2, [r7, #15]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	429a      	cmp	r2, r3
 8003430:	d3c4      	bcc.n	80033bc <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003432:	2300      	movs	r3, #0
 8003434:	73fb      	strb	r3, [r7, #15]
 8003436:	e031      	b.n	800349c <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	015b      	lsls	r3, r3, #5
 800343e:	4413      	add	r3, r2
 8003440:	f203 1329 	addw	r3, r3, #297	; 0x129
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	015b      	lsls	r3, r3, #5
 800344e:	4413      	add	r3, r2
 8003450:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003454:	7bfa      	ldrb	r2, [r7, #15]
 8003456:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	015b      	lsls	r3, r3, #5
 800345e:	4413      	add	r3, r2
 8003460:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8003464:	2200      	movs	r2, #0
 8003466:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	015b      	lsls	r3, r3, #5
 800346e:	4413      	add	r3, r2
 8003470:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003478:	7bfb      	ldrb	r3, [r7, #15]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	015b      	lsls	r3, r3, #5
 800347e:	4413      	add	r3, r2
 8003480:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	330a      	adds	r3, #10
 800348e:	015b      	lsls	r3, r3, #5
 8003490:	4413      	add	r3, r2
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003496:	7bfb      	ldrb	r3, [r7, #15]
 8003498:	3301      	adds	r3, #1
 800349a:	73fb      	strb	r3, [r7, #15]
 800349c:	7bfa      	ldrb	r2, [r7, #15]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d3c8      	bcc.n	8003438 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	687e      	ldr	r6, [r7, #4]
 80034ae:	466d      	mov	r5, sp
 80034b0:	f106 0410 	add.w	r4, r6, #16
 80034b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034b8:	6823      	ldr	r3, [r4, #0]
 80034ba:	602b      	str	r3, [r5, #0]
 80034bc:	1d33      	adds	r3, r6, #4
 80034be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034c0:	6838      	ldr	r0, [r7, #0]
 80034c2:	f003 fd96 	bl	8006ff2 <USB_DevInit>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e014      	b.n	8003502 <HAL_PCD_Init+0x1c8>
  }

  hpcd->USB_Address = 0U;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d102      	bne.n	80034f6 <HAL_PCD_Init+0x1bc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 fe3a 	bl	800416a <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f004 fddd 	bl	80080ba <USB_DevDisconnect>

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800350a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_PCD_Start+0x16>
 800351c:	2302      	movs	r3, #2
 800351e:	e012      	b.n	8003546 <HAL_PCD_Start+0x3c>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f004 fdad 	bl	800808c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f003 fd1a 	bl	8006f70 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f004 fdc2 	bl	80080e4 <USB_ReadInterrupts>
 8003560:	4603      	mov	r3, r0
 8003562:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800356a:	d102      	bne.n	8003572 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 fb33 	bl	8003bd8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f004 fdb4 	bl	80080e4 <USB_ReadInterrupts>
 800357c:	4603      	mov	r3, r0
 800357e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003586:	d112      	bne.n	80035ae <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003590:	b29a      	uxth	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800359a:	b292      	uxth	r2, r2
 800359c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f006 fc78 	bl	8009e96 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80035a6:	2100      	movs	r1, #0
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f91e 	bl	80037ea <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f004 fd96 	bl	80080e4 <USB_ReadInterrupts>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035c2:	d10b      	bne.n	80035dc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035d6:	b292      	uxth	r2, r2
 80035d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f004 fd7f 	bl	80080e4 <USB_ReadInterrupts>
 80035e6:	4603      	mov	r3, r0
 80035e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035f0:	d10b      	bne.n	800360a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003604:	b292      	uxth	r2, r2
 8003606:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f004 fd68 	bl	80080e4 <USB_ReadInterrupts>
 8003614:	4603      	mov	r3, r0
 8003616:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800361a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800361e:	d133      	bne.n	8003688 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003628:	b29a      	uxth	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0204 	bic.w	r2, r2, #4
 8003632:	b292      	uxth	r2, r2
 8003634:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003640:	b29a      	uxth	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0208 	bic.w	r2, r2, #8
 800364a:	b292      	uxth	r2, r2
 800364c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8003656:	2b01      	cmp	r3, #1
 8003658:	d107      	bne.n	800366a <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003662:	2100      	movs	r1, #0
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f006 fec3 	bl	800a3f0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f006 fc4c 	bl	8009f08 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003678:	b29a      	uxth	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003682:	b292      	uxth	r2, r2
 8003684:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f004 fd29 	bl	80080e4 <USB_ReadInterrupts>
 8003692:	4603      	mov	r3, r0
 8003694:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800369c:	d126      	bne.n	80036ec <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0208 	orr.w	r2, r2, #8
 80036b0:	b292      	uxth	r2, r2
 80036b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036be:	b29a      	uxth	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036c8:	b292      	uxth	r2, r2
 80036ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0204 	orr.w	r2, r2, #4
 80036e0:	b292      	uxth	r2, r2
 80036e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f006 fbf4 	bl	8009ed4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f004 fcf7 	bl	80080e4 <USB_ReadInterrupts>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fc:	2b80      	cmp	r3, #128	; 0x80
 80036fe:	d13f      	bne.n	8003780 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003708:	b29a      	uxth	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003712:	b292      	uxth	r2, r2
 8003714:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800371e:	2b00      	cmp	r3, #0
 8003720:	d12b      	bne.n	800377a <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800372a:	b29a      	uxth	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f042 0204 	orr.w	r2, r2, #4
 8003734:	b292      	uxth	r2, r2
 8003736:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003742:	b29a      	uxth	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0208 	orr.w	r2, r2, #8
 800374c:	b292      	uxth	r2, r2
 800374e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003762:	b29b      	uxth	r3, r3
 8003764:	089b      	lsrs	r3, r3, #2
 8003766:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003770:	2101      	movs	r1, #1
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f006 fe3c 	bl	800a3f0 <HAL_PCDEx_LPM_Callback>
 8003778:	e002      	b.n	8003780 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f006 fbaa 	bl	8009ed4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f004 fcad 	bl	80080e4 <USB_ReadInterrupts>
 800378a:	4603      	mov	r3, r0
 800378c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003794:	d10e      	bne.n	80037b4 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800379e:	b29a      	uxth	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037a8:	b292      	uxth	r2, r2
 80037aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f006 fb63 	bl	8009e7a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f004 fc93 	bl	80080e4 <USB_ReadInterrupts>
 80037be:	4603      	mov	r3, r0
 80037c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c8:	d10b      	bne.n	80037e2 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037dc:	b292      	uxth	r2, r2
 80037de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b082      	sub	sp, #8
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	460b      	mov	r3, r1
 80037f4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d101      	bne.n	8003804 <HAL_PCD_SetAddress+0x1a>
 8003800:	2302      	movs	r3, #2
 8003802:	e013      	b.n	800382c <HAL_PCD_SetAddress+0x42>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	78fa      	ldrb	r2, [r7, #3]
 8003810:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	78fa      	ldrb	r2, [r7, #3]
 800381a:	4611      	mov	r1, r2
 800381c:	4618      	mov	r0, r3
 800381e:	f004 fc21 	bl	8008064 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	4608      	mov	r0, r1
 800383e:	4611      	mov	r1, r2
 8003840:	461a      	mov	r2, r3
 8003842:	4603      	mov	r3, r0
 8003844:	70fb      	strb	r3, [r7, #3]
 8003846:	460b      	mov	r3, r1
 8003848:	803b      	strh	r3, [r7, #0]
 800384a:	4613      	mov	r3, r2
 800384c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800384e:	2300      	movs	r3, #0
 8003850:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003852:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003856:	2b00      	cmp	r3, #0
 8003858:	da0b      	bge.n	8003872 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800385a:	78fb      	ldrb	r3, [r7, #3]
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	015b      	lsls	r3, r3, #5
 8003862:	3328      	adds	r3, #40	; 0x28
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	4413      	add	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	705a      	strb	r2, [r3, #1]
 8003870:	e00b      	b.n	800388a <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003872:	78fb      	ldrb	r3, [r7, #3]
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	015b      	lsls	r3, r3, #5
 800387a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	4413      	add	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800388a:	78fb      	ldrb	r3, [r7, #3]
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	b2da      	uxtb	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003896:	883a      	ldrh	r2, [r7, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	78ba      	ldrb	r2, [r7, #2]
 80038a0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	785b      	ldrb	r3, [r3, #1]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d004      	beq.n	80038b4 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80038b4:	78bb      	ldrb	r3, [r7, #2]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d102      	bne.n	80038c0 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <HAL_PCD_EP_Open+0x9a>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e00e      	b.n	80038ec <HAL_PCD_EP_Open+0xb8>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68f9      	ldr	r1, [r7, #12]
 80038dc:	4618      	mov	r0, r3
 80038de:	f003 fbad 	bl	800703c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80038ea:	7afb      	ldrb	r3, [r7, #11]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003900:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003904:	2b00      	cmp	r3, #0
 8003906:	da0b      	bge.n	8003920 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	015b      	lsls	r3, r3, #5
 8003910:	3328      	adds	r3, #40	; 0x28
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	4413      	add	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2201      	movs	r2, #1
 800391c:	705a      	strb	r2, [r3, #1]
 800391e:	e00b      	b.n	8003938 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	015b      	lsls	r3, r3, #5
 8003928:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	4413      	add	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003938:	78fb      	ldrb	r3, [r7, #3]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	b2da      	uxtb	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <HAL_PCD_EP_Close+0x5e>
 800394e:	2302      	movs	r3, #2
 8003950:	e00e      	b.n	8003970 <HAL_PCD_EP_Close+0x7c>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68f9      	ldr	r1, [r7, #12]
 8003960:	4618      	mov	r0, r3
 8003962:	f003 fe5b 	bl	800761c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	607a      	str	r2, [r7, #4]
 8003982:	603b      	str	r3, [r7, #0]
 8003984:	460b      	mov	r3, r1
 8003986:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003988:	7afb      	ldrb	r3, [r7, #11]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	015b      	lsls	r3, r3, #5
 8003990:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4413      	add	r3, r2
 8003998:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2200      	movs	r2, #0
 80039aa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2200      	movs	r2, #0
 80039b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039b2:	7afb      	ldrb	r3, [r7, #11]
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039be:	7afb      	ldrb	r3, [r7, #11]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d106      	bne.n	80039d6 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6979      	ldr	r1, [r7, #20]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f003 ffba 	bl	8007948 <USB_EPStartXfer>
 80039d4:	e005      	b.n	80039e2 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6979      	ldr	r1, [r7, #20]
 80039dc:	4618      	mov	r0, r3
 80039de:	f003 ffb3 	bl	8007948 <USB_EPStartXfer>
  }

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	330a      	adds	r3, #10
 8003a02:	015b      	lsls	r3, r3, #5
 8003a04:	4413      	add	r3, r2
 8003a06:	3304      	adds	r3, #4
 8003a08:	681b      	ldr	r3, [r3, #0]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b086      	sub	sp, #24
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	607a      	str	r2, [r7, #4]
 8003a20:	603b      	str	r3, [r7, #0]
 8003a22:	460b      	mov	r3, r1
 8003a24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a26:	7afb      	ldrb	r3, [r7, #11]
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	015b      	lsls	r3, r3, #5
 8003a2e:	3328      	adds	r3, #40	; 0x28
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4413      	add	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2200      	movs	r2, #0
 8003a46:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a4e:	7afb      	ldrb	r3, [r7, #11]
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a5a:	7afb      	ldrb	r3, [r7, #11]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d106      	bne.n	8003a72 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6979      	ldr	r1, [r7, #20]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f003 ff6c 	bl	8007948 <USB_EPStartXfer>
 8003a70:	e005      	b.n	8003a7e <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6979      	ldr	r1, [r7, #20]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f003 ff65 	bl	8007948 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a94:	78fb      	ldrb	r3, [r7, #3]
 8003a96:	f003 0207 	and.w	r2, r3, #7
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d901      	bls.n	8003aa6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e046      	b.n	8003b34 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003aa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	da0b      	bge.n	8003ac6 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aae:	78fb      	ldrb	r3, [r7, #3]
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	015b      	lsls	r3, r3, #5
 8003ab6:	3328      	adds	r3, #40	; 0x28
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	4413      	add	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	705a      	strb	r2, [r3, #1]
 8003ac4:	e009      	b.n	8003ada <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ac6:	78fb      	ldrb	r3, [r7, #3]
 8003ac8:	015b      	lsls	r3, r3, #5
 8003aca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2201      	movs	r2, #1
 8003ade:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d101      	bne.n	8003afa <HAL_PCD_EP_SetStall+0x72>
 8003af6:	2302      	movs	r3, #2
 8003af8:	e01c      	b.n	8003b34 <HAL_PCD_EP_SetStall+0xac>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68f9      	ldr	r1, [r7, #12]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f004 f9d5 	bl	8007eb8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b0e:	78fb      	ldrb	r3, [r7, #3]
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d108      	bne.n	8003b2a <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8003b22:	4619      	mov	r1, r3
 8003b24:	4610      	mov	r0, r2
 8003b26:	f004 faed 	bl	8008104 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	460b      	mov	r3, r1
 8003b46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b48:	78fb      	ldrb	r3, [r7, #3]
 8003b4a:	f003 020f 	and.w	r2, r3, #15
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d901      	bls.n	8003b5a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e03a      	b.n	8003bd0 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	da0b      	bge.n	8003b7a <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b62:	78fb      	ldrb	r3, [r7, #3]
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	015b      	lsls	r3, r3, #5
 8003b6a:	3328      	adds	r3, #40	; 0x28
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	4413      	add	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2201      	movs	r2, #1
 8003b76:	705a      	strb	r2, [r3, #1]
 8003b78:	e00b      	b.n	8003b92 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b7a:	78fb      	ldrb	r3, [r7, #3]
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	015b      	lsls	r3, r3, #5
 8003b82:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	4413      	add	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b98:	78fb      	ldrb	r3, [r7, #3]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d101      	bne.n	8003bb2 <HAL_PCD_EP_ClrStall+0x76>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e00e      	b.n	8003bd0 <HAL_PCD_EP_ClrStall+0x94>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68f9      	ldr	r1, [r7, #12]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f004 f9bb 	bl	8007f3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003bd8:	b590      	push	{r4, r7, lr}
 8003bda:	b089      	sub	sp, #36	; 0x24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003be0:	e274      	b.n	80040cc <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003bea:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003bec:	8afb      	ldrh	r3, [r7, #22]
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	f003 030f 	and.w	r3, r3, #15
 8003bf4:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8003bf6:	7d7b      	ldrb	r3, [r7, #21]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f040 813c 	bne.w	8003e76 <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003bfe:	8afb      	ldrh	r3, [r7, #22]
 8003c00:	f003 0310 	and.w	r3, r3, #16
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d14f      	bne.n	8003ca8 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c18:	b29c      	uxth	r4, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3328      	adds	r3, #40	; 0x28
 8003c2e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	4413      	add	r3, r2
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6812      	ldr	r2, [r2, #0]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	695a      	ldr	r2, [r3, #20]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	441a      	add	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003c66:	2100      	movs	r1, #0
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f006 f8ef 	bl	8009e4c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 8228 	beq.w	80040cc <PCD_EP_ISR_Handler+0x4f4>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f040 8223 	bne.w	80040cc <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	b292      	uxth	r2, r2
 8003c9a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003ca6:	e211      	b.n	80040cc <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003cae:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003cb8:	8a7b      	ldrh	r3, [r7, #18]
 8003cba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d031      	beq.n	8003d26 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6812      	ldr	r2, [r2, #0]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6818      	ldr	r0, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	f004 fa4e 	bl	800819e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003d0e:	4013      	ands	r3, r2
 8003d10:	b29c      	uxth	r4, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003d1a:	b292      	uxth	r2, r2
 8003d1c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f006 f86a 	bl	8009df8 <HAL_PCD_SetupStageCallback>
 8003d24:	e1d2      	b.n	80040cc <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003d26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f280 81ce 	bge.w	80040cc <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	b29c      	uxth	r4, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003d48:	b292      	uxth	r2, r2
 8003d4a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	461a      	mov	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	4413      	add	r3, r2
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	4413      	add	r3, r2
 8003d66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d019      	beq.n	8003db0 <PCD_EP_ISR_Handler+0x1d8>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d015      	beq.n	8003db0 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6818      	ldr	r0, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6959      	ldr	r1, [r3, #20]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	f004 fa02 	bl	800819e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	441a      	add	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003da8:	2100      	movs	r1, #0
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f006 f836 	bl	8009e1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	461c      	mov	r4, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	441c      	add	r4, r3
 8003dc2:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8003dc6:	461c      	mov	r4, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10e      	bne.n	8003dee <PCD_EP_ISR_Handler+0x216>
 8003dd0:	8823      	ldrh	r3, [r4, #0]
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	8023      	strh	r3, [r4, #0]
 8003ddc:	8823      	ldrh	r3, [r4, #0]
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003de4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	8023      	strh	r3, [r4, #0]
 8003dec:	e02d      	b.n	8003e4a <PCD_EP_ISR_Handler+0x272>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	2b3e      	cmp	r3, #62	; 0x3e
 8003df4:	d812      	bhi.n	8003e1c <PCD_EP_ISR_Handler+0x244>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	085b      	lsrs	r3, r3, #1
 8003dfc:	61bb      	str	r3, [r7, #24]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <PCD_EP_ISR_Handler+0x238>
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	61bb      	str	r3, [r7, #24]
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	029b      	lsls	r3, r3, #10
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	8023      	strh	r3, [r4, #0]
 8003e1a:	e016      	b.n	8003e4a <PCD_EP_ISR_Handler+0x272>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	095b      	lsrs	r3, r3, #5
 8003e22:	61bb      	str	r3, [r7, #24]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	f003 031f 	and.w	r3, r3, #31
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d102      	bne.n	8003e36 <PCD_EP_ISR_Handler+0x25e>
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	61bb      	str	r3, [r7, #24]
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	029b      	lsls	r3, r3, #10
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5a:	b29c      	uxth	r4, r3
 8003e5c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003e60:	b29c      	uxth	r4, r3
 8003e62:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003e66:	b29c      	uxth	r4, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	4b9e      	ldr	r3, [pc, #632]	; (80040e8 <PCD_EP_ISR_Handler+0x510>)
 8003e6e:	4323      	orrs	r3, r4
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	8013      	strh	r3, [r2, #0]
 8003e74:	e12a      	b.n	80040cc <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	7d7b      	ldrb	r3, [r7, #21]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e86:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f280 80cb 	bge.w	8004026 <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	461a      	mov	r2, r3
 8003e96:	7d7b      	ldrb	r3, [r7, #21]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	b29c      	uxth	r4, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	461a      	mov	r2, r3
 8003eae:	7d7b      	ldrb	r3, [r7, #21]
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003eb8:	b292      	uxth	r2, r2
 8003eba:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003ebc:	7d7b      	ldrb	r3, [r7, #21]
 8003ebe:	015b      	lsls	r3, r3, #5
 8003ec0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	7b1b      	ldrb	r3, [r3, #12]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d11f      	bne.n	8003f12 <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	461a      	mov	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6812      	ldr	r2, [r2, #0]
 8003eea:	4413      	add	r3, r2
 8003eec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ef6:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8003ef8:	8bfb      	ldrh	r3, [r7, #30]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d06e      	beq.n	8003fdc <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6818      	ldr	r0, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6959      	ldr	r1, [r3, #20]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	88da      	ldrh	r2, [r3, #6]
 8003f0a:	8bfb      	ldrh	r3, [r7, #30]
 8003f0c:	f004 f947 	bl	800819e <USB_ReadPMA>
 8003f10:	e064      	b.n	8003fdc <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	461a      	mov	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2c:	b29c      	uxth	r4, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	441a      	add	r2, r3
 8003f3c:	4b6b      	ldr	r3, [pc, #428]	; (80040ec <PCD_EP_ISR_Handler+0x514>)
 8003f3e:	4323      	orrs	r3, r4
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d01f      	beq.n	8003f9e <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	461a      	mov	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	4413      	add	r3, r2
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6812      	ldr	r2, [r2, #0]
 8003f76:	4413      	add	r3, r2
 8003f78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f82:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003f84:	8bfb      	ldrh	r3, [r7, #30]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d028      	beq.n	8003fdc <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6818      	ldr	r0, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6959      	ldr	r1, [r3, #20]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	891a      	ldrh	r2, [r3, #8]
 8003f96:	8bfb      	ldrh	r3, [r7, #30]
 8003f98:	f004 f901 	bl	800819e <USB_ReadPMA>
 8003f9c:	e01e      	b.n	8003fdc <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	461a      	mov	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6812      	ldr	r2, [r2, #0]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fc2:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003fc4:	8bfb      	ldrh	r3, [r7, #30]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d008      	beq.n	8003fdc <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6959      	ldr	r1, [r3, #20]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	895a      	ldrh	r2, [r3, #10]
 8003fd6:	8bfb      	ldrh	r3, [r7, #30]
 8003fd8:	f004 f8e1 	bl	800819e <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	69da      	ldr	r2, [r3, #28]
 8003fe0:	8bfb      	ldrh	r3, [r7, #30]
 8003fe2:	441a      	add	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	695a      	ldr	r2, [r3, #20]
 8003fec:	8bfb      	ldrh	r3, [r7, #30]
 8003fee:	441a      	add	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d004      	beq.n	8004006 <PCD_EP_ISR_Handler+0x42e>
 8003ffc:	8bfa      	ldrh	r2, [r7, #30]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	429a      	cmp	r2, r3
 8004004:	d206      	bcs.n	8004014 <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	4619      	mov	r1, r3
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f005 ff05 	bl	8009e1c <HAL_PCD_DataOutStageCallback>
 8004012:	e008      	b.n	8004026 <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	7819      	ldrb	r1, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	695a      	ldr	r2, [r3, #20]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff fca9 	bl	8003978 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004026:	8a7b      	ldrh	r3, [r7, #18]
 8004028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402c:	2b00      	cmp	r3, #0
 800402e:	d04d      	beq.n	80040cc <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004030:	7d7b      	ldrb	r3, [r7, #21]
 8004032:	015b      	lsls	r3, r3, #5
 8004034:	3328      	adds	r3, #40	; 0x28
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	4413      	add	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	7d7b      	ldrb	r3, [r7, #21]
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	b29b      	uxth	r3, r3
 800404c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004054:	b29c      	uxth	r4, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	461a      	mov	r2, r3
 800405c:	7d7b      	ldrb	r3, [r7, #21]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	441a      	add	r2, r3
 8004062:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8004066:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800406a:	b29b      	uxth	r3, r3
 800406c:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004076:	b29b      	uxth	r3, r3
 8004078:	461a      	mov	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	4413      	add	r3, r2
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6812      	ldr	r2, [r2, #0]
 8004086:	4413      	add	r3, r2
 8004088:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	441a      	add	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d106      	bne.n	80040ba <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	4619      	mov	r1, r3
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f005 feca 	bl	8009e4c <HAL_PCD_DataInStageCallback>
 80040b8:	e008      	b.n	80040cc <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	7819      	ldrb	r1, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	695a      	ldr	r2, [r3, #20]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff fca5 	bl	8003a16 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	b21b      	sxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f6ff ad82 	blt.w	8003be2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3724      	adds	r7, #36	; 0x24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd90      	pop	{r4, r7, pc}
 80040e8:	ffff8080 	.word	0xffff8080
 80040ec:	ffff80c0 	.word	0xffff80c0

080040f0 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	607b      	str	r3, [r7, #4]
 80040fa:	460b      	mov	r3, r1
 80040fc:	817b      	strh	r3, [r7, #10]
 80040fe:	4613      	mov	r3, r2
 8004100:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004102:	897b      	ldrh	r3, [r7, #10]
 8004104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d008      	beq.n	8004120 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800410e:	897b      	ldrh	r3, [r7, #10]
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	015b      	lsls	r3, r3, #5
 8004116:	3328      	adds	r3, #40	; 0x28
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4413      	add	r3, r2
 800411c:	617b      	str	r3, [r7, #20]
 800411e:	e006      	b.n	800412e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004120:	897b      	ldrh	r3, [r7, #10]
 8004122:	015b      	lsls	r3, r3, #5
 8004124:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4413      	add	r3, r2
 800412c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800412e:	893b      	ldrh	r3, [r7, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d107      	bne.n	8004144 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2200      	movs	r2, #0
 8004138:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	b29a      	uxth	r2, r3
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	80da      	strh	r2, [r3, #6]
 8004142:	e00b      	b.n	800415c <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	2201      	movs	r2, #1
 8004148:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	b29a      	uxth	r2, r3
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	0c1b      	lsrs	r3, r3, #16
 8004156:	b29a      	uxth	r2, r3
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800416a:	b480      	push	{r7}
 800416c:	b085      	sub	sp, #20
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800418e:	b29b      	uxth	r3, r3
 8004190:	f043 0301 	orr.w	r3, r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	f043 0302 	orr.w	r3, r3, #2
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
	...

080041c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80041c4:	4b04      	ldr	r3, [pc, #16]	; (80041d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40007000 	.word	0x40007000

080041dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ea:	d130      	bne.n	800424e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041ec:	4b23      	ldr	r3, [pc, #140]	; (800427c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f8:	d038      	beq.n	800426c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041fa:	4b20      	ldr	r3, [pc, #128]	; (800427c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004202:	4a1e      	ldr	r2, [pc, #120]	; (800427c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004204:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004208:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800420a:	4b1d      	ldr	r3, [pc, #116]	; (8004280 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2232      	movs	r2, #50	; 0x32
 8004210:	fb02 f303 	mul.w	r3, r2, r3
 8004214:	4a1b      	ldr	r2, [pc, #108]	; (8004284 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004216:	fba2 2303 	umull	r2, r3, r2, r3
 800421a:	0c9b      	lsrs	r3, r3, #18
 800421c:	3301      	adds	r3, #1
 800421e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004220:	e002      	b.n	8004228 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	3b01      	subs	r3, #1
 8004226:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004228:	4b14      	ldr	r3, [pc, #80]	; (800427c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004234:	d102      	bne.n	800423c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1f2      	bne.n	8004222 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800423c:	4b0f      	ldr	r3, [pc, #60]	; (800427c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004248:	d110      	bne.n	800426c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e00f      	b.n	800426e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800424e:	4b0b      	ldr	r3, [pc, #44]	; (800427c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800425a:	d007      	beq.n	800426c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800425c:	4b07      	ldr	r3, [pc, #28]	; (800427c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004264:	4a05      	ldr	r2, [pc, #20]	; (800427c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004266:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800426a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40007000 	.word	0x40007000
 8004280:	20000000 	.word	0x20000000
 8004284:	431bde83 	.word	0x431bde83

08004288 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800428c:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	4a04      	ldr	r2, [pc, #16]	; (80042a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004296:	6053      	str	r3, [r2, #4]
}
 8004298:	bf00      	nop
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	40007000 	.word	0x40007000

080042a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08a      	sub	sp, #40	; 0x28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d102      	bne.n	80042bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	f000 bc56 	b.w	8004b68 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042bc:	4ba1      	ldr	r3, [pc, #644]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 030c 	and.w	r3, r3, #12
 80042c4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042c6:	4b9f      	ldr	r3, [pc, #636]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0310 	and.w	r3, r3, #16
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 80e6 	beq.w	80044aa <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d007      	beq.n	80042f4 <HAL_RCC_OscConfig+0x4c>
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	2b0c      	cmp	r3, #12
 80042e8:	f040 808d 	bne.w	8004406 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	f040 8089 	bne.w	8004406 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042f4:	4b93      	ldr	r3, [pc, #588]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d006      	beq.n	800430e <HAL_RCC_OscConfig+0x66>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	69db      	ldr	r3, [r3, #28]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d102      	bne.n	800430e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	f000 bc2d 	b.w	8004b68 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004312:	4b8c      	ldr	r3, [pc, #560]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0308 	and.w	r3, r3, #8
 800431a:	2b00      	cmp	r3, #0
 800431c:	d004      	beq.n	8004328 <HAL_RCC_OscConfig+0x80>
 800431e:	4b89      	ldr	r3, [pc, #548]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004326:	e005      	b.n	8004334 <HAL_RCC_OscConfig+0x8c>
 8004328:	4b86      	ldr	r3, [pc, #536]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 800432a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800432e:	091b      	lsrs	r3, r3, #4
 8004330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004334:	4293      	cmp	r3, r2
 8004336:	d224      	bcs.n	8004382 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	4618      	mov	r0, r3
 800433e:	f000 fdbd 	bl	8004ebc <RCC_SetFlashLatencyFromMSIRange>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	f000 bc0d 	b.w	8004b68 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800434e:	4b7d      	ldr	r3, [pc, #500]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a7c      	ldr	r2, [pc, #496]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 8004354:	f043 0308 	orr.w	r3, r3, #8
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	4b7a      	ldr	r3, [pc, #488]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	4977      	ldr	r1, [pc, #476]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 8004368:	4313      	orrs	r3, r2
 800436a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800436c:	4b75      	ldr	r3, [pc, #468]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	021b      	lsls	r3, r3, #8
 800437a:	4972      	ldr	r1, [pc, #456]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 800437c:	4313      	orrs	r3, r2
 800437e:	604b      	str	r3, [r1, #4]
 8004380:	e025      	b.n	80043ce <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004382:	4b70      	ldr	r3, [pc, #448]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a6f      	ldr	r2, [pc, #444]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 8004388:	f043 0308 	orr.w	r3, r3, #8
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	4b6d      	ldr	r3, [pc, #436]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	496a      	ldr	r1, [pc, #424]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 800439c:	4313      	orrs	r3, r2
 800439e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043a0:	4b68      	ldr	r3, [pc, #416]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	021b      	lsls	r3, r3, #8
 80043ae:	4965      	ldr	r1, [pc, #404]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d109      	bne.n	80043ce <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fd7c 	bl	8004ebc <RCC_SetFlashLatencyFromMSIRange>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e3cc      	b.n	8004b68 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043ce:	f000 fcb3 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 80043d2:	4601      	mov	r1, r0
 80043d4:	4b5b      	ldr	r3, [pc, #364]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	091b      	lsrs	r3, r3, #4
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	4a5a      	ldr	r2, [pc, #360]	; (8004548 <HAL_RCC_OscConfig+0x2a0>)
 80043e0:	5cd3      	ldrb	r3, [r2, r3]
 80043e2:	f003 031f 	and.w	r3, r3, #31
 80043e6:	fa21 f303 	lsr.w	r3, r1, r3
 80043ea:	4a58      	ldr	r2, [pc, #352]	; (800454c <HAL_RCC_OscConfig+0x2a4>)
 80043ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80043ee:	4b58      	ldr	r3, [pc, #352]	; (8004550 <HAL_RCC_OscConfig+0x2a8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fd fdd4 	bl	8001fa0 <HAL_InitTick>
 80043f8:	4603      	mov	r3, r0
 80043fa:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80043fc:	7dfb      	ldrb	r3, [r7, #23]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d052      	beq.n	80044a8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8004402:	7dfb      	ldrb	r3, [r7, #23]
 8004404:	e3b0      	b.n	8004b68 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d032      	beq.n	8004474 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800440e:	4b4d      	ldr	r3, [pc, #308]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a4c      	ldr	r2, [pc, #304]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 8004414:	f043 0301 	orr.w	r3, r3, #1
 8004418:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800441a:	f7fd fe0d 	bl	8002038 <HAL_GetTick>
 800441e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004420:	e008      	b.n	8004434 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004422:	f7fd fe09 	bl	8002038 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e399      	b.n	8004b68 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004434:	4b43      	ldr	r3, [pc, #268]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0f0      	beq.n	8004422 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004440:	4b40      	ldr	r3, [pc, #256]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a3f      	ldr	r2, [pc, #252]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 8004446:	f043 0308 	orr.w	r3, r3, #8
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	4b3d      	ldr	r3, [pc, #244]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	493a      	ldr	r1, [pc, #232]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 800445a:	4313      	orrs	r3, r2
 800445c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800445e:	4b39      	ldr	r3, [pc, #228]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	4935      	ldr	r1, [pc, #212]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 800446e:	4313      	orrs	r3, r2
 8004470:	604b      	str	r3, [r1, #4]
 8004472:	e01a      	b.n	80044aa <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004474:	4b33      	ldr	r3, [pc, #204]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a32      	ldr	r2, [pc, #200]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 800447a:	f023 0301 	bic.w	r3, r3, #1
 800447e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004480:	f7fd fdda 	bl	8002038 <HAL_GetTick>
 8004484:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004488:	f7fd fdd6 	bl	8002038 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e366      	b.n	8004b68 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800449a:	4b2a      	ldr	r3, [pc, #168]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0x1e0>
 80044a6:	e000      	b.n	80044aa <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d073      	beq.n	800459e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d005      	beq.n	80044c8 <HAL_RCC_OscConfig+0x220>
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	2b0c      	cmp	r3, #12
 80044c0:	d10e      	bne.n	80044e0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	2b03      	cmp	r3, #3
 80044c6:	d10b      	bne.n	80044e0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044c8:	4b1e      	ldr	r3, [pc, #120]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d063      	beq.n	800459c <HAL_RCC_OscConfig+0x2f4>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d15f      	bne.n	800459c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e343      	b.n	8004b68 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e8:	d106      	bne.n	80044f8 <HAL_RCC_OscConfig+0x250>
 80044ea:	4b16      	ldr	r3, [pc, #88]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a15      	ldr	r2, [pc, #84]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 80044f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	e01d      	b.n	8004534 <HAL_RCC_OscConfig+0x28c>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004500:	d10c      	bne.n	800451c <HAL_RCC_OscConfig+0x274>
 8004502:	4b10      	ldr	r3, [pc, #64]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a0f      	ldr	r2, [pc, #60]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 8004508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	4b0d      	ldr	r3, [pc, #52]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a0c      	ldr	r2, [pc, #48]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 8004514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	e00b      	b.n	8004534 <HAL_RCC_OscConfig+0x28c>
 800451c:	4b09      	ldr	r3, [pc, #36]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a08      	ldr	r2, [pc, #32]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 8004522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	4b06      	ldr	r3, [pc, #24]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a05      	ldr	r2, [pc, #20]	; (8004544 <HAL_RCC_OscConfig+0x29c>)
 800452e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d01b      	beq.n	8004574 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453c:	f7fd fd7c 	bl	8002038 <HAL_GetTick>
 8004540:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004542:	e010      	b.n	8004566 <HAL_RCC_OscConfig+0x2be>
 8004544:	40021000 	.word	0x40021000
 8004548:	0800a580 	.word	0x0800a580
 800454c:	20000000 	.word	0x20000000
 8004550:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004554:	f7fd fd70 	bl	8002038 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b64      	cmp	r3, #100	; 0x64
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e300      	b.n	8004b68 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004566:	4ba0      	ldr	r3, [pc, #640]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0f0      	beq.n	8004554 <HAL_RCC_OscConfig+0x2ac>
 8004572:	e014      	b.n	800459e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004574:	f7fd fd60 	bl	8002038 <HAL_GetTick>
 8004578:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800457c:	f7fd fd5c 	bl	8002038 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b64      	cmp	r3, #100	; 0x64
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e2ec      	b.n	8004b68 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800458e:	4b96      	ldr	r3, [pc, #600]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1f0      	bne.n	800457c <HAL_RCC_OscConfig+0x2d4>
 800459a:	e000      	b.n	800459e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800459c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d060      	beq.n	800466c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d005      	beq.n	80045bc <HAL_RCC_OscConfig+0x314>
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	2b0c      	cmp	r3, #12
 80045b4:	d119      	bne.n	80045ea <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d116      	bne.n	80045ea <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045bc:	4b8a      	ldr	r3, [pc, #552]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_RCC_OscConfig+0x32c>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e2c9      	b.n	8004b68 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d4:	4b84      	ldr	r3, [pc, #528]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	061b      	lsls	r3, r3, #24
 80045e2:	4981      	ldr	r1, [pc, #516]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045e8:	e040      	b.n	800466c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d023      	beq.n	800463a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045f2:	4b7d      	ldr	r3, [pc, #500]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a7c      	ldr	r2, [pc, #496]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 80045f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fe:	f7fd fd1b 	bl	8002038 <HAL_GetTick>
 8004602:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004604:	e008      	b.n	8004618 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004606:	f7fd fd17 	bl	8002038 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e2a7      	b.n	8004b68 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004618:	4b73      	ldr	r3, [pc, #460]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0f0      	beq.n	8004606 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004624:	4b70      	ldr	r3, [pc, #448]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	061b      	lsls	r3, r3, #24
 8004632:	496d      	ldr	r1, [pc, #436]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 8004634:	4313      	orrs	r3, r2
 8004636:	604b      	str	r3, [r1, #4]
 8004638:	e018      	b.n	800466c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800463a:	4b6b      	ldr	r3, [pc, #428]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a6a      	ldr	r2, [pc, #424]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 8004640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004646:	f7fd fcf7 	bl	8002038 <HAL_GetTick>
 800464a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800464e:	f7fd fcf3 	bl	8002038 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e283      	b.n	8004b68 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004660:	4b61      	ldr	r3, [pc, #388]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1f0      	bne.n	800464e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0308 	and.w	r3, r3, #8
 8004674:	2b00      	cmp	r3, #0
 8004676:	d07f      	beq.n	8004778 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d05f      	beq.n	8004740 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8004680:	4b59      	ldr	r3, [pc, #356]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 8004682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004686:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	699a      	ldr	r2, [r3, #24]
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f003 0310 	and.w	r3, r3, #16
 8004692:	429a      	cmp	r2, r3
 8004694:	d037      	beq.n	8004706 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d006      	beq.n	80046ae <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e25c      	b.n	8004b68 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d01b      	beq.n	80046f0 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80046b8:	4b4b      	ldr	r3, [pc, #300]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 80046ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046be:	4a4a      	ldr	r2, [pc, #296]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 80046c0:	f023 0301 	bic.w	r3, r3, #1
 80046c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046c8:	f7fd fcb6 	bl	8002038 <HAL_GetTick>
 80046cc:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d0:	f7fd fcb2 	bl	8002038 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b11      	cmp	r3, #17
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e242      	b.n	8004b68 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046e2:	4b41      	ldr	r3, [pc, #260]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 80046e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1ef      	bne.n	80046d0 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80046f0:	4b3d      	ldr	r3, [pc, #244]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 80046f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046f6:	f023 0210 	bic.w	r2, r3, #16
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	493a      	ldr	r1, [pc, #232]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004706:	4b38      	ldr	r3, [pc, #224]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 8004708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800470c:	4a36      	ldr	r2, [pc, #216]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 800470e:	f043 0301 	orr.w	r3, r3, #1
 8004712:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004716:	f7fd fc8f 	bl	8002038 <HAL_GetTick>
 800471a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800471c:	e008      	b.n	8004730 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800471e:	f7fd fc8b 	bl	8002038 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b11      	cmp	r3, #17
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e21b      	b.n	8004b68 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004730:	4b2d      	ldr	r3, [pc, #180]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 8004732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0ef      	beq.n	800471e <HAL_RCC_OscConfig+0x476>
 800473e:	e01b      	b.n	8004778 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004740:	4b29      	ldr	r3, [pc, #164]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 8004742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004746:	4a28      	ldr	r2, [pc, #160]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 8004748:	f023 0301 	bic.w	r3, r3, #1
 800474c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004750:	f7fd fc72 	bl	8002038 <HAL_GetTick>
 8004754:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004758:	f7fd fc6e 	bl	8002038 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b11      	cmp	r3, #17
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e1fe      	b.n	8004b68 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800476a:	4b1f      	ldr	r3, [pc, #124]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 800476c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1ef      	bne.n	8004758 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 80c1 	beq.w	8004908 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004786:	2300      	movs	r3, #0
 8004788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800478c:	4b16      	ldr	r3, [pc, #88]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 800478e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10e      	bne.n	80047b6 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004798:	4b13      	ldr	r3, [pc, #76]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 800479a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479c:	4a12      	ldr	r2, [pc, #72]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 800479e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a2:	6593      	str	r3, [r2, #88]	; 0x58
 80047a4:	4b10      	ldr	r3, [pc, #64]	; (80047e8 <HAL_RCC_OscConfig+0x540>)
 80047a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80047b0:	2301      	movs	r3, #1
 80047b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047b6:	4b0d      	ldr	r3, [pc, #52]	; (80047ec <HAL_RCC_OscConfig+0x544>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d11c      	bne.n	80047fc <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047c2:	4b0a      	ldr	r3, [pc, #40]	; (80047ec <HAL_RCC_OscConfig+0x544>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a09      	ldr	r2, [pc, #36]	; (80047ec <HAL_RCC_OscConfig+0x544>)
 80047c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047ce:	f7fd fc33 	bl	8002038 <HAL_GetTick>
 80047d2:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047d4:	e00c      	b.n	80047f0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047d6:	f7fd fc2f 	bl	8002038 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d905      	bls.n	80047f0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e1bf      	b.n	8004b68 <HAL_RCC_OscConfig+0x8c0>
 80047e8:	40021000 	.word	0x40021000
 80047ec:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047f0:	4bb1      	ldr	r3, [pc, #708]	; (8004ab8 <HAL_RCC_OscConfig+0x810>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0ec      	beq.n	80047d6 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d02c      	beq.n	8004862 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8004808:	4bac      	ldr	r3, [pc, #688]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481a:	49a8      	ldr	r1, [pc, #672]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 0304 	and.w	r3, r3, #4
 800482a:	2b00      	cmp	r3, #0
 800482c:	d010      	beq.n	8004850 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800482e:	4ba3      	ldr	r3, [pc, #652]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 8004830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004834:	4aa1      	ldr	r2, [pc, #644]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 8004836:	f043 0304 	orr.w	r3, r3, #4
 800483a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800483e:	4b9f      	ldr	r3, [pc, #636]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 8004840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004844:	4a9d      	ldr	r2, [pc, #628]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 8004846:	f043 0301 	orr.w	r3, r3, #1
 800484a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800484e:	e018      	b.n	8004882 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004850:	4b9a      	ldr	r3, [pc, #616]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 8004852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004856:	4a99      	ldr	r2, [pc, #612]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 8004858:	f043 0301 	orr.w	r3, r3, #1
 800485c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004860:	e00f      	b.n	8004882 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004862:	4b96      	ldr	r3, [pc, #600]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 8004864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004868:	4a94      	ldr	r2, [pc, #592]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 800486a:	f023 0301 	bic.w	r3, r3, #1
 800486e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004872:	4b92      	ldr	r3, [pc, #584]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 8004874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004878:	4a90      	ldr	r2, [pc, #576]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 800487a:	f023 0304 	bic.w	r3, r3, #4
 800487e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d016      	beq.n	80048b8 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488a:	f7fd fbd5 	bl	8002038 <HAL_GetTick>
 800488e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004890:	e00a      	b.n	80048a8 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004892:	f7fd fbd1 	bl	8002038 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e15f      	b.n	8004b68 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048a8:	4b84      	ldr	r3, [pc, #528]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 80048aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0ed      	beq.n	8004892 <HAL_RCC_OscConfig+0x5ea>
 80048b6:	e01d      	b.n	80048f4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b8:	f7fd fbbe 	bl	8002038 <HAL_GetTick>
 80048bc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048be:	e00a      	b.n	80048d6 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c0:	f7fd fbba 	bl	8002038 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e148      	b.n	8004b68 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048d6:	4b79      	ldr	r3, [pc, #484]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 80048d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1ed      	bne.n	80048c0 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80048e4:	4b75      	ldr	r3, [pc, #468]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 80048e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ea:	4a74      	ldr	r2, [pc, #464]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 80048ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d105      	bne.n	8004908 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048fc:	4b6f      	ldr	r3, [pc, #444]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 80048fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004900:	4a6e      	ldr	r2, [pc, #440]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 8004902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004906:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0320 	and.w	r3, r3, #32
 8004910:	2b00      	cmp	r3, #0
 8004912:	d03c      	beq.n	800498e <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004918:	2b00      	cmp	r3, #0
 800491a:	d01c      	beq.n	8004956 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800491c:	4b67      	ldr	r3, [pc, #412]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 800491e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004922:	4a66      	ldr	r2, [pc, #408]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 8004924:	f043 0301 	orr.w	r3, r3, #1
 8004928:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800492c:	f7fd fb84 	bl	8002038 <HAL_GetTick>
 8004930:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004934:	f7fd fb80 	bl	8002038 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e110      	b.n	8004b68 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004946:	4b5d      	ldr	r3, [pc, #372]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 8004948:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0ef      	beq.n	8004934 <HAL_RCC_OscConfig+0x68c>
 8004954:	e01b      	b.n	800498e <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004956:	4b59      	ldr	r3, [pc, #356]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 8004958:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800495c:	4a57      	ldr	r2, [pc, #348]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 800495e:	f023 0301 	bic.w	r3, r3, #1
 8004962:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004966:	f7fd fb67 	bl	8002038 <HAL_GetTick>
 800496a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800496c:	e008      	b.n	8004980 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800496e:	f7fd fb63 	bl	8002038 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e0f3      	b.n	8004b68 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004980:	4b4e      	ldr	r3, [pc, #312]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 8004982:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1ef      	bne.n	800496e <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 80e7 	beq.w	8004b66 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	2b02      	cmp	r3, #2
 800499e:	f040 80b7 	bne.w	8004b10 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80049a2:	4b46      	ldr	r3, [pc, #280]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f003 0203 	and.w	r2, r3, #3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d124      	bne.n	8004a00 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c0:	3b01      	subs	r3, #1
 80049c2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d11b      	bne.n	8004a00 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d113      	bne.n	8004a00 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e2:	085b      	lsrs	r3, r3, #1
 80049e4:	3b01      	subs	r3, #1
 80049e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d109      	bne.n	8004a00 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	085b      	lsrs	r3, r3, #1
 80049f8:	3b01      	subs	r3, #1
 80049fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d061      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	2b0c      	cmp	r3, #12
 8004a04:	d056      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a06:	4b2d      	ldr	r3, [pc, #180]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a2c      	ldr	r2, [pc, #176]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 8004a0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a10:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a12:	f7fd fb11 	bl	8002038 <HAL_GetTick>
 8004a16:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a18:	e008      	b.n	8004a2c <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a1a:	f7fd fb0d 	bl	8002038 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e09d      	b.n	8004b68 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a2c:	4b23      	ldr	r3, [pc, #140]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1f0      	bne.n	8004a1a <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a38:	4b20      	ldr	r3, [pc, #128]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 8004a3a:	68da      	ldr	r2, [r3, #12]
 8004a3c:	4b20      	ldr	r3, [pc, #128]	; (8004ac0 <HAL_RCC_OscConfig+0x818>)
 8004a3e:	4013      	ands	r3, r2
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a48:	3a01      	subs	r2, #1
 8004a4a:	0112      	lsls	r2, r2, #4
 8004a4c:	4311      	orrs	r1, r2
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a52:	0212      	lsls	r2, r2, #8
 8004a54:	4311      	orrs	r1, r2
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a5a:	0852      	lsrs	r2, r2, #1
 8004a5c:	3a01      	subs	r2, #1
 8004a5e:	0552      	lsls	r2, r2, #21
 8004a60:	4311      	orrs	r1, r2
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a66:	0852      	lsrs	r2, r2, #1
 8004a68:	3a01      	subs	r2, #1
 8004a6a:	0652      	lsls	r2, r2, #25
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	4913      	ldr	r1, [pc, #76]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a74:	4b11      	ldr	r3, [pc, #68]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a10      	ldr	r2, [pc, #64]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 8004a7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a80:	4b0e      	ldr	r3, [pc, #56]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4a0d      	ldr	r2, [pc, #52]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 8004a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a8c:	f7fd fad4 	bl	8002038 <HAL_GetTick>
 8004a90:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a94:	f7fd fad0 	bl	8002038 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e060      	b.n	8004b68 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aa6:	4b05      	ldr	r3, [pc, #20]	; (8004abc <HAL_RCC_OscConfig+0x814>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0f0      	beq.n	8004a94 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ab2:	e058      	b.n	8004b66 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e057      	b.n	8004b68 <HAL_RCC_OscConfig+0x8c0>
 8004ab8:	40007000 	.word	0x40007000
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ac4:	4b2a      	ldr	r3, [pc, #168]	; (8004b70 <HAL_RCC_OscConfig+0x8c8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d14a      	bne.n	8004b66 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ad0:	4b27      	ldr	r3, [pc, #156]	; (8004b70 <HAL_RCC_OscConfig+0x8c8>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a26      	ldr	r2, [pc, #152]	; (8004b70 <HAL_RCC_OscConfig+0x8c8>)
 8004ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ada:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004adc:	4b24      	ldr	r3, [pc, #144]	; (8004b70 <HAL_RCC_OscConfig+0x8c8>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	4a23      	ldr	r2, [pc, #140]	; (8004b70 <HAL_RCC_OscConfig+0x8c8>)
 8004ae2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ae6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ae8:	f7fd faa6 	bl	8002038 <HAL_GetTick>
 8004aec:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af0:	f7fd faa2 	bl	8002038 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e032      	b.n	8004b68 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b02:	4b1b      	ldr	r3, [pc, #108]	; (8004b70 <HAL_RCC_OscConfig+0x8c8>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0f0      	beq.n	8004af0 <HAL_RCC_OscConfig+0x848>
 8004b0e:	e02a      	b.n	8004b66 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	2b0c      	cmp	r3, #12
 8004b14:	d025      	beq.n	8004b62 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b16:	4b16      	ldr	r3, [pc, #88]	; (8004b70 <HAL_RCC_OscConfig+0x8c8>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a15      	ldr	r2, [pc, #84]	; (8004b70 <HAL_RCC_OscConfig+0x8c8>)
 8004b1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b20:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004b22:	4b13      	ldr	r3, [pc, #76]	; (8004b70 <HAL_RCC_OscConfig+0x8c8>)
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	4a12      	ldr	r2, [pc, #72]	; (8004b70 <HAL_RCC_OscConfig+0x8c8>)
 8004b28:	f023 0303 	bic.w	r3, r3, #3
 8004b2c:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8004b2e:	4b10      	ldr	r3, [pc, #64]	; (8004b70 <HAL_RCC_OscConfig+0x8c8>)
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	4a0f      	ldr	r2, [pc, #60]	; (8004b70 <HAL_RCC_OscConfig+0x8c8>)
 8004b34:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004b38:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3a:	f7fd fa7d 	bl	8002038 <HAL_GetTick>
 8004b3e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b40:	e008      	b.n	8004b54 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b42:	f7fd fa79 	bl	8002038 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e009      	b.n	8004b68 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b54:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <HAL_RCC_OscConfig+0x8c8>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1f0      	bne.n	8004b42 <HAL_RCC_OscConfig+0x89a>
 8004b60:	e001      	b.n	8004b66 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e000      	b.n	8004b68 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3728      	adds	r7, #40	; 0x28
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40021000 	.word	0x40021000

08004b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e0c8      	b.n	8004d1a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b88:	4b66      	ldr	r3, [pc, #408]	; (8004d24 <HAL_RCC_ClockConfig+0x1b0>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d910      	bls.n	8004bb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b96:	4b63      	ldr	r3, [pc, #396]	; (8004d24 <HAL_RCC_ClockConfig+0x1b0>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f023 0207 	bic.w	r2, r3, #7
 8004b9e:	4961      	ldr	r1, [pc, #388]	; (8004d24 <HAL_RCC_ClockConfig+0x1b0>)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba6:	4b5f      	ldr	r3, [pc, #380]	; (8004d24 <HAL_RCC_ClockConfig+0x1b0>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d001      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e0b0      	b.n	8004d1a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d04c      	beq.n	8004c5e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	2b03      	cmp	r3, #3
 8004bca:	d107      	bne.n	8004bdc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bcc:	4b56      	ldr	r3, [pc, #344]	; (8004d28 <HAL_RCC_ClockConfig+0x1b4>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d121      	bne.n	8004c1c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e09e      	b.n	8004d1a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d107      	bne.n	8004bf4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004be4:	4b50      	ldr	r3, [pc, #320]	; (8004d28 <HAL_RCC_ClockConfig+0x1b4>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d115      	bne.n	8004c1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e092      	b.n	8004d1a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d107      	bne.n	8004c0c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bfc:	4b4a      	ldr	r3, [pc, #296]	; (8004d28 <HAL_RCC_ClockConfig+0x1b4>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d109      	bne.n	8004c1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e086      	b.n	8004d1a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c0c:	4b46      	ldr	r3, [pc, #280]	; (8004d28 <HAL_RCC_ClockConfig+0x1b4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e07e      	b.n	8004d1a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c1c:	4b42      	ldr	r3, [pc, #264]	; (8004d28 <HAL_RCC_ClockConfig+0x1b4>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f023 0203 	bic.w	r2, r3, #3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	493f      	ldr	r1, [pc, #252]	; (8004d28 <HAL_RCC_ClockConfig+0x1b4>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c2e:	f7fd fa03 	bl	8002038 <HAL_GetTick>
 8004c32:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c34:	e00a      	b.n	8004c4c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c36:	f7fd f9ff 	bl	8002038 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e066      	b.n	8004d1a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c4c:	4b36      	ldr	r3, [pc, #216]	; (8004d28 <HAL_RCC_ClockConfig+0x1b4>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 020c 	and.w	r2, r3, #12
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d1eb      	bne.n	8004c36 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d008      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c6a:	4b2f      	ldr	r3, [pc, #188]	; (8004d28 <HAL_RCC_ClockConfig+0x1b4>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	492c      	ldr	r1, [pc, #176]	; (8004d28 <HAL_RCC_ClockConfig+0x1b4>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c7c:	4b29      	ldr	r3, [pc, #164]	; (8004d24 <HAL_RCC_ClockConfig+0x1b0>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d210      	bcs.n	8004cac <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8a:	4b26      	ldr	r3, [pc, #152]	; (8004d24 <HAL_RCC_ClockConfig+0x1b0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f023 0207 	bic.w	r2, r3, #7
 8004c92:	4924      	ldr	r1, [pc, #144]	; (8004d24 <HAL_RCC_ClockConfig+0x1b0>)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9a:	4b22      	ldr	r3, [pc, #136]	; (8004d24 <HAL_RCC_ClockConfig+0x1b0>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d001      	beq.n	8004cac <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e036      	b.n	8004d1a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0304 	and.w	r3, r3, #4
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d008      	beq.n	8004cca <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cb8:	4b1b      	ldr	r3, [pc, #108]	; (8004d28 <HAL_RCC_ClockConfig+0x1b4>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	4918      	ldr	r1, [pc, #96]	; (8004d28 <HAL_RCC_ClockConfig+0x1b4>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d009      	beq.n	8004cea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cd6:	4b14      	ldr	r3, [pc, #80]	; (8004d28 <HAL_RCC_ClockConfig+0x1b4>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	4910      	ldr	r1, [pc, #64]	; (8004d28 <HAL_RCC_ClockConfig+0x1b4>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cea:	f000 f825 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 8004cee:	4601      	mov	r1, r0
 8004cf0:	4b0d      	ldr	r3, [pc, #52]	; (8004d28 <HAL_RCC_ClockConfig+0x1b4>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	091b      	lsrs	r3, r3, #4
 8004cf6:	f003 030f 	and.w	r3, r3, #15
 8004cfa:	4a0c      	ldr	r2, [pc, #48]	; (8004d2c <HAL_RCC_ClockConfig+0x1b8>)
 8004cfc:	5cd3      	ldrb	r3, [r2, r3]
 8004cfe:	f003 031f 	and.w	r3, r3, #31
 8004d02:	fa21 f303 	lsr.w	r3, r1, r3
 8004d06:	4a0a      	ldr	r2, [pc, #40]	; (8004d30 <HAL_RCC_ClockConfig+0x1bc>)
 8004d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d0a:	4b0a      	ldr	r3, [pc, #40]	; (8004d34 <HAL_RCC_ClockConfig+0x1c0>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fd f946 	bl	8001fa0 <HAL_InitTick>
 8004d14:	4603      	mov	r3, r0
 8004d16:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d18:	7afb      	ldrb	r3, [r7, #11]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	40022000 	.word	0x40022000
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	0800a580 	.word	0x0800a580
 8004d30:	20000000 	.word	0x20000000
 8004d34:	20000004 	.word	0x20000004

08004d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b089      	sub	sp, #36	; 0x24
 8004d3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	61fb      	str	r3, [r7, #28]
 8004d42:	2300      	movs	r3, #0
 8004d44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d46:	4b3d      	ldr	r3, [pc, #244]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x104>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 030c 	and.w	r3, r3, #12
 8004d4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d50:	4b3a      	ldr	r3, [pc, #232]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x104>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f003 0303 	and.w	r3, r3, #3
 8004d58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d005      	beq.n	8004d6c <HAL_RCC_GetSysClockFreq+0x34>
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	2b0c      	cmp	r3, #12
 8004d64:	d121      	bne.n	8004daa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d11e      	bne.n	8004daa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d6c:	4b33      	ldr	r3, [pc, #204]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x104>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0308 	and.w	r3, r3, #8
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d107      	bne.n	8004d88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d78:	4b30      	ldr	r3, [pc, #192]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x104>)
 8004d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d7e:	0a1b      	lsrs	r3, r3, #8
 8004d80:	f003 030f 	and.w	r3, r3, #15
 8004d84:	61fb      	str	r3, [r7, #28]
 8004d86:	e005      	b.n	8004d94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d88:	4b2c      	ldr	r3, [pc, #176]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x104>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	091b      	lsrs	r3, r3, #4
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d94:	4a2a      	ldr	r2, [pc, #168]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10d      	bne.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004da8:	e00a      	b.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	2b04      	cmp	r3, #4
 8004dae:	d102      	bne.n	8004db6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004db0:	4b24      	ldr	r3, [pc, #144]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004db2:	61bb      	str	r3, [r7, #24]
 8004db4:	e004      	b.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d101      	bne.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004dbc:	4b22      	ldr	r3, [pc, #136]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x110>)
 8004dbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	2b0c      	cmp	r3, #12
 8004dc4:	d133      	bne.n	8004e2e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dc6:	4b1d      	ldr	r3, [pc, #116]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x104>)
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d002      	beq.n	8004ddc <HAL_RCC_GetSysClockFreq+0xa4>
 8004dd6:	2b03      	cmp	r3, #3
 8004dd8:	d003      	beq.n	8004de2 <HAL_RCC_GetSysClockFreq+0xaa>
 8004dda:	e005      	b.n	8004de8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004ddc:	4b19      	ldr	r3, [pc, #100]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004dde:	617b      	str	r3, [r7, #20]
      break;
 8004de0:	e005      	b.n	8004dee <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004de2:	4b19      	ldr	r3, [pc, #100]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x110>)
 8004de4:	617b      	str	r3, [r7, #20]
      break;
 8004de6:	e002      	b.n	8004dee <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	617b      	str	r3, [r7, #20]
      break;
 8004dec:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dee:	4b13      	ldr	r3, [pc, #76]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x104>)
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	091b      	lsrs	r3, r3, #4
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	3301      	adds	r3, #1
 8004dfa:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004dfc:	4b0f      	ldr	r3, [pc, #60]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x104>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	0a1b      	lsrs	r3, r3, #8
 8004e02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	fb02 f203 	mul.w	r2, r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e12:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e14:	4b09      	ldr	r3, [pc, #36]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x104>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	0e5b      	lsrs	r3, r3, #25
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	3301      	adds	r3, #1
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e2e:	69bb      	ldr	r3, [r7, #24]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3724      	adds	r7, #36	; 0x24
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	0800a598 	.word	0x0800a598
 8004e44:	00f42400 	.word	0x00f42400
 8004e48:	007a1200 	.word	0x007a1200

08004e4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e50:	4b03      	ldr	r3, [pc, #12]	; (8004e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e52:	681b      	ldr	r3, [r3, #0]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	20000000 	.word	0x20000000

08004e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e68:	f7ff fff0 	bl	8004e4c <HAL_RCC_GetHCLKFreq>
 8004e6c:	4601      	mov	r1, r0
 8004e6e:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	0a1b      	lsrs	r3, r3, #8
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	4a04      	ldr	r2, [pc, #16]	; (8004e8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e7a:	5cd3      	ldrb	r3, [r2, r3]
 8004e7c:	f003 031f 	and.w	r3, r3, #31
 8004e80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	0800a590 	.word	0x0800a590

08004e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e94:	f7ff ffda 	bl	8004e4c <HAL_RCC_GetHCLKFreq>
 8004e98:	4601      	mov	r1, r0
 8004e9a:	4b06      	ldr	r3, [pc, #24]	; (8004eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	0adb      	lsrs	r3, r3, #11
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	4a04      	ldr	r2, [pc, #16]	; (8004eb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ea6:	5cd3      	ldrb	r3, [r2, r3]
 8004ea8:	f003 031f 	and.w	r3, r3, #31
 8004eac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	40021000 	.word	0x40021000
 8004eb8:	0800a590 	.word	0x0800a590

08004ebc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ec8:	4b2a      	ldr	r3, [pc, #168]	; (8004f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ed4:	f7ff f974 	bl	80041c0 <HAL_PWREx_GetVoltageRange>
 8004ed8:	6178      	str	r0, [r7, #20]
 8004eda:	e014      	b.n	8004f06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004edc:	4b25      	ldr	r3, [pc, #148]	; (8004f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee0:	4a24      	ldr	r2, [pc, #144]	; (8004f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ee8:	4b22      	ldr	r3, [pc, #136]	; (8004f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ef4:	f7ff f964 	bl	80041c0 <HAL_PWREx_GetVoltageRange>
 8004ef8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004efa:	4b1e      	ldr	r3, [pc, #120]	; (8004f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efe:	4a1d      	ldr	r2, [pc, #116]	; (8004f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f0c:	d10b      	bne.n	8004f26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b80      	cmp	r3, #128	; 0x80
 8004f12:	d919      	bls.n	8004f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2ba0      	cmp	r3, #160	; 0xa0
 8004f18:	d902      	bls.n	8004f20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	613b      	str	r3, [r7, #16]
 8004f1e:	e013      	b.n	8004f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f20:	2301      	movs	r3, #1
 8004f22:	613b      	str	r3, [r7, #16]
 8004f24:	e010      	b.n	8004f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b80      	cmp	r3, #128	; 0x80
 8004f2a:	d902      	bls.n	8004f32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	613b      	str	r3, [r7, #16]
 8004f30:	e00a      	b.n	8004f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b80      	cmp	r3, #128	; 0x80
 8004f36:	d102      	bne.n	8004f3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f38:	2302      	movs	r3, #2
 8004f3a:	613b      	str	r3, [r7, #16]
 8004f3c:	e004      	b.n	8004f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b70      	cmp	r3, #112	; 0x70
 8004f42:	d101      	bne.n	8004f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f44:	2301      	movs	r3, #1
 8004f46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f48:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f023 0207 	bic.w	r2, r3, #7
 8004f50:	4909      	ldr	r1, [pc, #36]	; (8004f78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f58:	4b07      	ldr	r3, [pc, #28]	; (8004f78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d001      	beq.n	8004f6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e000      	b.n	8004f6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40021000 	.word	0x40021000
 8004f78:	40022000 	.word	0x40022000

08004f7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f84:	2300      	movs	r3, #0
 8004f86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f88:	2300      	movs	r3, #0
 8004f8a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 809e 	beq.w	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f9e:	4b46      	ldr	r3, [pc, #280]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004faa:	2301      	movs	r3, #1
 8004fac:	e000      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8004fae:	2300      	movs	r3, #0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00d      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fb4:	4b40      	ldr	r3, [pc, #256]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb8:	4a3f      	ldr	r2, [pc, #252]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fbe:	6593      	str	r3, [r2, #88]	; 0x58
 8004fc0:	4b3d      	ldr	r3, [pc, #244]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc8:	60bb      	str	r3, [r7, #8]
 8004fca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fd0:	4b3a      	ldr	r3, [pc, #232]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a39      	ldr	r2, [pc, #228]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fdc:	f7fd f82c 	bl	8002038 <HAL_GetTick>
 8004fe0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fe2:	e009      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fe4:	f7fd f828 	bl	8002038 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d902      	bls.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	74fb      	strb	r3, [r7, #19]
        break;
 8004ff6:	e005      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ff8:	4b30      	ldr	r3, [pc, #192]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0ef      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8005004:	7cfb      	ldrb	r3, [r7, #19]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d15a      	bne.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800500a:	4b2b      	ldr	r3, [pc, #172]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800500c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005014:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d01e      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xde>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	429a      	cmp	r2, r3
 8005024:	d019      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005026:	4b24      	ldr	r3, [pc, #144]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005030:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005032:	4b21      	ldr	r3, [pc, #132]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005038:	4a1f      	ldr	r2, [pc, #124]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800503a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800503e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005042:	4b1d      	ldr	r3, [pc, #116]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005048:	4a1b      	ldr	r2, [pc, #108]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800504a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800504e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005052:	4a19      	ldr	r2, [pc, #100]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d016      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005064:	f7fc ffe8 	bl	8002038 <HAL_GetTick>
 8005068:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800506a:	e00b      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800506c:	f7fc ffe4 	bl	8002038 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	f241 3288 	movw	r2, #5000	; 0x1388
 800507a:	4293      	cmp	r3, r2
 800507c:	d902      	bls.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	74fb      	strb	r3, [r7, #19]
            break;
 8005082:	e006      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005084:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0ec      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8005092:	7cfb      	ldrb	r3, [r7, #19]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10b      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005098:	4b07      	ldr	r3, [pc, #28]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800509a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a6:	4904      	ldr	r1, [pc, #16]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050ae:	e009      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050b0:	7cfb      	ldrb	r3, [r7, #19]
 80050b2:	74bb      	strb	r3, [r7, #18]
 80050b4:	e006      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80050b6:	bf00      	nop
 80050b8:	40021000 	.word	0x40021000
 80050bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c0:	7cfb      	ldrb	r3, [r7, #19]
 80050c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050c4:	7c7b      	ldrb	r3, [r7, #17]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d105      	bne.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050ca:	4b6e      	ldr	r3, [pc, #440]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80050cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ce:	4a6d      	ldr	r2, [pc, #436]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80050d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050e2:	4b68      	ldr	r3, [pc, #416]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80050e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e8:	f023 0203 	bic.w	r2, r3, #3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	4964      	ldr	r1, [pc, #400]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00a      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005104:	4b5f      	ldr	r3, [pc, #380]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510a:	f023 020c 	bic.w	r2, r3, #12
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	495c      	ldr	r1, [pc, #368]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005126:	4b57      	ldr	r3, [pc, #348]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	4953      	ldr	r1, [pc, #332]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0320 	and.w	r3, r3, #32
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00a      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005148:	4b4e      	ldr	r3, [pc, #312]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800514a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	494b      	ldr	r1, [pc, #300]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005158:	4313      	orrs	r3, r2
 800515a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00a      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800516a:	4b46      	ldr	r3, [pc, #280]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800516c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005170:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	4942      	ldr	r1, [pc, #264]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800517a:	4313      	orrs	r3, r2
 800517c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00a      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800518c:	4b3d      	ldr	r3, [pc, #244]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800518e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005192:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	493a      	ldr	r1, [pc, #232]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800519c:	4313      	orrs	r3, r2
 800519e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051ae:	4b35      	ldr	r3, [pc, #212]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	4931      	ldr	r1, [pc, #196]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00a      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051d0:	4b2c      	ldr	r3, [pc, #176]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	4929      	ldr	r1, [pc, #164]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051f2:	4b24      	ldr	r3, [pc, #144]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	4920      	ldr	r1, [pc, #128]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005202:	4313      	orrs	r3, r2
 8005204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d015      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005214:	4b1b      	ldr	r3, [pc, #108]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005222:	4918      	ldr	r1, [pc, #96]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005224:	4313      	orrs	r3, r2
 8005226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005232:	d105      	bne.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005234:	4b13      	ldr	r3, [pc, #76]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	4a12      	ldr	r2, [pc, #72]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800523a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800523e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d015      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800524c:	4b0d      	ldr	r3, [pc, #52]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800524e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005252:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525a:	490a      	ldr	r1, [pc, #40]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800525c:	4313      	orrs	r3, r2
 800525e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005266:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800526a:	d105      	bne.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800526c:	4b05      	ldr	r3, [pc, #20]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	4a04      	ldr	r2, [pc, #16]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005272:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005276:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005278:	7cbb      	ldrb	r3, [r7, #18]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	40021000 	.word	0x40021000

08005288 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e07c      	b.n	8005394 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d106      	bne.n	80052ba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7fc fcd9 	bl	8001c6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2202      	movs	r2, #2
 80052be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052d0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052da:	d902      	bls.n	80052e2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	e002      	b.n	80052e8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80052e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052e6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80052f0:	d007      	beq.n	8005302 <HAL_SPI_Init+0x7a>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052fa:	d002      	beq.n	8005302 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10b      	bne.n	8005322 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005312:	d903      	bls.n	800531c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	631a      	str	r2, [r3, #48]	; 0x30
 800531a:	e002      	b.n	8005322 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	431a      	orrs	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005340:	431a      	orrs	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	431a      	orrs	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	ea42 0103 	orr.w	r1, r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	0c1b      	lsrs	r3, r3, #16
 8005362:	f003 0204 	and.w	r2, r3, #4
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005370:	431a      	orrs	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	ea42 0103 	orr.w	r1, r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	430a      	orrs	r2, r1
 8005382:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b088      	sub	sp, #32
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	603b      	str	r3, [r7, #0]
 80053a8:	4613      	mov	r3, r2
 80053aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d101      	bne.n	80053be <HAL_SPI_Transmit+0x22>
 80053ba:	2302      	movs	r3, #2
 80053bc:	e150      	b.n	8005660 <HAL_SPI_Transmit+0x2c4>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053c6:	f7fc fe37 	bl	8002038 <HAL_GetTick>
 80053ca:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80053cc:	88fb      	ldrh	r3, [r7, #6]
 80053ce:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d002      	beq.n	80053e2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80053dc:	2302      	movs	r3, #2
 80053de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053e0:	e135      	b.n	800564e <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <HAL_SPI_Transmit+0x52>
 80053e8:	88fb      	ldrh	r3, [r7, #6]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d102      	bne.n	80053f4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053f2:	e12c      	b.n	800564e <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2203      	movs	r2, #3
 80053f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	88fa      	ldrh	r2, [r7, #6]
 800540c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	88fa      	ldrh	r2, [r7, #6]
 8005412:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800543e:	d107      	bne.n	8005450 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800544e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545a:	2b40      	cmp	r3, #64	; 0x40
 800545c:	d007      	beq.n	800546e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800546c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005476:	d94b      	bls.n	8005510 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d002      	beq.n	8005486 <HAL_SPI_Transmit+0xea>
 8005480:	8afb      	ldrh	r3, [r7, #22]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d13e      	bne.n	8005504 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548a:	881a      	ldrh	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005496:	1c9a      	adds	r2, r3, #2
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	3b01      	subs	r3, #1
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80054aa:	e02b      	b.n	8005504 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d112      	bne.n	80054e0 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054be:	881a      	ldrh	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ca:	1c9a      	adds	r2, r3, #2
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	3b01      	subs	r3, #1
 80054d8:	b29a      	uxth	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054de:	e011      	b.n	8005504 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054e0:	f7fc fdaa 	bl	8002038 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d803      	bhi.n	80054f8 <HAL_SPI_Transmit+0x15c>
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f6:	d102      	bne.n	80054fe <HAL_SPI_Transmit+0x162>
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d102      	bne.n	8005504 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005502:	e0a4      	b.n	800564e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005508:	b29b      	uxth	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1ce      	bne.n	80054ac <HAL_SPI_Transmit+0x110>
 800550e:	e07c      	b.n	800560a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <HAL_SPI_Transmit+0x182>
 8005518:	8afb      	ldrh	r3, [r7, #22]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d170      	bne.n	8005600 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005522:	b29b      	uxth	r3, r3
 8005524:	2b01      	cmp	r3, #1
 8005526:	d912      	bls.n	800554e <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552c:	881a      	ldrh	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005538:	1c9a      	adds	r2, r3, #2
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005542:	b29b      	uxth	r3, r3
 8005544:	3b02      	subs	r3, #2
 8005546:	b29a      	uxth	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800554c:	e058      	b.n	8005600 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	330c      	adds	r3, #12
 8005558:	7812      	ldrb	r2, [r2, #0]
 800555a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005560:	1c5a      	adds	r2, r3, #1
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800556a:	b29b      	uxth	r3, r3
 800556c:	3b01      	subs	r3, #1
 800556e:	b29a      	uxth	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005574:	e044      	b.n	8005600 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b02      	cmp	r3, #2
 8005582:	d12b      	bne.n	80055dc <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005588:	b29b      	uxth	r3, r3
 800558a:	2b01      	cmp	r3, #1
 800558c:	d912      	bls.n	80055b4 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005592:	881a      	ldrh	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559e:	1c9a      	adds	r2, r3, #2
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	3b02      	subs	r3, #2
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055b2:	e025      	b.n	8005600 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	330c      	adds	r3, #12
 80055be:	7812      	ldrb	r2, [r2, #0]
 80055c0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	3b01      	subs	r3, #1
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055da:	e011      	b.n	8005600 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055dc:	f7fc fd2c 	bl	8002038 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d803      	bhi.n	80055f4 <HAL_SPI_Transmit+0x258>
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f2:	d102      	bne.n	80055fa <HAL_SPI_Transmit+0x25e>
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d102      	bne.n	8005600 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80055fe:	e026      	b.n	800564e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1b5      	bne.n	8005576 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	6839      	ldr	r1, [r7, #0]
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f000 fc94 	bl	8005f3c <SPI_EndRxTxTransaction>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d002      	beq.n	8005620 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2220      	movs	r2, #32
 800561e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10a      	bne.n	800563e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005628:	2300      	movs	r3, #0
 800562a:	613b      	str	r3, [r7, #16]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	613b      	str	r3, [r7, #16]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	613b      	str	r3, [r7, #16]
 800563c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	77fb      	strb	r3, [r7, #31]
 800564a:	e000      	b.n	800564e <HAL_SPI_Transmit+0x2b2>
  }

error:
 800564c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800565e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3720      	adds	r7, #32
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af02      	add	r7, sp, #8
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	603b      	str	r3, [r7, #0]
 8005674:	4613      	mov	r3, r2
 8005676:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005678:	2300      	movs	r3, #0
 800567a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005684:	d112      	bne.n	80056ac <HAL_SPI_Receive+0x44>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10e      	bne.n	80056ac <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2204      	movs	r2, #4
 8005692:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005696:	88fa      	ldrh	r2, [r7, #6]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	4613      	mov	r3, r2
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	68b9      	ldr	r1, [r7, #8]
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 f908 	bl	80058b8 <HAL_SPI_TransmitReceive>
 80056a8:	4603      	mov	r3, r0
 80056aa:	e101      	b.n	80058b0 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d101      	bne.n	80056ba <HAL_SPI_Receive+0x52>
 80056b6:	2302      	movs	r3, #2
 80056b8:	e0fa      	b.n	80058b0 <HAL_SPI_Receive+0x248>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056c2:	f7fc fcb9 	bl	8002038 <HAL_GetTick>
 80056c6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d002      	beq.n	80056da <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80056d4:	2302      	movs	r3, #2
 80056d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056d8:	e0e1      	b.n	800589e <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d002      	beq.n	80056e6 <HAL_SPI_Receive+0x7e>
 80056e0:	88fb      	ldrh	r3, [r7, #6]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d102      	bne.n	80056ec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056ea:	e0d8      	b.n	800589e <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2204      	movs	r2, #4
 80056f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	88fa      	ldrh	r2, [r7, #6]
 8005704:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	88fa      	ldrh	r2, [r7, #6]
 800570c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005736:	d908      	bls.n	800574a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005746:	605a      	str	r2, [r3, #4]
 8005748:	e007      	b.n	800575a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005758:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005762:	d107      	bne.n	8005774 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005772:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577e:	2b40      	cmp	r3, #64	; 0x40
 8005780:	d007      	beq.n	8005792 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005790:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800579a:	d867      	bhi.n	800586c <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800579c:	e030      	b.n	8005800 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d117      	bne.n	80057dc <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f103 020c 	add.w	r2, r3, #12
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b8:	7812      	ldrb	r2, [r2, #0]
 80057ba:	b2d2      	uxtb	r2, r2
 80057bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	1c5a      	adds	r2, r3, #1
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80057da:	e011      	b.n	8005800 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057dc:	f7fc fc2c 	bl	8002038 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d803      	bhi.n	80057f4 <HAL_SPI_Receive+0x18c>
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f2:	d102      	bne.n	80057fa <HAL_SPI_Receive+0x192>
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d102      	bne.n	8005800 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80057fe:	e04e      	b.n	800589e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005806:	b29b      	uxth	r3, r3
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1c8      	bne.n	800579e <HAL_SPI_Receive+0x136>
 800580c:	e034      	b.n	8005878 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b01      	cmp	r3, #1
 800581a:	d115      	bne.n	8005848 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68da      	ldr	r2, [r3, #12]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	b292      	uxth	r2, r2
 8005828:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582e:	1c9a      	adds	r2, r3, #2
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800583a:	b29b      	uxth	r3, r3
 800583c:	3b01      	subs	r3, #1
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005846:	e011      	b.n	800586c <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005848:	f7fc fbf6 	bl	8002038 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	429a      	cmp	r2, r3
 8005856:	d803      	bhi.n	8005860 <HAL_SPI_Receive+0x1f8>
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585e:	d102      	bne.n	8005866 <HAL_SPI_Receive+0x1fe>
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d102      	bne.n	800586c <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	75fb      	strb	r3, [r7, #23]
          goto error;
 800586a:	e018      	b.n	800589e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005872:	b29b      	uxth	r3, r3
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1ca      	bne.n	800580e <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	6839      	ldr	r1, [r7, #0]
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 fb05 	bl	8005e8c <SPI_EndRxTransaction>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2220      	movs	r2, #32
 800588c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005892:	2b00      	cmp	r3, #0
 8005894:	d002      	beq.n	800589c <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	75fb      	strb	r3, [r7, #23]
 800589a:	e000      	b.n	800589e <HAL_SPI_Receive+0x236>
  }

error :
 800589c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80058ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3718      	adds	r7, #24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b08a      	sub	sp, #40	; 0x28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
 80058c4:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80058c6:	2301      	movs	r3, #1
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d101      	bne.n	80058de <HAL_SPI_TransmitReceive+0x26>
 80058da:	2302      	movs	r3, #2
 80058dc:	e1fb      	b.n	8005cd6 <HAL_SPI_TransmitReceive+0x41e>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058e6:	f7fc fba7 	bl	8002038 <HAL_GetTick>
 80058ea:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058f2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80058fa:	887b      	ldrh	r3, [r7, #2]
 80058fc:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80058fe:	887b      	ldrh	r3, [r7, #2]
 8005900:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005902:	7efb      	ldrb	r3, [r7, #27]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d00e      	beq.n	8005926 <HAL_SPI_TransmitReceive+0x6e>
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800590e:	d106      	bne.n	800591e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d102      	bne.n	800591e <HAL_SPI_TransmitReceive+0x66>
 8005918:	7efb      	ldrb	r3, [r7, #27]
 800591a:	2b04      	cmp	r3, #4
 800591c:	d003      	beq.n	8005926 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800591e:	2302      	movs	r3, #2
 8005920:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005924:	e1cd      	b.n	8005cc2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d005      	beq.n	8005938 <HAL_SPI_TransmitReceive+0x80>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <HAL_SPI_TransmitReceive+0x80>
 8005932:	887b      	ldrh	r3, [r7, #2]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d103      	bne.n	8005940 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800593e:	e1c0      	b.n	8005cc2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b04      	cmp	r3, #4
 800594a:	d003      	beq.n	8005954 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2205      	movs	r2, #5
 8005950:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	887a      	ldrh	r2, [r7, #2]
 8005964:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	887a      	ldrh	r2, [r7, #2]
 800596c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	887a      	ldrh	r2, [r7, #2]
 800597a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	887a      	ldrh	r2, [r7, #2]
 8005980:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005996:	d802      	bhi.n	800599e <HAL_SPI_TransmitReceive+0xe6>
 8005998:	8a3b      	ldrh	r3, [r7, #16]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d908      	bls.n	80059b0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059ac:	605a      	str	r2, [r3, #4]
 80059ae:	e007      	b.n	80059c0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059be:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ca:	2b40      	cmp	r3, #64	; 0x40
 80059cc:	d007      	beq.n	80059de <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059e6:	d97c      	bls.n	8005ae2 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <HAL_SPI_TransmitReceive+0x13e>
 80059f0:	8a7b      	ldrh	r3, [r7, #18]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d169      	bne.n	8005aca <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fa:	881a      	ldrh	r2, [r3, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	1c9a      	adds	r2, r3, #2
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a1a:	e056      	b.n	8005aca <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d11b      	bne.n	8005a62 <HAL_SPI_TransmitReceive+0x1aa>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d016      	beq.n	8005a62 <HAL_SPI_TransmitReceive+0x1aa>
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d113      	bne.n	8005a62 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3e:	881a      	ldrh	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4a:	1c9a      	adds	r2, r3, #2
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	3b01      	subs	r3, #1
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d11c      	bne.n	8005aaa <HAL_SPI_TransmitReceive+0x1f2>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d016      	beq.n	8005aaa <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68da      	ldr	r2, [r3, #12]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	b292      	uxth	r2, r2
 8005a88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	1c9a      	adds	r2, r3, #2
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005aaa:	f7fc fac5 	bl	8002038 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d807      	bhi.n	8005aca <HAL_SPI_TransmitReceive+0x212>
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac0:	d003      	beq.n	8005aca <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005ac8:	e0fb      	b.n	8005cc2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1a3      	bne.n	8005a1c <HAL_SPI_TransmitReceive+0x164>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d19d      	bne.n	8005a1c <HAL_SPI_TransmitReceive+0x164>
 8005ae0:	e0df      	b.n	8005ca2 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <HAL_SPI_TransmitReceive+0x23a>
 8005aea:	8a7b      	ldrh	r3, [r7, #18]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	f040 80cb 	bne.w	8005c88 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d912      	bls.n	8005b22 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	881a      	ldrh	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0c:	1c9a      	adds	r2, r3, #2
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	3b02      	subs	r3, #2
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b20:	e0b2      	b.n	8005c88 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	330c      	adds	r3, #12
 8005b2c:	7812      	ldrb	r2, [r2, #0]
 8005b2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	3b01      	subs	r3, #1
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b48:	e09e      	b.n	8005c88 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d134      	bne.n	8005bc2 <HAL_SPI_TransmitReceive+0x30a>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d02f      	beq.n	8005bc2 <HAL_SPI_TransmitReceive+0x30a>
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d12c      	bne.n	8005bc2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d912      	bls.n	8005b98 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b76:	881a      	ldrh	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b82:	1c9a      	adds	r2, r3, #2
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	3b02      	subs	r3, #2
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b96:	e012      	b.n	8005bbe <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	330c      	adds	r3, #12
 8005ba2:	7812      	ldrb	r2, [r2, #0]
 8005ba4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005baa:	1c5a      	adds	r2, r3, #1
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d148      	bne.n	8005c62 <HAL_SPI_TransmitReceive+0x3aa>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d042      	beq.n	8005c62 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d923      	bls.n	8005c30 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	b292      	uxth	r2, r2
 8005bf4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	1c9a      	adds	r2, r3, #2
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	3b02      	subs	r3, #2
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d81f      	bhi.n	8005c5e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c2c:	605a      	str	r2, [r3, #4]
 8005c2e:	e016      	b.n	8005c5e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f103 020c 	add.w	r2, r3, #12
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3c:	7812      	ldrb	r2, [r2, #0]
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	3b01      	subs	r3, #1
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c62:	f7fc f9e9 	bl	8002038 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d803      	bhi.n	8005c7a <HAL_SPI_TransmitReceive+0x3c2>
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c78:	d102      	bne.n	8005c80 <HAL_SPI_TransmitReceive+0x3c8>
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d103      	bne.n	8005c88 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005c86:	e01c      	b.n	8005cc2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f47f af5b 	bne.w	8005b4a <HAL_SPI_TransmitReceive+0x292>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f47f af54 	bne.w	8005b4a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ca2:	69fa      	ldr	r2, [r7, #28]
 8005ca4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f000 f948 	bl	8005f3c <SPI_EndRxTxTransaction>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d006      	beq.n	8005cc0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	661a      	str	r2, [r3, #96]	; 0x60
 8005cbe:	e000      	b.n	8005cc2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005cc0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005cd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3728      	adds	r7, #40	; 0x28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b084      	sub	sp, #16
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	60f8      	str	r0, [r7, #12]
 8005ce6:	60b9      	str	r1, [r7, #8]
 8005ce8:	603b      	str	r3, [r7, #0]
 8005cea:	4613      	mov	r3, r2
 8005cec:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cee:	e04c      	b.n	8005d8a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf6:	d048      	beq.n	8005d8a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005cf8:	f7fc f99e 	bl	8002038 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d902      	bls.n	8005d0e <SPI_WaitFlagStateUntilTimeout+0x30>
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d13d      	bne.n	8005d8a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d26:	d111      	bne.n	8005d4c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d30:	d004      	beq.n	8005d3c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d3a:	d107      	bne.n	8005d4c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d54:	d10f      	bne.n	8005d76 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e00f      	b.n	8005daa <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	4013      	ands	r3, r2
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	bf0c      	ite	eq
 8005d9a:	2301      	moveq	r3, #1
 8005d9c:	2300      	movne	r3, #0
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	461a      	mov	r2, r3
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d1a3      	bne.n	8005cf0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b084      	sub	sp, #16
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	60f8      	str	r0, [r7, #12]
 8005dba:	60b9      	str	r1, [r7, #8]
 8005dbc:	607a      	str	r2, [r7, #4]
 8005dbe:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005dc0:	e057      	b.n	8005e72 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005dc8:	d106      	bne.n	8005dd8 <SPI_WaitFifoStateUntilTimeout+0x26>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d103      	bne.n	8005dd8 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	330c      	adds	r3, #12
 8005dd6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dde:	d048      	beq.n	8005e72 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005de0:	f7fc f92a 	bl	8002038 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d902      	bls.n	8005df6 <SPI_WaitFifoStateUntilTimeout+0x44>
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d13d      	bne.n	8005e72 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e0e:	d111      	bne.n	8005e34 <SPI_WaitFifoStateUntilTimeout+0x82>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e18:	d004      	beq.n	8005e24 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e22:	d107      	bne.n	8005e34 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e3c:	d10f      	bne.n	8005e5e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e008      	b.n	8005e84 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689a      	ldr	r2, [r3, #8]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d19f      	bne.n	8005dc2 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af02      	add	r7, sp, #8
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ea0:	d111      	bne.n	8005ec6 <SPI_EndRxTransaction+0x3a>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eaa:	d004      	beq.n	8005eb6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eb4:	d107      	bne.n	8005ec6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ec4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	2180      	movs	r1, #128	; 0x80
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f7ff ff04 	bl	8005cde <SPI_WaitFlagStateUntilTimeout>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d007      	beq.n	8005eec <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee0:	f043 0220 	orr.w	r2, r3, #32
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e023      	b.n	8005f34 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ef4:	d11d      	bne.n	8005f32 <SPI_EndRxTransaction+0xa6>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005efe:	d004      	beq.n	8005f0a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f08:	d113      	bne.n	8005f32 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f7ff ff4b 	bl	8005db2 <SPI_WaitFifoStateUntilTimeout>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d007      	beq.n	8005f32 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f26:	f043 0220 	orr.w	r2, r3, #32
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e000      	b.n	8005f34 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af02      	add	r7, sp, #8
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f7ff ff2c 	bl	8005db2 <SPI_WaitFifoStateUntilTimeout>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d007      	beq.n	8005f70 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f64:	f043 0220 	orr.w	r2, r3, #32
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e027      	b.n	8005fc0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	2200      	movs	r2, #0
 8005f78:	2180      	movs	r1, #128	; 0x80
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f7ff feaf 	bl	8005cde <SPI_WaitFlagStateUntilTimeout>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d007      	beq.n	8005f96 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f8a:	f043 0220 	orr.w	r2, r3, #32
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e014      	b.n	8005fc0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f7ff ff05 	bl	8005db2 <SPI_WaitFifoStateUntilTimeout>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d007      	beq.n	8005fbe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fb2:	f043 0220 	orr.w	r2, r3, #32
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e000      	b.n	8005fc0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e040      	b.n	800605c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d106      	bne.n	8005ff0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7fb ff4c 	bl	8001e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2224      	movs	r2, #36	; 0x24
 8005ff4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0201 	bic.w	r2, r2, #1
 8006004:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fa28 	bl	800645c <UART_SetConfig>
 800600c:	4603      	mov	r3, r0
 800600e:	2b01      	cmp	r3, #1
 8006010:	d101      	bne.n	8006016 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e022      	b.n	800605c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	2b00      	cmp	r3, #0
 800601c:	d002      	beq.n	8006024 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fd30 	bl	8006a84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006032:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689a      	ldr	r2, [r3, #8]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006042:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0201 	orr.w	r2, r2, #1
 8006052:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fdb7 	bl	8006bc8 <UART_CheckIdleState>
 800605a:	4603      	mov	r3, r0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	4613      	mov	r3, r2
 8006070:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006076:	2b20      	cmp	r3, #32
 8006078:	f040 808a 	bne.w	8006190 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d002      	beq.n	8006088 <HAL_UART_Receive_IT+0x24>
 8006082:	88fb      	ldrh	r3, [r7, #6]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e082      	b.n	8006192 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006092:	2b01      	cmp	r3, #1
 8006094:	d101      	bne.n	800609a <HAL_UART_Receive_IT+0x36>
 8006096:	2302      	movs	r3, #2
 8006098:	e07b      	b.n	8006192 <HAL_UART_Receive_IT+0x12e>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	88fa      	ldrh	r2, [r7, #6]
 80060ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	88fa      	ldrh	r2, [r7, #6]
 80060b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060c6:	d10e      	bne.n	80060e6 <HAL_UART_Receive_IT+0x82>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d105      	bne.n	80060dc <HAL_UART_Receive_IT+0x78>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80060d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060da:	e02d      	b.n	8006138 <HAL_UART_Receive_IT+0xd4>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	22ff      	movs	r2, #255	; 0xff
 80060e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060e4:	e028      	b.n	8006138 <HAL_UART_Receive_IT+0xd4>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10d      	bne.n	800610a <HAL_UART_Receive_IT+0xa6>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d104      	bne.n	8006100 <HAL_UART_Receive_IT+0x9c>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	22ff      	movs	r2, #255	; 0xff
 80060fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060fe:	e01b      	b.n	8006138 <HAL_UART_Receive_IT+0xd4>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	227f      	movs	r2, #127	; 0x7f
 8006104:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006108:	e016      	b.n	8006138 <HAL_UART_Receive_IT+0xd4>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006112:	d10d      	bne.n	8006130 <HAL_UART_Receive_IT+0xcc>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d104      	bne.n	8006126 <HAL_UART_Receive_IT+0xc2>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	227f      	movs	r2, #127	; 0x7f
 8006120:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006124:	e008      	b.n	8006138 <HAL_UART_Receive_IT+0xd4>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	223f      	movs	r2, #63	; 0x3f
 800612a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800612e:	e003      	b.n	8006138 <HAL_UART_Receive_IT+0xd4>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2222      	movs	r2, #34	; 0x22
 8006142:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689a      	ldr	r2, [r3, #8]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f042 0201 	orr.w	r2, r2, #1
 8006152:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800615c:	d107      	bne.n	800616e <HAL_UART_Receive_IT+0x10a>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d103      	bne.n	800616e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4a0d      	ldr	r2, [pc, #52]	; (80061a0 <HAL_UART_Receive_IT+0x13c>)
 800616a:	661a      	str	r2, [r3, #96]	; 0x60
 800616c:	e002      	b.n	8006174 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4a0c      	ldr	r2, [pc, #48]	; (80061a4 <HAL_UART_Receive_IT+0x140>)
 8006172:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800618a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800618c:	2300      	movs	r3, #0
 800618e:	e000      	b.n	8006192 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8006190:	2302      	movs	r3, #2
  }
}
 8006192:	4618      	mov	r0, r3
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	08006e91 	.word	0x08006e91
 80061a4:	08006de7 	.word	0x08006de7

080061a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b088      	sub	sp, #32
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80061c8:	69fa      	ldr	r2, [r7, #28]
 80061ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80061ce:	4013      	ands	r3, r2
 80061d0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d113      	bne.n	8006200 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	f003 0320 	and.w	r3, r3, #32
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00e      	beq.n	8006200 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	f003 0320 	and.w	r3, r3, #32
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d009      	beq.n	8006200 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 8114 	beq.w	800641e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	4798      	blx	r3
      }
      return;
 80061fe:	e10e      	b.n	800641e <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	f000 80d6 	beq.w	80063b4 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b00      	cmp	r3, #0
 8006210:	d105      	bne.n	800621e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006218:	2b00      	cmp	r3, #0
 800621a:	f000 80cb 	beq.w	80063b4 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00e      	beq.n	8006246 <HAL_UART_IRQHandler+0x9e>
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800622e:	2b00      	cmp	r3, #0
 8006230:	d009      	beq.n	8006246 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2201      	movs	r2, #1
 8006238:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800623e:	f043 0201 	orr.w	r2, r3, #1
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00e      	beq.n	800626e <HAL_UART_IRQHandler+0xc6>
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	d009      	beq.n	800626e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2202      	movs	r2, #2
 8006260:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006266:	f043 0204 	orr.w	r2, r3, #4
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00e      	beq.n	8006296 <HAL_UART_IRQHandler+0xee>
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b00      	cmp	r3, #0
 8006280:	d009      	beq.n	8006296 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2204      	movs	r2, #4
 8006288:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800628e:	f043 0202 	orr.w	r2, r3, #2
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	f003 0308 	and.w	r3, r3, #8
 800629c:	2b00      	cmp	r3, #0
 800629e:	d013      	beq.n	80062c8 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	f003 0320 	and.w	r3, r3, #32
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d104      	bne.n	80062b4 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d009      	beq.n	80062c8 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2208      	movs	r2, #8
 80062ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062c0:	f043 0208 	orr.w	r2, r3, #8
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00f      	beq.n	80062f2 <HAL_UART_IRQHandler+0x14a>
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00a      	beq.n	80062f2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062ea:	f043 0220 	orr.w	r2, r3, #32
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f000 8093 	beq.w	8006422 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	f003 0320 	and.w	r3, r3, #32
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00c      	beq.n	8006320 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	f003 0320 	and.w	r3, r3, #32
 800630c:	2b00      	cmp	r3, #0
 800630e:	d007      	beq.n	8006320 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006314:	2b00      	cmp	r3, #0
 8006316:	d003      	beq.n	8006320 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006324:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006330:	2b40      	cmp	r3, #64	; 0x40
 8006332:	d004      	beq.n	800633e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800633a:	2b00      	cmp	r3, #0
 800633c:	d031      	beq.n	80063a2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fd02 	bl	8006d48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634e:	2b40      	cmp	r3, #64	; 0x40
 8006350:	d123      	bne.n	800639a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006360:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006366:	2b00      	cmp	r3, #0
 8006368:	d013      	beq.n	8006392 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800636e:	4a30      	ldr	r2, [pc, #192]	; (8006430 <HAL_UART_IRQHandler+0x288>)
 8006370:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006376:	4618      	mov	r0, r3
 8006378:	f7fb ff9d 	bl	80022b6 <HAL_DMA_Abort_IT>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d016      	beq.n	80063b0 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800638c:	4610      	mov	r0, r2
 800638e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006390:	e00e      	b.n	80063b0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f858 	bl	8006448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006398:	e00a      	b.n	80063b0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f854 	bl	8006448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a0:	e006      	b.n	80063b0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f850 	bl	8006448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80063ae:	e038      	b.n	8006422 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b0:	bf00      	nop
    return;
 80063b2:	e036      	b.n	8006422 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00d      	beq.n	80063da <HAL_UART_IRQHandler+0x232>
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d008      	beq.n	80063da <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80063d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fdb1 	bl	8006f3a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063d8:	e026      	b.n	8006428 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00d      	beq.n	8006400 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d008      	beq.n	8006400 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d017      	beq.n	8006426 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	4798      	blx	r3
    }
    return;
 80063fe:	e012      	b.n	8006426 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00e      	beq.n	8006428 <HAL_UART_IRQHandler+0x280>
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006410:	2b00      	cmp	r3, #0
 8006412:	d009      	beq.n	8006428 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fccd 	bl	8006db4 <UART_EndTransmit_IT>
    return;
 800641a:	bf00      	nop
 800641c:	e004      	b.n	8006428 <HAL_UART_IRQHandler+0x280>
      return;
 800641e:	bf00      	nop
 8006420:	e002      	b.n	8006428 <HAL_UART_IRQHandler+0x280>
    return;
 8006422:	bf00      	nop
 8006424:	e000      	b.n	8006428 <HAL_UART_IRQHandler+0x280>
    return;
 8006426:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006428:	3720      	adds	r7, #32
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	08006d89 	.word	0x08006d89

08006434 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800645c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006460:	b08a      	sub	sp, #40	; 0x28
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006466:	2300      	movs	r3, #0
 8006468:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800646e:	2300      	movs	r3, #0
 8006470:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	431a      	orrs	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	431a      	orrs	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	69db      	ldr	r3, [r3, #28]
 8006486:	4313      	orrs	r3, r2
 8006488:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	4bbc      	ldr	r3, [pc, #752]	; (8006784 <UART_SetConfig+0x328>)
 8006492:	4013      	ands	r3, r2
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	6812      	ldr	r2, [r2, #0]
 8006498:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800649a:	430b      	orrs	r3, r1
 800649c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68da      	ldr	r2, [r3, #12]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	430a      	orrs	r2, r1
 80064b2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4ab2      	ldr	r2, [pc, #712]	; (8006788 <UART_SetConfig+0x32c>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d004      	beq.n	80064ce <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ca:	4313      	orrs	r3, r2
 80064cc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064de:	430a      	orrs	r2, r1
 80064e0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4aa9      	ldr	r2, [pc, #676]	; (800678c <UART_SetConfig+0x330>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d126      	bne.n	800653a <UART_SetConfig+0xde>
 80064ec:	4ba8      	ldr	r3, [pc, #672]	; (8006790 <UART_SetConfig+0x334>)
 80064ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f2:	f003 0303 	and.w	r3, r3, #3
 80064f6:	2b03      	cmp	r3, #3
 80064f8:	d81a      	bhi.n	8006530 <UART_SetConfig+0xd4>
 80064fa:	a201      	add	r2, pc, #4	; (adr r2, 8006500 <UART_SetConfig+0xa4>)
 80064fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006500:	08006511 	.word	0x08006511
 8006504:	08006521 	.word	0x08006521
 8006508:	08006519 	.word	0x08006519
 800650c:	08006529 	.word	0x08006529
 8006510:	2301      	movs	r3, #1
 8006512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006516:	e0ab      	b.n	8006670 <UART_SetConfig+0x214>
 8006518:	2302      	movs	r3, #2
 800651a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800651e:	e0a7      	b.n	8006670 <UART_SetConfig+0x214>
 8006520:	2304      	movs	r3, #4
 8006522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006526:	e0a3      	b.n	8006670 <UART_SetConfig+0x214>
 8006528:	2308      	movs	r3, #8
 800652a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800652e:	e09f      	b.n	8006670 <UART_SetConfig+0x214>
 8006530:	2310      	movs	r3, #16
 8006532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006536:	bf00      	nop
 8006538:	e09a      	b.n	8006670 <UART_SetConfig+0x214>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a95      	ldr	r2, [pc, #596]	; (8006794 <UART_SetConfig+0x338>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d138      	bne.n	80065b6 <UART_SetConfig+0x15a>
 8006544:	4b92      	ldr	r3, [pc, #584]	; (8006790 <UART_SetConfig+0x334>)
 8006546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654a:	f003 030c 	and.w	r3, r3, #12
 800654e:	2b0c      	cmp	r3, #12
 8006550:	d82c      	bhi.n	80065ac <UART_SetConfig+0x150>
 8006552:	a201      	add	r2, pc, #4	; (adr r2, 8006558 <UART_SetConfig+0xfc>)
 8006554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006558:	0800658d 	.word	0x0800658d
 800655c:	080065ad 	.word	0x080065ad
 8006560:	080065ad 	.word	0x080065ad
 8006564:	080065ad 	.word	0x080065ad
 8006568:	0800659d 	.word	0x0800659d
 800656c:	080065ad 	.word	0x080065ad
 8006570:	080065ad 	.word	0x080065ad
 8006574:	080065ad 	.word	0x080065ad
 8006578:	08006595 	.word	0x08006595
 800657c:	080065ad 	.word	0x080065ad
 8006580:	080065ad 	.word	0x080065ad
 8006584:	080065ad 	.word	0x080065ad
 8006588:	080065a5 	.word	0x080065a5
 800658c:	2300      	movs	r3, #0
 800658e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006592:	e06d      	b.n	8006670 <UART_SetConfig+0x214>
 8006594:	2302      	movs	r3, #2
 8006596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800659a:	e069      	b.n	8006670 <UART_SetConfig+0x214>
 800659c:	2304      	movs	r3, #4
 800659e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065a2:	e065      	b.n	8006670 <UART_SetConfig+0x214>
 80065a4:	2308      	movs	r3, #8
 80065a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065aa:	e061      	b.n	8006670 <UART_SetConfig+0x214>
 80065ac:	2310      	movs	r3, #16
 80065ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065b2:	bf00      	nop
 80065b4:	e05c      	b.n	8006670 <UART_SetConfig+0x214>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a77      	ldr	r2, [pc, #476]	; (8006798 <UART_SetConfig+0x33c>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d125      	bne.n	800660c <UART_SetConfig+0x1b0>
 80065c0:	4b73      	ldr	r3, [pc, #460]	; (8006790 <UART_SetConfig+0x334>)
 80065c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065ca:	2b10      	cmp	r3, #16
 80065cc:	d011      	beq.n	80065f2 <UART_SetConfig+0x196>
 80065ce:	2b10      	cmp	r3, #16
 80065d0:	d802      	bhi.n	80065d8 <UART_SetConfig+0x17c>
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d005      	beq.n	80065e2 <UART_SetConfig+0x186>
 80065d6:	e014      	b.n	8006602 <UART_SetConfig+0x1a6>
 80065d8:	2b20      	cmp	r3, #32
 80065da:	d006      	beq.n	80065ea <UART_SetConfig+0x18e>
 80065dc:	2b30      	cmp	r3, #48	; 0x30
 80065de:	d00c      	beq.n	80065fa <UART_SetConfig+0x19e>
 80065e0:	e00f      	b.n	8006602 <UART_SetConfig+0x1a6>
 80065e2:	2300      	movs	r3, #0
 80065e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065e8:	e042      	b.n	8006670 <UART_SetConfig+0x214>
 80065ea:	2302      	movs	r3, #2
 80065ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065f0:	e03e      	b.n	8006670 <UART_SetConfig+0x214>
 80065f2:	2304      	movs	r3, #4
 80065f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065f8:	e03a      	b.n	8006670 <UART_SetConfig+0x214>
 80065fa:	2308      	movs	r3, #8
 80065fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006600:	e036      	b.n	8006670 <UART_SetConfig+0x214>
 8006602:	2310      	movs	r3, #16
 8006604:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006608:	bf00      	nop
 800660a:	e031      	b.n	8006670 <UART_SetConfig+0x214>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a5d      	ldr	r2, [pc, #372]	; (8006788 <UART_SetConfig+0x32c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d129      	bne.n	800666a <UART_SetConfig+0x20e>
 8006616:	4b5e      	ldr	r3, [pc, #376]	; (8006790 <UART_SetConfig+0x334>)
 8006618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800661c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006624:	d014      	beq.n	8006650 <UART_SetConfig+0x1f4>
 8006626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800662a:	d802      	bhi.n	8006632 <UART_SetConfig+0x1d6>
 800662c:	2b00      	cmp	r3, #0
 800662e:	d007      	beq.n	8006640 <UART_SetConfig+0x1e4>
 8006630:	e016      	b.n	8006660 <UART_SetConfig+0x204>
 8006632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006636:	d007      	beq.n	8006648 <UART_SetConfig+0x1ec>
 8006638:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800663c:	d00c      	beq.n	8006658 <UART_SetConfig+0x1fc>
 800663e:	e00f      	b.n	8006660 <UART_SetConfig+0x204>
 8006640:	2300      	movs	r3, #0
 8006642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006646:	e013      	b.n	8006670 <UART_SetConfig+0x214>
 8006648:	2302      	movs	r3, #2
 800664a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800664e:	e00f      	b.n	8006670 <UART_SetConfig+0x214>
 8006650:	2304      	movs	r3, #4
 8006652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006656:	e00b      	b.n	8006670 <UART_SetConfig+0x214>
 8006658:	2308      	movs	r3, #8
 800665a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800665e:	e007      	b.n	8006670 <UART_SetConfig+0x214>
 8006660:	2310      	movs	r3, #16
 8006662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006666:	bf00      	nop
 8006668:	e002      	b.n	8006670 <UART_SetConfig+0x214>
 800666a:	2310      	movs	r3, #16
 800666c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a44      	ldr	r2, [pc, #272]	; (8006788 <UART_SetConfig+0x32c>)
 8006676:	4293      	cmp	r3, r2
 8006678:	f040 80fb 	bne.w	8006872 <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800667c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006680:	2b08      	cmp	r3, #8
 8006682:	d824      	bhi.n	80066ce <UART_SetConfig+0x272>
 8006684:	a201      	add	r2, pc, #4	; (adr r2, 800668c <UART_SetConfig+0x230>)
 8006686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668a:	bf00      	nop
 800668c:	080066b1 	.word	0x080066b1
 8006690:	080066cf 	.word	0x080066cf
 8006694:	080066b9 	.word	0x080066b9
 8006698:	080066cf 	.word	0x080066cf
 800669c:	080066bf 	.word	0x080066bf
 80066a0:	080066cf 	.word	0x080066cf
 80066a4:	080066cf 	.word	0x080066cf
 80066a8:	080066cf 	.word	0x080066cf
 80066ac:	080066c7 	.word	0x080066c7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80066b0:	f7fe fbd8 	bl	8004e64 <HAL_RCC_GetPCLK1Freq>
 80066b4:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80066b6:	e00d      	b.n	80066d4 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80066b8:	4b38      	ldr	r3, [pc, #224]	; (800679c <UART_SetConfig+0x340>)
 80066ba:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80066bc:	e00a      	b.n	80066d4 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80066be:	f7fe fb3b 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 80066c2:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80066c4:	e006      	b.n	80066d4 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80066c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ca:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80066cc:	e002      	b.n	80066d4 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	76fb      	strb	r3, [r7, #27]
        break;
 80066d2:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f000 81c8 	beq.w	8006a6c <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	4613      	mov	r3, r2
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	4413      	add	r3, r2
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d305      	bcc.n	80066f8 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d902      	bls.n	80066fe <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	76fb      	strb	r3, [r7, #27]
 80066fc:	e1b6      	b.n	8006a6c <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 80066fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006702:	2b08      	cmp	r3, #8
 8006704:	f200 80a2 	bhi.w	800684c <UART_SetConfig+0x3f0>
 8006708:	a201      	add	r2, pc, #4	; (adr r2, 8006710 <UART_SetConfig+0x2b4>)
 800670a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670e:	bf00      	nop
 8006710:	08006735 	.word	0x08006735
 8006714:	0800684d 	.word	0x0800684d
 8006718:	080067a1 	.word	0x080067a1
 800671c:	0800684d 	.word	0x0800684d
 8006720:	080067d5 	.word	0x080067d5
 8006724:	0800684d 	.word	0x0800684d
 8006728:	0800684d 	.word	0x0800684d
 800672c:	0800684d 	.word	0x0800684d
 8006730:	08006823 	.word	0x08006823
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8006734:	f7fe fb96 	bl	8004e64 <HAL_RCC_GetPCLK1Freq>
 8006738:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	4619      	mov	r1, r3
 800673e:	f04f 0200 	mov.w	r2, #0
 8006742:	f04f 0300 	mov.w	r3, #0
 8006746:	f04f 0400 	mov.w	r4, #0
 800674a:	0214      	lsls	r4, r2, #8
 800674c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006750:	020b      	lsls	r3, r1, #8
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	6852      	ldr	r2, [r2, #4]
 8006756:	0852      	lsrs	r2, r2, #1
 8006758:	4611      	mov	r1, r2
 800675a:	f04f 0200 	mov.w	r2, #0
 800675e:	eb13 0b01 	adds.w	fp, r3, r1
 8006762:	eb44 0c02 	adc.w	ip, r4, r2
 8006766:	4658      	mov	r0, fp
 8006768:	4661      	mov	r1, ip
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f04f 0400 	mov.w	r4, #0
 8006772:	461a      	mov	r2, r3
 8006774:	4623      	mov	r3, r4
 8006776:	f7fa f949 	bl	8000a0c <__aeabi_uldivmod>
 800677a:	4603      	mov	r3, r0
 800677c:	460c      	mov	r4, r1
 800677e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006780:	e067      	b.n	8006852 <UART_SetConfig+0x3f6>
 8006782:	bf00      	nop
 8006784:	efff69f3 	.word	0xefff69f3
 8006788:	40008000 	.word	0x40008000
 800678c:	40013800 	.word	0x40013800
 8006790:	40021000 	.word	0x40021000
 8006794:	40004400 	.word	0x40004400
 8006798:	40004800 	.word	0x40004800
 800679c:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	085b      	lsrs	r3, r3, #1
 80067a6:	f04f 0400 	mov.w	r4, #0
 80067aa:	49ae      	ldr	r1, [pc, #696]	; (8006a64 <UART_SetConfig+0x608>)
 80067ac:	f04f 0200 	mov.w	r2, #0
 80067b0:	eb13 0b01 	adds.w	fp, r3, r1
 80067b4:	eb44 0c02 	adc.w	ip, r4, r2
 80067b8:	4658      	mov	r0, fp
 80067ba:	4661      	mov	r1, ip
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f04f 0400 	mov.w	r4, #0
 80067c4:	461a      	mov	r2, r3
 80067c6:	4623      	mov	r3, r4
 80067c8:	f7fa f920 	bl	8000a0c <__aeabi_uldivmod>
 80067cc:	4603      	mov	r3, r0
 80067ce:	460c      	mov	r4, r1
 80067d0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80067d2:	e03e      	b.n	8006852 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80067d4:	f7fe fab0 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 80067d8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	4619      	mov	r1, r3
 80067de:	f04f 0200 	mov.w	r2, #0
 80067e2:	f04f 0300 	mov.w	r3, #0
 80067e6:	f04f 0400 	mov.w	r4, #0
 80067ea:	0214      	lsls	r4, r2, #8
 80067ec:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80067f0:	020b      	lsls	r3, r1, #8
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	6852      	ldr	r2, [r2, #4]
 80067f6:	0852      	lsrs	r2, r2, #1
 80067f8:	4611      	mov	r1, r2
 80067fa:	f04f 0200 	mov.w	r2, #0
 80067fe:	eb13 0b01 	adds.w	fp, r3, r1
 8006802:	eb44 0c02 	adc.w	ip, r4, r2
 8006806:	4658      	mov	r0, fp
 8006808:	4661      	mov	r1, ip
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f04f 0400 	mov.w	r4, #0
 8006812:	461a      	mov	r2, r3
 8006814:	4623      	mov	r3, r4
 8006816:	f7fa f8f9 	bl	8000a0c <__aeabi_uldivmod>
 800681a:	4603      	mov	r3, r0
 800681c:	460c      	mov	r4, r1
 800681e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006820:	e017      	b.n	8006852 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	085b      	lsrs	r3, r3, #1
 8006828:	f04f 0400 	mov.w	r4, #0
 800682c:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8006830:	f144 0100 	adc.w	r1, r4, #0
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f04f 0400 	mov.w	r4, #0
 800683c:	461a      	mov	r2, r3
 800683e:	4623      	mov	r3, r4
 8006840:	f7fa f8e4 	bl	8000a0c <__aeabi_uldivmod>
 8006844:	4603      	mov	r3, r0
 8006846:	460c      	mov	r4, r1
 8006848:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800684a:	e002      	b.n	8006852 <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	76fb      	strb	r3, [r7, #27]
            break;
 8006850:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006858:	d308      	bcc.n	800686c <UART_SetConfig+0x410>
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006860:	d204      	bcs.n	800686c <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	69fa      	ldr	r2, [r7, #28]
 8006868:	60da      	str	r2, [r3, #12]
 800686a:	e0ff      	b.n	8006a6c <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	76fb      	strb	r3, [r7, #27]
 8006870:	e0fc      	b.n	8006a6c <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800687a:	f040 8083 	bne.w	8006984 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 800687e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006882:	2b08      	cmp	r3, #8
 8006884:	d85e      	bhi.n	8006944 <UART_SetConfig+0x4e8>
 8006886:	a201      	add	r2, pc, #4	; (adr r2, 800688c <UART_SetConfig+0x430>)
 8006888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688c:	080068b1 	.word	0x080068b1
 8006890:	080068d1 	.word	0x080068d1
 8006894:	080068f1 	.word	0x080068f1
 8006898:	08006945 	.word	0x08006945
 800689c:	0800690d 	.word	0x0800690d
 80068a0:	08006945 	.word	0x08006945
 80068a4:	08006945 	.word	0x08006945
 80068a8:	08006945 	.word	0x08006945
 80068ac:	0800692d 	.word	0x0800692d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068b0:	f7fe fad8 	bl	8004e64 <HAL_RCC_GetPCLK1Freq>
 80068b4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	005a      	lsls	r2, r3, #1
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	085b      	lsrs	r3, r3, #1
 80068c0:	441a      	add	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068ce:	e03c      	b.n	800694a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068d0:	f7fe fade 	bl	8004e90 <HAL_RCC_GetPCLK2Freq>
 80068d4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	005a      	lsls	r2, r3, #1
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	085b      	lsrs	r3, r3, #1
 80068e0:	441a      	add	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068ee:	e02c      	b.n	800694a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	085b      	lsrs	r3, r3, #1
 80068f6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80068fa:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	6852      	ldr	r2, [r2, #4]
 8006902:	fbb3 f3f2 	udiv	r3, r3, r2
 8006906:	b29b      	uxth	r3, r3
 8006908:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800690a:	e01e      	b.n	800694a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800690c:	f7fe fa14 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 8006910:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	005a      	lsls	r2, r3, #1
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	085b      	lsrs	r3, r3, #1
 800691c:	441a      	add	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	fbb2 f3f3 	udiv	r3, r2, r3
 8006926:	b29b      	uxth	r3, r3
 8006928:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800692a:	e00e      	b.n	800694a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	085b      	lsrs	r3, r3, #1
 8006932:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	fbb2 f3f3 	udiv	r3, r2, r3
 800693e:	b29b      	uxth	r3, r3
 8006940:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006942:	e002      	b.n	800694a <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	76fb      	strb	r3, [r7, #27]
        break;
 8006948:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	2b0f      	cmp	r3, #15
 800694e:	d916      	bls.n	800697e <UART_SetConfig+0x522>
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006956:	d212      	bcs.n	800697e <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	b29b      	uxth	r3, r3
 800695c:	f023 030f 	bic.w	r3, r3, #15
 8006960:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	085b      	lsrs	r3, r3, #1
 8006966:	b29b      	uxth	r3, r3
 8006968:	f003 0307 	and.w	r3, r3, #7
 800696c:	b29a      	uxth	r2, r3
 800696e:	89fb      	ldrh	r3, [r7, #14]
 8006970:	4313      	orrs	r3, r2
 8006972:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	89fa      	ldrh	r2, [r7, #14]
 800697a:	60da      	str	r2, [r3, #12]
 800697c:	e076      	b.n	8006a6c <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	76fb      	strb	r3, [r7, #27]
 8006982:	e073      	b.n	8006a6c <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 8006984:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006988:	2b08      	cmp	r3, #8
 800698a:	d85c      	bhi.n	8006a46 <UART_SetConfig+0x5ea>
 800698c:	a201      	add	r2, pc, #4	; (adr r2, 8006994 <UART_SetConfig+0x538>)
 800698e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006992:	bf00      	nop
 8006994:	080069b9 	.word	0x080069b9
 8006998:	080069d7 	.word	0x080069d7
 800699c:	080069f5 	.word	0x080069f5
 80069a0:	08006a47 	.word	0x08006a47
 80069a4:	08006a11 	.word	0x08006a11
 80069a8:	08006a47 	.word	0x08006a47
 80069ac:	08006a47 	.word	0x08006a47
 80069b0:	08006a47 	.word	0x08006a47
 80069b4:	08006a2f 	.word	0x08006a2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069b8:	f7fe fa54 	bl	8004e64 <HAL_RCC_GetPCLK1Freq>
 80069bc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	085a      	lsrs	r2, r3, #1
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	441a      	add	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80069d4:	e03a      	b.n	8006a4c <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069d6:	f7fe fa5b 	bl	8004e90 <HAL_RCC_GetPCLK2Freq>
 80069da:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	085a      	lsrs	r2, r3, #1
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	441a      	add	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80069f2:	e02b      	b.n	8006a4c <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	085b      	lsrs	r3, r3, #1
 80069fa:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80069fe:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	6852      	ldr	r2, [r2, #4]
 8006a06:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006a0e:	e01d      	b.n	8006a4c <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a10:	f7fe f992 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 8006a14:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	085a      	lsrs	r2, r3, #1
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	441a      	add	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006a2c:	e00e      	b.n	8006a4c <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	085b      	lsrs	r3, r3, #1
 8006a34:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006a44:	e002      	b.n	8006a4c <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	76fb      	strb	r3, [r7, #27]
        break;
 8006a4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	2b0f      	cmp	r3, #15
 8006a50:	d90a      	bls.n	8006a68 <UART_SetConfig+0x60c>
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a58:	d206      	bcs.n	8006a68 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	69fa      	ldr	r2, [r7, #28]
 8006a60:	60da      	str	r2, [r3, #12]
 8006a62:	e003      	b.n	8006a6c <UART_SetConfig+0x610>
 8006a64:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006a78:	7efb      	ldrb	r3, [r7, #27]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3728      	adds	r7, #40	; 0x28
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08006a84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00a      	beq.n	8006aae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00a      	beq.n	8006ad0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad4:	f003 0304 	and.w	r3, r3, #4
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00a      	beq.n	8006af2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af6:	f003 0308 	and.w	r3, r3, #8
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00a      	beq.n	8006b14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	430a      	orrs	r2, r1
 8006b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b18:	f003 0310 	and.w	r3, r3, #16
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00a      	beq.n	8006b36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	430a      	orrs	r2, r1
 8006b34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3a:	f003 0320 	and.w	r3, r3, #32
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00a      	beq.n	8006b58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	430a      	orrs	r2, r1
 8006b56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d01a      	beq.n	8006b9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	430a      	orrs	r2, r1
 8006b78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b82:	d10a      	bne.n	8006b9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	430a      	orrs	r2, r1
 8006b98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00a      	beq.n	8006bbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	605a      	str	r2, [r3, #4]
  }
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af02      	add	r7, sp, #8
 8006bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006bd6:	f7fb fa2f 	bl	8002038 <HAL_GetTick>
 8006bda:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0308 	and.w	r3, r3, #8
 8006be6:	2b08      	cmp	r3, #8
 8006be8:	d10e      	bne.n	8006c08 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f82a 	bl	8006c52 <UART_WaitOnFlagUntilTimeout>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d001      	beq.n	8006c08 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e020      	b.n	8006c4a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0304 	and.w	r3, r3, #4
 8006c12:	2b04      	cmp	r3, #4
 8006c14:	d10e      	bne.n	8006c34 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f814 	bl	8006c52 <UART_WaitOnFlagUntilTimeout>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e00a      	b.n	8006c4a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2220      	movs	r2, #32
 8006c38:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b084      	sub	sp, #16
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	60f8      	str	r0, [r7, #12]
 8006c5a:	60b9      	str	r1, [r7, #8]
 8006c5c:	603b      	str	r3, [r7, #0]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c62:	e05d      	b.n	8006d20 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6a:	d059      	beq.n	8006d20 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c6c:	f7fb f9e4 	bl	8002038 <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	69ba      	ldr	r2, [r7, #24]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d302      	bcc.n	8006c82 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d11b      	bne.n	8006cba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c90:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689a      	ldr	r2, [r3, #8]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0201 	bic.w	r2, r2, #1
 8006ca0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2220      	movs	r2, #32
 8006cac:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e042      	b.n	8006d40 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0304 	and.w	r3, r3, #4
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d02b      	beq.n	8006d20 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cd6:	d123      	bne.n	8006d20 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ce0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006cf0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689a      	ldr	r2, [r3, #8]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f022 0201 	bic.w	r2, r2, #1
 8006d00:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2220      	movs	r2, #32
 8006d06:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2220      	movs	r2, #32
 8006d12:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e00f      	b.n	8006d40 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	69da      	ldr	r2, [r3, #28]
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	4013      	ands	r3, r2
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	bf0c      	ite	eq
 8006d30:	2301      	moveq	r3, #1
 8006d32:	2300      	movne	r3, #0
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	461a      	mov	r2, r3
 8006d38:	79fb      	ldrb	r3, [r7, #7]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d092      	beq.n	8006c64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d5e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689a      	ldr	r2, [r3, #8]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f022 0201 	bic.w	r2, r2, #1
 8006d6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2220      	movs	r2, #32
 8006d74:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f7ff fb4e 	bl	8006448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dac:	bf00      	nop
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dca:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2220      	movs	r2, #32
 8006dd0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7ff fb2b 	bl	8006434 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dde:	bf00      	nop
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b084      	sub	sp, #16
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006df4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dfa:	2b22      	cmp	r3, #34	; 0x22
 8006dfc:	d13a      	bne.n	8006e74 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006e04:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006e06:	89bb      	ldrh	r3, [r7, #12]
 8006e08:	b2d9      	uxtb	r1, r3
 8006e0a:	89fb      	ldrh	r3, [r7, #14]
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e12:	400a      	ands	r2, r1
 8006e14:	b2d2      	uxtb	r2, r2
 8006e16:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e1c:	1c5a      	adds	r2, r3, #1
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d123      	bne.n	8006e88 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e4e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689a      	ldr	r2, [r3, #8]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f022 0201 	bic.w	r2, r2, #1
 8006e5e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2220      	movs	r2, #32
 8006e64:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f7fa fe7f 	bl	8001b70 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e72:	e009      	b.n	8006e88 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	8b1b      	ldrh	r3, [r3, #24]
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f042 0208 	orr.w	r2, r2, #8
 8006e84:	b292      	uxth	r2, r2
 8006e86:	831a      	strh	r2, [r3, #24]
}
 8006e88:	bf00      	nop
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e9e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ea4:	2b22      	cmp	r3, #34	; 0x22
 8006ea6:	d13a      	bne.n	8006f1e <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006eae:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006eb6:	89ba      	ldrh	r2, [r7, #12]
 8006eb8:	89fb      	ldrh	r3, [r7, #14]
 8006eba:	4013      	ands	r3, r2
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec6:	1c9a      	adds	r2, r3, #2
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d123      	bne.n	8006f32 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006ef8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	689a      	ldr	r2, [r3, #8]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 0201 	bic.w	r2, r2, #1
 8006f08:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7fa fe2a 	bl	8001b70 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f1c:	e009      	b.n	8006f32 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	8b1b      	ldrh	r3, [r3, #24]
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f042 0208 	orr.w	r2, r2, #8
 8006f2e:	b292      	uxth	r2, r2
 8006f30:	831a      	strh	r2, [r3, #24]
}
 8006f32:	bf00      	nop
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b083      	sub	sp, #12
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f42:	bf00      	nop
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006f4e:	b084      	sub	sp, #16
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	f107 0014 	add.w	r0, r7, #20
 8006f5c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	370c      	adds	r7, #12
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	b004      	add	sp, #16
 8006f6e:	4770      	bx	lr

08006f70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006f78:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006f7c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b085      	sub	sp, #20
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006faa:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006fae:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	43db      	mvns	r3, r3
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3714      	adds	r7, #20
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	f107 0014 	add.w	r0, r7, #20
 8007000:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7ff ffa3 	bl	8006f70 <USB_EnableGlobalInt>

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007036:	b004      	add	sp, #16
 8007038:	4770      	bx	lr
	...

0800703c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800703c:	b490      	push	{r4, r7}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	881b      	ldrh	r3, [r3, #0]
 8007056:	b29b      	uxth	r3, r3
 8007058:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800705c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007060:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	78db      	ldrb	r3, [r3, #3]
 8007066:	2b03      	cmp	r3, #3
 8007068:	d819      	bhi.n	800709e <USB_ActivateEndpoint+0x62>
 800706a:	a201      	add	r2, pc, #4	; (adr r2, 8007070 <USB_ActivateEndpoint+0x34>)
 800706c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007070:	08007081 	.word	0x08007081
 8007074:	08007095 	.word	0x08007095
 8007078:	080070a5 	.word	0x080070a5
 800707c:	0800708b 	.word	0x0800708b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007080:	89bb      	ldrh	r3, [r7, #12]
 8007082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007086:	81bb      	strh	r3, [r7, #12]
      break;
 8007088:	e00d      	b.n	80070a6 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800708a:	89bb      	ldrh	r3, [r7, #12]
 800708c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007090:	81bb      	strh	r3, [r7, #12]
      break;
 8007092:	e008      	b.n	80070a6 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007094:	89bb      	ldrh	r3, [r7, #12]
 8007096:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800709a:	81bb      	strh	r3, [r7, #12]
      break;
 800709c:	e003      	b.n	80070a6 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	73fb      	strb	r3, [r7, #15]
      break;
 80070a2:	e000      	b.n	80070a6 <USB_ActivateEndpoint+0x6a>
      break;
 80070a4:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	441a      	add	r2, r3
 80070b0:	89bb      	ldrh	r3, [r7, #12]
 80070b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4413      	add	r3, r2
 80070d0:	881b      	ldrh	r3, [r3, #0]
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	b21b      	sxth	r3, r3
 80070d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070de:	b21a      	sxth	r2, r3
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	b21b      	sxth	r3, r3
 80070e6:	4313      	orrs	r3, r2
 80070e8:	b21b      	sxth	r3, r3
 80070ea:	b29c      	uxth	r4, r3
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	441a      	add	r2, r3
 80070f6:	4b8a      	ldr	r3, [pc, #552]	; (8007320 <USB_ActivateEndpoint+0x2e4>)
 80070f8:	4323      	orrs	r3, r4
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	7b1b      	ldrb	r3, [r3, #12]
 8007102:	2b00      	cmp	r3, #0
 8007104:	f040 8112 	bne.w	800732c <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	785b      	ldrb	r3, [r3, #1]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d067      	beq.n	80071e0 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007110:	687c      	ldr	r4, [r7, #4]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007118:	b29b      	uxth	r3, r3
 800711a:	441c      	add	r4, r3
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	00db      	lsls	r3, r3, #3
 8007122:	4423      	add	r3, r4
 8007124:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007128:	461c      	mov	r4, r3
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	88db      	ldrh	r3, [r3, #6]
 800712e:	085b      	lsrs	r3, r3, #1
 8007130:	b29b      	uxth	r3, r3
 8007132:	005b      	lsls	r3, r3, #1
 8007134:	b29b      	uxth	r3, r3
 8007136:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	881b      	ldrh	r3, [r3, #0]
 8007144:	b29c      	uxth	r4, r3
 8007146:	4623      	mov	r3, r4
 8007148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800714c:	2b00      	cmp	r3, #0
 800714e:	d014      	beq.n	800717a <USB_ActivateEndpoint+0x13e>
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4413      	add	r3, r2
 800715a:	881b      	ldrh	r3, [r3, #0]
 800715c:	b29b      	uxth	r3, r3
 800715e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007166:	b29c      	uxth	r4, r3
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	441a      	add	r2, r3
 8007172:	4b6c      	ldr	r3, [pc, #432]	; (8007324 <USB_ActivateEndpoint+0x2e8>)
 8007174:	4323      	orrs	r3, r4
 8007176:	b29b      	uxth	r3, r3
 8007178:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	78db      	ldrb	r3, [r3, #3]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d018      	beq.n	80071b4 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	b29b      	uxth	r3, r3
 8007190:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007198:	b29c      	uxth	r4, r3
 800719a:	f084 0320 	eor.w	r3, r4, #32
 800719e:	b29c      	uxth	r4, r3
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	441a      	add	r2, r3
 80071aa:	4b5d      	ldr	r3, [pc, #372]	; (8007320 <USB_ActivateEndpoint+0x2e4>)
 80071ac:	4323      	orrs	r3, r4
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	8013      	strh	r3, [r2, #0]
 80071b2:	e22b      	b.n	800760c <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	881b      	ldrh	r3, [r3, #0]
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071ca:	b29c      	uxth	r4, r3
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	441a      	add	r2, r3
 80071d6:	4b52      	ldr	r3, [pc, #328]	; (8007320 <USB_ActivateEndpoint+0x2e4>)
 80071d8:	4323      	orrs	r3, r4
 80071da:	b29b      	uxth	r3, r3
 80071dc:	8013      	strh	r3, [r2, #0]
 80071de:	e215      	b.n	800760c <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80071e0:	687c      	ldr	r4, [r7, #4]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	441c      	add	r4, r3
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	00db      	lsls	r3, r3, #3
 80071f2:	4423      	add	r3, r4
 80071f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071f8:	461c      	mov	r4, r3
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	88db      	ldrh	r3, [r3, #6]
 80071fe:	085b      	lsrs	r3, r3, #1
 8007200:	b29b      	uxth	r3, r3
 8007202:	005b      	lsls	r3, r3, #1
 8007204:	b29b      	uxth	r3, r3
 8007206:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007208:	687c      	ldr	r4, [r7, #4]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007210:	b29b      	uxth	r3, r3
 8007212:	441c      	add	r4, r3
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	00db      	lsls	r3, r3, #3
 800721a:	4423      	add	r3, r4
 800721c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007220:	461c      	mov	r4, r3
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10e      	bne.n	8007248 <USB_ActivateEndpoint+0x20c>
 800722a:	8823      	ldrh	r3, [r4, #0]
 800722c:	b29b      	uxth	r3, r3
 800722e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007232:	b29b      	uxth	r3, r3
 8007234:	8023      	strh	r3, [r4, #0]
 8007236:	8823      	ldrh	r3, [r4, #0]
 8007238:	b29b      	uxth	r3, r3
 800723a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800723e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007242:	b29b      	uxth	r3, r3
 8007244:	8023      	strh	r3, [r4, #0]
 8007246:	e02d      	b.n	80072a4 <USB_ActivateEndpoint+0x268>
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	2b3e      	cmp	r3, #62	; 0x3e
 800724e:	d812      	bhi.n	8007276 <USB_ActivateEndpoint+0x23a>
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	085b      	lsrs	r3, r3, #1
 8007256:	60bb      	str	r3, [r7, #8]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	2b00      	cmp	r3, #0
 8007262:	d002      	beq.n	800726a <USB_ActivateEndpoint+0x22e>
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	3301      	adds	r3, #1
 8007268:	60bb      	str	r3, [r7, #8]
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	b29b      	uxth	r3, r3
 800726e:	029b      	lsls	r3, r3, #10
 8007270:	b29b      	uxth	r3, r3
 8007272:	8023      	strh	r3, [r4, #0]
 8007274:	e016      	b.n	80072a4 <USB_ActivateEndpoint+0x268>
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	095b      	lsrs	r3, r3, #5
 800727c:	60bb      	str	r3, [r7, #8]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	f003 031f 	and.w	r3, r3, #31
 8007286:	2b00      	cmp	r3, #0
 8007288:	d102      	bne.n	8007290 <USB_ActivateEndpoint+0x254>
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	3b01      	subs	r3, #1
 800728e:	60bb      	str	r3, [r7, #8]
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	b29b      	uxth	r3, r3
 8007294:	029b      	lsls	r3, r3, #10
 8007296:	b29b      	uxth	r3, r3
 8007298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800729c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	881b      	ldrh	r3, [r3, #0]
 80072b0:	b29c      	uxth	r4, r3
 80072b2:	4623      	mov	r3, r4
 80072b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d014      	beq.n	80072e6 <USB_ActivateEndpoint+0x2aa>
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	881b      	ldrh	r3, [r3, #0]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d2:	b29c      	uxth	r4, r3
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	441a      	add	r2, r3
 80072de:	4b12      	ldr	r3, [pc, #72]	; (8007328 <USB_ActivateEndpoint+0x2ec>)
 80072e0:	4323      	orrs	r3, r4
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	4413      	add	r3, r2
 80072f0:	881b      	ldrh	r3, [r3, #0]
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072fc:	b29c      	uxth	r4, r3
 80072fe:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007302:	b29c      	uxth	r4, r3
 8007304:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007308:	b29c      	uxth	r4, r3
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	441a      	add	r2, r3
 8007314:	4b02      	ldr	r3, [pc, #8]	; (8007320 <USB_ActivateEndpoint+0x2e4>)
 8007316:	4323      	orrs	r3, r4
 8007318:	b29b      	uxth	r3, r3
 800731a:	8013      	strh	r3, [r2, #0]
 800731c:	e176      	b.n	800760c <USB_ActivateEndpoint+0x5d0>
 800731e:	bf00      	nop
 8007320:	ffff8080 	.word	0xffff8080
 8007324:	ffff80c0 	.word	0xffff80c0
 8007328:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	b29b      	uxth	r3, r3
 800733a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800733e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007342:	b29c      	uxth	r4, r3
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	441a      	add	r2, r3
 800734e:	4b96      	ldr	r3, [pc, #600]	; (80075a8 <USB_ActivateEndpoint+0x56c>)
 8007350:	4323      	orrs	r3, r4
 8007352:	b29b      	uxth	r3, r3
 8007354:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007356:	687c      	ldr	r4, [r7, #4]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800735e:	b29b      	uxth	r3, r3
 8007360:	441c      	add	r4, r3
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	00db      	lsls	r3, r3, #3
 8007368:	4423      	add	r3, r4
 800736a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800736e:	461c      	mov	r4, r3
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	891b      	ldrh	r3, [r3, #8]
 8007374:	085b      	lsrs	r3, r3, #1
 8007376:	b29b      	uxth	r3, r3
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	b29b      	uxth	r3, r3
 800737c:	8023      	strh	r3, [r4, #0]
 800737e:	687c      	ldr	r4, [r7, #4]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007386:	b29b      	uxth	r3, r3
 8007388:	441c      	add	r4, r3
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	00db      	lsls	r3, r3, #3
 8007390:	4423      	add	r3, r4
 8007392:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007396:	461c      	mov	r4, r3
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	895b      	ldrh	r3, [r3, #10]
 800739c:	085b      	lsrs	r3, r3, #1
 800739e:	b29b      	uxth	r3, r3
 80073a0:	005b      	lsls	r3, r3, #1
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	785b      	ldrb	r3, [r3, #1]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f040 8088 	bne.w	80074c0 <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	881b      	ldrh	r3, [r3, #0]
 80073bc:	b29c      	uxth	r4, r3
 80073be:	4623      	mov	r3, r4
 80073c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d014      	beq.n	80073f2 <USB_ActivateEndpoint+0x3b6>
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073de:	b29c      	uxth	r4, r3
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	441a      	add	r2, r3
 80073ea:	4b70      	ldr	r3, [pc, #448]	; (80075ac <USB_ActivateEndpoint+0x570>)
 80073ec:	4323      	orrs	r3, r4
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4413      	add	r3, r2
 80073fc:	881b      	ldrh	r3, [r3, #0]
 80073fe:	b29c      	uxth	r4, r3
 8007400:	4623      	mov	r3, r4
 8007402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007406:	2b00      	cmp	r3, #0
 8007408:	d014      	beq.n	8007434 <USB_ActivateEndpoint+0x3f8>
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4413      	add	r3, r2
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	b29b      	uxth	r3, r3
 8007418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800741c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007420:	b29c      	uxth	r4, r3
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	441a      	add	r2, r3
 800742c:	4b60      	ldr	r3, [pc, #384]	; (80075b0 <USB_ActivateEndpoint+0x574>)
 800742e:	4323      	orrs	r3, r4
 8007430:	b29b      	uxth	r3, r3
 8007432:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	881b      	ldrh	r3, [r3, #0]
 8007440:	b29b      	uxth	r3, r3
 8007442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800744a:	b29c      	uxth	r4, r3
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	441a      	add	r2, r3
 8007456:	4b56      	ldr	r3, [pc, #344]	; (80075b0 <USB_ActivateEndpoint+0x574>)
 8007458:	4323      	orrs	r3, r4
 800745a:	b29b      	uxth	r3, r3
 800745c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4413      	add	r3, r2
 8007468:	881b      	ldrh	r3, [r3, #0]
 800746a:	b29b      	uxth	r3, r3
 800746c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007474:	b29c      	uxth	r4, r3
 8007476:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800747a:	b29c      	uxth	r4, r3
 800747c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007480:	b29c      	uxth	r4, r3
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	441a      	add	r2, r3
 800748c:	4b49      	ldr	r3, [pc, #292]	; (80075b4 <USB_ActivateEndpoint+0x578>)
 800748e:	4323      	orrs	r3, r4
 8007490:	b29b      	uxth	r3, r3
 8007492:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4413      	add	r3, r2
 800749e:	881b      	ldrh	r3, [r3, #0]
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074aa:	b29c      	uxth	r4, r3
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	441a      	add	r2, r3
 80074b6:	4b3f      	ldr	r3, [pc, #252]	; (80075b4 <USB_ActivateEndpoint+0x578>)
 80074b8:	4323      	orrs	r3, r4
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	8013      	strh	r3, [r2, #0]
 80074be:	e0a5      	b.n	800760c <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4413      	add	r3, r2
 80074ca:	881b      	ldrh	r3, [r3, #0]
 80074cc:	b29c      	uxth	r4, r3
 80074ce:	4623      	mov	r3, r4
 80074d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d014      	beq.n	8007502 <USB_ActivateEndpoint+0x4c6>
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	4413      	add	r3, r2
 80074e2:	881b      	ldrh	r3, [r3, #0]
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ee:	b29c      	uxth	r4, r3
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	441a      	add	r2, r3
 80074fa:	4b2c      	ldr	r3, [pc, #176]	; (80075ac <USB_ActivateEndpoint+0x570>)
 80074fc:	4323      	orrs	r3, r4
 80074fe:	b29b      	uxth	r3, r3
 8007500:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	b29c      	uxth	r4, r3
 8007510:	4623      	mov	r3, r4
 8007512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007516:	2b00      	cmp	r3, #0
 8007518:	d014      	beq.n	8007544 <USB_ActivateEndpoint+0x508>
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4413      	add	r3, r2
 8007524:	881b      	ldrh	r3, [r3, #0]
 8007526:	b29b      	uxth	r3, r3
 8007528:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800752c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007530:	b29c      	uxth	r4, r3
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	441a      	add	r2, r3
 800753c:	4b1c      	ldr	r3, [pc, #112]	; (80075b0 <USB_ActivateEndpoint+0x574>)
 800753e:	4323      	orrs	r3, r4
 8007540:	b29b      	uxth	r3, r3
 8007542:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	4413      	add	r3, r2
 800754e:	881b      	ldrh	r3, [r3, #0]
 8007550:	b29b      	uxth	r3, r3
 8007552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800755a:	b29c      	uxth	r4, r3
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	441a      	add	r2, r3
 8007566:	4b11      	ldr	r3, [pc, #68]	; (80075ac <USB_ActivateEndpoint+0x570>)
 8007568:	4323      	orrs	r3, r4
 800756a:	b29b      	uxth	r3, r3
 800756c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	78db      	ldrb	r3, [r3, #3]
 8007572:	2b01      	cmp	r3, #1
 8007574:	d020      	beq.n	80075b8 <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	4413      	add	r3, r2
 8007580:	881b      	ldrh	r3, [r3, #0]
 8007582:	b29b      	uxth	r3, r3
 8007584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800758c:	b29c      	uxth	r4, r3
 800758e:	f084 0320 	eor.w	r3, r4, #32
 8007592:	b29c      	uxth	r4, r3
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	441a      	add	r2, r3
 800759e:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <USB_ActivateEndpoint+0x578>)
 80075a0:	4323      	orrs	r3, r4
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	8013      	strh	r3, [r2, #0]
 80075a6:	e01c      	b.n	80075e2 <USB_ActivateEndpoint+0x5a6>
 80075a8:	ffff8180 	.word	0xffff8180
 80075ac:	ffffc080 	.word	0xffffc080
 80075b0:	ffff80c0 	.word	0xffff80c0
 80075b4:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	4413      	add	r3, r2
 80075c2:	881b      	ldrh	r3, [r3, #0]
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ce:	b29c      	uxth	r4, r3
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	441a      	add	r2, r3
 80075da:	4b0f      	ldr	r3, [pc, #60]	; (8007618 <USB_ActivateEndpoint+0x5dc>)
 80075dc:	4323      	orrs	r3, r4
 80075de:	b29b      	uxth	r3, r3
 80075e0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	881b      	ldrh	r3, [r3, #0]
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f8:	b29c      	uxth	r4, r3
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	441a      	add	r2, r3
 8007604:	4b04      	ldr	r3, [pc, #16]	; (8007618 <USB_ActivateEndpoint+0x5dc>)
 8007606:	4323      	orrs	r3, r4
 8007608:	b29b      	uxth	r3, r3
 800760a:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800760c:	7bfb      	ldrb	r3, [r7, #15]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bc90      	pop	{r4, r7}
 8007616:	4770      	bx	lr
 8007618:	ffff8080 	.word	0xffff8080

0800761c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800761c:	b490      	push	{r4, r7}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	7b1b      	ldrb	r3, [r3, #12]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d171      	bne.n	8007712 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	785b      	ldrb	r3, [r3, #1]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d036      	beq.n	80076a4 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	b29c      	uxth	r4, r3
 8007644:	4623      	mov	r3, r4
 8007646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800764a:	2b00      	cmp	r3, #0
 800764c:	d014      	beq.n	8007678 <USB_DeactivateEndpoint+0x5c>
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	881b      	ldrh	r3, [r3, #0]
 800765a:	b29b      	uxth	r3, r3
 800765c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007664:	b29c      	uxth	r4, r3
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	441a      	add	r2, r3
 8007670:	4b6b      	ldr	r3, [pc, #428]	; (8007820 <USB_DeactivateEndpoint+0x204>)
 8007672:	4323      	orrs	r3, r4
 8007674:	b29b      	uxth	r3, r3
 8007676:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4413      	add	r3, r2
 8007682:	881b      	ldrh	r3, [r3, #0]
 8007684:	b29b      	uxth	r3, r3
 8007686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800768a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800768e:	b29c      	uxth	r4, r3
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	441a      	add	r2, r3
 800769a:	4b62      	ldr	r3, [pc, #392]	; (8007824 <USB_DeactivateEndpoint+0x208>)
 800769c:	4323      	orrs	r3, r4
 800769e:	b29b      	uxth	r3, r3
 80076a0:	8013      	strh	r3, [r2, #0]
 80076a2:	e144      	b.n	800792e <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	b29c      	uxth	r4, r3
 80076b2:	4623      	mov	r3, r4
 80076b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d014      	beq.n	80076e6 <USB_DeactivateEndpoint+0xca>
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d2:	b29c      	uxth	r4, r3
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	441a      	add	r2, r3
 80076de:	4b52      	ldr	r3, [pc, #328]	; (8007828 <USB_DeactivateEndpoint+0x20c>)
 80076e0:	4323      	orrs	r3, r4
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	4413      	add	r3, r2
 80076f0:	881b      	ldrh	r3, [r3, #0]
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076fc:	b29c      	uxth	r4, r3
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	441a      	add	r2, r3
 8007708:	4b46      	ldr	r3, [pc, #280]	; (8007824 <USB_DeactivateEndpoint+0x208>)
 800770a:	4323      	orrs	r3, r4
 800770c:	b29b      	uxth	r3, r3
 800770e:	8013      	strh	r3, [r2, #0]
 8007710:	e10d      	b.n	800792e <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	785b      	ldrb	r3, [r3, #1]
 8007716:	2b00      	cmp	r3, #0
 8007718:	f040 8088 	bne.w	800782c <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	b29c      	uxth	r4, r3
 800772a:	4623      	mov	r3, r4
 800772c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007730:	2b00      	cmp	r3, #0
 8007732:	d014      	beq.n	800775e <USB_DeactivateEndpoint+0x142>
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4413      	add	r3, r2
 800773e:	881b      	ldrh	r3, [r3, #0]
 8007740:	b29b      	uxth	r3, r3
 8007742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800774a:	b29c      	uxth	r4, r3
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	441a      	add	r2, r3
 8007756:	4b34      	ldr	r3, [pc, #208]	; (8007828 <USB_DeactivateEndpoint+0x20c>)
 8007758:	4323      	orrs	r3, r4
 800775a:	b29b      	uxth	r3, r3
 800775c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4413      	add	r3, r2
 8007768:	881b      	ldrh	r3, [r3, #0]
 800776a:	b29c      	uxth	r4, r3
 800776c:	4623      	mov	r3, r4
 800776e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007772:	2b00      	cmp	r3, #0
 8007774:	d014      	beq.n	80077a0 <USB_DeactivateEndpoint+0x184>
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4413      	add	r3, r2
 8007780:	881b      	ldrh	r3, [r3, #0]
 8007782:	b29b      	uxth	r3, r3
 8007784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800778c:	b29c      	uxth	r4, r3
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	441a      	add	r2, r3
 8007798:	4b21      	ldr	r3, [pc, #132]	; (8007820 <USB_DeactivateEndpoint+0x204>)
 800779a:	4323      	orrs	r3, r4
 800779c:	b29b      	uxth	r3, r3
 800779e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4413      	add	r3, r2
 80077aa:	881b      	ldrh	r3, [r3, #0]
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b6:	b29c      	uxth	r4, r3
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	441a      	add	r2, r3
 80077c2:	4b17      	ldr	r3, [pc, #92]	; (8007820 <USB_DeactivateEndpoint+0x204>)
 80077c4:	4323      	orrs	r3, r4
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	4413      	add	r3, r2
 80077d4:	881b      	ldrh	r3, [r3, #0]
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077e0:	b29c      	uxth	r4, r3
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	441a      	add	r2, r3
 80077ec:	4b0d      	ldr	r3, [pc, #52]	; (8007824 <USB_DeactivateEndpoint+0x208>)
 80077ee:	4323      	orrs	r3, r4
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4413      	add	r3, r2
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	b29b      	uxth	r3, r3
 8007802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007806:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800780a:	b29c      	uxth	r4, r3
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	441a      	add	r2, r3
 8007816:	4b03      	ldr	r3, [pc, #12]	; (8007824 <USB_DeactivateEndpoint+0x208>)
 8007818:	4323      	orrs	r3, r4
 800781a:	b29b      	uxth	r3, r3
 800781c:	8013      	strh	r3, [r2, #0]
 800781e:	e086      	b.n	800792e <USB_DeactivateEndpoint+0x312>
 8007820:	ffff80c0 	.word	0xffff80c0
 8007824:	ffff8080 	.word	0xffff8080
 8007828:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	4413      	add	r3, r2
 8007836:	881b      	ldrh	r3, [r3, #0]
 8007838:	b29c      	uxth	r4, r3
 800783a:	4623      	mov	r3, r4
 800783c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d014      	beq.n	800786e <USB_DeactivateEndpoint+0x252>
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4413      	add	r3, r2
 800784e:	881b      	ldrh	r3, [r3, #0]
 8007850:	b29b      	uxth	r3, r3
 8007852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800785a:	b29c      	uxth	r4, r3
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	441a      	add	r2, r3
 8007866:	4b35      	ldr	r3, [pc, #212]	; (800793c <USB_DeactivateEndpoint+0x320>)
 8007868:	4323      	orrs	r3, r4
 800786a:	b29b      	uxth	r3, r3
 800786c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4413      	add	r3, r2
 8007878:	881b      	ldrh	r3, [r3, #0]
 800787a:	b29c      	uxth	r4, r3
 800787c:	4623      	mov	r3, r4
 800787e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007882:	2b00      	cmp	r3, #0
 8007884:	d014      	beq.n	80078b0 <USB_DeactivateEndpoint+0x294>
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	4413      	add	r3, r2
 8007890:	881b      	ldrh	r3, [r3, #0]
 8007892:	b29b      	uxth	r3, r3
 8007894:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800789c:	b29c      	uxth	r4, r3
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	441a      	add	r2, r3
 80078a8:	4b25      	ldr	r3, [pc, #148]	; (8007940 <USB_DeactivateEndpoint+0x324>)
 80078aa:	4323      	orrs	r3, r4
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4413      	add	r3, r2
 80078ba:	881b      	ldrh	r3, [r3, #0]
 80078bc:	b29b      	uxth	r3, r3
 80078be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c6:	b29c      	uxth	r4, r3
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	441a      	add	r2, r3
 80078d2:	4b1a      	ldr	r3, [pc, #104]	; (800793c <USB_DeactivateEndpoint+0x320>)
 80078d4:	4323      	orrs	r3, r4
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	4413      	add	r3, r2
 80078e4:	881b      	ldrh	r3, [r3, #0]
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078f0:	b29c      	uxth	r4, r3
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	441a      	add	r2, r3
 80078fc:	4b11      	ldr	r3, [pc, #68]	; (8007944 <USB_DeactivateEndpoint+0x328>)
 80078fe:	4323      	orrs	r3, r4
 8007900:	b29b      	uxth	r3, r3
 8007902:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	4413      	add	r3, r2
 800790e:	881b      	ldrh	r3, [r3, #0]
 8007910:	b29b      	uxth	r3, r3
 8007912:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800791a:	b29c      	uxth	r4, r3
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	441a      	add	r2, r3
 8007926:	4b07      	ldr	r3, [pc, #28]	; (8007944 <USB_DeactivateEndpoint+0x328>)
 8007928:	4323      	orrs	r3, r4
 800792a:	b29b      	uxth	r3, r3
 800792c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bc90      	pop	{r4, r7}
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	ffffc080 	.word	0xffffc080
 8007940:	ffff80c0 	.word	0xffff80c0
 8007944:	ffff8080 	.word	0xffff8080

08007948 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007948:	b590      	push	{r4, r7, lr}
 800794a:	b08d      	sub	sp, #52	; 0x34
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	785b      	ldrb	r3, [r3, #1]
 8007956:	2b01      	cmp	r3, #1
 8007958:	f040 8160 	bne.w	8007c1c <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	699a      	ldr	r2, [r3, #24]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	429a      	cmp	r2, r3
 8007966:	d909      	bls.n	800797c <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	699a      	ldr	r2, [r3, #24]
 8007972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007974:	1ad2      	subs	r2, r2, r3
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	619a      	str	r2, [r3, #24]
 800797a:	e005      	b.n	8007988 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	2200      	movs	r2, #0
 8007986:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	7b1b      	ldrb	r3, [r3, #12]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d119      	bne.n	80079c4 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	6959      	ldr	r1, [r3, #20]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	88da      	ldrh	r2, [r3, #6]
 8007998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799a:	b29b      	uxth	r3, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fbbd 	bl	800811c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80079a2:	687c      	ldr	r4, [r7, #4]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	441c      	add	r4, r3
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	00db      	lsls	r3, r3, #3
 80079b4:	4423      	add	r3, r4
 80079b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80079ba:	461c      	mov	r4, r3
 80079bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079be:	b29b      	uxth	r3, r3
 80079c0:	8023      	strh	r3, [r4, #0]
 80079c2:	e10f      	b.n	8007be4 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	4413      	add	r3, r2
 80079ce:	881b      	ldrh	r3, [r3, #0]
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d065      	beq.n	8007aa6 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80079da:	687c      	ldr	r4, [r7, #4]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	785b      	ldrb	r3, [r3, #1]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d148      	bne.n	8007a76 <USB_EPStartXfer+0x12e>
 80079e4:	687c      	ldr	r4, [r7, #4]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	441c      	add	r4, r3
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	00db      	lsls	r3, r3, #3
 80079f6:	4423      	add	r3, r4
 80079f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079fc:	461c      	mov	r4, r3
 80079fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10e      	bne.n	8007a22 <USB_EPStartXfer+0xda>
 8007a04:	8823      	ldrh	r3, [r4, #0]
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	8023      	strh	r3, [r4, #0]
 8007a10:	8823      	ldrh	r3, [r4, #0]
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	8023      	strh	r3, [r4, #0]
 8007a20:	e03d      	b.n	8007a9e <USB_EPStartXfer+0x156>
 8007a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a24:	2b3e      	cmp	r3, #62	; 0x3e
 8007a26:	d810      	bhi.n	8007a4a <USB_EPStartXfer+0x102>
 8007a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2a:	085b      	lsrs	r3, r3, #1
 8007a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a30:	f003 0301 	and.w	r3, r3, #1
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d002      	beq.n	8007a3e <USB_EPStartXfer+0xf6>
 8007a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	029b      	lsls	r3, r3, #10
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	8023      	strh	r3, [r4, #0]
 8007a48:	e029      	b.n	8007a9e <USB_EPStartXfer+0x156>
 8007a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4c:	095b      	lsrs	r3, r3, #5
 8007a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8007a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a52:	f003 031f 	and.w	r3, r3, #31
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d102      	bne.n	8007a60 <USB_EPStartXfer+0x118>
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8007a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	029b      	lsls	r3, r3, #10
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	8023      	strh	r3, [r4, #0]
 8007a74:	e013      	b.n	8007a9e <USB_EPStartXfer+0x156>
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	785b      	ldrb	r3, [r3, #1]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d10f      	bne.n	8007a9e <USB_EPStartXfer+0x156>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	441c      	add	r4, r3
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	00db      	lsls	r3, r3, #3
 8007a8e:	4423      	add	r3, r4
 8007a90:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a94:	60fb      	str	r3, [r7, #12]
 8007a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	895b      	ldrh	r3, [r3, #10]
 8007aa2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007aa4:	e063      	b.n	8007b6e <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	785b      	ldrb	r3, [r3, #1]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d148      	bne.n	8007b40 <USB_EPStartXfer+0x1f8>
 8007aae:	687c      	ldr	r4, [r7, #4]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	441c      	add	r4, r3
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	00db      	lsls	r3, r3, #3
 8007ac0:	4423      	add	r3, r4
 8007ac2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ac6:	461c      	mov	r4, r3
 8007ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10e      	bne.n	8007aec <USB_EPStartXfer+0x1a4>
 8007ace:	8823      	ldrh	r3, [r4, #0]
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	8023      	strh	r3, [r4, #0]
 8007ada:	8823      	ldrh	r3, [r4, #0]
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	8023      	strh	r3, [r4, #0]
 8007aea:	e03d      	b.n	8007b68 <USB_EPStartXfer+0x220>
 8007aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aee:	2b3e      	cmp	r3, #62	; 0x3e
 8007af0:	d810      	bhi.n	8007b14 <USB_EPStartXfer+0x1cc>
 8007af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af4:	085b      	lsrs	r3, r3, #1
 8007af6:	623b      	str	r3, [r7, #32]
 8007af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d002      	beq.n	8007b08 <USB_EPStartXfer+0x1c0>
 8007b02:	6a3b      	ldr	r3, [r7, #32]
 8007b04:	3301      	adds	r3, #1
 8007b06:	623b      	str	r3, [r7, #32]
 8007b08:	6a3b      	ldr	r3, [r7, #32]
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	029b      	lsls	r3, r3, #10
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	8023      	strh	r3, [r4, #0]
 8007b12:	e029      	b.n	8007b68 <USB_EPStartXfer+0x220>
 8007b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b16:	095b      	lsrs	r3, r3, #5
 8007b18:	623b      	str	r3, [r7, #32]
 8007b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1c:	f003 031f 	and.w	r3, r3, #31
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d102      	bne.n	8007b2a <USB_EPStartXfer+0x1e2>
 8007b24:	6a3b      	ldr	r3, [r7, #32]
 8007b26:	3b01      	subs	r3, #1
 8007b28:	623b      	str	r3, [r7, #32]
 8007b2a:	6a3b      	ldr	r3, [r7, #32]
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	029b      	lsls	r3, r3, #10
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	8023      	strh	r3, [r4, #0]
 8007b3e:	e013      	b.n	8007b68 <USB_EPStartXfer+0x220>
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	785b      	ldrb	r3, [r3, #1]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d10f      	bne.n	8007b68 <USB_EPStartXfer+0x220>
 8007b48:	687c      	ldr	r4, [r7, #4]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	441c      	add	r4, r3
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	00db      	lsls	r3, r3, #3
 8007b5a:	4423      	add	r3, r4
 8007b5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b60:	461c      	mov	r4, r3
 8007b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	891b      	ldrh	r3, [r3, #8]
 8007b6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	6959      	ldr	r1, [r3, #20]
 8007b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 facf 	bl	800811c <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	785b      	ldrb	r3, [r3, #1]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d115      	bne.n	8007bb2 <USB_EPStartXfer+0x26a>
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4413      	add	r3, r2
 8007b90:	881b      	ldrh	r3, [r3, #0]
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b9c:	b29c      	uxth	r4, r3
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	441a      	add	r2, r3
 8007ba8:	4b9a      	ldr	r3, [pc, #616]	; (8007e14 <USB_EPStartXfer+0x4cc>)
 8007baa:	4323      	orrs	r3, r4
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	8013      	strh	r3, [r2, #0]
 8007bb0:	e018      	b.n	8007be4 <USB_EPStartXfer+0x29c>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	785b      	ldrb	r3, [r3, #1]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d114      	bne.n	8007be4 <USB_EPStartXfer+0x29c>
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bd0:	b29c      	uxth	r4, r3
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	441a      	add	r2, r3
 8007bdc:	4b8e      	ldr	r3, [pc, #568]	; (8007e18 <USB_EPStartXfer+0x4d0>)
 8007bde:	4323      	orrs	r3, r4
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	881b      	ldrh	r3, [r3, #0]
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bfa:	b29c      	uxth	r4, r3
 8007bfc:	f084 0310 	eor.w	r3, r4, #16
 8007c00:	b29c      	uxth	r4, r3
 8007c02:	f084 0320 	eor.w	r3, r4, #32
 8007c06:	b29c      	uxth	r4, r3
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	441a      	add	r2, r3
 8007c12:	4b82      	ldr	r3, [pc, #520]	; (8007e1c <USB_EPStartXfer+0x4d4>)
 8007c14:	4323      	orrs	r3, r4
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	8013      	strh	r3, [r2, #0]
 8007c1a:	e146      	b.n	8007eaa <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	699a      	ldr	r2, [r3, #24]
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d909      	bls.n	8007c3c <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	699a      	ldr	r2, [r3, #24]
 8007c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c34:	1ad2      	subs	r2, r2, r3
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	619a      	str	r2, [r3, #24]
 8007c3a:	e005      	b.n	8007c48 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	699b      	ldr	r3, [r3, #24]
 8007c40:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	2200      	movs	r2, #0
 8007c46:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	7b1b      	ldrb	r3, [r3, #12]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d148      	bne.n	8007ce2 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007c50:	687c      	ldr	r4, [r7, #4]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	441c      	add	r4, r3
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	00db      	lsls	r3, r3, #3
 8007c62:	4423      	add	r3, r4
 8007c64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c68:	461c      	mov	r4, r3
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10e      	bne.n	8007c8e <USB_EPStartXfer+0x346>
 8007c70:	8823      	ldrh	r3, [r4, #0]
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	8023      	strh	r3, [r4, #0]
 8007c7c:	8823      	ldrh	r3, [r4, #0]
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	8023      	strh	r3, [r4, #0]
 8007c8c:	e0f2      	b.n	8007e74 <USB_EPStartXfer+0x52c>
 8007c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c90:	2b3e      	cmp	r3, #62	; 0x3e
 8007c92:	d810      	bhi.n	8007cb6 <USB_EPStartXfer+0x36e>
 8007c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c96:	085b      	lsrs	r3, r3, #1
 8007c98:	61fb      	str	r3, [r7, #28]
 8007c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9c:	f003 0301 	and.w	r3, r3, #1
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <USB_EPStartXfer+0x362>
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	61fb      	str	r3, [r7, #28]
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	029b      	lsls	r3, r3, #10
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	8023      	strh	r3, [r4, #0]
 8007cb4:	e0de      	b.n	8007e74 <USB_EPStartXfer+0x52c>
 8007cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb8:	095b      	lsrs	r3, r3, #5
 8007cba:	61fb      	str	r3, [r7, #28]
 8007cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbe:	f003 031f 	and.w	r3, r3, #31
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d102      	bne.n	8007ccc <USB_EPStartXfer+0x384>
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	61fb      	str	r3, [r7, #28]
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	029b      	lsls	r3, r3, #10
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	8023      	strh	r3, [r4, #0]
 8007ce0:	e0c8      	b.n	8007e74 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	785b      	ldrb	r3, [r3, #1]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d148      	bne.n	8007d7c <USB_EPStartXfer+0x434>
 8007cea:	687c      	ldr	r4, [r7, #4]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	441c      	add	r4, r3
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	00db      	lsls	r3, r3, #3
 8007cfc:	4423      	add	r3, r4
 8007cfe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d02:	461c      	mov	r4, r3
 8007d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10e      	bne.n	8007d28 <USB_EPStartXfer+0x3e0>
 8007d0a:	8823      	ldrh	r3, [r4, #0]
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	8023      	strh	r3, [r4, #0]
 8007d16:	8823      	ldrh	r3, [r4, #0]
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	8023      	strh	r3, [r4, #0]
 8007d26:	e03d      	b.n	8007da4 <USB_EPStartXfer+0x45c>
 8007d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2a:	2b3e      	cmp	r3, #62	; 0x3e
 8007d2c:	d810      	bhi.n	8007d50 <USB_EPStartXfer+0x408>
 8007d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d30:	085b      	lsrs	r3, r3, #1
 8007d32:	61bb      	str	r3, [r7, #24]
 8007d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d002      	beq.n	8007d44 <USB_EPStartXfer+0x3fc>
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	3301      	adds	r3, #1
 8007d42:	61bb      	str	r3, [r7, #24]
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	029b      	lsls	r3, r3, #10
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	8023      	strh	r3, [r4, #0]
 8007d4e:	e029      	b.n	8007da4 <USB_EPStartXfer+0x45c>
 8007d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d52:	095b      	lsrs	r3, r3, #5
 8007d54:	61bb      	str	r3, [r7, #24]
 8007d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d58:	f003 031f 	and.w	r3, r3, #31
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d102      	bne.n	8007d66 <USB_EPStartXfer+0x41e>
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	3b01      	subs	r3, #1
 8007d64:	61bb      	str	r3, [r7, #24]
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	029b      	lsls	r3, r3, #10
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	8023      	strh	r3, [r4, #0]
 8007d7a:	e013      	b.n	8007da4 <USB_EPStartXfer+0x45c>
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	785b      	ldrb	r3, [r3, #1]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d10f      	bne.n	8007da4 <USB_EPStartXfer+0x45c>
 8007d84:	687c      	ldr	r4, [r7, #4]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	441c      	add	r4, r3
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	00db      	lsls	r3, r3, #3
 8007d96:	4423      	add	r3, r4
 8007d98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d9c:	461c      	mov	r4, r3
 8007d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	8023      	strh	r3, [r4, #0]
 8007da4:	687c      	ldr	r4, [r7, #4]
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	785b      	ldrb	r3, [r3, #1]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d14e      	bne.n	8007e4c <USB_EPStartXfer+0x504>
 8007dae:	687c      	ldr	r4, [r7, #4]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	441c      	add	r4, r3
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	00db      	lsls	r3, r3, #3
 8007dc0:	4423      	add	r3, r4
 8007dc2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007dc6:	461c      	mov	r4, r3
 8007dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10e      	bne.n	8007dec <USB_EPStartXfer+0x4a4>
 8007dce:	8823      	ldrh	r3, [r4, #0]
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	8023      	strh	r3, [r4, #0]
 8007dda:	8823      	ldrh	r3, [r4, #0]
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	8023      	strh	r3, [r4, #0]
 8007dea:	e043      	b.n	8007e74 <USB_EPStartXfer+0x52c>
 8007dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dee:	2b3e      	cmp	r3, #62	; 0x3e
 8007df0:	d816      	bhi.n	8007e20 <USB_EPStartXfer+0x4d8>
 8007df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df4:	085b      	lsrs	r3, r3, #1
 8007df6:	617b      	str	r3, [r7, #20]
 8007df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d002      	beq.n	8007e08 <USB_EPStartXfer+0x4c0>
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	3301      	adds	r3, #1
 8007e06:	617b      	str	r3, [r7, #20]
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	029b      	lsls	r3, r3, #10
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	8023      	strh	r3, [r4, #0]
 8007e12:	e02f      	b.n	8007e74 <USB_EPStartXfer+0x52c>
 8007e14:	ffff80c0 	.word	0xffff80c0
 8007e18:	ffffc080 	.word	0xffffc080
 8007e1c:	ffff8080 	.word	0xffff8080
 8007e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e22:	095b      	lsrs	r3, r3, #5
 8007e24:	617b      	str	r3, [r7, #20]
 8007e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e28:	f003 031f 	and.w	r3, r3, #31
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d102      	bne.n	8007e36 <USB_EPStartXfer+0x4ee>
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	3b01      	subs	r3, #1
 8007e34:	617b      	str	r3, [r7, #20]
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	029b      	lsls	r3, r3, #10
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	8023      	strh	r3, [r4, #0]
 8007e4a:	e013      	b.n	8007e74 <USB_EPStartXfer+0x52c>
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	785b      	ldrb	r3, [r3, #1]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d10f      	bne.n	8007e74 <USB_EPStartXfer+0x52c>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	441c      	add	r4, r3
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	00db      	lsls	r3, r3, #3
 8007e64:	4423      	add	r3, r4
 8007e66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e6a:	613b      	str	r3, [r7, #16]
 8007e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	4413      	add	r3, r2
 8007e7e:	881b      	ldrh	r3, [r3, #0]
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e8a:	b29c      	uxth	r4, r3
 8007e8c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007e90:	b29c      	uxth	r4, r3
 8007e92:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007e96:	b29c      	uxth	r4, r3
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	441a      	add	r2, r3
 8007ea2:	4b04      	ldr	r3, [pc, #16]	; (8007eb4 <USB_EPStartXfer+0x56c>)
 8007ea4:	4323      	orrs	r3, r4
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3734      	adds	r7, #52	; 0x34
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd90      	pop	{r4, r7, pc}
 8007eb4:	ffff8080 	.word	0xffff8080

08007eb8 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007eb8:	b490      	push	{r4, r7}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	785b      	ldrb	r3, [r3, #1]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d018      	beq.n	8007efc <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4413      	add	r3, r2
 8007ed4:	881b      	ldrh	r3, [r3, #0]
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007edc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ee0:	b29c      	uxth	r4, r3
 8007ee2:	f084 0310 	eor.w	r3, r4, #16
 8007ee6:	b29c      	uxth	r4, r3
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	441a      	add	r2, r3
 8007ef2:	4b11      	ldr	r3, [pc, #68]	; (8007f38 <USB_EPSetStall+0x80>)
 8007ef4:	4323      	orrs	r3, r4
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	8013      	strh	r3, [r2, #0]
 8007efa:	e017      	b.n	8007f2c <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	881b      	ldrh	r3, [r3, #0]
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f12:	b29c      	uxth	r4, r3
 8007f14:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007f18:	b29c      	uxth	r4, r3
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	441a      	add	r2, r3
 8007f24:	4b04      	ldr	r3, [pc, #16]	; (8007f38 <USB_EPSetStall+0x80>)
 8007f26:	4323      	orrs	r3, r4
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3708      	adds	r7, #8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bc90      	pop	{r4, r7}
 8007f36:	4770      	bx	lr
 8007f38:	ffff8080 	.word	0xffff8080

08007f3c <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f3c:	b490      	push	{r4, r7}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	7b1b      	ldrb	r3, [r3, #12]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d17d      	bne.n	800804a <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	785b      	ldrb	r3, [r3, #1]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d03d      	beq.n	8007fd2 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4413      	add	r3, r2
 8007f60:	881b      	ldrh	r3, [r3, #0]
 8007f62:	b29c      	uxth	r4, r3
 8007f64:	4623      	mov	r3, r4
 8007f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d014      	beq.n	8007f98 <USB_EPClearStall+0x5c>
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	4413      	add	r3, r2
 8007f78:	881b      	ldrh	r3, [r3, #0]
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f84:	b29c      	uxth	r4, r3
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	441a      	add	r2, r3
 8007f90:	4b31      	ldr	r3, [pc, #196]	; (8008058 <USB_EPClearStall+0x11c>)
 8007f92:	4323      	orrs	r3, r4
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	78db      	ldrb	r3, [r3, #3]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d054      	beq.n	800804a <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	4413      	add	r3, r2
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fb6:	b29c      	uxth	r4, r3
 8007fb8:	f084 0320 	eor.w	r3, r4, #32
 8007fbc:	b29c      	uxth	r4, r3
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	441a      	add	r2, r3
 8007fc8:	4b24      	ldr	r3, [pc, #144]	; (800805c <USB_EPClearStall+0x120>)
 8007fca:	4323      	orrs	r3, r4
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	8013      	strh	r3, [r2, #0]
 8007fd0:	e03b      	b.n	800804a <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4413      	add	r3, r2
 8007fdc:	881b      	ldrh	r3, [r3, #0]
 8007fde:	b29c      	uxth	r4, r3
 8007fe0:	4623      	mov	r3, r4
 8007fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d014      	beq.n	8008014 <USB_EPClearStall+0xd8>
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	881b      	ldrh	r3, [r3, #0]
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008000:	b29c      	uxth	r4, r3
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	441a      	add	r2, r3
 800800c:	4b14      	ldr	r3, [pc, #80]	; (8008060 <USB_EPClearStall+0x124>)
 800800e:	4323      	orrs	r3, r4
 8008010:	b29b      	uxth	r3, r3
 8008012:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	4413      	add	r3, r2
 800801e:	881b      	ldrh	r3, [r3, #0]
 8008020:	b29b      	uxth	r3, r3
 8008022:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800802a:	b29c      	uxth	r4, r3
 800802c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008030:	b29c      	uxth	r4, r3
 8008032:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008036:	b29c      	uxth	r4, r3
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	441a      	add	r2, r3
 8008042:	4b06      	ldr	r3, [pc, #24]	; (800805c <USB_EPClearStall+0x120>)
 8008044:	4323      	orrs	r3, r4
 8008046:	b29b      	uxth	r3, r3
 8008048:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bc90      	pop	{r4, r7}
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	ffff80c0 	.word	0xffff80c0
 800805c:	ffff8080 	.word	0xffff8080
 8008060:	ffffc080 	.word	0xffffc080

08008064 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008070:	78fb      	ldrb	r3, [r7, #3]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d103      	bne.n	800807e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2280      	movs	r2, #128	; 0x80
 800807a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800809a:	b29b      	uxth	r3, r3
 800809c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	370c      	adds	r7, #12
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80080ba:	b480      	push	{r7}
 80080bc:	b083      	sub	sp, #12
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80080f6:	68fb      	ldr	r3, [r7, #12]
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3714      	adds	r7, #20
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800811c:	b480      	push	{r7}
 800811e:	b08d      	sub	sp, #52	; 0x34
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	4611      	mov	r1, r2
 8008128:	461a      	mov	r2, r3
 800812a:	460b      	mov	r3, r1
 800812c:	80fb      	strh	r3, [r7, #6]
 800812e:	4613      	mov	r3, r2
 8008130:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008132:	88bb      	ldrh	r3, [r7, #4]
 8008134:	3301      	adds	r3, #1
 8008136:	085b      	lsrs	r3, r3, #1
 8008138:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008142:	88fa      	ldrh	r2, [r7, #6]
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	4413      	add	r3, r2
 8008148:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800814c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800814e:	6a3b      	ldr	r3, [r7, #32]
 8008150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008152:	e01b      	b.n	800818c <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8008154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800815a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815c:	3301      	adds	r3, #1
 800815e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	b29b      	uxth	r3, r3
 8008166:	021b      	lsls	r3, r3, #8
 8008168:	b29b      	uxth	r3, r3
 800816a:	461a      	mov	r2, r3
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	4313      	orrs	r3, r2
 8008170:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	b29a      	uxth	r2, r3
 8008176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008178:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800817a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817c:	3302      	adds	r3, #2
 800817e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	3301      	adds	r3, #1
 8008184:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008188:	3b01      	subs	r3, #1
 800818a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800818c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1e0      	bne.n	8008154 <USB_WritePMA+0x38>
  }
}
 8008192:	bf00      	nop
 8008194:	3734      	adds	r7, #52	; 0x34
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr

0800819e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800819e:	b480      	push	{r7}
 80081a0:	b08b      	sub	sp, #44	; 0x2c
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	60f8      	str	r0, [r7, #12]
 80081a6:	60b9      	str	r1, [r7, #8]
 80081a8:	4611      	mov	r1, r2
 80081aa:	461a      	mov	r2, r3
 80081ac:	460b      	mov	r3, r1
 80081ae:	80fb      	strh	r3, [r7, #6]
 80081b0:	4613      	mov	r3, r2
 80081b2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80081b4:	88bb      	ldrh	r3, [r7, #4]
 80081b6:	085b      	lsrs	r3, r3, #1
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80081c4:	88fa      	ldrh	r2, [r7, #6]
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	4413      	add	r3, r2
 80081ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081ce:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	627b      	str	r3, [r7, #36]	; 0x24
 80081d4:	e018      	b.n	8008208 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80081d6:	6a3b      	ldr	r3, [r7, #32]
 80081d8:	881b      	ldrh	r3, [r3, #0]
 80081da:	b29b      	uxth	r3, r3
 80081dc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80081de:	6a3b      	ldr	r3, [r7, #32]
 80081e0:	3302      	adds	r3, #2
 80081e2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	b2da      	uxtb	r2, r3
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	3301      	adds	r3, #1
 80081f0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	0a1b      	lsrs	r3, r3, #8
 80081f6:	b2da      	uxtb	r2, r3
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	3301      	adds	r3, #1
 8008200:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008204:	3b01      	subs	r3, #1
 8008206:	627b      	str	r3, [r7, #36]	; 0x24
 8008208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1e3      	bne.n	80081d6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800820e:	88bb      	ldrh	r3, [r7, #4]
 8008210:	f003 0301 	and.w	r3, r3, #1
 8008214:	b29b      	uxth	r3, r3
 8008216:	2b00      	cmp	r3, #0
 8008218:	d007      	beq.n	800822a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800821a:	6a3b      	ldr	r3, [r7, #32]
 800821c:	881b      	ldrh	r3, [r3, #0]
 800821e:	b29b      	uxth	r3, r3
 8008220:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	b2da      	uxtb	r2, r3
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	701a      	strb	r2, [r3, #0]
  }
}
 800822a:	bf00      	nop
 800822c:	372c      	adds	r7, #44	; 0x2c
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	460b      	mov	r3, r1
 8008240:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008242:	2300      	movs	r3, #0
 8008244:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	7c1b      	ldrb	r3, [r3, #16]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d115      	bne.n	800827a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800824e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008252:	2202      	movs	r2, #2
 8008254:	2181      	movs	r1, #129	; 0x81
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f001 ff06 	bl	800a068 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008262:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008266:	2202      	movs	r2, #2
 8008268:	2101      	movs	r1, #1
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f001 fefc 	bl	800a068 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008278:	e012      	b.n	80082a0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800827a:	2340      	movs	r3, #64	; 0x40
 800827c:	2202      	movs	r2, #2
 800827e:	2181      	movs	r1, #129	; 0x81
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f001 fef1 	bl	800a068 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800828c:	2340      	movs	r3, #64	; 0x40
 800828e:	2202      	movs	r2, #2
 8008290:	2101      	movs	r1, #1
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f001 fee8 	bl	800a068 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80082a0:	2308      	movs	r3, #8
 80082a2:	2203      	movs	r2, #3
 80082a4:	2182      	movs	r1, #130	; 0x82
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f001 fede 	bl	800a068 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80082b2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80082b6:	f002 f8d1 	bl	800a45c <USBD_static_malloc>
 80082ba:	4602      	mov	r2, r0
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d102      	bne.n	80082d2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80082cc:	2301      	movs	r3, #1
 80082ce:	73fb      	strb	r3, [r7, #15]
 80082d0:	e026      	b.n	8008320 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082d8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	7c1b      	ldrb	r3, [r3, #16]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d109      	bne.n	8008310 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008306:	2101      	movs	r1, #1
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f002 f823 	bl	800a354 <USBD_LL_PrepareReceive>
 800830e:	e007      	b.n	8008320 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008316:	2340      	movs	r3, #64	; 0x40
 8008318:	2101      	movs	r1, #1
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f002 f81a 	bl	800a354 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008320:	7bfb      	ldrb	r3, [r7, #15]
}
 8008322:	4618      	mov	r0, r3
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b084      	sub	sp, #16
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	460b      	mov	r3, r1
 8008334:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008336:	2300      	movs	r3, #0
 8008338:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800833a:	2181      	movs	r1, #129	; 0x81
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f001 fed1 	bl	800a0e4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008348:	2101      	movs	r1, #1
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f001 feca 	bl	800a0e4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008358:	2182      	movs	r1, #130	; 0x82
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f001 fec2 	bl	800a0e4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00e      	beq.n	800838e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008380:	4618      	mov	r0, r3
 8008382:	f002 f879 	bl	800a478 <USBD_static_free>
    pdev->pClassData = NULL;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800838e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b086      	sub	sp, #24
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80083aa:	2300      	movs	r3, #0
 80083ac:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80083ae:	2300      	movs	r3, #0
 80083b0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80083b2:	2300      	movs	r3, #0
 80083b4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d039      	beq.n	8008436 <USBD_CDC_Setup+0x9e>
 80083c2:	2b20      	cmp	r3, #32
 80083c4:	d17c      	bne.n	80084c0 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	88db      	ldrh	r3, [r3, #6]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d029      	beq.n	8008422 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	b25b      	sxtb	r3, r3
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	da11      	bge.n	80083fc <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	683a      	ldr	r2, [r7, #0]
 80083e2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80083e4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80083e6:	683a      	ldr	r2, [r7, #0]
 80083e8:	88d2      	ldrh	r2, [r2, #6]
 80083ea:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80083ec:	6939      	ldr	r1, [r7, #16]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	88db      	ldrh	r3, [r3, #6]
 80083f2:	461a      	mov	r2, r3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f001 fa2b 	bl	8009850 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80083fa:	e068      	b.n	80084ce <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	785a      	ldrb	r2, [r3, #1]
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	88db      	ldrh	r3, [r3, #6]
 800840a:	b2da      	uxtb	r2, r3
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008412:	6939      	ldr	r1, [r7, #16]
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	88db      	ldrh	r3, [r3, #6]
 8008418:	461a      	mov	r2, r3
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f001 fa46 	bl	80098ac <USBD_CtlPrepareRx>
      break;
 8008420:	e055      	b.n	80084ce <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	683a      	ldr	r2, [r7, #0]
 800842c:	7850      	ldrb	r0, [r2, #1]
 800842e:	2200      	movs	r2, #0
 8008430:	6839      	ldr	r1, [r7, #0]
 8008432:	4798      	blx	r3
      break;
 8008434:	e04b      	b.n	80084ce <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	785b      	ldrb	r3, [r3, #1]
 800843a:	2b0a      	cmp	r3, #10
 800843c:	d017      	beq.n	800846e <USBD_CDC_Setup+0xd6>
 800843e:	2b0b      	cmp	r3, #11
 8008440:	d029      	beq.n	8008496 <USBD_CDC_Setup+0xfe>
 8008442:	2b00      	cmp	r3, #0
 8008444:	d133      	bne.n	80084ae <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800844c:	2b03      	cmp	r3, #3
 800844e:	d107      	bne.n	8008460 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008450:	f107 030c 	add.w	r3, r7, #12
 8008454:	2202      	movs	r2, #2
 8008456:	4619      	mov	r1, r3
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f001 f9f9 	bl	8009850 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800845e:	e02e      	b.n	80084be <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008460:	6839      	ldr	r1, [r7, #0]
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f001 f989 	bl	800977a <USBD_CtlError>
            ret = USBD_FAIL;
 8008468:	2302      	movs	r3, #2
 800846a:	75fb      	strb	r3, [r7, #23]
          break;
 800846c:	e027      	b.n	80084be <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008474:	2b03      	cmp	r3, #3
 8008476:	d107      	bne.n	8008488 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008478:	f107 030f 	add.w	r3, r7, #15
 800847c:	2201      	movs	r2, #1
 800847e:	4619      	mov	r1, r3
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f001 f9e5 	bl	8009850 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008486:	e01a      	b.n	80084be <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f001 f975 	bl	800977a <USBD_CtlError>
            ret = USBD_FAIL;
 8008490:	2302      	movs	r3, #2
 8008492:	75fb      	strb	r3, [r7, #23]
          break;
 8008494:	e013      	b.n	80084be <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800849c:	2b03      	cmp	r3, #3
 800849e:	d00d      	beq.n	80084bc <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80084a0:	6839      	ldr	r1, [r7, #0]
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f001 f969 	bl	800977a <USBD_CtlError>
            ret = USBD_FAIL;
 80084a8:	2302      	movs	r3, #2
 80084aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80084ac:	e006      	b.n	80084bc <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80084ae:	6839      	ldr	r1, [r7, #0]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f001 f962 	bl	800977a <USBD_CtlError>
          ret = USBD_FAIL;
 80084b6:	2302      	movs	r3, #2
 80084b8:	75fb      	strb	r3, [r7, #23]
          break;
 80084ba:	e000      	b.n	80084be <USBD_CDC_Setup+0x126>
          break;
 80084bc:	bf00      	nop
      }
      break;
 80084be:	e006      	b.n	80084ce <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80084c0:	6839      	ldr	r1, [r7, #0]
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f001 f959 	bl	800977a <USBD_CtlError>
      ret = USBD_FAIL;
 80084c8:	2302      	movs	r3, #2
 80084ca:	75fb      	strb	r3, [r7, #23]
      break;
 80084cc:	bf00      	nop
  }

  return ret;
 80084ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3718      	adds	r7, #24
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	460b      	mov	r3, r1
 80084e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ea:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084f2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d037      	beq.n	800856e <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80084fe:	78fa      	ldrb	r2, [r7, #3]
 8008500:	6879      	ldr	r1, [r7, #4]
 8008502:	4613      	mov	r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	4413      	add	r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	440b      	add	r3, r1
 800850c:	331c      	adds	r3, #28
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d026      	beq.n	8008562 <USBD_CDC_DataIn+0x8a>
 8008514:	78fa      	ldrb	r2, [r7, #3]
 8008516:	6879      	ldr	r1, [r7, #4]
 8008518:	4613      	mov	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4413      	add	r3, r2
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	440b      	add	r3, r1
 8008522:	331c      	adds	r3, #28
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	78fa      	ldrb	r2, [r7, #3]
 8008528:	68b9      	ldr	r1, [r7, #8]
 800852a:	0152      	lsls	r2, r2, #5
 800852c:	440a      	add	r2, r1
 800852e:	3238      	adds	r2, #56	; 0x38
 8008530:	6812      	ldr	r2, [r2, #0]
 8008532:	fbb3 f1f2 	udiv	r1, r3, r2
 8008536:	fb02 f201 	mul.w	r2, r2, r1
 800853a:	1a9b      	subs	r3, r3, r2
 800853c:	2b00      	cmp	r3, #0
 800853e:	d110      	bne.n	8008562 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008540:	78fa      	ldrb	r2, [r7, #3]
 8008542:	6879      	ldr	r1, [r7, #4]
 8008544:	4613      	mov	r3, r2
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	4413      	add	r3, r2
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	440b      	add	r3, r1
 800854e:	331c      	adds	r3, #28
 8008550:	2200      	movs	r2, #0
 8008552:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008554:	78f9      	ldrb	r1, [r7, #3]
 8008556:	2300      	movs	r3, #0
 8008558:	2200      	movs	r2, #0
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f001 fec0 	bl	800a2e0 <USBD_LL_Transmit>
 8008560:	e003      	b.n	800856a <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800856a:	2300      	movs	r3, #0
 800856c:	e000      	b.n	8008570 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 800856e:	2302      	movs	r3, #2
  }
}
 8008570:	4618      	mov	r0, r3
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	460b      	mov	r3, r1
 8008582:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800858a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800858c:	78fb      	ldrb	r3, [r7, #3]
 800858e:	4619      	mov	r1, r3
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f001 ff19 	bl	800a3c8 <USBD_LL_GetRxDataSize>
 8008596:	4602      	mov	r2, r0
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00d      	beq.n	80085c4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80085bc:	4611      	mov	r1, r2
 80085be:	4798      	blx	r3

    return USBD_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	e000      	b.n	80085c6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80085c4:	2302      	movs	r3, #2
  }
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b084      	sub	sp, #16
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085dc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d015      	beq.n	8008614 <USBD_CDC_EP0_RxReady+0x46>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80085ee:	2bff      	cmp	r3, #255	; 0xff
 80085f0:	d010      	beq.n	8008614 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008600:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008608:	b292      	uxth	r2, r2
 800860a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	22ff      	movs	r2, #255	; 0xff
 8008610:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
	...

08008620 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2243      	movs	r2, #67	; 0x43
 800862c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800862e:	4b03      	ldr	r3, [pc, #12]	; (800863c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008630:	4618      	mov	r0, r3
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr
 800863c:	20000094 	.word	0x20000094

08008640 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2243      	movs	r2, #67	; 0x43
 800864c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800864e:	4b03      	ldr	r3, [pc, #12]	; (800865c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008650:	4618      	mov	r0, r3
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr
 800865c:	20000050 	.word	0x20000050

08008660 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2243      	movs	r2, #67	; 0x43
 800866c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800866e:	4b03      	ldr	r3, [pc, #12]	; (800867c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008670:	4618      	mov	r0, r3
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr
 800867c:	200000d8 	.word	0x200000d8

08008680 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	220a      	movs	r2, #10
 800868c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800868e:	4b03      	ldr	r3, [pc, #12]	; (800869c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008690:	4618      	mov	r0, r3
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr
 800869c:	2000000c 	.word	0x2000000c

080086a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80086aa:	2302      	movs	r3, #2
 80086ac:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d005      	beq.n	80086c0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80086c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b087      	sub	sp, #28
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	60f8      	str	r0, [r7, #12]
 80086d6:	60b9      	str	r1, [r7, #8]
 80086d8:	4613      	mov	r3, r2
 80086da:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086e2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80086ec:	88fa      	ldrh	r2, [r7, #6]
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	371c      	adds	r7, #28
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008702:	b480      	push	{r7}
 8008704:	b085      	sub	sp, #20
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
 800870a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008712:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3714      	adds	r7, #20
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr

0800872a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b084      	sub	sp, #16
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008738:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008740:	2b00      	cmp	r3, #0
 8008742:	d01c      	beq.n	800877e <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800874a:	2b00      	cmp	r3, #0
 800874c:	d115      	bne.n	800877a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2201      	movs	r2, #1
 8008752:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800876c:	b29b      	uxth	r3, r3
 800876e:	2181      	movs	r1, #129	; 0x81
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f001 fdb5 	bl	800a2e0 <USBD_LL_Transmit>

      return USBD_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	e002      	b.n	8008780 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800877a:	2301      	movs	r3, #1
 800877c:	e000      	b.n	8008780 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800877e:	2302      	movs	r3, #2
  }
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008796:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d017      	beq.n	80087d2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	7c1b      	ldrb	r3, [r3, #16]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d109      	bne.n	80087be <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087b4:	2101      	movs	r1, #1
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f001 fdcc 	bl	800a354 <USBD_LL_PrepareReceive>
 80087bc:	e007      	b.n	80087ce <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087c4:	2340      	movs	r3, #64	; 0x40
 80087c6:	2101      	movs	r1, #1
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f001 fdc3 	bl	800a354 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80087ce:	2300      	movs	r3, #0
 80087d0:	e000      	b.n	80087d4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80087d2:	2302      	movs	r3, #2
  }
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	4613      	mov	r3, r2
 80087e8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d101      	bne.n	80087f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80087f0:	2302      	movs	r3, #2
 80087f2:	e01a      	b.n	800882a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2200      	movs	r2, #0
 8008802:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d003      	beq.n	8008814 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	79fa      	ldrb	r2, [r7, #7]
 8008820:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f001 fb8c 	bl	8009f40 <USBD_LL_Init>

  return USBD_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008832:	b480      	push	{r7}
 8008834:	b085      	sub	sp, #20
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800883c:	2300      	movs	r3, #0
 800883e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d006      	beq.n	8008854 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	73fb      	strb	r3, [r7, #15]
 8008852:	e001      	b.n	8008858 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008854:	2302      	movs	r3, #2
 8008856:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008858:	7bfb      	ldrb	r3, [r7, #15]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3714      	adds	r7, #20
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr

08008866 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b082      	sub	sp, #8
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f001 fbc8 	bl	800a004 <USBD_LL_Start>

  return USBD_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800887e:	b480      	push	{r7}
 8008880:	b083      	sub	sp, #12
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	460b      	mov	r3, r1
 800889e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80088a0:	2302      	movs	r3, #2
 80088a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00c      	beq.n	80088c8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	78fa      	ldrb	r2, [r7, #3]
 80088b8:	4611      	mov	r1, r2
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	4798      	blx	r3
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d101      	bne.n	80088c8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80088c4:	2300      	movs	r3, #0
 80088c6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80088c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	460b      	mov	r3, r1
 80088dc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	78fa      	ldrb	r2, [r7, #3]
 80088e8:	4611      	mov	r1, r2
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	4798      	blx	r3

  return USBD_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	4618      	mov	r0, r3
 800890c:	f000 fef8 	bl	8009700 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800891e:	461a      	mov	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800892c:	f003 031f 	and.w	r3, r3, #31
 8008930:	2b01      	cmp	r3, #1
 8008932:	d00c      	beq.n	800894e <USBD_LL_SetupStage+0x56>
 8008934:	2b01      	cmp	r3, #1
 8008936:	d302      	bcc.n	800893e <USBD_LL_SetupStage+0x46>
 8008938:	2b02      	cmp	r3, #2
 800893a:	d010      	beq.n	800895e <USBD_LL_SetupStage+0x66>
 800893c:	e017      	b.n	800896e <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008944:	4619      	mov	r1, r3
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 f9ce 	bl	8008ce8 <USBD_StdDevReq>
      break;
 800894c:	e01a      	b.n	8008984 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008954:	4619      	mov	r1, r3
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 fa30 	bl	8008dbc <USBD_StdItfReq>
      break;
 800895c:	e012      	b.n	8008984 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008964:	4619      	mov	r1, r3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 fa6e 	bl	8008e48 <USBD_StdEPReq>
      break;
 800896c:	e00a      	b.n	8008984 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008974:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008978:	b2db      	uxtb	r3, r3
 800897a:	4619      	mov	r1, r3
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f001 fbe7 	bl	800a150 <USBD_LL_StallEP>
      break;
 8008982:	bf00      	nop
  }

  return USBD_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b086      	sub	sp, #24
 8008992:	af00      	add	r7, sp, #0
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	460b      	mov	r3, r1
 8008998:	607a      	str	r2, [r7, #4]
 800899a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800899c:	7afb      	ldrb	r3, [r7, #11]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d14b      	bne.n	8008a3a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80089a8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089b0:	2b03      	cmp	r3, #3
 80089b2:	d134      	bne.n	8008a1e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	68da      	ldr	r2, [r3, #12]
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	691b      	ldr	r3, [r3, #16]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d919      	bls.n	80089f4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	68da      	ldr	r2, [r3, #12]
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	1ad2      	subs	r2, r2, r3
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	68da      	ldr	r2, [r3, #12]
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d203      	bcs.n	80089e2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80089de:	b29b      	uxth	r3, r3
 80089e0:	e002      	b.n	80089e8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	461a      	mov	r2, r3
 80089ea:	6879      	ldr	r1, [r7, #4]
 80089ec:	68f8      	ldr	r0, [r7, #12]
 80089ee:	f000 ff7b 	bl	80098e8 <USBD_CtlContinueRx>
 80089f2:	e038      	b.n	8008a66 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00a      	beq.n	8008a16 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008a06:	2b03      	cmp	r3, #3
 8008a08:	d105      	bne.n	8008a16 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f000 ff78 	bl	800990c <USBD_CtlSendStatus>
 8008a1c:	e023      	b.n	8008a66 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a24:	2b05      	cmp	r3, #5
 8008a26:	d11e      	bne.n	8008a66 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008a30:	2100      	movs	r1, #0
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f001 fb8c 	bl	800a150 <USBD_LL_StallEP>
 8008a38:	e015      	b.n	8008a66 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a40:	699b      	ldr	r3, [r3, #24]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00d      	beq.n	8008a62 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	d108      	bne.n	8008a62 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	7afa      	ldrb	r2, [r7, #11]
 8008a5a:	4611      	mov	r1, r2
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	4798      	blx	r3
 8008a60:	e001      	b.n	8008a66 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008a62:	2302      	movs	r3, #2
 8008a64:	e000      	b.n	8008a68 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008a66:	2300      	movs	r3, #0
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3718      	adds	r7, #24
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b086      	sub	sp, #24
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	460b      	mov	r3, r1
 8008a7a:	607a      	str	r2, [r7, #4]
 8008a7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008a7e:	7afb      	ldrb	r3, [r7, #11]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d17f      	bne.n	8008b84 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	3314      	adds	r3, #20
 8008a88:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d15c      	bne.n	8008b4e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	68da      	ldr	r2, [r3, #12]
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d915      	bls.n	8008acc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	68da      	ldr	r2, [r3, #12]
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	1ad2      	subs	r2, r2, r3
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	6879      	ldr	r1, [r7, #4]
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f000 fee5 	bl	8009888 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008abe:	2300      	movs	r3, #0
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f001 fc45 	bl	800a354 <USBD_LL_PrepareReceive>
 8008aca:	e04e      	b.n	8008b6a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	6912      	ldr	r2, [r2, #16]
 8008ad4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ad8:	fb02 f201 	mul.w	r2, r2, r1
 8008adc:	1a9b      	subs	r3, r3, r2
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d11c      	bne.n	8008b1c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	689a      	ldr	r2, [r3, #8]
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d316      	bcc.n	8008b1c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	689a      	ldr	r2, [r3, #8]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d20f      	bcs.n	8008b1c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008afc:	2200      	movs	r2, #0
 8008afe:	2100      	movs	r1, #0
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f000 fec1 	bl	8009888 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b0e:	2300      	movs	r3, #0
 8008b10:	2200      	movs	r2, #0
 8008b12:	2100      	movs	r1, #0
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f001 fc1d 	bl	800a354 <USBD_LL_PrepareReceive>
 8008b1a:	e026      	b.n	8008b6a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00a      	beq.n	8008b3e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008b2e:	2b03      	cmp	r3, #3
 8008b30:	d105      	bne.n	8008b3e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008b3e:	2180      	movs	r1, #128	; 0x80
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f001 fb05 	bl	800a150 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f000 fef3 	bl	8009932 <USBD_CtlReceiveStatus>
 8008b4c:	e00d      	b.n	8008b6a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b54:	2b04      	cmp	r3, #4
 8008b56:	d004      	beq.n	8008b62 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d103      	bne.n	8008b6a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008b62:	2180      	movs	r1, #128	; 0x80
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f001 faf3 	bl	800a150 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d11d      	bne.n	8008bb0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f7ff fe82 	bl	800887e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008b82:	e015      	b.n	8008bb0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b8a:	695b      	ldr	r3, [r3, #20]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00d      	beq.n	8008bac <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008b96:	2b03      	cmp	r3, #3
 8008b98:	d108      	bne.n	8008bac <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	7afa      	ldrb	r2, [r7, #11]
 8008ba4:	4611      	mov	r1, r2
 8008ba6:	68f8      	ldr	r0, [r7, #12]
 8008ba8:	4798      	blx	r3
 8008baa:	e001      	b.n	8008bb0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008bac:	2302      	movs	r3, #2
 8008bae:	e000      	b.n	8008bb2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3718      	adds	r7, #24
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b082      	sub	sp, #8
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008bc2:	2340      	movs	r3, #64	; 0x40
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f001 fa4d 	bl	800a068 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2240      	movs	r2, #64	; 0x40
 8008bda:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008bde:	2340      	movs	r3, #64	; 0x40
 8008be0:	2200      	movs	r2, #0
 8008be2:	2180      	movs	r1, #128	; 0x80
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f001 fa3f 	bl	800a068 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2240      	movs	r2, #64	; 0x40
 8008bf4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d009      	beq.n	8008c32 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	6852      	ldr	r2, [r2, #4]
 8008c2a:	b2d2      	uxtb	r2, r2
 8008c2c:	4611      	mov	r1, r2
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	4798      	blx	r3
  }

  return USBD_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	460b      	mov	r3, r1
 8008c46:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	78fa      	ldrb	r2, [r7, #3]
 8008c4c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2204      	movs	r2, #4
 8008c74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	370c      	adds	r7, #12
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr

08008c86 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008c86:	b480      	push	{r7}
 8008c88:	b083      	sub	sp, #12
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c94:	2b04      	cmp	r3, #4
 8008c96:	d105      	bne.n	8008ca4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	370c      	adds	r7, #12
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr

08008cb2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b082      	sub	sp, #8
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cc0:	2b03      	cmp	r3, #3
 8008cc2:	d10b      	bne.n	8008cdc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cca:	69db      	ldr	r3, [r3, #28]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d005      	beq.n	8008cdc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cd6:	69db      	ldr	r3, [r3, #28]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
	...

08008ce8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cfe:	2b20      	cmp	r3, #32
 8008d00:	d004      	beq.n	8008d0c <USBD_StdDevReq+0x24>
 8008d02:	2b40      	cmp	r3, #64	; 0x40
 8008d04:	d002      	beq.n	8008d0c <USBD_StdDevReq+0x24>
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d008      	beq.n	8008d1c <USBD_StdDevReq+0x34>
 8008d0a:	e04c      	b.n	8008da6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	6839      	ldr	r1, [r7, #0]
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	4798      	blx	r3
      break;
 8008d1a:	e049      	b.n	8008db0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	785b      	ldrb	r3, [r3, #1]
 8008d20:	2b09      	cmp	r3, #9
 8008d22:	d83a      	bhi.n	8008d9a <USBD_StdDevReq+0xb2>
 8008d24:	a201      	add	r2, pc, #4	; (adr r2, 8008d2c <USBD_StdDevReq+0x44>)
 8008d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d2a:	bf00      	nop
 8008d2c:	08008d7d 	.word	0x08008d7d
 8008d30:	08008d91 	.word	0x08008d91
 8008d34:	08008d9b 	.word	0x08008d9b
 8008d38:	08008d87 	.word	0x08008d87
 8008d3c:	08008d9b 	.word	0x08008d9b
 8008d40:	08008d5f 	.word	0x08008d5f
 8008d44:	08008d55 	.word	0x08008d55
 8008d48:	08008d9b 	.word	0x08008d9b
 8008d4c:	08008d73 	.word	0x08008d73
 8008d50:	08008d69 	.word	0x08008d69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008d54:	6839      	ldr	r1, [r7, #0]
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 f9d4 	bl	8009104 <USBD_GetDescriptor>
          break;
 8008d5c:	e022      	b.n	8008da4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008d5e:	6839      	ldr	r1, [r7, #0]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 fb61 	bl	8009428 <USBD_SetAddress>
          break;
 8008d66:	e01d      	b.n	8008da4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008d68:	6839      	ldr	r1, [r7, #0]
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fb9e 	bl	80094ac <USBD_SetConfig>
          break;
 8008d70:	e018      	b.n	8008da4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fc27 	bl	80095c8 <USBD_GetConfig>
          break;
 8008d7a:	e013      	b.n	8008da4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 fc56 	bl	8009630 <USBD_GetStatus>
          break;
 8008d84:	e00e      	b.n	8008da4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 fc84 	bl	8009696 <USBD_SetFeature>
          break;
 8008d8e:	e009      	b.n	8008da4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008d90:	6839      	ldr	r1, [r7, #0]
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fc93 	bl	80096be <USBD_ClrFeature>
          break;
 8008d98:	e004      	b.n	8008da4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fcec 	bl	800977a <USBD_CtlError>
          break;
 8008da2:	bf00      	nop
      }
      break;
 8008da4:	e004      	b.n	8008db0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008da6:	6839      	ldr	r1, [r7, #0]
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 fce6 	bl	800977a <USBD_CtlError>
      break;
 8008dae:	bf00      	nop
  }

  return ret;
 8008db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop

08008dbc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008dd2:	2b20      	cmp	r3, #32
 8008dd4:	d003      	beq.n	8008dde <USBD_StdItfReq+0x22>
 8008dd6:	2b40      	cmp	r3, #64	; 0x40
 8008dd8:	d001      	beq.n	8008dde <USBD_StdItfReq+0x22>
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d12a      	bne.n	8008e34 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008de4:	3b01      	subs	r3, #1
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d81d      	bhi.n	8008e26 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	889b      	ldrh	r3, [r3, #4]
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d813      	bhi.n	8008e1c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	6839      	ldr	r1, [r7, #0]
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	4798      	blx	r3
 8008e02:	4603      	mov	r3, r0
 8008e04:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	88db      	ldrh	r3, [r3, #6]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d110      	bne.n	8008e30 <USBD_StdItfReq+0x74>
 8008e0e:	7bfb      	ldrb	r3, [r7, #15]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d10d      	bne.n	8008e30 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fd79 	bl	800990c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e1a:	e009      	b.n	8008e30 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008e1c:	6839      	ldr	r1, [r7, #0]
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fcab 	bl	800977a <USBD_CtlError>
          break;
 8008e24:	e004      	b.n	8008e30 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8008e26:	6839      	ldr	r1, [r7, #0]
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fca6 	bl	800977a <USBD_CtlError>
          break;
 8008e2e:	e000      	b.n	8008e32 <USBD_StdItfReq+0x76>
          break;
 8008e30:	bf00      	nop
      }
      break;
 8008e32:	e004      	b.n	8008e3e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fc9f 	bl	800977a <USBD_CtlError>
      break;
 8008e3c:	bf00      	nop
  }

  return USBD_OK;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e52:	2300      	movs	r3, #0
 8008e54:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	889b      	ldrh	r3, [r3, #4]
 8008e5a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e64:	2b20      	cmp	r3, #32
 8008e66:	d004      	beq.n	8008e72 <USBD_StdEPReq+0x2a>
 8008e68:	2b40      	cmp	r3, #64	; 0x40
 8008e6a:	d002      	beq.n	8008e72 <USBD_StdEPReq+0x2a>
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d008      	beq.n	8008e82 <USBD_StdEPReq+0x3a>
 8008e70:	e13d      	b.n	80090ee <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	6839      	ldr	r1, [r7, #0]
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	4798      	blx	r3
      break;
 8008e80:	e13a      	b.n	80090f8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e8a:	2b20      	cmp	r3, #32
 8008e8c:	d10a      	bne.n	8008ea4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	6839      	ldr	r1, [r7, #0]
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	4798      	blx	r3
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008ea0:	7bfb      	ldrb	r3, [r7, #15]
 8008ea2:	e12a      	b.n	80090fa <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	785b      	ldrb	r3, [r3, #1]
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d03e      	beq.n	8008f2a <USBD_StdEPReq+0xe2>
 8008eac:	2b03      	cmp	r3, #3
 8008eae:	d002      	beq.n	8008eb6 <USBD_StdEPReq+0x6e>
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d070      	beq.n	8008f96 <USBD_StdEPReq+0x14e>
 8008eb4:	e115      	b.n	80090e2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d002      	beq.n	8008ec6 <USBD_StdEPReq+0x7e>
 8008ec0:	2b03      	cmp	r3, #3
 8008ec2:	d015      	beq.n	8008ef0 <USBD_StdEPReq+0xa8>
 8008ec4:	e02b      	b.n	8008f1e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00c      	beq.n	8008ee6 <USBD_StdEPReq+0x9e>
 8008ecc:	7bbb      	ldrb	r3, [r7, #14]
 8008ece:	2b80      	cmp	r3, #128	; 0x80
 8008ed0:	d009      	beq.n	8008ee6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008ed2:	7bbb      	ldrb	r3, [r7, #14]
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f001 f93a 	bl	800a150 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008edc:	2180      	movs	r1, #128	; 0x80
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f001 f936 	bl	800a150 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ee4:	e020      	b.n	8008f28 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008ee6:	6839      	ldr	r1, [r7, #0]
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 fc46 	bl	800977a <USBD_CtlError>
              break;
 8008eee:	e01b      	b.n	8008f28 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	885b      	ldrh	r3, [r3, #2]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d10e      	bne.n	8008f16 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008ef8:	7bbb      	ldrb	r3, [r7, #14]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00b      	beq.n	8008f16 <USBD_StdEPReq+0xce>
 8008efe:	7bbb      	ldrb	r3, [r7, #14]
 8008f00:	2b80      	cmp	r3, #128	; 0x80
 8008f02:	d008      	beq.n	8008f16 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	88db      	ldrh	r3, [r3, #6]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d104      	bne.n	8008f16 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008f0c:	7bbb      	ldrb	r3, [r7, #14]
 8008f0e:	4619      	mov	r1, r3
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f001 f91d 	bl	800a150 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fcf8 	bl	800990c <USBD_CtlSendStatus>

              break;
 8008f1c:	e004      	b.n	8008f28 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8008f1e:	6839      	ldr	r1, [r7, #0]
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fc2a 	bl	800977a <USBD_CtlError>
              break;
 8008f26:	bf00      	nop
          }
          break;
 8008f28:	e0e0      	b.n	80090ec <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	d002      	beq.n	8008f3a <USBD_StdEPReq+0xf2>
 8008f34:	2b03      	cmp	r3, #3
 8008f36:	d015      	beq.n	8008f64 <USBD_StdEPReq+0x11c>
 8008f38:	e026      	b.n	8008f88 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f3a:	7bbb      	ldrb	r3, [r7, #14]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00c      	beq.n	8008f5a <USBD_StdEPReq+0x112>
 8008f40:	7bbb      	ldrb	r3, [r7, #14]
 8008f42:	2b80      	cmp	r3, #128	; 0x80
 8008f44:	d009      	beq.n	8008f5a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008f46:	7bbb      	ldrb	r3, [r7, #14]
 8008f48:	4619      	mov	r1, r3
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f001 f900 	bl	800a150 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008f50:	2180      	movs	r1, #128	; 0x80
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f001 f8fc 	bl	800a150 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f58:	e01c      	b.n	8008f94 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008f5a:	6839      	ldr	r1, [r7, #0]
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 fc0c 	bl	800977a <USBD_CtlError>
              break;
 8008f62:	e017      	b.n	8008f94 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	885b      	ldrh	r3, [r3, #2]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d112      	bne.n	8008f92 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008f6c:	7bbb      	ldrb	r3, [r7, #14]
 8008f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d004      	beq.n	8008f80 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008f76:	7bbb      	ldrb	r3, [r7, #14]
 8008f78:	4619      	mov	r1, r3
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f001 f91e 	bl	800a1bc <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 fcc3 	bl	800990c <USBD_CtlSendStatus>
              }
              break;
 8008f86:	e004      	b.n	8008f92 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008f88:	6839      	ldr	r1, [r7, #0]
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fbf5 	bl	800977a <USBD_CtlError>
              break;
 8008f90:	e000      	b.n	8008f94 <USBD_StdEPReq+0x14c>
              break;
 8008f92:	bf00      	nop
          }
          break;
 8008f94:	e0aa      	b.n	80090ec <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d002      	beq.n	8008fa6 <USBD_StdEPReq+0x15e>
 8008fa0:	2b03      	cmp	r3, #3
 8008fa2:	d032      	beq.n	800900a <USBD_StdEPReq+0x1c2>
 8008fa4:	e097      	b.n	80090d6 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fa6:	7bbb      	ldrb	r3, [r7, #14]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d007      	beq.n	8008fbc <USBD_StdEPReq+0x174>
 8008fac:	7bbb      	ldrb	r3, [r7, #14]
 8008fae:	2b80      	cmp	r3, #128	; 0x80
 8008fb0:	d004      	beq.n	8008fbc <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8008fb2:	6839      	ldr	r1, [r7, #0]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fbe0 	bl	800977a <USBD_CtlError>
                break;
 8008fba:	e091      	b.n	80090e0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	da0b      	bge.n	8008fdc <USBD_StdEPReq+0x194>
 8008fc4:	7bbb      	ldrb	r3, [r7, #14]
 8008fc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fca:	4613      	mov	r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	4413      	add	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	3310      	adds	r3, #16
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	3304      	adds	r3, #4
 8008fda:	e00b      	b.n	8008ff4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008fdc:	7bbb      	ldrb	r3, [r7, #14]
 8008fde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	4413      	add	r3, r2
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	3304      	adds	r3, #4
 8008ff4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	2202      	movs	r2, #2
 8009000:	4619      	mov	r1, r3
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 fc24 	bl	8009850 <USBD_CtlSendData>
              break;
 8009008:	e06a      	b.n	80090e0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800900a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800900e:	2b00      	cmp	r3, #0
 8009010:	da11      	bge.n	8009036 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009012:	7bbb      	ldrb	r3, [r7, #14]
 8009014:	f003 020f 	and.w	r2, r3, #15
 8009018:	6879      	ldr	r1, [r7, #4]
 800901a:	4613      	mov	r3, r2
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	4413      	add	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	440b      	add	r3, r1
 8009024:	3318      	adds	r3, #24
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d117      	bne.n	800905c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800902c:	6839      	ldr	r1, [r7, #0]
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 fba3 	bl	800977a <USBD_CtlError>
                  break;
 8009034:	e054      	b.n	80090e0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009036:	7bbb      	ldrb	r3, [r7, #14]
 8009038:	f003 020f 	and.w	r2, r3, #15
 800903c:	6879      	ldr	r1, [r7, #4]
 800903e:	4613      	mov	r3, r2
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	4413      	add	r3, r2
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	440b      	add	r3, r1
 8009048:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d104      	bne.n	800905c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 fb90 	bl	800977a <USBD_CtlError>
                  break;
 800905a:	e041      	b.n	80090e0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800905c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009060:	2b00      	cmp	r3, #0
 8009062:	da0b      	bge.n	800907c <USBD_StdEPReq+0x234>
 8009064:	7bbb      	ldrb	r3, [r7, #14]
 8009066:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800906a:	4613      	mov	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	4413      	add	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	3310      	adds	r3, #16
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	4413      	add	r3, r2
 8009078:	3304      	adds	r3, #4
 800907a:	e00b      	b.n	8009094 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800907c:	7bbb      	ldrb	r3, [r7, #14]
 800907e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009082:	4613      	mov	r3, r2
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4413      	add	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	4413      	add	r3, r2
 8009092:	3304      	adds	r3, #4
 8009094:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009096:	7bbb      	ldrb	r3, [r7, #14]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d002      	beq.n	80090a2 <USBD_StdEPReq+0x25a>
 800909c:	7bbb      	ldrb	r3, [r7, #14]
 800909e:	2b80      	cmp	r3, #128	; 0x80
 80090a0:	d103      	bne.n	80090aa <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	2200      	movs	r2, #0
 80090a6:	601a      	str	r2, [r3, #0]
 80090a8:	e00e      	b.n	80090c8 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80090aa:	7bbb      	ldrb	r3, [r7, #14]
 80090ac:	4619      	mov	r1, r3
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f001 f8ba 	bl	800a228 <USBD_LL_IsStallEP>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d003      	beq.n	80090c2 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	2201      	movs	r2, #1
 80090be:	601a      	str	r2, [r3, #0]
 80090c0:	e002      	b.n	80090c8 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	2200      	movs	r2, #0
 80090c6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	2202      	movs	r2, #2
 80090cc:	4619      	mov	r1, r3
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fbbe 	bl	8009850 <USBD_CtlSendData>
              break;
 80090d4:	e004      	b.n	80090e0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80090d6:	6839      	ldr	r1, [r7, #0]
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 fb4e 	bl	800977a <USBD_CtlError>
              break;
 80090de:	bf00      	nop
          }
          break;
 80090e0:	e004      	b.n	80090ec <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80090e2:	6839      	ldr	r1, [r7, #0]
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fb48 	bl	800977a <USBD_CtlError>
          break;
 80090ea:	bf00      	nop
      }
      break;
 80090ec:	e004      	b.n	80090f8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 fb42 	bl	800977a <USBD_CtlError>
      break;
 80090f6:	bf00      	nop
  }

  return ret;
 80090f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
	...

08009104 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800910e:	2300      	movs	r3, #0
 8009110:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009112:	2300      	movs	r3, #0
 8009114:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009116:	2300      	movs	r3, #0
 8009118:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	885b      	ldrh	r3, [r3, #2]
 800911e:	0a1b      	lsrs	r3, r3, #8
 8009120:	b29b      	uxth	r3, r3
 8009122:	3b01      	subs	r3, #1
 8009124:	2b0e      	cmp	r3, #14
 8009126:	f200 8152 	bhi.w	80093ce <USBD_GetDescriptor+0x2ca>
 800912a:	a201      	add	r2, pc, #4	; (adr r2, 8009130 <USBD_GetDescriptor+0x2c>)
 800912c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009130:	080091a1 	.word	0x080091a1
 8009134:	080091b9 	.word	0x080091b9
 8009138:	080091f9 	.word	0x080091f9
 800913c:	080093cf 	.word	0x080093cf
 8009140:	080093cf 	.word	0x080093cf
 8009144:	0800936f 	.word	0x0800936f
 8009148:	0800939b 	.word	0x0800939b
 800914c:	080093cf 	.word	0x080093cf
 8009150:	080093cf 	.word	0x080093cf
 8009154:	080093cf 	.word	0x080093cf
 8009158:	080093cf 	.word	0x080093cf
 800915c:	080093cf 	.word	0x080093cf
 8009160:	080093cf 	.word	0x080093cf
 8009164:	080093cf 	.word	0x080093cf
 8009168:	0800916d 	.word	0x0800916d
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009172:	69db      	ldr	r3, [r3, #28]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00b      	beq.n	8009190 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800917e:	69db      	ldr	r3, [r3, #28]
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	7c12      	ldrb	r2, [r2, #16]
 8009184:	f107 0108 	add.w	r1, r7, #8
 8009188:	4610      	mov	r0, r2
 800918a:	4798      	blx	r3
 800918c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800918e:	e126      	b.n	80093de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 faf1 	bl	800977a <USBD_CtlError>
        err++;
 8009198:	7afb      	ldrb	r3, [r7, #11]
 800919a:	3301      	adds	r3, #1
 800919c:	72fb      	strb	r3, [r7, #11]
      break;
 800919e:	e11e      	b.n	80093de <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	7c12      	ldrb	r2, [r2, #16]
 80091ac:	f107 0108 	add.w	r1, r7, #8
 80091b0:	4610      	mov	r0, r2
 80091b2:	4798      	blx	r3
 80091b4:	60f8      	str	r0, [r7, #12]
      break;
 80091b6:	e112      	b.n	80093de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	7c1b      	ldrb	r3, [r3, #16]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d10d      	bne.n	80091dc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c8:	f107 0208 	add.w	r2, r7, #8
 80091cc:	4610      	mov	r0, r2
 80091ce:	4798      	blx	r3
 80091d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	3301      	adds	r3, #1
 80091d6:	2202      	movs	r2, #2
 80091d8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80091da:	e100      	b.n	80093de <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e4:	f107 0208 	add.w	r2, r7, #8
 80091e8:	4610      	mov	r0, r2
 80091ea:	4798      	blx	r3
 80091ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	3301      	adds	r3, #1
 80091f2:	2202      	movs	r2, #2
 80091f4:	701a      	strb	r2, [r3, #0]
      break;
 80091f6:	e0f2      	b.n	80093de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	885b      	ldrh	r3, [r3, #2]
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b05      	cmp	r3, #5
 8009200:	f200 80ac 	bhi.w	800935c <USBD_GetDescriptor+0x258>
 8009204:	a201      	add	r2, pc, #4	; (adr r2, 800920c <USBD_GetDescriptor+0x108>)
 8009206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800920a:	bf00      	nop
 800920c:	08009225 	.word	0x08009225
 8009210:	08009259 	.word	0x08009259
 8009214:	0800928d 	.word	0x0800928d
 8009218:	080092c1 	.word	0x080092c1
 800921c:	080092f5 	.word	0x080092f5
 8009220:	08009329 	.word	0x08009329
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00b      	beq.n	8009248 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	7c12      	ldrb	r2, [r2, #16]
 800923c:	f107 0108 	add.w	r1, r7, #8
 8009240:	4610      	mov	r0, r2
 8009242:	4798      	blx	r3
 8009244:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009246:	e091      	b.n	800936c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009248:	6839      	ldr	r1, [r7, #0]
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 fa95 	bl	800977a <USBD_CtlError>
            err++;
 8009250:	7afb      	ldrb	r3, [r7, #11]
 8009252:	3301      	adds	r3, #1
 8009254:	72fb      	strb	r3, [r7, #11]
          break;
 8009256:	e089      	b.n	800936c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d00b      	beq.n	800927c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	7c12      	ldrb	r2, [r2, #16]
 8009270:	f107 0108 	add.w	r1, r7, #8
 8009274:	4610      	mov	r0, r2
 8009276:	4798      	blx	r3
 8009278:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800927a:	e077      	b.n	800936c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800927c:	6839      	ldr	r1, [r7, #0]
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fa7b 	bl	800977a <USBD_CtlError>
            err++;
 8009284:	7afb      	ldrb	r3, [r7, #11]
 8009286:	3301      	adds	r3, #1
 8009288:	72fb      	strb	r3, [r7, #11]
          break;
 800928a:	e06f      	b.n	800936c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00b      	beq.n	80092b0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	7c12      	ldrb	r2, [r2, #16]
 80092a4:	f107 0108 	add.w	r1, r7, #8
 80092a8:	4610      	mov	r0, r2
 80092aa:	4798      	blx	r3
 80092ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092ae:	e05d      	b.n	800936c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80092b0:	6839      	ldr	r1, [r7, #0]
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 fa61 	bl	800977a <USBD_CtlError>
            err++;
 80092b8:	7afb      	ldrb	r3, [r7, #11]
 80092ba:	3301      	adds	r3, #1
 80092bc:	72fb      	strb	r3, [r7, #11]
          break;
 80092be:	e055      	b.n	800936c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00b      	beq.n	80092e4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	7c12      	ldrb	r2, [r2, #16]
 80092d8:	f107 0108 	add.w	r1, r7, #8
 80092dc:	4610      	mov	r0, r2
 80092de:	4798      	blx	r3
 80092e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092e2:	e043      	b.n	800936c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80092e4:	6839      	ldr	r1, [r7, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 fa47 	bl	800977a <USBD_CtlError>
            err++;
 80092ec:	7afb      	ldrb	r3, [r7, #11]
 80092ee:	3301      	adds	r3, #1
 80092f0:	72fb      	strb	r3, [r7, #11]
          break;
 80092f2:	e03b      	b.n	800936c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80092fa:	695b      	ldr	r3, [r3, #20]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00b      	beq.n	8009318 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009306:	695b      	ldr	r3, [r3, #20]
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	7c12      	ldrb	r2, [r2, #16]
 800930c:	f107 0108 	add.w	r1, r7, #8
 8009310:	4610      	mov	r0, r2
 8009312:	4798      	blx	r3
 8009314:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009316:	e029      	b.n	800936c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009318:	6839      	ldr	r1, [r7, #0]
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fa2d 	bl	800977a <USBD_CtlError>
            err++;
 8009320:	7afb      	ldrb	r3, [r7, #11]
 8009322:	3301      	adds	r3, #1
 8009324:	72fb      	strb	r3, [r7, #11]
          break;
 8009326:	e021      	b.n	800936c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800932e:	699b      	ldr	r3, [r3, #24]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00b      	beq.n	800934c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	7c12      	ldrb	r2, [r2, #16]
 8009340:	f107 0108 	add.w	r1, r7, #8
 8009344:	4610      	mov	r0, r2
 8009346:	4798      	blx	r3
 8009348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800934a:	e00f      	b.n	800936c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800934c:	6839      	ldr	r1, [r7, #0]
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 fa13 	bl	800977a <USBD_CtlError>
            err++;
 8009354:	7afb      	ldrb	r3, [r7, #11]
 8009356:	3301      	adds	r3, #1
 8009358:	72fb      	strb	r3, [r7, #11]
          break;
 800935a:	e007      	b.n	800936c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800935c:	6839      	ldr	r1, [r7, #0]
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 fa0b 	bl	800977a <USBD_CtlError>
          err++;
 8009364:	7afb      	ldrb	r3, [r7, #11]
 8009366:	3301      	adds	r3, #1
 8009368:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800936a:	e038      	b.n	80093de <USBD_GetDescriptor+0x2da>
 800936c:	e037      	b.n	80093de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	7c1b      	ldrb	r3, [r3, #16]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d109      	bne.n	800938a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800937c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800937e:	f107 0208 	add.w	r2, r7, #8
 8009382:	4610      	mov	r0, r2
 8009384:	4798      	blx	r3
 8009386:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009388:	e029      	b.n	80093de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800938a:	6839      	ldr	r1, [r7, #0]
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f9f4 	bl	800977a <USBD_CtlError>
        err++;
 8009392:	7afb      	ldrb	r3, [r7, #11]
 8009394:	3301      	adds	r3, #1
 8009396:	72fb      	strb	r3, [r7, #11]
      break;
 8009398:	e021      	b.n	80093de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	7c1b      	ldrb	r3, [r3, #16]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d10d      	bne.n	80093be <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093aa:	f107 0208 	add.w	r2, r7, #8
 80093ae:	4610      	mov	r0, r2
 80093b0:	4798      	blx	r3
 80093b2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	3301      	adds	r3, #1
 80093b8:	2207      	movs	r2, #7
 80093ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093bc:	e00f      	b.n	80093de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80093be:	6839      	ldr	r1, [r7, #0]
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 f9da 	bl	800977a <USBD_CtlError>
        err++;
 80093c6:	7afb      	ldrb	r3, [r7, #11]
 80093c8:	3301      	adds	r3, #1
 80093ca:	72fb      	strb	r3, [r7, #11]
      break;
 80093cc:	e007      	b.n	80093de <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80093ce:	6839      	ldr	r1, [r7, #0]
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f9d2 	bl	800977a <USBD_CtlError>
      err++;
 80093d6:	7afb      	ldrb	r3, [r7, #11]
 80093d8:	3301      	adds	r3, #1
 80093da:	72fb      	strb	r3, [r7, #11]
      break;
 80093dc:	bf00      	nop
  }

  if (err != 0U)
 80093de:	7afb      	ldrb	r3, [r7, #11]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d11c      	bne.n	800941e <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80093e4:	893b      	ldrh	r3, [r7, #8]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d011      	beq.n	800940e <USBD_GetDescriptor+0x30a>
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	88db      	ldrh	r3, [r3, #6]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00d      	beq.n	800940e <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	88da      	ldrh	r2, [r3, #6]
 80093f6:	893b      	ldrh	r3, [r7, #8]
 80093f8:	4293      	cmp	r3, r2
 80093fa:	bf28      	it	cs
 80093fc:	4613      	movcs	r3, r2
 80093fe:	b29b      	uxth	r3, r3
 8009400:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009402:	893b      	ldrh	r3, [r7, #8]
 8009404:	461a      	mov	r2, r3
 8009406:	68f9      	ldr	r1, [r7, #12]
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fa21 	bl	8009850 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	88db      	ldrh	r3, [r3, #6]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d104      	bne.n	8009420 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 fa78 	bl	800990c <USBD_CtlSendStatus>
 800941c:	e000      	b.n	8009420 <USBD_GetDescriptor+0x31c>
    return;
 800941e:	bf00      	nop
    }
  }
}
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop

08009428 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	889b      	ldrh	r3, [r3, #4]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d130      	bne.n	800949c <USBD_SetAddress+0x74>
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	88db      	ldrh	r3, [r3, #6]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d12c      	bne.n	800949c <USBD_SetAddress+0x74>
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	885b      	ldrh	r3, [r3, #2]
 8009446:	2b7f      	cmp	r3, #127	; 0x7f
 8009448:	d828      	bhi.n	800949c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	885b      	ldrh	r3, [r3, #2]
 800944e:	b2db      	uxtb	r3, r3
 8009450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009454:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800945c:	2b03      	cmp	r3, #3
 800945e:	d104      	bne.n	800946a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009460:	6839      	ldr	r1, [r7, #0]
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 f989 	bl	800977a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009468:	e01c      	b.n	80094a4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	7bfa      	ldrb	r2, [r7, #15]
 800946e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009472:	7bfb      	ldrb	r3, [r7, #15]
 8009474:	4619      	mov	r1, r3
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fefc 	bl	800a274 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fa45 	bl	800990c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009482:	7bfb      	ldrb	r3, [r7, #15]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d004      	beq.n	8009492 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2202      	movs	r2, #2
 800948c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009490:	e008      	b.n	80094a4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2201      	movs	r2, #1
 8009496:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800949a:	e003      	b.n	80094a4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800949c:	6839      	ldr	r1, [r7, #0]
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f96b 	bl	800977a <USBD_CtlError>
  }
}
 80094a4:	bf00      	nop
 80094a6:	3710      	adds	r7, #16
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	885b      	ldrh	r3, [r3, #2]
 80094ba:	b2da      	uxtb	r2, r3
 80094bc:	4b41      	ldr	r3, [pc, #260]	; (80095c4 <USBD_SetConfig+0x118>)
 80094be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80094c0:	4b40      	ldr	r3, [pc, #256]	; (80095c4 <USBD_SetConfig+0x118>)
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d904      	bls.n	80094d2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80094c8:	6839      	ldr	r1, [r7, #0]
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 f955 	bl	800977a <USBD_CtlError>
 80094d0:	e075      	b.n	80095be <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094d8:	2b02      	cmp	r3, #2
 80094da:	d002      	beq.n	80094e2 <USBD_SetConfig+0x36>
 80094dc:	2b03      	cmp	r3, #3
 80094de:	d023      	beq.n	8009528 <USBD_SetConfig+0x7c>
 80094e0:	e062      	b.n	80095a8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80094e2:	4b38      	ldr	r3, [pc, #224]	; (80095c4 <USBD_SetConfig+0x118>)
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d01a      	beq.n	8009520 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80094ea:	4b36      	ldr	r3, [pc, #216]	; (80095c4 <USBD_SetConfig+0x118>)
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	461a      	mov	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2203      	movs	r2, #3
 80094f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80094fc:	4b31      	ldr	r3, [pc, #196]	; (80095c4 <USBD_SetConfig+0x118>)
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	4619      	mov	r1, r3
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f7ff f9c6 	bl	8008894 <USBD_SetClassConfig>
 8009508:	4603      	mov	r3, r0
 800950a:	2b02      	cmp	r3, #2
 800950c:	d104      	bne.n	8009518 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800950e:	6839      	ldr	r1, [r7, #0]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 f932 	bl	800977a <USBD_CtlError>
            return;
 8009516:	e052      	b.n	80095be <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 f9f7 	bl	800990c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800951e:	e04e      	b.n	80095be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 f9f3 	bl	800990c <USBD_CtlSendStatus>
        break;
 8009526:	e04a      	b.n	80095be <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009528:	4b26      	ldr	r3, [pc, #152]	; (80095c4 <USBD_SetConfig+0x118>)
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d112      	bne.n	8009556 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2202      	movs	r2, #2
 8009534:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009538:	4b22      	ldr	r3, [pc, #136]	; (80095c4 <USBD_SetConfig+0x118>)
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	461a      	mov	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009542:	4b20      	ldr	r3, [pc, #128]	; (80095c4 <USBD_SetConfig+0x118>)
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	4619      	mov	r1, r3
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f7ff f9c2 	bl	80088d2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f9dc 	bl	800990c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009554:	e033      	b.n	80095be <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009556:	4b1b      	ldr	r3, [pc, #108]	; (80095c4 <USBD_SetConfig+0x118>)
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	461a      	mov	r2, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	429a      	cmp	r2, r3
 8009562:	d01d      	beq.n	80095a0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	b2db      	uxtb	r3, r3
 800956a:	4619      	mov	r1, r3
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f7ff f9b0 	bl	80088d2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009572:	4b14      	ldr	r3, [pc, #80]	; (80095c4 <USBD_SetConfig+0x118>)
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	461a      	mov	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800957c:	4b11      	ldr	r3, [pc, #68]	; (80095c4 <USBD_SetConfig+0x118>)
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	4619      	mov	r1, r3
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f7ff f986 	bl	8008894 <USBD_SetClassConfig>
 8009588:	4603      	mov	r3, r0
 800958a:	2b02      	cmp	r3, #2
 800958c:	d104      	bne.n	8009598 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800958e:	6839      	ldr	r1, [r7, #0]
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f8f2 	bl	800977a <USBD_CtlError>
            return;
 8009596:	e012      	b.n	80095be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 f9b7 	bl	800990c <USBD_CtlSendStatus>
        break;
 800959e:	e00e      	b.n	80095be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 f9b3 	bl	800990c <USBD_CtlSendStatus>
        break;
 80095a6:	e00a      	b.n	80095be <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80095a8:	6839      	ldr	r1, [r7, #0]
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 f8e5 	bl	800977a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80095b0:	4b04      	ldr	r3, [pc, #16]	; (80095c4 <USBD_SetConfig+0x118>)
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	4619      	mov	r1, r3
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f7ff f98b 	bl	80088d2 <USBD_ClrClassConfig>
        break;
 80095bc:	bf00      	nop
    }
  }
}
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	20000319 	.word	0x20000319

080095c8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	88db      	ldrh	r3, [r3, #6]
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d004      	beq.n	80095e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80095da:	6839      	ldr	r1, [r7, #0]
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 f8cc 	bl	800977a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80095e2:	e021      	b.n	8009628 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	db17      	blt.n	800961e <USBD_GetConfig+0x56>
 80095ee:	2b02      	cmp	r3, #2
 80095f0:	dd02      	ble.n	80095f8 <USBD_GetConfig+0x30>
 80095f2:	2b03      	cmp	r3, #3
 80095f4:	d00b      	beq.n	800960e <USBD_GetConfig+0x46>
 80095f6:	e012      	b.n	800961e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	3308      	adds	r3, #8
 8009602:	2201      	movs	r2, #1
 8009604:	4619      	mov	r1, r3
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 f922 	bl	8009850 <USBD_CtlSendData>
        break;
 800960c:	e00c      	b.n	8009628 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	3304      	adds	r3, #4
 8009612:	2201      	movs	r2, #1
 8009614:	4619      	mov	r1, r3
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f91a 	bl	8009850 <USBD_CtlSendData>
        break;
 800961c:	e004      	b.n	8009628 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800961e:	6839      	ldr	r1, [r7, #0]
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 f8aa 	bl	800977a <USBD_CtlError>
        break;
 8009626:	bf00      	nop
}
 8009628:	bf00      	nop
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009640:	3b01      	subs	r3, #1
 8009642:	2b02      	cmp	r3, #2
 8009644:	d81e      	bhi.n	8009684 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	88db      	ldrh	r3, [r3, #6]
 800964a:	2b02      	cmp	r3, #2
 800964c:	d004      	beq.n	8009658 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800964e:	6839      	ldr	r1, [r7, #0]
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 f892 	bl	800977a <USBD_CtlError>
        break;
 8009656:	e01a      	b.n	800968e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2201      	movs	r2, #1
 800965c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009664:	2b00      	cmp	r3, #0
 8009666:	d005      	beq.n	8009674 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	f043 0202 	orr.w	r2, r3, #2
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	330c      	adds	r3, #12
 8009678:	2202      	movs	r2, #2
 800967a:	4619      	mov	r1, r3
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 f8e7 	bl	8009850 <USBD_CtlSendData>
      break;
 8009682:	e004      	b.n	800968e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009684:	6839      	ldr	r1, [r7, #0]
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 f877 	bl	800977a <USBD_CtlError>
      break;
 800968c:	bf00      	nop
  }
}
 800968e:	bf00      	nop
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009696:	b580      	push	{r7, lr}
 8009698:	b082      	sub	sp, #8
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
 800969e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	885b      	ldrh	r3, [r3, #2]
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d106      	bne.n	80096b6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 f92b 	bl	800990c <USBD_CtlSendStatus>
  }
}
 80096b6:	bf00      	nop
 80096b8:	3708      	adds	r7, #8
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b082      	sub	sp, #8
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
 80096c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096ce:	3b01      	subs	r3, #1
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	d80b      	bhi.n	80096ec <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	885b      	ldrh	r3, [r3, #2]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d10c      	bne.n	80096f6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 f911 	bl	800990c <USBD_CtlSendStatus>
      }
      break;
 80096ea:	e004      	b.n	80096f6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80096ec:	6839      	ldr	r1, [r7, #0]
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f843 	bl	800977a <USBD_CtlError>
      break;
 80096f4:	e000      	b.n	80096f8 <USBD_ClrFeature+0x3a>
      break;
 80096f6:	bf00      	nop
  }
}
 80096f8:	bf00      	nop
 80096fa:	3708      	adds	r7, #8
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	781a      	ldrb	r2, [r3, #0]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	785a      	ldrb	r2, [r3, #1]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	3302      	adds	r3, #2
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	b29a      	uxth	r2, r3
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	3303      	adds	r3, #3
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	b29b      	uxth	r3, r3
 800972a:	021b      	lsls	r3, r3, #8
 800972c:	b29b      	uxth	r3, r3
 800972e:	4413      	add	r3, r2
 8009730:	b29a      	uxth	r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	3304      	adds	r3, #4
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	b29a      	uxth	r2, r3
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	3305      	adds	r3, #5
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	b29b      	uxth	r3, r3
 8009746:	021b      	lsls	r3, r3, #8
 8009748:	b29b      	uxth	r3, r3
 800974a:	4413      	add	r3, r2
 800974c:	b29a      	uxth	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	3306      	adds	r3, #6
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	b29a      	uxth	r2, r3
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	3307      	adds	r3, #7
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	b29b      	uxth	r3, r3
 8009762:	021b      	lsls	r3, r3, #8
 8009764:	b29b      	uxth	r3, r3
 8009766:	4413      	add	r3, r2
 8009768:	b29a      	uxth	r2, r3
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	80da      	strh	r2, [r3, #6]

}
 800976e:	bf00      	nop
 8009770:	370c      	adds	r7, #12
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b082      	sub	sp, #8
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
 8009782:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009784:	2180      	movs	r1, #128	; 0x80
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 fce2 	bl	800a150 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800978c:	2100      	movs	r1, #0
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 fcde 	bl	800a150 <USBD_LL_StallEP>
}
 8009794:	bf00      	nop
 8009796:	3708      	adds	r7, #8
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b086      	sub	sp, #24
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80097a8:	2300      	movs	r3, #0
 80097aa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d032      	beq.n	8009818 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f000 f834 	bl	8009820 <USBD_GetLen>
 80097b8:	4603      	mov	r3, r0
 80097ba:	3301      	adds	r3, #1
 80097bc:	b29b      	uxth	r3, r3
 80097be:	005b      	lsls	r3, r3, #1
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80097c6:	7dfb      	ldrb	r3, [r7, #23]
 80097c8:	1c5a      	adds	r2, r3, #1
 80097ca:	75fa      	strb	r2, [r7, #23]
 80097cc:	461a      	mov	r2, r3
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	4413      	add	r3, r2
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	7812      	ldrb	r2, [r2, #0]
 80097d6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80097d8:	7dfb      	ldrb	r3, [r7, #23]
 80097da:	1c5a      	adds	r2, r3, #1
 80097dc:	75fa      	strb	r2, [r7, #23]
 80097de:	461a      	mov	r2, r3
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	4413      	add	r3, r2
 80097e4:	2203      	movs	r2, #3
 80097e6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80097e8:	e012      	b.n	8009810 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	1c5a      	adds	r2, r3, #1
 80097ee:	60fa      	str	r2, [r7, #12]
 80097f0:	7dfa      	ldrb	r2, [r7, #23]
 80097f2:	1c51      	adds	r1, r2, #1
 80097f4:	75f9      	strb	r1, [r7, #23]
 80097f6:	4611      	mov	r1, r2
 80097f8:	68ba      	ldr	r2, [r7, #8]
 80097fa:	440a      	add	r2, r1
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009800:	7dfb      	ldrb	r3, [r7, #23]
 8009802:	1c5a      	adds	r2, r3, #1
 8009804:	75fa      	strb	r2, [r7, #23]
 8009806:	461a      	mov	r2, r3
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	4413      	add	r3, r2
 800980c:	2200      	movs	r2, #0
 800980e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d1e8      	bne.n	80097ea <USBD_GetString+0x4e>
    }
  }
}
 8009818:	bf00      	nop
 800981a:	3718      	adds	r7, #24
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009828:	2300      	movs	r3, #0
 800982a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800982c:	e005      	b.n	800983a <USBD_GetLen+0x1a>
  {
    len++;
 800982e:	7bfb      	ldrb	r3, [r7, #15]
 8009830:	3301      	adds	r3, #1
 8009832:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	3301      	adds	r3, #1
 8009838:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d1f5      	bne.n	800982e <USBD_GetLen+0xe>
  }

  return len;
 8009842:	7bfb      	ldrb	r3, [r7, #15]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3714      	adds	r7, #20
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	4613      	mov	r3, r2
 800985c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2202      	movs	r2, #2
 8009862:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009866:	88fa      	ldrh	r2, [r7, #6]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800986c:	88fa      	ldrh	r2, [r7, #6]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009872:	88fb      	ldrh	r3, [r7, #6]
 8009874:	68ba      	ldr	r2, [r7, #8]
 8009876:	2100      	movs	r1, #0
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	f000 fd31 	bl	800a2e0 <USBD_LL_Transmit>

  return USBD_OK;
 800987e:	2300      	movs	r3, #0
}
 8009880:	4618      	mov	r0, r3
 8009882:	3710      	adds	r7, #16
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	4613      	mov	r3, r2
 8009894:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009896:	88fb      	ldrh	r3, [r7, #6]
 8009898:	68ba      	ldr	r2, [r7, #8]
 800989a:	2100      	movs	r1, #0
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f000 fd1f 	bl	800a2e0 <USBD_LL_Transmit>

  return USBD_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3710      	adds	r7, #16
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	4613      	mov	r3, r2
 80098b8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2203      	movs	r2, #3
 80098be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80098c2:	88fa      	ldrh	r2, [r7, #6]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80098ca:	88fa      	ldrh	r2, [r7, #6]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80098d2:	88fb      	ldrh	r3, [r7, #6]
 80098d4:	68ba      	ldr	r2, [r7, #8]
 80098d6:	2100      	movs	r1, #0
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f000 fd3b 	bl	800a354 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	4613      	mov	r3, r2
 80098f4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80098f6:	88fb      	ldrh	r3, [r7, #6]
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	2100      	movs	r1, #0
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	f000 fd29 	bl	800a354 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009902:	2300      	movs	r3, #0
}
 8009904:	4618      	mov	r0, r3
 8009906:	3710      	adds	r7, #16
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2204      	movs	r2, #4
 8009918:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800991c:	2300      	movs	r3, #0
 800991e:	2200      	movs	r2, #0
 8009920:	2100      	movs	r1, #0
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 fcdc 	bl	800a2e0 <USBD_LL_Transmit>

  return USBD_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3708      	adds	r7, #8
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b082      	sub	sp, #8
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2205      	movs	r2, #5
 800993e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009942:	2300      	movs	r3, #0
 8009944:	2200      	movs	r2, #0
 8009946:	2100      	movs	r1, #0
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 fd03 	bl	800a354 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800994e:	2300      	movs	r3, #0
}
 8009950:	4618      	mov	r0, r3
 8009952:	3708      	adds	r7, #8
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800995c:	2200      	movs	r2, #0
 800995e:	4912      	ldr	r1, [pc, #72]	; (80099a8 <MX_USB_DEVICE_Init+0x50>)
 8009960:	4812      	ldr	r0, [pc, #72]	; (80099ac <MX_USB_DEVICE_Init+0x54>)
 8009962:	f7fe ff3b 	bl	80087dc <USBD_Init>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d001      	beq.n	8009970 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800996c:	f7f8 f91a 	bl	8001ba4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009970:	490f      	ldr	r1, [pc, #60]	; (80099b0 <MX_USB_DEVICE_Init+0x58>)
 8009972:	480e      	ldr	r0, [pc, #56]	; (80099ac <MX_USB_DEVICE_Init+0x54>)
 8009974:	f7fe ff5d 	bl	8008832 <USBD_RegisterClass>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d001      	beq.n	8009982 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800997e:	f7f8 f911 	bl	8001ba4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009982:	490c      	ldr	r1, [pc, #48]	; (80099b4 <MX_USB_DEVICE_Init+0x5c>)
 8009984:	4809      	ldr	r0, [pc, #36]	; (80099ac <MX_USB_DEVICE_Init+0x54>)
 8009986:	f7fe fe8b 	bl	80086a0 <USBD_CDC_RegisterInterface>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d001      	beq.n	8009994 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009990:	f7f8 f908 	bl	8001ba4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009994:	4805      	ldr	r0, [pc, #20]	; (80099ac <MX_USB_DEVICE_Init+0x54>)
 8009996:	f7fe ff66 	bl	8008866 <USBD_Start>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d001      	beq.n	80099a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80099a0:	f7f8 f900 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80099a4:	bf00      	nop
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	2000012c 	.word	0x2000012c
 80099ac:	20000670 	.word	0x20000670
 80099b0:	20000018 	.word	0x20000018
 80099b4:	2000011c 	.word	0x2000011c

080099b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80099bc:	2200      	movs	r2, #0
 80099be:	4905      	ldr	r1, [pc, #20]	; (80099d4 <CDC_Init_FS+0x1c>)
 80099c0:	4805      	ldr	r0, [pc, #20]	; (80099d8 <CDC_Init_FS+0x20>)
 80099c2:	f7fe fe84 	bl	80086ce <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80099c6:	4905      	ldr	r1, [pc, #20]	; (80099dc <CDC_Init_FS+0x24>)
 80099c8:	4803      	ldr	r0, [pc, #12]	; (80099d8 <CDC_Init_FS+0x20>)
 80099ca:	f7fe fe9a 	bl	8008702 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80099ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	20000d1c 	.word	0x20000d1c
 80099d8:	20000670 	.word	0x20000670
 80099dc:	20000934 	.word	0x20000934

080099e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80099e0:	b480      	push	{r7}
 80099e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80099e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	4603      	mov	r3, r0
 80099f8:	6039      	str	r1, [r7, #0]
 80099fa:	71fb      	strb	r3, [r7, #7]
 80099fc:	4613      	mov	r3, r2
 80099fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009a00:	79fb      	ldrb	r3, [r7, #7]
 8009a02:	2b23      	cmp	r3, #35	; 0x23
 8009a04:	d84a      	bhi.n	8009a9c <CDC_Control_FS+0xac>
 8009a06:	a201      	add	r2, pc, #4	; (adr r2, 8009a0c <CDC_Control_FS+0x1c>)
 8009a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a0c:	08009a9d 	.word	0x08009a9d
 8009a10:	08009a9d 	.word	0x08009a9d
 8009a14:	08009a9d 	.word	0x08009a9d
 8009a18:	08009a9d 	.word	0x08009a9d
 8009a1c:	08009a9d 	.word	0x08009a9d
 8009a20:	08009a9d 	.word	0x08009a9d
 8009a24:	08009a9d 	.word	0x08009a9d
 8009a28:	08009a9d 	.word	0x08009a9d
 8009a2c:	08009a9d 	.word	0x08009a9d
 8009a30:	08009a9d 	.word	0x08009a9d
 8009a34:	08009a9d 	.word	0x08009a9d
 8009a38:	08009a9d 	.word	0x08009a9d
 8009a3c:	08009a9d 	.word	0x08009a9d
 8009a40:	08009a9d 	.word	0x08009a9d
 8009a44:	08009a9d 	.word	0x08009a9d
 8009a48:	08009a9d 	.word	0x08009a9d
 8009a4c:	08009a9d 	.word	0x08009a9d
 8009a50:	08009a9d 	.word	0x08009a9d
 8009a54:	08009a9d 	.word	0x08009a9d
 8009a58:	08009a9d 	.word	0x08009a9d
 8009a5c:	08009a9d 	.word	0x08009a9d
 8009a60:	08009a9d 	.word	0x08009a9d
 8009a64:	08009a9d 	.word	0x08009a9d
 8009a68:	08009a9d 	.word	0x08009a9d
 8009a6c:	08009a9d 	.word	0x08009a9d
 8009a70:	08009a9d 	.word	0x08009a9d
 8009a74:	08009a9d 	.word	0x08009a9d
 8009a78:	08009a9d 	.word	0x08009a9d
 8009a7c:	08009a9d 	.word	0x08009a9d
 8009a80:	08009a9d 	.word	0x08009a9d
 8009a84:	08009a9d 	.word	0x08009a9d
 8009a88:	08009a9d 	.word	0x08009a9d
 8009a8c:	08009a9d 	.word	0x08009a9d
 8009a90:	08009a9d 	.word	0x08009a9d
 8009a94:	08009a9d 	.word	0x08009a9d
 8009a98:	08009a9d 	.word	0x08009a9d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009a9c:	bf00      	nop
  }

  return (USBD_OK);
 8009a9e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr

08009aac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009ab6:	6879      	ldr	r1, [r7, #4]
 8009ab8:	4805      	ldr	r0, [pc, #20]	; (8009ad0 <CDC_Receive_FS+0x24>)
 8009aba:	f7fe fe22 	bl	8008702 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009abe:	4804      	ldr	r0, [pc, #16]	; (8009ad0 <CDC_Receive_FS+0x24>)
 8009ac0:	f7fe fe62 	bl	8008788 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009ac4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3708      	adds	r7, #8
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	20000670 	.word	0x20000670

08009ad4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	460b      	mov	r3, r1
 8009ade:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009ae4:	4b0d      	ldr	r3, [pc, #52]	; (8009b1c <CDC_Transmit_FS+0x48>)
 8009ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d001      	beq.n	8009afa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009af6:	2301      	movs	r3, #1
 8009af8:	e00b      	b.n	8009b12 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009afa:	887b      	ldrh	r3, [r7, #2]
 8009afc:	461a      	mov	r2, r3
 8009afe:	6879      	ldr	r1, [r7, #4]
 8009b00:	4806      	ldr	r0, [pc, #24]	; (8009b1c <CDC_Transmit_FS+0x48>)
 8009b02:	f7fe fde4 	bl	80086ce <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009b06:	4805      	ldr	r0, [pc, #20]	; (8009b1c <CDC_Transmit_FS+0x48>)
 8009b08:	f7fe fe0f 	bl	800872a <USBD_CDC_TransmitPacket>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3710      	adds	r7, #16
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	20000670 	.word	0x20000670

08009b20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b083      	sub	sp, #12
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	4603      	mov	r3, r0
 8009b28:	6039      	str	r1, [r7, #0]
 8009b2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	2212      	movs	r2, #18
 8009b30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009b32:	4b03      	ldr	r3, [pc, #12]	; (8009b40 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr
 8009b40:	2000014c 	.word	0x2000014c

08009b44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	6039      	str	r1, [r7, #0]
 8009b4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	2204      	movs	r2, #4
 8009b54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009b56:	4b03      	ldr	r3, [pc, #12]	; (8009b64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr
 8009b64:	2000016c 	.word	0x2000016c

08009b68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	4603      	mov	r3, r0
 8009b70:	6039      	str	r1, [r7, #0]
 8009b72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b74:	79fb      	ldrb	r3, [r7, #7]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d105      	bne.n	8009b86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b7a:	683a      	ldr	r2, [r7, #0]
 8009b7c:	4907      	ldr	r1, [pc, #28]	; (8009b9c <USBD_FS_ProductStrDescriptor+0x34>)
 8009b7e:	4808      	ldr	r0, [pc, #32]	; (8009ba0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009b80:	f7ff fe0c 	bl	800979c <USBD_GetString>
 8009b84:	e004      	b.n	8009b90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b86:	683a      	ldr	r2, [r7, #0]
 8009b88:	4904      	ldr	r1, [pc, #16]	; (8009b9c <USBD_FS_ProductStrDescriptor+0x34>)
 8009b8a:	4805      	ldr	r0, [pc, #20]	; (8009ba0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009b8c:	f7ff fe06 	bl	800979c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b90:	4b02      	ldr	r3, [pc, #8]	; (8009b9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	20001104 	.word	0x20001104
 8009ba0:	0800a538 	.word	0x0800a538

08009ba4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	4603      	mov	r3, r0
 8009bac:	6039      	str	r1, [r7, #0]
 8009bae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009bb0:	683a      	ldr	r2, [r7, #0]
 8009bb2:	4904      	ldr	r1, [pc, #16]	; (8009bc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009bb4:	4804      	ldr	r0, [pc, #16]	; (8009bc8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009bb6:	f7ff fdf1 	bl	800979c <USBD_GetString>
  return USBD_StrDesc;
 8009bba:	4b02      	ldr	r3, [pc, #8]	; (8009bc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	20001104 	.word	0x20001104
 8009bc8:	0800a550 	.word	0x0800a550

08009bcc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	6039      	str	r1, [r7, #0]
 8009bd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	221a      	movs	r2, #26
 8009bdc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009bde:	f000 f855 	bl	8009c8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009be2:	4b02      	ldr	r3, [pc, #8]	; (8009bec <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3708      	adds	r7, #8
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	20000170 	.word	0x20000170

08009bf0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	6039      	str	r1, [r7, #0]
 8009bfa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009bfc:	79fb      	ldrb	r3, [r7, #7]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d105      	bne.n	8009c0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	4907      	ldr	r1, [pc, #28]	; (8009c24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c06:	4808      	ldr	r0, [pc, #32]	; (8009c28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c08:	f7ff fdc8 	bl	800979c <USBD_GetString>
 8009c0c:	e004      	b.n	8009c18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c0e:	683a      	ldr	r2, [r7, #0]
 8009c10:	4904      	ldr	r1, [pc, #16]	; (8009c24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c12:	4805      	ldr	r0, [pc, #20]	; (8009c28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c14:	f7ff fdc2 	bl	800979c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c18:	4b02      	ldr	r3, [pc, #8]	; (8009c24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3708      	adds	r7, #8
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	20001104 	.word	0x20001104
 8009c28:	0800a564 	.word	0x0800a564

08009c2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	4603      	mov	r3, r0
 8009c34:	6039      	str	r1, [r7, #0]
 8009c36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c38:	79fb      	ldrb	r3, [r7, #7]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d105      	bne.n	8009c4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c3e:	683a      	ldr	r2, [r7, #0]
 8009c40:	4907      	ldr	r1, [pc, #28]	; (8009c60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c42:	4808      	ldr	r0, [pc, #32]	; (8009c64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c44:	f7ff fdaa 	bl	800979c <USBD_GetString>
 8009c48:	e004      	b.n	8009c54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c4a:	683a      	ldr	r2, [r7, #0]
 8009c4c:	4904      	ldr	r1, [pc, #16]	; (8009c60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c4e:	4805      	ldr	r0, [pc, #20]	; (8009c64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c50:	f7ff fda4 	bl	800979c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c54:	4b02      	ldr	r3, [pc, #8]	; (8009c60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3708      	adds	r7, #8
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	20001104 	.word	0x20001104
 8009c64:	0800a570 	.word	0x0800a570

08009c68 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	4603      	mov	r3, r0
 8009c70:	6039      	str	r1, [r7, #0]
 8009c72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	220c      	movs	r2, #12
 8009c78:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009c7a:	4b03      	ldr	r3, [pc, #12]	; (8009c88 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr
 8009c88:	20000160 	.word	0x20000160

08009c8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009c92:	4b0f      	ldr	r3, [pc, #60]	; (8009cd0 <Get_SerialNum+0x44>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009c98:	4b0e      	ldr	r3, [pc, #56]	; (8009cd4 <Get_SerialNum+0x48>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009c9e:	4b0e      	ldr	r3, [pc, #56]	; (8009cd8 <Get_SerialNum+0x4c>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009ca4:	68fa      	ldr	r2, [r7, #12]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4413      	add	r3, r2
 8009caa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d009      	beq.n	8009cc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009cb2:	2208      	movs	r2, #8
 8009cb4:	4909      	ldr	r1, [pc, #36]	; (8009cdc <Get_SerialNum+0x50>)
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f000 f814 	bl	8009ce4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009cbc:	2204      	movs	r2, #4
 8009cbe:	4908      	ldr	r1, [pc, #32]	; (8009ce0 <Get_SerialNum+0x54>)
 8009cc0:	68b8      	ldr	r0, [r7, #8]
 8009cc2:	f000 f80f 	bl	8009ce4 <IntToUnicode>
  }
}
 8009cc6:	bf00      	nop
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	1fff7590 	.word	0x1fff7590
 8009cd4:	1fff7594 	.word	0x1fff7594
 8009cd8:	1fff7598 	.word	0x1fff7598
 8009cdc:	20000172 	.word	0x20000172
 8009ce0:	20000182 	.word	0x20000182

08009ce4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b087      	sub	sp, #28
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	60b9      	str	r1, [r7, #8]
 8009cee:	4613      	mov	r3, r2
 8009cf0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	75fb      	strb	r3, [r7, #23]
 8009cfa:	e027      	b.n	8009d4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	0f1b      	lsrs	r3, r3, #28
 8009d00:	2b09      	cmp	r3, #9
 8009d02:	d80b      	bhi.n	8009d1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	0f1b      	lsrs	r3, r3, #28
 8009d08:	b2da      	uxtb	r2, r3
 8009d0a:	7dfb      	ldrb	r3, [r7, #23]
 8009d0c:	005b      	lsls	r3, r3, #1
 8009d0e:	4619      	mov	r1, r3
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	440b      	add	r3, r1
 8009d14:	3230      	adds	r2, #48	; 0x30
 8009d16:	b2d2      	uxtb	r2, r2
 8009d18:	701a      	strb	r2, [r3, #0]
 8009d1a:	e00a      	b.n	8009d32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	0f1b      	lsrs	r3, r3, #28
 8009d20:	b2da      	uxtb	r2, r3
 8009d22:	7dfb      	ldrb	r3, [r7, #23]
 8009d24:	005b      	lsls	r3, r3, #1
 8009d26:	4619      	mov	r1, r3
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	440b      	add	r3, r1
 8009d2c:	3237      	adds	r2, #55	; 0x37
 8009d2e:	b2d2      	uxtb	r2, r2
 8009d30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	011b      	lsls	r3, r3, #4
 8009d36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d38:	7dfb      	ldrb	r3, [r7, #23]
 8009d3a:	005b      	lsls	r3, r3, #1
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	68ba      	ldr	r2, [r7, #8]
 8009d40:	4413      	add	r3, r2
 8009d42:	2200      	movs	r2, #0
 8009d44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d46:	7dfb      	ldrb	r3, [r7, #23]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	75fb      	strb	r3, [r7, #23]
 8009d4c:	7dfa      	ldrb	r2, [r7, #23]
 8009d4e:	79fb      	ldrb	r3, [r7, #7]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d3d3      	bcc.n	8009cfc <IntToUnicode+0x18>
  }
}
 8009d54:	bf00      	nop
 8009d56:	371c      	adds	r7, #28
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b08a      	sub	sp, #40	; 0x28
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d68:	f107 0314 	add.w	r3, r7, #20
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	601a      	str	r2, [r3, #0]
 8009d70:	605a      	str	r2, [r3, #4]
 8009d72:	609a      	str	r2, [r3, #8]
 8009d74:	60da      	str	r2, [r3, #12]
 8009d76:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a1c      	ldr	r2, [pc, #112]	; (8009df0 <HAL_PCD_MspInit+0x90>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d131      	bne.n	8009de6 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d82:	4b1c      	ldr	r3, [pc, #112]	; (8009df4 <HAL_PCD_MspInit+0x94>)
 8009d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d86:	4a1b      	ldr	r2, [pc, #108]	; (8009df4 <HAL_PCD_MspInit+0x94>)
 8009d88:	f043 0301 	orr.w	r3, r3, #1
 8009d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d8e:	4b19      	ldr	r3, [pc, #100]	; (8009df4 <HAL_PCD_MspInit+0x94>)
 8009d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d92:	f003 0301 	and.w	r3, r3, #1
 8009d96:	613b      	str	r3, [r7, #16]
 8009d98:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009d9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009da0:	2302      	movs	r3, #2
 8009da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009da4:	2300      	movs	r3, #0
 8009da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009da8:	2303      	movs	r3, #3
 8009daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 8009dac:	230a      	movs	r3, #10
 8009dae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009db0:	f107 0314 	add.w	r3, r7, #20
 8009db4:	4619      	mov	r1, r3
 8009db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009dba:	f7f8 fabd 	bl	8002338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009dbe:	4b0d      	ldr	r3, [pc, #52]	; (8009df4 <HAL_PCD_MspInit+0x94>)
 8009dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dc2:	4a0c      	ldr	r2, [pc, #48]	; (8009df4 <HAL_PCD_MspInit+0x94>)
 8009dc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009dc8:	6593      	str	r3, [r2, #88]	; 0x58
 8009dca:	4b0a      	ldr	r3, [pc, #40]	; (8009df4 <HAL_PCD_MspInit+0x94>)
 8009dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009dd2:	60fb      	str	r3, [r7, #12]
 8009dd4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	2100      	movs	r1, #0
 8009dda:	2043      	movs	r0, #67	; 0x43
 8009ddc:	f7f8 fa35 	bl	800224a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8009de0:	2043      	movs	r0, #67	; 0x43
 8009de2:	f7f8 fa4e 	bl	8002282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009de6:	bf00      	nop
 8009de8:	3728      	adds	r7, #40	; 0x28
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	40006800 	.word	0x40006800
 8009df4:	40021000 	.word	0x40021000

08009df8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	4610      	mov	r0, r2
 8009e10:	f7fe fd72 	bl	80088f8 <USBD_LL_SetupStage>
}
 8009e14:	bf00      	nop
 8009e16:	3708      	adds	r7, #8
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	460b      	mov	r3, r1
 8009e26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8009e2e:	78fb      	ldrb	r3, [r7, #3]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	015b      	lsls	r3, r3, #5
 8009e34:	4413      	add	r3, r2
 8009e36:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	78fb      	ldrb	r3, [r7, #3]
 8009e3e:	4619      	mov	r1, r3
 8009e40:	f7fe fda5 	bl	800898e <USBD_LL_DataOutStage>
}
 8009e44:	bf00      	nop
 8009e46:	3708      	adds	r7, #8
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	460b      	mov	r3, r1
 8009e56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8009e5e:	78fb      	ldrb	r3, [r7, #3]
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	015b      	lsls	r3, r3, #5
 8009e64:	4413      	add	r3, r2
 8009e66:	333c      	adds	r3, #60	; 0x3c
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	78fb      	ldrb	r3, [r7, #3]
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	f7fe fdff 	bl	8008a70 <USBD_LL_DataInStage>
}
 8009e72:	bf00      	nop
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b082      	sub	sp, #8
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7fe ff12 	bl	8008cb2 <USBD_LL_SOF>
}
 8009e8e:	bf00      	nop
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b084      	sub	sp, #16
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d001      	beq.n	8009eae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009eaa:	f7f7 fe7b 	bl	8001ba4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009eb4:	7bfa      	ldrb	r2, [r7, #15]
 8009eb6:	4611      	mov	r1, r2
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7fe febf 	bl	8008c3c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7fe fe78 	bl	8008bba <USBD_LL_Reset>
}
 8009eca:	bf00      	nop
 8009ecc:	3710      	adds	r7, #16
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
	...

08009ed4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7fe feba 	bl	8008c5c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	699b      	ldr	r3, [r3, #24]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d005      	beq.n	8009efc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ef0:	4b04      	ldr	r3, [pc, #16]	; (8009f04 <HAL_PCD_SuspendCallback+0x30>)
 8009ef2:	691b      	ldr	r3, [r3, #16]
 8009ef4:	4a03      	ldr	r2, [pc, #12]	; (8009f04 <HAL_PCD_SuspendCallback+0x30>)
 8009ef6:	f043 0306 	orr.w	r3, r3, #6
 8009efa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009efc:	bf00      	nop
 8009efe:	3708      	adds	r7, #8
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	e000ed00 	.word	0xe000ed00

08009f08 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	699b      	ldr	r3, [r3, #24]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d007      	beq.n	8009f28 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f18:	4b08      	ldr	r3, [pc, #32]	; (8009f3c <HAL_PCD_ResumeCallback+0x34>)
 8009f1a:	691b      	ldr	r3, [r3, #16]
 8009f1c:	4a07      	ldr	r2, [pc, #28]	; (8009f3c <HAL_PCD_ResumeCallback+0x34>)
 8009f1e:	f023 0306 	bic.w	r3, r3, #6
 8009f22:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009f24:	f000 fab2 	bl	800a48c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7fe fea9 	bl	8008c86 <USBD_LL_Resume>
}
 8009f34:	bf00      	nop
 8009f36:	3708      	adds	r7, #8
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	e000ed00 	.word	0xe000ed00

08009f40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8009f48:	f7fa f99e 	bl	8004288 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009f4c:	4a2b      	ldr	r2, [pc, #172]	; (8009ffc <USBD_LL_Init+0xbc>)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  pdev->pData = &hpcd_USB_FS;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	4a29      	ldr	r2, [pc, #164]	; (8009ffc <USBD_LL_Init+0xbc>)
 8009f58:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009f5c:	4b27      	ldr	r3, [pc, #156]	; (8009ffc <USBD_LL_Init+0xbc>)
 8009f5e:	4a28      	ldr	r2, [pc, #160]	; (800a000 <USBD_LL_Init+0xc0>)
 8009f60:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009f62:	4b26      	ldr	r3, [pc, #152]	; (8009ffc <USBD_LL_Init+0xbc>)
 8009f64:	2208      	movs	r2, #8
 8009f66:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009f68:	4b24      	ldr	r3, [pc, #144]	; (8009ffc <USBD_LL_Init+0xbc>)
 8009f6a:	2202      	movs	r2, #2
 8009f6c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009f6e:	4b23      	ldr	r3, [pc, #140]	; (8009ffc <USBD_LL_Init+0xbc>)
 8009f70:	2202      	movs	r2, #2
 8009f72:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009f74:	4b21      	ldr	r3, [pc, #132]	; (8009ffc <USBD_LL_Init+0xbc>)
 8009f76:	2200      	movs	r2, #0
 8009f78:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009f7a:	4b20      	ldr	r3, [pc, #128]	; (8009ffc <USBD_LL_Init+0xbc>)
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009f80:	4b1e      	ldr	r3, [pc, #120]	; (8009ffc <USBD_LL_Init+0xbc>)
 8009f82:	2200      	movs	r2, #0
 8009f84:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009f86:	4b1d      	ldr	r3, [pc, #116]	; (8009ffc <USBD_LL_Init+0xbc>)
 8009f88:	2200      	movs	r2, #0
 8009f8a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009f8c:	481b      	ldr	r0, [pc, #108]	; (8009ffc <USBD_LL_Init+0xbc>)
 8009f8e:	f7f9 f9d4 	bl	800333a <HAL_PCD_Init>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d001      	beq.n	8009f9c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8009f98:	f7f7 fe04 	bl	8001ba4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009fa2:	2318      	movs	r3, #24
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	f7fa f8a2 	bl	80040f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009fb2:	2358      	movs	r3, #88	; 0x58
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	2180      	movs	r1, #128	; 0x80
 8009fb8:	f7fa f89a 	bl	80040f0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009fc2:	23c0      	movs	r3, #192	; 0xc0
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	2181      	movs	r1, #129	; 0x81
 8009fc8:	f7fa f892 	bl	80040f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009fd2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	2101      	movs	r1, #1
 8009fda:	f7fa f889 	bl	80040f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009fe4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fe8:	2200      	movs	r2, #0
 8009fea:	2182      	movs	r1, #130	; 0x82
 8009fec:	f7fa f880 	bl	80040f0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	20001304 	.word	0x20001304
 800a000:	40006800 	.word	0x40006800

0800a004 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a00c:	2300      	movs	r3, #0
 800a00e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a010:	2300      	movs	r3, #0
 800a012:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7f9 fa75 	bl	800350a <HAL_PCD_Start>
 800a020:	4603      	mov	r3, r0
 800a022:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800a024:	7bbb      	ldrb	r3, [r7, #14]
 800a026:	2b03      	cmp	r3, #3
 800a028:	d816      	bhi.n	800a058 <USBD_LL_Start+0x54>
 800a02a:	a201      	add	r2, pc, #4	; (adr r2, 800a030 <USBD_LL_Start+0x2c>)
 800a02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a030:	0800a041 	.word	0x0800a041
 800a034:	0800a047 	.word	0x0800a047
 800a038:	0800a04d 	.word	0x0800a04d
 800a03c:	0800a053 	.word	0x0800a053
    case HAL_OK :
      usb_status = USBD_OK;
 800a040:	2300      	movs	r3, #0
 800a042:	73fb      	strb	r3, [r7, #15]
    break;
 800a044:	e00b      	b.n	800a05e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a046:	2302      	movs	r3, #2
 800a048:	73fb      	strb	r3, [r7, #15]
    break;
 800a04a:	e008      	b.n	800a05e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a04c:	2301      	movs	r3, #1
 800a04e:	73fb      	strb	r3, [r7, #15]
    break;
 800a050:	e005      	b.n	800a05e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a052:	2302      	movs	r3, #2
 800a054:	73fb      	strb	r3, [r7, #15]
    break;
 800a056:	e002      	b.n	800a05e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800a058:	2302      	movs	r3, #2
 800a05a:	73fb      	strb	r3, [r7, #15]
    break;
 800a05c:	bf00      	nop
  }
  return usb_status;
 800a05e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a060:	4618      	mov	r0, r3
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	4608      	mov	r0, r1
 800a072:	4611      	mov	r1, r2
 800a074:	461a      	mov	r2, r3
 800a076:	4603      	mov	r3, r0
 800a078:	70fb      	strb	r3, [r7, #3]
 800a07a:	460b      	mov	r3, r1
 800a07c:	70bb      	strb	r3, [r7, #2]
 800a07e:	4613      	mov	r3, r2
 800a080:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a082:	2300      	movs	r3, #0
 800a084:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a086:	2300      	movs	r3, #0
 800a088:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a090:	78bb      	ldrb	r3, [r7, #2]
 800a092:	883a      	ldrh	r2, [r7, #0]
 800a094:	78f9      	ldrb	r1, [r7, #3]
 800a096:	f7f9 fbcd 	bl	8003834 <HAL_PCD_EP_Open>
 800a09a:	4603      	mov	r3, r0
 800a09c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a09e:	7bbb      	ldrb	r3, [r7, #14]
 800a0a0:	2b03      	cmp	r3, #3
 800a0a2:	d817      	bhi.n	800a0d4 <USBD_LL_OpenEP+0x6c>
 800a0a4:	a201      	add	r2, pc, #4	; (adr r2, 800a0ac <USBD_LL_OpenEP+0x44>)
 800a0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0aa:	bf00      	nop
 800a0ac:	0800a0bd 	.word	0x0800a0bd
 800a0b0:	0800a0c3 	.word	0x0800a0c3
 800a0b4:	0800a0c9 	.word	0x0800a0c9
 800a0b8:	0800a0cf 	.word	0x0800a0cf
    case HAL_OK :
      usb_status = USBD_OK;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	73fb      	strb	r3, [r7, #15]
    break;
 800a0c0:	e00b      	b.n	800a0da <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a0c2:	2302      	movs	r3, #2
 800a0c4:	73fb      	strb	r3, [r7, #15]
    break;
 800a0c6:	e008      	b.n	800a0da <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	73fb      	strb	r3, [r7, #15]
    break;
 800a0cc:	e005      	b.n	800a0da <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a0ce:	2302      	movs	r3, #2
 800a0d0:	73fb      	strb	r3, [r7, #15]
    break;
 800a0d2:	e002      	b.n	800a0da <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800a0d4:	2302      	movs	r3, #2
 800a0d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a0d8:	bf00      	nop
  }
  return usb_status;
 800a0da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0fe:	78fa      	ldrb	r2, [r7, #3]
 800a100:	4611      	mov	r1, r2
 800a102:	4618      	mov	r0, r3
 800a104:	f7f9 fbf6 	bl	80038f4 <HAL_PCD_EP_Close>
 800a108:	4603      	mov	r3, r0
 800a10a:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800a10c:	7bbb      	ldrb	r3, [r7, #14]
 800a10e:	2b03      	cmp	r3, #3
 800a110:	d816      	bhi.n	800a140 <USBD_LL_CloseEP+0x5c>
 800a112:	a201      	add	r2, pc, #4	; (adr r2, 800a118 <USBD_LL_CloseEP+0x34>)
 800a114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a118:	0800a129 	.word	0x0800a129
 800a11c:	0800a12f 	.word	0x0800a12f
 800a120:	0800a135 	.word	0x0800a135
 800a124:	0800a13b 	.word	0x0800a13b
    case HAL_OK :
      usb_status = USBD_OK;
 800a128:	2300      	movs	r3, #0
 800a12a:	73fb      	strb	r3, [r7, #15]
    break;
 800a12c:	e00b      	b.n	800a146 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a12e:	2302      	movs	r3, #2
 800a130:	73fb      	strb	r3, [r7, #15]
    break;
 800a132:	e008      	b.n	800a146 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a134:	2301      	movs	r3, #1
 800a136:	73fb      	strb	r3, [r7, #15]
    break;
 800a138:	e005      	b.n	800a146 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a13a:	2302      	movs	r3, #2
 800a13c:	73fb      	strb	r3, [r7, #15]
    break;
 800a13e:	e002      	b.n	800a146 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a140:	2302      	movs	r3, #2
 800a142:	73fb      	strb	r3, [r7, #15]
    break;
 800a144:	bf00      	nop
  }
  return usb_status;  
 800a146:	7bfb      	ldrb	r3, [r7, #15]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3710      	adds	r7, #16
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	460b      	mov	r3, r1
 800a15a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a15c:	2300      	movs	r3, #0
 800a15e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a160:	2300      	movs	r3, #0
 800a162:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a16a:	78fa      	ldrb	r2, [r7, #3]
 800a16c:	4611      	mov	r1, r2
 800a16e:	4618      	mov	r0, r3
 800a170:	f7f9 fc8a 	bl	8003a88 <HAL_PCD_EP_SetStall>
 800a174:	4603      	mov	r3, r0
 800a176:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a178:	7bbb      	ldrb	r3, [r7, #14]
 800a17a:	2b03      	cmp	r3, #3
 800a17c:	d816      	bhi.n	800a1ac <USBD_LL_StallEP+0x5c>
 800a17e:	a201      	add	r2, pc, #4	; (adr r2, 800a184 <USBD_LL_StallEP+0x34>)
 800a180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a184:	0800a195 	.word	0x0800a195
 800a188:	0800a19b 	.word	0x0800a19b
 800a18c:	0800a1a1 	.word	0x0800a1a1
 800a190:	0800a1a7 	.word	0x0800a1a7
    case HAL_OK :
      usb_status = USBD_OK;
 800a194:	2300      	movs	r3, #0
 800a196:	73fb      	strb	r3, [r7, #15]
    break;
 800a198:	e00b      	b.n	800a1b2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a19a:	2302      	movs	r3, #2
 800a19c:	73fb      	strb	r3, [r7, #15]
    break;
 800a19e:	e008      	b.n	800a1b2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a1a4:	e005      	b.n	800a1b2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a1a6:	2302      	movs	r3, #2
 800a1a8:	73fb      	strb	r3, [r7, #15]
    break;
 800a1aa:	e002      	b.n	800a1b2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a1ac:	2302      	movs	r3, #2
 800a1ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a1b0:	bf00      	nop
  }
  return usb_status;  
 800a1b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3710      	adds	r7, #16
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1d6:	78fa      	ldrb	r2, [r7, #3]
 800a1d8:	4611      	mov	r1, r2
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f7f9 fcae 	bl	8003b3c <HAL_PCD_EP_ClrStall>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800a1e4:	7bbb      	ldrb	r3, [r7, #14]
 800a1e6:	2b03      	cmp	r3, #3
 800a1e8:	d816      	bhi.n	800a218 <USBD_LL_ClearStallEP+0x5c>
 800a1ea:	a201      	add	r2, pc, #4	; (adr r2, 800a1f0 <USBD_LL_ClearStallEP+0x34>)
 800a1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f0:	0800a201 	.word	0x0800a201
 800a1f4:	0800a207 	.word	0x0800a207
 800a1f8:	0800a20d 	.word	0x0800a20d
 800a1fc:	0800a213 	.word	0x0800a213
    case HAL_OK :
      usb_status = USBD_OK;
 800a200:	2300      	movs	r3, #0
 800a202:	73fb      	strb	r3, [r7, #15]
    break;
 800a204:	e00b      	b.n	800a21e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a206:	2302      	movs	r3, #2
 800a208:	73fb      	strb	r3, [r7, #15]
    break;
 800a20a:	e008      	b.n	800a21e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a20c:	2301      	movs	r3, #1
 800a20e:	73fb      	strb	r3, [r7, #15]
    break;
 800a210:	e005      	b.n	800a21e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a212:	2302      	movs	r3, #2
 800a214:	73fb      	strb	r3, [r7, #15]
    break;
 800a216:	e002      	b.n	800a21e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a218:	2302      	movs	r3, #2
 800a21a:	73fb      	strb	r3, [r7, #15]
    break;
 800a21c:	bf00      	nop
  }
  return usb_status; 
 800a21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a220:	4618      	mov	r0, r3
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a228:	b480      	push	{r7}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	460b      	mov	r3, r1
 800a232:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a23a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800a23c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a240:	2b00      	cmp	r3, #0
 800a242:	da08      	bge.n	800a256 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800a244:	78fb      	ldrb	r3, [r7, #3]
 800a246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a24a:	68fa      	ldr	r2, [r7, #12]
 800a24c:	015b      	lsls	r3, r3, #5
 800a24e:	4413      	add	r3, r2
 800a250:	332a      	adds	r3, #42	; 0x2a
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	e008      	b.n	800a268 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800a256:	78fb      	ldrb	r3, [r7, #3]
 800a258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a25c:	68fa      	ldr	r2, [r7, #12]
 800a25e:	015b      	lsls	r3, r3, #5
 800a260:	4413      	add	r3, r2
 800a262:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800a266:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3714      	adds	r7, #20
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	460b      	mov	r3, r1
 800a27e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a280:	2300      	movs	r3, #0
 800a282:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a284:	2300      	movs	r3, #0
 800a286:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a28e:	78fa      	ldrb	r2, [r7, #3]
 800a290:	4611      	mov	r1, r2
 800a292:	4618      	mov	r0, r3
 800a294:	f7f9 faa9 	bl	80037ea <HAL_PCD_SetAddress>
 800a298:	4603      	mov	r3, r0
 800a29a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800a29c:	7bbb      	ldrb	r3, [r7, #14]
 800a29e:	2b03      	cmp	r3, #3
 800a2a0:	d816      	bhi.n	800a2d0 <USBD_LL_SetUSBAddress+0x5c>
 800a2a2:	a201      	add	r2, pc, #4	; (adr r2, 800a2a8 <USBD_LL_SetUSBAddress+0x34>)
 800a2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a8:	0800a2b9 	.word	0x0800a2b9
 800a2ac:	0800a2bf 	.word	0x0800a2bf
 800a2b0:	0800a2c5 	.word	0x0800a2c5
 800a2b4:	0800a2cb 	.word	0x0800a2cb
    case HAL_OK :
      usb_status = USBD_OK;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	73fb      	strb	r3, [r7, #15]
    break;
 800a2bc:	e00b      	b.n	800a2d6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a2be:	2302      	movs	r3, #2
 800a2c0:	73fb      	strb	r3, [r7, #15]
    break;
 800a2c2:	e008      	b.n	800a2d6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a2c8:	e005      	b.n	800a2d6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a2ca:	2302      	movs	r3, #2
 800a2cc:	73fb      	strb	r3, [r7, #15]
    break;
 800a2ce:	e002      	b.n	800a2d6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800a2d0:	2302      	movs	r3, #2
 800a2d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a2d4:	bf00      	nop
  }
  return usb_status;  
 800a2d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b086      	sub	sp, #24
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	607a      	str	r2, [r7, #4]
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	72fb      	strb	r3, [r7, #11]
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a302:	893b      	ldrh	r3, [r7, #8]
 800a304:	7af9      	ldrb	r1, [r7, #11]
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	f7f9 fb85 	bl	8003a16 <HAL_PCD_EP_Transmit>
 800a30c:	4603      	mov	r3, r0
 800a30e:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800a310:	7dbb      	ldrb	r3, [r7, #22]
 800a312:	2b03      	cmp	r3, #3
 800a314:	d816      	bhi.n	800a344 <USBD_LL_Transmit+0x64>
 800a316:	a201      	add	r2, pc, #4	; (adr r2, 800a31c <USBD_LL_Transmit+0x3c>)
 800a318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a31c:	0800a32d 	.word	0x0800a32d
 800a320:	0800a333 	.word	0x0800a333
 800a324:	0800a339 	.word	0x0800a339
 800a328:	0800a33f 	.word	0x0800a33f
    case HAL_OK :
      usb_status = USBD_OK;
 800a32c:	2300      	movs	r3, #0
 800a32e:	75fb      	strb	r3, [r7, #23]
    break;
 800a330:	e00b      	b.n	800a34a <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a332:	2302      	movs	r3, #2
 800a334:	75fb      	strb	r3, [r7, #23]
    break;
 800a336:	e008      	b.n	800a34a <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a338:	2301      	movs	r3, #1
 800a33a:	75fb      	strb	r3, [r7, #23]
    break;
 800a33c:	e005      	b.n	800a34a <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a33e:	2302      	movs	r3, #2
 800a340:	75fb      	strb	r3, [r7, #23]
    break;
 800a342:	e002      	b.n	800a34a <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800a344:	2302      	movs	r3, #2
 800a346:	75fb      	strb	r3, [r7, #23]
    break;
 800a348:	bf00      	nop
  }
  return usb_status;    
 800a34a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3718      	adds	r7, #24
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b086      	sub	sp, #24
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	607a      	str	r2, [r7, #4]
 800a35e:	461a      	mov	r2, r3
 800a360:	460b      	mov	r3, r1
 800a362:	72fb      	strb	r3, [r7, #11]
 800a364:	4613      	mov	r3, r2
 800a366:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a368:	2300      	movs	r3, #0
 800a36a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a36c:	2300      	movs	r3, #0
 800a36e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a376:	893b      	ldrh	r3, [r7, #8]
 800a378:	7af9      	ldrb	r1, [r7, #11]
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	f7f9 fafc 	bl	8003978 <HAL_PCD_EP_Receive>
 800a380:	4603      	mov	r3, r0
 800a382:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800a384:	7dbb      	ldrb	r3, [r7, #22]
 800a386:	2b03      	cmp	r3, #3
 800a388:	d816      	bhi.n	800a3b8 <USBD_LL_PrepareReceive+0x64>
 800a38a:	a201      	add	r2, pc, #4	; (adr r2, 800a390 <USBD_LL_PrepareReceive+0x3c>)
 800a38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a390:	0800a3a1 	.word	0x0800a3a1
 800a394:	0800a3a7 	.word	0x0800a3a7
 800a398:	0800a3ad 	.word	0x0800a3ad
 800a39c:	0800a3b3 	.word	0x0800a3b3
    case HAL_OK :
      usb_status = USBD_OK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	75fb      	strb	r3, [r7, #23]
    break;
 800a3a4:	e00b      	b.n	800a3be <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a3a6:	2302      	movs	r3, #2
 800a3a8:	75fb      	strb	r3, [r7, #23]
    break;
 800a3aa:	e008      	b.n	800a3be <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	75fb      	strb	r3, [r7, #23]
    break;
 800a3b0:	e005      	b.n	800a3be <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a3b2:	2302      	movs	r3, #2
 800a3b4:	75fb      	strb	r3, [r7, #23]
    break;
 800a3b6:	e002      	b.n	800a3be <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800a3b8:	2302      	movs	r3, #2
 800a3ba:	75fb      	strb	r3, [r7, #23]
    break;
 800a3bc:	bf00      	nop
  }
  return usb_status; 
 800a3be:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3718      	adds	r7, #24
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3da:	78fa      	ldrb	r2, [r7, #3]
 800a3dc:	4611      	mov	r1, r2
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7f9 fb04 	bl	80039ec <HAL_PCD_EP_GetRxCount>
 800a3e4:	4603      	mov	r3, r0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
	...

0800a3f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a3fc:	78fb      	ldrb	r3, [r7, #3]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d002      	beq.n	800a408 <HAL_PCDEx_LPM_Callback+0x18>
 800a402:	2b01      	cmp	r3, #1
 800a404:	d013      	beq.n	800a42e <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800a406:	e023      	b.n	800a450 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	699b      	ldr	r3, [r3, #24]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d007      	beq.n	800a420 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a410:	f000 f83c 	bl	800a48c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a414:	4b10      	ldr	r3, [pc, #64]	; (800a458 <HAL_PCDEx_LPM_Callback+0x68>)
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	4a0f      	ldr	r2, [pc, #60]	; (800a458 <HAL_PCDEx_LPM_Callback+0x68>)
 800a41a:	f023 0306 	bic.w	r3, r3, #6
 800a41e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a426:	4618      	mov	r0, r3
 800a428:	f7fe fc2d 	bl	8008c86 <USBD_LL_Resume>
    break;
 800a42c:	e010      	b.n	800a450 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a434:	4618      	mov	r0, r3
 800a436:	f7fe fc11 	bl	8008c5c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	699b      	ldr	r3, [r3, #24]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d005      	beq.n	800a44e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a442:	4b05      	ldr	r3, [pc, #20]	; (800a458 <HAL_PCDEx_LPM_Callback+0x68>)
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	4a04      	ldr	r2, [pc, #16]	; (800a458 <HAL_PCDEx_LPM_Callback+0x68>)
 800a448:	f043 0306 	orr.w	r3, r3, #6
 800a44c:	6113      	str	r3, [r2, #16]
    break;   
 800a44e:	bf00      	nop
}
 800a450:	bf00      	nop
 800a452:	3708      	adds	r7, #8
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	e000ed00 	.word	0xe000ed00

0800a45c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a464:	4b03      	ldr	r3, [pc, #12]	; (800a474 <USBD_static_malloc+0x18>)
}
 800a466:	4618      	mov	r0, r3
 800a468:	370c      	adds	r7, #12
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	2000031c 	.word	0x2000031c

0800a478 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]

}
 800a480:	bf00      	nop
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a48c:	b480      	push	{r7}
 800a48e:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800a490:	bf00      	nop
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr
	...

0800a49c <__libc_init_array>:
 800a49c:	b570      	push	{r4, r5, r6, lr}
 800a49e:	4e0d      	ldr	r6, [pc, #52]	; (800a4d4 <__libc_init_array+0x38>)
 800a4a0:	4c0d      	ldr	r4, [pc, #52]	; (800a4d8 <__libc_init_array+0x3c>)
 800a4a2:	1ba4      	subs	r4, r4, r6
 800a4a4:	10a4      	asrs	r4, r4, #2
 800a4a6:	2500      	movs	r5, #0
 800a4a8:	42a5      	cmp	r5, r4
 800a4aa:	d109      	bne.n	800a4c0 <__libc_init_array+0x24>
 800a4ac:	4e0b      	ldr	r6, [pc, #44]	; (800a4dc <__libc_init_array+0x40>)
 800a4ae:	4c0c      	ldr	r4, [pc, #48]	; (800a4e0 <__libc_init_array+0x44>)
 800a4b0:	f000 f836 	bl	800a520 <_init>
 800a4b4:	1ba4      	subs	r4, r4, r6
 800a4b6:	10a4      	asrs	r4, r4, #2
 800a4b8:	2500      	movs	r5, #0
 800a4ba:	42a5      	cmp	r5, r4
 800a4bc:	d105      	bne.n	800a4ca <__libc_init_array+0x2e>
 800a4be:	bd70      	pop	{r4, r5, r6, pc}
 800a4c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a4c4:	4798      	blx	r3
 800a4c6:	3501      	adds	r5, #1
 800a4c8:	e7ee      	b.n	800a4a8 <__libc_init_array+0xc>
 800a4ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a4ce:	4798      	blx	r3
 800a4d0:	3501      	adds	r5, #1
 800a4d2:	e7f2      	b.n	800a4ba <__libc_init_array+0x1e>
 800a4d4:	0800a5d0 	.word	0x0800a5d0
 800a4d8:	0800a5d0 	.word	0x0800a5d0
 800a4dc:	0800a5d0 	.word	0x0800a5d0
 800a4e0:	0800a5d8 	.word	0x0800a5d8

0800a4e4 <memset>:
 800a4e4:	4402      	add	r2, r0
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d100      	bne.n	800a4ee <memset+0xa>
 800a4ec:	4770      	bx	lr
 800a4ee:	f803 1b01 	strb.w	r1, [r3], #1
 800a4f2:	e7f9      	b.n	800a4e8 <memset+0x4>

0800a4f4 <strncpy>:
 800a4f4:	b570      	push	{r4, r5, r6, lr}
 800a4f6:	3901      	subs	r1, #1
 800a4f8:	4604      	mov	r4, r0
 800a4fa:	b902      	cbnz	r2, 800a4fe <strncpy+0xa>
 800a4fc:	bd70      	pop	{r4, r5, r6, pc}
 800a4fe:	4623      	mov	r3, r4
 800a500:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800a504:	f803 5b01 	strb.w	r5, [r3], #1
 800a508:	1e56      	subs	r6, r2, #1
 800a50a:	b92d      	cbnz	r5, 800a518 <strncpy+0x24>
 800a50c:	4414      	add	r4, r2
 800a50e:	42a3      	cmp	r3, r4
 800a510:	d0f4      	beq.n	800a4fc <strncpy+0x8>
 800a512:	f803 5b01 	strb.w	r5, [r3], #1
 800a516:	e7fa      	b.n	800a50e <strncpy+0x1a>
 800a518:	461c      	mov	r4, r3
 800a51a:	4632      	mov	r2, r6
 800a51c:	e7ed      	b.n	800a4fa <strncpy+0x6>
	...

0800a520 <_init>:
 800a520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a522:	bf00      	nop
 800a524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a526:	bc08      	pop	{r3}
 800a528:	469e      	mov	lr, r3
 800a52a:	4770      	bx	lr

0800a52c <_fini>:
 800a52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52e:	bf00      	nop
 800a530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a532:	bc08      	pop	{r3}
 800a534:	469e      	mov	lr, r3
 800a536:	4770      	bx	lr
